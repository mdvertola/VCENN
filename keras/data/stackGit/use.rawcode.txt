in foo = 12 foo in (obj.id for obj in bar)  obj.id == 12 bar bar hasattr bar id foo = 12 foo in (obj.id for obj in bar if hasattr(obj 'id'))  
groups = [] uniquekeys = [] for k g in groupby(data keyfunc):    groups.append(list(g))    # Store group iterator as a list    uniquekeys.append(k)  k g groupby from itertools import groupby  things = [(&quot;animal&quot; &quot;bear&quot;) (&quot;animal&quot; &quot;duck&quot;) (&quot;plant&quot; &quot;cactus&quot;) (&quot;vehicle&quot; &quot;speed boat&quot;) (&quot;vehicle&quot; &quot;school bus&quot;)]  for key group in groupby(things lambda x: x[0]):     for thing in group:         print(&quot;A %s is a %s.&quot; % (thing[1] key))     print(&quot;&quot;)       things groupby() lambda x: x[0] groupby() for groupby for key group in groupby(things lambda x: x[0]):     listOfThings = &quot; and &quot;.join([thing[1] for thing in group])     print(key + &quot;s:  &quot; + listOfThings + &quot;.&quot;)  
 """ Create an G{nm} random graph with n nodes and m edges and report some properties.  This graph is sometimes called the Erd##[m~Qs-Rényi graph but is different from G{np} or binomial_graph which is also sometimes called the Erd##[m~Qs-Rényi graph. """ __author__ = """Aric Hagberg (hagberg@lanl.gov)""" __credits__ = """""" #    Copyright (C) 2004-2006 by  #    Aric Hagberg  #    Dan Schult  #    Pieter Swart  #    Distributed under the terms of the GNU Lesser General Public License #    http://www.gnu.org/copyleft/lesser.html  from networkx import * import sys  n=10 # 10 nodes m=20 # 20 edges  G=gnm_random_graph(nm)  # some properties print "node degree clustering" for v in nodes(G):     print vdegree(Gv)clustering(Gv)  # print the adjacency list to terminal  write_adjlist(Gsys.stdout)  
&gt;&gt;&gt; 0b101111 47  &gt;&gt;&gt; bin(173) '0b10101101'  
import msvcrt answer=msvcrt.getch()  
rb f = open (locfile "rb")  
foo bar import foo method_to_call = getattr(foo 'bar') result = method_to_call()  result = getattr(foo 'bar')()  getattr 
$ python -c 'import sys codecs locale; print sys.stdout.encoding; \     sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \     line = u"\u0411\n"; print type(line) len(line); \     sys.stdout.write(line); print line'   UTF-8   &lt;type 'unicode'&gt; 2   ?   ?    $ python -c 'import sys codecs locale; print sys.stdout.encoding; \     sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \     line = u"\u0411\n"; print type(line) len(line); \     sys.stdout.write(line); print line' | cat   None   &lt;type 'unicode'&gt; 2   ?   ?  
import urllib os link = "http://python.org" print "opening url:" link site = urllib.urlopen(link) meta = site.info() print "Content-Length:" meta.getheaders("Content-Length")[0]  f = open("out.txt" "r") print "File on disk:"len(f.read()) f.close()   f = open("out.txt" "w") f.write(site.read()) site.close() f.close()  f = open("out.txt" "r") print "File on disk after download:"len(f.read()) f.close()  print "os.stat().st_size returns:" os.stat("out.txt").st_size  opening url: http://python.org Content-Length: 16535 File on disk: 16535 File on disk after download: 16535 os.stat().st_size returns: 16861  import urllib os link = "http://python.org" print "opening url:" link site = urllib.urlopen(link) meta = site.info() print "Content-Length:" meta.getheaders("Content-Length")[0]  f = open("out.txt" "rb") print "File on disk:"len(f.read()) f.close()   f = open("out.txt" "wb") f.write(site.read()) site.close() f.close()  f = open("out.txt" "rb") print "File on disk after download:"len(f.read()) f.close()  print "os.stat().st_size returns:" os.stat("out.txt").st_size  $ python test.py opening url: http://python.org Content-Length: 16535 File on disk: 16535 File on disk after download: 16535 os.stat().st_size returns: 16535  // open for binary write open(filename "wb") // open for binary read open(filename "rb")  
classobj classobj import new myexc=new.classobj("ExcName"(Exception){}) i=myexc("This is the exc msg!") raise i  Traceback (most recent call last): File "&lt;stdin&gt;" line 1 in &lt;module&gt; __main__.ExcName: This is the exc msg!  self.__class__.__name__  raise(self.__class__.__name__+"Exception")  
sqlalchemy.default.url = [connection string here] sqlalchemy.pool_recycle = 1800  environment.py sqlalchemy.default pool_recycle sqlalchemy.default.pool_recycle = 1800  
signum = status &amp; 0xff exitstatus = (status &amp; 0xff00) &gt;&gt; 8  
   &gt;&gt;&gt; x    Traceback (most recent call last):      ...    NameError: name 'x' is not defined  
foreach for for(int i = 0; i &lt; intArray.Length; ++i) {     if(intArray[i] &gt; 3) ++intArray[i]; }  var newArray1 = from i in intArray select ((i &gt; 3) ? (i + 1) : (i)); var newArray2 = intArray.Select(i =&gt; (i &gt; 3) ? (i + 1) : (i));  where var intArray = new int[] { 10 1 20 2 }; var newArray = from i in intArray where i &gt; 3 select i + 1; // newArray == { 11 21 }  ForEach foreach foreach intArray.ForEach(i =&gt; DoSomething(i));  
string-escape &gt;&gt;&gt; mystring = r"This is \n a test \r" &gt;&gt;&gt; mystring.decode('string-escape') 'This is \n a test \r' &gt;&gt;&gt; print mystring.decode('string-escape') This is   a test  &gt;&gt;&gt;   
import sys sys.stdout.write('\a') sys.stdout.flush()  print('\a')  
[\u0000-\uFFFF] re.UNICODE UNICODE \w [0-9_] 
from StringIO import StringIO  from lxml import etree  dtd = etree.DTD(StringIO("""&lt;!ELEMENT foo EMPTY&gt;""")) root = etree.XML("&lt;foo/&gt;") print(dtd.validate(root)) # True  root = etree.XML("&lt;foo&gt;bar&lt;/foo&gt;") print(dtd.validate(root)) # False print(dtd.error_log.filter_from_errors()) # &lt;string&gt;:1:0:ERROR:VALID:DTD_NOT_EMPTY: Element foo was declared EMPTY this one has content  
entry_points.console_scripts from setuptools import setup  setup(     # other arguments here...     entry_points = {         'console_scripts': [             'foo = package.module:func'             'bar = othermodule:somefunc'         ]     } )  
filter names = filter(lambda name: name[-5:] != "Smith" names) names = [name for name in names if name[-5:] != "Smith"] True 
checker = {   ...   'required': ['file' 'list' 'for_required'] }  check_dict = {   'delim'    : /\-/   'parts'    : [ 'Show Name' 'Episode Name' 'Episode Number' ]   'patterns' : [/valid name/ /valid episode name/ /valid number/ ]   'required' : ['list' 'of' 'files']   'ignored'  : ['.*' 'hidden.txt']   'start_dir': '/path/to/dir/to/test/' }  parts patterns . .. svn:ignore start_dir parts 
zip &gt;&gt;&gt; zip(*[('a' 1) ('b' 2) ('c' 3) ('d' 4)]) [('a' 'b' 'c' 'd') (1 2 3 4)]  zip zip(('a' 1) ('b' 2) ('c' 3) ('d' 4))  zip 
if os.path.exists(path):     os.unlink(path)  try:     os.stat(path) except OSError e:     if e.errno == errno.ENOENT:         print 'path %s does not exist or is a broken symlink' % path     else:         raise e  if not os.path.exists(os.readlink(path)):     print 'path %s is a broken symlink' % path  
hours minutes seconds = 6 56 33 f'{hours:02}:{minutes:02}:{seconds:02} {"pm" if hours &gt; 12 else "am"}'  str.format "{:02}:{:02}:{:02} {}".format(hours minutes seconds "pm" if hours &gt; 12 else "am")  % "%02d:%02d:%02d" % (hours minutes seconds)  time.strftime import time  t = (0 0 0 hours minutes seconds 0 0 0) time.strftime('%I:%M:%S %p' t)  
urllib.request.urlopen() import urllib.request with urllib.request.urlopen('http://www.example.com/') as f:     html = f.read().decode('utf-8')  urllib2 import urllib2 response = urllib2.urlopen('http://www.example.com/') html = response.read()  
C.__bases__ def magicGetSuperClasses(cls):   return cls.__bases__  cls.__bases__ 
is True == __eq__()  >>> class Foo(object):        def __eq__(self other):            return True  >>> f = Foo() >>> f == None True >>> f is None False  
function subst($str $dict){     return preg_replace(array_map(create_function('$a' 'return "/%\\($a\\)s/";') array_keys($dict)) array_values($dict) $str);  }  echo subst('The %(site)s site %(adj)s because it %(adj)s' array('site'=&gt;'Stackoverflow' 'adj'=&gt;'rocks'));  
while x=next():     // do something here!  while 1:     x = next()     if x != END:         // Blah     else:         break  class Pita( object ):     __slots__ = ('pocket')     marker = object()     def __init__(self v=marker):         if v is not self.marker:             self.pocket = v     def __call__(self v=marker):         if v is not self.marker:             self.pocket = v         return self.pocket  p = Pita() while p( next() ) != END:     // do stuff with p.pocket!  __call__ 
node.noSuchAttr = 'bar' minidom ElementTree import sys from xml.etree.cElementTree import Element ElementTree  def make_xml():     node = Element('foo')     node.text = 'bar'     doc = ElementTree(node)     return doc  if __name__ == '__main__':     make_xml().write(sys.stdout)  
&lt;li&gt; &lt;/li&gt; 
from parameterized import parameterized  class TestSequence(unittest.TestCase):     @parameterized.expand([         ["foo" "a" "a"]         ["bar" "a" "b"]         ["lee" "b" "b"]     ])     def test_sequence(self name a b):         self.assertEqual(ab)  test_sequence_0_foo (__main__.TestSequence) ... ok test_sequence_1_bar (__main__.TestSequence) ... FAIL test_sequence_2_lee (__main__.TestSequence) ... ok  ====================================================================== FAIL: test_sequence_1_bar (__main__.TestSequence) ---------------------------------------------------------------------- Traceback (most recent call last):   File "/usr/local/lib/python2.7/site-packages/parameterized/parameterized.py" line 233 in &lt;lambda&gt;     standalone_func = lambda *a: func(*(a + p.args) **p.kwargs)   File "x.py" line 12 in test_sequence     self.assertEqual(ab) AssertionError: 'a' != 'b'  import unittest  l = [["foo" "a" "a"] ["bar" "a" "b"] ["lee" "b" "b"]]  class TestSequense(unittest.TestCase):     pass  def test_generator(a b):     def test(self):         self.assertEqual(ab)     return test  if __name__ == '__main__':     for t in l:         test_name = 'test_%s' % t[0]         test = test_generator(t[1] t[2])         setattr(TestSequense test_name test)     unittest.main()  
s = p.stderr.readline()  
B.name B.__dict__ b = B(); b.__dict__ b.name B.name 
def shellquote(s):     return "'" + s.replace("'" "'\\''") + "'"  
from google.appengine.ext import webapp  register = webapp.template.create_template_register()  def hash(hkey):     if key in h:         return h[key]     else:         return None  register.filter(hash)  webapp.template.register_template_library('django_hack')  {{ user|hash:item }}  
*args **kwargs *args def foo(*args):     for a in args:         print(a)          foo(1) # 1  foo(123) # 1 # 2 # 3  **kwargs def bar(**kwargs):     for a in kwargs:         print(a kwargs[a])    bar(name='one' age=27) # age 27 # name one  def foo(kind *args **kwargs):    pass  def foo(a b c):     print(a b c)  obj = {'b':10 'c':'lee'}  foo(100**obj) # 100 10 lee  *l def foo(bar lee):     print(bar lee)  l = [12]  foo(*l) # 1 2  *l first *rest = [1234] first *l last = [1234]  def func(arg1 arg2 arg3 * kwarg1 kwarg2):     pass  * 
bool def HTMLDecorator (obj):     def html ():         sep = cgi.escape (repr (obj))         return sep.join (("&lt;H1&gt;" "&lt;/H1&gt;"))     obj.html = html     return obj  class HTMLDecorator(object):     def __init__ (self wrapped):         self.__wrapped = wrapped      def html (self):         sep = cgi.escape (repr (self.__wrapped))         return sep.join (("&lt;H1&gt;" "&lt;/H1&gt;"))      def __getattr__ (self name):         return getattr (self.__wrapped name)      def __setattr__ (self name value):         if not name.startswith ('_HTMLDecorator__'):             setattr (self.__wrapped name value)             return         super (HTMLDecorator self).__setattr__ (name value)      def __delattr__ (self name):         delattr (self.__wraped name)  
 &gt;&gt;&gt; import os.path  &gt;&gt;&gt; os.path.exists("/proc/0")  False  &gt;&gt;&gt; os.path.exists("/proc/12")  True  
Popen Popen ProcessOpen 
MyClass classmethod 
TIMESTAMP WITH (LOCAL) TIME ZONE TIMESTAMP TO_CHAR TIMESTAMP TIMESTAMP WITH TIME ZONE TIMESTAMP TIMESTAMP WITH TIME ZONE TIMESTAMP 
from django import forms from my_app.models import Product from django.contrib.admin import widgets                                         class ProductForm(forms.ModelForm):     class Meta:         model = Product     def __init__(self *args **kwargs):         super(ProductForm self).__init__(*args **kwargs)         self.fields['mydate'].widget = widgets.AdminDateWidget()         self.fields['mytime'].widget = widgets.AdminTimeWidget()         self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()  &lt;script type="text/javascript" src="/my_admin/jsi18n/"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/media/admin/js/core.js"&gt;&lt;/script&gt;  &lt;link rel="stylesheet" type="text/css" href="/media/admin/css/forms.css"/&gt; &lt;link rel="stylesheet" type="text/css" href="/media/admin/css/base.css"/&gt; &lt;link rel="stylesheet" type="text/css" href="/media/admin/css/global.css"/&gt; &lt;link rel="stylesheet" type="text/css" href="/media/admin/css/widgets.css"/&gt;  (r'^my_admin/jsi18n' 'django.views.i18n.javascript_catalog')  {% load adminmedia %} /* At the top of the template. */  /* In the head section of the template. */ &lt;script type="text/javascript"&gt; window.__admin_media_prefix__ = "{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}"; &lt;/script&gt;  
x y z y x z = {**x **y}  def merge_two_dicts(x y):     z = x.copy()   # start with x's keys and values     z.update(y)    # modifies z with y's keys and values &amp; returns None     return z  z = merge_two_dicts(x y)  z = x | y          # NOTE: 3.9+ ONLY  x = {'a': 1 'b': 2} y = {'b': 3 'c': 4}  z &gt;&gt;&gt; z {'a': 1 'b': 3 'c': 4}  z = {**x **y}  z = {**x 'foo': 1 'bar': 2 **y}  &gt;&gt;&gt; z {'a': 1 'b': 3 'foo': 1 'bar': 2 'c': 4}  z = x.copy() z.update(y) # which returns None since it mutates z  y x 'b' 3 def merge_two_dicts(x y):     &quot;&quot;&quot;Given two dictionaries merge them into a new dict as a shallow copy.&quot;&quot;&quot;     z = x.copy()     z.update(y)     return z  z = merge_two_dicts(x y)  def merge_dicts(*dict_args):     &quot;&quot;&quot;     Given any number of dictionaries shallow copy and merge into a new dict     precedence goes to key value pairs in latter dictionaries.     &quot;&quot;&quot;     result = {}     for dictionary in dict_args:         result.update(dictionary)     return result  a g z = merge_dicts(a b c d e f g)   g a f z = dict(x.items() + y.items())  dict_items &gt;&gt;&gt; c = dict(a.items() + b.items()) Traceback (most recent call last):   File &quot;&lt;stdin&gt;&quot; line 1 in &lt;module&gt; TypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'  z = dict(list(x.items()) + list(y.items())) items() viewitems() &gt;&gt;&gt; c = dict(a.items() | b.items())  &gt;&gt;&gt; x = {'a': []} &gt;&gt;&gt; y = {'b': []} &gt;&gt;&gt; dict(x.items() | y.items()) Traceback (most recent call last):   File &quot;&lt;stdin&gt;&quot; line 1 in &lt;module&gt; TypeError: unhashable type: 'list'  &gt;&gt;&gt; x = {'a': 2} &gt;&gt;&gt; y = {'a': 1} &gt;&gt;&gt; dict(x.items() | y.items()) {'a': 2}  z = dict(x **y)  dict &gt;&gt;&gt; c = dict(a **b) Traceback (most recent call last):   File &quot;&lt;stdin&gt;&quot; line 1 in &lt;module&gt; TypeError: keyword arguments must be strings  dict(**y) dict(a=1 b=10 c=11)  {'a': 1 'b': 10 'c': 11}  dict(x **y) dict &gt;&gt;&gt; foo(**{('a' 'b'): None}) Traceback (most recent call last):   File &quot;&lt;stdin&gt;&quot; line 1 in &lt;module&gt; TypeError: foo() keywords must be strings &gt;&gt;&gt; dict(**{('a' 'b'): None}) {('a' 'b'): None}  dict(x.items() + y.items()) merge_two_dicts(x y) {**x **y} from copy import deepcopy  def dict_of_dicts_merge(x y):     z = {}     overlapping_keys = x.keys() &amp; y.keys()     for key in overlapping_keys:         z[key] = dict_of_dicts_merge(x[key] y[key])     for key in x.keys() - overlapping_keys:         z[key] = deepcopy(x[key])     for key in y.keys() - overlapping_keys:         z[key] = deepcopy(y[key])     return z  &gt;&gt;&gt; x = {'a':{1:{}} 'b': {2:{}}} &gt;&gt;&gt; y = {'b':{10:{}} 'c': {11:{}}} &gt;&gt;&gt; dict_of_dicts_merge(x y) {'b': {2: {} 10: {}} 'a': {1: {}} 'c': {11: {}}}  copy update {k: v for d in dicts for k v in d.items()} # iteritems in Python 2.7  dict((k v) for d in dicts for k v in d.items()) # iteritems in Python 2  itertools.chain from itertools import chain z = dict(chain(x.items() y.items())) # iteritems in Python 2  from timeit import repeat from itertools import chain  x = dict.fromkeys('abcdefg') y = dict.fromkeys('efghijk')  def merge_two_dicts(x y):     z = x.copy()     z.update(y)     return z  min(repeat(lambda: {**x **y})) min(repeat(lambda: merge_two_dicts(x y))) min(repeat(lambda: {k: v for d in (x y) for k v in d.items()})) min(repeat(lambda: dict(chain(x.items() y.items())))) min(repeat(lambda: dict(item for d in (x y) for item in d.items())))  &gt;&gt;&gt; min(repeat(lambda: {**x **y})) 1.0804965235292912 &gt;&gt;&gt; min(repeat(lambda: merge_two_dicts(x y))) 1.636518670246005 &gt;&gt;&gt; min(repeat(lambda: {k: v for d in (x y) for k v in d.items()})) 3.1779992282390594 &gt;&gt;&gt; min(repeat(lambda: dict(chain(x.items() y.items())))) 2.740647904574871 &gt;&gt;&gt; min(repeat(lambda: dict(item for d in (x y) for item in d.items()))) 4.266070580109954  $ uname -a Linux nixos 4.19.113 #1-NixOS SMP Wed Mar 25 07:06:15 UTC 2020 x86_64 GNU/Linux  
from tempfile import mkstemp from shutil import move copymode from os import fdopen remove  def replace(file_path pattern subst):     #Create temp file     fh abs_path = mkstemp()     with fdopen(fh'w') as new_file:         with open(file_path) as old_file:             for line in old_file:                 new_file.write(line.replace(pattern subst))     #Copy the file permissions from the old file to the new file     copymode(file_path abs_path)     #Remove original file     remove(file_path)     #Move new file     move(abs_path file_path)  
window globals() globals()["foo"]  window["foo"]  
os.system('xdg-open "%s"' % foldername)  xdg-open 
re.sub re.sub(pattern repl string[ count flags])  re.MULTILINE re.sub('^//' '' s flags=re.MULTILINE)  re.sub(re.compile('^//' re.MULTILINE) '' s)  
def check_commit_msg(local master old_revno old_revid new_revno new_revid):     branch = local or master     revision = branch.repository.get_revision(new_revid)     print revision.message  
{% url %} django.core.urlresolvers.reverse() reverse reverse(viewname urlconf=None args=None kwargs=None)  django.urls import reverse 
-2 
__init__.py 
my_list = ['a' 'b' 'c' 'd'] my_string = ''.join(my_list)  'abcd'  my_string = ''.join(map(str my_list))   
import * 
from project import Project  controllers/__init__.py project from .project import Project  
get_absolute_url (r'^manage/products/add/$' create_object {'model': Product 'post_save_redirect': ''} "create-product")  {% url create-product %}  {% url 'create-product' %}  
def gen():     return (something for something in get_some_stuff())  print gen()[:2]     # generators don't support indexing or slicing print [56] + gen() # generators can't be added to lists  
core.exceptions python setup.py install 
execfile("p2.py")  import inspect os print (inspect.getfile(inspect.currentframe()) # script filename (usually with path) print (os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))) # script directory  
t1 t2 = datetime.time(...) datetime.time(...)  t1_ms = (t1.hour*60*60 + t1.minute*60 + t1.second)*1000 + t1.microsecond t2_ms = (t2.hour*60*60 + t2.minute*60 + t2.second)*1000 + t2.microsecond  delta_ms = max([t1_ms t2_ms]) - min([t1_ms t2_ms])  
methodB("argvalue" **kwargs)  
&gt;&gt;&gt; import os &gt;&gt;&gt; os.path.abspath("mydir/myfile.txt") 'C:/example/cwd/mydir/myfile.txt'  &gt;&gt;&gt; import os &gt;&gt;&gt; os.path.abspath("C:/example/cwd/mydir/myfile.txt") 'C:/example/cwd/mydir/myfile.txt'  
create materialized view mv_so_x  build immediate  refresh complete  START WITH SYSDATE NEXT SYSDATE + 1/24/60  as select count(*)avg(a)avg(b)avg(c)avg(d) from so_x;  SQL&gt; select * from mv_so_x;  no rows selected  Elapsed: 00:00:00.00  SQL&gt; select count(*)avg(a)avg(b)avg(c)avg(d) from so_x;    COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D) ---------- ---------- ---------- ---------- ----------    1899459 7495.38839 22.2905454 5.00276131 2.13432836  Elapsed: 00:00:05.74 SQL&gt; select * from mv_so_x;    COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D) ---------- ---------- ---------- ---------- ----------    1899459 7495.38839 22.2905454 5.00276131 2.13432836  Elapsed: 00:00:00.00 SQL&gt;   SQL&gt; insert into so_x values (12345);  1 row created.  Elapsed: 00:00:00.00 SQL&gt; commit;  Commit complete.  Elapsed: 00:00:00.00 SQL&gt; select * from mv_so_x;    COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D) ---------- ---------- ---------- ---------- ----------    1899459 7495.38839 22.2905454 5.00276131 2.13432836  Elapsed: 00:00:00.00 SQL&gt;   SQL&gt; /    COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D) ---------- ---------- ---------- ---------- ----------    1899460 7495.35823 22.2905352 5.00276078 2.17647059  Elapsed: 00:00:00.00 SQL&gt;   
a = dostuff(blahblah1 blahblah2 blahblah3 blahblah4 blahblah5              blahblah6 blahblah7)  if a == True and \    b == False  a = '1' + '2' + '3' + \     '4' + '5'  a = ('1' + '2' + '3' +     '4' + '5')  
if not a:   print("List is empty")  list 
dev import math from datetime import datetime timedelta date from random import gauss  how_many_responses = 1000 start_date = date(2008 5 1) end_date = date(2008 6 1) num_days = (end_date - start_date).days + 1 timeline = [start_date + timedelta(i) for i in xrange(num_days)]  def weibull(x k l):     return (k / l) * (x / l)**(k-1) * math.e**(-(x/l)**k)  dev = 0.1 samples = [i * 1.25/(num_days-1) for i in range(num_days)] probs = [weibull(i 2 0.5) for i in samples] noise = [gauss(0 dev) for i in samples] simdata = [max(0. e + n) for (e n) in zip(probs noise)] events = [int(p * (how_many_responses / sum(probs))) for p in simdata]  histogram = zip(timeline events)  print '\n'.join((d.strftime('%Y-%m-%d ') + "*" * c) for dc in histogram)  
from BeautifulSoup import BeautifulSoup  #Or retrieve it from the web etc.  html_data = open('/yourwebsite/page.html''r').read()  #Create the soup object from the HTML data soup = BeautifulSoup(html_data) fooId = soup.find('input'name='fooId'type='hidden') #Find the proper tag value = fooId.attrs[2][1] #The value of the third attribute of the desired tag                            #or index it directly via fooId['value']  
from xml.dom.minidom import parseString  doc = parseString("""&lt;html&gt;     &lt;head&gt;         &lt;script type="text/javascript"&gt;             var a = 'I love &amp;amp;aacute; letters'         &lt;/script&gt;     &lt;/head&gt;     &lt;body&gt;         &lt;h1&gt;And I like the fact that 3 &amp;gt; 1&lt;/h1&gt;     &lt;/body&gt;     &lt;/html&gt;""")  with open("foo.xhtml" "w") as f:     f.write( doc.toxml() )  var a = '%(message)s'  &lt;/html&gt;""" % {"message": "I love &amp;amp;aacute; letters"})  
'%.1f' % round(n 1) # Gives you '5.6'  
import HTMLParser h = HTMLParser.HTMLParser() h.unescape('&amp;copy; 2010') # u'\xa9 2010' h.unescape('&amp;#169; 2010') # u'\xa9 2010'  import html html.unescape('&amp;copy; 2010') # u'\xa9 2010' html.unescape('&amp;#169; 2010') # u'\xa9 2010'  
"""@package docstring Documentation for this module.  More details. """  def func():     """Documentation for a function.      More details.     """     pass  # ## @package pyexample #  Documentation for this module. # #  More details.  ## Documentation for a function. # #  More details. def func():     pass  OPTMIZE_OUTPUT_JAVA YES 
from random import randint      mcworks = []  for n in xrange(NUM_ITERATIONS):     mctest = [randint(0 100) for i in xrange(5)]     if sum(mctest[:3])/3 == mcavg[2]:         mcworks.append(mctest) # mcavg is real data  mctest random.randint sum mcworks 
for e in s:     break # e is now an element from s  e = next(iter(s))  
def f(x):     return {         'a': 1         'b': 2     }[x]  
__init__.py import __init__.py setup.py distutils.setup setup from distutils import setup import os  for path in [my_package_directories]:     filename = os.path.join(pagh '__init__.py')     if not os.path.exists(filename):         init = open(filename 'w')         init.close()  setup( ... )  __init__.py 
from threading import Thread from SocketServer import ThreadingMixIn from BaseHTTPServer import HTTPServer BaseHTTPRequestHandler  class Handler(BaseHTTPRequestHandler):     def do_GET(self):         self.send_response(200)         self.send_header("Content-type" "text/plain")         self.end_headers()         self.wfile.write("Hello World!")  class ThreadingHTTPServer(ThreadingMixIn HTTPServer):     daemon_threads = True  def serve_on_port(port):     server = ThreadingHTTPServer(("localhost"port) Handler)     server.serve_forever()  Thread(target=serve_on_port args=[1111]).start() serve_on_port(2222)  from socketserver import ThreadingMixIn from http.server import HTTPServer BaseHTTPRequestHandler  self.wfile.write(bytes("Hello World!" "utf-8"))  
#!/usr/bin/env python  TEST1=""" #include "Foo.h" #define bar foo\\     x #include "Bar.h" """  TEST2=""" #define bar foo #define x 1 \\     12 \\     2 \\\\ 3 Foobar """  TEST3=""" #define foo(x) if(x) \\ doSomething(x) """  TEST4=""" #define foo(x) if(x) \\ doSomething(x) normalCode(); """  import re matcher = re.compile(r"^[ \t]*#define(.*\\\n)+.*$"re.MULTILINE)  def extractDefines(s):     mo = matcher.search(s)     if not mo:         print mo         return     print mo.group(0)  extractDefines(TEST1) extractDefines(TEST2) extractDefines(TEST3) extractDefines(TEST4)  r"^[ \t]*#define(.*\\\n)+.*$"  
class Foo(object):    ...  __dict__ __dict__ &gt;&gt;&gt; class A(object): ...   def __init__(self): ...     self.b = 1 ...     self.c = 2 ...   def do_nothing(self): ...     pass ... &gt;&gt;&gt; a = A() &gt;&gt;&gt; a.__dict__ {'c': 2 'b': 1}  vars &gt;&gt;&gt; vars(a) {'c': 2 'b': 1}  dict getattr setattr class Foo(dict):     def __init__(self):         pass     def __getattr__(self attr):         return self[attr]      # etc...  
divmod() q r = divmod(x y) # ((x - x%y)/y x%y) Invariant: div*y + mod == x  zip enumerate dict.items for i e in enumerate([1 3 3]):     print "index=%d element=%s" % (i e)  # reverse keys and values in a dictionary d = dict((v k) for k v in adict.items()) # or  d = dict(zip(adict.values() adict.keys()))  (x y) Point(x y) &gt;&gt;&gt; import collections &gt;&gt;&gt; Point = collections.namedtuple('Point' 'x y') &gt;&gt;&gt; x y = Point(0 1) &gt;&gt;&gt; p = Point(x y) &gt;&gt;&gt; x y p (0 1 Point(x=0 y=1)) &gt;&gt;&gt; p.x p.y p[0] p[1] (0 1 0 1) &gt;&gt;&gt; for i in p: ...   print(i) ... 0 1  
path = os.path.join(os.path.dirname(__file__) '..' 'templates' 'myPage.html')  
#! /usr/local/bin/python   SMTPserver = 'smtp.att.yahoo.com' sender =     'me@my_email_domain.net' destination = ['recipient@her_email_domain.com']  USERNAME = "USER_NAME_FOR_INTERNET_SERVICE_PROVIDER" PASSWORD = "PASSWORD_INTERNET_SERVICE_PROVIDER"  # typical values for text_subtype are plain html xml text_subtype = 'plain'   content="""\ Test message """  subject="Sent from Python"  import sys import os import re  from smtplib import SMTP_SSL as SMTP       # this invokes the secure SMTP protocol (port 465 uses SSL) # from smtplib import SMTP                  # use this for standard SMTP protocol   (port 25 no encryption)  # old version # from email.MIMEText import MIMEText from email.mime.text import MIMEText  try:     msg = MIMEText(content text_subtype)     msg['Subject']=       subject     msg['From']   = sender # some SMTP servers will do this automatically not all      conn = SMTP(SMTPserver)     conn.set_debuglevel(False)     conn.login(USERNAME PASSWORD)     try:         conn.sendmail(sender destination msg.as_string())     finally:         conn.quit()  except:     sys.exit( "mail failed; %s" % "CUSTOM_ERROR" ) # give an error message  
sre 
class Parent(object):     def bar(self):         print "bar"  class MetaFoo(type):     def __new__(cls name bases dict):         return type(name (Parent) + bases dict)  class Foo(object):     __metaclass__ = MetaFoo  if __name__ == "__main__":     f = Foo()     f.bar()     print f.bar.func_name  
def convert_to_classmethod(method):     return classmethod(method.im_func)  class bar(foo):     meth1 = convert_to_classmethod(foo.meth1)  
this. self.__class__ self.__dict__ 
from Tkinter import Tk Button  def goodbye_world():     print "Goodbye World!\nWait I changed my mind!"     button.configure(text = "Hello World!" command=hello_world)  def hello_world():     print "Hello World!\nWait I changed my mind!"     button.configure(text = "Goodbye World!" command=goodbye_world)  root = Tk() button = Button(root text="Hello World!" command=hello_world) button.pack()  root.mainloop()  command .configure name 
&gt;&gt;&gt; class Foo(object): ...     def __init__(self): ...         self.__baz = 42 ...     def foo(self): ...         print self.__baz ...      &gt;&gt;&gt; class Bar(Foo): ...     def __init__(self): ...         super(Bar self).__init__() ...         self.__baz = 21 ...     def bar(self): ...         print self.__baz ... &gt;&gt;&gt; x = Bar() &gt;&gt;&gt; x.foo() 42 &gt;&gt;&gt; x.bar() 21 &gt;&gt;&gt; print x.__dict__ {'_Bar__baz': 21 '_Foo__baz': 42}  
cur.execute("insert into resultstab values (%s %s)" (item results[item]))  try:     cur.execute("SELECT this is an error") except:     conn.rollback()  
import new  def copyfunc(func):     return new.function(func.func_code func.func_globals func.func_name                         func.func_defaults func.func_closure)  class Metaclass(type):     def __new__(meta name bases attrs):         for key in attrs.keys():             if key[0] == '_':                 skey = key[1:]                 for base in bases:                     original = getattr(base skey None)                     if original is not None:                         copy = copyfunc(original)                         copy.__doc__ = attrs[key].__doc__                         attrs[skey] = copy                         break         return type.__new__(meta name bases attrs)  class Class(object):     __metaclass__ = Metaclass     def execute(self):         '''original doc-string'''         return self._execute()  class Subclass(Class):     def _execute(self):         '''sub-class doc-string'''         pass  
newlist = sorted(list_to_be_sorted key=lambda k: k['name'])   from operator import itemgetter newlist = sorted(list_to_be_sorted key=itemgetter('name'))   reverse=True newlist = sorted(l key=itemgetter('name') reverse=True)  
import sys sys.exit()  sys sys.<strong>exit strong>([<em>arg em>]) SystemExit try stderr sys.exit("some error message") exit() os._exit(*errorcode*) 
/usr/sbin/sendmail from email.mime.text import MIMEText from subprocess import Popen PIPE  msg = MIMEText("Here is the body of my message") msg["From"] = "me@example.com" msg["To"] = "you@example.com" msg["Subject"] = "This is the subject." p = Popen(["/usr/sbin/sendmail" "-t" "-oi"] stdin=PIPE) p.communicate(msg.as_string())  
inspect.isroutine( obj )  def isroutine(object):     """Return true if the object is any kind of function or method."""     return (isbuiltin(object)             or isfunction(object)             or ismethod(object)             or ismethoddescriptor(object))  
&gt;&gt;&gt; import random &gt;&gt;&gt; print random.__file__  
def get_cleaned_or_initial(self fieldname):         if hasattr(self 'cleaned_data'):             return self.cleaned_data.get(fieldname)         else:             return self[fieldname].field.initial  if request.method == 'GET':     form = MyForm() else:     form = MyForm(request.method.POST)     form.is_valid()  do_query(form.get_cleaned_or_initial('start_date') form.get_cleaned_or_initial('end_date'))  
id() id __builtin__ id(...)      id(object) -&gt; integer      Return the identity of an object.  This is guaranteed to be unique among     simultaneously existing objects.  (Hint: it's the object's memory     address.)  
centroid = average(x) average(y) average(z) middle = middle(x) middle(y) middle(z) median median = median(x) median(y) median(z) middle average median 
import subprocess import sys  file = sys.argv[1] p1 = subprocess.Popen(['hg' 'cat' file] stdout=subprocess.PIPE) p2 = subprocess.Popen([     'gvimdiff'     '/proc/self/fd/%s' % p1.stdout.fileno()     file]) p2.wait()  file = sys.argv[1] p1 = subprocess.Popen(['hg' 'cat' file] stdout=subprocess.PIPE) p2 = subprocess.Popen(['diff' '-' file] stdin=p1.stdout) diff_text = p2.communicate()[0]  
class Foo(object):     class __metaclass__(type):         ....   class Group(object):     class cls1(object):        ...      class cls2(object):        ...  
unittest.main()  unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(Test))  
time.strftime("%Y-%m-%d %H:%M:%S"                time.gmtime(time.mktime(time.strptime("2008-09-17 14:04:00"                                                      "%Y-%m-%d %H:%M:%S"))))  time calendar time.strptime time.mktime time.gmtime calendar.timegm time.localtime 
split shlex &gt;&gt;&gt; import shlex &gt;&gt;&gt; shlex.split('this is "a test"') ['this' 'is' 'a test']  
atexit import sys import atexit  def clear_atexit_excepthook(exctype value traceback):     atexit._exithandlers[:] = []     sys.__excepthook__(exctype value traceback)  def helloworld():     print "Hello world!"  sys.excepthook = clear_atexit_excepthook atexit.register(helloworld)  raise Exception("Good bye cruel world!")  atexit 
myobject. X(). X dir 
blob_key = str(urllib.unquote(blob_key))  self.send_blob(blobstore.BlobInfo.get(blob_key) save_as=True)  import os import urllib  from google.appengine.ext import blobstore from google.appengine.ext import webapp from google.appengine.ext.webapp import blobstore_handlers from google.appengine.ext.webapp import template from google.appengine.ext.webapp.util import run_wsgi_app  class MainHandler(webapp.RequestHandler):     def get(self):         upload_url = blobstore.create_upload_url('/upload')         self.response.out.write('&lt;html&gt;&lt;body&gt;')         self.response.out.write('&lt;form action="%s" method="POST" enctype="multipart/form-data"&gt;' % upload_url)         self.response.out.write("""Upload File: &lt;input type="file" name="file"&gt;&lt;br&gt; &lt;input type="submit" name="submit" value="Submit"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;""")          for b in blobstore.BlobInfo.all():             self.response.out.write('&lt;li&gt;&lt;a href="/serve/%s' % str(b.key()) + '"&gt;' + str(b.filename) + '&lt;/a&gt;')  class UploadHandler(blobstore_handlers.BlobstoreUploadHandler):     def post(self):         upload_files = self.get_uploads('file')         blob_info = upload_files[0]         self.redirect('/')  class ServeHandler(blobstore_handlers.BlobstoreDownloadHandler):     def get(self blob_key):         blob_key = str(urllib.unquote(blob_key))         if not blobstore.get(blob_key):             self.error(404)         else:             self.send_blob(blobstore.BlobInfo.get(blob_key) save_as=True)  def main():     application = webapp.WSGIApplication(           [('/' MainHandler)            ('/upload' UploadHandler)            ('/serve/([^/]+)?' ServeHandler)           ] debug=True)     run_wsgi_app(application)  if __name__ == '__main__':   main()  
Host 
import libxml2  DOC = """&lt;elements&gt;     &lt;parent name="CategoryA"&gt;         &lt;child value="a1"/&gt;         &lt;child value="a2"/&gt;         &lt;child value="a3"/&gt;     &lt;/parent&gt;     &lt;parent name="CategoryB"&gt;         &lt;child value="b1"/&gt;         &lt;child value="b2"/&gt;         &lt;child value="b3"/&gt;     &lt;/parent&gt; &lt;/elements&gt;"""  doc = libxml2.parseDoc(DOC)  def getValues(cat):     return [attr.content for attr in doc.xpathEval("/elements/parent[@name='%s']/child/@value" % (cat))]  print getValues("CategoryA")  ['a1' 'a2' 'a3']  
$ cat &gt; eg.sh  export FOO="bar"; ^D $ bash eg.sh  $ echo $FOO;   $  bash 1 -&gt; hg -&gt; bash 2 ( shell script )               -&gt; bash 3 ( env call )  
class MyClass:     def __init__(self foo):         if foo != 1:             raise ValueError("foo is not equal to 1!")  import unittest class TestFoo(unittest.TestCase):     def testInsufficientArgs(self):         foo = 0         self.failUnlessRaises(ValueError MyClass foo)  if __name__ == '__main__':     unittest.main()  . ---------------------------------------------------------------------- Ran 1 test in 0.007s  OK  class TestFoo(unittest.TestCase):     def failUnlessRaises(self excClass callableObj *args **kwargs):         try:             callableObj(*args **kwargs)         except excClass excObj:             return excObj # Actually return the exception object         else:             if hasattr(excClass'__name__'): excName = excClass.__name__             else: excName = str(excClass)             raise self.failureException "%s not raised" % excName      def testInsufficientArgs(self):         foo = 0         excObj = self.failUnlessRaises(ValueError MyClass foo)         self.failUnlessEqual(excObj[0] 'foo is not equal to 1!')  
hicon = win32gui.CreateIconFromResource(win32api.LoadResource(None win32con.RT_ICON 1) True)  icon_res = win32api.LoadResource(None win32con.RT_ICON 1) hicon = ctypes.windll.user32.CreateIconFromResourceEx(icon_res len(icon_res) True     0x00030000 16 16 win32con.LR_DEFAULTCOLOR)  
from pprint import pprint a = [0 1 ['a' 'b' 'c'] 2 3 4] pprint(a)  
python manage.py runfcgi touch your.fcgi 
import unicodedata re itertools sys  all_chars = (chr(i) for i in range(sys.maxunicode)) categories = {'Cc'} control_chars = ''.join(c for c in all_chars if unicodedata.category(c) in categories) # or equivalently and much more efficiently control_chars = ''.join(map(chr itertools.chain(range(0x000x20) range(0x7f0xa0))))  control_char_re = re.compile('[%s]' % re.escape(control_chars))  def remove_control_chars(s):     return control_char_re.sub('' s)  import unicodedata re sys  all_chars = (unichr(i) for i in xrange(sys.maxunicode)) categories = {'Cc'} control_chars = ''.join(c for c in all_chars if unicodedata.category(c) in categories) # or equivalently and much more efficiently control_chars = ''.join(map(unichr range(0x000x20) + range(0x7f0xa0)))  control_char_re = re.compile('[%s]' % re.escape(control_chars))  def remove_control_chars(s):     return control_char_re.sub('' s)  Cc Cf Cs Co Cn 
floatsleep() import time from threading import Thread  class worker(Thread):     def run(self):         for x in xrange(011):             print x             time.sleep(1)  class waiter(Thread):     def run(self):         for x in xrange(100103):             print x             time.sleep(5)  def run():     worker().start()     waiter().start()  &gt;&gt;&gt; thread_test.run() 0 100 &gt;&gt;&gt; 1 2 3 4 5 101 6 7 8 9 10 102  
TemporaryFile NamedTemporaryFile mkstemp &gt;&gt;&gt; import tempfile shutil os &gt;&gt;&gt; fd path = tempfile.mkstemp() &gt;&gt;&gt; os.write(fd 'foo') &gt;&gt;&gt; os.close(fd) &gt;&gt;&gt; shutil.copy(path 'bar.txt') &gt;&gt;&gt; os.remove(path)  
range range(1 10000000) 9999999 xrange range xrange list(range(...)) 
&gt;&gt;&gt; from django.template import Template Context &gt;&gt;&gt; from django.conf import settings &gt;&gt;&gt; settings.configure() &gt;&gt;&gt; t = Template('My name is {{ my_name }}.') &gt;&gt;&gt; c = Context({'my_name': 'Daryl Spitzer'}) &gt;&gt;&gt; t.render(c) u'My name is Daryl Spitzer.'  
datetime timedelta time import datetime a = datetime.datetime(10011113459) b = a + datetime.timedelta(03) # days seconds then other fields. print(a.time()) print(b.time())  11:34:59 11:35:02  b = a + datetime.timedelta(seconds=3)  addSecs import datetime  def addSecs(tm secs):     fulldate = datetime.datetime(100 1 1 tm.hour tm.minute tm.second)     fulldate = fulldate + datetime.timedelta(seconds=secs)     return fulldate.time()  a = datetime.datetime.now().time() b = addSecs(a 300) print(a) print(b)   09:11:55.775695  09:16:55  
import Queue thread subprocess  results= Queue.Queue() def process_waiter(popen description que):     try: popen.wait()     finally: que.put( (description popen.returncode) ) process_count= 0  proc1= subprocess.Popen( ['python' 'mytest.py'] ) thread.start_new_thread(process_waiter     (proc1 "1 finished" results)) process_count+= 1  proc2= subprocess.Popen( ['python' 'mytest.py'] ) thread.start_new_thread(process_waiter     (proc2 "2 finished" results)) process_count+= 1  # etc  while process_count &gt; 0:     description rc= results.get()     print "job" description "ended with rc =" rc     process_count-= 1  
bool __nonzero__ int float bool int False __len__ list dict set tuple False True None False None __eq__ bool if __cmp__ int -1 self &lt; other 0 self == other +1 self &gt; other is is None getattr __getitem__ &gt;&gt;&gt; class A(object): ...    def __repr__(self): ...        return 'A()' ...    def __nonzero__(self): ...        return False  &gt;&gt;&gt; class B(object): ...    def __repr__(self): ...        return 'B()' ...    def __len__(self): ...        return 0  &gt;&gt;&gt; class C(object): ...    def __repr__(self): ...        return 'C()' ...    def __cmp__(self other): ...        return 0  &gt;&gt;&gt; class D(object): ...    def __repr__(self): ...        return 'D()' ...    def __eq__(self other): ...        return True  &gt;&gt;&gt; for obj in ['' () [] {} 0 0. A() B() C() D() None]: ...     print '%4s: bool(obj) -&gt; %5s obj == None -&gt; %5s obj is None -&gt; %5s' % \ ...         (repr(obj) bool(obj) obj == None obj is None)   '': bool(obj) -&gt; False obj == None -&gt; False obj is None -&gt; False   (): bool(obj) -&gt; False obj == None -&gt; False obj is None -&gt; False   []: bool(obj) -&gt; False obj == None -&gt; False obj is None -&gt; False   {}: bool(obj) -&gt; False obj == None -&gt; False obj is None -&gt; False    0: bool(obj) -&gt; False obj == None -&gt; False obj is None -&gt; False  0.0: bool(obj) -&gt; False obj == None -&gt; False obj is None -&gt; False  A(): bool(obj) -&gt; False obj == None -&gt; False obj is None -&gt; False  B(): bool(obj) -&gt; False obj == None -&gt; False obj is None -&gt; False  C(): bool(obj) -&gt;  True obj == None -&gt;  True obj is None -&gt; False  D(): bool(obj) -&gt;  True obj == None -&gt;  True obj is None -&gt; False None: bool(obj) -&gt; False obj == None -&gt;  True obj is None -&gt;  True  
IEnumerable&lt;TResult&gt; Zip&lt;TResultT1T2&gt;     (IEnumerable&lt;T1&gt; a      IEnumerable&lt;T2&gt; b      Func&lt;T1T2TResult&gt; combine) {     using (var f = a.GetEnumerator())     using (var s = b.GetEnumerator())     {         while (f.MoveNext() &amp;&amp; s.MoveNext())             yield return combine(f.Current s.Current);     } }  
[ item for innerlist in outerlist for item in innerlist ]  ''.join(str(item) for innerlist in outerlist for item in innerlist)  for innerlist in outerlist:     for item in innerlist:         ...  
itertools.permutations import itertools list(itertools.permutations([1 2 3]))  def all_perms(elements):     if len(elements) &lt;=1:         yield elements     else:         for perm in all_perms(elements[1:]):             for i in range(len(elements)):                 # nb elements[0:1] works in both string and list contexts                 yield perm[:i] + elements[0:1] + perm[i:]  itertools.permutations def permutations(iterable r=None):     # permutations('ABCD' 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC     # permutations(range(3)) --&gt; 012 021 102 120 201 210     pool = tuple(iterable)     n = len(pool)     r = n if r is None else r     if r &gt; n:         return     indices = range(n)     cycles = range(n n-r -1)     yield tuple(pool[i] for i in indices[:r])     while n:         for i in reversed(range(r)):             cycles[i] -= 1             if cycles[i] == 0:                 indices[i:] = indices[i+1:] + indices[i:i+1]                 cycles[i] = n - i             else:                 j = cycles[i]                 indices[i] indices[-j] = indices[-j] indices[i]                 yield tuple(pool[i] for i in indices[:r])                 break         else:             return  itertools.product def permutations(iterable r=None):     pool = tuple(iterable)     n = len(pool)     r = n if r is None else r     for indices in product(range(n) repeat=r):         if len(set(indices)) == r:             yield tuple(pool[i] for i in indices)  
Thread Thread Thread threading.local threading.local 
request.session['has_beta_access'] True MIDDLEWARE_CLASSES 
unicode(r 'utf-8') __str__() utf-8 utf-8 unicode() __unicode__() __str__() 
&gt;&gt;&gt; import httplib &gt;&gt;&gt; conn = httplib.HTTPConnection("www.google.com") &gt;&gt;&gt; conn.request("HEAD" "/index.html") &gt;&gt;&gt; res = conn.getresponse() &gt;&gt;&gt; print res.status res.reason 200 OK &gt;&gt;&gt; print res.getheaders() [('content-length' '0') ('expires' '-1') ('server' 'gws') ('cache-control' 'private max-age=0') ('date' 'Sat 20 Sep 2008 06:43:36 GMT') ('content-type' 'text/html; charset=ISO-8859-1')]  getheader(name) 
class Unbuffered(object):    def __init__(self stream):        self.stream = stream    def write(self data):        self.stream.write(data)        self.stream.flush()    def writelines(self datas):        self.stream.writelines(datas)        self.stream.flush()    def __getattr__(self attr):        return getattr(self.stream attr)  import sys sys.stdout = Unbuffered(sys.stdout) print 'Hello'  
declaration def p_decl_body(self p):     """ decl_body : declaration_specifiers init_declarator_list_opt     """     # &lt;&lt;Handle the declaration here&gt;&gt;          def p_declaration(self p):     """ declaration : decl_body SEMI      """     p[0] = p[1]  decl_body 
# Blogs who have either hockey or django tags. from django.db.models import Q Blog.objects.filter(     Q(tags__name__iexact='hockey') | Q(tags__name__iexact='django') )  def get_union_by_model(self queryset_or_model tags):     """     Create a ``QuerySet`` containing instances of the specified     model associated with *any* of the given list of tags.     """     tags = get_tag_list(tags)     tag_count = len(tags)     queryset model = get_queryset_and_model(queryset_or_model)      if not tag_count:         return model._default_manager.none()      model_table = qn(model._meta.db_table)     # This query selects the ids of all objects which have any of     # the given tags.     query = """     SELECT %(model_pk)s     FROM %(model)s %(tagged_item)s     WHERE %(tagged_item)s.content_type_id = %(content_type_id)s       AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)       AND %(model_pk)s = %(tagged_item)s.object_id     GROUP BY %(model_pk)s""" % {         'model_pk': '%s.%s' % (model_table qn(model._meta.pk.column))         'model': model_table         'tagged_item': qn(self.model._meta.db_table)         'content_type_id': ContentType.objects.get_for_model(model).pk         'tag_id_placeholders': ''.join(['%s'] * tag_count)     }      cursor = connection.cursor()     cursor.execute(query [tag.pk for tag in tags])     object_ids = [row[0] for row in cursor.fetchall()]     if len(object_ids) &gt; 0:         return queryset.filter(pk__in=object_ids)     else:         return model._default_manager.none()  def get_intersection_by_model(self queryset_or_model tags):     """     Create a ``QuerySet`` containing instances of the specified     model associated with *all* of the given list of tags.     """     tags = get_tag_list(tags)     tag_count = len(tags)     queryset model = get_queryset_and_model(queryset_or_model)      if not tag_count:         return model._default_manager.none()      model_table = qn(model._meta.db_table)     # This query selects the ids of all objects which have all the     # given tags.     query = """     SELECT %(model_pk)s     FROM %(model)s %(tagged_item)s     WHERE %(tagged_item)s.content_type_id = %(content_type_id)s       AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)       AND %(model_pk)s = %(tagged_item)s.object_id     GROUP BY %(model_pk)s     HAVING COUNT(%(model_pk)s) = %(tag_count)s""" % {         'model_pk': '%s.%s' % (model_table qn(model._meta.pk.column))         'model': model_table         'tagged_item': qn(self.model._meta.db_table)         'content_type_id': ContentType.objects.get_for_model(model).pk         'tag_id_placeholders': ''.join(['%s'] * tag_count)         'tag_count': tag_count     }      cursor = connection.cursor()     cursor.execute(query [tag.pk for tag in tags])     object_ids = [row[0] for row in cursor.fetchall()]     if len(object_ids) &gt; 0:         return queryset.filter(pk__in=object_ids)     else:         return model._default_manager.none()  
#!/usr/bin/env python  def get_all(D k):     yield k     for ii in D.get(k []):         for jj in get_all(D ii):             yield jj  A = { 'a' : dict(b=1 c=1)     'c' : dict(d=1)     'd' : dict(e=1f=1g=1)     'h' : dict(j=1)     }  for ii in get_all(A'a'):     print ii  
$ pip install sniffer $ cd myproject  $ sniffer  nosetests --verbose --with-doctest $ sniffer -x--verbose -x--with-doctest  pyinotify pywin32 MacFSEvents pip 
__dict__ &gt;&gt;&gt; hi_obj = hi() &gt;&gt;&gt; hi_obj.__dict__.keys()  
#!/usr/bin/python  from signal import * from time import sleep from sys import stdout  print_Qs = 0 print_Zs = 0  def write(text):     stdout.write(text)     stdout.flush()  def process_quit(signum frame):      global print_Qs      print_Qs = 10  def process_tstp(signum frame):      global print_Zs      print_Zs = 10  signal(SIGQUIT process_quit) signal(SIGTSTP process_tstp)  while 1:     if print_Zs:         print_Zs -= 1         c = 'Z'     elif print_Qs:         print_Qs -= 1         c = 'Q'     else:         c = '.'     write(c)     sleep(0.5)  while 1: for i in range(60): 
long_desc #id_long_desc {     width: 300px;     height: 200px; }  attrs class ProductForm(ModelForm):     long_desc = forms.CharField(widget=forms.Textarea(attrs={'cols': 10 'rows': 20}))     short_desc = forms.CharField(widget=forms.Textarea)     class Meta:         model = Product  class ProductForm(ModelForm):     long_desc = forms.CharField(widget=forms.Textarea)     short_desc = forms.CharField(widget=forms.Textarea)     class Meta:         model = Product      # Edit by bryan     def __init__(self *args **kwargs):         super(ProductForm self).__init__(*args **kwargs) # Call to ModelForm constructor         self.fields['long_desc'].widget.attrs['cols'] = 10         self.fields['long_desc'].widget.attrs['rows'] = 20  
destroy() from Tkinter import *  root = Tk() Button(root text="Quit" command=root.destroy).pack() root.mainloop()  root.quit()  root.mainloop() root.mainloop() quit() root.destroy()  destroy() root.mainloop() root.mainloop() root.destroy() mainloop() root.mainloop() root.quit() from Tkinter import * def quit():     global root     root.quit()  root = Tk() while True:     Button(root text="Quit" command=quit).pack()     root.mainloop()     #do something  
__call__ __call__ class Foo:   def __call__(self):     print 'called'  foo_instance = Foo() foo_instance() #this is calling the __call__ method  
bounds = self.canvas.bbox(myText)  # returns a tuple like (x1 y1 x2 y2) width = bounds[2] - bounds[0] height = bounds[3] - bounds[1]  
payload = {'username': 'bob' 'email': 'bob@bob.com'} &gt;&gt;&gt; r = requests.put("http://somedomain.org/endpoint" data=payload)  r.status_code  r.content  
ftp.nlst(dir) files = []  try:     files = ftp.nlst() except ftplib.error_perm resp:     if str(resp) == "550 No files found":         print "No files in this directory"     else:         raise  for f in files:     print f  
import cookielib import logging import sys import urllib import urllib2  cookies = cookielib.LWPCookieJar() opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookies)) urllib2.install_opener(opener) headers = {     'User-Agent': 'Mozilla/5.0 (Windows; U; Windows NT 5.0; en-GB; rv:1.8.1.12) Gecko/20080201 Firefox/2.0.0.12'     'Accept': 'text/xmlapplication/xmlapplication/xhtml+xmltext/html;q=0.9text/plain;q=0.8image/png*/*;q=0.5'     'Accept-Language': 'en-gben;q=0.5'     'Accept-Charset': 'ISO-8859-1utf-8;q=0.7*;q=0.7' }  # Fetch the login page to set initial cookies urllib2.urlopen(urllib2.Request('http://www.rllmukforum.com/index.php?act=Login&amp;CODE=00' None headers))  # Login so we can access the Off Topic forum login_headers = headers.copy() login_headers.update({     'Referer': 'http://www.rllmukforum.com/index.php?act=Login&amp;CODE=00'     'Content-Type': 'application/x-www-form-urlencoded' }) html = urllib2.urlopen(urllib2.Request('http://www.rllmukforum.com/index.php?act=Login&amp;CODE=01'                                        urllib.urlencode({                                            'referer': 'http://www.rllmukforum.com/index.php?'                                            'UserName': RLLMUK_USERNAME                                            'PassWord': RLLMUK_PASSWORD                                        })                                        login_headers)).read() if 'The following errors were found' in html:     logging.error('RLLMUK login failed')     logging.info(html)     sys.exit(1)  
open() file() 
b= BasicInfoPage(...)  b.intelligence b BasicInfoPage class MOS( wx.wizard.PageSimple ):     def __init__( self parent title basicInfoPage ):         &lt;snip&gt;         self.basicInfo= basicInfoPage  self.basicInfo.intelligence someBasicInfoPage= BasicInfoPage( ... )  m= MOS( ... someBasicInfoPage )  m someBasicInfoPage.intelligence 
&gt;&gt;&gt; import re &gt;&gt;&gt; re.split(r"(\s+)" "This is the string I want to split") ['This' ' ' 'is' ' ' 'the' ' ' 'string' ' ' 'I' ' ' 'want' ' ' 'to' ' ' 'split']  
&gt;&gt;&gt; list("Word to Split") ['W' 'o' 'r' 'd' ' ' 't' 'o' ' ' 'S' 'p' 'l' 'i' 't']  
method_one a_test.method_one()  Test.method_one(a_test)  method_two TypeError &gt;&gt;&gt; a_test = Test()  &gt;&gt;&gt; a_test.method_two() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: method_two() takes no arguments (1 given)   class Test(object):     def method_one(self):         print "Called method_one"      @staticmethod     def method_two():         print "Called method two"  type method_two &gt;&gt;&gt; a_test = Test() &gt;&gt;&gt; a_test.method_one() Called method_one &gt;&gt;&gt; a_test.method_two() Called method_two &gt;&gt;&gt; Test.method_two() Called method_two  
x (?x)  (?: [ \t\r\f\v]*? \n ){2}  [ \t\r\f\v]*? 
class Record( object ):     """Assuming rtda and pnl must exist."""     def __init__( self ):         self.da= 0         self.rt= 0         self.rtda= 0 # or whatever         self.pnl= None #          self.sink = None # Not clear what this is     def setPnl( self node_prices ):         # fill RT and DA prices from the hash retrieved above         # calculate dependent values: RT-DA and PNL  calculate_pnl( records node_prices ) def calculate_pnl( records node_prices ):     for record in records:         record.setPnl( node_prices )  
C1 &gt;&gt;&gt; class C1(object): &gt;&gt;&gt;    def eval(self x): &gt;&gt;&gt;        x() &gt;&gt;&gt; &gt;&gt;&gt; def f2(): print "go f2" &gt;&gt;&gt; c = C1() &gt;&gt;&gt; c.eval(f2) go f2  ## File 1 def f1():  print "go f1!"  class C1(object):     def do_eval(self x e_globals = globals() e_locals = locals()):         eval(x e_globals e_locals)  &gt;&gt;&gt; def f2(): &gt;&gt;&gt;    print "go f2!" &gt;&gt;&gt; from file1 import *    # 1 &gt;&gt;&gt; C1().do_eval("f2()")   # 2 NameError: name 'f2' is not defined  &gt;&gt;&gt; C1().do_eval("f2()" globals() locals()) #3 go f2! &gt;&gt;&gt; C1().do_eval("f1()" globals() locals()) #4 go f1!  file1 f2 file1 NameError f1 eval 
import cgi data = cgi.FieldStorage() data['bob']  
self.combo['selection']  self.combo['value']  
&gt;&gt;&gt; 4 / float(100) 0.04 &gt;&gt;&gt; 4 / 100.0 0.04  &gt;&gt;&gt; from __future__ import division &gt;&gt;&gt; 4 / 100 0.04  -Qnew $ python -Qnew &gt;&gt;&gt; 4 / 100 0.04  // -Qnew 
Queryable.Select(Queryable.Where(someInputSequence somePredicate) someFuncThatReturnsTheSequenceElement)   
ALTER SEQUENCE sequence_name RESTART WITH 12345; 
&gt;&gt;&gt; import shlex &gt;&gt;&gt; my_splitter = shlex.shlex('''foo bar "one two" three four''' posix=True) &gt;&gt;&gt; my_splitter.whitespace += '' &gt;&gt;&gt; my_splitter.whitespace_split = True &gt;&gt;&gt; print list(my_splitter) ['foo' 'bar' 'one two' 'three' 'four']  &gt;&gt;&gt; my_splitter = shlex.shlex('''"test a"'foobar"baz'bar \xc3\xa4 baz'''                               posix=True)  &gt;&gt;&gt; my_splitter.whitespace = '' ; my_splitter.whitespace_split = True  &gt;&gt;&gt; print list(my_splitter) ['test a' 'foobar"baz' 'bar \xc3\xa4 baz']  
&gt;&gt;&gt; re.match(r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' '127.255.0.0').groups() ('127' '255' '0' '0')  r'regex_here' 
csv import csv writer = csv.writer(open("some.csv" "wb")) writer.writerow(the_list)  StringIO f = StringIO.StringIO() writer = csv.writer(f) writer.writerow(the_list) print f.getvalue()  a"one ""two"" three""foo bar""both""'" csv dialect quotechar escapechar class SomeDialect(csv.excel):     delimiter = ''     quotechar = '"'     escapechar = "\\"     doublequote = False     lineterminator = '\n'     quoting = csv.QUOTE_MINIMAL  f = cStringIO.StringIO() writer = csv.writer(f dialect=SomeDialect) writer.writerow(the_list) print f.getvalue()  aone \"two\" three"foo bar"both\"' 
import os import shutil from os import path from os.path import join getmtime from time import time  archive = "bak" current = "cur"  def archive_old_versions(days = 3):     for root dirs files in os.walk(current):         for name in files:             fullname = join(root name)             if (getmtime(fullname) &lt; time() - days * 60 * 60 * 24):                 shutil.move(fullname join(archive name))  
__init__.py ./dir/__init__.py import something  ./test.py import dir # can now use dir.something  __init__.py __init__.py import something import datetime test.py import dir print dir.datetime.datetime.now()  import dir.some_module_in_dir print dir.datetime.datetime.now()  __init__.py 
@lcs = $tree-&gt;lcs; @lcs = $tree-&gt;lcs($min_len $max_len); @lcs = $tree-&gt;longest_common_substrings;  
from SimpleXMLRPCServer import SimpleXMLRPCServer  class Server(object):     def __init__(self hostport):         self.server = SimpleXMLRPCServer(hostport)      def register_function(self function name=None):         def _function(args kwargs):             return function(*args **kwargs)         _function.__name__ = function.__name__         self.server.register_function(_function name)      def serve_forever(self):         self.server.serve_forever()  #example usage server = Server(('localhost' 8000)) def test(arg1 arg2):     print 'arg1: %s arg2: %s' % (arg1 arg2)     return 0 server.register_function(test) server.serve_forever()  import xmlrpclib  class ServerProxy(object):     def __init__(self url):         self._xmlrpc_server_proxy = xmlrpclib.ServerProxy(url)     def __getattr__(self name):         call_proxy = getattr(self._xmlrpc_server_proxy name)         def _call(*args **kwargs):             return call_proxy(args kwargs)         return _call  #example usage server = ServerProxy('http://localhost:8000') server.test(1 2) server.test(arg2=2 arg1=1) server.test(1 arg2=2) server.test(*[12]) server.test(**{'arg1':1 'arg2':2})  
foo.__dict__.update(bar) 
import urllib2 opener = urllib2.build_opener() opener.addheaders = [('User-agent' 'Mozilla/5.0')] infile = opener.open('http://en.wikipedia.org/w/index.php?title=Albert_Einstein&amp;printable=yes') page = infile.read()  
subprocess.Popen(['command' 'argument1' 'argument2'] shell=False)  
itertools.chain.from_iterable itertools.chain.from_iterable(iterables)  def flatten(iterables):     return (elem for iterable in iterables for elem in iterable)  
id() 
import traceback import sys  try:     raise Exception("Message") except:     type value tb = sys.exc_info()     print &gt;&gt; sys.stderr  type.__name__ ":" value     print &gt;&gt; sys.stderr '\n'.join(traceback.format_tb(tb))  Exception : Message   File "exception.py" line 5 in &lt;module&gt;     raise Exception("Message")  
a = (0..100).entries.sort_by {rand}.slice! 0 5  Array(0..100).sample(5)   
Python 3.8 := re.search(pattern text) match None if match := re.search(r'foo(.+)' text):   # do something with match.group(1) elif match := re.search(r'bar(.+)' text):   # do something with match.group(1) elif match := re.search(r'baz(.+)' text)   # do something with match.group(1)  
def nest(d):     rv = {}     for key value in d.iteritems():         node = rv         for part in key.split('/'):             node = node.setdefault(part {})         node.update(value)     return rv  
shutil from shutil import copyfile copyfile(src dst)  os.path copy copyfile copyfile 
WSGIPassAuthorization On &lt;VirtualHost *&gt;     &lt;Location /&gt;         AuthType Digest         AuthName "global"         AuthDigestDomain /         AuthUserFile /root/apache_users         &lt;Limit GET&gt;             Require valid-user         &lt;/Limit&gt;     &lt;/Location&gt;     WSGIPassAuthorization On     WSGIScriptAlias / /some/script.wsgi     WSGIDaemonProcess mywsgi user=someuser group=somegroup processes=2 threads=25     WSGIProcessGroup mywsgi     ServerName some.example.org &lt;/VirtualHost&gt;  environ['REMOTE_USER'] def application(environ start_response):     start_response('200 OK' [         ('Content-Type' 'text/plain')     ])     return ['Hello %s' % environ['REMOTE_USER']]  
os.getcwd() getcwd() pwd os.environ['PWD'] getcwd import os from subprocess import Popen PIPE  class CwdKeeper(object):     def __init__(self):         self._cwd = os.environ.get("PWD")         if self._cwd is None: # no environment. fall back to calling pwd on shell            self._cwd = Popen('pwd' stdout=PIPE).communicate()[0].strip()         self._os_getcwd = os.getcwd         self._os_chdir = os.chdir      def chdir(self path):         if not self._cwd:             return self._os_chdir(path)         p = os.path.normpath(os.path.join(self._cwd path))         result = self._os_chdir(p)         self._cwd = p         os.environ["PWD"] = p         return result      def getcwd(self):         if not self._cwd:             return self._os_getcwd()         return self._cwd  cwd = CwdKeeper() print cwd.getcwd() # use only cwd.chdir and cwd.getcwd from now on.     # monkeypatch os if you want: os.chdir = cwd.chdir os.getcwd = cwd.getcwd # now you can use os.chdir and os.getcwd as normal.  
Python 2.5.1 (r251:54863 Apr 18 2007 08:51:08) [MSC v.1310 32 bit (Intel)] on win32 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; def makeSpecial(mystring special_substr): ...     return mystring.replace(special_substr '&lt;span class="special"&gt;%s&lt;/span&gt; ' % special_substr) ... &gt;&gt;&gt; makeSpecial("I am the most foo h4ck3r ever!!" "foo") 'I am the most &lt;span class="special"&gt;foo&lt;/span&gt; h4ck3r ever!!' &gt;&gt;&gt;  
&gt;&gt;&gt; a = [3456] &gt;&gt;&gt; for i val in enumerate(a): ...     print i val ... 0 3 1 4 2 5 3 6 &gt;&gt;&gt;  
def num_groups(regex):     return re.compile(regex).groups  
&lt;root&gt;   &lt;level1&gt;leaf1&lt;/level1&gt;   &lt;level2&gt;leaf2&lt;/level2&gt; &lt;/root&gt;  from BeautifulSoup import BeautifulStoneSoup Tag NavigableString  soup = BeautifulStoneSoup('config-template.xml') # get the parser for the xml file soup.contents[0].name # u'root'  soup.root.contents[0].name # u'level1'  import re tags_starting_with_level = soup.findAll(re.compile('^level')) for tag in tags_starting_with_level: print tag.name # level1 # level2  # build and insert a new level with a new leaf level3 = Tag(soup 'level3') level3.insert(0 NavigableString('leaf3') soup.root.insert(2 level3)  print soup.prettify() # &lt;root&gt; #  &lt;level1&gt; #   leaf1 #  &lt;/level1&gt; #  &lt;level2&gt; #   leaf2 #  &lt;/level2&gt; #  &lt;level3&gt; #   leaf3 #  &lt;/level3&gt; # &lt;/root&gt;  
class State(object):     def __init__(self name):         self.name = name      def __repr__(self):         return self.name  class Automaton(object):     def __init__(self instance start):         self._state = start         self.transitions = instance.transitions()      def get_state(self):         return self._state      def set_state(self target):         transition = self.transitions.get((self.state target))         if transition:             action condition = transition             if condition:                 if condition():                     if action:                         action()                     self._state = target             else:                 self._state = target         else:             self._state = target      state = property(get_state set_state)  class Door(object):     open = State('open')     closed = State('closed')      def __init__(self blocked=False):         self.blocked = blocked      def close(self):         print 'closing door'      def do_open(self):         print 'opening door'      def not_blocked(self):         return not self.blocked      def transitions(self):         return {             (self.open self.closed):(self.close self.not_blocked)             (self.closed self.open):(self.do_open self.not_blocked)         }  if __name__ == '__main__':     door = Door()     automaton = Automaton(door door.open)      print 'door is' automaton.state     automaton.state = door.closed     print 'door is' automaton.state     automaton.state = door.open     print 'door is' automaton.state     door.blocked = True     automaton.state = door.closed     print 'door is' automaton.state  door is open closing door door is closed opening door door is open door is open  
__init__.py bzrlib 
with from __future__ import with_statement import contextlib  @contextlib.contextmanager def handler():     try:         yield     except Exception e:         baz(e)  with handler():     foo(a b) with handler():     bar(c d)  
filter map result = filter (None map (expensive mylist))  itertools.imap 
datetime.timedelta &gt;&gt;&gt; from datetime import datetime timedelta &gt;&gt;&gt; then = datetime.now() - timedelta(hours = 2) &gt;&gt;&gt; now = datetime.now() &gt;&gt;&gt; (now - then) &gt; timedelta(days = 1) False &gt;&gt;&gt; (now - then) &gt; timedelta(hours = 1) True  if (datetime.now() - self.timestamp) &gt; timedelta(seconds = 100)  if (datetime.now() - self.timestamp) &gt; timedelta(minutes = 100)  
import ctypes sys  def is_admin():     try:         return ctypes.windll.shell32.IsUserAnAdmin()     except:         return False  if is_admin():     # Code of your program here else:     # Re-run the program with admin rights     ctypes.windll.shell32.ShellExecuteW(None "runas" sys.executable " ".join(sys.argv) None 1)  ctypes.windll.shell32.ShellExecuteW(None u"runas" unicode(sys.executable) unicode(" ".join(sys.argv)) None 1)  py2exe cx_freeze pyinstaller sys.argv[1:] sys.argv ctypes sys 
is True == &gt;&gt;&gt; a = [1 2 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; b is a  True &gt;&gt;&gt; b == a True  # Make a new copy of list `a` via the slice operator  # and assign it to variable `b` &gt;&gt;&gt; b = a[:]  &gt;&gt;&gt; b is a False &gt;&gt;&gt; b == a True  &gt;&gt;&gt; 1000 is 10**3 False &gt;&gt;&gt; 1000 == 10**3 True  &gt;&gt;&gt; "a" is "a" True &gt;&gt;&gt; "aa" is "a" * 2 True &gt;&gt;&gt; x = "a" &gt;&gt;&gt; "aa" is x * 2 False &gt;&gt;&gt; "aa" is intern(x*2) True  
lambda def def lambda map() filter() operator operator.add lambda x y: x + y lambda def operator def lambda 
print "%02d" % (1)  printf sprintf format print("{:02d}".format(1))  print(f"{1:02d}")  
import sys print (sys.path)  
0x0000000C 0x0C000000 
A if C else B  stringValue = otherString or defaultString  
import asizeof  N = 1000000 print asizeof.asizeof(range(N)) / N # -&gt; 20 (python 2.5 WinXP 32-bit Linux) # -&gt; 33 (64-bit Linux)  
foo class_foo static_foo class A(object):     def foo(self x):         print "executing foo(%s %s)" % (self x)      @classmethod     def class_foo(cls x):         print "executing class_foo(%s %s)" % (cls x)      @staticmethod     def static_foo(x):         print "executing static_foo(%s)" % x      a = A()  a a.foo(1) # executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;1)  self a.class_foo(1) # executing class_foo(&lt;class '__main__.A'&gt;1)  class_foo A.foo(1) A.class_foo(1) A.class_foo(1) # executing class_foo(&lt;class '__main__.A'&gt;1)  self cls a.static_foo(1) # executing static_foo(1)  A.static_foo('hi') # executing static_foo(hi)  foo a.foo a foo a.foo a foo print(a.foo) # &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt;  a.class_foo a class_foo A class_foo print(a.class_foo) # &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt;  a.static_foo static_foo a.static_foo print(a.static_foo) # &lt;function static_foo at 0xb7d479cc&gt;  static_foo A print(A.static_foo) # &lt;function static_foo at 0xb7d479cc&gt;  
def tail(f n offset=None):     """Reads a n lines from f with an offset of offset lines.  The return     value is a tuple in the form ``(lines has_more)`` where `has_more` is     an indicator that is `True` if there are more lines in the file.     """     avg_line_length = 74     to_read = n + (offset or 0)      while 1:         try:             f.seek(-(avg_line_length * to_read) 2)         except IOError:             # woops.  apparently file is smaller than what we want             # to step back go to the beginning instead             f.seek(0)         pos = f.tell()         lines = f.read().splitlines()         if len(lines) &gt;= to_read or pos == 0:             return lines[-to_read:offset and -offset or None] \                    len(lines) &gt; to_read or pos &gt; 0         avg_line_length *= 1.3  
from PIL import Image  im = Image.open('dead_parrot.jpg') # Can be many different formats. pix = im.load() print im.size  # Get the width and hight of the image for iterating over print pix[xy]  # Get the RGBA Value of the a pixel of an image pix[xy] = value  # Set the RGBA Value of the image (tuple) im.save('alive_parrot.png')  # Save the modified pixels as .png  
def addNewSkills(self newSkillList):     '''newSkillList is a list of skill names you want to add'''     for skillName in newSkillList:         newRadioButton = wx.RadioButton(self -1 skillName)         self.grid1.Add(newRadioButton) # appears in top-left corner of the panel     self.Layout() # all newly added radio buttons appear where they should be     self.Fit() # if you need to resize the panel to fit new items this will help  self.grid1 
&gt;&gt;&gt; import re &gt;&gt;&gt; re.sub(r"x(?=[^']*'([^']|'[^']*')*$)" "P" "axbx'cxdxe'fxgh'ixj'k") "axbx'cPdPe'fxgh'iPj'k"  
inspect pydoc help() pydoc 
i f i t x = [] i = 1 # 1. from t x.append(lambda: i) i = -1 # 2. from t x.append(lambda: i)  i i i f(*[lambda u=i: u for i in t])  i 
sub (replacement string[ count = 0])      p = re.compile( '(blue|white|red)')     &gt;&gt;&gt; p.sub( 'colour' 'blue socks and red shoes')     'colour socks and colour shoes'     &gt;&gt;&gt; p.sub( 'colour' 'blue socks and red shoes' count=1)     'colour socks and red shoes'  
l.set_option(ldap.OPT_REFERRALS 0)  
<pre> files = glob.glob('/usr/joe/*.gif')  pre> <pre> import os from os.path import join for root dirs files in os.walk('/usr'):    print "Current directory" root    print "Sub directories" dirs    print "Files" files  pre> 
&gt;&gt;&gt; [ name for name in os.listdir(thedir) if os.path.isdir(os.path.join(thedir name)) ] ['ctypes' 'distutils' 'encodings' 'lib-tk' 'config' 'idlelib' 'xml' 'bsddb' 'hotshot' 'logging' 'doc' 'test' 'compiler' 'curses' 'site-packages' 'email' 'sqlite3' 'lib-dynload' 'wsgiref' 'plat-linux2' 'plat-mac']  
MyApplicationAppDelegate statusItem.retain() 
prepopulated_fields = {'slug': ('title') }  slugify |slugify 
&gt;&gt;&gt; class MyData: ...     def __init__(self data): ...         "Initialize MyData from a sequence" ...         self.data = data ...      ...     @classmethod ...     def fromfilename(cls filename): ...         "Initialize MyData from a file" ...         data = open(filename).readlines() ...         return cls(data) ...      ...     @classmethod ...     def fromdict(cls datadict): ...         "Initialize MyData from a dict's items" ...         return cls(datadict.items()) ...  &gt;&gt;&gt; MyData([1 2 3]).data [1 2 3] &gt;&gt;&gt; MyData.fromfilename("/tmp/foobar").data ['foo\n' 'bar\n' 'baz\n'] &gt;&gt;&gt; MyData.fromdict({"spam": "ham"}).data [('spam' 'ham')]  isinstance(x basestring) 
class Comment(db.Model):     series = db.ReferenceProperty(reference_class=Series);      def series_id(self):         return Comment.series.get_value_for_datastore(self)  
__builtin__ __builtin__ print foo  import __builtin__ __builtin__.foo = 1 import a  __builtin__ __builtins__ __builtin__ builtins 
global def g(n):     global c     c = c + n  
myproject.myapp.views myapp.views settings.py ROOT_URLCONF = `myproject.urls`  &gt;&gt;&gt; from django.core.urlresolvers import reverse &gt;&gt;&gt; from myproject.myapp import views &gt;&gt;&gt; reverse(views.myview) '/myview/'  &gt;&gt;&gt; from django.core import urlresolvers &gt;&gt;&gt; from myapp import myview &gt;&gt;&gt; urlresolvers.get_resolver (None).reverse_dict {None: ([(u'myview/' [])] 'myview/$') &lt;function myview at 0x845d17c&gt;: ([(u'myview/' [])] 'myview/$')} &gt;&gt;&gt; v1 = urlresolvers.get_resolver (None).reverse_dict.items ()[1][0] &gt;&gt;&gt; reverse(v1) '/myview/' &gt;&gt;&gt; v1 is myview False &gt;&gt;&gt; v1.__module__ 'testproject.myapp.views' &gt;&gt;&gt; myview.__module__ 'myapp.views'  r'^myview/$' reverse ('myapp.myview') urls.py myapp myproject/myapp/urls.py myproject/urls.py from django.conf.urls.defaults import patterns urlpatterns = patterns (''     (r'^/' 'myapp.urls') )  
MatchedQuotes = re.compile(r"(['\"])(.*)\1" re.LOCALE) item = MatchedQuotes.sub(r'\2' item 1)  VariableDefinition = re.compile(r'&lt;%(["\']?)(.*?)\1=(["\']?)(.*?)\3%&gt;' re.LOCALE) VarRepl = re.compile(r'&lt;%(["\']?)(.*?)\1%&gt;' re.LOCALE)  def processVariables(item):     vars = {}     def findVars(m):         vars[m.group(2).upper()] = m.group(4)         return ""      item = VariableDefinition.sub(findVars item)     return VarRepl.sub(lambda m: vars[m.group(2).upper()] item)  print processVariables('&lt;%"TITLE"="This Is A Test Variable"%&gt;The Web &lt;%"TITLE"%&gt;')  Original       : 13.637 Global regexes : 12.771 Single regex   :  9.095 Final version  :  1.846  
@register.inclusion_tag('person/address.html') def display_address(address):     return {'address': address}  {% load %} {% display_address address %}  
difflib.SequenceMatcher(lambda x: x in " \t\n" doc1 doc2).ratio()  
import * import * m = __import__ (S) try:     attrlist = m.__all__ except AttributeError:     attrlist = dir (m) for attr in attrlist:     globals()[attr] = getattr (m attr)  
&amp; | ^ ~ ~x -x-1 (x &lt;&lt; 5) &amp; 0xffffffff 
import codecs with codecs.open('unicode.rst' encoding='utf-8') as f:     for line in f:         print repr(line)  with codecs.open('test' encoding='utf-8' mode='w+') as f:     f.write(u'\u4500 blah blah blah\n')     f.seek(0)     print repr(f.readline()[:1])  unicodedata normalize() string.encode() &gt;&gt;&gt; teststr u'I don\xe2\x80\x98t like this' &gt;&gt;&gt; unicodedata.normalize('NFKD' teststr).encode('ascii' 'ignore') 'I donat like this'  
class MyForm(forms.Form):     my_field = forms.MultipleChoiceField(choices=SOME_CHOICES widget=forms.CheckboxSelectMultiple())      def clean_my_field(self):         if len(self.cleaned_data['my_field']) &gt; 3:             raise forms.ValidationError('Select no more than 3.')         return self.cleaned_data['my_field']  
$ pip install decorator  args_as_ints() import decorator  @decorator.decorator def args_as_ints(f *args **kwargs):     args = [int(x) for x in args]     kwargs = dict((k int(v)) for k v in kwargs.items())     return f(*args **kwargs)  @args_as_ints def funny_function(x y z=3):     """Computes x*y + 2*z"""     return x*y + 2*z  print funny_function("3" 4.0 z="5") # 22 help(funny_function) # Help on function funny_function in module __main__: #  # funny_function(x y z=3) #     Computes x*y + 2*z  functools.wraps() import functools   def args_as_ints(func):     @functools.wraps(func)     def wrapper(*args **kwargs):         args = [int(x) for x in args]         kwargs = dict((k int(v)) for k v in kwargs.items())         return func(*args **kwargs)     return wrapper   @args_as_ints def funny_function(x y z=3):     """Computes x*y + 2*z"""     return x*y + 2*z   print(funny_function("3" 4.0 z="5")) # 22 help(funny_function) # Help on function funny_function in module __main__: # # funny_function(x y z=3) #     Computes x*y + 2*z  functools.wraps() help(funny_function) # Help on function funny_function in module __main__: # # funny_function(*args **kwargs) #    Computes x*y + 2*z  *args **kwargs x y z=3 
if job in ("mechanic" "tech"):     print "awesome" elif job in ("tool" "rock"):     print "dolt"  in in frozenset AwesomeJobs = frozenset(["mechanic" "tech" ... lots of others ]) def func():     if job in AwesomeJobs:         print "awesome"  frozenset set 
def save(self):     from django.template.defaultfilters import slugify      if not self.slug:         self.slug = slugify(self.title)      super(Your_Model_Nameself).save()  
&gt;&gt;&gt; s = '\0\x02' &gt;&gt;&gt; struct.unpack('&gt;H' s) (2)  &gt;&gt;&gt; abc = struct.unpack('&gt;HHi' some_string)  ident major minor flags len = struct.unpack('&gt;3sBBBI' ten_byte_string)  
timedelta from datetime import date  d0 = date(2008 8 18) d1 = date(2008 9 26) delta = d1 - d0 print(delta.days)  
$ perl -0777 -ne'print qq($1) if /__all__ = \[(.*?)\]/s' __init__.py | grep Error   'BrowserStateError' 'ContentTooShortError' 'FormNotFoundError' 'GopherError' 'HTTPDefaultErrorHandler' 'HTTPError' 'HTTPErrorProcessor' 'LinkNotFoundError' 'LoadError' 'ParseError' 'RobotExclusionError' 'URLError'  &gt;&gt;&gt; import mechanize &gt;&gt;&gt; filter(lambda s: "Error" in s dir(mechanize)) ['BrowserStateError' 'ContentTooShortError' 'FormNotFoundError' 'GopherError'  'HTTPDefaultErrorHandler' 'HTTPError' 'HTTPErrorProcessor' 'LinkNotFoundErr or' 'LoadError' 'ParseError' 'RobotExclusionError' 'URLError']  
[^ \t\n]*  [a-zA-Z0-9&amp;;]*  (\w+|&amp;\w+;)*  
o str str if isinstance(o str):  o str if type(o) is str:  if issubclass(type(o) str):  if isinstance(o basestring):  unicode str str unicode basestring basestring str bytes isinstance True o (str unicode) if isinstance(o (str unicode)):  
class AppHTTPServer (SocketServer.ThreadingMixIn BaseHTTPServer.HTTPServer):     def serve_forever(self):         self.stop_serving = False         while not self.stop_serving:             self.handle_request()      def stop (self):         self.stop_serving = True  def SvcStop(self):     self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)     self.httpd.stop()  exit(0)  
&gt;&gt;&gt; help(range) Help on built-in function range in module __builtin__:  range(...)     range([start] stop[ step]) -&gt; list of integers  ...  
from dateutil import rrule from datetime import datetime timedelta  now = datetime.now() hundredDaysLater = now + timedelta(days=100)  for dt in rrule.rrule(rrule.MONTHLY dtstart=now until=hundredDaysLater):     print dt  2008-09-30 23:29:54 2008-10-30 23:29:54 2008-11-30 23:29:54 2008-12-30 23:29:54  
CanvasEntry gtk.Entry textClicked def textClicked(text event row):     input = hippo.CanvasEntry()     input.set_property('text' text.get_property('text'))     entry = input.get_property("widget")     def grabit(widget):         entry.grab_focus()     entry.connect("realize" grabit)     parent = text.get_parent()     parent.insert_after(input text)     parent.remove(text)  
time time clock time clock clock clock clock Timer time.perf_counter() time.process_time() perf_counter timeit 
get_nowait() Queue def queue_get_all(q):     items = []     maxItemsToRetreive = 10     for numOfItemsRetrieved in range(0 maxItemsToRetreive):         try:             if numOfItemsRetrieved == maxItemsToRetreive:                 break             items.append(q.get_nowait())         except Empty e:             break     return items  
count = 0 for line in lines:     if line.startswith ('"""'):         count += 1         if count &lt; 3:             # Before or during end of the docstring             continue     # Line is after docstring  
if request.method == 'POST':     PostEntries = len(request.POST)     x = 1                while x &lt; PostEntries:             p = Product.objects.get(pk=x)             p.order = int(request.POST.get(str(x)''))             print "Itr: " + str(x)             x = x + 1             p.save() # NOTE HERE &lt;- saving in loop instead of outside     print "Product Order saved"                  return HttpResponse("Saved")  
twos threes = countmatching(xrange(110)                              lambda a: a % 2 == 0                              lambda a: a % 3 == 0)  def countmatching(iterable *predicates):     v = [0] * len(predicates)     for e in iterable:         for ip in enumerate(predicates):             if p(e):                 v[i] += 1     return tuple(v)  def quantify(seq pred=None):     "Count how many times the predicate is true in the sequence"     return sum(imap(pred seq))  
    class TimeStamper(object):         def __init__(self):             self.lock = threading.Lock()             self.prev = None             self.count = 0           def getTimestamp(self):              with self.lock:                  ts = str(datetime.now())                  if ts == self.prev:                      ts +='.%04d' % self.count                      self.count += 1                  else:                      self.prev = ts                      self.count = 1              return ts  
a = { 'key':1 'another':2 'key2':1 }  b= a.items() b.sort( key=lambda a:(-a[1]a[0]) ) print b  def valueKeyCmp( a b ):     return cmp( (-a[1] a[0]) (-b[1] b[0] ) )  b.sort( cmp= valueKeyCmp ) print b  b.sort( key=lambda a:a[1] reverse=True ) b.sort( key=lambda a:a[0] ) print b  
CRoom person.py CRoom person.py from room import CRoom import room room.CRoom Self.NextId += 1 NextId NextId CRoom.NextId += 1 Self.__class__.NextId += 1 
from threading import local  _thread_locals = local() def get_current_user():     return getattr(getattr(_thread_locals 'user' None)'id'None)  class ThreadLocals(object):     """Middleware that gets various objects from the     request object and saves them in thread local storage."""     def process_request(self request):         _thread_locals.user = getattr(request 'user' None)  user = threadlocals.get_current_user  
import subprocess ps = subprocess.Popen("ps -U 0" shell=True stdout=subprocess.PIPE) print ps.stdout.read() ps.stdout.close() ps.wait()  Python 2.5.2 (r252:60911 Feb 22 2008 07:57:53)  [GCC 4.0.1 (Apple Computer Inc. build 5363)] on darwin  
import itertools  cars = [     {'car': 'X2' 'mods': [12]}     {'car': 'Y2' 'mods': [2]}     {'car': 'W2' 'mods': [1]}     {'car': 'X1' 'mods': [12]}     {'car': 'W1' 'mods': [1]}     {'car': 'Y1' 'mods': [2]}     {'car': 'Z1' 'mods': [123]}     {'car': 'X3' 'mods': [12]} ]  cars.sort(key=lambda car: car['mods'])  cars_by_common_mods = {} for k g in itertools.groupby(cars lambda car: car['mods']):     cars_by_common_mods[frozenset(k)] = [car['car'] for car in g]  print cars_by_common_mods  import collections import itertools from operator import itemgetter  from django.db import connection  cursor = connection.cursor() cursor.execute('SELECT car_id mod_id FROM someapp_car_mod ORDER BY 1 2') cars = collections.defaultdict(list) for row in cursor.fetchall():     cars[row[0]].append(row[1])  # Here's one I prepared earlier which emulates the sample data we've been working # with so far but using the car id instead of the previous string. cars = {     1: [12]     2: [2]     3: [1]     4: [12]     5: [1]     6: [2]     7: [123]     8: [12] }  sorted_cars = sorted(cars.iteritems() key=itemgetter(1)) cars_by_common_mods = [] for k g in itertools.groupby(sorted_cars key=itemgetter(1)):     cars_by_common_mods.append({'mods': k 'cars': map(itemgetter(0) g)})  print cars_by_common_mods  # Which for the sample data gives me (reformatted by hand for clarity) [{'cars': [3 5]    'mods': [1]}  {'cars': [1 4 8] 'mods': [1 2]}  {'cars': [7]       'mods': [1 2 3]}  {'cars': [2 6]    'mods': [2]}]  dict 
TechInline TechInLine python manage.py sqlreset &lt;myapp&gt;  projects_project_techs 
** def glob_to_regex(pat dirsep=os.sep):     dirsep = re.escape(dirsep)     print re.escape(pat)     regex = (re.escape(pat).replace("\\*\\*"+dirsep".*")                            .replace("\\*\\*"".*")                            .replace("\\*""[^%s]*" % dirsep)                            .replace("\\?""[^%s]" % dirsep))     return re.compile(regex+"$")  [a-z] \*\*/ \*\*/CVS ./CVS \*\* ** pat.split('/') -&gt; ['**''CVS''*'] n levels deep -&gt; look at pat[n] pat[n] == '**' dirsep.join(pat[n:]) glob\_to\_regex() os.walk "**" glob.glob(os.path.join(curpathpat[n])) "**" pat[n] pat[n+1] 
class RevisionView(object):     def __init__(self db revid):         self.db = db         self.revid = revid     def __getitem__(self item):         self.db.getrev(item self.revid)  
_ContainerThing__value __value value _value 
remotefile.info()['Content-Disposition'] urlparse.urlsplit &gt;&gt;&gt; urlparse.urlsplit('http://example.com/somefile.zip') ('http' 'example.com' '/somefile.zip' '' '') &gt;&gt;&gt; urlparse.urlsplit('http://example.com/somedir/somefile.zip') ('http' 'example.com' '/somedir/somefile.zip' '' '')  &gt;&gt;&gt; 'http://example.com/somefile.zip'.split('/')[-1] 'somefile.zip' &gt;&gt;&gt; 'http://example.com/somedir/somefile.zip'.split('/')[-1] 'somefile.zip'  
Popen.communicate()     pipe = os.popen(cmd 'w' bufsize)     # ==&gt;     pipe = Popen(cmd shell=True bufsize=bufsize stdin=PIPE).stdin  from subprocess import Popen PIPE STDOUT  p = Popen(['grep' 'f'] stdout=PIPE stdin=PIPE stderr=STDOUT)     grep_stdout = p.communicate(input=b'one\ntwo\nthree\nfour\nfive\nsix\n')[0] print(grep_stdout.decode()) # -&gt; four # -&gt; five # -&gt;  subprocess.run #!/usr/bin/env python3 from subprocess import run PIPE  p = run(['grep' 'f'] stdout=PIPE         input='one\ntwo\nthree\nfour\nfive\nsix\n' encoding='ascii') print(p.returncode) # -&gt; 0 print(p.stdout) # -&gt; four # -&gt; five # -&gt;   
SetEnv proxy-nokeepalive 1 
class UserAdmin(admin.ModelAdmin):     list_display = (... 'get_author')      def get_author(self obj):         return obj.book.author     get_author.short_description = 'Author'     get_author.admin_order_field = 'book__author'  
import pyHook import pythoncom  def onclick(event):     print event.Position     return True  hm = pyHook.HookManager() hm.SubscribeMouseAllButtonsDown(onclick) hm.HookMouse() pythoncom.PumpMessages() hm.UnhookMouse()  
>>> class MyClass: ...     myAttribute = 0 ...  >>> c = MyClass() >>> c.myAttribute  0 >>> c.myAttribute = 1 >>> c.myAttribute 1  
timeout import time sys  time.sleep(float(sys.argv[1]))  sleep sleep.py .PY 
del L[:]  
for key in exclusion:      a.pop(key None)  None key 
def rematcher(re_str iterable):      matcher= re.compile(re_str)     in_match= 0     for item in iterable:         if matcher.match(item):             if in_match == 0:                 yield item             in_match+= 1         else:             if in_match &gt; 1:                 yield "%s repeats %d more times\n" % (re_str in_match-1)             in_match= 0             yield item     if in_match &gt; 1:         yield "%s repeats %d more times\n" % (re_str in_match-1)  import sys re  for line in rematcher(".*Dog.*" sys.stdin):     sys.stdout.write(line)  final_string= '\n'.join(rematcher(".*Dog.*" your_initial_string.split("\n")))  
mods = ('Project''Links''Profile''Contact')  urlpatterns = patterns(''    *(('^%s/$'%n 'mysite.app.views.%s'%n.lower()) for n in mods) )  
# Find the storage class and call setup (first time only). storage_class = storage_type.title() + 'Session' storage_class = globals()[storage_class] if not hasattr(cherrypy "session"):     if hasattr(storage_class "setup"):         storage_class.setup(**kwargs)  # Create cherrypy.session which will proxy to cherrypy.serving.session if not hasattr(cherrypy "session"):     cherrypy.session = cherrypy._ThreadLocalProxy('session')  FileSession.setup(**kwargs) cherrypy.session = cherrypy._ThreadLocalProxy('session')  
os.write(tup[0] "foo\n")  f = os.fdopen(tup[0] "w") f.write("foo")  
subdir = d / 'subdir' #subdir is a path object in the path.py module with subdir:   # here current dir is subdir  #not anymore  
save pre_save pre_save pre_delete save delete 
&gt;&gt;&gt; a = np.array([[[101] ...                [010]] ...               [[110] ...                [001]]]) &gt;&gt;&gt; b = np.packbits(aaxis=-1) &gt;&gt;&gt; b array([[[160][64]][[192][32]]] dtype=uint8)  
factorGenerator divisorGen def divisorGen(n):     factors = list(factorGenerator(n))     nfactors = len(factors)     f = [0] * nfactors     while True:         yield reduce(lambda x y: x*y [factors[x][0]**f[x] for x in range(nfactors)] 1)         i = 0         while True:             f[i] += 1             if f[i] &lt;= factors[i][1]:                 break             f[i] = 0             i += 1             if i &gt;= nfactors:                 return  factorGenerator 
inputString.splitlines()  splitlines() 
for i tag in enumerate(tag):     tagDict[tag] = i  
def Comment(text=None):     element = Element(Comment)     element.text = text     return element  _write if tag is Comment:     file.write("&lt;!-- %s --&gt;" % _escape_cdata(node.text encoding))  CDATA _write import elementtree.ElementTree as etree #~ import cElementTree as etree  def CDATA(text=None):     element = etree.Element(CDATA)     element.text = text     return element  class ElementTreeCDATA(etree.ElementTree):     def _write(self file node encoding namespaces):         if node.tag is CDATA:             text = node.text.encode(encoding)             file.write("\n&lt;![CDATA[%s]]&gt;\n" % text)         else:             etree.ElementTree._write(self file node encoding namespaces)  if __name__ == "__main__":     import sys      text = """     &lt;?xml version='1.0' encoding='utf-8'?&gt;     &lt;text&gt;     This is just some sample text.     &lt;/text&gt;     """      e = etree.Element("data")     cdata = CDATA(text)     e.append(cdata)     et = ElementTreeCDATA(e)     et.write(sys.stdout "utf-8")  
&gt;&gt;&gt; [&quot;foo&quot; &quot;bar&quot; &quot;baz&quot;].index(&quot;bar&quot;) 1  index list list.index list.index(x[ start[ end]])  ValueError index index l.index(999_999 999_990 1_000_000) l.index(999_999) &gt;&gt;&gt; import timeit &gt;&gt;&gt; timeit.timeit('l.index(999_999)' setup='l = list(range(0 1_000_000))' number=1000) 9.356267921015387 &gt;&gt;&gt; timeit.timeit('l.index(999_999 999_990 1_000_000)' setup='l = list(range(0 1_000_000))' number=1000) 0.0004404920036904514    index &gt;&gt;&gt; [1 1].index(1) 0 &gt;&gt;&gt; [i for i e in enumerate([1 2 1]) if e == 1] [0 2] &gt;&gt;&gt; g = (i for i e in enumerate([1 2 1]) if e == 1) &gt;&gt;&gt; next(g) 0 &gt;&gt;&gt; next(g) 2  index index index ValueError &gt;&gt;&gt; [1 1].index(2) Traceback (most recent call last):   File &quot;&lt;stdin&gt;&quot; line 1 in &lt;module&gt; ValueError: 2 is not in list  item in my_list index try/except ValueError 
s socket.socket() .connect import socket s = socket.socket() address = '127.0.0.1' port = 80  # port number is a number not string try:     s.connect((address port))      # originally it was      # except Exception e:      # but this syntax is not supported anymore.  except Exception as e:      print("something's wrong with %s:%d. Exception is %s" % (address port e)) finally:     s.close()  except 
my_project 
shows = [   {"id": 1 "name": "Sesaeme Street"}   {"id": 2 "name": "Dora The Explorer"} ]  
imaplib SELECT IMAP4.list imaplib r'(\HasNoChildren) "/"' / 
import sys sys.exit()  import sys sys.exit(0)  import sys sys.exit("aa! errors!")  
class class1:   def greet(self):     print "hi"  class class2:   def greet(self):     print "hello"  maker = class1 obj1 = maker()  maker = class2 obj2 = maker()  obj1.greet() # prints "hi" obj2.greet() # prints "hello"  
re.match ^ MatchObject None search() re.search MatchObject None match search match search match search match search '^' '^' MULTILINE match pos # example code: string_with_newlines = """something someotherthing"""  import re  print re.match('some' string_with_newlines) # matches print re.match('someother'                 string_with_newlines) # won't match print re.match('^someother' string_with_newlines                 re.MULTILINE) # also won't match print re.search('someother'                  string_with_newlines) # finds something print re.search('^someother' string_with_newlines                  re.MULTILINE) # also finds something  m = re.compile('thing$' re.MULTILINE)  print m.match(string_with_newlines) # no match print m.match(string_with_newlines pos=4) # matches print m.search(string_with_newlines                 re.MULTILINE) # also matches  
if (cond1 == 'val1' and cond2 == 'val2' and         cond3 == 'val3' and cond4 == 'val4'):     do_something  if (           cond1 == 'val1' and cond2 == 'val2' and         cond3 == 'val3' and cond4 == 'val4'    ):     do_something if    (cond1 == 'val1' and cond2 == 'val2' and         cond3 == 'val3' and cond4 == 'val4'):     do_something  if cond1 == 'val1' and cond2 == 'val2' and \    cond3 == 'val3' and cond4 == 'val4':     do_something  if cond1 == 'val1' and cond2 == 'val2' and \                        cond3 == 'val3' and \                        cond4 == 'val4':     do_something  if cond1 == 'val1' and \    cond2 == 'val2' and \    cond3 == 'val3' and \    cond4 == 'val4':     do_something  
msvcr71.dll py2exe 
Notebook class Notebook(wx.Frame):     def __init__(self parent id title):         wx.Frame.__init__(self parent id title size=(600 600))         menubar = wx.MenuBar()         file = wx.Menu()         file.Append(101 'Quit' '' )         menubar.Append(file "&amp;File")         self.SetMenuBar(menubar)         wx.EVT_MENU(self 101 self.OnQuit)         nb = wx.Notebook(self -1 style=wx.NB_BOTTOM)         self.sheet1 = MySheet(nb)         self.sheet2 = MySheet(nb)         self.sheet3 = MySheet(nb)         nb.AddPage(self.sheet1 "Sheet1")         nb.AddPage(self.sheet2 "Sheet2")         nb.AddPage(self.sheet3 "Sheet3")         self.sheet1.SetFocus()         self.StatusBar()         # new code begins here:         # add your text ctrl:         self.text = wx.TextCtrl(self -1 style = wx.TE_MULTILINE)         # create a new sizer for both controls:         sizer = wx.BoxSizer(wx.VERTICAL)         # add notebook first with size factor 2:         sizer.Add(nb 2)         # then text size factor 1 maximized         sizer.Add(self.text 1 wx.EXPAND)         # assign the sizer to Frame:         self.SetSizerAndFit(sizer)  __init__ Add 
bsddb.dbtables.bsdTableDB([dbname][folder] create=1)  
#!/usr/bin/env python import datetime  # http://www.feedparser.org/ import feedparser # http://www.dalkescientific.com/Python/PyRSS2Gen.html import PyRSS2Gen  # Get the data parsed_feed = feedparser.parse('http://reddit.com/.rss')  # Modify the parsed_feed data here  items = [     PyRSS2Gen.RSSItem(         title = x.title         link = x.link         description = x.summary         guid = x.link         pubDate = datetime.datetime(             x.modified_parsed[0]             x.modified_parsed[1]             x.modified_parsed[2]             x.modified_parsed[3]             x.modified_parsed[4]             x.modified_parsed[5])         )      for x in parsed_feed.entries ]  # make the RSS2 object # Try to grab the title link language etc from the orig feed  rss = PyRSS2Gen.RSS2(     title = parsed_feed['feed'].get("title")     link = parsed_feed['feed'].get("link")     description = parsed_feed['feed'].get("description")      language = parsed_feed['feed'].get("language")     copyright = parsed_feed['feed'].get("copyright")     managingEditor = parsed_feed['feed'].get("managingEditor")     webMaster = parsed_feed['feed'].get("webMaster")     pubDate = parsed_feed['feed'].get("pubDate")     lastBuildDate = parsed_feed['feed'].get("lastBuildDate")      categories = parsed_feed['feed'].get("categories")     generator = parsed_feed['feed'].get("generator")     docs = parsed_feed['feed'].get("docs")      items = items )   print rss.to_xml()  
c="8eirwN1kTwCzgWA2HxTaRQ==".decode('base64')  
&gt;&gt;&gt; import ntpath &gt;&gt;&gt; filepath = r"c:\ttemp\FILEPA~1.EXE" &gt;&gt;&gt; print ntpath.basename(filepath) FILEPA~1.EXE &gt;&gt;&gt; print ntpath.splitdrive(filepath) ('c:' '\\ttemp\\FILEPA~1.EXE')  
def unique_file(file_name):     counter = 1     file_name_parts = os.path.splitext(file_name) # returns ('/path/file' '.ext')     while 1:         try:             fd = os.open(file_name os.O_CREAT | os.O_EXCL | os.O_RDRW)             return os.fdopen(fd) file_name         except OSError:             pass         file_name = file_name_parts[0] + '_' + str(counter) + file_name_parts[1]         counter += 1  def unique_file(file_name):     dirname filename = os.path.split(file_name)     prefix suffix = os.path.splitext(filename)      fd filename = tempfile.mkstemp(suffix prefix+"_" dirname)     return os.fdopen(fd) filename  &gt;&gt;&gt; f filename=unique_file('/home/some_dir/foo.txt') &gt;&gt;&gt; print filename /home/some_dir/foo_z8f_2Z.txt  
5 / 2 2.5 5 // 2 2 from __future__ import division 5.0 // 2 2.0 
lst2=lst1[:]  import copy lst2=copy.deepcopy(lst1)  
re.match(r'Run.*\.py$')  filename.startswith("Run") and filename.endswith(".py")  
def unique_mapping(mappings):     return dict((m['id'] m) for m in mappings).values()  def unique_mapping(mappings):     addedIds = set()     for m in mappings:         mId = m['id']         if mId not in addedIds:             addedIds.add(mId)             yield m  list(unique_mappings(mappings)) 
portalocker.lock(file flags)  
import xyz remove os.remove  from os import open  import module [as renamed_module] import config config.dburl = 'sqlite:///test.db'  import module 
s= "Name1=Value1;Name2=Value2;Name3=Value3" dict(item.split("=") for item in s.split(";"))  &gt;&gt;&gt; s = "Name1='Value=2';Name2=Value2;Name3=Value3"  &gt;&gt;&gt; dict(csv.reader([item] delimiter='=' quotechar="'").next()           for item in csv.reader([s] delimiter=';' quotechar="'").next())  {'Name2': 'Value2' 'Name3': 'Value3' 'Name1': 'Value1=2'}  
def _bin(x width):     return ''.join(str((x&gt;&gt;i)&amp;1) for i in xrange(width-1-1-1))  _conv_table = [_bin(x8) for x in range(256)]  def bin(x):     if x == 0:          return '0' #Special case: Don't strip leading zero if no other digits     elif x &lt; 0:         sign='-'         x*=-1     else:         sign = ''     l=[]     while x:         l.append(_conv_table[x &amp; 0xff])         x &gt;&gt;= 8     return sign + ''.join(reversed(l)).lstrip("0")  Num Bits:              8       16       32       64      128      256 --------------------------------------------------------------------- bin                0.544    0.586    0.744    1.942    1.854    3.357  bin16              0.542    0.494    0.592    0.773    1.150    1.886 constantin_bin     2.238    3.803    7.794   17.869   34.636   94.799 num_bin            3.712    5.693   12.086   32.566   67.523  128.565 Python3's bin      0.079    0.045    0.062    0.069    0.212    0.201   
target target = open(target_path "wb")  
def grid_objects(alist blist):     for i in range(len(alist)):         for j in range(len(alist[i])):             yield(alist[i][j] blist[i][j])  for (a b) in grid_objects(alist blist):     if a.is_whatever():         b.do_something()  
return 
- url: /.*   script: main.py  from google.appengine.ext import webapp from google.appengine.ext.webapp.util import run_wsgi_app  class NotFoundPageHandler(webapp.RequestHandler):     def get(self):         self.error(404)         self.response.out.write('&lt;Your 404 error html page&gt;')  application = webapp.WSGIApplication([('/.*' NotFoundPageHandler)]                                      debug=True)  def main():     run_wsgi_app(application)  if __name__ == "__main__":     main()  &lt;Your 404 error html page&gt; 
x.pattern  
getattr __getattr__ dir __dict__ __getattr__ inspect 
import codecs BLOCKSIZE = 1048576 # or some other desired size in bytes with codecs.open(sourceFileName "r" "your-source-encoding") as sourceFile:     with codecs.open(targetFileName "w" "utf-8") as targetFile:         while True:             contents = sourceFile.read(BLOCKSIZE)             if not contents:                 break             targetFile.write(contents)  BLOCKSIZE 
kwargs exc_info stack_info extra exc_info sys.exc_info() sys.exc_info() logger.warning("something raised an exception:" exc_info=True)  
from django.db.models.signals import post_save  class Activity(models.Model):     name = models.CharField(max_length=50 help_text='Some help.')     entity = models.ForeignKey(CancellationEntity)      @classmethod     def cancellation_occurred (sender instance created raw):         # grab the current instance of Activity         self = instance.activity_set.all()[0]         # do something     ...   class Cancellation(models.Model):     activity = models.ForeignKey(Activity)     date = models.DateField(default=datetime.now().date())     description = models.CharField(max_length=250)     ...  post_save.connect(Activity.cancellation_occurred sender=Cancellation) 
class Foo:   pass # dummy class  Foo.bar = lambda self: 42  x = Foo() print x.bar()  class Foo:   pass # dummy class  x = Foo()  Foo.bar = lambda self: 42  print x.bar()  int float 
""" Registry related functionality. """ import wx # ...  from RegistryController import RegistryController from ui.windows.lists import ListCtrl DynamicListCtrl  from main.core import Exceptions # ... raise Exceptions.FileNotFound()  import X as Y from Queue import Queue from main.core.MessageQueue import Queue as MessageQueue  
# Create dict with a million items: import shelve d = shelve.open('path/to/my_persistant_dict') d.update(('key%d' % x x) for x in xrange(1000000)) d.close()  &gt;&gt;&gt; d = shelve.open('path/to/my_persistant_dict') &gt;&gt;&gt; print d['key99999'] 99999  
def is_ascii(s):     return all(ord(c) &lt; 128 for c in s)  
repr() &lt;?php  function py_escape($input) {     $descriptorspec = array(         0 =&gt; array("pipe" "r")         1 =&gt; array("pipe" "w")         );     $process = proc_open(         "python -c 'import sys; sys.stdout.write(repr(sys.stdin.read()))'"         $descriptorspec $pipes);     fwrite($pipes[0] $input);     fclose($pipes[0]);     $chunk_size = 8192;     $escaped = fread($pipes[1] $chunk_size);     if (strlen($escaped) == $chunk_size) {         // This is important for security.         die("That string's too big.\n");     }     proc_close($process);     return $escaped; }  // Example usage: $x = "string \rfull \nof\t crappy stuff"; print py_escape($x);  chunk_size ("hello " + ("." * chunk_size)) '; os.system("do bad stuff") system() os.system(map(chr ...)) 
printf "1: %&lt;key1&gt;s 2: %&lt;key2&gt;s\n" {:key1 =&gt; "value1" :key2 =&gt; "value2"}  data = {:key1 =&gt; "value1" :key2 =&gt; "value2"} printf "1: %&lt;key1&gt;s 2: %&lt;key2&gt;s\n"  data  data = {key1: "value1" key2: "value2"} printf "1: %&lt;key1&gt;s 2: %&lt;key2&gt;s\n" data  1: value1 2: value2  printf String#% printf "1: %&lt;key1&gt;s 2: %&lt;key2&gt;s\n"  {:key1 =&gt; "value1" :key2 =&gt; "value2"} printf "1: %&lt;key1&gt;s 2: %&lt;key2&gt;s\n" % {:key1 =&gt; "value1" :key2 =&gt; "value2"} print  "1: %&lt;key1&gt;s 2: %&lt;key2&gt;s\n" % {:key1 =&gt; "value1" :key2 =&gt; "value2"} puts   "1: %&lt;key1&gt;s 2: %&lt;key2&gt;s"   % {:key1 =&gt; "value1" :key2 =&gt; "value2"}  String#% printf 
class Enumerate(object):   def __init__(self names):     for number name in enumerate(names.split()):       setattr(self name number)   codes = Enumerate('FOO BAR BAZ')  codes.BAZ  from __future__ import generators   def enumerate(iterable):    number = 0    for name in iterable:      yield number name      number += 1  
&gt;&gt;&gt; import platform &gt;&gt;&gt; platform.win32_ver() ('XP' '5.1.2600' 'SP2' 'Multiprocessor Free') &gt;&gt;&gt; platform.system() 'Windows' &gt;&gt;&gt; platform.version() '5.1.2600' &gt;&gt;&gt; platform.release() 'XP'  
&gt;&gt;&gt; import inspect &gt;&gt;&gt; def func(abc=42 *args **kwargs): pass &gt;&gt;&gt; inspect.getargspec(func) (['a' 'b' 'c'] 'args' 'kwargs' (42))  def getRequiredArgs(func):     args varargs varkw defaults = inspect.getargspec(func)     if defaults:         args = args[:-len(defaults)]     return args   # *args and **kwargs are not required so ignore them.  def missingArgs(func argdict):     return set(getRequiredArgs(func)).difference(argdict)  def invalidArgs(func argdict):     args varargs varkw defaults = inspect.getargspec(func)     if varkw: return set()  # All accepted     return set(argdict) - set(args)  def isCallableWithArgs(func argdict):     return not missingArgs(func argdict) and not invalidArgs(func argdict)  
svn svn svn import os errno  # ...  try:   os.mkdir(dirName) except OSError e:   if e.errno != errno.EEXIST: raise # some other error   print 'Directory already exists.' else:   print 'Successfully created new directory.'  
# module.py: """About the module.  module.data: contains the word "spam"  """  data = "spam"  
csv.writer w = csv.writer(fileobj dialect ...)  
&gt;&gt;&gt; 5+5 10 &gt;&gt;&gt; _ 10 &gt;&gt;&gt; _ + 5 15 &gt;&gt;&gt; _ 15  
binascii &gt;&gt;&gt; import binascii &gt;&gt;&gt; print binascii.hexlify("ABCZ") '4142435a' &gt;&gt;&gt; print binascii.unhexlify("4142435a") 'ABCZ'  hashlib.md5 hexdigest() 
def r(a):   i = a.find('0')   ~i or exit(a)   [m in[(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3)or a[j]for j in range(81)] or r(a[:i]+m+a[i+1:])for m in'%d'%5**18] from sys import * r(argv[1])  from sys import exit argv def r(a):   i = a.find('0')   if i == -1:     exit(a)   for m in '%d' % 5**18:     m in[(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3) or a[j] for j in range(81)] or r(a[:i]+m+a[i+1:])  r(argv[1])  for m in'%d'%5**18 '%d'%5**18 '3814697265625' r(a[:i]+m+a[i+1:]) m in [(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3) or a[j] for j in range(81)] (i-j)%9 (i/9^j/9) (i/27^j/27|i%9/3^j%9/3) i/27^j^27 i%9/3^j%9/3 from sys import exit argv def r(a):   i = a.find('0')   if i == -1:     exit(a)   for m in '3814697265625':     okay = True     for j in range(81):       if (i-j)%9 == 0 or (i/9 == j/9) or (i/27 == j/27 and i%9/3 == j%9/3):         if a[j] == m:           okay = False           break     if okay:       # At this point m is not excluded by any row column or block so let's place it and recurse       r(a[:i]+m+a[i+1:])  r(argv[1])  $ time python sudoku.py 530070000600195000098000060800060003400803001700020006060000280000419005000080079 534678912672195348198342567859761423426853791713924856961537284287419635345286179  real    0m47.881s user    0m47.223s sys 0m0.137s  import sys  def same_row(ij): return (i/9 == j/9) def same_col(ij): return (i-j) % 9 == 0 def same_block(ij): return (i/27 == j/27 and i%9/3 == j%9/3)  def r(a):   i = a.find('0')   if i == -1:     sys.exit(a)    excluded_numbers = set()   for j in range(81):     if same_row(ij) or same_col(ij) or same_block(ij):       excluded_numbers.add(a[j])    for m in '123456789':     if m not in excluded_numbers:       # At this point m is not excluded by any row column or block so let's place it and recurse       r(a[:i]+m+a[i+1:])  if __name__ == '__main__':   if len(sys.argv) == 2 and len(sys.argv[1]) == 81:     r(sys.argv[1])   else:     print 'Usage: python sudoku.py puzzle'     print '  where puzzle is an 81 character string representing the puzzle read left-to-right top-to-bottom and 0 is a blank'  
proxy_support = urllib2.ProxyHandler({}) opener = urllib2.build_opener(proxy_support) print opener.open("http://127.0.0.1").read()  # Optional - makes this opener default for urlopen etc. urllib2.install_opener(opener) print urllib2.urlopen("http://127.0.0.1").read()  
~# cat getopt.py print "HI" ~# python Python 2.5.2 (r252:60911 Jul 31 2008 17:28:52) [GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import sys &gt;&gt;&gt; import getopt HI  ~# python Python 2.5.2 (r252:60911 Jul 31 2008 17:28:52) [GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.path.remove('') &gt;&gt;&gt; import getopt &gt;&gt;&gt; dir(getopt) ['GetoptError' '__all__' '__builtins__' '__doc__' '__file__' '__name__' 'do_longs' 'do_shorts' 'error' 'getopt' 'gnu_getopt' 'long_has_args' 'os' 'short_has_arg']  import sys sys.path.remove('') from getopt import getopt sys.path.insert(0'') opts args = getopt(sys.argv[1:] "h:s") for keyvalue in opts:     print key "=&gt;" value  
subprocess.call import subprocess subprocess.call(['C:\\Temp\\a b c\\Notepad.exe' 'C:\\test.txt'])  
try raise 
repr() 
import re  r = re.compile("[ab]") text = "abcdedfe falijbijie bbbb laifsjelifjl"  matches = [] replaced = [] pos = 0 for m in r.finditer(text):     matches.append(m.group(0))     replaced.append(text[pos:m.start()])     pos = m.end() replaced.append(text[pos:])  print matches print ''.join(replaced)  ['a' 'b' 'a' 'b' 'b' 'b' 'b' 'b' 'a'] cdedfe flijijie  lifsjelifjl  
somedata somedata = {} somedata['was_false_in_base'] = False  class  import sys  class Test(object):      if sys.platform == "linux2":          def hello(self):               print "Hello Linux"      else:          def hello(self):               print "Hello ~Linux"  Test().hello() Hello Linux __init__ self class Test(object):     def __init__(self):         self.inst_var = [1 2 3]  class SomeClass(object):     __instances__ = {}      def __new__(cls v1 v2 v3):         try:             return cls.__insts__[(v1 v2 v3)]         except KeyError:             return cls.__insts__.setdefault(                (v1 v2 v3)                 object.__new__(cls v1 v2 v3))  
if len(self.__value) &gt; 2:     widgetName.delete(24)     return "break" # add this line      self.__aEntry.bind('&lt;Key&gt;' self.callback) # ? here!     self.__aEntry.pack(side=LEFT)  def callback(self event):     self.__value = event.widget.get()+event.char # ? here!     print self.__value     if len(self.__value)&gt;2:         event.widget.delete(24) # ? here!         return "break"  
&gt;&gt;&gt; class A: foo = [] &gt;&gt;&gt; a b = A() A() &gt;&gt;&gt; a.foo.append(5) &gt;&gt;&gt; b.foo [5] &gt;&gt;&gt; class A: ...  def __init__(self): self.foo = [] &gt;&gt;&gt; a b = A() A() &gt;&gt;&gt; a.foo.append(5) &gt;&gt;&gt; b.foo     []  
sys.path from cherrypy.lib import static 
#!/usr/bin/env python  import readline  readline.clear_history() readline.add_history('foo') readline.add_history('bar')  while 1:     print raw_input('&gt; ')  #!/usr/bin/env python  import readline  values = ['Paul Eden &lt;paul@domain.com&gt;'            'Eden Jones &lt;ejones@domain.com&gt;'            'Somebody Else &lt;somebody@domain.com&gt;'] completions = {}  def completer(text state):     try:         matches = completions[text]     except KeyError:         matches = [value for value in values                    if text.upper() in value.upper()]         completions[text] = matches     try:         return matches[state]     except IndexError:         return None  readline.set_completer(completer) readline.parse_and_bind('tab: menu-complete')  while 1:     a = raw_input('&gt; ')     print 'said:' a  
x = int("deadbeef" 16)  &gt;&gt;&gt; print int("0xdeadbeef" 0) 3735928559 &gt;&gt;&gt; print int("10" 0) 10  0 
&gt;&gt;&gt; keys = ['a' 'b' 'c'] &gt;&gt;&gt; values = [1 2 3] &gt;&gt;&gt; dictionary = dict(zip(keys values)) &gt;&gt;&gt; print(dictionary) {'a': 1 'b': 2 'c': 3}  dict zip 
FTP.dir import ftplib  class FTP(ftplib.FTP):      def shim_dir(self *args):         '''List a directory in long form.         By default list current directory to stdout.         Optional last argument is callback function; all         non-empty arguments before it are concatenated to the         LIST command.  (This *should* only be used for a pathname.)'''         cmd = 'dir'         func = None         if args[-1:] and type(args[-1]) != type(''):             args func = args[:-1] args[-1]         for arg in args:             if arg:                 cmd = cmd + (' ' + arg)         print cmd         self.retrlines(cmd func)  if __name__ == '__main__':     f = FTP('ftp.ncbi.nih.gov')     f.login()     f.shim_dir('"blast"')  
met% pwd /home/coventry/src/Python-3.0rc1 met% rgrep uft-8 . ./Lib/test/bad_coding.py:# -*- coding: uft-8 -*- ./py3k/Lib/test/bad_coding.py:# -*- coding: uft-8 -*-  help 
0xFFFFFFFF &gt;&gt;&gt; m = 0xFFFFFF00 &gt;&gt;&gt; allf = 0xFFFFFFFF &gt;&gt;&gt; ~m &amp; allf 255L  
#!/usr/bin/python import sys print sys.argv  
from wx import EmptyIcon icon = EmptyIcon() icon.CopyFromBitmap(your_wxBitmap)  frame.SetIcon(icon)  
__import__ __import__( name[ globals[ locals[ fromlist[ level]]]])  def my_import(name):     mod = __import__(name)     components = name.split('.')     for comp in components[1:]:         mod = getattr(mod comp)     return mod  somepackage.somemodule __import__ somepackage.__init__.py somemodule fromlist somemodule 
function(doc) {   for (var tag in doc.tags) {     emit([tag doc.published] doc)   } };  
class options(object):     VERBOSE = True     IGNORE_WARNINGS = True  if options.VERBOSE:     # ...  options.py options.py VERBOSE = True IGNORE_WARNINGS = True  main.py import options  if options.VERBOSE:     # ...  
from bisect import bisect_left  def binary_search(a x lo=0 hi=None):  # can't use a to specify default for hi     hi = hi if hi is not None else len(a)  # hi defaults to len(a)        pos = bisect_left(a x lo hi)  # find insertion position     return pos if pos != hi and a[pos] == x else -1  # don't walk off the end  
Queue Condition threading Queue Queue def interruptable_get(self):     while True:         try:             return self.get(timeout=1000)         except Queue.Empty:             pass Queue.interruptable_get = interruptable_get  q.interruptable_get()  interruptable_get(q)  
from django.contrib.contenttypes.models import ContentType from django.views.generic import create_update  def update_object_as_child(parent_model_class):    """    Given a base models.Model class decorate a function to return      create_update.update_object on the child class.     e.g.    @update_object(Animal)    def update_object(request object_id):       pass    kwargs should have an object_id defined.   """    def decorator(function):       def wrapper(request **kwargs):           # may raise KeyError           id = kwargs['object_id']            parent_obj = parent_model_class.objects.get( pk=id )            # following http://www.djangosnippets.org/snippets/1031/           child_class = parent_obj.content_type.model_class()            kwargs['model'] = child_class            # rely on the generic code for testing/validation/404           return create_update.update_object(request **kwargs)       return wrapper    return decorator  from mysite.core.views.create_update import update_object_as_child  @update_object_as_child(Animal) def edit_animal(request object_id):   pass  urlpatterns += patterns('animals.views'   url(r'^edit/(?P&lt;object_id&gt;\d+)$' 'edit_animal' name="edit_animal") )  
PyObject *PyString_Decode(const char *s               Py_ssize_t size               const char *encoding               const char *errors) {     PyObject *v *str;      str = PyString_FromStringAndSize(s size);     if (str == NULL)     return NULL;     v = PyString_AsDecodedString(str encoding errors);     Py_DECREF(str);     return v; }  #include &lt;Python.h&gt; #include &lt;stdio.h&gt;  int main(int argc char *argv[]) {      char c_string[] = { (char)0x93 0 };      PyObject *py_string *py_unicode;       Py_Initialize();       py_string = PyString_FromStringAndSize(c_string 1);      if (!py_string) {           PyErr_Print();           return 1;      }      py_unicode = PyString_AsDecodedObject(py_string "windows_1252" "replace");      Py_DECREF(py_string);       return 0; }  
--- ngrep.c     2006-11-28 05:38:43.000000000 -0800 +++ ngrep.c.new 2008-10-17 16:28:29.000000000 -0700 @@ -6878 +6877 @@      }       if (quiet &lt; 1) { -        printf("#"); -        fflush(stdout); +      fprintf (stderr "#");      }       switch (ip_proto) {                   while (&lt;CMD&gt;) {   s/($keyword)/\e[93m$1\e[0m/g;   print; }  
PyArray_DescrConverter #include &lt;Python.h&gt; #include &lt;stdio.h&gt; #include &lt;numpy/arrayobject.h&gt;  int main(int argc char *argv[]) {      int dims[] = { 2 3 };      PyObject *op *array;      PyArray_Descr *descr;       Py_Initialize();      import_array();      op = Py_BuildValue("[(s s) (s s)]" "a" "i4" "b" "U5");      PyArray_DescrConverter(op &amp;descr);      Py_DECREF(op);      array = PyArray_SimpleNewFromDescr(2 dims descr);      PyObject_Print(array stdout 0);      printf("\n");      Py_DECREF(array);      return 0; }  
until until until while until num == 0 while num != 0 num = 3 until num == 0 do   puts num   num -= 1 end  3 2 1  num = 3 until num == 0:   print(num)   num -= 1  until pgen Grammar/Grammar until while while_stmt until_stmt compound_stmt: if_stmt | while_stmt | until_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite] while_stmt: 'while' test ':' suite ['else' ':' suite] until_stmt: 'until' test ':' suite  while until else until else compound_stmt until_stmt while_stmt make Grammar/Grammar pgen Include/graminit.h Python/graminit.c Parser/Python.asdl until while | While(expr test stmt* body stmt* orelse) | Until(expr test stmt* body)  make Parser/asdl_c.py Grammar/Grammar Parser/asdl_c.py Parser/asdl_c.py Include/Python-ast.h Python/Python-ast.c Python/ast.c ast_for_stmt while switch until_stmt case while_stmt:     return ast_for_while_stmt(c ch); case until_stmt:     return ast_for_until_stmt(c ch);  ast_for_until_stmt static stmt_ty ast_for_until_stmt(struct compiling *c const node *n) {     /* until_stmt: 'until' test ':' suite */     REQ(n until_stmt);      if (NCH(n) == 4) {         expr_ty expression;         asdl_seq *suite_seq;          expression = ast_for_expr(c CHILD(n 1));         if (!expression)             return NULL;         suite_seq = ast_for_suite(c CHILD(n 3));         if (!suite_seq)             return NULL;         return Until(expression suite_seq LINENO(n) n-&gt;n_col_offset c-&gt;c_arena);     }      PyErr_Format(PyExc_SystemError                  "wrong number of tokens for 'until' statement: %d"                  NCH(n));     return NULL; }  ast_for_while_stmt until else ast_for_expr ast_for_suite until Until n NCH CHILD Include/node.h until until condition:    # do stuff  while not condition:   # do stuff  Until ast_for_until_stmt Not While Python/compile.c while compiler_visit_stmt Until case While_kind:     return compiler_while(c s); case Until_kind:     return compiler_until(c s);  Until_kind _stmt_kind Include/Python-ast.h compiler_until compiler_visit_stmt grep VISIT Python/compile.c #define VISIT(C TYPE V) {\     if (!compiler_visit_ ## TYPE((C) (V))) \         return 0; \  compiler_visit_stmt compiler_body compiler_until static int compiler_until(struct compiler *c stmt_ty s) {     basicblock *loop *end *anchor = NULL;     int constant = expr_constant(s-&gt;v.Until.test);      if (constant == 1) {         return 1;     }     loop = compiler_new_block(c);     end = compiler_new_block(c);     if (constant == -1) {         anchor = compiler_new_block(c);         if (anchor == NULL)             return 0;     }     if (loop == NULL || end == NULL)         return 0;      ADDOP_JREL(c SETUP_LOOP end);     compiler_use_next_block(c loop);     if (!compiler_push_fblock(c LOOP loop))         return 0;     if (constant == -1) {         VISIT(c expr s-&gt;v.Until.test);         ADDOP_JABS(c POP_JUMP_IF_TRUE anchor);     }     VISIT_SEQ(c stmt s-&gt;v.Until.body);     ADDOP_JABS(c JUMP_ABSOLUTE loop);      if (constant == -1) {         compiler_use_next_block(c anchor);         ADDOP(c POP_BLOCK);     }     compiler_pop_fblock(c LOOP loop);     compiler_use_next_block(c end);      return 1; }  compiler_while dis make until &gt;&gt;&gt; until num == 0: ...   print(num) ...   num -= 1 ... 3 2 1  dis import dis  def myfoo(num):     until num == 0:         print(num)         num -= 1  dis.dis(myfoo)  4           0 SETUP_LOOP              36 (to 39)       &gt;&gt;    3 LOAD_FAST                0 (num)             6 LOAD_CONST               1 (0)             9 COMPARE_OP               2 (==)            12 POP_JUMP_IF_TRUE        38  5          15 LOAD_NAME                0 (print)            18 LOAD_FAST                0 (num)            21 CALL_FUNCTION            1            24 POP_TOP  6          25 LOAD_FAST                0 (num)            28 LOAD_CONST               2 (1)            31 INPLACE_SUBTRACT            32 STORE_FAST               0 (num)            35 JUMP_ABSOLUTE            3       &gt;&gt;   38 POP_BLOCK       &gt;&gt;   39 LOAD_CONST               0 (None)            42 RETURN_VALUE  until myfoo(3) Traceback (most recent call last):   File "zy.py" line 9 in     myfoo(3)   File "zy.py" line 5 in myfoo     print(num) SystemError: no locals when loading 'print'  PySymtable_Build PyAST_Compile Python/symtable.c symtable_visit_stmt Python/symtable.c until while case While_kind:     VISIT(st expr s-&gt;v.While.test);     VISIT_SEQ(st stmt s-&gt;v.While.body);     if (s-&gt;v.While.orelse)         VISIT_SEQ(st stmt s-&gt;v.While.orelse);     break; case Until_kind:     VISIT(st expr s-&gt;v.Until.test);     VISIT_SEQ(st stmt s-&gt;v.Until.body);     break;  Python/symtable.c Until_kind symtable_visit_stmt myfoo(3) 
import wx  class Test(wx.Frame):     def __init__(self):         wx.Frame.__init__(self None)         self.test = wx.ListCtrl(self style = wx.LC_REPORT | wx.LC_NO_HEADER)          for i in range(5):             self.test.InsertColumn(i 'Col %d' % (i + 1))             self.test.SetColumnWidth(i 200)           for i in range(0 100 5):             index = self.test.InsertStringItem(self.test.GetItemCount() "")             for j in range(5):                 self.test.SetStringItem(index j str(i+j)*30)          self.Show()  app = wx.PySimpleApp() app.TopWindow = Test() app.MainLoop()  
if a == b      print a  if a == b:      print a  
return print MyModule.py import thirdparty  def MyFunc(some_arg):     result = thirdparty.go()     return result  #include &lt;Python.h&gt;  int main(int argc char *argv[]) {     PyObject *pName *pModule *pFunc;     PyObject *pArgs *pArg *pResult;     int i;      Py_Initialize();     pName = PyString_FromString("MyModule.py");     /* Error checking of pName left out as exercise */      pModule = PyImport_Import(pName);     Py_DECREF(pName);      if (pModule != NULL) {         pFunc = PyObject_GetAttrString(pModule "MyFunc");         /* pFunc is a new reference */          if (pFunc) {             pArgs = PyTuple_New(0);             pArg = PyString_FromString("some parameter")             /* pArg reference stolen here: */             PyTuple_SetItem(pArgs 0 pArg);             pResult = PyObject_CallObject(pFunc pArgs);             Py_DECREF(pArgs);             if (pResult != NULL) {                 printf("Result of call: %s\n" PyString_AsString(pResult));                 Py_DECREF(pResult);             }             else {                 Py_DECREF(pFunc);                 Py_DECREF(pModule);                 PyErr_Print();                 fprintf(stderr"Call failed\n");                 return 1;             }         }         else {             if (PyErr_Occurred())                 PyErr_Print();             fprintf(stderr "Cannot find function");         }         Py_XDECREF(pFunc);         Py_DECREF(pModule);     }     else {         PyErr_Print();         fprintf(stderr "Failed to load module");         return 1;     }     Py_Finalize();     return 0; }  
h[ [0A[j]][j/9.. rest of boolean condition] 0*A[j] 1*A[j] A[j] 9 or 9or j not in h (j in h)-1 r=range(81) def R(A):  z={}   for i in r:   if 0==A[i]:h=dict((A[j]*(j/9==i/9or j%9==i%9or j/27==i/27and j%9/3==i%9/3)1)for j in r);z[9-len(h)]=hi  for l in sorted(z):   hi=z[l]   for j in r[1:10]:    if(j in h)-1:     A[i]=j     if R(A):return A   A[i]=0;return[]  return A  
GetTickCount ctypes XScreenSaverQueryInfo HIDIdleTime 
&gt;&gt;&gt; import fnmatch &gt;&gt;&gt; fnmatch.fnmatch("fooabcdef" "*abcde?") True &gt;&gt;&gt; help(fnmatch.fnmatch) Help on function fnmatch in module fnmatch:  fnmatch(name pat)     Test whether FILENAME matches PATTERN.      Patterns are Unix shell style:      *       matches everything     ?       matches any single character     [seq]   matches any character in seq     [!seq]  matches any char not in seq      An initial period in FILENAME is not special.     Both FILENAME and PATTERN are first case-normalized     if the operating system requires it.     If you don't want this use fnmatchcase(FILENAME PATTERN).  &gt;&gt;&gt;   
inspect &gt;&gt;&gt; inspect.getfullargspec(a_method) (['arg1' 'arg2'] None None None)  &gt;&gt;&gt; def foo(a b c=4 *arglist **keywords): pass &gt;&gt;&gt; inspect.getfullargspec(foo) (['a' 'b' 'c'] 'arglist' 'keywords' (4))  ValueError inspect.getfullargspec() inspect.signature() &gt;&gt;&gt; inspect.signature(foo) &lt;Signature (a b c=4 *arglist **keywords)&gt;  
mod_wsgi mod_python mod_wsgi mod_fastcgi mod_wsgi Apache -&gt; mod_fastcgi -&gt; FLUP (via FastCGI protocol) -&gt; Django (via WSGI protocol)  manage.py runfcgi 
from subprocess import Popen PIPE output = Popen(["mycmd" "myarg"] stdout=PIPE).communicate()[0]  #this is how I'd mangle the arguments together output = Popen([     self._ghostscriptPath     'gswin32c'    '-q'    '-dNOPAUSE'    '-dBATCH'    '-sDEVICE=tiffg4'    '-r196X204'    '-sPAPERSIZE=a4'    '-sOutputFile="%s %s"' % (tifDest pdfSource) ] stdout=PIPE).communicate()[0]  os.popen(' '.join([     self._ghostscriptPath     'gswin32c'    '-q'    '-dNOPAUSE'    '-dBATCH'    '-sDEVICE=tiffg4'    '-r196X204'    '-sPAPERSIZE=a4'    '-sOutputFile="%s %s"' % (tifDest pdfSource) ]))  
RELATEDCLASSNAME_set some_foo.bar_set.all()  related_name ForeignKey class Foo(models.Model):      name = models.CharField()  class Bar(models.Model):      title = models.CharField()      foo = models.ForeignKey(Foo related_name='bars')  ...  some_foo.bars.all()  
(c) Copyright 
 class_lookup = {'Class1' : Class1 ... }  ...  result = class_lookup[className](param).html  class Namespace(object):     class Class1(object):         ...     class Class2(object):         ... ... result = getattr(Namespace className)(param).html  def register_subclasses(base):     d={}     for cls in base.__subclasses__():         d[cls.__name__] = cls         d.update(register_subclasses(cls))     return d  class_lookup = register_subclasses(MyBaseClass)  
&gt;&gt;&gt; import win32com.client &gt;&gt;&gt; b = win32com.client.Dispatch('VisualStudio.DTE') &gt;&gt;&gt; b &lt;COMObject VisualStudio.DTE&gt; &gt;&gt;&gt; b.name u'Microsoft Visual Studio' &gt;&gt;&gt; b.Version u'8.0'  
from operator import itemgetter  MY_SORTED_TUPLE = tuple(sorted(MY_TUPLE key=itemgetter(1)))  itemgetter MY_SORTED_TUPLE = tuple(sorted(MY_TUPLE key=lambda item: item[1]))  
super() super() Child 
headerRows[0][10].contents[0].find('b').string  
urlopen() data.read() .read() 
className = MyClass newObject = className()  className MyClass MyClass className &gt;&gt;&gt; className = list &gt;&gt;&gt; newObject = className() &gt;&gt;&gt; newObject []  list list 
render_to_response {% for object in data.filtered_set %} 
class DictObj(object):     def __getattr__(self attr):         return self.__dict__.get(attr)  &gt;&gt;&gt; d = DictObj() &gt;&gt;&gt; d.something = 'one' &gt;&gt;&gt; print d.something one &gt;&gt;&gt; print d.somethingelse None &gt;&gt;&gt;   
((abc) for a in [123] for b in [456789] for c in [12])  def combinations(*seqs):   if not seqs: return (item for item in ())   first rest = seqs[0] seqs[1:]   if not rest: return ((item) for item in first)   return ((item) + items for item in first for items in combinations(*rest))  &gt;&gt;&gt; for pair in combinations('abc' [123]): ...   print pair ...  ('a' 1) ('a' 2) ('a' 3) ('b' 1) ('b' 2) ('b' 3) ('c' 1) ('c' 2) ('c' 3)  
emailpath = str(self._emailpath + self._inboxfolder + "\\" + email + "_" + msg.getheader("Subject") + ".eml")  emailpath = os.path.join(self._emailpath + self._inboxfolder email + "_" + msg.getheader("Subject") + ".eml")  try:     import cStringIO as StringIO except ImportError:     import StringIO  emailpath = "".join([c for c in emailpath if c in (string.letters + string.digits + "_ ")])  
from wsgiref.handlers import format_date_time from datetime import datetime from time import mktime  now = datetime.now() stamp = mktime(now.timetuple()) print format_date_time(stamp) #--&gt; Wed 22 Oct 2008 10:52:40 GMT  from email.utils import formatdate from datetime import datetime from time import mktime  now = datetime.now() stamp = mktime(now.timetuple()) print formatdate(     timeval     = stamp     localtime   = False     usegmt      = True ) #--&gt; Wed 22 Oct 2008 10:55:46 GMT  import locale datetime  locale.setlocale(locale.LC_TIME 'en_US') datetime.datetime.utcnow().strftime('%a %d %b %Y %H:%M:%S GMT')  from datetime import datetime from babel.dates import format_datetime  now = datetime.utcnow() format = 'EEE dd LLL yyyy hh:mm:ss' print format_datetime(now format locale='en') + ' GMT'  def httpdate(dt):     """Return a string representation of a date according to RFC 1123     (HTTP/1.1).      The supplied date must be in UTC.      """     weekday = ["Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun"][dt.weekday()]     month = ["Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep"              "Oct" "Nov" "Dec"][dt.month - 1]     return "%s %02d %s %04d %02d:%02d:%02d GMT" % (weekday dt.day month         dt.year dt.hour dt.minute dt.second)  
feedparser *_parsed updated_parsed feedparser 
nosetests --with-xunit --enable-cover  
return self.display &gt;&gt;&gt; a = [12] &gt;&gt;&gt; b = [aa] &gt;&gt;&gt; b [[1 2] [1 2]] &gt;&gt;&gt; a.append(3) &gt;&gt;&gt; b [[1 2 3] [1 2 3]]  return self.display[:] 
def some_view(request):     if request.method == 'POST':         form1 = GeneralForm(request.POST prefix='form1')         form2 = GeneralForm(request.POST prefix='form2')         if all([form1.is_valid() form2.is_valid()]):             pass # Do stuff with the forms     else:         form1 = GeneralForm(prefix='form1')         form2 = GeneralForm(prefix='form2')     return render_to_response('some_template.html' {         'form1': form1         'form2': form2     })  
from django.conf.urls.defaults import *  urlpatterns = patterns('myproject.views'     url(r'^$' 'index' name='index') )  &lt;a href="{% url index %}"&gt;...  &lt;a href="{% url 'index' %}"&gt;...  
&gt;&gt;&gt; ord('a') 97 &gt;&gt;&gt; chr(97) 'a' &gt;&gt;&gt; chr(ord('a') + 3) 'd' &gt;&gt;&gt;  unichr unichr &gt;&gt;&gt; unichr(97) u'a' &gt;&gt;&gt; unichr(1234) u'\u04d2'  chr unichr 
import fileinput for line in fileinput.input (filenameToProcess inplace=1):     process (line)  import fileinput  for line in fileinput.input ("b.txt"inplace=1):     print "%d: %s" % (fileinput.lineno()line)  
def burninate(b):     c = []     b = list(b)     for i in range(3):         c.append(b.pop())     return c  def burninante(b):     return b[:-4:-1]   # return the last three elements in reverse order  
&gt;&gt;&gt; print hex (-1 &amp; 0xffffffff) 0xffffffffL  &gt;&gt;&gt; def hex2(n): ...     return hex (n &amp; 0xffffffff)[:-1] ... &gt;&gt;&gt; print hex2(-1) 0xffffffff &gt;&gt;&gt; print hex2(17) 0x11  &gt;&gt;&gt; def hex3(n): ...     return "0x%s"%("00000000%s"%(hex(n&amp;0xffffffff)[2:-1]))[-8:] ... &gt;&gt;&gt; print hex3(-1) 0xffffffff &gt;&gt;&gt; print hex3(17) 0x00000011  def hex2(n):     return "0x%x"%(n&amp;0xffffffff)  def hex3(n):     return "0x%s"%("00000000%x"%(n&amp;0xffffffff))[-8:]  
import string allTheLetters = string.lowercase  def getAllTheLetters(begin='a' end='z'):     beginNum = ord(begin)     endNum = ord(end)     for number in xrange(beginNum endNum+1):         yield chr(number)  True import string print ''.join(getAllTheLetters()) == string.lowercase  from collections import defaultdict     def letterOccurrances(string):     frequencies = defaultdict(lambda: 0)     for character in string:         frequencies[character.lower()] += 1     return frequencies  occs = letterOccurrances("Hello world!") print occs['l'] print occs['h']  # -*- coding: utf-8 -*- occs = letterOccurrances(u"hé??ó ?ó??d!") print occs[u'l'] print occs[u'?']  def alphCount(text):     for character count in sorted(letterOccurrances(text).iteritems()):         print "%s: %s" % (character count)  alphCount("hello world!")  
Cursor.execute() self.cursor.execute("SELECT weight FROM Equipment WHERE name = ?" [item])  
walklevel import os  def walklevel(some_dir level=1):     some_dir = some_dir.rstrip(os.path.sep)     assert os.path.isdir(some_dir)     num_sep = some_dir.count(os.path.sep)     for root dirs files in os.walk(some_dir):         yield root dirs files         num_sep_this = root.count(os.path.sep)         if num_sep + level &lt;= num_sep_this:             del dirs[:]  os.walk level 
PYTHONPATH /usr/lib/python2.5/site-packages PYTHONPATH &gt;&gt;&gt; import scapy &gt;&gt;&gt; dir(scapy)  &gt;&gt;&gt; import scapy &gt;&gt;&gt; help(scapy)  import scapy from scapy import * 
locals() &gt;&gt;&gt; name = 'foo' &gt;&gt;&gt; zip = 123 &gt;&gt;&gt; unused = 'whoops!' &gt;&gt;&gt; locals() {'name': 'foo' 'zip': 123 ... 'unused': 'whoops!' ...} &gt;&gt;&gt; '%(name)s %(zip)i' % locals() 'foo 123'  locals() &gt;&gt;&gt; name = 'foo' &gt;&gt;&gt; zip = 123 &gt;&gt;&gt; unused = 'whoops!' &gt;&gt;&gt; f'{zip: &gt;5} {name.upper()}' '  123 FOO'  
yield &gt;&gt;&gt; mylist = [1 2 3] &gt;&gt;&gt; for i in mylist: ...    print(i) 1 2 3  mylist &gt;&gt;&gt; mylist = [x*x for x in range(3)] &gt;&gt;&gt; for i in mylist: ...    print(i) 0 1 4  for... in... lists strings &gt;&gt;&gt; mygenerator = (x*x for x in range(3)) &gt;&gt;&gt; for i in mygenerator: ...    print(i) 0 1 4  () [] for i in mygenerator yield return &gt;&gt;&gt; def createGenerator(): ...    mylist = range(3) ...    for i in mylist: ...        yield i*i ... &gt;&gt;&gt; mygenerator = createGenerator() # create a generator &gt;&gt;&gt; print(mygenerator) # mygenerator is an object! &lt;generator object createGenerator at 0xb7555c34&gt; &gt;&gt;&gt; for i in mygenerator: ...     print(i) 0 1 4  yield for for yield yield "if/else" # Here you create the method of the node object that will return the generator def _get_child_candidates(self distance min_dist max_dist):      # Here is the code that will be called each time you use the generator object:      # If there is still a child of the node object on its left     # AND if the distance is ok return the next child     if self._leftchild and distance - max_dist &lt; self._median:         yield self._leftchild      # If there is still a child of the node object on its right     # AND if the distance is ok return the next child     if self._rightchild and distance + max_dist &gt;= self._median:         yield self._rightchild      # If the function arrives here the generator will be considered empty     # there is no more than two values: the left and the right children  # Create an empty list and a list with the current object reference result candidates = list() [self]  # Loop on candidates (they contain only one element at the beginning) while candidates:      # Get the last candidate and remove it from the list     node = candidates.pop()      # Get the distance between obj and the candidate     distance = node._get_dist(obj)      # If distance is ok then you can fill the result     if distance &lt;= max_dist and distance &gt;= min_dist:         result.extend(node._values)      # Add the children of the candidate in the candidate's list     # so the loop will keep running until it will have looked     # at all the children of the children of the children etc. of the candidate     candidates.extend(node._get_child_candidates(distance min_dist max_dist))  return result  candidates.extend(node._get_child_candidates(distance min_dist max_dist)) while extend() &gt;&gt;&gt; a = [1 2] &gt;&gt;&gt; b = [3 4] &gt;&gt;&gt; a.extend(b) &gt;&gt;&gt; print(a) [1 2 3 4]  &gt;&gt;&gt; class Bank(): # Let's create a bank building ATMs ...    crisis = False ...    def create_atm(self): ...        while not self.crisis: ...            yield "$100" &gt;&gt;&gt; hsbc = Bank() # When everything's ok the ATM gives you as much as you want &gt;&gt;&gt; corner_street_atm = hsbc.create_atm() &gt;&gt;&gt; print(corner_street_atm.next()) $100 &gt;&gt;&gt; print(corner_street_atm.next()) $100 &gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)]) ['$100' '$100' '$100' '$100' '$100'] &gt;&gt;&gt; hsbc.crisis = True # Crisis is coming no more money! &gt;&gt;&gt; print(corner_street_atm.next()) &lt;type 'exceptions.StopIteration'&gt; &gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # It's even true for new ATMs &gt;&gt;&gt; print(wall_street_atm.next()) &lt;type 'exceptions.StopIteration'&gt; &gt;&gt;&gt; hsbc.crisis = False # The trouble is even post-crisis the ATM remains empty &gt;&gt;&gt; print(corner_street_atm.next()) &lt;type 'exceptions.StopIteration'&gt; &gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # Build a new one to get back in business &gt;&gt;&gt; for cash in brand_new_atm: ...    print cash $100 $100 $100 $100 $100 $100 $100 $100 $100 ...  print(corner_street_atm.__next__()) print(next(corner_street_atm)) Map / Zip import itertools &gt;&gt;&gt; horses = [1 2 3 4] &gt;&gt;&gt; races = itertools.permutations(horses) &gt;&gt;&gt; print(races) &lt;itertools.permutations object at 0xb754f1dc&gt; &gt;&gt;&gt; print(list(itertools.permutations(horses))) [(1 2 3 4)  (1 2 4 3)  (1 3 2 4)  (1 3 4 2)  (1 4 2 3)  (1 4 3 2)  (2 1 3 4)  (2 1 4 3)  (2 3 1 4)  (2 3 4 1)  (2 4 1 3)  (2 4 3 1)  (3 1 2 4)  (3 1 4 2)  (3 2 1 4)  (3 2 4 1)  (3 4 1 2)  (3 4 2 1)  (4 1 2 3)  (4 1 3 2)  (4 2 1 3)  (4 2 3 1)  (4 3 1 2)  (4 3 2 1)]  __iter__() __next__() for 
@classmethod def _product_list(cls):     """     return a list containing the one product_id contained in the request URL     or a query containing all valid product_ids if not id present in URL      used to limit the choice of foreign key object to those related to the current product     """     id = threadlocals.get_current_product()     if id is not None:         return [id]     else:         return Product.objects.all().values('pk').query  product = models.ForeignKey(     Product     limit_choices_to={         id__in=BaseModel._product_list     } )  
ImportError: No module named _sqlite3  import sys print sys.path  sys.path.append('/your/dir/here')  import sqlite3  
flist = []  for i in xrange(3):     def funcC(j):         def func(x): return x * j         return func     flist.append(funcC(i))  for f in flist:     print f(2)  
&gt;&gt;&gt; url.match("test/").groupdict() {'name': None}  view(request *groups **groupdict)  view(request name = None)  urlpatterns = patterns(''     (r'^test/(?P&lt;name&gt;.+)$''myview.displayName') # note the '+' instead of the '*'     (r'^test/$''myview.displayName') )  
os os.environ posix .environ 
os.path.getmtime(<i>path i>) path ctime os.path.getctime() .st_ctime os.stat() ctime .st_birthtime os.stat() ext4 st_crtime stat() st_crtime ext4 mtime os.path.getmtime() .st_mtime os.stat() import os import platform  def creation_date(path_to_file):     """     Try to get the date that a file was created falling back to when it was     last modified if that isn't possible.     See http://stackoverflow.com/a/39501288/1709587 for explanation.     """     if platform.system() == 'Windows':         return os.path.getctime(path_to_file)     else:         stat = os.stat(path_to_file)         try:             return stat.st_birthtime         except AttributeError:             # We're probably on Linux. No easy way to get creation dates here             # so we'll settle for when its content was last modified.             return stat.st_mtime  
__len__() len() __iter__() iter() 
mark_safe from django.utils.safestring import mark_safe  t = loader.get_template("sometemplate") c = Context({    'foo': 'bar'    'url': mark_safe('http://127.0.0.1/test?a=1&amp;b=2') }) print t.render(c)  autoescape Context c = Context({    'foo': 'bar'    'url': 'http://127.0.0.1/test?a=1&amp;b=2' } autoescape=False)  
property() @classmethod property class Foo(object):     @property     def age(self):         return 11  class Bar(Foo):     @property     def age(self):         return 44  setter deleter class C(object):     @property     def x(self):         return self._x      @x.setter     def x(self value):         self._x = value  
DEBUG = False ADMINS process_exception() process_exception() got_request_exception 
split_list = lambda lst: (lst[0] lst[1:]) head rest = split_list(my_func())  head *rest = my_func()  
&gt;&gt;&gt; import re &gt;&gt;&gt; m = re.compile('(?u)[^\W0-9]\w*') &gt;&gt;&gt; m.match('a') &lt;_sre.SRE_Match object at 0xb7d75410&gt; &gt;&gt;&gt; m.match('9') &gt;&gt;&gt; m.match('ab') &lt;_sre.SRE_Match object at 0xb7c258e0&gt; &gt;&gt;&gt; m.match('a9') &lt;_sre.SRE_Match object at 0xb7d75410&gt; &gt;&gt;&gt; m.match('unicöde') &lt;_sre.SRE_Match object at 0xb7c258e0&gt; &gt;&gt;&gt; m.match('ödipus') &lt;_sre.SRE_Match object at 0xb7d75410&gt;  
fnmatch 
&gt;&gt;&gt; from xml.etree import ElementTree &gt;&gt;&gt; help(ElementTree.ElementPath) &gt;&gt;&gt; root = ElementTree.fromstring(""" &lt;root&gt;&lt;child&gt;One&lt;/child&gt;&lt;child&gt;Two&lt;/child&gt;&lt;child&gt;Three&lt;/child&gt;&lt;/root&gt; """) &gt;&gt;&gt; ElementTree.ElementPath.findall(root "child") [&lt;Element child at 2ac98c0&gt; &lt;Element child at 2ac9638&gt; &lt;Element child at 2ac9518&gt;] &gt;&gt;&gt; elements = ElementTree.ElementPath.findall(root "child") &gt;&gt;&gt; two = [x for x in elements if x.text == "Two"] &gt;&gt;&gt; two[0].text 'Two'  
[lib/postgresql83] &gt; variants postgresql83  postgresql83 has the variants:     universal     python: add support for python     krb5: add support for Kerberos 5 authentication     perl: add Perl support  universal $ sudo port install postgresql83 +python postgresql-server +python  
&gt;&gt;&gt; a = ['google.com' 'livejournal.com' 'livejournal.com' 'google.com' 'stackoverflow.com'] &gt;&gt;&gt; b = set(a) &gt;&gt;&gt; b set(['livejournal.com' 'google.com' 'stackoverflow.com']) &gt;&gt;&gt;   unique_results unique_results = {} &gt;&gt;&gt; for item in a:     unique_results[item] = ''   &gt;&gt;&gt; unique_results {'livejournal.com': '' 'google.com': '' 'stackoverflow.com': ''}  
import StringIO import sys   sys.stdout = StringIO.StringIO() print "foo" "bar" "baz" s = sys.stdout.getvalue()  
[x]*3 [x x x] x x x = [1] * 4 l = [x] * 3 print(f"id(x): {id(x)}") # id(x): 140560897920048 print(     f"id(l[0]): {id(l[0])}\n"     f"id(l[1]): {id(l[1])}\n"     f"id(l[2]): {id(l[2])}" ) # id(l[0]): 140560897920048 # id(l[1]): 140560897920048 # id(l[2]): 140560897920048  x[0] = 42 print(f"x: {x}") # x: [42 1 1 1] print(f"l: {l}") # l: [[42 1 1 1] [42 1 1 1] [42 1 1 1]]  [[1]*4 for _ in range(3)]  [1]*4 * * * [[1] * 4] * [[1] * 4] [[1] * 4 * [[1] * 4] * [[1] * 4 for n in range(3)] [1] * 4 [x**2 for x in range(3)] x**2 [1] * 4 [1] * 4 [1] 1.value = 2 
sed import subprocess from cStringIO import StringIO  input = StringIO(source_code) # source_code is a string with the source code. output = StringIO()  process = subprocess.Popen(['sed' '/path/to/remccoms3.sed']     input=input output=output) return_code = process.wait()  stripped_code = output.getvalue()  source_code stripped_code input output input output remccoms3.sed sed 
&gt;&gt;&gt; import BeautifulSoup &gt;&gt;&gt; import urllib2  # Fetch HTML data from url &gt;&gt;&gt; connection = urllib2.urlopen('http://kuler.adobe.com/path/to/rss.xml') &gt;&gt;&gt; html_data = connection.read() &gt;&gt;&gt; connection.close()  # Create and search the soup &gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup(html_data) &gt;&gt;&gt; themes = soup.findAll('kuler:themeitem') # Note: all lower-case element names  # Get the ID of the first theme &gt;&gt;&gt; themes[0].find('kuler:themeid').contents[0] u'123456'  # Get an ordered list of the hex colors for the first theme &gt;&gt;&gt; themeswatches = themes[0].find('kuler:themeswatches') &gt;&gt;&gt; colors = [color.contents[0] for color in ... themeswatches.findAll('kuler:swatchhexcolor')] &gt;&gt;&gt; colors [u'FFFFFF' u'000000']  
def combinations(words length):     if length == 0:         return []     result = [[word] for word in words]     while length &gt; 1:         new_result = []         for combo in result:             new_result.extend(combo + [word] for word in words)         result = new_result[:]         length -= 1     return result  number_to_list() def number_to_list(number words):     list_out = []     while number:         list_out = [number % len(words)] + list_out         number = number // len(words)     return [words[n] for n in list_out]  def combinations(words length):     numbers = xrange(len(words)**length)     for number in numbers:         combo = number_to_list(number words)         if len(combo) &lt; length:             combo = [words[0]] * (length - len(combo)) + combo         yield combo  &gt;&gt;&gt; list(combinations('01' 3)) [['0' '0' '0'] ['0' '0' '1'] ['0' '1' '0'] ['0' '1' '1'] ['1' '0' '0'] ['1' '0' '1'] ['1' '1' '0'] ['1' '1' '1']]  map(''.join list(combinations('01' 3))) ['000' '001' '010' '011' '100' '101' '110' '111']  fileout = open('filename.txt' 'w') fileout.writelines(     ''.join(combo) for combo in combinations('01' 3)) fileout.close()  
svnversion 
.bashrc setenv .emacs (setenv "PYTHONPATH" "PATH_STRING_HERE")  PYTHONPATH ~/.MacOSX/environment.plist 
unicodedata bisect struct def block(ch):   '''   Return the Unicode block name for ch or None if ch has no block.    &gt;&gt;&gt; block(u'a')   'Basic Latin'   &gt;&gt;&gt; block(unichr(0x0b80))   'Tamil'   &gt;&gt;&gt; block(unichr(0xe0080))    '''    assert isinstance(ch unicode) and len(ch) == 1 repr(ch)   cp = ord(ch)   for start end name in _blocks:     if start &lt;= cp &lt;= end:       return name  def _initBlocks(text):   global _blocks   _blocks = []   import re   pattern = re.compile(r'([0-9A-F]+)\.\.([0-9A-F]+);\ (\S.*\S)')   for line in text.splitlines():     m = pattern.match(line)     if m:       start end name = m.groups()       _blocks.append((int(start 16) int(end 16) name))  # retrieved from http://unicode.org/Public/UNIDATA/Blocks.txt _initBlocks(''' # Blocks-12.0.0.txt # Date: 2018-07-30 19:40:00 GMT [KW] # © 2018 Unicode® Inc. # For terms of use see http://www.unicode.org/terms_of_use.html # # Unicode Character Database # For documentation see http://www.unicode.org/reports/tr44/ # # Format: # Start Code..End Code; Block Name  # ================================================  # Note:   When comparing block names casing whitespace hyphens #         and underbars are ignored. #         For example "Latin Extended-A" and "latin extended a" are equivalent. #         For more information on the comparison of property values #            see UAX #44: http://www.unicode.org/reports/tr44/ # #  All block ranges start with a value where (cp MOD 16) = 0 #  and end with a value where (cp MOD 16) = 15. In other words #  the last hexadecimal digit of the start of range is ...0 #  and the last hexadecimal digit of the end of range is ...F. #  This constraint on block ranges guarantees that allocations #  are done in terms of whole columns and that code chart display #  never involves splitting columns in the charts. # #  All code points not explicitly listed for Block #  have the value No_Block.  # Property: Block # # @missing: 0000..10FFFF; No_Block  0000..007F; Basic Latin 0080..00FF; Latin-1 Supplement 0100..017F; Latin Extended-A 0180..024F; Latin Extended-B 0250..02AF; IPA Extensions 02B0..02FF; Spacing Modifier Letters 0300..036F; Combining Diacritical Marks 0370..03FF; Greek and Coptic 0400..04FF; Cyrillic 0500..052F; Cyrillic Supplement 0530..058F; Armenian 0590..05FF; Hebrew 0600..06FF; Arabic 0700..074F; Syriac 0750..077F; Arabic Supplement 0780..07BF; Thaana 07C0..07FF; NKo 0800..083F; Samaritan 0840..085F; Mandaic 0860..086F; Syriac Supplement 08A0..08FF; Arabic Extended-A 0900..097F; Devanagari 0980..09FF; Bengali 0A00..0A7F; Gurmukhi 0A80..0AFF; Gujarati 0B00..0B7F; Oriya 0B80..0BFF; Tamil 0C00..0C7F; Telugu 0C80..0CFF; Kannada 0D00..0D7F; Malayalam 0D80..0DFF; Sinhala 0E00..0E7F; Thai 0E80..0EFF; Lao 0F00..0FFF; Tibetan 1000..109F; Myanmar 10A0..10FF; Georgian 1100..11FF; Hangul Jamo 1200..137F; Ethiopic 1380..139F; Ethiopic Supplement 13A0..13FF; Cherokee 1400..167F; Unified Canadian Aboriginal Syllabics 1680..169F; Ogham 16A0..16FF; Runic 1700..171F; Tagalog 1720..173F; Hanunoo 1740..175F; Buhid 1760..177F; Tagbanwa 1780..17FF; Khmer 1800..18AF; Mongolian 18B0..18FF; Unified Canadian Aboriginal Syllabics Extended 1900..194F; Limbu 1950..197F; Tai Le 1980..19DF; New Tai Lue 19E0..19FF; Khmer Symbols 1A00..1A1F; Buginese 1A20..1AAF; Tai Tham 1AB0..1AFF; Combining Diacritical Marks Extended 1B00..1B7F; Balinese 1B80..1BBF; Sundanese 1BC0..1BFF; Batak 1C00..1C4F; Lepcha 1C50..1C7F; Ol Chiki 1C80..1C8F; Cyrillic Extended-C 1C90..1CBF; Georgian Extended 1CC0..1CCF; Sundanese Supplement 1CD0..1CFF; Vedic Extensions 1D00..1D7F; Phonetic Extensions 1D80..1DBF; Phonetic Extensions Supplement 1DC0..1DFF; Combining Diacritical Marks Supplement 1E00..1EFF; Latin Extended Additional 1F00..1FFF; Greek Extended 2000..206F; General Punctuation 2070..209F; Superscripts and Subscripts 20A0..20CF; Currency Symbols 20D0..20FF; Combining Diacritical Marks for Symbols 2100..214F; Letterlike Symbols 2150..218F; Number Forms 2190..21FF; Arrows 2200..22FF; Mathematical Operators 2300..23FF; Miscellaneous Technical 2400..243F; Control Pictures 2440..245F; Optical Character Recognition 2460..24FF; Enclosed Alphanumerics 2500..257F; Box Drawing 2580..259F; Block Elements 25A0..25FF; Geometric Shapes 2600..26FF; Miscellaneous Symbols 2700..27BF; Dingbats 27C0..27EF; Miscellaneous Mathematical Symbols-A 27F0..27FF; Supplemental Arrows-A 2800..28FF; Braille Patterns 2900..297F; Supplemental Arrows-B 2980..29FF; Miscellaneous Mathematical Symbols-B 2A00..2AFF; Supplemental Mathematical Operators 2B00..2BFF; Miscellaneous Symbols and Arrows 2C00..2C5F; Glagolitic 2C60..2C7F; Latin Extended-C 2C80..2CFF; Coptic 2D00..2D2F; Georgian Supplement 2D30..2D7F; Tifinagh 2D80..2DDF; Ethiopic Extended 2DE0..2DFF; Cyrillic Extended-A 2E00..2E7F; Supplemental Punctuation 2E80..2EFF; CJK Radicals Supplement 2F00..2FDF; Kangxi Radicals 2FF0..2FFF; Ideographic Description Characters 3000..303F; CJK Symbols and Punctuation 3040..309F; Hiragana 30A0..30FF; Katakana 3100..312F; Bopomofo 3130..318F; Hangul Compatibility Jamo 3190..319F; Kanbun 31A0..31BF; Bopomofo Extended 31C0..31EF; CJK Strokes 31F0..31FF; Katakana Phonetic Extensions 3200..32FF; Enclosed CJK Letters and Months 3300..33FF; CJK Compatibility 3400..4DBF; CJK Unified Ideographs Extension A 4DC0..4DFF; Yijing Hexagram Symbols 4E00..9FFF; CJK Unified Ideographs A000..A48F; Yi Syllables A490..A4CF; Yi Radicals A4D0..A4FF; Lisu A500..A63F; Vai A640..A69F; Cyrillic Extended-B A6A0..A6FF; Bamum A700..A71F; Modifier Tone Letters A720..A7FF; Latin Extended-D A800..A82F; Syloti Nagri A830..A83F; Common Indic Number Forms A840..A87F; Phags-pa A880..A8DF; Saurashtra A8E0..A8FF; Devanagari Extended A900..A92F; Kayah Li A930..A95F; Rejang A960..A97F; Hangul Jamo Extended-A A980..A9DF; Javanese A9E0..A9FF; Myanmar Extended-B AA00..AA5F; Cham AA60..AA7F; Myanmar Extended-A AA80..AADF; Tai Viet AAE0..AAFF; Meetei Mayek Extensions AB00..AB2F; Ethiopic Extended-A AB30..AB6F; Latin Extended-E AB70..ABBF; Cherokee Supplement ABC0..ABFF; Meetei Mayek AC00..D7AF; Hangul Syllables D7B0..D7FF; Hangul Jamo Extended-B D800..DB7F; High Surrogates DB80..DBFF; High Private Use Surrogates DC00..DFFF; Low Surrogates E000..F8FF; Private Use Area F900..FAFF; CJK Compatibility Ideographs FB00..FB4F; Alphabetic Presentation Forms FB50..FDFF; Arabic Presentation Forms-A FE00..FE0F; Variation Selectors FE10..FE1F; Vertical Forms FE20..FE2F; Combining Half Marks FE30..FE4F; CJK Compatibility Forms FE50..FE6F; Small Form Variants FE70..FEFF; Arabic Presentation Forms-B FF00..FFEF; Halfwidth and Fullwidth Forms FFF0..FFFF; Specials 10000..1007F; Linear B Syllabary 10080..100FF; Linear B Ideograms 10100..1013F; Aegean Numbers 10140..1018F; Ancient Greek Numbers 10190..101CF; Ancient Symbols 101D0..101FF; Phaistos Disc 10280..1029F; Lycian 102A0..102DF; Carian 102E0..102FF; Coptic Epact Numbers 10300..1032F; Old Italic 10330..1034F; Gothic 10350..1037F; Old Permic 10380..1039F; Ugaritic 103A0..103DF; Old Persian 10400..1044F; Deseret 10450..1047F; Shavian 10480..104AF; Osmanya 104B0..104FF; Osage 10500..1052F; Elbasan 10530..1056F; Caucasian Albanian 10600..1077F; Linear A 10800..1083F; Cypriot Syllabary 10840..1085F; Imperial Aramaic 10860..1087F; Palmyrene 10880..108AF; Nabataean 108E0..108FF; Hatran 10900..1091F; Phoenician 10920..1093F; Lydian 10980..1099F; Meroitic Hieroglyphs 109A0..109FF; Meroitic Cursive 10A00..10A5F; Kharoshthi 10A60..10A7F; Old South Arabian 10A80..10A9F; Old North Arabian 10AC0..10AFF; Manichaean 10B00..10B3F; Avestan 10B40..10B5F; Inscriptional Parthian 10B60..10B7F; Inscriptional Pahlavi 10B80..10BAF; Psalter Pahlavi 10C00..10C4F; Old Turkic 10C80..10CFF; Old Hungarian 10D00..10D3F; Hanifi Rohingya 10E60..10E7F; Rumi Numeral Symbols 10F00..10F2F; Old Sogdian 10F30..10F6F; Sogdian 10FE0..10FFF; Elymaic 11000..1107F; Brahmi 11080..110CF; Kaithi 110D0..110FF; Sora Sompeng 11100..1114F; Chakma 11150..1117F; Mahajani 11180..111DF; Sharada 111E0..111FF; Sinhala Archaic Numbers 11200..1124F; Khojki 11280..112AF; Multani 112B0..112FF; Khudawadi 11300..1137F; Grantha 11400..1147F; Newa 11480..114DF; Tirhuta 11580..115FF; Siddham 11600..1165F; Modi 11660..1167F; Mongolian Supplement 11680..116CF; Takri 11700..1173F; Ahom 11800..1184F; Dogra 118A0..118FF; Warang Citi 119A0..119FF; Nandinagari 11A00..11A4F; Zanabazar Square 11A50..11AAF; Soyombo 11AC0..11AFF; Pau Cin Hau 11C00..11C6F; Bhaiksuki 11C70..11CBF; Marchen 11D00..11D5F; Masaram Gondi 11D60..11DAF; Gunjala Gondi 11EE0..11EFF; Makasar 11FC0..11FFF; Tamil Supplement 12000..123FF; Cuneiform 12400..1247F; Cuneiform Numbers and Punctuation 12480..1254F; Early Dynastic Cuneiform 13000..1342F; Egyptian Hieroglyphs 13430..1343F; Egyptian Hieroglyph Format Controls 14400..1467F; Anatolian Hieroglyphs 16800..16A3F; Bamum Supplement 16A40..16A6F; Mro 16AD0..16AFF; Bassa Vah 16B00..16B8F; Pahawh Hmong 16E40..16E9F; Medefaidrin 16F00..16F9F; Miao 16FE0..16FFF; Ideographic Symbols and Punctuation 17000..187FF; Tangut 18800..18AFF; Tangut Components 1B000..1B0FF; Kana Supplement 1B100..1B12F; Kana Extended-A 1B130..1B16F; Small Kana Extension 1B170..1B2FF; Nushu 1BC00..1BC9F; Duployan 1BCA0..1BCAF; Shorthand Format Controls 1D000..1D0FF; Byzantine Musical Symbols 1D100..1D1FF; Musical Symbols 1D200..1D24F; Ancient Greek Musical Notation 1D2E0..1D2FF; Mayan Numerals 1D300..1D35F; Tai Xuan Jing Symbols 1D360..1D37F; Counting Rod Numerals 1D400..1D7FF; Mathematical Alphanumeric Symbols 1D800..1DAAF; Sutton SignWriting 1E000..1E02F; Glagolitic Supplement 1E100..1E14F; Nyiakeng Puachue Hmong 1E2C0..1E2FF; Wancho 1E800..1E8DF; Mende Kikakui 1E900..1E95F; Adlam 1EC70..1ECBF; Indic Siyaq Numbers 1ED00..1ED4F; Ottoman Siyaq Numbers 1EE00..1EEFF; Arabic Mathematical Alphabetic Symbols 1F000..1F02F; Mahjong Tiles 1F030..1F09F; Domino Tiles 1F0A0..1F0FF; Playing Cards 1F100..1F1FF; Enclosed Alphanumeric Supplement 1F200..1F2FF; Enclosed Ideographic Supplement 1F300..1F5FF; Miscellaneous Symbols and Pictographs 1F600..1F64F; Emoticons 1F650..1F67F; Ornamental Dingbats 1F680..1F6FF; Transport and Map Symbols 1F700..1F77F; Alchemical Symbols 1F780..1F7FF; Geometric Shapes Extended 1F800..1F8FF; Supplemental Arrows-C 1F900..1F9FF; Supplemental Symbols and Pictographs 1FA00..1FA6F; Chess Symbols 1FA70..1FAFF; Symbols and Pictographs Extended-A 20000..2A6DF; CJK Unified Ideographs Extension B 2A700..2B73F; CJK Unified Ideographs Extension C 2B740..2B81F; CJK Unified Ideographs Extension D 2B820..2CEAF; CJK Unified Ideographs Extension E 2CEB0..2EBEF; CJK Unified Ideographs Extension F 2F800..2FA1F; CJK Compatibility Ideographs Supplement E0000..E007F; Tags E0100..E01EF; Variation Selectors Supplement F0000..FFFFF; Supplementary Private Use Area-A 100000..10FFFF; Supplementary Private Use Area-B  # EOF ''')  
__getitem__ __setitem__ __dict__  nobj.__dict__ = oobj.__dict__.copy()    # just a shallow copy  inspect.getmembers() 
def imerge(a b):     for i j in itertools.izip(ab):         yield i         yield j  
def mapper(keys values):     n = len(keys)     return [dict(zip(keys values[i:i + n]))             for i in range(0 len(values) n)]  
for i in outer:           # used once okay to be a generator or return a list     for j in inner:       # used multiple times reusing a list is better          ...  for i in reversed(data): ...     # generators aren't reversible  s[i] s[j] = s[j] s[i]          # generators aren't indexable  s = ''.join(data)                # lists are faster than generators in this use case  
_() import gettext  class MyClass(object):     def __init__(self locale_for_instance):         self.lang = gettext.translation("appname" localedir \                                          locale=locale_for_instance)      def some_method(self arg):         return self.lang.gettext("You called some method")      def other_method(self arg): # does the same thing         _ = self.lang.gettext         return _("You called some method")  _() @with_local_gettext 
# ~/.pythonrc # enable syntax completion try:     import readline except ImportError:     print("Module readline not available.") else:     import rlcompleter     readline.parse_and_bind("tab: complete")  export PYTHONSTARTUP=~/.pythonrc  
def getPermutations(string prefix=""):     if len(string) == 1:         yield prefix + string     else:         for i in xrange(len(string)):             for perm in getPermutations(string[:i] + string[i+1:] prefix+string[i]):                 yield perm  def getPermutations(string):     if len(string) == 1:         yield string     else:         for i in xrange(len(string)):             for perm in getPermutations(string[:i] + string[i+1:]):                 yield string[i] + perm  
urlpatterns = patterns(''     url(r'^browse/(?P&lt;match&gt;.+)/$' 'app.views.view' name='model_browse') )  def view(request match):     pieces = match.split('/')     # even indexed pieces are the names odd are values     ...  
os.rename() os.unlink() shutil 
baselen = len(self.basePath) return (path[baselen:].replace("/" "\\") for path in paths)  
stat() st_dev os.stat import os def same_partition(f1 f2):     return os.stat(f1).st_dev == os.stat(f2).st_dev  
url = NSURL.fileURLWithPath(path) finder = SBApplication.applicationWithBundleIdentifier("com.apple.Finder") item = finder.items.objectAtLocation(url) item.delete  
# For each line in the input add to the database groups = [] for x in allLinks:      newGroup = LinkGrouping()      newGroup.reference = hash      newGroup.link = x      groups.append(newGroup) db.put(groups)  
import re p = re.compile("[a-z]") for m in p.finditer('a1b2c3d4'):     print(m.start() m.group())  
import pexpect child = pexpect.spawn ('sudo mod -p -c noresource -u dtt -Q') child.expect ('First question:') child.sendline ('Y') child.expect ('Second question:') child.sendline ('Yup')  
my_function.__name__  __name__ func_name &gt;&gt;&gt; import time &gt;&gt;&gt; time.time.func_name Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in ? AttributeError: 'builtin_function_or_method' object has no attribute 'func_name' &gt;&gt;&gt; time.time.__name__  'time'  __name__ 
import ctypes  # Load DLL into memory.  hllDll = ctypes.WinDLL ("c:\\PComm\\ehlapi32.dll")  # Set up prototype and parameters for the desired function call. # HLLAPI  hllApiProto = ctypes.WINFUNCTYPE (     ctypes.c_int      # Return type.     ctypes.c_void_p   # Parameters 1 ...     ctypes.c_void_p     ctypes.c_void_p     ctypes.c_void_p)   # ... thru 4. hllApiParams = (1 "p1" 0) (1 "p2" 0) (1 "p3"0) (1 "p4"0)  # Actually map the call ("HLLAPI(...)") to a Python name.  hllApi = hllApiProto (("HLLAPI" hllDll) hllApiParams)  # This is how you can actually call the DLL function. # Set up the variables and call the Python name with them.  p1 = ctypes.c_int (1) p2 = ctypes.c_char_p (sessionVar) p3 = ctypes.c_int (1) p4 = ctypes.c_int (0) hllApi (ctypes.byref (p1) p2 ctypes.byref (p3) ctypes.byref (p4))  ctypes int char short void* int int int hllApi (void *p1 void *p2 void *p3 void *p4)  ctypes ctypes WINFUNCTYPE hllApiParams ctypes hllApi p1 p4 
/ urls.py (r'^admin/(.*)' admin.site.root)  urls.py 
append x = [1 2 3] x.append([4 5]) print (x)  [1 2 3 [4 5]] extend x = [1 2 3] x.extend([4 5]) print (x)  [1 2 3 4 5] 
void foo() {}  void bar() {         foo(); }  gccxml a.cc -fxml=a.xml 
from django.core.urlresolvers import reverse  def home_page_view(request):     NUP={"HOMEPAGE": reverse('named-url-pattern-string-for-my-home-page-view')}         variables = RequestContext(request {'NUP':NUP})     return render_to_response('home_page.html' variables)  NUP.HOMEPAGE 
import sys  sys.stdout.write('h') sys.stdout.flush()  sys.stdout.write('m') sys.stdout.flush()  sys.stdout.flush() 
class Model(object):   ...   def transaction_start(self):     return Redland.librdf_model_transaction_start(self._model)   
[m.groupdict() for m in regex.finditer(search_string)]  
dict.pop() &gt;&gt;&gt; {}.pop('test' d=None) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: pop() takes no keyword arguments  *args **kwargs def foo(first *rest):     if len(rest) &gt; 1:         raise TypeError("foo() expected at most 2 arguments got %d"                         % (len(rest) + 1))     print 'first =' first     if rest:         print 'second =' rest[0]  **kwargs 
def import_to_orm(name save=False recurse=False):     if recurse and not save:         raise ValueError("save must be True if recurse is True")  class BadValueError(ValueError):pass 
require require 
cursor.execute("INSERT INTO releases (date cat name) VALUES ('%s' '%s' '%s')" % (timestring y[4] y[7]))  cursor.execute('INSERT INTO releases (date cat name) VALUES (%s %s %s)' (timestring y[4] y[7]))  
from types import MethodType  class PrePostCaller:     def __init__(self other):         self.other = other      def pre(self): print 'pre'     def post(self): print 'post'      def __getattr__(self name):         if hasattr(self.other name):             func = getattr(self.other name)             return lambda *args **kwargs: self._wrap(func args kwargs)         raise AttributeError(name)      def _wrap(self func args kwargs):         self.pre()         if type(func) == MethodType:             result = func( *args **kwargs)         else:             result = func(self.other *args **kwargs)         self.post()         return result  #Examples of use class Foo:     def stuff(self):         print 'stuff'  a = PrePostCaller(Foo()) a.stuff()  a = PrePostCaller([123]) print a.count()  pre stuff post pre post 0  
try:     raise "something failed" (42 "some other details") except "something failed" args:     errCode msg = args     print "something failed.  error code %d: %s" % (errCode msg)  &gt;&gt;&gt; list(Exception("test")) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: 'Exception' object is not iterable  
extra A.objects.extra(     select={         'b_count': 'SELECT COUNT(*) FROM yourapp_b WHERE yourapp_b.a_id = yourapp_a.id'     }     where=['b_count &lt; 2'] )  from django.db import connection transaction from django.db.models.signals import post_delete post_save  def update_b_count(instance **kwargs):     """     Updates the B count for the A related to the given B.     """     if not kwargs.get('created' True) or kwargs.get('raw' False):         return     cursor = connection.cursor()     cursor.execute(         'UPDATE yourapp_a SET b_count = ('             'SELECT COUNT(*) FROM yourapp_b '             'WHERE yourapp_b.a_id = yourapp_a.id'         ') '         'WHERE id = %s' [instance.a_id])     transaction.commit_unless_managed()  post_save.connect(update_b_count sender=B) post_delete.connect(update_b_count sender=B)  B.objects.create(a=some_a) if some_a.hidden and some_a.b_set.count() &gt; 1:     A.objects.filter(id=some_a.id).update(hidden=False)  ...  some_a = b.a some_b.delete() if not some_a.hidden and some_a.b_set.count() &lt; 2:     A.objects.filter(id=some_a.id).update(hidden=True)  
import urlparse  def process_url(url keep_params=('CONTENT_ITEM_ID=')):     parsed= urlparse.urlsplit(url)     filtered_query= '&amp;'.join(         qry_item         for qry_item in parsed.query.split('&amp;')         if qry_item.startswith(keep_params))     return urlparse.urlunsplit(parsed[:3] + (filtered_query) + parsed[4:])  &gt;&gt;&gt; process_url(a) 'http://www.domainname.com/page?CONTENT_ITEM_ID=1234'  &gt;&gt;&gt; url='http://www.domainname.com/page?other_value=xx&amp;param3&amp;CONTENT_ITEM_ID=1234&amp;param1' &gt;&gt;&gt; process_url(url ('CONTENT_ITEM_ID' 'other_value')) 'http://www.domainname.com/page?other_value=xx&amp;CONTENT_ITEM_ID=1234'  
scipy numpy 
super(ConstParser self).__init__(defaults)  SafeConfigParser.__init__(self defaults)  
# Tail from __future__ import with_statement  find_str = "FIREFOX"                    # String to find fname = "g:/autoIt/ActiveWin.log_2"     # File to check  with open(fname "r") as f:     f.seek (0 2)           # Seek @ EOF     fsize = f.tell()        # Get Size     f.seek (max (fsize-1024 0) 0) # Set pos @ last n chars     lines = f.readlines()       # Read to end  lines = lines[-10:]    # Get last 10 lines  # This returns True if any line is exactly find_str + "\n" print find_str + "\n" in lines  # If you're searching for a substring for line in lines:     if find_str in line:         print True         break  
l = [ ('a' 1) ('a' 2) ('a' 3) ('b' 1) ('b' 2) ('c' 1) ]  d = {} for x y in l:     d.setdefault(x []).append(y) print d  {'a': [1 2 3] 'c': [1] 'b': [1 2]}  
decode #!/usr/bin/env python # -*- coding: utf-8 -*- import wx  app = wx.PySimpleApp() app.TopWindow = wx.Frame(None) field = wx.TextCtrl(app.TopWindow) field.Value += '°'.decode('ISO8859-1') app.TopWindow.Show() app.MainLoop()  
/bin/bash -i 
[sum(a) for a in zip(*array)]  
SCENARIO MyScenario DELAY 1 COUNT 1 ADD 1 DIRECT_POWER 23 False 150 WAIT 3 ... END_SCENARIO  scenario :: 'SCENARIO' label newline _cmds END_SCENARIO cmds::  _delay or _count or _direct_power or... delay:: 'DELAY' number  def scenario():     match_word('SCENARIO')     scenario_name = match_label()     emit('var scenario = new Scenario();')     cmds()     match_word('END_SCENARIO')     emit('byte[] ' + scenario_name + ' = scenario.Compile();')  def delay():     match_word('DELAY')     length = match_number()     emit('scenario.Add(new DelayCommand('+ length +'))')  def cmds():     word = peek_next_word()     if word == 'DELAY':        delay()     elif ...  
[12].zip([34]) =&gt; [[13][24]]  a.zip(b).all? {|pair| pair[0] === pair[1]}  a.zip(b).all? {|ab| a === b }  
compileit.cmd   call C:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat   devenv $1.sln /rebuild Debug /Out last-build.txt  
def foobar()   return ExampleFoo.new().foo().bar() end  
import gzip  content = b"Some content" f = open("/tmp/f.gz" "wb") gz = gzip.GzipFile(fileobj=fmode="wb"filename=""mtime=0) gz.write(content) gz.close() f.close()  
&gt;&gt;&gt; x_present = [456] &gt;&gt;&gt; &gt;&gt;&gt; x_past = x_present &gt;&gt;&gt; &gt;&gt;&gt; x_past [4 5 6] &gt;&gt;&gt; &gt;&gt;&gt; x_present.append(7) &gt;&gt;&gt; &gt;&gt;&gt; x_past [4 5 6 7] &gt;&gt;&gt;  &gt;&gt;&gt; x_past = x_present[:] &gt;&gt;&gt; x_past [4 5 6 7] &gt;&gt;&gt; &gt;&gt;&gt; x_present.append(8) &gt;&gt;&gt; &gt;&gt;&gt; x_past [4 5 6 7]  
SERVER SERVERKEY COMMAND \S+ FOLDERPATH /.*? RETENTION \d+ TRANSFERMODE \S+ OUTPUTPATH [A-Z]:\\.*?\\ LOGTO NO [A-Z]:\\.*? MAXSIZE OFFSET \d+ ^\s* (?P&lt;SERVER&gt;\S+)\s+ (?P&lt;SERVERKEY&gt;\S+)\s+ (?P&lt;COMMAND&gt;\S+)\s+ (?P&lt;FOLDERPATH&gt;/.*?)\s+   # Slash not that important but should start with non-whitespace (?P&lt;RETENTION&gt;\d+)\s+ (?P&lt;TRANSFERMODE&gt;\S+)\s+ (?P&lt;OUTPUTPATH&gt;[A-Z]:\\.*?\\)\s+   # Could also support network paths (?P&lt;LOGTO&gt;NO|[A-Z]:\\.*?) (?:   \s+(?P&lt;MAXSIZE&gt;\d+)   (?:     \s+(?P&lt;OFFSET&gt;\d+)   )? )? \s*$  ^\s*(?P&lt;SERVER&gt;\S+)\s+(?P&lt;SERVERKEY&gt;\S+)\s+(?P&lt;COMMAND&gt;\S+)\s+(?P&lt;FOLDERPATH&gt;/.*?)\s+(?P&lt;RETENTION&gt;\d+)\s+(?P&lt;TRANSFERMODE&gt;\S+)\s+(?P&lt;OUTPUTPATH&gt;[A-Z]:\\.*?\\)\s+(?P&lt;LOGTO&gt;NO|[A-Z]:\\.*?)(?:\s+(?P&lt;MAXSIZE&gt;\d+)(?:\s+(?P&lt;OFFSET&gt;\d+))?)?\s*$  &gt;&gt;&gt; import re &gt;&gt;&gt; p = re.compile(r'^(?P&lt;SERVER&gt;\S+)\s+(?P&lt;SERVERKEY&gt;\S+)\s+(?P&lt;COMMAND&gt;\S+)\s+(?P&lt;FOLDERPATH&gt;/.*?)\s+(?P&lt;RETENTION&gt;\d+)\s+(?P&lt;TRANSFERMODE&gt;\S+)\s+(?P&lt;OUTPUTPATH&gt;[A-Z]:\\.*?\\)\s+(?P&lt;LOGTO&gt;NO|[A-Z]:\\.*?)(?:\s+(?P&lt;MAXSIZE&gt;\d+)(?:\s+(?P&lt;OFFSET&gt;\d+))?)?\s*$'re.M) &gt;&gt;&gt; data = r"""loveserver love copy /muffin* 20 bin C:\Puppies\ NO 256 300 ... loveserver love copy /muffin* 20 bin C:\Puppies\ NO 256 ... loveserver love copy /hats* 300 ascii C:\Puppies\no\ C:\log\love.log 256""" &gt;&gt;&gt; import pprint &gt;&gt;&gt; for match in p.finditer(data): ...   print pprint.pprint(match.groupdict()) ... {'COMMAND': 'copy'  'FOLDERPATH': '/muffin*'  'LOGTO': 'NO'  'MAXSIZE': '256'  'OFFSET': '300'  'OUTPUTPATH': 'C:\\Puppies\\'  'RETENTION': '20'  'SERVER': 'loveserver'  'SERVERKEY': 'love'  'TRANSFERMODE': 'bin'} {'COMMAND': 'copy'  'FOLDERPATH': '/muffin*'  'LOGTO': 'NO'  'MAXSIZE': '256'  'OFFSET': None  'OUTPUTPATH': 'C:\\Puppies\\'  'RETENTION': '20'  'SERVER': 'loveserver'  'SERVERKEY': 'love'  'TRANSFERMODE': 'bin'} {'COMMAND': 'copy'  'FOLDERPATH': '/hats*'  'LOGTO': 'C:\\log\\love.log'  'MAXSIZE': '256'  'OFFSET': None  'OUTPUTPATH': 'C:\\Puppies\\no\\'  'RETENTION': '300'  'SERVER': 'loveserver'  'SERVERKEY': 'love'  'TRANSFERMODE': 'ascii'} &gt;&gt;&gt;  
s.translate(None string.punctuation)  s.translate(str.maketrans('' '' string.punctuation))  exclude = set(string.punctuation) s = ''.join(ch for ch in s if ch not in exclude)  import re string timeit  s = "string. With. Punctuation" exclude = set(string.punctuation) table = string.maketrans("""") regex = re.compile('[%s]' % re.escape(string.punctuation))  def test_set(s):     return ''.join(ch for ch in s if ch not in exclude)  def test_re(s):  # From Vinko's solution with fix.     return regex.sub('' s)  def test_trans(s):     return s.translate(table string.punctuation)  def test_repl(s):  # From S.Lott's solution     for c in string.punctuation:         s=s.replace(c"")     return s  print "sets      :"timeit.Timer('f(s)' 'from __main__ import stest_set as f').timeit(1000000) print "regex     :"timeit.Timer('f(s)' 'from __main__ import stest_re as f').timeit(1000000) print "translate :"timeit.Timer('f(s)' 'from __main__ import stest_trans as f').timeit(1000000) print "replace   :"timeit.Timer('f(s)' 'from __main__ import stest_repl as f').timeit(1000000)  sets      : 19.8566138744 regex     : 6.86155414581 translate : 2.12455511093 replace   : 28.4436721802  
Start Marker  | JFIF Marker | Header Length | Identifier 0xff 0xd8    | 0xff 0xe0  |    2-bytes    | "JFIF\0"  def is_jpg(filename):     data = open(filename'rb').read(11)     if data[:4] != '\xff\xd8\xff\xe0': return False     if data[6:] != 'JFIF\0': return False     return True  from PIL import Image def is_jpg(filename):     try:         i=Image.open(filename)         return i.format =='JPEG'     except IOError:         return False  
&gt;&gt;&gt; s = '\u003cfoo/\u003e' &gt;&gt;&gt; s.decode( 'unicode-escape' ) u'&lt;foo/&gt;' &gt;&gt;&gt; s.decode( 'unicode-escape' ).encode( 'ascii' ) '&lt;foo/&gt;'  
mapper(Something select([sometable] sometable.c.deleted == False))  
$ unzip MySQL_python-1.2.2-py2.5-linux-i686.egg  
operator.itemgetter import operator stats = {'a':1000 'b':3000 'c': 100} max(stats.iteritems() key=operator.itemgetter(1))[0]  stats.iteritems() key max() &gt;&gt;&gt; import operator &gt;&gt;&gt; stats = {'a':1000 'b':3000 'c': 100 'd':3000} &gt;&gt;&gt; max(stats.iteritems() key=operator.itemgetter(1))[0] 'b'   &gt;&gt;&gt; max(stats.items() key=operator.itemgetter(1))[0] 'b'  
def serve_forever(self):     """Handle one request at a time until doomsday."""     while 1:         self.handle_request()  while 1 while self.should_be_running def stop_serving_forever(self):     """Stop handling requests"""     self.should_be_running = 0     # Make a fake request to the server to really force it to stop.     # Otherwise it will just stop on the next request.     # (Exercise for the reader.)     self.make_a_fake_request_to_myself()  class StoppableRPCServer(SimpleXMLRPCServer.SimpleXMLRPCServer):      stopped = False     allow_reuse_address = True      def __init__(self *args **kw):         SimpleXMLRPCServer.SimpleXMLRPCServer.__init__(self *args **kw)         self.register_function(lambda: 'OK' 'ping')      def serve_forever(self):         while not self.stopped:             self.handle_request()      def force_stop(self):         self.server_close()         self.stopped = True         self.create_dummy_request()      def create_dummy_request(self):         server = xmlrpclib.Server('http://%s:%s' % self.server_address)         server.ping()  
for arr in mydict.values():     for i s in enumerate(arr):         if s == 'example':             arr[i] = 'someotherword'  
def decode(s encodings=('ascii' 'utf8' 'latin1')):     for encoding in encodings:         try:             return s.decode(encoding)         except UnicodeDecodeError:             pass     return s.decode('ascii' 'ignore')  
import hashlib from base64 import b64decode b64encode  def utf16tobin(s):   return s.encode('hex')[4:].decode('hex')  b64salt = "kDP0Py2QwEdJYtUX9cJABg==" b64hash = "OJF6H4KdxFLgLu+oTDNFodCEfMA=" binsalt = b64decode(b64salt) password_string = 'password'.encode("utf16") password_string = utf16tobin(password_string)  m1 = hashlib.sha1() # Pass in salt m1.update(binsalt + password_string) # Pass in password # B64 encode the binary digest if b64encode(m1.digest()) == b64hash:     print "Logged in!" else:     print "Didn't match"     print b64hash     print b64encode(m1.digest())  
themodule.__file__ datetime.__file__ datetime.__file__ Python-2.6/Modules/datetimemodule.c  
#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; #include &lt;algorithm&gt; #include &lt;cctype&gt;  bool starts_with(const std::string &amp;s1 const std::string &amp;s2) {     return (s1.length() &lt;= s2.length()) &amp;&amp; (s2.substr(0 s1.length()) == s1); }  bool ends_with(const std::string &amp;s1 const std::string &amp;s2) {     return (s1.length() &lt;= s2.length()) &amp;&amp; (s2.substr(s2.length() - s1.length()) == s1); }  bool is_numeric(const std::string &amp;s) {     for(std::string::const_iterator it = s.begin(); it != s.end(); ++it) {         if(!std::isdigit(*it)) {                 return false;         }     }     return true; }  bool varies_in_single_number_field(std::string s1 std::string s2) {      size_t index1 = 0;     size_t index2 = s1.length() - 1;      if(s1 == s2) {         return false;     }      if((s1.empty() &amp;&amp; is_numeric(s2)) || (s2.empty() &amp;&amp; is_numeric(s1))) {         return true;     }      if(s1.length() &lt; s2.length()) {         s1.swap(s2);     }      while(index1 &lt; s1.length() &amp;&amp; starts_with(s1.substr(0 index1) s2)) { index1++; }     while(ends_with(s1.substr(index2) s2)) { index2--; }      return is_numeric(s1.substr(index1 - 1 (index2 + 1) - (index1 - 1)));  }  int main() {     std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("foo7bar00" "foo123bar00") &lt;&lt; std::endl;     std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("foo7bar00" "foo123bar01") &lt;&lt; std::endl;     std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("foobar00" "foo123bar00") &lt;&lt; std::endl;     std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("foobar00" "foobar00") &lt;&lt; std::endl;     std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("7aaa" "aaa") &lt;&lt; std::endl;     std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("aaa7" "aaa") &lt;&lt; std::endl;     std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("aaa" "7aaa") &lt;&lt; std::endl;     std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("aaa" "aaa7") &lt;&lt; std::endl; }  
event_generate from tkinter import *  def doFoo(*args):     print("Hello world")  root = Tk() root.bind("&lt;&lt;Foo&gt;&gt;" doFoo)  # some time later inject the "&lt;&lt;Foo&gt;&gt;" virtual event at the # tail of the event queue root.event_generate("&lt;&lt;Foo&gt;&gt;" when="tail")  event_generate from tkinter import *  class myClass:     def __init__(self root):         print("root background is %s" % root.cget("background"))  root = Tk() newObj = myClass(root)  
netifaces &gt;&gt;&gt; import netifaces &gt;&gt;&gt; netifaces.interfaces() ['lo' 'eth0'] &gt;&gt;&gt; netifaces.ifaddresses('eth0') {17: [{'broadcast': 'ff:ff:ff:ff:ff:ff' 'addr': '00:11:2f:32:63:45'}] 2: [{'broadcast': '10.0.0.255' 'netmask': '255.255.255.0' 'addr': '10.0.0.2'}] 10: [{'netmask': 'ffff:ffff:ffff:ffff::' 'addr': 'fe80::211:2fff:fe32:6345%eth0'}]} &gt;&gt;&gt; for interface in netifaces.interfaces(): ...   print netifaces.ifaddresses(interface)[netifaces.AF_INET] ... [{'peer': '127.0.0.1' 'netmask': '255.0.0.0' 'addr': '127.0.0.1'}] [{'broadcast': '10.0.0.255' 'netmask': '255.255.255.0' 'addr': '10.0.0.2'}] &gt;&gt;&gt; for interface in netifaces.interfaces(): ...   for link in netifaces.ifaddresses(interface)[netifaces.AF_INET]: ...     print link['addr'] ... 127.0.0.1 10.0.0.2  from netifaces import interfaces ifaddresses AF_INET  def ip4_addresses():     ip_list = []     for interface in interfaces():         for link in ifaddresses(interface)[AF_INET]:             ip_list.append(link['addr'])     return ip_list  AF_INET6 AF_INET netifaces 
for c in session.query(Stuff).all():     c.foo = c.foo+1 session.commit()  session.execute(update(stuff_table values={stuff_table.c.foo: stuff_table.c.foo + 1})) session.commit()  session.query(Stuff).update({Stuff.foo: Stuff.foo + 1}) session.commit()  synchronize_session=False 
urllib2 opener opener &gt;&gt;&gt; no_proxy = urllib2.ProxyHandler({}) &gt;&gt;&gt; opener = urllib2.build_opener(no_proxy) &gt;&gt;&gt; urllib2.install_opener(opener)  exclusion_list = ['http://www.google.com/' 'http://localhost/']  no_proxy = urllib2.ProxyHandler({}) no_proxy_opener = urllib2.build_opener(no_proxy)  default_proxy_opener = urllib2.build_opener()  url = 'http://www.example.com/'  if url in exclusion_list:     opener = no_proxy_opener else:     opener = default_proxy_opener  page = opener.open(url) print page  
[ (Product_Type_1 ( product_1 product_2 ))    (Product_Type_2 ( product_3 product_4 )) ]  {% for product_type products in product_type_list %}     {{ product_type }}     {% for product in products %}         {{ product }}     {% endfor %} {% endfor %}  
Content-Transfer-Encoding Content-Transfer-Encoding =?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?=  email.header.decode_header import email.header x= '=?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?=' try:     name= u''.join([         unicode(b e or 'ascii') for b e in email.header.decode_header(x)     ]) except email.Errors.HeaderParseError:     pass # leave name as it was  Content-Type: application/vnd.ms-excel;  name="=?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?="  '=?' =?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?= 
ipy '-X:ColorfulConsole'  ipy -X: ColorfulConsole  File -X: does not exist 
system("mysql -uroot -p db_name &gt; `tty`");  
pathlib.Path.mkdir from pathlib import Path Path("/my/directory").mkdir(parents=True exist_ok=True)  os.path.exists os.makedirs import os if not os.path.exists(directory):     os.makedirs(directory)  os.path.exists os.makedirs os.makedirs OSError OSError OSError import os errno  try:     os.makedirs(directory) except OSError as e:     if e.errno != errno.EEXIST:         raise  os.path.exists FileExistsError try:     os.makedirs("path/to/directory") except FileExistsError:     # directory already exists     pass  os.makedirs exist_ok os.makedirs("path/to/directory" exist_ok=True)  # succeeds even if directory exists.  
errno WindowsError except OSError: .winerror .errno errno import os errno try:     os.mkdir('test') except OSError e:     if e.errno == errno.EEXIST:         # Do something  errno.errorcode &gt;&gt;&gt; errno.errorcode[17] 'EEXIST'  
self.bind(wx.EVT_MENU subPanel(None -1 'TEST')id=1)  self.bind(wx.EVT_MENU &lt;event handler&gt; &lt;id of menu item&gt;)  def OnMenuItem(self evt): #don't forget the evt     sp = SubPanel(self wx.ID_ANY 'TEST')     #I assume you will add it to a sizer     #if you aren't... you should     test_sizer.Add(sp 1 wx.EXPAND)     #force the frame to refresh the sizers:     self.Layout()  __init__ subpanel.Hide() subpanel.Show() #!usr/bin/env python  import wx  class TestFrame(wx.Frame):     def __init__(self parent *args **kwargs):         wx.Frame.__init__(self parent *args **kwargs)         framesizer = wx.BoxSizer(wx.VERTICAL)         mainpanel = MainPanel(self wx.ID_ANY)         self.subpanel = SubPanel(self wx.ID_ANY)         self.subpanel.Hide()         framesizer.Add(mainpanel 1 wx.EXPAND)         framesizer.Add(self.subpanel 1 wx.EXPAND)         self.SetSizerAndFit(framesizer)  class MainPanel(wx.Panel):     def __init__(self parent *args **kwargs):         wx.Panel.__init__(self parent *args **kwargs)         panelsizer = wx.BoxSizer(wx.VERTICAL)         but = wx.Button(self wx.ID_ANY "Add")         self.Bind(wx.EVT_BUTTON self.OnAdd but)         self.panel_shown = False         panelsizer.Add(but 0)         self.SetSizer(panelsizer)      def OnAdd(self evt):         if not self.panel_shown:             self.GetParent().subpanel.Show()             self.GetParent().Fit()             self.GetParent().Layout()             self.panel_shown = True         else:             self.GetParent().subpanel.Hide()             self.GetParent().Fit()             self.GetParent().Layout()             self.panel_shown = False  class SubPanel(wx.Panel):     def __init__(self parent *args **kwargs):         wx.Panel.__init__(self parent *args **kwargs)         spsizer = wx.BoxSizer(wx.VERTICAL)         text = wx.StaticText(self wx.ID_ANY label='I am a subpanel')         spsizer.Add(text 1 wx.EXPAND)         self.SetSizer(spsizer)  if __name__ == '__main__':     app = wx.App()     frame = TestFrame(None wx.ID_ANY "Test Frame")     frame.Show()     app.MainLoop()  
&gt;&gt;&gt; a = '\222\222\223\225' &gt;&gt;&gt; u = unicode(a'latin-1') &gt;&gt;&gt; u u'\x92\x92\x93\x95' &gt;&gt;&gt; print u.encode('utf-8') ÂÂÂÂ &gt;&gt;&gt; print u.encode('utf-16') ÿþ &gt;&gt;&gt; print u.encode('latin-1')  &gt;&gt;&gt; for c in u: ...   print chr(ord(c) - 3 - 0 -30) ... q q r t &gt;&gt;&gt; for c in u: ...   print chr(ord(c) - 3 -200 -30) ... Traceback (most recent call last):   File "&lt;stdin&gt;" line 2 in &lt;module&gt; ValueError: chr() arg not in range(256)  
copy_with_prog def copy_with_prog(src dest callback = None):     while True:         # copy loop stuff         if callback:             callback(pos total)  prog = ProgressBar(...) copy_with_prog(src dest lambda pos total: prog.update(pos total))  
(r'^urlchecker/(?P&lt;url&gt;.+)$' 'mysite.main.views.urlchecker') 
django.utils.html.escape def escape(html):     """Returns the given HTML with ampersands quotes and carets encoded."""     return mark_safe(force_unicode(html).replace('&amp;' '&amp;amp;').replace('&lt;' '&amp;l t;').replace('&gt;' '&amp;gt;').replace('"' '&amp;quot;').replace("'" '&amp;#39;'))  def html_decode(s):     """     Returns the ASCII decoded version of the given HTML string. This does     NOT remove normal HTML tags like &lt;p&gt;.     """     htmlCodes = (             ("'" '&amp;#39;')             ('"' '&amp;quot;')             ('&gt;' '&amp;gt;')             ('&lt;' '&amp;lt;')             ('&amp;' '&amp;amp;')         )     for code in htmlCodes:         s = s.replace(code[1] code[0])     return s  unescaped = html_decode(my_string)  django.utils.html.escape # Python 2.x: import HTMLParser html_parser = HTMLParser.HTMLParser() unescaped = html_parser.unescape(my_string)  # Python 3.x: import html.parser html_parser = html.parser.HTMLParser() unescaped = html_parser.unescape(my_string)  # &gt;= Python 3.5: from html import unescape unescaped = unescape(my_string)  {{ context_var|safe }} {% autoescape off %}     {{ context_var }} {% endautoescape %}  
libc = CDLL('libc.so')  # Some constants PROT_READ = 1 PROT_WRITE = 2 PROT_EXEC = 4  def executable_code(buffer):     """Return a pointer to a page-aligned executable buffer filled in with the data of the string provided.     The pointer should be freed with libc.free() when finished"""      buf = c_char_p(buffer)     size = len(buffer)     # Need to align to a page boundary so use valloc     addr = libc.valloc(size)     addr = c_void_p(addr)      if 0 == addr:           raise Exception("Failed to allocate memory")      memmove(addr buf size)     if 0 != libc.mprotect(addr len(buffer) PROT_READ | PROT_WRITE | PROT_EXEC):         raise Exception("Failed to set protection on buffer")     return addr  code_ptr = executable_code(buffer) fptr = cast(code_ptr CFUNCTYPE(c_long c_long)) print fptr(1234) libc.free(code_ptr)  
import imdb  access = imdb.IMDb() movie = access.get_movie(1132626)  print "title: %s year: %s" % (movie['title'] movie['year']) print "Cover url: %s" % movie['cover url']  from BeautifulSoup import BeautifulSoup import imdb  access = imdb.IMDb() movie = access.get_movie(1132626)  page = urllib2.urlopen(access.get_imdbURL(movie)) soup = BeautifulSoup(page) cover_div = soup.find(attrs={"class" : "photo"}) cover_url = (photo_div.find('img'))['src'] print "Cover url: %s" % cover_url  
#!/usr/bin/env python import psutil # gives a single float value psutil.cpu_percent() # gives an object with many fields psutil.virtual_memory() # you can convert that object to a dictionary  dict(psutil.virtual_memory()._asdict()) # you can have the percentage of used RAM psutil.virtual_memory().percent 79.2 # you can calculate percentage of available memory psutil.virtual_memory().available * 100 / psutil.virtual_memory().total 20.8  
embed_list[len(embed_list):] = [foo] embed_list.append(foo) 
import sqlite3  def collate_reverse(string1 string2):     return -cmp(string1 string2)  con = sqlite3.connect(":memory:") con.create_collation("reverse" collate_reverse)  cur = con.cursor() cur.execute("create table test(x)") cur.executemany("insert into test(x) values (?)" [("a") ("b")]) cur.execute("select x from test order by x collate reverse") for row in cur:     print row con.close()  
%template(IntVector) vector&lt;int&gt;;  
def merge3( row1 row2 ):     i1= 0     i2= 0     result= []     while i1 != len(row1) or i2 != len(row2):         if i1 == len(row1):             result.append( ' '.join(row1[i1].contents) )             i2 += 1         elif i2 == len(row2):             result.append( ' '.join(row2[i2].contents) )             i1 += 1         else:             if row1[i1]['colspan'] &lt; row2[i2]['colspan']:                 # Fill extra cols from row1                 c1= row1[i1]['colspan']                 while c1 != row2[i2]['colspan']:                     result.append( ' '.join(row2[i2].contents) )                     c1 += 1             elif row1[i1]['colspan'] &gt; row2[i2]['colspan']:                 # Fill extra cols from row2                 c2= row2[i2]['colspan']                 while row1[i1]['colspan'] != c2:                     result.append( ' '.join(row1[i1].contents) )                     c2 += 1             else:                 assert row1[i1]['colspan'] == row2[i2]['colspan']                 pass             txt1= ' '.join(row1[i1].contents)             txt2= ' '.join(row2[i2].contents)             result.append( txt1 + " " + txt2 )             i1 += 1             i2 += 1     return result  
functools.partial import sys import functools  print_hello = functools.partial(sys.stdout.write "Hello world\n")  print_hello()  Hello world  lambda print_hello = lambda *a **kw: sys.stdout.write("Hello world\n" *a **kw)  
class  MyHandler(object):     def handle_extractTitle(self dom):         # do something      def handle_extractMetaTags(self dom):         # do something      def handle(self type dom):         func = getattr(self 'handle_%s' % type None)         if func is None:             raise Exception("No handler for type %r" % type)         return func(dom)   handler = MyHandler()  handler.handle('extractTitle' dom)  def handle(self type *args **kwargs):     func = getattr(self 'handle_%s' % type None)     if func is None:         raise Exception("No handler for type %r" % type)     return func(*args **kwargs)  
__init__.py  import os sys inspect  # realpath() will make your script run even if you symlink it :)  cmd_folder = os.path.realpath(os.path.abspath(os.path.split(inspect.getfile( inspect.currentframe() ))[0]))  if cmd_folder not in sys.path:      sys.path.insert(0 cmd_folder)   # Use this if you want to include modules from a subfolder  cmd_subfolder = os.path.realpath(os.path.abspath(os.path.join(os.path.split(inspect.getfile( inspect.currentframe() ))[0]"subfolder")))  if cmd_subfolder not in sys.path:      sys.path.insert(0 cmd_subfolder)   # Info:  # cmd_folder = os.path.dirname(os.path.abspath(__file__)) # DO NOT USE __file__ !!!  # __file__ fails if the script is called in different ways on Windows.  # __file__ fails if someone does os.chdir() before.  # sys.argv[0] also fails because it doesn't not always contains the path.  egg 
def foo():     foo.counter += 1     print "Counter is %d" % foo.counter foo.counter = 0  def static_vars(**kwargs):     def decorate(func):         for k in kwargs:             setattr(func k kwargs[k])         return func     return decorate  @static_vars(counter=0) def foo():     foo.counter += 1     print "Counter is %d" % foo.counter  foo. 
from django.db import models from django.contrib.contenttypes.models import ContentType from django.contrib.contenttypes import generic  class Food(models.Model):      """Food by name."""      name = models.CharField(max_length=25)  # ConsumedFood has a foreign key to Food and a "eaten_by" generic relation class ConsumedFood(models.Model):     food = models.ForeignKey(Food related_name="eaters")     content_type = models.ForeignKey(ContentType null=True)     object_id = models.PositiveIntegerField(null=True)     eaten_by = generic.GenericForeignKey('content_type' 'object_id')  class Person(models.Model):     first_name = models.CharField(max_length=50)     last_name = models.CharField(max_length=50)     birth_date = models.DateField()     address = models.CharField(max_length=100)     city = models.CharField(max_length=50)     foods = generic.GenericRelation(ConsumedFood)  class Cat(models.Model):     name = models.CharField(max_length=50)     foods = generic.GenericRelation(ConsumedFood)      class Cow(models.Model):     farmer = models.ForeignKey(Person)     foods = generic.GenericRelation(ConsumedFood)      """ &gt;&gt;&gt; from models import *  Create some food records  &gt;&gt;&gt; weed = Food(name="weed") &gt;&gt;&gt; weed.save()  &gt;&gt;&gt; burger = Food(name="burger") &gt;&gt;&gt; burger.save()  &gt;&gt;&gt; pet_food = Food(name="Pet food") &gt;&gt;&gt; pet_food.save()  John the farmer likes burgers  &gt;&gt;&gt; john = Person(first_name="John" last_name="Farmer" birth_date="1960-10-12") &gt;&gt;&gt; john.save() &gt;&gt;&gt; john.foods.create(food=burger) &lt;ConsumedFood: ConsumedFood object&gt;  Wilma the cow eats weed  &gt;&gt;&gt; wilma = Cow(farmer=john) &gt;&gt;&gt; wilma.save() &gt;&gt;&gt; wilma.foods.create(food=weed) &lt;ConsumedFood: ConsumedFood object&gt;  Felix the cat likes pet food  &gt;&gt;&gt; felix = Cat(name="felix") &gt;&gt;&gt; felix.save() &gt;&gt;&gt; pet_food.eaters.create(eaten_by=felix) &lt;ConsumedFood: ConsumedFood object&gt;  What food john likes again ? &gt;&gt;&gt; john.foods.all()[0].food.name u'burger'  Who's getting pet food ? &gt;&gt;&gt; living_thing = pet_food.eaters.all()[0].eaten_by &gt;&gt;&gt; isinstance(living_thingCow) False &gt;&gt;&gt; isinstance(living_thingCat) True  John's farm is in fire ! He looses his cow. &gt;&gt;&gt; wilma.delete()  John is a lot poorer right now &gt;&gt;&gt; john.foods.clear() &gt;&gt;&gt; john.foods.create(food=pet_food) &lt;ConsumedFood: ConsumedFood object&gt;  Who's eating pet food now ? &gt;&gt;&gt; for consumed_food in pet_food.eaters.all(): ...    consumed_food.eaten_by &lt;Cat: Cat object&gt; &lt;Person: Person object&gt;  Get the second pet food eater &gt;&gt;&gt; living_thing = pet_food.eaters.all()[1].eaten_by  Try to find if it's a person and reveal his name &gt;&gt;&gt; if isinstance(living_thingPerson): living_thing.first_name u'John'  """  
self.currentEmailParsedInstance.get_payload()  &gt;&gt;&gt; parser = email.parser.Parser() &gt;&gt;&gt; message = parser.parse(open('/home/vinko/jlm.txt''r')) &gt;&gt;&gt; message.is_multipart() True &gt;&gt;&gt; parts = message.get_payload() &gt;&gt;&gt; len(parts) 2 &gt;&gt;&gt; parts[0].get_content_type() 'text/plain' &gt;&gt;&gt; parts[1].get_content_type() 'message/rfc822' &gt;&gt;&gt; parts[0].get_payload() 'Message Text'  
&gt;&gt;&gt; l = [[[[[39]]]] [1 2 3] [4 [5 3] 1] [[[[8 9] 10] 11] 12]] &gt;&gt;&gt; def asum(t): return sum(map(asum t)) if hasattr(t '__iter__') else t ... &gt;&gt;&gt; sorted(l key=asum) [[1 2 3] [4 [5 3] 1] [[[[39]]]] [[[[8 9] 10] 11] 12]]  
cons   = lambda el lst: (el lst) mklist = lambda *args: reduce(lambda lst el: cons(el lst) reversed(args) None) car = lambda lst: lst[0] if lst else lst cdr = lambda lst: lst[1] if lst else lst nth = lambda n lst: nth(n-1 cdr(lst)) if n &gt; 0 else car(lst) length  = lambda lst count=0: length(cdr(lst) count+1) if lst else count begin   = lambda *args: args[-1] display = lambda lst: begin(w("%s " % car(lst)) display(cdr(lst))) if lst else w("nil\n")  w = sys.stdout.write class Node:    def __init__(self cargo=None next=None):      self.car = cargo      self.cdr = next       def __str__(self):      return str(self.car)  def display(lst):   if lst:     w("%s " % lst)     display(lst.cdr)   else:     w("nil\n")  
self.attribute wx.Frame.__init__() self wx.Panel 
re.escape() re def simplistic_plural(word text):     word_or_plural = re.escape(word) + 's?'     return re.match(word_or_plural text)  
def poisson_probability(actual mean):     # naive:   math.exp(-mean) * mean**actual / factorial(actual)      # iterative to keep the components from getting too large or small:     p = math.exp(-mean)     for i in xrange(actual):         p *= mean         p /= i+1     return p  
import subprocess subprocess.Popen(r'explorer /select"C:\path\of\folder\file"')  
ClientCreator(...).connectTCP(...) self.transport.loseConnection() 
placeholder= '?' # For SQLite. See DBAPI paramstyle. placeholders= ' '.join(placeholder for unused in l) query= 'SELECT name FROM students WHERE id IN (%s)' % placeholders cursor.execute(query l)  
char_file = open('pickle.char' 'rb')  
setattr(x attr 'magic')  &gt;&gt;&gt; help(setattr) Help on built-in function setattr in module __builtin__:  setattr(...)     setattr(object name value)      Set a named attribute on an object; setattr(x 'y' v) is equivalent to     ``x.y = v''.  object 
sys.exit() 
url_pattern.sub(getExpandedURL text) 
soup = BeautifulSoup.BeautifulSoup(urllib.urlopen(url).read())  import urlparse urllib from BeautifulSoup import BeautifulSoup  url = "http://www.example.com/index.html" source = urllib.urlopen(url).read()  soup = BeautifulSoup(source)  for item in soup.fetchall('a'):     try:         link =  urlparse.urlparse(item['href'].lower())     except:         # Not a valid link         pass     else:         print link  
EDIT: &gt;&gt;&gt; import decimal &gt;&gt;&gt; print(decimal.Decimal("1.2") ** 2) 1.44  decimal.Decimal 
@register.filter def in_list(valuearg):     return value in arg  The item is  {% if item|in_list:list %}      in list  {% else %}      not in list {% endif %}  
*args **kwargs def my_sum(*args):     return sum(args)  args kwargs * ** 
__name__ 'foo' __name__ '__main__' if __name__ == '__main__':     main program here  
[('spam' 'eggs') ('spam' 'ham')]  parser.get('Some Section' 'spam')  [Some Section] spam: eggs ham  spam_values = [v.strip() for v in parser.get('Some Section' 'spam').split('')]  
class Foo:    def __init__(self):     self.do_stuff = { "A": self.do_A "B": self.do_B }    def run(self):     for x in ["A" "B"]:       self.do_stuff[x]("hi")    def do_A(self x):     pass    def do_B(self x):     pass  
(?&lt;NAME&gt;pattern) %+ $variable =~ /(?&lt;count&gt;\d+)/; print "Count is $+{count}";  
while 1:     data = conn.recv(1024)     if not data: break     conn.send(data) conn.close()  
from google.appengine.ext import webapp import os  class PrintEnvironmentHandler(webapp.RequestHandler):   def get(self):     for name in os.environ.keys():       self.response.out.write("%s = %s&lt;br /&gt;\n" % (name os.environ[name]))     [1]: http://code.google.com/appengine/docs/python/theenvironment.html  
range(0len()3) def segment( n ):    segList= []    while len(n) &gt; 3:        segList.insert( 0 n[-3:] )        n= n[:-3]    segList.insert( 0 n )    return segList  if __name__ == "__main__" sys.argv if __name__ == "__main__":     import sys     for number in sys.argv[1:]:         print number2string( number )  number2string 
{{ forloop.counter }} {% counter %} class CounterNode(template.Node):    def __init__(self):     self.count = 0    def render(self context):     self.count += 1     return self.count  @register.tag def counter(parser token):   return CounterNode()  
&gt;&gt;&gt; lst = [1 2 3 4 5] &gt;&gt;&gt; filter(lambda x: x % 2 == 0 lst) [2 4]  &gt;&gt;&gt; lst = [1 2 3 4 5] &gt;&gt;&gt; [x for x in lst if x %2 == 0] [2 4]  &gt;&gt;&gt; next(x for x in lst if x % 2 == 0) 2  filter(lambda x: x % 2 == 0 lst)[0] [x for x in lst if x %2 == 0][0]  filter(lambda x: x % 2 == 0 lst)[:1] [x for x in lst if x %2 == 0][:1]  
initial 
queryset form.rate.queryset = Rate.objects.filter(company_id=the_company.id)  form.fields["rate"].queryset = ... 
def lambda def lambda global def open range SyntaxError code1 class Foo:     code2     def spam():         code3         for code4:             code5             x()  for def spam code3 code4 code5 def x code1 x x code2 
&lt;a\s*href=['|"](http:\/\/(.*?)\S['|"]&gt;  &lt;a .*?+href=['"](http:\/\/.*?)['"].*?&gt;  
wx.TextCtrl wx.TE_READONLY 
from BeautifulSoup import BeautifulSoup html = "&lt;p&gt;&lt;ul&gt;&lt;li&gt;Foo" soup = BeautifulSoup(html) print soup.prettify()  &lt;p&gt;  &lt;ul&gt;   &lt;li&gt;    Foo   &lt;/li&gt;  &lt;/ul&gt; &lt;/p&gt;  import tidy html = "&lt;p&gt;&lt;ul&gt;&lt;li&gt;Foo" print tidy.parseString(html show_body_only=True)  &lt;ul&gt; &lt;li&gt;Foo&lt;/li&gt; &lt;/ul&gt;  print tidy.parseString(html show_body_only=True drop_empty_paras=False)  &lt;p&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Foo&lt;/li&gt; &lt;/ul&gt;  print tidy.parseString(html show_body_only=True indent=True)  &lt;ul&gt;   &lt;li&gt;Foo   &lt;/li&gt; &lt;/ul&gt;  
import pyHook import pythoncom  def OnKeyboardEvent(event):     print event.Ascii  hm = pyHook.HookManager() hm.KeyDown = OnKeyboardEvent hm.HookKeyboard()  while True:     pythoncom.PumpMessages()  
call_user_func_array() call_user_func_array("range" $args); 
import pwd pw = pwd.getpwnam("nobody") uid = pw.pw_uid  
urls.py 
my_book = Book.objects.get(pk=1) all_ingredients = Ingredient.objects.filter(recipe__book=my_book)  
[head] var: self.post.id  import ConfigParser  class Test:   def __init__(self):       self.post = TestPost(5)   def getPost(self):       config = ConfigParser.ConfigParser()       config.read('/path/to/test.ini')       newvar = config.get('head' 'var')       print eval(newvar)   class TestPost:   def __init__(self id):       self.id = id  test = Test() test.getPost()   # prints 5  
eval() print eval('self.post.id') # Prints the value of self.post.id  
slugify() def slugify(value):     """     Normalizes string converts to lowercase removes non-alpha characters     and converts spaces to hyphens.     """     import unicodedata     value = unicodedata.normalize('NFKD' value).encode('ascii' 'ignore')     value = unicode(re.sub('[^\w\s-]' '' value).strip().lower())     value = unicode(re.sub('[-\s]+' '-' value))     # ...     return value  
: PYTHONPATH PATH : 
import subprocess  awk_sort = subprocess.Popen( "awk -f script.awk | sort &gt; outfile.txt"     stdin=subprocess.PIPE shell=True ) awk_sort.communicate( b"input data\n" )  awk &gt;file ; sort file awk | sort a | b a | b os.pipe() a b a | b | c a | (b | c) os.pipe() os.exec() os.fork() sys.stdin sys.stdout os.pipe() subprocess.Popen 
import MyLib import ReallyBigLib  
import glob os shutil  files = glob.iglob(os.path.join(source_dir "*.ext")) for file in files:     if os.path.isfile(file):         shutil.copy2(file dest_dir)  
&gt;&gt;&gt; tree.getroot().xpath( ...     "//xhtml:img"  ...     namespaces={'xhtml':'http://www.w3.org/1999/xhtml'} ...     ) [&lt;Element {http://www.w3.org/1999/xhtml}img at 11a29e0&gt;]  
def get_form(exclude_list):     class MyForm(ModelForm):         class Meta:             model = Passenger             exclude = exclude_list     return MyForm  form_class = get_form(('field1' 'field2')) form = form_class()  def PassengerForm(exclude_list *args **kwargs):     class MyPassengerForm(ModelForm):         class Meta:             model = Passenger             exclude = exclude_list          def __init__(self):             super(MyPassengerForm self).__init__(*args **kwargs)      return MyPassengerForm()  form = PassengerForm(('field1' 'field2'))  
{{form}} 
{{variable}} &lt;script type="text/javascript"&gt;     var a = "{{someDjangoVariable}}"; &lt;/script&gt;  
initial = [ list of { dictionaries } one per form ]   values 
import os  if __name__ == "__main__":    startingDir = os.getcwd() # save our current directory    testDir = "\\test" # note that \ is windows specific and we have to escape it    os.chdir(testDir) # change to our test directory    os.system("java -jar run_this.jar required_paramter.ext")    os.chdir(startingDir) # change back to where we started  
os.chdir(owd)  
Fuse.MethodProxy._add_class_type         def setter(self xcls):              setattr(self type + '_class' xcls)              for m in inits:                 self.mdic[m] = xcls              for m in proxied:                 if hasattr(xcls m):                     self.mdic[m] = self.proxyclass(m)  self.file_class = self.get_file self.get_file mdic Dstorage file_class 
&gt;&gt;&gt; foo = 'baz "\\"' &gt;&gt;&gt; foo 'baz "\\"' &gt;&gt;&gt; print foo baz "\"  &gt;&gt;&gt; print r'baz "\"' baz "\"  
importlib.import_module exec __import__ &gt;&gt;&gt; moduleNames = ['sys' 'os' 're' 'unittest']  &gt;&gt;&gt; moduleNames ['sys' 'os' 're' 'unittest'] &gt;&gt;&gt; modules = map(__import__ moduleNames)  
datetime from datetime import datetime d = datetime.strptime('2007-07-18 10:03:19' '%Y-%m-%d %H:%M:%S') day_string = d.strftime('%Y-%m-%d')  
def OW60(sign=1):     r1 = random.randint (1 30)     r2 = random.randint (1 30)     val = sign * (r1 + r2)      islow  = (r1&lt;=5)  + (r2&lt;=5)     ishigh = (r1&gt;=26) + (r2&gt;=26)      if islow == 2 or ishigh == 2:         return val + OW60(1)     elif islow == 1 and ishigh == 1:         return val + OW60(-1)     else:         return val  F(x) = the probability that OW60(1) returns a value ? x.  G(x) = the probability that OW60(-1) returns a value ? x.  F(x) = (1/900)(2+F(x-2) + 3+F(x-3) + ... + 59+F(x-59) + 60+F(x-60))  G(x) = (1/900)(-2+F(x-2) + (-3)+F(x-3) + ... + (-59)+F(x-59) + (-60)+F(x-60))  V(x) = [F(x-60) G(x-60) ... F(x-2) G(x-2) F(x-1) G(x-1) F(x) G(x)]  V(x) = A*V(x-1) + B  
env=Environment(CPPPATH='/usr/include/glib-2.0/:/usr/lib/glib-2.0/include:include'                 CPPDEFINES=[]                 LIBS=['glib-2.0'])   if ARGUMENTS.get('debug' 0):     env.Append(CCFLAGS = ' -g')  env.Program('template' Glob('src/*.cc'))  
import shutil  shutil.rmtree('/folder_name')  rmtree shutil.rmtree('/folder_name' ignore_errors=True)  
error = exc.args  [error] = exc.args  (foo) 
&gt;&gt;&gt; datetime.fromisocalendar(2011 22 1) datetime.datetime(2011 5 30 0 0)  %G %V %u &gt;&gt;&gt; datetime.strptime('2011 22 1' '%G %V %u') datetime.datetime(2011 5 30 0 0)  import datetime  def iso_year_start(iso_year):     "The gregorian calendar date of the first day of the given ISO year"     fourth_jan = datetime.date(iso_year 1 4)     delta = datetime.timedelta(fourth_jan.isoweekday()-1)     return fourth_jan - delta   def iso_to_gregorian(iso_year iso_week iso_day):     "Gregorian calendar date for the given ISO year week and day"     year_start = iso_year_start(iso_year)     return year_start + datetime.timedelta(days=iso_day-1 weeks=iso_week-1)  &gt;&gt;&gt; iso = datetime.date(2005 1 1).isocalendar() &gt;&gt;&gt; iso (2004 53 6) &gt;&gt;&gt; iso_to_gregorian(*iso) datetime.date(2005 1 1)  &gt;&gt;&gt; iso = datetime.date(2010 1 4).isocalendar()     &gt;&gt;&gt; iso (2010 1 1) &gt;&gt;&gt; iso_to_gregorian(*iso) datetime.date(2010 1 4)  &gt;&gt;&gt; iso = datetime.date(2010 1 3).isocalendar() &gt;&gt;&gt; iso (2009 53 7) &gt;&gt;&gt; iso_to_gregorian(*iso) datetime.date(2010 1 3)  
def f(n):     return '&lt;' + str(num) + '&gt;'  class C(object):      v = f(9)     w = f(42)  &gt;&gt;&gt; f(4) '&lt;4&gt;'  
def to_sequence(arg):     '''      determine whether an arg should be treated as a "unit" or a "sequence"     if it's a unit return a 1-tuple with the arg     '''     def _multiple(x):           return hasattr(x"__iter__")     if _multiple(arg):           return arg     else:         return (arg)  &gt;&gt;&gt; to_sequence("a string") ('a string') &gt;&gt;&gt; to_sequence( (123) ) (1 2 3) &gt;&gt;&gt; to_sequence( xrange(5) ) xrange(5)  
sqlite&gt; .tab job         snmptarget  t1          t2          t3         sqlite&gt; select name from sqlite_master where type = 'table'; job t1 t2 snmptarget t3  sqlite&gt; .schema job CREATE TABLE job (     id INTEGER PRIMARY KEY     data VARCHAR ); sqlite&gt; select sql from sqlite_master where type = 'table' and name = 'job'; CREATE TABLE job (     id INTEGER PRIMARY KEY     data VARCHAR )  
testFunc.im_class  im_class im_self 
self from functools import wraps  # use this to preserve function signatures and docstrings def logger(func):     @wraps(func)     def with_logging(*args **kwargs):         print "Entering %s.%s" % (args[0].__class__.__name__ func.__name__)         return func(*args **kwargs)     return with_logging  class C(object):     @logger     def f(self):         pass  C().f()  class B(C):     pass  b = B() b.f()  Entering B.f Entering C.f 
&gt;&gt;&gt; a = 256 &gt;&gt;&gt; b = 256 &gt;&gt;&gt; id(a) 9987148 &gt;&gt;&gt; id(b) 9987148 &gt;&gt;&gt; a = 257 &gt;&gt;&gt; b = 257 &gt;&gt;&gt; id(a) 11662816 &gt;&gt;&gt; id(b) 11662828  
random.choice() import random  foo = ['a' 'b' 'c' 'd' 'e'] print(random.choice(foo))  secrets.choice() import secrets  foo = ['battery' 'correct' 'horse' 'staple'] print(secrets.choice(foo))  secrets random.SystemRandom import random  secure_random = random.SystemRandom() print(secure_random.choice(foo))  
def save(self **kwargs):     super(Publisher self).save(**kwargs)      for item in self.item_set.all():         item.code = "%s - whatever" % item.code  Item Publisher 
bin in from jarray import zeros from java.io import BufferedInputStream FileInputStream FileOutputStream from java.util.zip import ZipEntry ZipOutputStream  def test(file):     zos = ZipOutputStream(FileOutputStream(file + ".zip"))     buf = zeros(1024 'b')     zipEntry = ZipEntry(file)     fin = FileInputStream(file)     bin = BufferedInputStream(fin)     zos.putNextEntry(zipEntry)     len = bin.read(buf)     while len &gt;= 0:         zos.write(buf 0 len)         len = bin.read(buf)     bin.close()     zos.closeEntry()  
def on_TestClass_destroy(self widget):     gtk.main_quit()  
def logged(func):     def with_logging(*args **kwargs):         print(func.__name__ + " was called")         return func(*args **kwargs)     return with_logging  @logged def f(x):    """does some math"""    return x + x * x  def f(x):     """does some math"""     return x + x * x f = logged(f)  f with_logging print(f.__name__)  with_logging f with_logging x *args **kwargs functools.wraps wraps from functools import wraps def logged(func):     @wraps(func)     def with_logging(*args **kwargs):         print(func.__name__ + " was called")         return func(*args **kwargs)     return with_logging  @logged def f(x):    """does some math"""    return x + x * x  print(f.__name__)  # prints 'f' print(f.__doc__)   # prints 'does some math'  
Exception dict &gt;&gt;&gt; class C(object): pass ... &gt;&gt;&gt; '__module__' in C.__dict__ True &gt;&gt;&gt; '__module__' in dict.__dict__ False &gt;&gt;&gt; '__module__' in Exception.__dict__ False  Exception dict &gt;&gt;&gt; class foo(dict Exception): ...     pass ...  Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: Error when calling the metaclass bases     multiple bases have instance lay-out conflict  
from psycopg2.extensions import adapt  print adapt("Hello World'; DROP DATABASE World;")  from psycopg2.extensions import register_adapter  register_adapter(mytype myadapter)  
^ ^b [] [ASDF] A S D F [0-9] sed awk [[:digit:]] \d ^b\d \d\d\d {} {xy} ^b\d{3} ^b\d{3}cv ^b\d{3}cv\d{2} . ^\d{3}cv\d{2}_release\.ext $ ^b\d{3}cv\d{2}_release\.ext$  
import numpy  my_ar = numpy.array((0510)) print my_ar  transformed = numpy.array(map(lambda x:numpy.array((xx*2x*3)) my_ar)) print transformed  print transformed.shape  
kwargs = {     '{0}__{1}'.format('name' 'startswith'): 'A'     '{0}__{1}'.format('name' 'endswith'): 'Z' }  Person.objects.filter(**kwargs)  
clean_post_data clean 
class FileFacts( models.Model ):     content_type = models.ForeignKey(ContentType)     object_id = models.PositiveIntegerField()     content_object = generic.GenericForeignKey()  class DownloadFile( models.Model ):     facts = models.ForeignKey( FileFacts )     file = models.FileField(upload_to='files/%Y/%m/%d')  class InlineImage( models.Model ):     facts = models.ForeignKey( FileFacts )     file = models.ImageField(upload_to='files/%Y/%m/%d')  
[x.id for x  in self.db.query(schema.allPostsUuid).execute(timeout=20)  if x.type == 'post'      and x.deleted is not False     and ...     and ...]  transform = lambda x: x.id results = self.db.query(schema.allPostsUuid).execute(timeout=20) condition = lambda x: x.deleted is not False and ... and ... [transform(x) for x in results if condition(x)]  
os.system("dir")  
print str() str(datetime.datetime(2008 11 22 19 53 42)) '2008-11-22 19:53:42' repr() repr(datetime.datetime(2008 11 22 19 53 42)) 'datetime.datetime(2008 11 22 19 53 42)' print str() mylist repr() str() str(date) mylist for date in mylist :     print str(date)  str() import datetime mylist = [] today = datetime.date.today() mylist.append(today) print mylist[0] # print the date object not the container ;-) 2008-11-22  # It's better to always use str() because :  print &quot;This is a new day : &quot; mylist[0] # will work &gt;&gt;&gt; This is a new day : 2008-11-22  print &quot;This is a new day : &quot; + mylist[0] # will crash &gt;&gt;&gt; cannot concatenate 'str' and 'datetime.date' objects  print &quot;This is a new day : &quot; + str(mylist[0])  &gt;&gt;&gt; This is a new day : 2008-11-22  strftime() strftime() print today.strftime('We are the %d %b %Y') &gt;&gt;&gt; 'We are the 22 Nov 2008'  &quot;%&quot; %d %m %b %y %Y print &quot;We are the {:%d %b %Y}&quot;.format(today) &gt;&gt;&gt; 'We are the 22 Nov 2008'  import datetime f&quot;{datetime.datetime.now():%Y-%m-%d}&quot; &gt;&gt;&gt; '2017-06-15'  
def doAppend( size=10000 ):     result = []     for i in range(size):         message= "some unique object %d" % ( i )         result.append(message)     return result  def doAllocate( size=10000 ):     result=size*[None]     for i in range(size):         message= "some unique object %d" % ( i )         result[i]= message     return result  simple append 0.0102 pre-allocate  0.0098  
try:     x = int(rowColumn[1][3].replace('''').strip('$')) except ValueError e:     x = None # rowColumn[1][3] was not an integer  
def handle_quit():   quit()  def handle_left():     curpiece.shift(-1 0)     shadowpiece = curpiece.clone(); setupshadow(shadowpiece)  def handle_right():     curpiece.shift(1 0)     shadowpiece = curpiece.clone(); setupshadow(shadowpiece)  def handle_pause():     if not paused:         paused = True  branch = {   K_q: handle_quit   K_e: handle_pause   K_LEFT: handle_left   K_RIGHT: handle_right }  for event in pygame.event.get():     if event.type == KEYDOWN:         branch[event.key]()  
def chunks(lst n):     """Yield successive n-sized chunks from lst."""     for i in range(0 len(lst) n):         yield lst[i:i + n]  import pprint pprint.pprint(list(chunks(range(10 75) 10))) [[10 11 12 13 14 15 16 17 18 19]  [20 21 22 23 24 25 26 27 28 29]  [30 31 32 33 34 35 36 37 38 39]  [40 41 42 43 44 45 46 47 48 49]  [50 51 52 53 54 55 56 57 58 59]  [60 61 62 63 64 65 66 67 68 69]  [70 71 72 73 74]]  xrange() range() def chunks(lst n):     """Yield successive n-sized chunks from lst."""     for i in xrange(0 len(lst) n):         yield lst[i:i + n]  [lst[i:i + n] for i in range(0 len(lst) n)]  [lst[i:i + n] for i in xrange(0 len(lst) n)]  
import django ActivePython 2.5.1.1 (ActiveState Software Inc.) based on Python 2.5.1 (r251:54863 May  1 2007 17:47:05) [MSC v.1310 32 bit (Intel)] on win32 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import django &gt;&gt;&gt;  setuptools easy_install setup.py site-packages .pth easy-install.pth django.pth 
$ python convert.py -i 'video_*'  -i python convert.py -i video_1 video_2 video_3 video_4 video_5 video_6 -i args options.input 
class Computer(object):     """Docstrings are used kind of like Javadoc to document classes and     members.  They are the first thing inside a class or method.      You probably want to extend object to make it a "new-style" class.     There are reasons for this that are a bit complex to explain."""      # everything down here is a static variable unlike in Java or C# where     # declarations here are for what members a class has.  All instance     # variables in Python are dynamic unless you specifically tell Python     # otherwise.     defaultName = "belinda"     defaultRes = (1024 768)     defaultIP = "192.168.5.307"      def __init__(self name=defaultName resolution=defaultRes ip=defaultIP):         """Constructors in Python are called __init__.  Methods with names         like __something__ often have special significance to the Python         interpreter.          The first argument to any class method is a reference to the current         object called "self" by convention.          You can use default function arguments instead of function         overloading."""         self.name = name         self.resolution = resolution         self.ip = ip         # and so on      def printStats(self):         """You could instead use a __str__(self ...) function to return this         string.  Then you could simply do "print(str(computer))" if you wanted         to."""         print "Computer Statistics: --------------------------------"         print "Name:" + self.name         print "IP:" + self.ip         print "ScreenSize:"  self.resolution //cannot concatenate 'str' and 'tuple' objects         print "-----------------------------------------------------"  
from functools import wraps  def ajax_login_required(view_func):     @wraps(view_func)     def wrapper(request *args **kwargs):         if request.user.is_authenticated():             return view_func(request *args **kwargs)         json = simplejson.dumps({ 'not_authenticated': True })         return HttpResponse(json mimetype='application/json')     return wrapper  @ajax_login_required def ajax_update_module(request module_slug action):     # Etc ...     return HttpResponse(json mimetype='application/json')  $.post('/restricted-url/' data function(json) {     if (json.not_authenticated) {         alert('Not authorized.');  // Or something in a message DIV         return;     }     // Etc ... });  functools.wraps 
class Animal(models.Model):     def __unicode__(self):         if hasattr(self 'dog'):             return self.dog.__unicode__()         elif hasattr(self 'cat'):             return self.cat.__unicode__()         else:             return 'Animal'  
"".join( map(str record_ids) )  "".join( list_of_strings ) map( str list ) 
/System/Library/Frameworks/Python.framework/Versions/2.5/bin/python2.5 
%% % %sourcedest cursor.execute('INSERT INTO mastertickets (BLAH FOO) VALUES (%s %s)' (self.tkt.id n))  
name[0].firstChild.nodeValue  
&gt;&gt;&gt; import socket &gt;&gt;&gt; packed_n= socket.inet_aton("128.0.0.1") &gt;&gt;&gt; import struct &gt;&gt;&gt; struct.unpack( "!L" packed_n ) (2147483649L) &gt;&gt;&gt; hex(_[0]) '0x80000001L'  
ctypes.cast &gt;&gt;&gt; import ctypes &gt;&gt;&gt; p1= ctypes.c_char_p("hi mom") &gt;&gt;&gt; ctypes.cast( p1 ctypes.c_void_p ) c_void_p(11133300)  
&gt;&gt;&gt; import pickle &gt;&gt;&gt; d1 = {1:'one' 2:'two' 3:'three'} &gt;&gt;&gt; d2 = {1:'eleven' 2:'twelve' 3:'thirteen'} &gt;&gt;&gt; d3 = {1:'twenty-one' 2:'twenty-two' 3:'twenty-three'} &gt;&gt;&gt; data = [d1 d2 d3] &gt;&gt;&gt; out = open('data.pickle' 'wb') &gt;&gt;&gt; pickle.dump(data out) &gt;&gt;&gt; out.close() &gt;&gt;&gt; input = open('data.pickle')     &gt;&gt;&gt; data2 = pickle.load(input) &gt;&gt;&gt; data == data2 True  
&lt;form action="/submitpicture/" method="POST" enctype="multipart/form-data" &gt;  
def children(self):     stack = [self.entities]     push = stack.append     pop = stack.pop     while stack:          for e in pop():             yield e             if e.entities:                 push(e.entities)  children     :  5.53942348004 children_bind:  4.77636131253  
materials = 1 + (level * 1)  level= raw_input('blah') try:     level= int(level) except ValueError:     # user put something non-numeric in tell them off  
class NonOverridable(type):     def __new__(self name bases dct):         if bases and "roo" in dct:             raise SyntaxError "Overriding roo is not allowed"         return type.__new__(self name bases dct)  class foo:     __metaclass__=NonOverridable     ...  
page = urllib.urlopen("http://www.woarl.com/board/ucp.php?mode=login"[logindata])  page = urllib.urlopen("http://www.woarl.com/board/ucp.php?mode=login" [logindata])  page = urllib2.urlopen("http://www.woarl.com/board/ucp.php?mode=login" logindata)  
*** finding dlls needed *** error: MSVCP90.dll: No such file or directory  
newList = oldList oldList newList newList = oldList[:] [:] 
class Car(models.Model):     manufacturer = models.ForeignKey('production.Manufacturer')  
from os.path import basename splitext  pathname = "/adda/adas/sdas/hello.txt" name extension = splitext(basename(pathname)) print name # --&gt; "hello"  
for event elem in iterparse(source):     if elem.tag == "record":         ... process record elements ...         elem.clear()  # get an iterable context = iterparse(source events=("start" "end"))  # turn it into an iterator context = iter(context)  # get the root element event root = context.next()  for event elem in context:     if event == "end" and elem.tag == "record":         ... process record elements ...         root.clear()  import xml.etree.ElementTree as ET  # get an iterable context = ET.iterparse(source events=("start" "end"))  is_first = True  for event elem in context:     # get the root element     if is_first:         root = elem         is_first = False     if event == "end" and elem.tag == "record":         ... process record elements ...         root.clear()  
from collections import defaultdict myIndex = defaultdict(list) myIndex[someId].append(someVal)  defaultdict &gt;&gt;&gt; s = [('yellow' 1) ('blue' 2) ('yellow' 3) ('blue' 4) ('red' 1)] &gt;&gt;&gt; d = defaultdict(list) &gt;&gt;&gt; for k v in s:         d[k].append(v)  &gt;&gt;&gt; d.items() [('blue' [2 4]) ('red' [1]) ('yellow' [1 3])]  
save QuerySet update UPDATE Something.objects.filter(x__in=['a' 'b' 'c']).update(a='something')  
enc = msg['Content-Transfer-Encoding']  
subprocess import subprocess process = subprocess.Popen(command shell=True stdout=subprocess.PIPE) process.wait() print process.returncode  
idol7stats __init__.py idol7stats.py idol7stats import idol7stats.idol7stats idol7stats.py idol7stats/__init__.py idol7stats/__init__.py from idol7stats.idol7stats import *  
import sys getattr(sys.modules[__name__] 'A')  
for k in sorted(somedictionary.keys()):     doSomething(k)  for k v in sorted(somedictionary.iteritems()):    doSomething(k v)  
295760     S. Lott's answer 237984     S. Lott's with keys interned before passing in 203172 [*] d[(abc)] = int(freq) 203156     d[a][b][c] = int(freq) 189132     keys.append((abc)); freqs.append(int(freq)) 146132     d[intern(a)intern(b)][intern(c)] = int(freq) 145408     d[intern(a)][intern(b)][intern(c)] = int(freq)  83888 [*] d[a+' '+b+' '+c] = int(freq)  82776 [*] d[(intern(a)intern(b)intern(c))] = int(freq)  68756     keys.append((intern(a)intern(b)intern(c))); freqs.append(int(freq))  60320     keys.append(a+' '+b+' '+c); freqs.append(int(freq))  50556     pair array  48320     squeezed pair array  33024     squeezed single array  import collections  def build(file):     pairs = collections.defaultdict(list)     for line in file:  # N.B. file assumed to be already sorted         a b c freq = line.split()         key = ' '.join((a b))         pairs[key].append(c + ':' + freq if freq != '1' else c)     out = open('squeezedsinglearrayfile' 'w')     for key in sorted(pairs.keys()):         out.write('%s|%s\n' % (key ' '.join(pairs[key])))  def load():     return open('squeezedsinglearrayfile').readlines()  if __name__ == '__main__':     build(open('freqs'))  
py-readline py25-readline /opt/local 
data.fn = staticmethod(myFunction)  
d[t].append(c)  d[t] d = {} t = 0 d[t]  d t d[t] = [] d[t]  d t setdefault d.setdefault(t[]).append(c) defaultdict(list) {} d= collections.defaultdict(list) for ts x y in someFileOrListOrQueryOrWhatever:     d[ts].append( (xy) )  d= {}  if t not in d:     d[t] = list() d[t].append( c )  d= {}  d.setdefault(tlist()).append( c )  setdefault import collections d = collections.defaultdict(list)  d[t].append( c )  defaultdict list 
from django.db.models import Count theanswer = Item.objects.values('category').annotate(Count('category'))  
import wx wx.grid  class GridData(wx.grid.PyGridTableBase):     _cols = "a b c".split()     _data = [         "1 2 3".split()         "4 5 6".split()         "7 8 9".split()     ]      def GetColLabelValue(self col):         return self._cols[col]      def GetNumberRows(self):         return len(self._data)      def GetNumberCols(self):         return len(self._cols)      def GetValue(self row col):         return self._data[row][col]      def SetValue(self row col val):         self._data[row][col] = val  class Test(wx.Frame):     def __init__(self):         wx.Frame.__init__(self None)         self.data = GridData()         grid = wx.grid.Grid(self)         grid.SetTable(self.data)         self.Bind(wx.EVT_CLOSE self.OnClose)         self.Show()      def OnClose(self event):         print self.data._data         event.Skip()  app = wx.PySimpleApp() app.TopWindow = Test() app.MainLoop()  
List = open("filename.txt").readlines()  
Twisted Twisted-2.5 Twisted/bin .py Twisted/twisted.py Twisted/twisted/ Twisted/twisted/__init__.py Twisted/twisted/internet.py Twisted/twisted/test/ Twisted/twisted/test/__init__.py Twisted/twisted/test/test_internet.py Twisted/README Twisted/setup.py src lib __init__.py __init__.py PYTHONPATH 
&gt;&gt;&gt; unicodedata.category(u'?')[0] in 'LNPS' True  
[ (ij) for i in range(13) for j in range(15) ]  
string_to_hash = user.stored_salt + entered_password successful_login = (sha1(string_to_hash) == user.stored_password_hash)  
from xml.parsers.expat import ParserCreate  open_elements = {} result_dict = {}  def start_element(name attrs):     open_elements[name] = True  def end_element(name):     del open_elements[name]  def char_data(data):     for element in open_elements:         cur = result_dict.setdefault(element '')         result_dict[element] = cur + data  if __name__ == '__main__':     p = ParserCreate()      p.StartElementHandler = start_element     p.EndElementHandler = end_element     p.CharacterDataHandler = char_data      p.Parse(u'&lt;_133_3&gt;&lt;_135_3&gt;&lt;_116_2&gt;The other system worked for about 1 month&lt;/_116_2&gt; got some good images &lt;_137_3&gt;on it then it started doing the same thing as the first one&lt;/_137_3&gt; so then I quit using either camera now they are just sitting and collecting dust.&lt;/_135_3&gt;&lt;/_133_3&gt;' 1)      print result_dict  
import csv  input = ['abc"a string with a comma""another one"'] parser = csv.reader(input)  for fields in parser:   for if in enumerate(fields):     print if    # in Python 3 and up print is a function; use: print(if)  
if filecmp.cmp(local config_file):     shutil.copyfile(remote config_file) else:     shutil.copyfile(local config_file)  y if x else z 
import struct  # Pack a Python long as if it was a C unsigned integer little endian bytes = struct.pack("&lt;I" 0x78FF00AA) print [hex(ord(byte)) for byte in bytes]  ['0xaa' '0x0' '0xff' '0x78']  
def redirect_to_login(*args **kwargs):     return args[0].redirect(users.create_login_url(args[0].request.path))  def admin_only(handler):     def wrapped_handler(*args **kwargs):             user = users.get_current_user()         if user:             if authorized(user):                 return handler(args[0])             else:                 logging.warning('An unauthorized user has attempted '                                 'to enter an authorized page')                 return redirect_to_login(*args **kwargs)         else:             return redirect_to_login(*args **kwargs)      return wrapped_handler  
&gt;&gt;&gt; import string &gt;&gt;&gt; help(string.split) Help on function split in module string:  split(s sep=None maxsplit=-1)     split(s [sep [maxsplit]]) -&gt; list of strings      Return a list of the words in the string s using sep as the     delimiter string.  If maxsplit is given splits at no more than     maxsplit places (resulting in at most maxsplit+1 words).  If sep     is not specified or is None any whitespace string is a separator.      (split and splitfields are synonymous)  &gt;&gt;&gt; help("".split) Help on built-in function split:  split(...)     S.split([sep [maxsplit]]) -&gt; list of strings      Return a list of the words in the string S using sep as the     delimiter string.  If maxsplit is given at most maxsplit     splits are done. If sep is not specified or is None any     whitespace string is a separator.  
d = dict(p1=1 p2=2) def f2(p1p2):     print p1 p2 f2(**d)  
myfunction = lambda x: x==2  &gt;&gt;&gt;from lamtest import myfunc &gt;&gt;&gt;import inspect &gt;&gt;&gt;inspect.getsource(myfunc)  'myfunc = lambda x: x==2\n'  
from django.db import models  class Card(object):     """The ``Card`` class you described."""     ...  class CardField(models.PositiveIntegerField):     __metaclass__ = models.SubfieldBase      def get_db_prep_value(self value):         """Return the ``int`` equivalent of ``value``."""         if value is None: return None         try:             int_value = value.as_number()         except AttributeError:             int_value = int(value)         return int_value      def to_python(self value):         """Return the ``Card`` equivalent of ``value``."""         if value is None or isinstance(value Card):             return value         return Card(int(value))  get_db_prep_value value int None to_python value Card None SubfieldBase to_python 
[Section 3] barList=item1item2  
/Library/LaunchDaemons com.you.wiki.plist &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;com.you.wiki&lt;/string&gt;     &lt;key&gt;LowPriorityIO&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;KeepAlive&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;Nice&lt;/key&gt;     &lt;integer&gt;1&lt;/integer&gt;     &lt;key&gt;WorkingDirectory&lt;/key&gt;     &lt;string&gt;/Users/stuartcw/Documents/Wiki/moin-1.7.2&lt;/string&gt;      &lt;key&gt;UserName&lt;/key&gt;     &lt;string&gt;user to run this as&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/usr/bin/python&lt;/string&gt;         &lt;string&gt;wikiserver.py&lt;/string&gt;     &lt;/array&gt; &lt;/dict&gt; &lt;/plist&gt;  
#!/usr/bin/env python import Image  def makefilmstrip(images mode='RGB' color='white'):     """Return a combined (filmstripped each on top of the other) image of the images.      """     width  = max(img.size[0] for img in images)     height = sum(img.size[1] for img in images)      image = Image.new(mode (width height) color)       left upper = 0 0     for img in images:         image.paste(img (left upper))         upper += img.size[1]      return image  if __name__=='__main__':     # Here's how it could be used:     from glob import glob     from optparse import OptionParser      # process command-line args     parser = OptionParser()     parser.add_option("-o" "--output" dest="file"                       help="write combined image to OUTPUT")      options filepatterns = parser.parse_args()     outfilename = options.file      filenames = []     for files in map(glob filepatterns):         if files:             filenames += files      # construct image     images = map(Image.open filenames)         img = makefilmstrip(images)     img.save(outfilename)   $ python filmstrip.py -o output.jpg *.jpg  
import threading import webbrowser import BaseHTTPServer import SimpleHTTPServer  FILE = 'frontend.html' PORT = 8080   class TestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):     """The test example handler."""      def do_POST(self):         """Handle a post request by returning the square of the number."""         length = int(self.headers.getheader('content-length'))                 data_string = self.rfile.read(length)         try:             result = int(data_string) ** 2         except:             result = 'error'         self.wfile.write(result)   def open_browser():     """Start a browser after waiting for half a second."""     def _open_browser():         webbrowser.open('http://localhost:%s/%s' % (PORT FILE))     thread = threading.Timer(0.5 _open_browser)     thread.start()  def start_server():     """Start the server."""     server_address = ("" PORT)     server = BaseHTTPServer.HTTPServer(server_address TestHandler)     server.serve_forever()  if __name__ == "__main__":     open_browser()     start_server()  &lt;html&gt; &lt;head&gt; &lt;title&gt;AJAX test&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type="text/javascript"&gt;  function xml_http_post(url data callback) {     var req = false;     try {         // Firefox Opera 8.0+ Safari         req = new XMLHttpRequest();     }     catch (e) {         // Internet Explorer         try {             req = new ActiveXObject("Msxml2.XMLHTTP");         }         catch (e) {             try {                 req = new ActiveXObject("Microsoft.XMLHTTP");             }             catch (e) {                 alert("Your browser does not support AJAX!");                 return false;             }         }     }     req.open("POST" url true);     req.onreadystatechange = function() {         if (req.readyState == 4) {             callback(req);         }     }     req.send(data); }  function test_button() {     var data = document.test_form.test_text.value;                xml_http_post("frontend.html" data test_handle) }  function test_handle(req) {     var elem = document.getElementById('test_result')     elem.innerHTML =  req.responseText }  &lt;/script&gt;  &lt;form name=test_form&gt; sqr( &lt;input type="text" name="test_text" value="0" size="4"&gt; ) = &lt;span id="test_result"&gt;0&lt;/span&gt; &lt;input type=button onClick="test_button();" value="start" title="start"&gt; &lt;/form&gt;  &lt;/body&gt; &lt;/html&gt;  import threading import webbrowser from wsgiref.simple_server import make_server  FILE = 'frontend.html' PORT = 8080  def test_app(environ start_response):     if environ['REQUEST_METHOD'] == 'POST':         try:             request_body_size = int(environ['CONTENT_LENGTH'])             request_body = environ['wsgi.input'].read(request_body_size)         except (TypeError ValueError):             request_body = "0"         try:             response_body = str(int(request_body) ** 2)         except:             response_body = "error"         status = '200 OK'         headers = [('Content-type' 'text/plain')]         start_response(status headers)         return [response_body]     else:         response_body = open(FILE).read()         status = '200 OK'         headers = [('Content-type' 'text/html')                    ('Content-Length' str(len(response_body)))]         start_response(status headers)         return [response_body]  def open_browser():     """Start a browser after waiting for half a second."""     def _open_browser():         webbrowser.open('http://localhost:%s/%s' % (PORT FILE))     thread = threading.Timer(0.5 _open_browser)     thread.start()  def start_server():     """Start the server."""     httpd = make_server("" PORT test_app)     httpd.serve_forever()  if __name__ == "__main__":     open_browser()     start_server()  
metavar add_option usage = "usage: %prog [options] arg1 arg2" parser = OptionParser(usage=usage) parser.add_option("-f" "--filename"                   metavar="FILE" help="write output to FILE")  usage: &lt;yourscript&gt; [options] arg1 arg2  options:   -f FILE --filename=FILE  
from itertools import takewhile usefullines = takewhile(lambda x: not re.search(stopterm x) lines)  from itertools import takewhile usefullines = takewhile(lambda x: stopterm not in x lines)  def useful_lines(lines stopterm):     for line in lines:         if stopterm in line:             yield line             break         yield line  usefullines = useful_lines(lines stopterm) # or... for line in useful_lines(lines stopterm):     # ... do stuff     pass  
cursorclass = MySQLdb.cursors.SSCursor  MySQLdb.connect(user="user"                   passwd="password"                  db="mydb"                  cursorclass = MySQLdb.cursors.SSCursor                 )  fetchall SSCursor MySQLdb.cursors 
**kwargs def f(**kwargs):     print kwargs.keys()   f(a=2 b="b")     # -&gt; ['a' 'b'] f(**{'d'+'e': 1}) # -&gt; ['de']  
class Foo(WebService):     @webmethod     def bar(self arg1 arg2):          ...  def webmethod(func):     func.is_webmethod = True     return func  
logging/handlers.py handler = logging.handlers.TimedRotatingFileHandler("C:\\isis_ops\\logs\\Rotate_Test"'midnight'1) handler.suffix = "%Y-%m-%d" # or anything else that strftime will allow root_logger.addHandler(handler)  
__init__.py __init__.py __init__.py.bin __init__.py 
import zipfile import zlib import os  src = open( doc "rb" ) zf = zipfile.ZipFile( src ) for m in  zf.infolist():      # Examine the header     print m.filename m.header_offset m.compress_size repr(m.extra) repr(m.comment)     src.seek( m.header_offset )     src.read( 30 ) # Good to use struct to unpack this.     nm= src.read( len(m.filename) )     if len(m.extra) &gt; 0: ex= src.read( len(m.extra) )     if len(m.comment) &gt; 0: cm= src.read( len(m.comment) )       # Build a decompression object     decomp= zlib.decompressobj(-15)      # This can be done with a loop reading blocks     out= open( m.filename "wb" )     result= decomp.decompress( src.read( m.compress_size ) )     out.write( result )     result = decomp.flush()     out.write( result )     # end of the loop     out.close()  zf.close() src.close()  
cleaned_data['url'] example.com http://example.com/ clean_url() def clean_url(self):         url = self.cleaned_data['url']                 bits = urlparse(url)         dom = bits[1]         try:             site=Site.objects.get(domain__iexact=dom)         except Site.DoesNotExist:             return dom         raise forms.ValidationError(u'That domain is already taken.  Please choose another')  
for line in open('myfile.txt'):  # opened in text-mode; all EOLs are converted to '\n'     line = line.rstrip('\n')     process(line)  
logger = paramiko.util.logging.getLogger()  paramiko.util.log_to_file('filename.log')  
@foo def bar ():     pass  def bar ():     pass bar = foo(bar)  
# file logconfig.py if not hasattr(logging "set_up_done"):     logging.set_up_done=False  def set_up(myhome):     if logging.set_up_done:         return     # set up your logging here     # ...     logging.set_up_done=True  
Template try: import elementtree.ElementTree as ET except ImportError:     try: import cElementTree as ET     except ImportError:         try: import lxml.etree as ET         except ImportError:             import xml.etree.ElementTree as ET # Python 2.5 and up  
digester.update(self._options.get('code'))  digester.update(self._options.get('code').encode("utf-8"))  
import math  def utmToLatLng(zone easting northing northernHemisphere=True):     if not northernHemisphere:         northing = 10000000 - northing      a = 6378137     e = 0.081819191     e1sq = 0.006739497     k0 = 0.9996      arc = northing / k0     mu = arc / (a * (1 - math.pow(e 2) / 4.0 - 3 * math.pow(e 4) / 64.0 - 5 * math.pow(e 6) / 256.0))      ei = (1 - math.pow((1 - e * e) (1 / 2.0))) / (1 + math.pow((1 - e * e) (1 / 2.0)))      ca = 3 * ei / 2 - 27 * math.pow(ei 3) / 32.0      cb = 21 * math.pow(ei 2) / 16 - 55 * math.pow(ei 4) / 32     cc = 151 * math.pow(ei 3) / 96     cd = 1097 * math.pow(ei 4) / 512     phi1 = mu + ca * math.sin(2 * mu) + cb * math.sin(4 * mu) + cc * math.sin(6 * mu) + cd * math.sin(8 * mu)      n0 = a / math.pow((1 - math.pow((e * math.sin(phi1)) 2)) (1 / 2.0))      r0 = a * (1 - e * e) / math.pow((1 - math.pow((e * math.sin(phi1)) 2)) (3 / 2.0))     fact1 = n0 * math.tan(phi1) / r0      _a1 = 500000 - easting     dd0 = _a1 / (n0 * k0)     fact2 = dd0 * dd0 / 2      t0 = math.pow(math.tan(phi1) 2)     Q0 = e1sq * math.pow(math.cos(phi1) 2)     fact3 = (5 + 3 * t0 + 10 * Q0 - 4 * Q0 * Q0 - 9 * e1sq) * math.pow(dd0 4) / 24      fact4 = (61 + 90 * t0 + 298 * Q0 + 45 * t0 * t0 - 252 * e1sq - 3 * Q0 * Q0) * math.pow(dd0 6) / 720      lof1 = _a1 / (n0 * k0)     lof2 = (1 + 2 * t0 + Q0) * math.pow(dd0 3) / 6.0     lof3 = (5 - 2 * Q0 + 28 * t0 - 3 * math.pow(Q0 2) + 8 * e1sq + 24 * math.pow(t0 2)) * math.pow(dd0 5) / 120     _a2 = (lof1 - lof2 + lof3) / math.cos(phi1)     _a3 = _a2 * 180 / math.pi      latitude = 180 * (phi1 - fact1 * (fact2 + fact3 + fact4)) / math.pi      if not northernHemisphere:         latitude = -latitude      longitude = ((zone &gt; 0) and (6 * zone - 183.0) or 3.0) - _a3      return (latitude longitude)  easting*x+zone*y 
site Photo ForeignKey Gallery limit_choices_to photos Gallery ForeignKey Site class Photo(models.Model):     title = models.CharField(max_length=100)     gallery = models.ForeignKey(Gallery related_name='photos')     file = models.ImageField(upload_to=get_site_profile_path)       def __unicode__(self):         return self.title   class Gallery(models.Model):         name = models.CharField(max_length=40)     site = models.ForeignKey(Site)      def __unicode__(self):         return self.name  site photo_instance.gallery.site @property def site(self):     return self.gallery.site  site 
 return (a and [b] or [c])[0]   return (bc)[not a]   return (cb)[bool(a)]  
select distinct date_trunc('month' (current_date - offs)) as date  from generate_series(036528) as offs;           date ------------------------  2007-12-01 00:00:00+01  2008-01-01 00:00:00+01  2008-02-01 00:00:00+01  2008-03-01 00:00:00+01  2008-04-01 00:00:00+02  2008-05-01 00:00:00+02  2008-06-01 00:00:00+02  2008-07-01 00:00:00+02  2008-08-01 00:00:00+02  2008-09-01 00:00:00+02  2008-10-01 00:00:00+02  2008-11-01 00:00:00+01  2008-12-01 00:00:00+01  
f dir(f) read help(f.read) f.read() 
findall finditer match findall r"'(?P&lt;main&gt;\d+)\[(?P&lt;thumb&gt;\d+)\]'?"  
{% load humanize %} {{ my_num|intcomma }}  'django.contrib.humanize' INSTALLED_APPS settings.py 
re.findall()   
direct_to_template r'^foo/(?P&lt;template_name&gt;.+)/$''direct_to_template' {'template': 'foo_index.html'})  foo_index.html {% include template_name %}  
import unittest  class UnderTest(object):      def f1(self i):         return i + 1      def f2(self i):         return i + 2  class TestMeta(type):      def __new__(cls name bases attrs):         funcs = [t for t in dir(UnderTest) if t[0] == 'f']          def doTest(t):             def f(slf):                 ut=UnderTest()                 getattr(ut t)(3)             return f          for f in funcs:             attrs['test_gen_' + f] = doTest(f)         return type.__new__(cls name bases attrs)  class T(unittest.TestCase):      __metaclass__ = TestMeta      def testOne(self):         self.assertTrue(True)  if __name__ == '__main__':     unittest.main()  
import math  def next_multiple(x y):     return math.ceil(x/y)*y  def try_it(x y):     print x y next_multiple(x y)  for x y in [     (1.002 0.1)     (0.348 0.1)     (0.50 1)     (0.32 0.05)     ]:     try_it(x y)  1.002 0.1 1.1 0.348 0.1 0.4 0.5 1 1.0 0.32 0.05 0.35  
4*t pi = (a+b)**2 / (4*t)  decimal #!/usr/bin/env python from __future__ import with_statement import decimal  def pi_gauss_legendre():     D = decimal.Decimal     with decimal.localcontext() as ctx:         ctx.prec += 2                         a b t p = 1 1/D(2).sqrt() 1/D(4) 1                         pi = None         while 1:             an    = (a + b) / 2             b     = (a * b).sqrt()             t    -= p * (a - an) * (a - an)             a p  = an 2*p             piold = pi             pi    = (a + b) * (a + b) / (4 * t)             if pi == piold:  # equal within given precision                 break     return +pi  decimal.getcontext().prec = 100 print pi_gauss_legendre()  3.141592653589793238462643383279502884197169399375105820974944592307816406286208\     998628034825342117068  
'function(%s)' % ' '.join(args)  'function(a b c d)'  
Base.object.all() from django.contrib.contenttypes.models import ContentType  class Base(models.Model):     content_type = models.ForeignKey(ContentTypeeditable=Falsenull=True)      def save(self):         if(not self.content_type):             self.content_type = ContentType.objects.get_for_model(self.__class__)         self.save_base()      def as_leaf_class(self):         content_type = self.content_type         model = content_type.model_class()         if(model == Base):             return self         return model.objects.get(id=self.id)  if Base.content_type.model_class() 
p = subprocess.Popen('start /B MOZILL~1.LNK' shell=True) p.wait()  p.pid os.waitpid() 
mins = items[:n] mins.sort() for i in items[n:]:     if i &lt; mins[-1]:          mins.append(i)         mins.sort()         mins= mins[:n]  mins(items n): 0.297000169754 sorted(items)[:n]: 0.109999895096 mins2(items)[:n]: 0.0309998989105  bisect.insort 
PyDict_New() PyDict pyTimeList Py_INCREF pyDB 
form.py __new__ self.fields self.fields SortedDict datastructures.py class ContactForm(forms.Form):     subject = forms.CharField(max_length=100)     message = forms.CharField()     def __init__(self*args**kwargs):         forms.Form.__init__(self*args**kwargs)         #first argument index is the position of the field you want it to come before         self.fields.insert(0'sender'forms.EmailField(initial=str(time.time())))  
__hash__() __eq__() __cmp__() 
import urllib sock = urllib.urlopen("http://en.wikipedia.org/wiki/Python_(programming_language)") htmlsource = sock.read() sock.close() print htmlsource  import urllib2 f = urllib2.urlopen('http://www.python.org/') print f.read(100)  
AllocationSet(     Alloc( name="some name" value=1.23 )     Alloc( name="another name" value=2.34 )     Alloc( name="yet another name" value=4.56 ) )  
command=TL.destroy  command=lambda: TL.destroy()  
&gt;&gt;&gt; imap.authenticate('bobdole@gmail.com' 'Bob Dole likes your style!')  &gt;&gt;&gt; imap.login('bobdole@gmail.com' 'Bob Dole likes your style!')  
s = s[:1].upper() + s[1:]  
#!/usr/bin/env python """It is a `filename -&gt; filename.ext` filter.      `ext` is mime-based.  """ import fileinput import mimetypes import os import sys from subprocess import Popen PIPE  if len(sys.argv) &gt; 1 and sys.argv[1] == '--rename':     do_rename = True     del sys.argv[1] else:     do_rename = False      for filename in (line.rstrip() for line in fileinput.input()):     output _ = Popen(['file' '-bi' filename] stdout=PIPE).communicate()     mime = output.split(';' 1)[0].lower().strip()     ext = mimetypes.guess_extension(mime strict=False)     if ext is None:         ext = os.path.extsep + 'undefined'     filename_ext = filename + ext     print filename_ext     if do_rename:        os.rename(filename filename_ext)  #!/usr/bin/env python """It is a `filename -&gt; filename.ext` filter.      `ext` is mime-based. """ # Mapping of mime-types to extensions is taken form here: # http://as3corelib.googlecode.com/svn/trunk/src/com/adobe/net/MimeTypeMap.as mime2exts_list = [     ["application/andrew-inset""ez"]     ["application/atom+xml""atom"]     ["application/mac-binhex40""hqx"]     ["application/mac-compactpro""cpt"]     ["application/mathml+xml""mathml"]     ["application/msword""doc"]     ["application/octet-stream""bin""dms""lha""lzh""exe""class""so""dll""dmg"]     ["application/oda""oda"]     ["application/ogg""ogg"]     ["application/pdf""pdf"]     ["application/postscript""ai""eps""ps"]     ["application/rdf+xml""rdf"]     ["application/smil""smi""smil"]     ["application/srgs""gram"]     ["application/srgs+xml""grxml"]     ["application/vnd.adobe.apollo-application-installer-package+zip""air"]     ["application/vnd.mif""mif"]     ["application/vnd.mozilla.xul+xml""xul"]     ["application/vnd.ms-excel""xls"]     ["application/vnd.ms-powerpoint""ppt"]     ["application/vnd.rn-realmedia""rm"]     ["application/vnd.wap.wbxml""wbxml"]     ["application/vnd.wap.wmlc""wmlc"]     ["application/vnd.wap.wmlscriptc""wmlsc"]     ["application/voicexml+xml""vxml"]     ["application/x-bcpio""bcpio"]     ["application/x-cdlink""vcd"]     ["application/x-chess-pgn""pgn"]     ["application/x-cpio""cpio"]     ["application/x-csh""csh"]     ["application/x-director""dcr""dir""dxr"]     ["application/x-dvi""dvi"]     ["application/x-futuresplash""spl"]     ["application/x-gtar""gtar"]     ["application/x-hdf""hdf"]     ["application/x-javascript""js"]     ["application/x-koan""skp""skd""skt""skm"]     ["application/x-latex""latex"]     ["application/x-netcdf""nc""cdf"]     ["application/x-sh""sh"]     ["application/x-shar""shar"]     ["application/x-shockwave-flash""swf"]     ["application/x-stuffit""sit"]     ["application/x-sv4cpio""sv4cpio"]     ["application/x-sv4crc""sv4crc"]     ["application/x-tar""tar"]     ["application/x-tcl""tcl"]     ["application/x-tex""tex"]     ["application/x-texinfo""texinfo""texi"]     ["application/x-troff""t""tr""roff"]     ["application/x-troff-man""man"]     ["application/x-troff-me""me"]     ["application/x-troff-ms""ms"]     ["application/x-ustar""ustar"]     ["application/x-wais-source""src"]     ["application/xhtml+xml""xhtml""xht"]     ["application/xml""xml""xsl"]     ["application/xml-dtd""dtd"]     ["application/xslt+xml""xslt"]     ["application/zip""zip"]     ["audio/basic""au""snd"]     ["audio/midi""mid""midi""kar"]     ["audio/mpeg""mp3""mpga""mp2"]     ["audio/x-aiff""aif""aiff""aifc"]     ["audio/x-mpegurl""m3u"]     ["audio/x-pn-realaudio""ram""ra"]     ["audio/x-wav""wav"]     ["chemical/x-pdb""pdb"]     ["chemical/x-xyz""xyz"]     ["image/bmp""bmp"]     ["image/cgm""cgm"]     ["image/gif""gif"]     ["image/ief""ief"]     ["image/jpeg""jpg""jpeg""jpe"]     ["image/png""png"]     ["image/svg+xml""svg"]     ["image/tiff""tiff""tif"]     ["image/vnd.djvu""djvu""djv"]     ["image/vnd.wap.wbmp""wbmp"]     ["image/x-cmu-raster""ras"]     ["image/x-icon""ico"]     ["image/x-portable-anymap""pnm"]     ["image/x-portable-bitmap""pbm"]     ["image/x-portable-graymap""pgm"]     ["image/x-portable-pixmap""ppm"]     ["image/x-rgb""rgb"]     ["image/x-xbitmap""xbm"]     ["image/x-xpixmap""xpm"]     ["image/x-xwindowdump""xwd"]     ["model/iges""igs""iges"]     ["model/mesh""msh""mesh""silo"]     ["model/vrml""wrl""vrml"]     ["text/calendar""ics""ifb"]     ["text/css""css"]     ["text/html""html""htm"]     ["text/plain""txt""asc"]     ["text/richtext""rtx"]     ["text/rtf""rtf"]     ["text/sgml""sgml""sgm"]     ["text/tab-separated-values""tsv"]     ["text/vnd.wap.wml""wml"]     ["text/vnd.wap.wmlscript""wmls"]     ["text/x-setext""etx"]     ["video/mpeg""mpg""mpeg""mpe"]     ["video/quicktime""mov""qt"]     ["video/vnd.mpegurl""m4u""mxu"]     ["video/x-flv""flv"]     ["video/x-msvideo""avi"]     ["video/x-sgi-movie""movie"]     ["x-conference/x-cooltalk""ice"]]  #NOTE: take only the first extension mime2ext = dict(x[:2] for x in mime2exts_list)  if __name__ == '__main__':     import fileinput os.path     from subprocess import Popen PIPE      for filename in (line.rstrip() for line in fileinput.input()):         output _ = Popen(['file' '-bi' filename] stdout=PIPE).communicate()         mime = output.split(';' 1)[0].lower().strip()         print filename + os.path.extsep + mime2ext.get(mime 'undefined')  #NOTE: take only the first extension mime2ext = {} for x in mime2exts_list:     mime2ext[x[0]] = x[1]  if __name__ == '__main__':     import os     import sys      # this version supports only stdin (part of fileinput.input() functionality)     lines = sys.stdin.read().split('\n')     for line in lines:         filename = line.rstrip()         output = os.popen('file -bi ' + filename).read()                 mime = output.split(';')[0].lower().strip()         try: ext = mime2ext[mime]         except KeyError:              ext = 'undefined'         print filename + '.' + ext  
cars = CarModel.objects.all() for op in self.cleaned_data['options']:     cars = cars.filter((op True))  
django.contrib.contenttypes Favorite from django.db import models from django.contrib.auth.models import User from django.contrib.contenttypes.models import ContentType from django.contrib.contenttypes import generic  class Favorite(models.Model):     user = models.ForeignKey(User)     content_type = models.ForeignKey(ContentType)     object_id = models.PositiveIntegerField()     content_object = generic.GenericForeignKey('content_type' 'object_id')  Favorite Favorite content_type object_id 
set smartindent  set cindent  
dict.get(key default) hasattr getattr val = getattr(obj 'attr_to_check' default_value)  default_value False 
from timeit import Timer  def find_invpow(xn):     """Finds the integer component of the n'th root of x     an integer such that y ** n &lt;= x &lt; (y + 1) ** n.     """     high = 1     while high ** n &lt; x:         high *= 2     low = high/2     while low &lt; high:         mid = (low + high) // 2         if low &lt; mid and mid**n &lt; x:             low = mid         elif high &gt; mid and mid**n &gt; x:             high = mid         else:             return mid     return mid + 1  def find_invpowAlt(xn):     """Finds the integer component of the n'th root of x     an integer such that y ** n &lt;= x &lt; (y + 1) ** n.     """     low = 10 ** (len(str(x)) / n)     high = low * 10      while low &lt; high:         mid = (low + high) // 2         if low &lt; mid and mid**n &lt; x:             low = mid         elif high &gt; mid and mid**n &gt; x:             high = mid         else:             return mid     return mid + 1  x = 237734537465873465 n = 5 tests = 10000  print "Norm" Timer('find_invpow(xn)' 'from __main__ import find_invpow xn').timeit(number=tests) print "Alt" Timer('find_invpowAlt(xn)' 'from __main__ import find_invpowAlt xn').timeit(number=tests)  
re.findall(r"Test([0-9.]*[0-9]+)" text)  re.findall(r"Test([\d.]*\d+)" text)  [] . 
@classmethod 
hello hi hi(xy) good hello good hello good hi good hi hello hello def hello(xy):     fordf150 = hi(yx)     "then do somethingsand use the variable 'fordf150'."     return something  def hi( ix iy ):     "compute some value good."     return good  hello( 2 3) hello hello x 2 hello y 3 hello fordf150 = hi( y x ) y x hi hi ix 3 hi iy 2 hi good 3.1415926 hi return hi good 3.1415926 hi good ix iy 3.1415926 hi hello fordf150 = hi( y x ) y x hi 3.1415926 fordf150 hi 3.1415926 hello something 2.718281828459045 hello return hello something 2.718281828459045 fordf150 something x y 2.718281828459045 hello hello 
number_neighbours neighbours+=1 UnboundLocalError: local variable 'neighbours' referenced before assignment += neighbours neighbours neighbours = 0 
type(name bases dict) op = type("MyOptionParser" (OptionParserobject) {"foo": lambda self: "foo" }) op().foo()  object 
%d %d %d{dd MMM yyyy HH:mm:ssSSS} 
a = pexpect.spawn('program' env = {"TERM": "dumb"})  import os os.environ["TERM"] = "dumb"  
subprocess.Popen "command1; command2; command3"  subprocess.Popen """ command1 command2 command3 """  class Command( object ):     def __init__( self text ):         self.text = text     def execute( self ):         self.proc= subprocess.Popen( ... self.text ... )         self.proc.wait()  class CommandSequence( Command ):     def __init__( self *steps ):         self.steps = steps     def execute( self ):         for s in self.steps:             s.execute()  
if a.count( "foo" ) != len(a)  if a.count( a[0] ) != len(a)  
class Double:         def run(selfx):             return x*2  class Triple:     def run(selfx):         return x*3  def createMultiplier(n):     class Multiply:         def run(selfx):             return x*n     return Multiply  class Library:     def __init__(selfc):         self.c = c()     def Op(selfval):         return self.c.run(val)  op1 = Double op2 = Triple op3 = createMultiplier(5)  lib1 = Library(op1) lib2 = Library(op2) lib3 = Library(op3)  print lib1.Op(2) print lib2.Op(2) print lib3.Op(2)  
  missingParen=re.compile(r"^\(\d$")  
(1234 (123456 (1234......5 (1234.5 (123456789012 (01234 (123.4X [-+]?[$]?(0|[1-9]\d*|[1-9]\d{02}(\d{3})*)(\.\d+)? | (?!...) (?!\([$\d.]+\)) 
  a--t  / \  c   r  \   o--w  
import argparse   def main():     arger = argparse.ArgumentParser()      # Arguments for top-level e.g "subcmds.py -v"     arger.add_argument("-v" "--verbose" action="count" default=0)      subparsers = arger.add_subparsers(dest="command")      # Make parser for "subcmds.py info ..."     info_parser = subparsers.add_parser("info")     info_parser.add_argument("-m" "--moo" dest="moo")      # Make parser for "subcmds.py create ..."     create_parser = subparsers.add_parser("create")     create_parser.add_argument("name")     create_parser.add_argument("additional" nargs="*")      # Parse     opts = arger.parse_args()      # Print option object for debug     print opts      if opts.command == "info":         print "Info command"         print "--moo was %s" % opts.moo      elif opts.command == "create":         print "Creating %s" % opts.name         print "Additional: %s" % opts.additional      else:         # argparse will error on unexpected commands but         # in case we mistype one of the elif statements...         raise ValueError("Unhandled command %s" % opts.command)   if __name__ == '__main__':     main()  $ python subcmds.py create myapp v1 blah Namespace(additional=['v1' 'blah'] command='create' name='myapp' verbose=0) Creating myapp Additional: ['v1' 'blah'] $ python subcmds.py info --moo usage: subcmds.py info [-h] [-m MOO] subcmds.py info: error: argument -m/--moo: expected one argument $ python subcmds.py info --moo 1 Namespace(command='info' moo='1' verbose=0) Info command --moo was 1  
^\s*(?P&lt;NAME&gt;\w\d{7}|R1_(?:\d{6}_){2})(01f\.foo|\.(?:bar|goo|moo|roo))$  "R1_" "_" "01f.foo" "." "bar" "goo" "moo" "roo" ^\s*(?P&lt;NAME&gt;\w\d{7}01f|R1_(?:\d{6}_){2})\.(?:foo|bar|goo|moo|roo)$  "R1_" "_" "foo" "bar" "goo" "moo" "roo" 
style = wx.LB_EXTENDED ListBox GetSelections 
next(iter(your_list) None)  your_list None next(iter(your_list or []) None)  def get_first(iterable default=None):     if iterable:         for item in iterable:             return item     return default  x = get_first(get_first_list()) if x:     ... y = get_first(get_second_list()) if y:     ...  for x in get_first_list() or []:     # process x     break # process at most one item for y in get_second_list() or []:     # process y     break  break for x in yield_first(get_first_list()):     x # process x for y in yield_first(get_second_list()):     y # process y  def yield_first(iterable):     for item in iterable or []:         yield item         return  
&gt;&gt;&gt; d = {"x":2 "h":15 "a":2222} &gt;&gt;&gt; it = iter(sorted(d.iteritems())) &gt;&gt;&gt; it.next() ('a' 2222) &gt;&gt;&gt; it.next() ('h' 15) &gt;&gt;&gt; it.next() ('x' 2) &gt;&gt;&gt;  for key value in d.iteritems(): ... &gt;&gt;&gt; d = {"x":2 "h":15 "a":2222} &gt;&gt;&gt; for key value in sorted(d.iteritems()): &gt;&gt;&gt;     print(key value) ('a' 2222) ('h' 15) ('x' 2) &gt;&gt;&gt;  d.items() d.iteritems() 
 [i for ix in enumerate(testlist) if x == 1]  &gt;&gt;&gt; testlist [1 2 3 5 3 1 2 1 6] &gt;&gt;&gt; [i for ix in enumerate(testlist) if x == 1] [0 5 7]  &gt;&gt;&gt; for i in [i for ix in enumerate(testlist) if x == 1]: ...     print i ...  0 5 7  &gt;&gt;&gt; (i for ix in enumerate(testlist) if x == 1) &lt;generator object at 0x6b508&gt; &gt;&gt;&gt; for i in (i for ix in enumerate(testlist) if x == 1): ...     print i ...  0 5 7  &gt;&gt;&gt; gen = (i for ix in enumerate(testlist) if x == 1) &gt;&gt;&gt; for i in gen: print i ...  0 5 7  
def 1st_funtion(a_matrixA)     #apply some rule on a_matrixA and return a new matrix(next state of the cell)     return new_matrix  def 2nd_funtion(a_matrixBrepeat_times)      for i in range(repeat_times):         a_matrixB = 1st_funtion(a_matrixB)     return a_matrixB  
iterations = 0; tmp = origin_matrix;  do     tmp = operation(tmp);     iterations += 1; while tmp != origin_matrix;  return iterations;  while True:     tmp = operation(tmp)     iterations += 1      if tmp == origin_matrix:         break  # Or you could return here.  matrix = origin_matrix  for i in range(N_times):     matrix = operation(matrix)  return matrix  
def my_func(working_list=None):     if working_list is None:          working_list = []      working_list.append("a")     print(working_list)  None 
test nosetest 
import sys print "foo" sys.stdout.flush()  
python -h $_ 
&gt;&gt;&gt; import re &gt;&gt;&gt; re.findall(r"[\w']+|[.!?;]" "Hello I'm a string!") ['Hello' '' "I'm" 'a' 'string' '!']  
Answer Answer_Risk resident Answer_A resident == None Answer 
my_array = numpy.empty(predict_length()) for i el in enumerate(gimme()): my_array[i] = el  my_array = numpy.array(list(gimme()))  length = sum(1 for el in gimme()) my_array = numpy.empty(length) for i el in enumerate(gimme()): my_array[i] = el  
#!/usr/bin/python2.5 from email.utils import parsedate import mailbox  def extract_date(email):     date = email.get('Date')     return parsedate(date)  the_mailbox = mailbox.mbox('/path/to/mbox') sorted_mails = sorted(the_mailbox key=extract_date) the_mailbox.update(enumerate(sorted_mails)) the_mailbox.flush()  
&gt;&gt;&gt; import systypesxml &gt;&gt;&gt; xml.config = sys.modules['xml.config'] = types.ModuleType('xml.config') &gt;&gt;&gt; import xml.config &gt;&gt;&gt; from xml import config &gt;&gt;&gt; from xml import config as x &gt;&gt;&gt; x &lt;module 'xml.config' (built-in)&gt;  
def determine_period(universe_array):     period=0     tmp=universe_array     while True:         tmp=apply_rules(tmp)#aplly_rules is a another function         period+=1         if numpy.array_equal(tmpuniverse_array) is True:             return period         if period&gt;12:  #i wrote this line to stop it..but seems its doesnt work....help..             return 0         else:                return period  break while True break return def determine_period(universe_array):     period=0     tmp=universe_array     while True:         tmp=apply_rules(tmp)#aplly_rules is a another function         period+=1         if numpy.array_equal(tmpuniverse_array) is True:             break         if period&gt;12:  #i wrote this line to stop it..but seems its doesnt work....help..             period = 0             break      return period  
"add \x93Monitoring\x94 to list".decode("cp1252" "ignore")  .encode 
r._dtstart = list(r)[-1] &gt;&gt;&gt; from dateutil.rrule import * &gt;&gt;&gt; import datetime  &gt;&gt;&gt; r = rrule(WEEKLY byweekday=SA count=10 dtstart=datetime.datetime(20081001)) &gt;&gt;&gt; print list(r) [datetime.datetime(2008 10 4 0 0) datetime.datetime(2008 10 11 0 0) datetime.datetime(2008 10 18 0 0) datetime.datetime(2008 10 25 0 0) datetime.datetime(2008 11 1 0 0) datetime.datetime(2008 11 8 0 0) datetime.datetime(2008 11 15 0 0) datetime.datetime(2008 11 22 0 0) datetime.datetime(2008 11 29 0 0) datetime.datetime(2008 12 6 0 0)] &gt;&gt;&gt; r._dtstart = r[-1] &gt;&gt;&gt; print list(r) [datetime.datetime(2008 12 6 0 0) datetime.datetime(2008 12 13 0 0) datetime.datetime(2008 12 20 0 0) datetime.datetime(2008 12 27 0 0) datetime.datetime(2009 1 3 0 0) datetime.datetime(2009 1 10 0 0) datetime.datetime(2009 1 17 0 0) datetime.datetime(2009 1 24 0 0) datetime.datetime(2009 1 31 0 0) datetime.datetime(2009 2 7 0 0)]  &gt;&gt;&gt; r = rrule(WEEKLY byweekday=SA count=10 dtstart=datetime.datetime(20081001)) &gt;&gt;&gt; r2 = rrule(WEEKLY byweekday=SA count=r.count() dtstart=r[-1] + datetime.timedelta(days=1)) &gt;&gt;&gt; print list(r) [datetime.datetime(2008 10 4 0 0) datetime.datetime(2008 10 11 0 0) datetime.datetime(2008 10 18 0 0) datetime.datetime(2008 10 25 0 0) datetime.datetime(2008 11 1 0 0) datetime.datetime(2008 11 8 0 0) datetime.datetime(2008 11 15 0 0) datetime.datetime(2008 11 22 0 0) datetime.datetime(2008 11 29 0 0) datetime.datetime(2008 12 6 0 0)] &gt;&gt;&gt; print list(r2) [datetime.datetime(2008 12 13 0 0) datetime.datetime(2008 12 20 0 0) datetime.datetime(2008 12 27 0 0) datetime.datetime(2009 1 3 0 0) datetime.datetime(2009 1 10 0 0) datetime.datetime(2009 1 17 0 0) datetime.datetime(2009 1 24 0 0) datetime.datetime(2009 1 31 0 0) datetime.datetime(2009 2 7 0 0) datetime.datetime(2009 2 14 0 0)]  _byweekday 
$SSH_ORIGINAL_COMMAND $ ssh username@host 'some command'  
&gt;&gt;&gt; d = {"stuff": "things"} &gt;&gt;&gt; d2 = d &gt;&gt;&gt; d = {} &gt;&gt;&gt; d2 {'stuff': 'things'} &gt;&gt;&gt; d = {"stuff": "things"} &gt;&gt;&gt; d2 = d &gt;&gt;&gt; d.clear() &gt;&gt;&gt; d2 {}  d = {} d d2 d.clear() d d2 
ColumnElement select([sql.expression.label('foo' table.c.x - table.c.y) ...])  
order_by result_exp = sqlalchemy.sql.expression.label('result'    ((test2_table.c.a * test2_table.c.b)     - (test2_table.c.x + test2_table.c.y)     / test2_table.c.z)) select([result_exp] from_obj=[test2_table] order_by="result")  
from_statement filter_by meta.Session.query(Location).from_statement(query).all()  
c c c = 3 global c  nonlocal c  c 
self.__dict__ __getattribute__ __getattribute__ object __getattribute__ class D(object):     def __init__(self):         self.test=20         self.test2=21     def __getattribute__(selfname):         if name=='test':             return 0.         else:             return object.__getattribute__(self name)  object __getattribute__ In [1]: from foo import *  In [2]: d = D()  In [3]: d.test Out[3]: 0.0  In [4]: d.test2 Out[4]: 21  
dir() globals() import types listOfClasses = [cls for cls in globals().values() if type(cls) == types.ClassType]  
&lt;stream/&gt; &lt;stream&gt;&lt;auth&gt;&lt;/auth&gt;&lt;/stream&gt; 
re.findall(r"([a-fA-F\d]{32})" data)  
import schedule import time  def job():     print("I'm working...")  schedule.every(10).minutes.do(job) schedule.every().hour.do(job) schedule.every().day.at("10:30").do(job)  while 1:     schedule.run_pending()     time.sleep(1)  
&gt;&gt;&gt; from datetime import datetime &gt;&gt;&gt; datetime.now(pytz.timezone("Australia/Melbourne")) \             .replace(hour=0 minute=0 second=0 microsecond=0) \             .astimezone(pytz.utc)  replace() &gt;&gt;&gt; now = datetime(2012 4 1 5 0 0 0 tzinfo=pytz.timezone("Australia/Melbourne")) &gt;&gt;&gt; print now 2012-04-01 05:00:00+10:00 &gt;&gt;&gt; print now.replace(hour=0) 2012-04-01 00:00:00+10:00 # wrong! midnight was at 2012-04-01 00:00:00+11:00 &gt;&gt;&gt; print datetime(2012 3 1 0 0 0 0 tzinfo=tz) 2012-03-01 00:00:00+10:00 # wrong again!  tz.localize() &gt;&gt;&gt; import pytz &gt;&gt;&gt; from datetime import datetime date time  &gt;&gt;&gt; tz = pytz.timezone("Australia/Melbourne") &gt;&gt;&gt; the_date = date(2012 4 1) # use date.today() here  &gt;&gt;&gt; midnight_without_tzinfo = datetime.combine(the_date time()) &gt;&gt;&gt; print midnight_without_tzinfo 2012-04-01 00:00:00  &gt;&gt;&gt; midnight_with_tzinfo = tz.localize(midnight_without_tzinfo) &gt;&gt;&gt; print midnight_with_tzinfo 2012-04-01 00:00:00+11:00  &gt;&gt;&gt; print midnight_with_tzinfo.astimezone(pytz.utc) 2012-03-31 13:00:00+00:00  
&gt;&gt;&gt; import re &gt;&gt;&gt; re.split('[ .]' 'a b.c') ['a' 'b' 'c']  
demo.py interactive.py ssh_stdin ssh_stdin.write stdin.write SSHClient.exec_command 
data = {} for i in range(0 10):   data['a%d' % i] = i  &gt;&gt;&gt;data {'a1': 1 'a0': 0 'a3': 3 'a2': 2 'a5': 5 'a4': 4 'a7': 7 'a6': 6 'a9': 9 'a8': 8}  
import itertools def findsubsets(Sm):     return set(itertools.combinations(S m))  
open IOError OSError read try:  raise OSError("hi mom") finally:  print "Hmmm"  
import os filename = "/etc/fstab" statbuf = os.stat(filename) print("Modification time: {}".format(statbuf.st_mtime))  
fcntl select asyncproc Queue.get_nowait() import sys from subprocess import PIPE Popen from threading  import Thread  try:     from queue import Queue Empty except ImportError:     from Queue import Queue Empty  # python 2.x  ON_POSIX = 'posix' in sys.builtin_module_names  def enqueue_output(out queue):     for line in iter(out.readline b''):         queue.put(line)     out.close()  p = Popen(['myprogram.exe'] stdout=PIPE bufsize=1 close_fds=ON_POSIX) q = Queue() t = Thread(target=enqueue_output args=(p.stdout q)) t.daemon = True # thread dies with the program t.start()  # ... do other things here  # read line without blocking try:  line = q.get_nowait() # or q.get(timeout=.1) except Empty:     print('no output yet') else: # got line     # ... do something with line  
StringIO ... import StringIO  buf = open("test.jpg" "rb").read() # buf = get_image_data() sbuf = StringIO.StringIO(buf)  image = wx.ImageFromStream(sbuf) ...  buf 
# vim: set syntax=python:  
&gt;&gt;&gt; import timeit &gt;&gt;&gt; def so_q_sub(n): ...  return "%s%s/%d" % (DOMAIN QUESTIONS n) ... &gt;&gt;&gt; so_q_sub(1000) 'http://stackoverflow.com/questions/1000' &gt;&gt;&gt; def so_q_cat(n): ...  return DOMAIN + QUESTIONS + '/' + str(n) ... &gt;&gt;&gt; so_q_cat(1000) 'http://stackoverflow.com/questions/1000' &gt;&gt;&gt; t1 = timeit.Timer('so_q_sub(1000)''from __main__ import so_q_sub') &gt;&gt;&gt; t2 = timeit.Timer('so_q_cat(1000)''from __main__ import so_q_cat') &gt;&gt;&gt; t1.timeit(number=10000000) 12.166618871951641 &gt;&gt;&gt; t2.timeit(number=10000000) 5.7813972166853773 &gt;&gt;&gt; t1.timeit(number=1) 1.103492206766532e-05 &gt;&gt;&gt; t2.timeit(number=1) 8.5206360154188587e-06  &gt;&gt;&gt; def so_q_tmp(n): ...  return "{d}{q}/{n}".format(d=DOMAINq=QUESTIONSn=n) ... &gt;&gt;&gt; so_q_tmp(1000) 'http://stackoverflow.com/questions/1000' &gt;&gt;&gt; t3= timeit.Timer('so_q_tmp(1000)''from __main__ import so_q_tmp') &gt;&gt;&gt; t3.timeit(number=10000000) 14.564135316080637  &gt;&gt;&gt; def so_q_join(n): ...  return ''.join([DOMAINQUESTIONS'/'str(n)]) ... &gt;&gt;&gt; so_q_join(1000) 'http://stackoverflow.com/questions/1000' &gt;&gt;&gt; t4= timeit.Timer('so_q_join(1000)''from __main__ import so_q_join') &gt;&gt;&gt; t4.timeit(number=10000000) 9.4431309007150048  
E0=zbc E1=2.3  a zbc E0 zbc exec('E%d="%s"' %(ia[i]))  E0="zbc" E1="2.3"  a 
def which(program):     import os     def is_exe(fpath):         return os.path.isfile(fpath) and os.access(fpath os.X_OK)      fpath fname = os.path.split(program)     if fpath:         if is_exe(program):             return program     else:         for path in os.environ["PATH"].split(os.pathsep):             exe_file = os.path.join(path program)             if is_exe(exe_file):                 return exe_file      return None  path.strip('"') 
import re  s="123 Some Road Name\nTown City\nCounty\nPA23 6NH\n123 Some Road Name\nTown City"\     "County\nPA2 6NH\n123 Some Road Name\nTown City\nCounty\nPA2Q 6NH"  #custom                                                                                                                                                print re.findall(r'\b[A-Z]{12}[0-9][A-Z0-9]? [0-9][ABD-HJLNP-UW-Z]{2}\b' s)  #regex from #http://en.wikipedia.orgwikiUK_postcodes#Validation                                                                                             print re.findall(r'[A-Z]{12}[0-9R][0-9A-Z]? [0-9][A-Z]{2}' s)  ['PA23 6NH' 'PA2 6NH' 'PA2Q 6NH'] ['PA23 6NH' 'PA2 6NH' 'PA2Q 6NH']  
from django.contrib.auth.models import User Permission from django.db.models import Q  perm = Permission.objects.get(codename='blogger')   users = User.objects.filter(Q(groups__permissions=perm) | Q(user_permissions=perm)).distinct()  
BaseException.__init__(self mess)  BaseClassName.methodname(self arguments) Exception BaseException 
collections.Mapping dict def value_list(x):     if isinstance(x dict):         return list(set(x.values()))     elif isinstance(x basestring):         return [x]     else:         return None  
&gt;&gt;&gt; a = "545.2222" &gt;&gt;&gt; float(a) 545.22220000000004 &gt;&gt;&gt; int(float(a)) 545  
Graphics class Graphics: SCREEN_SIZE = (640 480) def __init__(self Fullscreen = False Width = 640 Height = 480):     print "Graphics Init"     self.SCREEN_SIZE = (Width Height)     pygame.init()     if Fullscreen:         self.screen = pygame.display.set_mode(SCREEN_SIZE FULLSCREEN 32)         print "Fullscreen Initialized"     else:         self.screen = pygame.display.set_mode(SCREEN_SIZE 0 32)         print "Non-Fullscreen Initialized"  g= Graphics() # create an object # access the object's instance variables print "screen" g.screen g.screen= pygame.display.set_mode(SCREEN_SIZE FULLSCREEN 32)  g Graphics Graphics() Graphics.this Graphics.that 
import pygame from pygame.locals import * #This lets you use pygame's constants directly.  for event in pygame.event.get():     if event.type == MOUSEBUTTONDOWN:  #Better to seperate to a new if statement aswell since there's more buttons that can be clicked and makes for cleaner code.         if event.button == 1:             for object in clickableObjectsList:                 object.clickCheck(event.pos)  pygame.mouse.get_pos()  pygame.mouse.get_pressed().  
def element_to_string(element):     s = element.text or ""     for sub_element in element:         s += etree.tostring(sub_element)     s += element.tail     return s  
attrs def walkDict( aDict visitor path=() ):     for  k in aDict:         if k == 'attrs':             visitor( path aDict[k] )         elif type(aDict[k]) != dict:             pass         else:             walkDict( aDict[k] visitor path+(k) )  def printMe( path element ):     print path element  def filterFor( path element ):     if element['id'] == '4130-2-2':         print path element  walkDict( myDict filterFor )  yield path aDict[k] for path attrDict in walkDictIter( aDict ):     # process attrDict...  
matches = [] biglist1_indexed = {}  for item in biglist1:     biglist1_indexed[(item["transaction"] item["date"])] = item  for item in biglist2:     if (item["transaction"] item["date"]) in biglist1_indexed:         matches.append(item)  
@measured measured @ measured import time  def measured(orig_function):     # When you decorate a function the decorator func is called     # with the original function as the first argument.     # You return a new modified function. This returned function     # is what the to-be-decorated function becomes.      print "INFO: This from the decorator function"     print "INFO: I am about to decorate %s" % (orig_function)      # This is what some_func will become:     def newfunc(*args **kwargs):         print "INFO: This is the decorated function being called"          start = time.time()          # Execute the old function passing arguments         orig_func_return = orig_function(*args **kwargs)         end = time.time()          print "Function took %s seconds to execute" % (end - start)         return orig_func_return # return the output of the original function      # Return the modified function which..     return newfunc  @measured def some_func(arg1):     print "This is my original function! Argument was %s" % arg1  # We call the now decorated function.. some_func(123)  #.. and we should get (minus the INFO messages): This is my original function! Argument was 123 # Function took 7.86781311035e-06 to execute  def some_func():     print "This is my original function!"  some_func = measured(some_func)  staticmethod measured &gt;&gt;&gt; type(measured) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; NameError: name 'measured' is not defined  import from blah import * import * grep -R def measured * 
const SANE_Device *** SANE_get_devices() const SANE_Device ** const SANE_Device **device_list; SANE_get_devices(&amp;device_list local_only);  // check return value // Now device_list[0] points to the first device // device_list[1] points to the second device etc. // Once you hit a NULL pointer that's the end of the list: int num_devices = 0; while(device_list[num_devices] != NULL)     num_devices++; // num_devices now stores the total number of devices  byref pointer POINTER // SANE_Device declared as you had it devices = POINTER(POINTER(SANE_Device))()  // devices is a NULL pointer to a pointer to a SANE_Device status = libsane.sane_get_devices(byref(devices) c_int(0)) if status != successful:   // replace this by whatever success is     print error else:     num_devices = 0     // Convert NULL-terminated C list into Python list     device_list = []     while devices[num_devices]:         device_list.append(devices[num_devices].contents)  // use .contents here since each entry in the C list is itself a pointer         num_devices += 1     print device_list  SANE_get_devices 
function myfunc(){   var myself = arguments.callee;   myself.anotherfunc(); }  myfunc.avalue=5;  myfunc.anotherfunc=function(){   alert(this.avalue); }  myfunc(); //Alerts 5 myfunc.anotherfunc(); //Alerts 5  
import itertools  def bicycle(iterable repeat=1):     for item in itertools.cycle(iterable):         for _ in xrange(repeat):             yield item  c = bicycle([1234] 2) print [c.next() for _ in xrange(10)]  
any &gt;&gt;&gt; any([True True False]) True &gt;&gt;&gt; any([False False False]) False &gt;&gt;&gt; any([False False True]) True  any reduce &gt;&gt;&gt; def iam(result): ...  # Pretend this is expensive. ...  print "iam(%r)" % result ...  return result ...  &gt;&gt;&gt; any((iam(x) for x in [False True False])) iam(False) iam(True) True &gt;&gt;&gt; reduce(lambda xy: x or y (iam(x) for x in [False True False])) iam(False) iam(True) iam(False) True  any() all() def any(S):     for x in S:         if x:             return True     return False  def all(S):     for x in S:         if not x:             return False     return True  
conn.commit() close 
putdata() &gt;&gt;&gt; pic.putdata(a) Traceback (most recent call last):   File "...blablabla.../PIL/Image.py" line 1185 in putdata     self.im.putdata(data scale offset) SystemError: new style getargs format but argument is not a tuple  putdata &gt;&gt;&gt; data = list(tuple(pixel) for pixel in pix) &gt;&gt;&gt; pic.putdata(data)  &gt;&gt;&gt; pix = numpy.array(pic)  pic.putdata(pix) Image.fromarray(pix) 
def collision(x1 y1 x2 y2):     return x1 == x2 or y1 == y2 or abs(x1-x2) == abs(y1-y2)  
(str(i)[-2:] == '.0' and str(i)[:-2] or str(i) for i in ...)  
patch mv something.py py2.6_something.py 2to3 py2.6_something.py | patch -o something.py  
try:     x = float( someString ) except ValueError e:     # someString was NOT floating-point what now?  
import re  PHONE_RE = re.compile('([(]{01}[2-9]\d{2}[)]{01}[-_. ]{01}[2-9]\d{2}[-_.  ]{01}\d{4})') NON_NUMERIC = re.compile('\D')  def numbers2links(s):     def makelink(mo):       raw_number = mo.group()       number = NON_NUMERIC.sub("" raw_number)       return '&lt;a href="tel:%s"&gt;%s&lt;/a&gt;' % (number raw_number)     return PHONE_RE.sub(makelink s)   print numbers2links("Ghost Busters at (555) 423-2368! How about this one: 555 456 7890! 555-456-7893 is where its at.")  string.digits re.sub() 
t = timeit.Timer('compare(p1 p2)' "from __main__ import compare; p1=%r; p2=%r" % (str1str2))  %r 
&gt;&gt;&gt; os.path.expandvars('$C/test/testing') '/stackoverflow/test/testing'  
… if form.is_valid():     client_mod = form.save(commit=False)     client_mod.save()     for groupe in form.cleaned_data.get('groupes'):         clientgroupe = ClientGroupe(client=client_mod groupe=groupe)         clientgroupe.save()     …  
for p in Person.objects.all():     print "person" p     for h in p.home_address_set.all():          print " home" h          for ph in h.phone_set.all():              print "  phone" ph  {% for p on people %}     {% for h in p.home_address_set.all %}         {% fpr ph in h.phone_set.all %}         {% endfor %}     {% endfor %} {% endfor %}   
import sys major minor micro releaselevel serial = sys.version_info if (majorminor) &lt;= (25):     # provide advice on getting version 2.6 or higher.     sys.exit(2) import app app.main()  __future__ from __future__ import print_function import __future__ sys if hasattr(__future__ 'print_function'):      # Could also check sys.version_info &gt;= __future__. print_function.optional     import app     app.main() else:     print "instructions for upgrading"  
__del__ 
def module_exists(module_name):     try:         mod = __import__(module_name)     except ImportError:         return False     else:         return True  if module_exists('simplejson'):     import simplejson as json elif module_exists('json'):     import json elif module_exists('django.utils'):     from django.utils import simplejson as json else:     raise ImportError('Requires either simplejson Python 2.6 or django.utils')  
RequestContext password_reset template_name def password_reset(request is_admin_site=False              template_name='registration/password_reset_form.html'             email_template_name='registration/password_reset_email.html'             password_reset_form=PasswordResetForm              token_generator=default_token_generator             post_reset_redirect=None):  from django.conf.urls.defaults import * from django.contrib.auth.views import password_reset  urlpatterns = patterns(''      (r'^/accounts/password/reset/$' password_reset {'template_name': 'my_templates/password_reset.html'})      ... )  django.contrib.auth.views.password_reset '/accounts/password/reset' template_name = 'my_templates/password_reset.html' password_reset TemplateSyntax context template_name 
import email import poplib import random from cStringIO import StringIO from email.generator import Generator  pop = poplib.POP3(server)  mail_count = len(pop.list()[1])  for message_num in xrange(mail_count):     message = "\r\n".join(pop.retr(message_num)[1])     message = email.message_from_string(message)      out_file = StringIO()     message_gen = Generator(out_file mangle_from_=False maxheaderlen=60)     message_gen.flatten(message)     message_text = out_file.getvalue()      filename = "%s.email" % random.randint(1100)     email_file = open(filename "w")     email_file.write(message_text)     email_file.close()  
%config = (     'color' =&gt; 'red'     'numbers' =&gt; [5 8]     qr/^spam/ =&gt; 'eggs' );  config = {     'color' : 'red'     'numbers' : [5 8]     re.compile( "^spam" ) : 'eggs' }  %variable = ( variable = { ); } variable =&gt; value variable : value qr/.../ =&gt; re.compile( r"..." ) : value dict dict __getitem__ class PerlLikeDict( dict ):     pattern_type= type(re.compile(""))     def __getitem__( self key ):         if key in self:             return super( PerlLikeDict self ).__getitem__( key )         for k in self:             if type(k) == self.pattern_type:                 if k.match(key):                     return self[k]         raise KeyError( "key %r not found" % ( key ) )  &gt;&gt;&gt; pat= re.compile( "hi" ) &gt;&gt;&gt; a = { pat : 'eggs' } # native dict no features. &gt;&gt;&gt; x=PerlLikeDict( a ) &gt;&gt;&gt; x['b']= 'c' &gt;&gt;&gt; x {&lt;_sre.SRE_Pattern object at 0x75250&gt;: 'eggs' 'b': 'c'} &gt;&gt;&gt; x['b'] 'c' &gt;&gt;&gt; x['ji'] Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;stdin&gt;" line 10 in __getitem__ KeyError: "key 'ji' not found" &gt;&gt;&gt; x['hi'] 'eggs'  
class Number:      def __init__(self number):         self.number = number   n1 = Number(1) n2 = Number(1)  n1 == n2 # False -- oops  id(n1) # 140400634555856 id(n2) # 140400634555920  __eq__ def __eq__(self other):     """Overrides the default implementation"""     if isinstance(other Number):         return self.number == other.number     return False   n1 == n2 # True n1 != n2 # True in Python 2 -- oops False in Python 3  __ne__ x==y x!=y __eq__() __ne__() def __ne__(self other):     """Overrides the default implementation (unnecessary in Python 3)"""     return not self.__eq__(other)   n1 == n2 # True n1 != n2 # False  __ne__() __eq__() NotImplemented (x&lt;y or x==y) x&lt;=y class SubNumber(Number):     pass   n3 = SubNumber(1)  n1 == n3 # False for classic-style classes -- oops True for new-style classes n3 == n1 # True n1 != n3 # True for classic-style classes -- oops False for new-style classes n3 != n1 # False  object class A: class A(): class A(B): B object class A(object) class A(B): B class A: class A(object): class A(B): Number n1 == n3 n1.__eq__ n3 == n1 n3.__eq__ n1 != n3 n1.__ne__ n3 != n1 n3.__ne__ Number n1 == n3 n3 == n1 n3.__eq__ n1 != n3 n3 != n1 n3.__ne__ == != __eq__ __ne__ NotImplemented NotImplemented __lt__() __gt__() __le__() __ge__() __eq__() __ne__() def __eq__(self other):     """Overrides the default implementation"""     if isinstance(other Number):         return self.number == other.number     return NotImplemented  def __ne__(self other):     """Overrides the default implementation (unnecessary in Python 3)"""     x = self.__eq__(other)     if x is NotImplemented:         return NotImplemented     return not x  NotImplemented False == != len(set([n1 n2 n3])) # 3 -- oops  def __hash__(self):     """Overrides the default implementation"""     return hash(tuple(sorted(self.__dict__.items())))  len(set([n1 n2 n3])) # 1  class Number:      def __init__(self number):         self.number = number      def __eq__(self other):         """Overrides the default implementation"""         if isinstance(other Number):             return self.number == other.number         return NotImplemented      def __ne__(self other):         """Overrides the default implementation (unnecessary in Python 3)"""         x = self.__eq__(other)         if x is not NotImplemented:             return not x         return NotImplemented      def __hash__(self):         """Overrides the default implementation"""         return hash(tuple(sorted(self.__dict__.items())))   class SubNumber(Number):     pass   n1 = Number(1) n2 = Number(1) n3 = SubNumber(1) n4 = SubNumber(4)  assert n1 == n2 assert n2 == n1 assert not n1 != n2 assert not n2 != n1  assert n1 == n3 assert n3 == n1 assert not n1 != n3 assert not n3 != n1  assert not n1 == n4 assert not n4 == n1 assert n1 != n4 assert n4 != n1  assert len(set([n1 n2 n3 ])) == 1 assert len(set([n1 n2 n3 n4])) == 2  
def count_iterable(i):     return sum(1 for e in i)  __len__ 
active = [r for r in self.updatePageRadio.get_group() if r.get_active()][0]  my_actions[active]()  r1 = gtk.RadioButton(None label='Cat') # this has no group it is the first r2 = gtk.RadioButton(r1 label='Mouse') # use the first radio                                         # button as the group argument r3 = gtk.RadioButton(r1 label='Dog')   # again use r1  active_radios = [r for r in r1.get_group() if r.get_active()]  
optarg.split('') 
__init__ def __init__(self parent id title gamePlayer ):     ...etc...  
foo() class foo:         def __init__(self):                 self.var_a = 2                 self.var_b = 3          def __call__(self x):                 return self.var_a + self.var_b + x  localClosure = foo()  # Local closure is now "return 2 + 3 + x" a = localClosure(1) # 2 + 3 + 1 == 6  # DO SOME MAGIC HERE TO TURN "var_a" of the closure into 0 # ...but what magic? Is this even possible? localClosure.var_a = 0  # Local closure is now "return 0 + 3 + x" b = localClosure(1) # 0 + 3 +1 == 4  localClosure 
def fib():     a b = 0 1     while True:         a b = b a + b         yield a  next() 
re.sub(ur'[\u064B-\u0652\u06D4\u0670\u0674\u06D5-\u06ED]+' '' ...)  
threading.Lock &gt;&gt;&gt; import threading &gt;&gt;&gt; threading.Lock &lt;built-in function allocate_lock&gt; &gt;&gt;&gt; type(threading.Lock) &lt;type 'builtin_function_or_method'&gt; &gt;&gt;&gt; x=threading.Lock() &gt;&gt;&gt; type(x) &lt;type 'thread.lock'&gt; &gt;&gt;&gt; dir(x) ['__enter__' '__exit__' 'acquire' 'acquire_lock' 'locked' 'locked_lock' 'release' 'release_lock'] &gt;&gt;&gt;  
boby print type(boby) class Dog:     def bark(self):         print "WOOF"  class BobyDog( Dog ):     def bark( self ):         print "WoOoOoF!!"  otherDog= Dog() otherDog.bark() # WOOF  boby = BobyDog() boby.bark() # WoOoOoF!!  
class RecipeContent(models.Model):   ...   def __unicode__(self):     # You can access ForeignKey properties through the field name!     return self.recipe.name  
import urllib.request # Create an OpenerDirector with support for Basic HTTP Authentication... auth_handler = urllib.request.HTTPBasicAuthHandler() auth_handler.add_password(realm='PDQ Application'                           uri='https://mahler:8092/site-updates.py'                           user='klem'                           passwd='kadidd!ehopper') opener = urllib.request.build_opener(auth_handler) # ...and install it globally so it can be used with urlopen. urllib.request.install_opener(opener) urllib.request.urlopen('http://www.example.com/login.html')  
inspect.isclass &gt;&gt;&gt; import inspect &gt;&gt;&gt; class X(object): ...     pass ...  &gt;&gt;&gt; inspect.isclass(X) True  &gt;&gt;&gt; x = X() &gt;&gt;&gt; isinstance(x X) True &gt;&gt;&gt; y = 25 &gt;&gt;&gt; isinstance(y X) False  
super super super() mro() __new__ super(MyType cls) type type.__new__ __call__ cls.instance __new__ __new__ class MyMeta(type):     def __new__(cls name bases dct):         print "meta: creating %s %s" % (name bases)         return type.__new__(cls name bases dct)      def meta_meth(cls):         print "MyMeta.meta_meth"      __repr__ = lambda c: c.__name__  class A(object):     __metaclass__ = MyMeta     def __init__(self):         super(A self).__init__()         print "A init"      def meth(self):         print "A.meth"  class B(object):     __metaclass__ = MyMeta     def __init__(self):         super(B self).__init__()         print "B init"      def meth(self):         print "B.meth"  class C(A B):     __metaclass__ = MyMeta     def __init__(self):         super(C self).__init__()         print "C init"  &gt;&gt;&gt; c_obj = C() meta: creating A (&lt;type 'object'&gt;) meta: creating B (&lt;type 'object'&gt;) meta: creating C (A B) B init A init C init &gt;&gt;&gt; c_obj.meth() A.meth &gt;&gt;&gt; C.meta_meth() MyMeta.meta_meth &gt;&gt;&gt; c_obj.meta_meth() Traceback (most recent call last):   File "mro.py" line 38 in &lt;module&gt;     c_obj.meta_meth() AttributeError: 'C' object has no attribute 'meta_meth'  
returnvalue = false if len(a) == len(b)    if len(a) &lt; threshold       returnvalue = (sorted(a) == sorted(b))    else        returnvalue = naminsmethod(a b) return returnvalue  
x = mystuff() print x.average(91827)  TypeError: average() takes exactly 3 arguments (4 given)  
import sys import win32com.client   shell = win32com.client.Dispatch("WScript.Shell") shortcut = shell.CreateShortCut("t:\\test.lnk") shortcut.Targetpath = "t:\\ftemp" shortcut.save()  import sys import win32com.client   shell = win32com.client.Dispatch("WScript.Shell") shortcut = shell.CreateShortCut("t:\\test.lnk") print(shortcut.Targetpath)  
&gt;&gt;&gt; re.compile(r'(\W+)').split('hello foo') ['hello' ' ' 'foo']  
__init__ __new__ &gt;&gt;&gt; import datetime &gt;&gt;&gt; class D(datetime.date):         def __new__(cls year):             return datetime.date.__new__(cls year 1 1)   &gt;&gt;&gt; D(2008) D(2008 1 1)  
def getReversedList(aList end start step):     return aList[end:start if start!=-1 else None:step]  start==-1 0 
*identifier **identifier # Excess keyword argument (python 2) example: def foo(a b c **args):     print "a = %s" % (a)     print "b = %s" % (b)     print "c = %s" % (c)     print args  foo(a="testa" d="excess" c="testc" b="testb" k="another_excess")  a b c foo d k a = testa b = testb c = testc {'k': 'another_excess' 'd': 'excess'}  # Excess positional argument (python 2) example: def foo(a b c *args):     print "a = %s" % (a)     print "b = %s" % (b)     print "c = %s" % (c)     print args  foo("testa" "testb" "testc" "excess" "another_excess")  *args a = testa b = testb c = testc ('excess' 'another_excess')  def foo(abc**args):     print "a=%s" % (a)     print "b=%s" % (b)     print "c=%s" % (c)     print "args=%s" % (args)  argdict = dict(a="testa" b="testb" c="testc" excessarg="string") foo(**argdict)  a=testa b=testb c=testc args={'excessarg': 'string'}  def foo(abc*args):     print "a=%s" % (a)     print "b=%s" % (b)     print "c=%s" % (c)     print "args=%s" % (args)  argtuple = ("testa""testb""testc""excess") foo(*argtuple)  a=testa b=testb c=testc args=('excess')  
import jpeg jpeg.setExif(jpeg.getExif('foo.jpg') 'foo-resized.jpg')   
parents = Category.objects.filter(parent_id=0)  
import logging LOG = logging.getLogger(__name__)  LOG.info('Spam and eggs are tasty!')  self.log &gt;&gt;&gt; import logging &gt;&gt;&gt; class Foo(object): ...     def __init__(self): ...             self.log.info('Meh') ...  &gt;&gt;&gt; def logged_class(cls): ...     cls.log = logging.getLogger('{0}.{1}'.format(__name__ cls.__name__)) ...  &gt;&gt;&gt; logged_class(Foo) &gt;&gt;&gt; logging.basicConfig(level=logging.DEBUG) &gt;&gt;&gt; f = Foo() INFO:__main__.Foo:Meh  
from pylab import * x = linspace(0 10*pi 2**10) y = sin(x) figure(figsize=(5 10)) plot(x y) show()  figsize=(width height) (8 6) dpi matplotlibrc set_size_inches(width height) 
class test_appletrailer(unittest.TestCase):      all_trailers = None      def setup(self):         # Only initialize all_trailers once.         if self.all_trailers is None:             self.__class__.all_trailers = Trailers(res = "720" verbose = True)  self.all_trailers self.__class__.all_trailers 
# To sort the list in place... ut.sort(key=lambda x: x.count reverse=True)  # To return a new list use the sorted() built-in function... newlist = sorted(ut key=lambda x: x.count reverse=True)  
timeit -s $ python -m timeit -s "jokes=range(1000000)" "domain=[(0(len(jokes)*2)-i-1) for i in range(0 len(jokes)*2)]" 10 loops best of 3: 1.08 sec per loop $ python -m timeit -s "jokes=range(1000000)" "l=len(jokes);domain=[(0(l*2)-i-1) for i in range(0 l*2)]" 10 loops best of 3: 908 msec per loop $ python -m timeit -s "jokes=range(1000000)" "l=len(jokes*2);domain=[(0l-i-1) for i in range(0 l)]" 10 loops best of 3: 813 msec per loop  profile / cProfile pstats len 
from pprint import pprint pprint main() pprint.pprint() from..import import 
import os import sys  config_name = 'myapp.cfg'  # determine if application is a script file or frozen exe if getattr(sys 'frozen' False):     application_path = os.path.dirname(sys.executable) elif __file__:     application_path = os.path.dirname(__file__)  config_path = os.path.join(application_path config_name)  
if (o != null)     o.doSomething(); else     // handle  try {     o.doSomething() } catch (NullPointerException npe) {      // handle }  if (a != null)     if (b != null)         if (c != null)             a.getB().getC().doSomething();         else             // handle c null     else         // handle b null else     // handle a null  NullPointerException 
import data import someOtherModule  print data.formations['Arrowhead'] someOtherModule.function()  import data def function():     print data.formations['Tight']  import theLoggerThing class Formation( object ):     pass # details omitted. def createFormations( logger ):     pass # details omitted formations= createFormations( theLoggerThing.logger )  import data data import theLoggerThing class Formation( object ): Formations def createFormations( logger ): createFormations formations = formations import someOtherModule someOtherModule import data data def function function print data.formations['Arrowhead'] data.formations get('Arrowhead') Formation someOtherModule.function() print data.formations['Tight'] data.formations get('Tight') Formation 
c.__dict__ d = {'bar': 456} for keyvalue in d.items():     setattr(ckeyvalue)  update MyClass c.update(d) def update(selfnewdata):     for keyvalue in newdata.items():         setattr(selfkeyvalue)  setattr(...)     setattr(object name value)     Set a named attribute on an object; setattr(x 'y' v) is equivalent to     ''x.y = v''.  
all( type(i) is int for i in lst )  In [1]: lst = range(10) In [2]: all( type(i) is int for i in lst ) Out[2]: True In [3]: lst.append('steve') In [4]: all( type(i) is int for i in lst ) Out[4]: False  
V=["Boulder" "Denver" "Colorado Springs" "Pueblo" "Limon"]  E=[["Boulder" "Denver"]    ["Denver" "Colorado Springs"]    ["Colorado Springs" "Pueblo"]    ["Denver" "Limon"]    ["Colorado Springs" "Limon"]]  
from glob import glob filelist = glob('*.csv') #You can pass the sys.argv argument  
&gt;&gt;&gt; list_of_menuitems = [['image00' 'image01'] ['image10'] []] &gt;&gt;&gt; import itertools &gt;&gt;&gt; chain = itertools.chain(*list_of_menuitems) &gt;&gt;&gt; print(list(chain)) ['image00' 'image01' 'image10']  QuerySet chain list(chain) itertools.chain.from_iterable * 
CTRL-A: getch() returns 1 CTRL-B: getch() returns 2 ... CTRL-Z: getch() returns 26  
(priority thing) 
CREATE TABLE Tagged (   object_id  INT NOT NULL   tag_id     INT NOT NULL   PRIMARY KEY (object_id tag_id)   FOREIGN KEY (object_id) REFERENCES Objects(object_id)   FOREIGN KEY (tag_id) REFERENCES Tags(tag_id) );  object_id SELECT DISTINCT object_id FROM Tagged WHERE tag_id IN (3 4 5);  SELECT DISTINCT t1.object_id FROM Tagged t1   LEFT OUTER JOIN Tagged t2  ON (t1.object_id = t2.object_id AND t2.tag_id NOT IN (3 4 5)) WHERE t1.tag_id IN (3 4 5)  AND t2.object_id IS NULL;  
\x9d \xe5 iso-8859-1 iso-8859-1 cp1252 \x9d In [290]: unicode(u'\x9d'.encode('iso-8859-1') 'cp1252') --------------------------------------------------------------------------- &lt;type 'exceptions.UnicodeDecodeError'&gt;    Traceback (most recent call last)  /home/jv/&lt;ipython console&gt; in &lt;module&gt;()  /usr/lib/python2.5/encodings/cp1252.py in decode(self input errors)      13       14     def decode(selfinputerrors='strict'): ---&gt; 15         return codecs.charmap_decode(inputerrorsdecoding_table)      16       17 class IncrementalEncoder(codecs.IncrementalEncoder):  &lt;type 'exceptions.UnicodeDecodeError'&gt;: 'charmap' codec can't decode byte 0x9d in position 0: character maps to &lt;undefined&gt;  \xe5 ascii In [291]: unicode(u'\xe5'.encode('iso-8859-1') 'cp1252').encode('ascii') --------------------------------------------------------------------------- &lt;type 'exceptions.UnicodeEncodeError'&gt;    Traceback (most recent call last)  /home/jv/&lt;ipython console&gt; in &lt;module&gt;()  &lt;type 'exceptions.UnicodeEncodeError'&gt;: 'ascii' codec can't encode character u'\xe5' in position 0: ordinal not in range(128)  In [75]: decd=open('jalf_decode_err''r').read()  In [76]: chardet.detect(decd) Out[76]: {'confidence': 0.98999999999999999 'encoding': 'utf-8'} ##this is what is tried at the back - my guess :) In [77]: unicode(decd 'cp1252')  --------------------------------------------------------------------------- &lt;type 'exceptions.UnicodeDecodeError'&gt;    Traceback (most recent call last)  /home/jv/&lt;ipython console&gt; in &lt;module&gt;()  /usr/lib/python2.5/encodings/cp1252.py in decode(self input errors)      13       14     def decode(selfinputerrors='strict'): ---&gt; 15         return codecs.charmap_decode(inputerrorsdecoding_table)      16       17 class IncrementalEncoder(codecs.IncrementalEncoder):  &lt;type 'exceptions.UnicodeDecodeError'&gt;: 'charmap' codec can't decode byte 0x9d in position 2812: character maps to &lt;undefined&gt;'  ##this is a FIX- this way all your messages r accepted In [78]: unicode(decd chardet.detect(decd)['encoding'])  Out[78]: u'Return-path: &lt;root@apps2.servage.net&gt;\nEnvelope-to: public@jalf.dk\nDelivery-date: Fri 22 Aug 2008 16:49:53 -0400\nReceived: from [77.232.66.102] (helo=apps2.servage.net)\n\tby c1p.hostingzoom.com with esmtp (Exim 4.69)\n\t(envelope-from &lt;root@apps2.servage.net&gt;)\n\tid 1KWdZu-0003VX-HP\n\tfor public@jalf.dk; Fri 22 Aug 2008 16:49:52 -0400\nReceived: from apps2.servage.net (apps2.servage.net [127.0.0.1])\n\tby apps2.servage.net (Postfix) with ESMTP id 4A87F980026\n\tfor &lt;public@jalf.dk&gt;; Fri 22 Aug 2008 21:49:46 +0100 (BST)\nReceived: (from root@localhost)\n\tby apps2.servage.net (8.13.8/8.13.8/Submit) id m7MKnkrB006225;\n\tFri 22 Aug 2008 21:49:46 +0100\nDate: Fri 22 Aug 2008 21:49:46 +0100\nMessage-Id: &lt;200808222049.m7MKnkrB006225@apps2.servage.net&gt;\nTo: public@jalf.dk\nSubject: =?UTF-8?B?WW5ncmVzYWdlbnMgTnloZWRzYnJldiAyMi44LjA4?=\nFrom: Nyhedsbrev fra Yngresagen &lt;info@yngresagen.dk&gt;\nReply-To: info@yngresagen.dk\nContent-type: text/plain; charset=UTF-8\nX-Abuse: Servage.net Listid 16329\nMime-Version: 1.0\nX-mailer: Servage Maillist System\nX-Spam-Status: No score=0.1\nX-Spam-Score: 1\nX-Spam-Bar: /\nX-Spam-Flag: NO\nX-ClamAntiVirus-Scanner: This mail is clean\n\n\nK\xe6re medlem\n\nH\xe5ber du har en god sommer og er klar p\xe5 at l\xe6se seneste nyt i Yngresagen. God forn\xf8jelse!\n\n\n::. KOM TIL YS-CAF\xc8 .::\nFlere og billigere ungdomsboliger afskaf 24-\xe5rs-reglen eller hvad synes du? Yngresagen indbyder dig til en \xe5ben debat over kaffe og snacks. Yngresagens Kristian Lauta Mette Marb\xe6k og formand Steffen M\xf8ller fort\xe6ller om tidligere projekter og vil gerne diskutere hvad Yngresagen skal bruge sin tid p\xe5 fremover.  \nVil du diskutere et emne du br\xe6nder for eller vil du bare v\xe6re med p\xe5 en lytter?\nS\xe5 kom torsdag d. 28/8 kl. 17-19 Kulturhuset 44 2200 KBH N \n \n::. VIND GAVEKORT &amp; BLIV H\xd8RT .:: \nYngresagen har lavet et sp\xf8rgeskema s\xe5 du har direkte mulighed for at sige din mening og v\xe6re med til at forme Yngresagens arbejde. Brug 5 min. p\xe5 at dele dine holdninger om f.eks. uddannelse arbejde og unges vilk\xe5r - og vind et gavekort til en musikbutik. Vi tr\xe6kker lod blandt alle svarene og finder tre heldige vindere. Sp\xf8rgeskemaet er her: www.yngresagen.dk\n\n::. YS SPARKER NORDJYLLAND I GANG .::\nNordjylland bliver Yngresagens sunde region. Her er regionsansvarlig Andreas M\xf8ller Stehr ved at starte tre projekter op: 1) L\xf8beklub 2) F\xf8rstehj\xe6lpskursus 3) Mad til unge-program.\nVi har brug for flere frivillige til at sparke projekterne i gang. Vi tilbyder gratis fede aktiviteter gratis t-shirts og ture til K\xf8benhavn hvor du kan m\xf8de andre unge i YS. Har det fanget din interesse s\xe5 t\xf8v ikke med at kontakte os: nordjylland@yngresagen.dk tlf. 21935185. \n\n::. YNGRESAGEN I PRESSEN .::\nL\xe6s her et udsnit af sidste nyt om Yngresagen i medierne. L\xe6s og lyt mere p\xe5 hjemmesiden under \u201dYS i pressen\u201d.\n\n:: Radionyhederne: Unge skal informeres bedre om l\xe5n \nUnge ved for lidt om at l\xe5ne penge. Det udnytter banker og rejseselskaber til at give dem l\xe5n med t\xe5rnh\xf8je renter. S\xe5dan lyder det fra formand Steffen M\xf8ller fra landsforeningen Yngresagen. \n\n:: Danmarks Radio P1: Dansk Folkeparti - de \xe6ldres parti? \nHvorfor er det kun fattige \xe6ldre og ikke alle fattige der kan s\xf8ge om at f\xe5 nedsat medielicens?\nDansk Folkepartis ungeordf\xf8rer Karin N\xf8dgaard og Yngresagens formand Steffen M\xf8ller debatterer medielicens \xe6ldrecheck og indflydelse til unge \n\n:: Frederiksborg Amts Avis: Turen til Roskilde koster en holdning!\nFor at skabe et m\xf8de mellem politikere og unge fragter Yngresagen unge gratis til \xe5rets Roskilde Festival. Det sker med den s\xe5kaldte Yngrebussen der kan l\xe6ses mere om p\xe5 www.yngrebussen.dk\n\n \n \nMed venlig hilsen \nYngresagen\n\nLandsforeningen Yngresagen\nKulturhuset Kapelvej 44\n2200 K\xf8benhavn N\n\ntlf. 29644960\ninfo@yngresagen.dk\nwww.yngresagen.dk\n\n\n-------------------------------------------------------\nUnsubscribe Link: \nhttp://apps.corecluster.net/apps/ml/r.php?l=16329&amp;e=public%40jalf.dk%0D%0A&amp;id=40830383\n-------------------------------------------------------\n\n'  In [129]: encd=open('jalf_encode_err''r').read()  In [130]: chardet.detect(encd) Out[130]: {'confidence': 0.78187650822865284 'encoding': 'ISO-8859-2'}  #even after the unicode conversion the encoding to ascii fails - because the criteris is strict by default In [131]: unicode(encd chardet.detect(encd)['encoding']).encode('ascii') --------------------------------------------------------------------------- &lt;type 'exceptions.UnicodeEncodeError'&gt;    Traceback (most recent call last)  /home/jv/&lt;ipython console&gt; in &lt;module&gt;()  &lt;type 'exceptions.UnicodeEncodeError'&gt;: 'ascii' codec can't encode character u'\u0159' in position 557: ordinal not in range(128)'  ##changing the criteria to ignore In [132]: unicode(encd chardet.detect(encd)['encoding']).encode('ascii' 'ignore') Out[132]: 'Return-path: &lt;info@kollegierneskontor.dk&gt;\nEnvelope-to: alf@5elements.net\nDelivery-date: Tue 21 Aug 2007 06:10:08 -0400\nReceived: from pfepc.post.tele.dk ([195.41.46.237]:52065)\n\tby c1p.hostingzoom.com with esmtp (Exim 4.66)\n\t(envelope-from &lt;info@kollegierneskontor.dk&gt;)\n\tid 1INQgX-0003fI-Un\n\tfor alf@5elements.net; Tue 21 Aug 2007 06:10:08 -0400\nReceived: from local.com (ns2.datadan.dk [195.41.7.21])\n\tby pfepc.post.tele.dk (Postfix) with SMTP id ADF4C8A0086\n\tfor &lt;alf@5elements.net&gt;; Tue 21 Aug 2007 12:10:04 +0200 (CEST)\nFrom: "Kollegiernes Kontor I Kbenhavn" &lt;info@kollegierneskontor.dk&gt;\nTo: "Jesper Alf Dam" &lt;alf@5elements.net&gt;\nSubject: Fornyelse af profil\nDate: Tue 21 Aug 2007 12:10:03 +0200\nX-Mailer: Dundas Mailer Control 1.0\nMIME-Version: 1.0\nContent-Type: Multipart/Alternative;\n\tboundary="Gark=_20078211010346yhSD0hUCo"\nMessage-Id: &lt;20070821101004.ADF4C8A0086@pfepc.post.tele.dk&gt;\nX-Spam-Status: No score=0.0\nX-Spam-Score: 0\nX-Spam-Bar: /\nX-Spam-Flag: NO\nX-ClamAntiVirus-Scanner: This mail is clean\n\n\n\n--Gark=_20078211010346yhSD0hUCo\nContent-Type: text/plain; charset=ISO-8859-1\nContent-Transfer-Encoding: Quoted-Printable\n\nHej Jesper Alf Dam=0D=0A=0D=0AHusk at forny din profil hos KKIK inden 28.=\n august 2007=0D=0ALog ind p=E5 din profil og benyt ikonet "forny".=0D=0A=0D=\n=0AVenlig hilsen=0D=0AKollegiernes Kontor i K=F8benhavn=0D=0A=0D=0Ahttp:/=\n/www.kollegierneskontor.dk/=0D=0A=0D=0A\n\n--Gark=_20078211010346yhSD0hUCo\nContent-Type: text/html; charset=ISO-8859-1\nContent-Transfer-Encoding: Quoted-Printable\n\n&lt;html&gt;=0D=0A&lt;head&gt;=0D=0A=0D=0A&lt;style&gt;=0D=0ABODY TD {=0D=0Afont-family: v=\nerdana arial helvetica; font-size: 12px; color: #666666;=0D=0A}=0D=0A&lt;/=\nstyle&gt;=0D=0A=0D=0A&lt;title&gt;&lt;/title&gt;=0D=0A=0D=0A&lt;/head&gt;=0D=0A&lt;body bgcolor=3D=\n#FFFFFF&gt;=0D=0A&lt;hr size=3D1 noshade&gt;=0D=0A&lt;table cellpadding=3D0 cellspaci=\nng=3D0 border=3D0 width=3D100%&gt;=0D=0A&lt;tr&gt;&lt;td &gt;=0D=0AHej Jesper Alf Dam&lt;br=\n&gt;&lt;br&gt;Husk at forny din profil inden 28. august 2007&lt;br&gt;=0D=0ALog ind p=E5=\n din profil og benyt ikonet "forny".=0D=0A&lt;br&gt;&lt;br&gt;=0D=0A&lt;a href=3D"http:/=\n/www.kollegierneskontor.dk/"&gt;Klik her&lt;/a&gt; for at logge ind.&lt;br&gt;&lt;br&gt;Venlig=\n hilsen&lt;br&gt;Kollegiernes Kontor i K=F8benhavn=0D=0A&lt;/td&gt;&lt;/tr&gt;=0D=0A&lt;/table=\n&gt;=0D=0A&lt;hr size=3D1 noshade&gt;=0D=0A&lt;/body&gt;=0D=0A&lt;/html&gt;=0D=0A\n\n--Gark=_20078211010346yhSD0hUCo--\n\n'  In [133]: len(encd) Out[133]: 2303  In [134]: len(unicode(encd chardet.detect(encd)['encoding']).encode('ascii' 'ignore')) Out[134]: 2302  import chardet  for msg in src:     msg=unicode(msg chardet.detect(msg)['encoding']).encode('ascii' 'ignore')     dest.add(msg)  
x = [  ['4' '21' '1' '14' '2008-10-24 15:42:58']   ['3' '22' '4' '2somename' '2008-10-24 15:22:03']   ['5' '21' '3' '19' '2008-10-24 15:45:45']   ['6' '21' '1' '1somename' '2008-10-24 15:45:49']   ['7' '22' '3' '2somename' '2008-10-24 15:45:51'] ]  from operator import itemgetter  x.sort(key=itemgetter(1))  from itertools import groupby y = groupby(x itemgetter(1))  for elt items in groupby(x itemgetter(1)):     print(elt items)     for i in items:         print(i)  21 &lt;itertools._grouper object at 0x511a0&gt; ['4' '21' '1' '14' '2008-10-24 15:42:58'] ['5' '21' '3' '19' '2008-10-24 15:45:45'] ['6' '21' '1' '1somename' '2008-10-24 15:45:49'] 22 &lt;itertools._grouper object at 0x51170&gt; ['3' '22' '4' '2somename' '2008-10-24 15:22:03'] ['7' '22' '3' '2somename' '2008-10-24 15:45:51']  from pprint import pprint as pp pp([y for y in x if y[3] == '2somename'])  [['3' '22' '4' '2somename' '2008-10-24 15:22:03']  ['7' '22' '3' '2somename' '2008-10-24 15:45:51']]  
def sanitized(func):     def sfunc(*args **kwds):         return func(*[arg or '' for arg in args]                     **dict((k v or '') for kv in kwds.iteritems()))     sfunc.func_name = func.func_name     sfunc.func_doc = func.func_doc     return sfunc  @sanitized def func(param1 param2 param3):     print param1 param2 param3  &gt;&gt;&gt; func('foo' None 'spam') foo  spam  @decorator sanitized 
get filter filter 
bool_list[:] = [False] * len(bool_list)  bool_list[:] = [False for item in bool_list]  
import re data = re.findall('&lt;body&gt;([^\&lt;]*)&lt;/body&gt;' result)[0]  start = 0 end = 5 while (end&lt;len(data)):    print data[start:end]    start = end+1    end = end+5 print data[start:]  
Tkinter process.terminate() 
class MyDialog(gtk.Dialog gtk.Buildable):     __gtype_name__ = "MyDialog"      def do_parser_finished(self builder):         self.treeview = builder.get_object("treeview1")         # Do any other associated post-initialization  
class EligibilityForm(forms.Form):     def __init__(self *args **kwargs):         super(EligibilityForm self).__init__(*args **kwargs)         # dynamic fields here ...         self.fields['plan_id'] = CharField()     # normal fields here ...     date_requested = DateField()  
from django.db.models.loading import get_model model = get_model('app_name' 'model_name')  django.db.models.loading apps.get_model from django.apps import apps MyModel = apps.get_model('app_label' 'MyModel')  
from mod_python import apache  def requesthandler(req):     req.content_type = "text/plain"     req.write("Hello World!")     return apache.OK  
def adjustAppend( v n ):     weight= -n/sum(v)     return [ i+i*weight for i in v ] + [n]   sum(v) == sum( v + [n] )  sum(r(i)) == -n  sum( map( r v ) ) == -n  -(n*i)/sum(v) 
def get(self):   return self._s def set(self value):   self._s = value  def metaget(self par):   return par.s def metaset(self value par):   par.s = value def add(self par):   self[par.name] = par   setattr(Collection par.name     property(       fget=lambda x : Collection.metaget(x par)       fset=lambda x y : Collection.metaset(xy par))  
field(enum) UNIT_CHOICES = ( ('m' 'meters') ('f' 'feet' ) ('i' 'inches') ('pt' 'points') )  unit_conversions = {     ('m''f'): 3.xyz     ('m''i'): 39.xyz     ('m''pt'): 29.xyz*72     ('f''m'): 1/3.xyz     ('f''i'): 12.0     ('f''pt'): 12.0*72     etc. }  class WithUnit( Model ):     ...     def toUnit( self someUnit ):         if someUnit == self.unit: return self.value         elif (someUnitself.unit) in unit_conversions:             return self.value * unit_conversions[(someUnitself.unit)]         else:             raise Exception( "Can't convert" )  
{{ form.as_table_with_label_classes }}  encapsulating_selector label {     some-attr: some-value; }  
netifaces &gt;&gt;&gt; import netifaces &gt;&gt;&gt; netifaces.interfaces() ['lo' 'eth0'] &gt;&gt;&gt; netifaces.ifaddresses('eth0') {17: [{'broadcast': 'ff:ff:ff:ff:ff:ff' 'addr': '00:11:2f:32:63:45'}] 2: [{'broadcast': '10.0.0.255' 'netmask': '255.255.255.0' 'addr': '10.0.0.2'}] 10: [{'netmask': 'ffff:ffff:ffff:ffff::' 'addr': 'fe80::211:2fff:fe32:6345%eth0'}]} &gt;&gt;&gt; for interface in netifaces.interfaces(): ...   print netifaces.ifaddresses(interface)[netifaces.AF_INET] ... [{'peer': '127.0.0.1' 'netmask': '255.0.0.0' 'addr': '127.0.0.1'}] [{'broadcast': '10.0.0.255' 'netmask': '255.255.255.0' 'addr': '10.0.0.2'}] &gt;&gt;&gt; for interface in netifaces.interfaces(): ...   for link in netifaces.ifaddresses(interface)[netifaces.AF_INET]: ...     print link['addr'] ... 127.0.0.1 10.0.0.2  from netifaces import interfaces ifaddresses AF_INET  def ip4_addresses():     ip_list = []     for interface in interfaces():         for link in ifaddresses(interface)[AF_INET]:             ip_list.append(link['addr'])     return ip_list  AF_INET6 AF_INET netifaces 
lxml.objectify xml = """&lt;main&gt; &lt;object1 attr="name"&gt;content&lt;/object1&gt; &lt;object1 attr="foo"&gt;contenbar&lt;/object1&gt; &lt;test&gt;me&lt;/test&gt; &lt;/main&gt;"""  from lxml import objectify  main = objectify.fromstring(xml) main.object1[0]             # content main.object1[1]             # contenbar main.object1[0].get("attr") # name main.test                   # me  item = objectify.Element("item") item.title = "Best of python" item.price = 17.98 item.price.set("currency" "EUR")  order = objectify.Element("order") order.append(item) order.item.quantity = 3 order.price = sum(item.price * item.quantity for item in order.item)  import lxml.etree print(lxml.etree.tostring(order pretty_print=True))  &lt;order&gt;   &lt;item&gt;     &lt;title&gt;Best of python&lt;/title&gt;     &lt;price currency="EUR"&gt;17.98&lt;/price&gt;     &lt;quantity&gt;3&lt;/quantity&gt;   &lt;/item&gt;   &lt;price&gt;53.94&lt;/price&gt; &lt;/order&gt;  
for apple in tree:     if (apple.weight + basket.weight) &gt; 10:        send(basket)        basket.clear()     basket.add(apple)  
__name__ __name__ foo.py # Suppose this is foo.py.  print(&quot;before import&quot;) import math  print(&quot;before functionA&quot;) def functionA():     print(&quot;Function A&quot;)  print(&quot;before functionB&quot;) def functionB():     print(&quot;Function B {}&quot;.format(math.sqrt(100)))  print(&quot;before __name__ guard&quot;) if __name__ == '__main__':     functionA()     functionB() print(&quot;after __name__ guard&quot;)  __name__ python foo.py  &quot;__main__&quot; __name__ # It's as if the interpreter inserts this at the top # of your module when run as the main program. __name__ = &quot;__main__&quot;   # Suppose this is in some other main program. import foo  foo.py &quot;foo&quot; __name__ # It's as if the interpreter inserts this at the top # of your module when it's imported from another module. __name__ = &quot;foo&quot;  &quot;before import&quot; math math import math __import__ # Find and load a module given its string name &quot;math&quot; # then assign it to a local variable called math. math = __import__(&quot;math&quot;)  &quot;before functionA&quot; def functionA &quot;before functionB&quot; def functionB &quot;before __name__ guard&quot; __name__ &quot;__main__&quot; &quot;Function A&quot; &quot;Function B 10.0&quot; __name__ &quot;foo&quot; &quot;__main__&quot; if &quot;after __name__ guard&quot; # What gets printed if foo is the main program before import before functionA before functionB before __name__ guard Function A Function B 10.0 after __name__ guard  # What gets printed if foo is imported as a regular module before import before functionA before functionB before __name__ guard after __name__ guard  .py .py __name__ foo2.py python foo2.py # Suppose this is foo2.py. import os sys; sys.path.insert(0 os.path.dirname(__file__)) # needed for some interpreters  def functionA():     print(&quot;a1&quot;)     from foo2 import functionB     print(&quot;a2&quot;)     functionB()     print(&quot;a3&quot;)  def functionB():     print(&quot;b&quot;)  print(&quot;t1&quot;) if __name__ == &quot;__main__&quot;:     print(&quot;m1&quot;)     functionA()     print(&quot;m2&quot;) print(&quot;t2&quot;)         __name__ foo3.py # Suppose this is foo3.py. import os sys; sys.path.insert(0 os.path.dirname(__file__)) # needed for some interpreters  def functionA():     print(&quot;a1&quot;)     from foo3 import functionB     print(&quot;a2&quot;)     functionB()     print(&quot;a3&quot;)  def functionB():     print(&quot;b&quot;)  print(&quot;t1&quot;) print(&quot;m1&quot;) functionA() print(&quot;m2&quot;) print(&quot;t2&quot;)  # Suppose this is in foo4.py __name__ = &quot;__main__&quot;  def bar():     print(&quot;bar&quot;)      print(&quot;before __name__ guard&quot;) if __name__ == &quot;__main__&quot;:     bar() print(&quot;after __name__ guard&quot;)  
import subprocess p=subprocess.Popen(args stdout=subprocess.PIPE) print p.communicate()[0]  
pwd.getpwall() grp.getgrgid(gid) import pwd grp for p in pwd.getpwall():     print p[0] grp.getgrgid(p[3])[0]  
name = raw_input('What is your name?')  print 'You said' name  
{{ request.user.get_profile.whatever }} .get_profile() 
long double float c_longdouble %eax 
exclude = ('...') 
&gt;&gt;&gt; for s in KnuthMorrisPratt([4'a'356] [56]): print s 3 &gt;&gt;&gt; for s in KnuthMorrisPratt([4'a'356] [57]): print s (nothing)  
 echo ESzjTnGMRFnfVOJwQfqtyXOI8yzAatioyufiSdE1dx02McNkZ2IvBg== | openssl enc -nopad -a -des-ecb -K 6162636465666768 -iv 0 -p -d  
self.assertRaises(SystemExit sut.main)  
n n UPDATE item.order = item.order + 1 FROM item WHERE order &gt; 3 INSERT INTO item (order ...) VALUES (3 ...)  
_v _v SomeClass1 SomeClass2 _v SomeClass1 x2 _v class MyDescriptor(object):   def __get__(self obj type=None):     print "get" self obj type     return obj._v   def __set__(self obj value):     obj._v = value     print "set" self obj value  
import pyPdf pdf = pyPdf.PdfFileReader(open("pdffile.pdf")) list(pdf.pages) # Process all the objects. print pdf.resolvedObjects  
re.match import re match = re.match(r&quot;([a-z]+)([0-9]+)&quot; 'foofo21' re.I) if match:     items = match.groups() print(items) &gt;&gt; (&quot;foofo&quot; &quot;21&quot;)  
import re regexc = re.compile(r"(?:^|[^\\])'(([^\\']|\\'|\\\\)*)'")  def check(test base target):     match = regexc.search(base)     assert match is not None test+": regex didn't match for "+base     assert match.group(1) == target test+": "+target+" not found in "+base     print "test %s passed"%test  check("Empty""''""") check("single escape1" r""" Example: 'Foo \' Bar'  End. """r"Foo \' Bar") check("single escape2" r"""'\''"""r"\'") check("double escape"r""" Example2: 'Foo \\' End. """r"Foo \\") check("First quote escaped"r"not matched\''a'""a") check("First quote escaped beginning"r"\''a'""a")  r"(?:^|[^\\])'(([^\\']|\\'|\\\\)*)'" 
import urllib2 from BeautifulSoup import BeautifulSoup  html = urllib2.urlopen("http://www.google.com").read() soup = BeautifulSoup(html) all_links = soup.findAll("a")  
import os  os.chdir(path)  os.chdir() 
def f():     return 1 2 3  _ _ x = f()  
array item itemindex = numpy.where(array==item)  array[itemindex[0][0]][itemindex[1][0]]  array[itemindex[0][1]][itemindex[1][1]]  
setattr(test attr_name 10)  &gt;&gt;&gt; class a(object): pass &gt;&gt;&gt; a.__dict__['wut'] = 4 Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: 'dictproxy' object does not support item assignment &gt;&gt;&gt; setattr(a 'wut' 7) &gt;&gt;&gt; a.wut 7  
bool(a) != bool(b)  
(?P&lt;zip&gt;...)  Zip:\s*  \d  \w  y.groupdict('zip')  y.group(2)  
from datetime import datetime Entry.objects.filter(pub_date=datetime(2008 10 18))  
myInteger += 1 myString += "more text"  
#!/usr/bin/python  from Tkinter import * from tkFileDialog import askopenfilename  root = Tk() root.withdraw() print askopenfilename()  
from itertools import zip_longest  def grouper(iterable n fillvalue=None):     args = [iter(iterable)] * n     return zip_longest(*args fillvalue=fillvalue)  grouper('ABCDEFG' 3 'x') --&gt; 'ABC' 'DEF' 'Gxx'  izip_longest zip_longest 
buffer = "path/filename.zip"  # zip filename to write (or file-like object) name = "folder/data.txt"      # name of file inside zip  bytes = "blah blah blah"      # contents of file inside zip  zip = zipfile.ZipFile(buffer "w" zipfile.ZIP_DEFLATED) info = zipfile.ZipInfo(name) info.external_attr = 0777 &lt;&lt; 16L # give full access to included file zip.writestr(info bytes) zip.close()  
django.test.TestCase unittest.TestCase 
execfile("./filename")   exec(open("./filename").read())  
pdf.pages pdf.pages[0]['/MYOBJECT'] help dir pdf.resolvedObjects[0][558]['/Resources']['/Properties']['/MC0']['/MYOBJECT'] import types import pyPdf pdf = pyPdf.PdfFileReader(open('file.pdf')) pages = list(pdf.pages)  def findInDict(needlehaystack):     for key in haystack.keys():         try:             value = haystack[key]         except:             continue         if key == needle:             return value         if type(value) == types.DictType or isinstance(valuepyPdf.generic.DictionaryObject):               x = findInDict(needlevalue)             if x is not None:                 return x  answer = findInDict('/MYOBJECT'pdf.resolvedObjects).getData()  
#!/usr/bin/env python2.6  from __future__ import print_function  import readline import threading  PROMPT = '&gt; '  def interrupt():     print() # Don't want to end up on the same line the user is typing on.     print('Interrupting cow -- moo!')     print(PROMPT readline.get_line_buffer() sep='' end='')  def cli():     while True:         cli = str(raw_input(PROMPT))  if __name__ == '__main__':     threading.Thread(target=cli).start()     threading.Timer(2 interrupt).start()  interrupt interrupt time.sleep readline.get_line_buffer 
django.db.models.query.CollectedObject from django.db.models.query import CollectedObjects from django.db.models.fields.related import ForeignKey  def duplicate(obj value field):     """     Duplicate all related objects of `obj` setting     `field` to `value`. If one of the duplicate     objects has an FK to another duplicate object     update that as well. Return the duplicate copy     of `obj`.       """     collected_objs = CollectedObjects()     obj._collect_sub_objects(collected_objs)     related_models = collected_objs.keys()     root_obj = None     # Traverse the related models in reverse deletion order.         for model in reversed(related_models):         # Find all FKs on `model` that point to a `related_model`.         fks = []         for f in model._meta.fields:             if isinstance(f ForeignKey) and f.rel.to in related_models:                 fks.append(f)         # Replace each `sub_obj` with a duplicate.         sub_obj = collected_objs[model]         for pk_val obj in sub_obj.iteritems():             for fk in fks:                 fk_value = getattr(obj "%s_id" % fk.name)                 # If this FK has been duplicated then point to the duplicate.                 if fk_value in collected_objs[fk.rel.to]:                     dupe_obj = collected_objs[fk.rel.to][fk_value]                     setattr(obj fk.name dupe_obj)             # Duplicate the object and save it.             obj.id = None             setattr(obj field value)             obj.save()             if root_obj is None:                 root_obj = obj     return root_obj  
reload from importlib import reload   import foo  while True:     # Do some things.     if is_changed(foo):         foo = reload(foo)  reload imp imp importlib reload reload Foo Foo foo 
''.join([str(i) for i in list_of_ints])  
d = {}  for row in rows:   c = list_of_categories.index(row["id"])   print c   d[c] = row["name"]  d = dict((list_of_categories.index(row['id']) row['name']) for row in rows) print d  
decimal.Decimal(random.randrange(10000))/100  
def gs(ab):     class SameEvent(Exception):         pass     def ry():         if a==b:             raise SameEvent(a)     try:         # Do stuff here and call ry whenever you want to return if they are the same.         ry()          # It will now return 3.         a = b = 3         ry()      except SameEvent as e:         return e.args[0]  
&gt;&gt;&gt; from timeit import Timer &gt;&gt;&gt; ts = Timer("s.decode('utf-8')" "s = 'ééé'") &gt;&gt;&gt; ts.timeit() 8.9185450077056885 &gt;&gt;&gt; tu = Timer("unicode(s 'utf-8')" "s = 'ééé'")  &gt;&gt;&gt; tu.timeit() 2.7656929492950439 &gt;&gt;&gt;   unicode() 
import win32com.client from win32com.client import Dispatch  session = Dispatch('MAPI.session') session.Logon ('Outlook') # this is profile name inbox = session.Inbox messages = session.Inbox.Messages  message = inbox.Messages.GetFirst()  if(message):     attachments = message.Attachments     for i in range(attachments.Count):         attachment = attachments.Item(i + 1) # yep indexes are 1 based          filename = "c:\\tmpfile" + str(i)         attachment.WriteToFile(FileName=filename) session.Logoff()  
def myKeyFunc( aString ):     stuff x label = aString.partition(' x ')     return label  aList.sort( key= myKeyFunc )  
make install * Note: not installed as 'python'. * Use 'make fullinstall' to install as 'python'. * However 'make fullinstall' is discouraged * as it will clobber your Python 2.x installation.  configure --prefix=/usr/local/py3 
for evoNode in node.getElementsByTagName('evolution'):   evoName      = getText(evoNode.getElementsByTagName("type")[0].childNodes)   evoId      = getText(evoNode.getElementsByTagName("typeid")[0].childNodes)   evoLevel   = getText(evoNode.getElementsByTagName("level")[0].childNodes)   evoCost      = getText(evoNode.getElementsByTagName("costperlevel")[0].childNodes)    temporaryEvo = Evolutions(evoName evoId evoLevel evoCost)   evolutionList.append(temporaryEvo)    # Or you can go with the 1 liner   evolutionList.append(Evolutions(evoName evoId evoLevel evoCost))  
with with with open("myfile.csv") as f:     for row in csv.reader(f):         # process row  csv.reader with import contextlib  contextmanager(func)     @contextmanager decorator.      @contextmanager     def some_generator(&lt;arguments&gt;):         &lt;setup&gt;         try:             yield &lt;value&gt;         finally:             &lt;cleanup&gt;      with some_generator(&lt;arguments&gt;) as &lt;variable&gt;:         &lt;body&gt;      &lt;setup&gt;     try:         &lt;variable&gt; = &lt;value&gt;         &lt;body&gt;     finally:         &lt;cleanup&gt;  
from datetime import datetime timedelta  d = datetime.today() - timedelta(days=days_to_subtract)  
BaseInlineFormSet initial __init__() BaseFormSet.__init__() __init__() BaseInlineFormSet BaseModelFormSet TabularInline get_formset inlineformset_factory() ModelAdmin add_view change_view ModelAdmin get_formsets() 
result = numpy.dot(matrix base)  result = numpy.dot(matrix base).reshape((51))  
try:     something() except Exception as e:     send_somewhere(traceback.format_exception(*sys.exc_info()))     raise # reraises the exception  as except Exception e:  
os.getenv("PWD")  PWD cd cd -P man cd os.chdir /tmp/foo/kiwi 
proc.stdin.flush() sys.stdout.flush() 
columns = ['column1' 'column2' 'column3' 'column4' 'column5'] results = statement.executeQuery("select %s from %s where column_id = '%s'" % ("".join(columns) table id))  
__name__ == '__main__' 
import db # assume this is your db module  class Class(object):     def __init__(self):         self.id = None         self.name = None      def get_by_id(self id):         records = db.execute('select * from table where id=%s' % str(id))         if records:             self.id = records[0]['id']             self.name = records[0]['name']      def save(self):         db.execute('update table set name=%s where id=%s' % (self.name str(self.id)))  
evoNode.getElementsByTagName("count") counts = evoNode.getElementsByTagName("count") if counts:     unitCount = getText(counts[0].childNodes)  unitNode evoNode 
print([obj.attr for obj in my_list_of_objs])  attr my_list_of_objs __str__() class evolutions:     def __str__(self):         # return string representation of self  print(my_list_of_objs)  # each object is now printed out according to its __str__() method  
IN X=Y OR 
&gt;&gt;&gt; struct.unpack("&lt;L" "y\xcc\xa6\xbb")[0] 3148270713L  
MEDIA_ROOT = 'C:/Server/Projects/project_name/static/' MEDIA_URL = '/static/' ADMIN_MEDIA_PREFIX = '/media/'  from django.conf import settings ... if settings.DEBUG:     urlpatterns += patterns(''         (r'^static/(?P&lt;path&gt;.*)$' 'django.views.static.serve' {'document_root': settings.MEDIA_ROOT})     )  &lt;link rel="stylesheet" type="text/css" href="/static/css/style.css" /&gt;  "C:/Server/Projects/project_name/static/css/style.css"  
eval try:   eval("1 if True else 2") except SyntaxError:   # doesn't have ternary  with from __future__ import with_statement .py __init__.py # __init__.py  # Check compatibility try:   eval("1 if True else 2") except SyntaxError:   raise ImportError("requires ternary support")  # import from another module from impl import *  
darwin  linux2  win32  
if m = re.match('foo (\w+) bar (\d+)' line):   # do stuff with m.group(1) and m.group(2) elif m = re.match('baz whoo_(\d+)' line):   # do stuff with m.group(1) elif ...  m = None def assign_m(x):   m = x   return x  if assign_m(re.match('foo (\w+) bar (\d+)' line)):   # do stuff with m.group(1) and m.group(2) elif assign_m(re.match('baz whoo_(\d+)' line)):   # do stuff with m.group(1) elif ...  m # per Brian's suggestion a wrapper that is stateful class m_(object):   def match(self *args):     self.inner_ = re.match(*args)     return self.inner_   def group(self *args):     return self.inner_.group(*args) m = m_()  # now 'm' is a stateful regex if m.match('foo (\w+) bar (\d+)' line):   # do stuff with m.group(1) and m.group(2) elif m.match('baz whoo_(\d+)' line):   # do stuff with m.group(1) elif ...  else def find_the_right_match():   # now 'm' is a stateful regex   m = re.match('foo (\w+) bar (\d+)' line)   if m:     # do stuff with m.group(1) and m.group(2)     return # &lt;== exit nested function only   m = re.match('baz whoo_(\d+)' line)   if m:     # do stuff with m.group(1)     return  find_the_right_match()  def cond_with(*phrases):   """for each 2-tuple invokes first item.  the first pair where   the first item returns logical true result is passed to second   function in pair.  Like an if-elif-elif.. chain"""   for (cond_lambda then_lambda) in phrases:     c = cond_lambda()     if c:       return then_lambda(c)    return None   cond_with(    ((lambda: re.match('foo (\w+) bar (\d+)' line))        (lambda m:            ... # do stuff with m.group(1) and m.group(2)           ))   ((lambda: re.match('baz whoo_(\d+)' line))       (lambda m:           ... # do stuff with m.group(1)           ))   ...)  
decode unicode().decode() s &gt;&gt;&gt; s = u'ö' &gt;&gt;&gt; s.decode() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; UnicodeEncodeError: 'ascii' codec can't encode character u'\xf6' in position 0: ordinal not in range(128)  &gt;&gt;&gt; s.encode('ascii') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; UnicodeEncodeError: 'ascii' codec can't encode character u'\xf6' in position 0: ordinal not in range(128)  str().encode() s &gt;&gt;&gt; s = 'ö' &gt;&gt;&gt; s.decode('utf-8') u'\xf6' &gt;&gt;&gt; s.encode() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0: ordinal not in range(128)  str().encode() &gt;&gt;&gt; s.encode('zip') 'x\x9c;\xbc\r\x00\x02&gt;\x01z'  byte string 
F() F from django.db.models import F Entry.objects.filter(is_published=True).update(views=F('views')+1)  in_bulk Q objects pk__in latest_entry_ids = Entry.objects.filter(is_published=True)\                                       .order_by('-date_published')                                       .values_list('id' flat=True)[:10]   non_sliced_query_set = Entry.objects.filter(pk__in=latest_entry_ids)   n = non_sliced_query_set.update(views=F('views')+1)   print n or 0 'items updated'  
class Agent(Thread):     mylock = Lock()     def write_result(self):         self.mylock.acquire()         try:             ...         finally:             self.mylock.release()  class Agent(Thread):     mylock = Lock()     def write_result(self):         with self.mylock:             ...  from __future__ import with_statement  
class GroupMember(db.Model):     group = db.ReferenceProperty(Group collection_name="groupMembers")     user = db.ReferenceProperty(User collection_name="groupMembers")  # get the group entity somehow group = Group.get(group_key)      # do something with the members such as list the nicknames nicknames = [x.user.nickname for x in group.groupMembers]  
__init__.py __init__.py __init__.py __init__.py 
mod_python mod_python mod_php mod_wsgi mod_wsgi import cherrypy  class HelloWorld(object):     def index(self):         return "Hello World!"     index.exposed = True  application = HelloWorld() if __name__ == '__main__':     cherrypy.engine.start()     cherrypy.engine.block()  mod_wsgi 
subprocess os.system import subprocess #subprocess.check_output(['ls' '-l'])  # All that is technically needed... print(subprocess.check_output(['ls' '-l']))  
domains = [matching['domain'] for matching in matchings if matching['id'] == the_id]  resulting_list = [item_to_return for item in items if condition]  domains = [] for matching in matchings:     if matching['id'] == the_id:         domains.append(matching['domain'])  
B B method C 
re.match() dict def match(pattern string flags=0):     return _compile(pattern flags).match(string)  def _compile(*key):      # Does cache check at top of function     cachekey = (type(key[0])) + key     p = _cache.get(cachekey)     if p is not None: return p      # ...     # Does actual compilation on cache miss     # ...      # Caches compiled regex     if len(_cache) &gt;= _MAXCACHE:         _cache.clear()     _cache[cachekey] = p     return p  
&gt;&gt;&gt; from datetime import date &gt;&gt;&gt; &gt;&gt;&gt; repr(date.today())        # calls date.today().__repr__() 'datetime.date(2009 1 16)' &gt;&gt;&gt; eval(_)                   # _ is the output of the last command datetime.date(2009 1 16)  &lt;...some useful description...&gt; 
$ python &gt;&gt;&gt; import modulename  
def square(x): return lambda : x*x listOfLambdas = [square(i) for i in [12345]] for f in listOfLambdas: print f()  1 4 9 16 25  
HTMLParser.HTMLParseError import HTMLParserBeautifulSoup try:     soup = BeautifulSoup.BeautifulSoup(raw_html)     for a in soup.findAll('a'):         href = a.['href']         .... except HTMLParser.HTMLParseError:     print "failed to parse"url  text/html application/xml+xhtml 
def get_class( kls ):     parts = kls.split('.')     module = ".".join(parts[:-1])     m = __import__( module )     for comp in parts[1:]:         m = getattr(m comp)                 return m  &gt;&gt;&gt; D = get_class("datetime.datetime") &gt;&gt;&gt; D &lt;type 'datetime.datetime'&gt; &gt;&gt;&gt; D.now() datetime.datetime(2009 1 17 2 15 58 883000) &gt;&gt;&gt; a = D( 2010 4 22 ) &gt;&gt;&gt; a datetime.datetime(2010 4 22 0 0) &gt;&gt;&gt;   __import__ m = __import__( module )  m foo.baz m foo foo.baz getattr( m 'baz' ) gettatr foo.baz.bar.Model m = __import__( "foo.baz.bar" ) #m is package foo m = getattr( m "baz" ) #m is package baz m = getattr( m "bar" ) #m is module bar m = getattr( m "Model" ) #m is class Model  for comp in parts[1:]:     m = getattr(m comp)      m m a = m() #instantiate a new instance of the class     b = m( arg1 arg2 ) # pass arguments to the constructor  
$ screen -S ipython $ ipython  autocmd FileType python map F5 :w&lt;CR&gt;:!screen -x ipython -X stuff $'\%run %:p:h\n'&lt;CR&gt;&lt;CR&gt;  autocmd FileType python map &lt;F5&gt; :w&lt;CR&gt;:!screen -x ipython -X stuff $'\%reset\ny\n\%cd %:p:h\n\%run %:t\n'&lt;CR&gt;&lt;CR&gt;  
.distinct() modified_date Topic 
import string d = dict.fromkeys(string.ascii_lowercase 0)  
python 
# The _artists method can be used from any other method def _artists(self action artist_id):     artists = session.query(model.Artist).all()     return dict(artists=artists)  @expose("json") #@identity.require(identity.non_anonymous()) # error handlers etc. def artists(self action="view" artist_id=None):     return self._artists(action=action artist_id=artist_id)  
for i in range(01506):      print i  
class MyFramework(object):     """A bare MyFramework I only hold a person's name     """     _addons= {}     @staticmethod     def addAddon(name addon):         MyFramework._addons[name]= addon      def __init__(self person):         self.person= person         for name addon in MyFramework._addons.items():             setattr(self name addon(self))  class Helloer(object):     def __init__(self owner):         self.owner= owner     def hello(self):         print 'hello '+self.owner.person  import myframework myframework.MyFramework.addAddon('helloer' Helloer)  
__dict__ dict() &gt;&gt;&gt; class A(object) : ...     def __init__(self) : ...             self.__dict__['_odict'] = odict() ...     def __getattr__(self value) : ...             return self.__dict__['_odict'][value] ...     def __setattr__(self key value) : ...             self.__dict__['_odict'][key] = value ...  &gt;&gt;&gt; a = A() &gt;&gt;&gt; a &lt;__main__.A object at 0xb7bce34c&gt; &gt;&gt;&gt; a.x = 1 &gt;&gt;&gt; a.x 1 &gt;&gt;&gt; a.y = 2 &gt;&gt;&gt; a.y 2 &gt;&gt;&gt; a.odict odict.odict([('x' 1) ('y' 2)])  
A = '1 234  ' B = [int(x) for x in A.split('') if x.strip()]  
opts = Variables() opts.Add('fcgi'0) env = Environment(variables=opts ...)  if env['fcgi'] == 0:     # do something  
__init__.py from Models.user import User  __init__.py 
urlretrieve(url filename=None reporthook=None data=None) urllib reporthook reporthook reporthook """Rate limiters with shared token bucket."""  import os import sys import threading import time import urllib import urlparse  class TokenBucket(object):     """An implementation of the token bucket algorithm.     source: http://code.activestate.com/recipes/511490/      &gt;&gt;&gt; bucket = TokenBucket(80 0.5)     &gt;&gt;&gt; print bucket.consume(10)     True     &gt;&gt;&gt; print bucket.consume(90)     False     """     def __init__(self tokens fill_rate):         """tokens is the total tokens in the bucket. fill_rate is the         rate in tokens/second that the bucket will be refilled."""         self.capacity = float(tokens)         self._tokens = float(tokens)         self.fill_rate = float(fill_rate)         self.timestamp = time.time()         self.lock = threading.RLock()      def consume(self tokens):         """Consume tokens from the bucket. Returns 0 if there were         sufficient tokens otherwise the expected time until enough         tokens become available."""         self.lock.acquire()         tokens = max(tokensself.tokens)         expected_time = (tokens - self.tokens) / self.fill_rate         if expected_time &lt;= 0:             self._tokens -= tokens         self.lock.release()         return max(0expected_time)      @property     def tokens(self):         self.lock.acquire()         if self._tokens &lt; self.capacity:             now = time.time()             delta = self.fill_rate * (now - self.timestamp)             self._tokens = min(self.capacity self._tokens + delta)             self.timestamp = now         value = self._tokens         self.lock.release()         return value  class RateLimit(object):     """Rate limit a url fetch.     source: http://mail.python.org/pipermail/python-list/2008-January/472859.html     (but mostly rewritten)     """     def __init__(self bucket filename):         self.bucket = bucket         self.last_update = 0         self.last_downloaded_kb = 0          self.filename = filename         self.avg_rate = None      def __call__(self block_count block_size total_size):         total_kb = total_size / 1024.          downloaded_kb = (block_count * block_size) / 1024.         just_downloaded = downloaded_kb - self.last_downloaded_kb         self.last_downloaded_kb = downloaded_kb          predicted_size = block_size/1024.          wait_time = self.bucket.consume(predicted_size)         while wait_time &gt; 0:             time.sleep(wait_time)             wait_time = self.bucket.consume(predicted_size)          now = time.time()         delta = now - self.last_update         if self.last_update != 0:             if delta &gt; 0:                 rate = just_downloaded / delta                 if self.avg_rate is not None:                     rate = 0.9 * self.avg_rate + 0.1 * rate                 self.avg_rate = rate             else:                 rate = self.avg_rate or 0.             print "%20s: %4.1f%% %5.1f KiB/s %.1f/%.1f KiB" % (                     self.filename 100. * downloaded_kb / total_kb                     rate downloaded_kb total_kb                 )         self.last_update = now   def main():     """Fetch the contents of urls"""     if len(sys.argv) &lt; 4:         print 'Syntax: %s rate url1 url2 ...' % sys.argv[0]         raise SystemExit(1)     rate_limit  = float(sys.argv[1])     urls = sys.argv[2:]     bucket = TokenBucket(10*rate_limit rate_limit)      print "rate limit = %.1f" % (rate_limit)      threads = []     for url in urls:         path = urlparse.urlparse(url'http')[2]         filename = os.path.basename(path)         print 'Downloading "%s" to "%s"...' % (urlfilename)         rate_limiter = RateLimit(bucket filename)         t = threading.Thread(             target=urllib.urlretrieve             args=(url filename rate_limiter))         t.start()         threads.append(t)      for t in threads:         t.join()      print 'All downloads finished'  if __name__ == "__main__":     main()  
def fun_name(*args):   if len(args) != 2:     raise TypeError('Two arguments required')  
&gt;&gt;&gt; seq = '012345' &gt;&gt;&gt; swapped_pairs = zip(seq[1::2] seq[::2]) &gt;&gt;&gt; ''.join(item for pair in swapped_pairs for item in pair) '103254'  
matplotlib draw() from matplotlib.pyplot import plot draw show plot([123]) draw() print('continue computation')  # at the end call show to ensure window won't close. show()  from matplotlib.pyplot import plot ion show ion() # enables interactive mode plot([123]) # result shows immediatelly (implicit draw())  print('continue computation')  # at the end call show to ensure window won't close. show()  
zipfile.write import zipfile myZipFile = zipfile.ZipFile("zip.zip" "w" ) myZipFile.write("test.py" "dir\\test.py" zipfile.ZIP_DEFLATED )  test.py dir 
__version__ version __version__ __version__ __all__ __author__ __version__ __future__ 
dummy_log=wx.LogNull()  dummy_log 
after Tk from tkinter import *  root = Tk()  def task():     print("hello")     root.after(2000 task)  # reschedule event in 2 seconds  root.after(2000 task) root.mainloop()  after def after(self ms func=None *args):     """Call function once after given time.      MS specifies the time in milliseconds. FUNC gives the     function which shall be called. Additional parameters     are given as parameters to the function call.  Return     identifier to cancel scheduling with after_cancel."""  
Session.query(Project).filter(Project.entries.any()) 
In [1]: import BeautifulSoup  In [2]: c = """&lt;HTML&gt;    ...:     &lt;HEAD&gt;    ...:         &lt;TITLE&gt;Title&lt;/TITLE&gt;    ...:         &lt;HTTP-EQUIV="PRAGMA" CONTENT="NO-CACHE"&gt;    ...:     &lt;/HEAD&gt;    ...:     &lt;BODY&gt;    ...:         ...    ...:         ...    ...:     &lt;/BODY&gt;    ...: &lt;/HTML&gt;    ...: """  In [3]: print BeautifulSoup.BeautifulSoup(c).prettify() &lt;html&gt;  &lt;head&gt;   &lt;title&gt;    Title   &lt;/title&gt;   &lt;http-equiv&gt;   &lt;/http-equiv&gt;  &lt;/head&gt;  &lt;body&gt;   ...         ...  &lt;/body&gt; &lt;/html&gt;   In [4]:   
from BeautifulSoup import BeautifulSoup soup = BeautifulSoup('&lt;p&gt;Blah blah blah &lt;a href="http://google.com"&gt;Google&lt;/a&gt;&lt;/p&gt;') for a in soup.findAll('a'):   a['href'] = a['href'].replace("google" "mysite")  result = str(soup)  
def spanningsets(items):     if not items: return     if len(items) == 1:         yield [[items[-1]]]     else:         for cc in spanningsets(items[:-1]):             yield cc + [[items[-1]]]             for i in range(len(cc)):                 yield cc[:i] + [cc[i] + [items[-1]]] + cc[i+1:]  for sset in spanningsets([1 2 3 4]):     print ' '.join(map(str sset))  [1] [2] [3] [4] [1 4] [2] [3] [1] [2 4] [3] [1] [2] [3 4] [1 3] [2] [4] [1 3 4] [2] [1 3] [2 4] [1] [2 3] [4] [1 4] [2 3] [1] [2 3 4] [1 2] [3] [4] [1 2 4] [3] [1 2] [3 4] [1 2 3] [4] [1 2 3 4]  
class CalcSomething(object):     def __init__(self):         self._cache = {}     def __call__(self a):         if a not in self._cache:              self._cache[a] = self.reallyCalc(a)         return self._cache[a]     def reallyCalc(self a):         return # a real answer calcSomething = CalcSomething()  calcSomething 
sort() else if len(lst) &gt;= 4:             # Tuple w/ sort info first     lines[n] = (lst[4] lines[n]) else:                         # Short lines to end     lines[n] = (['\377'] lines[n])  ['\377'] sort_by_field(list_of_str field_number separator=' ' defaultvalue='\xFF')     # decorates each value:     for i line in enumerate(list_of_str)):         fields = line.split(separator)         try:              # places original line as second item:             list_of_str[i] = (fields[field_number] line)         except IndexError:             list_of_str[i] = (defaultvalue line)     list_of_str.sort() # sorts list in place     # undecorates values:     for i group in enumerate(list_of_str))         list_of_str[i] = group[1] # the second item is original line  
soup.findAll() for t in  soup.findAll("table"):     print t.encode('latin1')  t 
isinstance(n int)  type(n) is int  return int(n) == n  int(3.0)==3.0 
main.py setup.py app/ -&gt;     __init__.py     package_a/ -&gt;        __init__.py        module_a.py     package_b/ -&gt;        __init__.py        module_b.py  python main.py main.py import app.package_a.module_a module_a.py import app.package_b.module_b from app.package_a import module_a app main.py setup.py main.py 
CryptProtectData CryptUnprotectData 
all : usera userb userc....  usera:        imapsync usera userb:        imapsync userb ....  
&lt;input type="text" name="username"&gt;  import cgi form = cgi.FieldStorage() print form["username"]  print request.GET['username'] # for GET form method print request.POST['username'] # for POST form method  from cherrypy import request print request.params['username']  form = web.input() print form.username  print request.form['username']  def index(self username):     print username  class SomeHandler(webapp2.RequestHandler):     def post(self):         name = self.request.get('username') # this will get the value from the field named username         self.response.write(name) # this will write on the document  
itertools.combinations(iterable r)  
import os  def my_action(source target env):     cmd = r'''echo its a small world after all \         its a small world after all'''     print cmd     return os.system(cmd)  my_cmd_builder = Builder(     action=my_action  # &lt;-- CRUCIAL PIECE OF SOLUTION     suffix = '.foo')  env = Environment() env.Append( BUILDERS = {'MyCmd' : my_cmd_builder } )  my_cmd = env.MyCmd('foo.foo'os.popen('which bash').read().strip())  scons: Reading SConscript files ... scons: done reading SConscript files. scons: Building targets ... my_action(["foo.foo"] ["/bin/bash"]) echo its a small world after all \         its a small world after all its a small world after all its a small world after all scons: done building targets.  import os  cmd = r'''echo its a small world after all \         its a small world after all'''  def my_action(source target env):     print cmd     return os.system(cmd)  my_cmd_builder = Builder(     action=my_action     suffix = '.foo')  env = Environment() env['_MY_CMD'] = cmd  # &lt;-- CREATE IMPLICIT DEPENDENCY ON CMD STRING env.Append( BUILDERS = {'MyCmd' : my_cmd_builder } )  my_cmd = env.MyCmd('foo.foo'os.popen('which bash').read().strip())  
datetime.strptime from datetime import datetime  datetime_object = datetime.strptime('Jun 1 2005  1:33PM' '%b %d %Y %I:%M%p')  datetime strptime strptime strftime strptime strftime 
join() from threading import Thread tlist = [] for i in range(3):     t = Thread(target=some_function)     t.start()     tlist.append(t)  # wait until threads have finished executing for t in tlist:     t.join()  print 'complete!'  
C:\&gt;C:\Python25\python.exe output.py | C:\Python25\python.exe input.py Give me the greeting. The greeting is: hello  output.py | input.py   
&gt;&gt;&gt; st = 'asdf' &gt;&gt;&gt; [st[:n+1] for n in range(len(st))] ['a' 'as' 'asd' 'asdf']  
def save(self):     if(self.id):         foo = Foo.objects.get(pk=self.id)         if(foo.timestamp &gt; self.timestamp):             raise Exception "trying to save outdated Foo"      super(Foo self).save()  
/g perlop /g m//g pos() pos perlfunc /c m//gc 
from django.core.files.base import ContentFile  if request.FILES.has_key('image_1'):     image_obj = Image()     image_obj.file.save(request.FILES['image_1'].name\                         ContentFile(request.FILES['image_1'].read()))     image_obj.save()     room_obj.image_set.create(image_obj)     room_obj.save()  
__enter__ as g __enter__() None 
1+(+(+2))  - + 1-(-(2)) = 1-(-2)          = 1+2          = 3  1-(-(-2)) = 1-(2)           = -1  ++ -- i j i += 1 j -= 1  
mimetypes.guess_extension(part.get_content_type())  if not filename:     ext = mimetypes.guess_extension(part.get_content_type())  if not ext:     guess = part["Content-Type"].split(";")      if guess[0] == "image/pjpeg":         guess[0] = "image/jpeg"      ext = mimetypes.guess_extension(guess[0])  if not ext:     ext = ".bin"  
public void init() {         interp = new PythonInterpreter(null new PySystemState());          PySystemState sys = Py.getSystemState();         sys.path.append(new PyString(rootPath));         sys.path.append(new PyString(modulesDir));     }  
# s is the string to parse loadavg = [float(x) for x in s.rsplit('load average: ' 1)[1].split(' ')]  
and or not 
from django.contrib import admin from django.contrib.auth.admin import UserAdmin from django.contrib.auth.models import User  class MyUserAdmin(UserAdmin):     list_filter = UserAdmin.list_filter + ('is_active')  admin.site.unregister(User) admin.site.register(User MyUserAdmin)  
-X pycache_prefix=PATH .pyc $PYTHONPYCACHEPREFIX sys.pycache_prefix None __pycache__ -B .pyc $PYTHONDONTWRITEBYTECODE Withdrawn *.py *.pyc 
import simplejson as json import lxml  class objectJSONEncoder(json.JSONEncoder):   """A specialized JSON encoder that can handle simple lxml objectify types       &gt;&gt;&gt; from lxml import objectify       &gt;&gt;&gt; obj = objectify.fromstring("&lt;Book&gt;&lt;price&gt;1.50&lt;/price&gt;&lt;author&gt;W. Shakespeare&lt;/author&gt;&lt;/Book&gt;")              &gt;&gt;&gt; objectJSONEncoder().encode(obj)       '{"price": 1.5 "author": "W. Shakespeare"}'         """       def default(selfo):         if isinstance(o lxml.objectify.IntElement):             return int(o)         if isinstance(o lxml.objectify.NumberElement) or isinstance(o lxml.objectify.FloatElement):             return float(o)         if isinstance(o lxml.objectify.ObjectifiedDataElement):             return str(o)         if hasattr(o '__dict__'):             #For objects with a __dict__ return the encoding of the __dict__             return o.__dict__         return json.JSONEncoder.default(self o)  objectify objectJSONEncoder 
__slots__ __slots__ __dict__ __dict__ __weakref__ __slots__ class Base:     __slots__ = 'foo' 'bar'  class Right(Base):     __slots__ = 'baz'   class Wrong(Base):     __slots__ = 'foo' 'bar' 'baz'        # redundant foo and bar  &gt;&gt;&gt; from sys import getsizeof &gt;&gt;&gt; getsizeof(Right()) getsizeof(Wrong()) (56 72)  &gt;&gt;&gt; w = Wrong() &gt;&gt;&gt; w.foo = 'foo' &gt;&gt;&gt; Base.foo.__get__(w) Traceback (most recent call last):   File &quot;&lt;stdin&gt;&quot; line 1 in &lt;module&gt; AttributeError: foo &gt;&gt;&gt; Wrong.foo.__get__(w) 'foo'  __slots__ __dict__ object __dict__ object __slots__ '__dict__' __slots__ __slots__ import timeit  class Foo(object): __slots__ = 'foo'  class Bar(object): pass  slotted = Foo() not_slotted = Bar()  def get_set_delete_fn(obj):     def get_set_delete():         obj.foo = 'foo'         obj.foo         del obj.foo     return get_set_delete  &gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(slotted))) 0.2846834529991611 &gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(not_slotted))) 0.3664822799983085  &gt;&gt;&gt; 0.3664822799983085 / 0.2846834529991611 1.2873325658284342  __slots__ __slots__ __dict__ __slots__ guppy.hpy sys.getsizeof __slots__ __dict__ __dict__ __dict__ __slots__ () __slots__ __dict__        Python 2.7             Python 3.6 attrs  __slots__  __dict__*   __slots__  __dict__* | *(no slots defined) none   16         56 + 272†   16         56 + 112† | †if __dict__ referenced one    48         56 + 272    48         56 + 112 two    56         56 + 272    56         56 + 112 six    88         56 + 1040   88         56 + 152 11     128        56 + 1040   128        56 + 240 22     216        56 + 3344   216        56 + 408      43     384        56 + 3344   384        56 + 752  __slots__ __slots__ &gt;&gt;&gt; Foo.foo &lt;member 'foo' of 'Foo' objects&gt; &gt;&gt;&gt; type(Foo.foo) &lt;class 'member_descriptor'&gt; &gt;&gt;&gt; getsizeof(Foo.foo) 72  __slots__ __dict__ object class Base(object):      __slots__ = ()  &gt;&gt;&gt; b = Base() &gt;&gt;&gt; b.a = 'a' Traceback (most recent call last):   File &quot;&lt;pyshell#38&gt;&quot; line 1 in &lt;module&gt;     b.a = 'a' AttributeError: 'Base' object has no attribute 'a'  __slots__ class Child(Base):     __slots__ = ('a')  c = Child() c.a = 'a'  &gt;&gt;&gt; c.b = 'b' Traceback (most recent call last):   File &quot;&lt;pyshell#42&gt;&quot; line 1 in &lt;module&gt;     c.b = 'b' AttributeError: 'Child' object has no attribute 'b'  __dict__ '__dict__' __slots__ class SlottedWithDict(Child):      __slots__ = ('__dict__' 'b')  swd = SlottedWithDict() swd.a = 'a' swd.b = 'b' swd.c = 'c'  &gt;&gt;&gt; swd.__dict__ {'c': 'c'}  __slots__ __dict__ class NoSlots(Child): pass ns = NoSlots() ns.a = 'a' ns.b = 'b'  &gt;&gt;&gt; ns.__dict__ {'b': 'b'}  __slots__ class BaseA(object):      __slots__ = ('a')  class BaseB(object):      __slots__ = ('b')  &gt;&gt;&gt; class Child(BaseA BaseB): __slots__ = () Traceback (most recent call last):   File &quot;&lt;pyshell#68&gt;&quot; line 1 in &lt;module&gt;     class Child(BaseA BaseB): __slots__ = () TypeError: Error when calling the metaclass bases     multiple bases have instance lay-out conflict  __slots__ from abc import ABC  class AbstractA(ABC):     __slots__ = ()  class BaseA(AbstractA):      __slots__ = ('a')  class AbstractB(ABC):     __slots__ = ()  class BaseB(AbstractB):      __slots__ = ('b')  class Child(AbstractA AbstractB):      __slots__ = ('a' 'b')  c = Child() # no problem!  '__dict__' __slots__ class Foo(object):     __slots__ = 'bar' 'baz' '__dict__'  &gt;&gt;&gt; foo = Foo() &gt;&gt;&gt; foo.boink = 'boink'  '__dict__' __slots__ __slots__ __dict__ __slots__ &quot;__dict__&quot; __slots__ __weakref__ __slots__ from collections import namedtuple class MyNT(namedtuple('MyNT' 'bar baz')):     &quot;&quot;&quot;MyNT is an immutable and lightweight object&quot;&quot;&quot;     __slots__ = ()  &gt;&gt;&gt; nt = MyNT('bar' 'baz') &gt;&gt;&gt; nt.bar 'bar' &gt;&gt;&gt; nt.baz 'baz'  AttributeError __dict__ &gt;&gt;&gt; nt.quux = 'quux' Traceback (most recent call last):   File &quot;&lt;stdin&gt;&quot; line 1 in &lt;module&gt; AttributeError: 'MyNT' object has no attribute 'quux'  __dict__ __slots__ = () __slots__ class Foo(object):      __slots__ = 'foo' 'bar' class Bar(object):     __slots__ = 'foo' 'bar' # alas would work if empty i.e. ()  &gt;&gt;&gt; class Baz(Foo Bar): pass Traceback (most recent call last):   File &quot;&lt;stdin&gt;&quot; line 1 in &lt;module&gt; TypeError: Error when calling the metaclass bases     multiple bases have instance lay-out conflict  __slots__ '__dict__' __dict__ class Foo(object): __slots__ = () class Bar(object): __slots__ = () class Baz(Foo Bar): __slots__ = ('foo' 'bar') b = Baz() b.foo b.bar = 'foo' 'bar'  __slots__ class AbstractBase:     __slots__ = ()     def __init__(self a b):         self.a = a         self.b = b     def __repr__(self):         return f'{type(self).__name__}({repr(self.a)} {repr(self.b)})'  class Foo(AbstractBase):     __slots__ = 'a' 'b'  class AbstractBaseC:     __slots__ = ()     @property     def c(self):         print('getting c!')         return self._c     @c.setter     def c(self arg):         print('setting c!')         self._c = arg  AbstractBase class Concretion(AbstractBase AbstractBaseC):     __slots__ = 'a b _c'.split()  __dict__ __weakref__ &gt;&gt;&gt; c = Concretion('a' 'b') &gt;&gt;&gt; c.c = c setting c! &gt;&gt;&gt; c.c getting c! Concretion('a' 'b') &gt;&gt;&gt; c.d = 'd' Traceback (most recent call last):   File &quot;&lt;stdin&gt;&quot; line 1 in &lt;module&gt; AttributeError: 'Concretion' object has no attribute 'd'  __class__ __slots__ __slots__ __slots__ collections __slots__ __dict__ __weakref__ __slots__ __slots__ TypeError &gt;&gt;&gt; pickle.loads(pickle.dumps(f)) TypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled  -1 2 4 &gt;&gt;&gt; pickle.loads(pickle.dumps(f -1)) &lt;__main__.Foo object at 0x1129C770&gt;  &gt;&gt;&gt; pickle.loads(pickle.dumps(f 2)) &lt;__main__.Foo object at 0x1129C770&gt;  &gt;&gt;&gt; pickle.loads(pickle.dumps(f 4)) &lt;__main__.Foo object at 0x1129C770&gt;  __slots__ __dict__ __slots__ __slots__ &gt;&gt;&gt; class Foo(object): pass &gt;&gt;&gt; class Bar(object): __slots__ = ()  &gt;&gt;&gt; foos = [Foo() for f in xrange(1000000)] &gt;&gt;&gt; bars = [Bar() for b in xrange(1000000)]  guppy.hpy().heap() &gt;&gt;&gt; guppy.hpy().heap() Partition of a set of 2028259 objects. Total size = 99763360 bytes.  Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)      0 1000000  49 64000000  64  64000000  64 __main__.Foo      1     169   0 16281480  16  80281480  80 list      2 1000000  49 16000000  16  96281480  97 __main__.Bar      3   12284   1   987472   1  97268952  97 str ...  __dict__ &gt;&gt;&gt; for f in foos: ...     f.__dict__ &gt;&gt;&gt; guppy.hpy().heap() Partition of a set of 3028258 objects. Total size = 379763480 bytes.  Index  Count   %      Size    % Cumulative  % Kind (class / dict of class)      0 1000000  33 280000000  74 280000000  74 dict of __main__.Foo      1 1000000  33  64000000  17 344000000  91 __main__.Foo      2     169   0  16281480   4 360281480  95 list      3 1000000  33  16000000   4 376281480  99 __main__.Bar      4   12284   0    987472   0 377268952  99 str ...  __dict__ __weakrefs__ __dict__ __slots__ = [] 
urls.py File "c:\projects\iFriends\..\iFriends\urls.py" line 17 in &lt;module&gt;    (r'^admin/' include('django.contribute.admin.urls'))  16. (r'^/' 'some_stuff....')      # &lt;-- missed comma here 17. (r'^admin/' include('django.contribute.admin.urls'))  urls.py urls.py url.py urls.py 
 &gt;&gt;&gt; name = (name for name in ('bob''fred') if name=='bob')  &gt;&gt;&gt; name  'bob'  &gt;&gt;&gt; name = (name for name in ('bob''bob') if name=='bob') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; ValueError: too many values to unpack  &gt;&gt;&gt; name = (name for name in ('fred''joe') if name=='bob') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; ValueError: need more than 0 values to unpack  
collections.defaultdict from collections import defaultdict  my_dict = defaultdict(int) my_dict[key] += 1  dict None KeyError dict if key in my_dict:     my_dict[key] += 1 else:     my_dict[key] = 1  
def update_object_wrapper(request object_id *args **kwargs):     redirect_to = reverse('your object edit url name' object_id)     return update_object(request object_id post_save_redirect=redirect_to *args **kwargs)  
def get_params(packagename):     module = __import__('alpha.%s' % packagename)     return module.__dict__['REQUIRED_PARAMS']  
import sched time s = sched.scheduler(time.time time.sleep) def do_something(sc):      print("Doing stuff...")     # do your stuff     s.enter(60 1 do_something (sc))  s.enter(60 1 do_something (s)) s.run()  asyncio trio tkinter PyQt5 gobject kivy 
A.x B self.x A x #!/usr/bin/env python  class A:     x = []     def add(self):         self.x.append(1)  class B:     def __init__(self):         self.x = []     def add(self):         self.x.append(1)  x = A() y = A() x.add() y.add() print("A's x:" x.x)  x = B() y = B() x.add() y.add() print("B's x:" x.x)  A's x: [1 1] B's x: [1]  
annotate Contest.objects.get(pk=id).image_set.annotate(score=Sum('vote__value')).order_by( 'score' )  
t = TemplateLookup(directories=['/tmp'] default_filters=['trim'])  
urlparse.urljoin urllib.parse.urljoin &gt;&gt;&gt; try: from urlparse import urljoin # Python2 ... except ImportError: from urllib.parse import urljoin # Python3 ... &gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html" "anotherpage.html") 'http://www.asite.com/folder/anotherpage.html' &gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html" "folder2/anotherpage.html") 'http://www.asite.com/folder/folder2/anotherpage.html' &gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html" "/folder3/anotherpage.html") 'http://www.asite.com/folder3/anotherpage.html' &gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html" "../finalpage.html") 'http://www.asite.com/finalpage.html'  try:     from urlparse import urljoin  # Python2 except ImportError:     from urllib.parse import urljoin  # Python3  
&gt;&gt;&gt; Foo.objects.all().values('user__id') [{'user__id': 1} {'user__id' 2} {'user__id': 3}]  
s1='*'*100000 s2='+'*100000  
random.random() p p def flip(p):     return 'H' if random.random() &lt; p else 'T'  &gt;&gt;&gt; N = 100 &gt;&gt;&gt; flips = [flip(0.2) for i in xrange(N)] &gt;&gt;&gt; float(flips.count('H'))/N 0.17999999999999999  # Approximately 20% of the coins are heads  &gt;&gt;&gt; N = 10000 &gt;&gt;&gt; flips = [flip(0.2) for i in xrange(N)] &gt;&gt;&gt; float(flips.count('H'))/N 0.20549999999999999  # Better approximation   
linspace &gt;&gt;&gt; np.linspace(0111) array([ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1. ]) &gt;&gt;&gt; np.linspace(0110endpoint=False) array([ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9])  numpy.arange &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; np.arange(0.0 1.0 0.1) array([ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9])  arange &gt;&gt;&gt; numpy.arange(1 1.3 0.1) array([1.  1.1 1.2 1.3])  
simplejson simplejson.dump() 
relations = request.POST.getlist('relations')  
class RandomResponder(object):     choices = [A B C]      @classmethod     def which(cls):         return random.choice(cls.choices)      def __getattr__(self attr):         return getattr(self.which() attr)  class RandomResponder(object):     choices = [A B C]      def __getattr__(self attr):         # we define a function that actually gets called         # which takes up the first positional argument         # the rest are left to args and kwargs         def doCall(which *args **kwargs):             # get the attribute of the appropriate one call with passed args             return getattr(self.choices[which] attr)(*args **kwargs)         return doCall  
1/6 X X~U[16] X [01) [01/6) [1/62/6) [2/63/6) [3/64/6) [4/65/6) [5/61) [01) [00.2) [0.20.4) [0.40.55) 0.550.7) [0.70.84) [0.841) import random sampleMassDist = (0.2 0.1 0.15 0.15 0.25 0.15) # assume sum of bias is 1 def roll(massDist):     randRoll = random.random() # in [01]     sum = 0     result = 1     for mass in massDist:         sum += mass         if randRoll &lt; sum:             return result         result+=1  print(roll(sampleMassDist))  
import feedparser d = feedparser.parse('http://www.digg.com/rss/index.xml') title = d.channel.title  
myList = sorted(set(myList))  set sorted 
def f(...):     ... f = staticmethod(f)  @staticmethod def f(...):  
def f7(seq):     seen = set()     seen_add = seen.add     return [x for x in seq if not (x in seen or seen_add(x))]  seen.add seen_add seen.add seen.add seen.add seen.add() None or 
import re import pprint import sys  class Despacho(object):     """     Class to parse each line applying the regexp and storing the results     for future use     """     #used a dict with the keys instead of functions.     regexp = {         ('processo'           'data'           'despacho'): re.compile(r'No.([\d]{9})  ([\d]{2}/[\d]{2}/[\d]{4})  (.*)')         ('titular'): re.compile(r'Tit.(.*)')         ('procurador'): re.compile(r'Procurador: (.*)')         ('documento'): re.compile(r'C.N.P.J./C.I.C./N INPI :(.*)')         ('apresentacao'          'natureza'): re.compile(r'Apres.: (.*) ; Nat.: (.*)')         ('marca'): re.compile(r'Marca: (.*)')         ('classe'): re.compile(r'Clas.Prod/Serv: (.*)')         ('complemento'): re.compile(r'\*(.*)')     }      def __init__(self):         """         'complemento' is the only field that can be multiple in a single registry         """         self.complemento = []       def read(self line):         for attrs pattern in Despacho.regexp.iteritems():             m = pattern.match(line)             if m:                 for groupn attr in enumerate(attrs):                     # special case complemento:                     if attr == 'complemento':                         self.complemento.append(m.group(groupn + 1))                     else:                         # set the attribute on the object                         setattr(self attr m.group(groupn + 1))      def __repr__(self):         # defines object printed representation         d = {}         for attrs in self.regexp:             for attr in attrs:                 d[attr] = getattr(self attr None)         return pprint.pformat(d)  def process(rpi):     """     read data and process each group     """     #Useless line since you're doing a for anyway     #rpi = (line for line in rpi)     group = False      for line in rpi:         if line.startswith('No.'):             group = True             d = Despacho()                  if not line.strip() and group: # empty line - end of block             yield d             group = False          d.read(line)  def main():     arquivo = open('rm1972.txt') # file to process     for desp in process(arquivo):         print desp # can print directly here.         print('-' * 20)     return 0  if __name__ == '__main__':     main()  
LDAP_REFERRAL_LIMIT_EXCEEDED      0x61   The referral limit was exceeded.  ldap.set_option(ldap.OPT_REFERRALS 0)  
__debug__ if __debug__:   print "If this prints you're not running python -O." else:   print "If this prints you are running python -O!"  __debug__ if 0: 
import string import itertools  chars = string.digits + string.letters MAX_CHARS = 4 for nletters in range(MAX_CHARS):     for word in itertools.product(chars repeat=nletters + 1):         print (''.join(word))  15018570 MAX_CHARS for 
MainWindow forms/frmmain.py _pulse() on_entry_activate() def on_entry_activate(self entry):     text = entry.get_text().strip()     if text:         store = entry.get_completion().get_model()         if text not in [row[0] for row in store]:             store.append((text ))         thread = threads.RecommendationsFetcher(text self.queue)# &lt;- 1         self.idle_timer = gobject.idle_add(self._pulse)# &lt;- 2         tv_results = self.widgets.get_widget('tv_results')         model = tv_results.get_model()         model.clear()         thread.setDaemon(True)# &lt;- 3         progress_update = self.widgets.get_widget('progress_update')         progress_update.show()         thread.start()# &lt;- 4  
__init__ self. class SomeClass( object ):     classVariable = 0     def __init__( self ):         self.instanceVariable= 0  classVariable self.classVariable SomeClass.classVariable instanceVariable self. 
inv_map = {v: k for k v in my_map.iteritems()}  inv_map = {v: k for k v in my_map.items()}  
class X:                                             def __init__(self):      self._value = 90       def _get(self):         return self._value     def _set(self value):      self._value = value       value = property(_get _set)  _value setattr(x 'value' 99)  
def test(request):     return render_to_response("test.html" {                                             "s1": u"dados"                                             "s2": u"aprovação"                                             }                               )  
inspect.classify_class_attrs(cls) ('name' 'kind' e.g. 'method' or 'data' defining class property) &gt;&gt;&gt; import inspect &gt;&gt;&gt; import pprint &gt;&gt;&gt; import calendar &gt;&gt;&gt;  &gt;&gt;&gt; hc = calendar.HTMLCalendar() &gt;&gt;&gt; hc.__class__.pathos = None &gt;&gt;&gt; calendar.Calendar.phobos = None &gt;&gt;&gt; pprint.pprint(inspect.classify_class_attrs(hc.__class__)) [...  ('__doc__'   'data'   &lt;class 'calendar.HTMLCalendar'&gt;   '\n    This calendar returns complete HTML pages.\n    ')  ...  ('__new__'   'data'   &lt;type 'object'&gt;   &lt;built-in method __new__ of type object at 0x814fac0&gt;)  ...  ('cssclasses'   'data'   &lt;class 'calendar.HTMLCalendar'&gt;   ['mon' 'tue' 'wed' 'thu' 'fri' 'sat' 'sun'])  ('firstweekday'   'property'   &lt;class 'calendar.Calendar'&gt;   &lt;property object at 0x98b8c34&gt;)  ('formatday'   'method'   &lt;class 'calendar.HTMLCalendar'&gt;   &lt;function formatday at 0x98b7bc4&gt;)  ...  ('pathos' 'data' &lt;class 'calendar.HTMLCalendar'&gt; None)  ('phobos' 'data' &lt;class 'calendar.Calendar'&gt; None)  ...  ]  
dir __dir__() __getattr__() __getattribute__() dir() __dir__() obj.__dict__ type(obj).__dict__ __getattr__ AttributeError __dir__ __methods__ __members__ 
raw_input "AB" * 3 "ABABAB" "L" * 3.14 "LLL|" salesAmount = float(raw_input("Insert sale amount here\n"))  
__init__ self.operations = &lt;whatever&gt; 
import imp import os MODULE_EXTENSIONS = ('.py' '.pyc' '.pyo')  def package_contents(package_name):     file pathname description = imp.find_module(package_name)     if file:         raise ImportError('Not a package: %r' package_name)     # Use a set because some may be both source and compiled.     return set([os.path.splitext(module)[0]         for module in os.listdir(pathname)         if module.endswith(MODULE_EXTENSIONS)])  
__init__ Action_Form __init__ ModelForm class Action_Form(forms.ModelForm):     def __init__(self *args **kwargs):         super(Action_Form self).__init__(*args **kwargs)         self.fields['from_company'].queryset = Contact.object.filter(...  Action_Form myfilter = kwargs['myfilter'] del kwargs['myfilter']  myfilter = kwargs.pop('myfilter')  
zippedfile = open('%stemp/tempfile.zip' % settings.MEDIA_ROOT 'wb+')  
#!/usr/bin/env python  import os from win32com.client import Dispatch  fh = open('foo.txt' 'w') fh.write('hello ') fh.close()  cwd = os.getcwd()  session = Dispatch('MAPI.session') session.Logon(''''0100'exchange.foo.com\ncorey'); session.Logoff()  os.chdir(cwd)  fh = open('foo.txt' 'a') fh.write('world') fh.close()  
mov_average_expw() alpha (1 - alpha) &gt;&gt;&gt; alpha = 0.5 &gt;&gt;&gt; assert 0 &lt; alpha &lt;= 1.0 &gt;&gt;&gt; av = sum(alpha**n.days * iq  ...     for n iq in map(lambda (day iq) today=max(days): (today-day iq)  ...         sorted(zip(days IQ) key=lambda p: p[0] reverse=True))) 95.0  from collections import namedtuple from operator    import itemgetter  def smooth(iq_data alpha=1 today=None):     """Perform exponential smoothing with factor `alpha`.      Time period is a day.     Each time period the value of `iq` drops `alpha` times.     The most recent data is the most valuable one.     """     assert 0 &lt; alpha &lt;= 1      if alpha == 1: # no smoothing         return sum(map(itemgetter(1) iq_data))      if today is None:         today = max(map(itemgetter(0) iq_data))      return sum(alpha**((today - date).days) * iq for date iq in iq_data)  IQData = namedtuple("IQData" "date iq")  if __name__ == "__main__":     from datetime import date      days = [date(200811) date(200812) date(200817)]     IQ = [110 105 90]     iqdata = list(map(IQData days IQ))     print("\n".join(map(str iqdata)))      print(smooth(iqdata alpha=0.5))  $ python26 smooth.py IQData(date=datetime.date(2008 1 1) iq=110) IQData(date=datetime.date(2008 1 2) iq=105) IQData(date=datetime.date(2008 1 7) iq=90) 95.0  
any @accepts(any any any int) any @accepts 
super() object &gt;&gt;&gt; class X(object):         def a(self):             print 'a'  &gt;&gt;&gt; class Y(X):         def a(self):             super(Y self).a()             print 'b'  &gt;&gt;&gt; c = Y() &gt;&gt;&gt; c.a() a b  
import test.py  import test  
# Over-explaining a bit: def magic(numList):         # [123]     s = map(str numList)   # ['1''2''3']     s = ''.join(s)          # '123'     s = int(s)              # 123     return s   # How I'd probably write it: def magic(numList):     s = ''.join(map(str numList))     return int(s)   # As a one-liner   num = int(''.join(map(strnumList)))   # Functionally: s = reduce(lambda xy: x+str(y) numList '') num = int(s)   # Using some oft-forgotten built-ins: s = filter(str.isdigit repr(numList)) num = int(s)  
In [2]: class C(object):    ...:     def method(self a b c):    ...:         print a b c    ...:    ...:  In [3]: def api_function(a_func):    ...:     a_func("One Fish" "Two Fish" "Blue Fish")    ...:    ...:  In [4]: c = C()  In [5]: api_function(c.method) One Fish Two Fish Blue Fish  
(?=...) (?&lt;=...) 
u'Capit\xe1n\n'  Capit\xc3\xa1n  &gt;&gt;&gt; open('f2').read() 'Capit\\xc3\\xa1n\n'  string_escape In [15]: print 'Capit\\xc3\\xa1n\n'.decode('string_escape') Capitán  \\xc3\\xa1 s = u'Capit\xe1n\n' sutf8 = s.encode('UTF-8') open('utf-8.out' 'w').write(sutf8)  utf-8.out 
.value void * c_void_p void * from ctypes import *  liblibrary = cdll.LoadLibrary('liblibrary.so')  def py_library_hook(strings n):     return 0  # First argument to CFUNCTYPE is the return type: LIBRARY_HOOK_FUNC = CFUNCTYPE(c_int POINTER(c_char_p) c_int) hook = LIBRARY_HOOK_FUNC(py_library_Hook) ptr = c_void_p.in_dll(liblibrary 'library_hook') ptr.value = cast(hook c_void_p).value  
import sys  def Factorial(n): # return factorial     result = 1     for i in range (1n):         result = result * i     print "factorial is "result     return result  print Factorial(10)  
# -*- coding: utf-8 -*- print u"åäö".encode('utf-8')  import sys for line in sys.stdin:     # Decode what you receive:     line = line.decode('iso8859-1')      # Work with Unicode internally:     line = line.upper()      # Encode what you send:     line = line.encode('utf-8')     sys.stdout.write(line)  
i=2 while i &lt; n:     if something:        do something        i += 1     else:         do something else          i = 2 #restart the loop    
s[0:-1] s[:-1] myList = ['a' 'b' 'c' 'd' 'e'] print myList[-1] # prints 'e'  myList[2:4] ['c' 'd'] myList[:index] myList[0:index] myList[index:] myList[index:len(myList)] index print myList[2:] ['c' 'd' 'e'] print myList[:] myList[0:len(myList)] 
dir(Team) teamplayer_set t = Team.objects.get(pk=168) for x in t.teamplayer_set.all():   if x.captain:     print "%s (Captain)" % (x.player.name)   else:     print x.player.name  
&gt;&gt;&gt; nums = [12345] &gt;&gt;&gt; [(xy) for x in nums for y in nums] [(1 1) (1 2) (1 3) (1 4) (1 5) (2 1) (2 2) (2 3) (2 4) (2 5) (3 1) (3 2) (3 3) (3 4) (3 5) (4 1) (4 2) (4 3) (4 4) (4 5) (5 1) (5 2) (5 3) (5 4) (5 5)] &gt;&gt;&gt; min(_ key=lambda pair: pair[0]/pair[1]) (1 5)  from __future__ import division 
sep= end= print print('.' end='')  print('a' 'b' 'c' sep='')  flush=True print('.' end='' flush=True)  print __future__ from __future__ import print_function  flush print __future__ sys.stdout.flush() sys.stdout.write() import sys sys.stdout.write('.')  sys.stdout.flush()  stdout 
from lepl import (AnyBut Digit Drop Eos Integer Letter                   NON_GREEDY Regexp Space Separator Word)  # EBNF # name = ( letter | "_" )  { letter | "_" | digit } ; name = Word(Letter() | '_'             Letter() | '_' | Digit()) # words = word  space+  word  { space+  word } ; # two or more space-separated words (non-greedy to allow comment at the end) words = Word()[2::NON_GREEDY ~Space()[1:]] &gt; list # value = integer | word | words  ; value = (Integer() &gt;&gt; int) | Word() | words # comment = "#"  { all characters - "\n" }  ( "\n" | EOF ) ; comment = '#' &amp; AnyBut('\n')[:] &amp; ('\n' | Eos())  with Separator(~Regexp(r'\s*')):     # statement = name  "="  value ;     statement = name &amp; Drop('=') &amp; value &gt; tuple     # suite     = "{"  { comment | statement }  "}" ;     suite     = Drop('{') &amp; (~comment | statement)[:] &amp; Drop('}') &gt; dict     # block     = name  suite ;     block     = name &amp; suite &gt; tuple     # config    = { comment | block } ;     config    = (~comment | block)[:] &amp; Eos() &gt; dict  from pprint import pprint  pprint(config.parse(open('input.cfg').read()))  [{'block1': {'othervalue': 32423432              'some_value': ['some' 'other' 'kind' 'of' 'data']              'value': 'data'}   'block2': {'othervalue': 32423432              'some_value': ['some' 'other' 'kind' 'of' 'data']              'value': 'data'}}]  
f = open('myfile.txt' 'w') for x in range(255):     ip = "10.1.1.%s\n" % str(x)     f.write(ip) f.close()  
'_'.join(['welcome' 'to' 'stack' 'overflow']) '_'.join(('welcome' 'to' 'stack' 'overflow'))  'welcome_to_stack_overflow'  
def F(n):     if n == 0: return 0     elif n == 1: return 1     else: return F(n-1)+F(n-2)  from math import sqrt def F(n):     return ((1+sqrt(5))**n-(1-sqrt(5))**n)/(2**n*sqrt(5))  def F():     ab = 01     while True:         yield a         a b = b a + b  def SubFib(startNumber endNumber):     n = 0     cur = f(n)     while cur &lt;= endNumber:         if startNumber &lt;= cur:             print cur         n += 1         cur = f(n)  def SubFib(startNumber endNumber):     for cur in F():         if cur &gt; endNumber: return         if cur &gt;= startNumber:             yield cur  for i in SubFib(10 200):     print i  
def addItem(item name offset):           if isinstance(item dict):                 lines.append(offset + u"&lt;%s&gt;" % name)                 addDict(item offset + u" " * 4)                 lines.append(offset + u"&lt;/%s&gt;" % name)           else:                 lines.append(offset + u"&lt;%s&gt;%s&lt;/%s&gt;" % (name escape(unicodify(item)) name))  def addList(valuename offset):         for item in value:             addItem(item name offset)  def addDict(node offset):         for name value in node.iteritems():             if isinstance(value list):                 addList(value name offset)             else:                 addItem(value name offset)  
f = open('filename string'); lines = f.readlines()  # remove empty lines lines = [l for l in lines if len(l.strip()) &gt; 0] header = lines[0] line = lines[1].split(' ') column1 = line[0] column2 = line[1] ...  total_lines = len(lines) total_columns = len(line)  
__getattr__ class dispatcher(object): pass    def __getattr__(self name):      # logic to determine if 'name' is a function and what      # function should be returned      return the_func server = SimpleXMLRPCServer(("localhost" 8000)) server.register_instance(dispatcher())  
results = [(getattr(obj field.attname) obj.pk) for obj in queryset or []]  
my_function() debug two.py one.py -&gt; two.py -&gt; one.py NameError constants.py ------------ debug = True  one.py ------ from constants import debug #...  two.py ------ from constants import debug #...  
__len__ sys.maxsize len() __len__ __len__ len() 
__init__ 
&gt;&gt;&gt; "blah" * 5 'blahblahblahblahblah'  
files = os.listdir(u'test_source')  for f in files:      pf = os.path.join(u'test_source' f)     print pf.encode('ascii' 'replace') os.path.exists(pf)  test_source\ex True test_source\joe True test_source\mie.txt True test_source\__()'''.txt True test_source\????.txt True  os.listdir os.walk print 
enumerate indices = 0 2 somelist = [i for j i in enumerate(somelist) if j not in indices]  
d = {}  
' '.join([str(x) for x in list])  # list comprehension ' '.join(str(x) for x in list)    # generator expression  
import operator tuple(map(operator.add a b))  
from IPython import embed  embed()  
for image_name in image_fields:     print "image name is: " image_name     setattr(new_form 'clean_' + image_name              lambda self iname=image_name: self._clean_photo(iname))  
# Python 2 def is_numeric(obj):     attrs = ['__add__' '__sub__' '__mul__' '__div__' '__pow__']     return all(hasattr(obj attr) for attr in attrs)  # Python 3 def is_numeric(obj):     attrs = ['__add__' '__sub__' '__mul__' '__truediv__' '__pow__']     return all(hasattr(obj attr) for attr in attrs)  numpy.array(['1']) numpy.ndarray  ... and not (isinstance(obj ndarray) and obj.dtype.kind in 'OSU')  def is_numeric_paranoid(obj):     try:         obj+obj obj-obj obj*obj obj**obj obj/obj     except ZeroDivisionError:         return True     except Exception:         return False     else:         return True  
class GeneratorWrap(object):        def __init__(self generator):           self.generator = generator        def __iter__(self):           return self        def next(self):           for o in self.generator:               return o           raise StopIteration # If you don't care about the iterator protocol remove this line and the __iter__ method.  def example_generator():     for i in [12345]:         yield i  gen = GeneratorWrap(example_generator()) print gen.next()  # prints 1 print gen.next()  # prints 2  
re.IGNORECASE flags search match sub re.search('test' 'TeSt' re.IGNORECASE) re.match('test' 'TeSt' re.IGNORECASE) re.sub('test' 'xxxx' 'Testing' flags=re.IGNORECASE)  
hands = {} # Create a new dictionary to hold the hands. hands["flush"] = make_hand(deck) # Generate some hands using your function. hands["straight"] = make_hand(deck) # Generate another hand with a different name. print hands["flush"] # Access the hand later.  
print "".join([e[1] * e[0] for e in elt])  x = [] for e in elt:   x.append(e[1] * e[0]) print "".join(x)  for elt e 
ipython python ipython #!/usr/bin/env python  PATH $ python yourprogram.py  $ python2.5 yourprogram.py  
import gtk  # Even I am ashamed by this # Set up a one-time signal handler to detect size changes def _on_size_req(win req):     x y w h = win.get_allocation()     print x y w h   # just to prove to you its working     win.disconnect(win.connection_id)     win.unmaximize()     win.window.move_resize(x y w h)  # Create the window connect the signal then maximise it w = gtk.Window() w.show_all() w.connection_id = w.connect('size-request' _on_size_req) # Maximizing will fire the signal handler just once # unmaximize and then resize to the previously set size for maximization. w.maximize()  # run this monstrosity gtk.main()  
subprocess.Popen() sys.exit() os.abort() 
tests/ tests.py tests/models.py tests/ INSTALLED_APPS INSTALLED_APPS TransactionTestCase "myapp.tests" from django.core.management import call_command from django.db.models import loading loading.cache.loaded = False call_command('syncdb' verbosity=0)  
global get global get nonlocal global nonlocal get ...  global get oldget 
 Left(Target Len(Target)-1))   num_rows = Application.ActiveDocument.Tables(2).Rows.Count  For n = 1 To num_rows       Descr = Application.ActiveDocument.Tables(2).Cell(n 2).Range.Text   For Each row in Application.ActiveDocument.Tables(2).Rows       Descr = row.Cells(2).Range.Text  
&gt;&gt;&gt; doc= pxdom.parseString('&lt;a&gt;&lt;b&gt;c&lt;/b&gt;&lt;/a&gt;') &gt;&gt;&gt; doc.domConfig.setParameter('format-pretty-print' True) &gt;&gt;&gt; print doc.pxdomContent &lt;?xml version="1.0" encoding="utf-16"?&gt; &lt;a&gt;   &lt;b&gt;c&lt;/b&gt; &lt;/a&gt;  &gt;&gt;&gt; from xml.dom import minidom &gt;&gt;&gt; def newwritexml(self writer indent= '' addindent= '' newl= ''): ...     if len(self.childNodes)==1 and self.firstChild.nodeType==3: ...         writer.write(indent) ...         self.oldwritexml(writer) # cancel extra whitespace ...         writer.write(newl) ...     else: ...         self.oldwritexml(writer indent addindent newl) ...  &gt;&gt;&gt; minidom.Element.oldwritexml= minidom.Element.writexml &gt;&gt;&gt; minidom.Element.writexml= newwritexml  
urls.py (r'^(?P&lt;page_name&gt;\S*)$' 'Blah.content.views.index')  static.serve static.serve 
CREATE TABLE t1(   a INTEGER PRIMARY KEY   b INTEGER ); INSERT INTO t1 VALUES(NULL123); INSERT INTO t1 VALUES((SELECT max(a)   FROM t1)+1123); sqlite3_last_insert_rowid() 
matrix = [[ab][cd][ef]]  class Matrix(object):     def __init__(self rows columns default=0):         self.m = []         for i in range(rows):             self.m.append([default for j in range(columns)])      def __getitem__(self index):         return self.m[index]  m = Matrix(105) m[3][6] = 7 print m[3][6] // -&gt; 7  class Matrix(object):     def __init__(self *dims):         self._shortcuts = [i for i in self._create_shortcuts(dims)]         self._li = [None] * (self._shortcuts.pop())         self._shortcuts.reverse()      def _create_shortcuts(self dims):         dimList = list(dims)         dimList.reverse()         number = 1         yield 1         for i in dimList:             number *= i             yield number      def _flat_index(self index):         if len(index) != len(self._shortcuts):             raise TypeError()          flatIndex = 0         for i num in enumerate(index):             flatIndex += num * self._shortcuts[i]         return flatIndex      def __getitem__(self index):         return self._li[self._flat_index(index)]      def __setitem__(self index value):         self._li[self._flat_index(index)] = value  m = Matrix(4526) m[2313] = 'x' m[2313] // -&gt; 'x'  
datetime datetime.timedelta from datetime import datetime  t1 = datetime.strptime("Mon 17 Nov 2008 01:45:32 +0200""%a %d %b %Y %H:%M:%S +0200") t2 = datetime.now()  tdelta = t2 - t1 # actually a datetime.timedelta object print tdelta.days  
line.strip() line.rstrip('\r\n') print '"%s"' % line  print '"' + line + '"'  for line in f:     print '"' + line.strip('\r\n') + '"'  str.splitlines with open('input.txt' 'rU') as f:     for line in f.read().splitlines():         print '"%s"' % line  
&gt;&gt;&gt; from M2Crypto import DSA BIO &gt;&gt;&gt; dsa = DSA.gen_params(1024) ..+..etc &gt;&gt;&gt; mem = BIO.MemoryBuffer() &gt;&gt;&gt; dsa.gen_key() &gt;&gt;&gt; dsa.save_key_bio(mem cipher=None) 1 &gt;&gt;&gt; dsa.save_pub_key_bio(mem) 1 &gt;&gt;&gt; print mem.getvalue() -----BEGIN DSA PRIVATE KEY----- MIIBuwIBAAKBgQDowiLFDXGwaWIOkZybeeqSXYZ8KCLmXg5XfnAtDBlVOokB91Rj etc. -----END DSA PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MIIBtzCCASsGByqGSM44BAEwggEeAoGBAOjCIsUNcbBpYg6RnJt56pJdhnwoIuZe Dld+cC0MGVU6iQH3VGNEzKycBVQeVYke3itZwQALSlT2JfUsmOjeZYIkc9l2YYob rixObXfQyc0AOBM/J53F0F6R8+xvEwN/Hmdd9SjjbdZi8gve+dr9UfnKHXi0KPUF s2ougGhXeEjTAhUAiW5bMzG8nCVjXErgwaDEx+JEdtECgYACba2quw3xibhT3JNd sDh0gIRpHPQgIgxgzGv6A09Vdb4VgtWf0MYAo6gAhxsZIWWKzQ94Oe1nf7OhC+B+ VjT+PW+ExSrbJVONTN5ycE64O7+2L+q/hZSjjkxXgfcApqeVtZp4wKqbS976Kpch WgNl0zdkvV8JddRs0oKQ0Bl7dwOBhQACgYEAgkdF/+ncobVcYXfXHBUH3H5SLD3y u2zUWGhXM4/MUTwPromDOQ8Zd0H7myYhmQvVUb+J9mJHMIn7Guf4JDH+8d6rBpzo U5yEGqgsSqYqgtStzDvsKHfqw3mvjvsktm66N/vm36eai2I6J15QibdtP0lb1Um8 EeECDTxWUWT93rs= -----END PUBLIC KEY-----  &gt;&gt;&gt;   
for i in range(2 11):     print 1.0*(1 % i) / i  
os.chdir(os.path.dirname(__file__))  
sigma mu x n int(n*f(x) x) = n*int(f(x) x) N(x | mu sigma n) := (n/(sigma*sqrt(2*pi))) * exp((-(x-mu)^2)/(2*sigma^2)) x sigma mu n x N(x|011) N(x|011) erf erf Phi(z) = integral(N(x|011) -inf z) Phi(z) z Phi(z) = 0.5 + 0.5 * erf(z / sqrt(2)) Phi(z | mu sigma n) = integral( N(x|sigma mu n) -inf z) Phi(z | mu sigma n) mu sigma n z Phi(z | mu sigma n) = (n/2) * (1 + erf((x - mu) / (sigma * sqrt(2)))) t def make_gauss(N sigma mu):     k = N / (sigma * math.sqrt(2*math.pi))     s = -1.0 / (2 * sigma * sigma)     def f(x):         return k * math.exp(s * (x - mu)*(x - mu))     return f  k s ** exp(x) exp(x) a**b quad() quad(gen_gauss -inf inf (1020)) quad() quad() 
void SomeCFunction(void) {     /* ensure we hold the lock */     PyGILState_STATE state = PyGILState_Ensure();     /* Use the Python API */     ...     /* Restore the state of Python */     PyGILState_Release(state); }  
class _Getch:     """Gets a single character from standard input.  Does not echo to the screen."""     def __init__(self):         try:             self.impl = _GetchWindows()         except ImportError:             self.impl = _GetchUnix()      def __call__(self): return self.impl()   class _GetchUnix:     def __init__(self):         import tty sys      def __call__(self):         import sys tty termios         fd = sys.stdin.fileno()         old_settings = termios.tcgetattr(fd)         try:             tty.setraw(sys.stdin.fileno())             ch = sys.stdin.read(1)         finally:             termios.tcsetattr(fd termios.TCSADRAIN old_settings)         return ch   class _GetchWindows:     def __init__(self):         import msvcrt      def __call__(self):         import msvcrt         return msvcrt.getch()   getch = _Getch()  
shell=True shell=True cmd = ['cvs'         '-d:pserver:anonymous@bayonne.cvs.sourceforge.net:/cvsroot/bayonne'         'login'] p = subprocess.Popen(cmd stdin=subprocess.PIPE stdout=subprocess.PIPE)   :pserver:&lt;user&gt;[:&lt;passwd&gt;]@&lt;server&gt;:/&lt;path&gt;  import subprocess  def login_to_sourceforge_cvs(project username='anonymous' password=''):     host = '%s.cvs.sourceforge.net' % project     path = '/cvsroot/%s' % project     cmd = ['cvs'             '-d:pserver:%s:%s@%s:%s' % (username password host path)             'login']     p = subprocess.Popen(cmd stdin=subprocess.PIPE                                stdout=subprocess.PIPE                               stderr=subprocess.STDOUT)      return p  login_to_sourceforge_cvs('bayonne')  
import unittest  import os import sys import subprocess import time  import dbus import dbus.service import dbus.glib import gobject  class MyDBUSService(dbus.service.Object):      def __init__(self):         bus_name = dbus.service.BusName('test.helloservice' bus = dbus.SessionBus())         dbus.service.Object.__init__(self bus_name '/test/helloservice')      def listen(self):         loop = gobject.MainLoop()         loop.run()      @dbus.service.method('test.helloservice')     def hello(self):         return "Hello World!"   class BaseTestCase(unittest.TestCase):      def setUp(self):         env = os.environ.copy()         self.p = subprocess.Popen(['python' './dbus_practice.py' 'server'] env=env)         # Wait for the service to become available         time.sleep(1)         assert self.p.stdout == None         assert self.p.stderr == None      def testHelloService(self):         bus = dbus.SessionBus()         helloservice = bus.get_object('test.helloservice' '/test/helloservice')         hello = helloservice.get_dbus_method('hello' 'test.helloservice')         assert hello() == "Hello World!"      def tearDown(self):         # terminate() not supported in Python 2.5         #self.p.terminate()         os.kill(self.p.pid 15)  if __name__ == '__main__':      arg = ""     if len(sys.argv) &gt; 1:         arg = sys.argv[1]      if arg == "server":         myservice = MyDBUSService()         myservice.listen()      else:         unittest.main()  
__name__ type(x).__name__ &gt;&gt;&gt; import itertools &gt;&gt;&gt; x = itertools.count(0) &gt;&gt;&gt; type(x).__name__ 'count'  x.__class__.__name__  
LD_LIBRARY_PATH ldd LD_LIBRARY_PATH $ ldd $path_to/_mysql.so ... libmysqlclient_r.so.14 =&gt; $path_to_lib/libmysqlclient_r.so.14 ...  
/project/ /project/apps/ /project/apps/app1/ /project/apps/app2  
PyObject* PyRun_String(const char *str int start PyObject *globals PyObject *locals);  *globals PyEval_GetBuiltins if (PyDict_GetItemString(globals "__builtins__") == NULL) {     if (PyDict_SetItemString(globals "__builtins__"                  PyEval_GetBuiltins()) != 0)         return NULL; }  PyRun_String("import __builtin__ as __builtins__" globals locals) PyRun_String("True" ...) __main__ __main__ if __name__ == "__main__" 
distutils.dir_util.copy_tree 
$HOME from subprocess import Popen          HOME = '/the/home/of/www-data' #PLEASE edit proc = Popen(cmd shell=False stdin=PIPE              stdout=PIPE stderr=PIPE close_fds=True              cwd=HOME env={"HOME":HOME)  
&gt;&gt;&gt; range(13) [0 1 2 3 4 5 6 7 8 9 10 11 12] &gt;&gt;&gt; [ '%02d' % i for i in range(13) ] ['00' '01' '02' '03' '04' '05' '06' '07' '08' '09' '10' '11' '12']  &gt;&gt;&gt; import datetime &gt;&gt;&gt; current_dt = datetime.datetime.now() &gt;&gt;&gt; current_dt datetime.datetime(2009 2 4 22 2 14 390000) &gt;&gt;&gt; ['AM''PM'][current_dt.hour&gt;=12] 'PM'  
typedef boost::tuple&lt;doubledoubledouble&gt; XYZ;  XYZ foo();  double xyz; boost::tie(xyz) = foo();  MyMultimap::iterator lowerupper; boost::tie(lowerupper) = some_map.equal_range(key);  
&gt;&gt;&gt; class A(object): &gt;&gt;&gt;     pass   &gt;&gt;&gt; def stuff(self): &gt;&gt;&gt;     print self  &gt;&gt;&gt; A.test = stuff &gt;&gt;&gt; A().test()  __dict__ dictproxy 
pyc pyc pyc pyc py rm *.pyc  find . -name '*.pyc' -delete  py pyc pyc 2.5.1(r251:54863) pyc 62131 2.6.1(r261:67517) 62161 Python/import.c 1.5:   20121 1.5.1: 20121 1.5.2: 20121 1.6:   50428 2.0:   50823 2.0.1: 50823 2.1:   60202 2.1.1: 60202 2.1.2: 60202 2.2:   60717 2.3a0: 62011 2.3a0: 62021 2.3a0: 62011 2.4a0: 62041 2.4a3: 62051 2.4b1: 62061 2.5a0: 62071 2.5a0: 62081 2.5a0: 62091 2.5a0: 62092 2.5b3: 62101 2.5b3: 62111 2.5c1: 62121 2.5c2: 62131 2.6a0: 62151 2.6a1: 62161 2.7a0: 62171  
select * from name_part     where type_id=[something]     order by used_count asc rand()     limit 1  
zip map None map(lambda a b: b if a is None else a     choicesTxt     ['Choice %i' % n for n in range(1 10)])  map(lambda a b: a or b     choicesTxt     ['Choice %i' % n for n in range(1 10)])  choicesTxt None 
import re text = "ThisFileName.txt" print re.sub('([a-z])([A-Z])' r'\1 \2' text) # Prints: "This File Name.txt"  os.path.splitext() import os filename = "ThisFileName.txt" print os.path.splitext(filename) # Prints: ('ThisFileName' '.txt')  
.png 
sys.stdout.write("Download progress: %d%%   \r" % (progress) ) sys.stdout.flush()  
&gt;&gt;&gt; "[{0} {1} {2}]".format(1 2 3) [1 2 3]  
&gt;&gt;&gt; import os &gt;&gt;&gt; clear = lambda: os.system('cls') &gt;&gt;&gt; clear()  &gt;&gt;&gt; clear = lambda: os.system('clear')  
my_list = [12345] len(my_list) # 5  my_tuple = (12345) len(my_tuple) # 5  my_string = 'hello world' len(my_string) # 11  .length() len() __len__() .length() .length .count() len() lengths = map(len list_of_containers)  
[2*i for i in List]  
yield def read_in_chunks(file_object chunk_size=1024):     """Lazy function (generator) to read a file piece by piece.     Default chunk size: 1k."""     while True:         data = file_object.read(chunk_size)         if not data:             break         yield data   with open('really_big_file.dat') as f:     for piece in read_in_chunks(f):         process_data(piece)  iter f = open('really_big_file.dat') def read1k():     return f.read(1024)  for piece in iter(read1k ''):     process_data(piece)  for line in open('really_big_file.dat'):     process_data(line)  
JButton("Push me" actionPerformed=self.nameOfMethodToCall)  from javax.swing import JButton JFrame  class MyFrame(JFrame):     def __init__(self):         JFrame.__init__(self "Hello Jython")         button = JButton("Hello" actionPerformed=self.hello)         self.add(button)          self.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)         self.setSize(300 300)         self.show()      def hello(self event):         print "Hello world!"  if __name__=="__main__":     MyFrame()  
doublerInstance.add(1 2) add def __getattr__(self attrname) :     fnc = getattr(self.source attrname)     def doubled(*args **kwargs) :         return 2 * fnc(*args **kwargs)     return doubled  
import os.path for dir file in zip(directories files):     print(os.path.join(dir file))                      # for directories files  for i (dir file) in enumerate(zip(directories files)):     print(i os.path.join(dir file))  
&gt;&gt;&gt; import re &gt;&gt;&gt; str = "Hello *world*! Let's /go/." &gt;&gt;&gt; str = re.sub(r"\*([^\*]*)\*" r"\textbf{\1}" str) &gt;&gt;&gt; str = re.sub(r"/([^/]*)/"   r"\textit{\1}" str) &gt;&gt;&gt; str "Hello \textbf{world}! Let's \textit{go}."  
 instance.__class__.__name__  &gt;&gt;&gt; class A():     pass &gt;&gt;&gt; a = A() &gt;&gt;&gt; a.__class__.__name__ 'A'  
verts = [None]*1000  
Err Err.Description Err.Number VbObjectError + someCustomErrorNumber 
index(value) verts.index(value) verts[::-1] len(verts) - 1 - verts[::-1].index(value) 
enumerate() for idx val in enumerate(ints):     print(idx val)  
if vote.count(1) == 0:     obj = VoteRecord()     obj.user = user     obj.option = option     obj.put()  if vote.count(1) == 0:     obj = VoteRecord()     obj.user = user   if vote.count(1) == 0:     obj = VoteRecord()     obj.user = user     obj.option = option     obj.put()       obj.option = option     obj.put()  db.run_in_transaction()  def checkAndLockPage(pageKey):   page = db.get(pageKey)   if page.locked:     return False   else:     page.locked = True     page.put()     return True  
from django.http import HttpResponseRedirect  def myview(request):     ...     return HttpResponseRedirect("/path/")  generic views from django.views.generic.simple import redirect_to  urlpatterns = patterns(''        (r'^one/$' redirect_to {'url': '/another/'})      #etc... )  from django.views.generic import RedirectView  urlpatterns = patterns(''     (r'^one/$' RedirectView.as_view(url='/another/')) )  
(mac &lt;-&gt; router &lt;-&gt; router &lt;-&gt; ISP) 
box=((-21.25)(0.5-1.25))  X_complex=X_complex_origin+(X_image/X_image_width)*X_complex_width  
pos for while openBr 0 pos openBr for ( 0 for openBr 0 for(...) 
class B():     def __init__(self):         self.c = C()  
class Something( object ):     def __init__( self ):         self.a= 2         self.b= 3  x= Something() getattr( x 'a' ) getattr( x 'b' )  
addition=(im1arr+im2arr)/2  &gt;&gt;&gt;array([25510100]dtype='uint8') +  array([110160]dtype='uint8') array([ 0 20  4] dtype=uint8)  im1arrF = im1arr.astype('float') im2arrF = im2arr.astype('float') additionF = (im1arrF+im2arrF)/2 addition = additionF.astype('uint8')  addition = im1arr/2 + im2arr/2  
with open('myfile.txt' 'r+') as file:     for line in file:         processLine(line)     file.truncate(0)  lines = open('myfile.txt').readlines()  for line in lines[::-1]: # process lines in reverse order     processLine(line)     del lines[-1]  # remove the [last] line  open('myfile.txt' 'w').writelines(lines)  import fileinput  for line in fileinput.input(['myfile.txt'] inplace=1):     try: processLine(line)     except Exception:          sys.stdout.write(line) # it prints to 'myfile.txt'  
ICO 400Kb PNG png2ico myicon.ico logo16x16.png logo32x32.png logo255x255.png  ICO PNG 
else if (PyInt_Check(result)) {     long obj_size = PyInt_AsLong(result);     if (obj_size &lt; 0 || obj_size &gt; total_size) {         PyErr_Format(ErrorObject "invalid return value for write callback %ld %ld" (long)obj_size (long)total_size);         goto verbose_error;     }  
| &gt;&gt;&gt; re.sub(r'(^|\W)GBP([\W\d])' u'\g&lt;1&gt;£\g&lt;2&gt;' text) u'\xa3 5 Off when you spend \xa375.00'  
dict 
import random  def weighted_choice(items):     """items is a list of tuples in the form (item weight)"""     weight_total = sum((item[1] for item in items))     n = random.uniform(0 weight_total)     for item weight in items:         if n &lt; weight:             return item         n = n - weight     return item  def weighted_choice_bisect(items):     added_weights = []     last_sum = 0      for item weight in items:         last_sum += weight         added_weights.append(last_sum)      return items[bisect.bisect(added_weights random.random() * last_sum)][0]  def weighted_choice_compile(items):     """returns a function that fetches a random item from items      items is a list of tuples in the form (item weight)"""     weight_total = sum((item[1] for item in items))     def choice(uniform = random.uniform):         n = uniform(0 weight_total)         for item weight in items:             if n &lt; weight:                 return item             n = n - weight         return item     return choice  def weighted_choice_bisect_compile(items):     """Returns a function that makes a weighted random choice from items."""     added_weights = []     last_sum = 0      for item weight in items:         last_sum += weight         added_weights.append(last_sum)      def choice(rnd=random.random bis=bisect.bisect):         return items[bis(added_weights rnd() * last_sum)][0]     return choice  choices = [(random.choice("abcdefg") random.uniform(050)) for i in xrange(2500)]  def profiler(f n *args **kwargs):     start = time.time()     for i in xrange(n):         f(*args **kwargs)     return time.time() - start  
from datetime import timedeltadatetime try:     offset = int("Tue 22 Jul 2008 08:17:41 +0300"[-5:]) except:     print "Error"  delta = timedelta(hours = offset / 100)  fmt = "%a %d %b %Y %H:%M:%S" time = datetime.strptime("Tue 22 Jul 2008 08:17:41 +0200"[:-6] fmt) time -= delta  
def article_update(request id):    article = get_objects_or_404(Article pk=id)     if request.method == 'POST':       form = ArticleForm(request.POST instance=article)        if form.is_valid():          form.save()           return HttpResponseRedirect(to-some-suitable-url)     else:       form = ArticleForm(instance=article)     return render_to_response('article_update.html' { 'form': form })  
argv[0] = "C:\Program Files\ My Installer\Setup.exe" argv[1] = /s /v "/qn /lv %TEMP%\log_silent.log"  argv[1] = "/s" argv[2] = "/v" argv[3] = "/qn" argv[4] = "/lv %TEMP%\log_silent.log"  %TEMP% p = subprocess.Popen('C:\Program Files\ My Installer\Setup.exe /s /v "/qn /lv %TEMP%\log_silent.log"' shell=True) output = p.communicate()[0]  s = ['C:\Program Files\ My Installer\Setup.exe' '/s /v "/qn /lv %TEMP%\log_silent.log"'] safes = [os.path.expandvars(p) for p in argument_string] p = subprocess.Popen(safes[0] safes[1:]) output = p.communicate()[0]  
model = models.Progress  
class FlushFile(object):     """Write-only flushing wrapper for file-type objects."""     def __init__(self f):         self.f = f     def write(self x):         self.f.write(x)         self.f.flush()  # Replace stdout with an automatically flushing version sys.stdout = FlushFile(sys.__stdout__)  
while not myThread.wantToQuit 
''.join('&lt;p&gt;%s&lt;/p&gt;' % line for line in text.split('\r\n\r\n')) # Results: u"&lt;p&gt;Finally Sri Lanka showed up prevented their first 5-0 series whitewash and stopped India at nine ODI wins in a row. &lt;/p&gt; &lt;p&gt;For 62 balls Yuvraj Singh played a dream knock keeping India in the  game despite wickets falling around him. &lt;/p&gt;&lt;p&gt;Perhaps the toss played a big part. This was only the second time Mahela Jayawardene beat Mahendra Singh Dhoni with the coin in the last 11 occasions. &lt;/p&gt; &lt;p&gt;It was Jayasuriya who provided Sri Lanka with the springboard. &lt;/p&gt; &lt;p&gt;The pyrotechnics may have stopped upon Jayasuriya's dismissal but  the runs kept coming at a fair pace.&lt;/p&gt;"  
import 
def report_progress(self percent_str data_len_str speed_str eta_str):     """Report download progress."""     print u'[download] %s of %s at %s ETA %s' % (percent_str data_len_str speed_str eta_str)  
reversed() &gt;&gt;&gt; a = ["foo" "bar" "baz"] &gt;&gt;&gt; for i in reversed(a): ...     print(i) ...  baz bar foo  enumerate() reversed() &gt;&gt;&gt; for i e in reversed(list(enumerate(a))): ...     print(i e) ...  2 baz 1 bar 0 foo  enumerate() list 
a = "%d bottles of %s on the wall" % (10 "beer") a = sprintf("%d bottles of %s on the wall" 10 "beer"); a "10 bottles of beer on the wall" a = "{0} bottles of {1} on the wall".format(10 "beer") 
&gt;&gt; ("Kr") + "foo"  TypeError: can only concatenate tuple (not "str") to tuple  if len(card) != 2:     print type(card)     raise ValueError(card + ' is not a known card.')  
from datetime import datetime  def str2datetime(s):     parts = s.split('.')     dt = datetime.strptime(parts[0] "%Y-%m-%d %H:%M:%S")     return dt.replace(microsecond=int(parts[1]))  strptime 
sys.path.append('/path/to/flup/egg/flup-1.0.1-py2.5.egg')  
dos2unix &lt;filename&gt; 
User.objects = MyManager() User.add_to_class('objects' MyManager()) 
bg_pixmap[state] = "&lt;parent&gt;"   bg_pixmap[state] = "&lt;none&gt;"  
  class Dynamo(object):     pass  def add_dynamo(clsi):     def innerdynamo(self):         print "in dynamo %d" % i     innerdynamo.__doc__ = "docstring for dynamo%d" % i     innerdynamo.__name__ = "dynamo%d" % i     setattr(clsinnerdynamo.__name__innerdynamo)  for i in range(2):     add_dynamo(Dynamo i)  d=Dynamo() d.dynamo0() d.dynamo1()    in dynamo 0 in dynamo 1  
books = Book.objects.filter(authorbook__author_id=1)  
itertools.product import itertools  somelists = [    [1 2 3]    ['a' 'b']    [4 5] ] for element in itertools.product(*somelists):     print(element)  for element in itertools.product([1 2 3] ['a' 'b'] [4 5]):     print(element)  
names_dict = dict((nameindex)                   for indexlst in enumerate(names)                   for name in lst)  &gt;&gt;&gt; names = [['Tom' 'Dick'] ['Harry' 'John' 'Mike'] ['Bob']] &gt;&gt;&gt; names_dict = dict((nameindex) ...                   for indexlst in enumerate(names) ...                   for name in lst) &gt;&gt;&gt; names_dict {'Tom': 0 'Mike': 1 'Dick': 0 'Harry': 1 'Bob': 2 'John': 1}  
[a_i - b_i for a_i b_i in zip(a b)]  
ifstream f("data.txt"); string str; while (getline(f str)) {     Point p;     sscanf(str.c_str() "%f %f %f\n" &amp;p.x &amp;p.y &amp;p.z);      points.push_back(p); }  #include &lt;iostream&gt; #include &lt;fstream&gt;  
array a = array.array('B' data) &gt;&gt;&gt; a.tostring() '\x00\x01\x02\x03\x04\x05'  'B' 'i' 
import sys import threading import time import select  def timeout_read(n_chars):   r _ _ = select.select([sys.stdin] [] [] 1)   return r[0].read(n_chars) if r else ""  class MyThread (threading.Thread):     def run (self):         try:             self.wantQuit = 0             while not self.wantQuit:                 print "want input"                 button = timeout_read(1)                 if button == "q":                     self.wantQuit=1         except KeyboardInterrupt:             self.wantQuit = 1             print "abort with KeyboardInterrupt"         print "done mythread"  myThread = MyThread () myThread.start()  a=5 while not myThread.wantQuit:     print "hey"     if (a == 0):         break;     a = a-1;     time.sleep(1) myThread.wantQuit=1 print "main thread done"  
for c in "string":     #do something with c  for loop open("file.txt") with open(filename) as f:     for line in f:         # do something with line  for next() __iter__ __iter__ next() 
long int int 
def hours(self):     retval = ""     if self.totalTime:         hoursfloat = self.totalTime.seconds / 3600         retval = round(hoursfloat)     return retval  def minutes(self):     retval = ""     if self.totalTime:         minutesfloat = self.totalTime.seconds / 60         hoursAsMinutes = self.hours() * 60         retval = round(minutesfloat - hoursAsMinutes)     return retval  &lt;td&gt;{{ sum.0 }}&lt;/td&gt;     &lt;td&gt;{{ sum.1.hours|stringformat:"d" }}:{{ sum.1.minutes|stringformat:"#02.0d" }}&lt;/td&gt;  
print('Two pair {0}s and {1}s'.format(*cards))  
from werkzeug import Local LocalManager local = Local() local_manager = LocalManager([local])  from jinja2 import Environment FileSystemLoader  # Create a global dict using the local's proxy to the request attribute global_dict = {'request': local('request')} jinja2_env = Environment(loader=FileSystemLoader('/')) jinja2_env.globals.update(global_dict)  def application(environ start_response):     """A WSGI Application"""     # later bind the actual attribute to the local object     local.request = request = Request(environ)      # continue to view handling code     # ...  application = local_manager.make_middleware(application)  
os.listdir os.path.join 
itertools.product import itertools truth_values = itertools.product((True False) repeat = 4) people = (person_a person_b person_c person_d) all_people_and_states = [[person(truth) for person truth in zip(people combination)] for combination in truth_values]  
b'ab'.split('')  
void** void* %typemap (innuminputs=0) void** (void *temp) {     $1 = &amp;temp; }  %typemap (argout) void** {     PyObject *obj = PyCObject_FromVoidPtr(*$1);     $result = PyTuple_Pack(2 $result obj); }  import test success p = test.Operation() theAnswer = 0.0f if success:    theAnswer = test.GetFieldValue(p)    test.Cleanup(p)  void* void* %typemap (in) void* {     $1 = PyCObject_AsVoidPtr($input); }  
smtplib From: message = 'From: me@example.com\nSubject: [PGS]: Results\n\nBlaBlaBla'  smtplib 
from functools import partial  for name in iter(partial(raw_input 'Name:') ''):     do_something_with(name)  &gt;&gt;&gt; names = list(iter(partial(raw_input 'Name: ') '')) Name: nosklo Name: Andreas Name: Aaron Name: Phil Name:  &gt;&gt;&gt; names ['nosklo' 'Andreas' 'Aaron' 'Phil']  
/directory.ext/file .split('.') 
foo = Portal("Foo")  bar = Agent("bar")  foo.Connect("ip" 1234)  foo.Add(bar)  bar.Ready = bar_Ready  def bar_Ready(sender msg):      print msg.body  
rainbow.vim vimfiles/after/syntax/c/ ~/.vim/after/syntax/c/rainbow.vim c:\vim\vimfiles\after\syntax\c\rainbow.vim :help runtimepath rainbow.vim syn cluster pyParenGroup contains=pythonStringpythonRawStringpythonEscapepythonNumberpythonBuiltinpythonException syn match pyParenError display ')' syn region  pyParen     transparent matchgroup=hlLevel0 start='(' end=')' contains=@pyParenGrouppyParen1 syn region  pyParen1        transparent matchgroup=hlLevel1 start='(' end=')' contains=@pyParenGrouppyParen2 syn region  pyParen2        transparent matchgroup=hlLevel2 start='(' end=')' contains=@pyParenGrouppyParen3 syn region  pyParen3        transparent matchgroup=hlLevel3 start='(' end=')' contains=@pyParenGrouppyParen4 syn region  pyParen4        transparent matchgroup=hlLevel4 start='(' end=')' contains=@pyParenGrouppyParen5 syn region  pyParen5        transparent matchgroup=hlLevel5 start='(' end=')' contains=@pyParenGrouppyParen6 syn region  pyParen6        transparent matchgroup=hlLevel6 start='(' end=')' contains=@pyParenGrouppyParen7 syn region  pyParen7        transparent matchgroup=hlLevel7 start='(' end=')' contains=@pyParenGrouppyParen8 syn region  pyParen8        transparent matchgroup=hlLevel8 start='(' end=')' contains=@pyParenGrouppyParen9 syn region  pyParen9        transparent matchgroup=hlLevel9 start='(' end=')' contains=@pyParenGrouppyParen hi link pyParenError Error  if &amp;bg == "dark"     hi default   hlLevel0 ctermfg=red         guifg=red1     hi default   hlLevel1 ctermfg=yellow      guifg=orange1           hi default   hlLevel2 ctermfg=green       guifg=yellow1           hi default   hlLevel3 ctermfg=cyan        guifg=greenyellow       hi default   hlLevel4 ctermfg=magenta     guifg=green1            hi default   hlLevel5 ctermfg=red         guifg=springgreen1      hi default   hlLevel6 ctermfg=yellow      guifg=cyan1             hi default   hlLevel7 ctermfg=green       guifg=slateblue1        hi default   hlLevel8 ctermfg=cyan        guifg=magenta1          hi default   hlLevel9 ctermfg=magenta     guifg=purple1 else     hi default   hlLevel0 ctermfg=red         guifg=red3     hi default   hlLevel1 ctermfg=darkyellow  guifg=orangered3     hi default   hlLevel2 ctermfg=darkgreen   guifg=orange2     hi default   hlLevel3 ctermfg=blue        guifg=yellow3     hi default   hlLevel4 ctermfg=darkmagenta guifg=olivedrab4     hi default   hlLevel5 ctermfg=red         guifg=green4     hi default   hlLevel6 ctermfg=darkyellow  guifg=paleturquoise3     hi default   hlLevel7 ctermfg=darkgreen   guifg=deepskyblue4     hi default   hlLevel8 ctermfg=blue        guifg=darkslateblue     hi default   hlLevel9 ctermfg=darkmagenta guifg=darkviolet endif  gvim.exe vim/vim70/gvim.exe pyprint.py :e pyprint.py :syntax on ) :source code.vim ) cd ~ mv .vimrc old_dot_vimrc mv .gvimrc old_dot_gvimrc mv .vim old_dot_vim vim pyprint.py :e pyprint.py " Add extra bracket here! :syntax on :source code.vim  
a [op] b 
import sys sys.exit("Error message")  
30819f300d06092a864886f70d010101050003818d0030818902818100df1b822e14eda1fcb74336 6a27c06370e6cad69d4116ce806b3d117534cf0baa938c0f8e4500fb59d4d98fb471a8d01012d54b 32244197c7434f27c1b0d73fa1b8bae55e70155f907879ce9c25f28a9a92ff97de1684fdaff05dce 196ae76845f598b328c5ed76e0f71f6a6b7448f08691e6a556f5f0d773cb20d13f629b6391020301 0001     0 30  159: SEQUENCE {    3 30   13:   SEQUENCE {    5 06    9:     OBJECT IDENTIFIER rsaEncryption (1 2 840 113549 1 1 1)   16 05    0:     NULL             :     }   18 03  141:   BIT STRING 0 unused bits encapsulates {   22 30  137:       SEQUENCE {   25 02  129:         INTEGER             :           00 DF 1B 82 2E 14 ED A1 FC B7 43 36 6A 27 C0 63             :           70 E6 CA D6 9D 41 16 CE 80 6B 3D 11 75 34 CF 0B             :           AA 93 8C 0F 8E 45 00 FB 59 D4 D9 8F B4 71 A8 D0             :           10 12 D5 4B 32 24 41 97 C7 43 4F 27 C1 B0 D7 3F             :           A1 B8 BA E5 5E 70 15 5F 90 78 79 CE 9C 25 F2 8A             :           9A 92 FF 97 DE 16 84 FD AF F0 5D CE 19 6A E7 68             :           45 F5 98 B3 28 C5 ED 76 E0 F7 1F 6A 6B 74 48 F0             :           86 91 E6 A5 56 F5 F0 D7 73 CB 20 D1 3F 62 9B 63             :           91  157 02    3:         INTEGER 65537             :         }             :       }             :   }  "30819f300d06092a864886f70d010101050003818d00308189028181" 0203010001 n e 
'.' 'o' 's' help(plot) markersize plot(x y 'ko' markersize=2) savefig('foo.ps')  '.' 
posts posts.extra() posts = posts.extra(select={'score': """                     SELECT SUM(vote)                     FROM %s                     WHERE content_type_id = %s                     AND object_id = %s.id                     AND voted_at &gt; DATE(%s)                     AND voted_at &lt; DATE(%s)                 """ % (qn(Vote._meta.db_table) ctype.id qn(Post._meta.db_table) start end)}                         order_by=['-score'])  
lines = open(filename).read().splitlines()  
__init__ 
p = subprocess.Popen([sys.executable '/path/to/script.py']                                      stdout=subprocess.PIPE                                      stderr=subprocess.STDOUT)  
SELECT SUM(qty) GROUP BY order_number ( list_of_details appropriate summary ) {% for order in orderList %}     {% for line in order.0 %}         {{ line }}     {% endfor %}     {{ order.1 }} {% endfor %}  details = Line.objects.all() ddict = defaultdict( list ) for d in details:     ddict[d.order_number].append(d)  interleaved= [] subtotals = ... Django query to get subtotals ...  for s in subtotals:     interleaved.append( ( ddict[s.order] s.totals ) )  interleaved 
def my_import(name):     components = name.split('.')     mod = __import__(components[0])     for comp in components[1:]:         mod = getattr(mod comp)     return mod  __import__ __import__('foo.bar.baz.qux')  my_import('foo.bar.baz.qux')  klass = my_import('my_package.my_module.my_class') some_object = klass()  from my_package.my_module import my_class  mod = __import__('my_package.my_module' fromlist=['my_class']) klass = getattr(mod 'my_class')  
kitty class new_style_class: public Py::PythonClass&lt; new_style_class &gt; simple.cxx 
encode_plain() def encode_plain(user password):     s = "\0%s\0%s" % (user password)     return encode_base64(s.encode('ascii') eol='')  
self None + [2]+[] 
[\w\-][\w\-\.]+@[\w\-][\w\-\.]+[a-zA-Z]{14}  [\w\-] [\w\-\.]+ @ [\w\-] [\w\-\.]+ [a-zA-Z]{14} @ From: [\w\s]+?&lt;([\w\-][\w\-\.]+@[\w\-][\w\-\.]+[a-zA-Z]{14})&gt;  From: [\w\s]+? &lt; m.group(1) &gt; import re foundemail = []  mailsrch = re.compile(r'From: [\w\s]+?&lt;([\w\-][\w\-\.]+@[\w\-][\w\-\.]+[a-zA-Z]{14})&gt;')  for line in open("text.txt"):     foundemail.extend([m.group(1) for m in mailsrch.finditer(line)])  print foundemail  [m.group(1) for m in mailsrch.finditer(line)] 
from X import *  from X import foo bar blah  import X.foo  X.foo.moo()  foo.moo()  from X import y import X.y 
resident = Resident.objects.filter(name='Johnny') resident.ssa_set.all() # fail resident = resident.get() # will fail if more than one returned by filter resident.ssa_set.all() # works since we're operating on an instance not a queryset  
import psutil  PROCNAME = "python.exe"  for proc in psutil.process_iter():     if proc.name() == PROCNAME:         print(proc)  &lt;psutil.Process(pid=3881 name='python.exe') at 140192133873040&gt;  import os import psutil  def find_procs_by_name(name):     "Return a list of processes matching 'name'."     assert name name     ls = []     for p in psutil.process_iter():         name_ exe cmdline = "" "" []         try:             name_ = p.name()             cmdline = p.cmdline()             exe = p.exe()         except (psutil.AccessDenied psutil.ZombieProcess):             pass         except psutil.NoSuchProcess:             continue         if name == name_ or cmdline[0] == name or os.path.basename(exe) == name:             ls.append(name)     return ls  
global sleepTime = sleepTime 
t = timeit.Timer("foo()")  t = timeit.Timer("foo()" "from __main__ import foo")  
self.DefaultDomainName  Manager.DefaultDomainName  # also referenced by self.__class__.DefaultDomainName  print "1: %s" % id(self.DefaultDomainName) print "2: %s" % id(Manager.DefaultDomainName)  # Debug with pdb.  Follow every step of the process to ensure that you are  # setting valeus as you thought and that the code you thought would be  # called is actually being called.  I've had many problems like this where  # the error was in procedure not in the actual code at hand. import pdb; pdb.set_trace()  # check to see if id(Manager) is the same as id(self.__class__)  # in the set_domain() function: # check to see what attributes you can see on Manager  # and if they match the attributes on Manager and self.__class__ in __init__  
subprocess.py # This module should remain compatible with Python 2.2 see PEP 291. 
NoneType None if current_product.size: # This will evaluate as false if size is None or len(size) == 0.   blah blah  
def timeout(func args=() kwargs={} timeout_duration=1 default=None):     '''This function will spwan a thread and run the given function using the args kwargs and      return the given default value if the timeout_duration is exceeded      '''      import threading     class InterruptableThread(threading.Thread):         def __init__(self):             threading.Thread.__init__(self)             self.result = default         def run(self):             try:                 self.result = func(*args **kwargs)             except:                 self.result = default     it = InterruptableThread()     it.start()     it.join(timeout_duration)     if it.isAlive():         return it.result     else:         return it.result  
range [0 1] 0 import random import time  def str_time_prop(start end format prop):     """Get a time at a proportion of a range of two formatted times.      start and end should be strings specifying times formated in the     given format (strftime-style) giving an interval [start end].     prop specifies how a proportion of the interval to be taken after     start.  The returned time will be in the specified format.     """      stime = time.mktime(time.strptime(start format))     etime = time.mktime(time.strptime(end format))      ptime = stime + prop * (etime - stime)      return time.strftime(format time.localtime(ptime))   def random_date(start end prop):     return str_time_prop(start end '%m/%d/%Y %I:%M %p' prop)  print(random_date("1/1/2008 1:30 PM" "1/1/2009 4:50 AM" random.random()))  
class idClasses:     class ID12345:pass     class ID01234:pass # could also be: import idClasses  class ProcessDirector:     def __init__(self):         self.allClasses = []      def construct(self builderName):         targetClass = getattr(idClasses builderName)         instance = targetClass()         self.allClasses.append(instance)  IDS = ["ID12345" "ID01234"]  director = ProcessDirector() for id in IDS:     director.construct(id)  print director.allClasses # [&lt;__main__.ID12345 instance at 0x7d850&gt; &lt;__main__.ID01234 instance at 0x7d918&gt;]  
itertools.groupby next_morris def next_morris(number):     return ''.join('%s%s' % (len(list(group)) digit)                    for digit group in itertools.groupby(str(number)))  print next_morris(1) 11 print next_morris(111221) 312211  def morris_generator(maxlen start=1):     num = str(start)     while len(num) &lt; maxlen:         yield int(num)         num = next_morris(num)  for n in morris_generator(10):     print n  1 11 21 1211 111221 312211 13112221  
stackless_accept list Sock sockets remove 
d = {'bar': 'a' 'foo': 'b'} regexp = '%(foo)s|%(bar)s' % d  vlist = ['a' 'b' 'c'] regexp = '|'.join([s for s in vlist])  filename = 'bob_20090216.txt'  regexps = {'bob': 'bob_[0-9]+.txt'            'fred': 'fred_[0-9]+.txt'            'paul': 'paul_[0-9]+.txt'}  for filetype regexp in regexps.items():     m = re.match(regexp filename)     if m != None:         print '%s is of type %s' % (filename filetype)  
paren_pattern = re.compile(r"\(([^()]*)\)(?=(?:\s*\([^()]*\))*\s*$)")  def getParens(s):   return paren_pattern.findall(s)  getParens = re.compile(r"\(([^()]*)\)(?=(?:\s*\([^()]*\))*\s*$)").findall  \(                     # opening paren ([^()]*)               # content captured into group 1 \)                     # closing paren (?=                    # look ahead for...   (?:\s*\([^()]*\))*   #   a series of parens separated by whitespace   \s*                  #   possibly more whitespace after   $                    #   end of string )                      # end of look ahead  
string.translate import string "abc".translate(string.maketrans("abc" "def")) # =&gt; "def"  "abc".translate(str.maketrans("abc" "def"))  tr re.sub 
file = open("test.txt" 'wb') thing = {'a': 1 'b':2} cPickle.dump(thing file)  
import urllib2 # Create an OpenerDirector with support for Basic HTTP Authentication... auth_handler = urllib2.HTTPBasicAuthHandler() auth_handler.add_password(realm='PDQ Application'                           uri='https://mahler:8092/site-updates.py'                           user='klem'                           passwd='kadidd!ehopper') opener = urllib2.build_opener(auth_handler) # ...and install it globally so it can be used with urlopen. urllib2.install_opener(opener) urllib2.urlopen('http://www.example.com/login.html')  
from array import array from datetime import datetime  def WriteInts(theArrayfilename):     f = file(filename"wb")     theArray.tofile(f)     f.close()  def ReadInts(filename):     d = datetime.utcnow()     theArray = array('i')     f = file(filename"rb")     try:         theArray.fromfile(f1000000000)     except EOFError:         pass     print "Read %d ints in %s" % (len(theArray)datetime.utcnow() - d)     return theArray  if __name__ == "__main__":     a = array('i')     a.extend(range(01000000))     filename = "a_million_ints.dat"     WriteInts(afilename)     r = ReadInts(filename)     print "The 5th element is %d" % (r[4])  
root = get_nodes.mmnode_plus.factory('somenodes.xml')  tests = [     (root {'skip_traversal': False 'skip_as_child': True 'skip_as_parent': False 'is_leaf': False})     (root[0] {'skip_traversal': False 'skip_as_child': False 'skip_as_parent': False 'is_leaf': False})     (root[1] {'skip_traversal': True 'skip_as_child': True 'skip_as_parent': True})     (root[1][0] {'skip_traversal': True})     (root[0][0] {'is_leaf': False 'skip_traversal': False 'skip_as_child': False 'skip_as_parent': False})     (root[0][0][0] {'is_leaf': True 'skip_traversal': False 'skip_as_child': False 'skip_as_parent': True})     (root[0][4] {'skip_traversal': True 'skip_as_child': True 'skip_as_parent': True})     (root[0][7] {'skip_traversal': False 'skip_as_child': False 'skip_as_parent': True}) ]  i = 0 for (node states) in tests:     for test_state exp_result in states.iteritems():          input = node.__getattribute__(test_state)()         errstr = "expected %s not %s for state %s of node %s" % (input exp_result test_state repr(node))          locals()['foo' + str(i)] = type('foo' + str(i) (unittest.TestCase)             {'input': input 'exp_result': exp_result 'errstr': errstr 'testme': lambda self: self.assertEqual(self.input self.exp_result self.errstr)})         i += 1  
fw :0 :0 fw stdin stdout fw f w 
import re rx = re.compile("((?:@\w+ +)+)(.*)") t='@abc   @def  @xyz Hello this part is text and my email is foo@ba.r' as = rx.match(t).groups() l = re.split('[@ ]+'a)[1:-1] print l print s  /@\w+ +/  /(@\w+ +)+/  /(?:@\w+ +)+/  /((?:@\w+ +)+)(.*)/  ((?:@\w+ +)+)(.*)  (?:@\w+ +)+  (  @\w+ +)     @\w+ +  
assert_approx_equal numpy.testing def assert_approx_equal(actualdesiredsignificant=7err_msg=''verbose=True):     """     Raise an assertion if two items are not equal up to significant digits.      .. note:: It is recommended to use one of `assert_allclose`               `assert_array_almost_equal_nulp` or `assert_array_max_ulp`               instead of this function for more consistent floating point               comparisons.      Given two numbers check that they are approximately equal.     Approximately equal is defined as the number of significant digits     that agree.  
def PrintProductsBelowNumber(number):     number1 = 1     while number1 &lt;= number:         number2 = 1         while number2 &lt;= number:             print(number1 "*" number2 "=" number1 * number2)             number2 += 1         number1 += 1  PrintProductsBelowNumber(2)  
import pyamf  class Book(object):     def _get_number_of_odd_pages(self):   return 52  numberOfOddPages = property(_get_number_of_odd_pages)  pyamf.register_class(Book 'Book')  encoded = pyamf.encode(Book()).getvalue()  print pyamf.decode(encoded).next().numberOfOddPages  
Pet.full_name select_related Pet.full_name class Client(models.Model):     # ...     def get_pets(self):         for pet in self.pets.all():             setattr(pet '_client_cache' self)             yield pet  'client' '_client_cache' SingleRelatedObjectDescriptor {% for pet in client.get_pets %} ... {% endfor %}  
x = [123] y = [456]  zip(xy) == [(14)(25)(36)] a = numpy.array(zip(xy) dtype=dtype)  
import re  str = """&lt;p class="foo-body"&gt;   &lt;font class="test-proof"&gt;Full name&lt;/font&gt; Foobar&lt;br /&gt;   &lt;font class="test-proof"&gt;Born&lt;/font&gt; July 7 1923 foo bar&lt;br /&gt;   &lt;font class="test-proof"&gt;Current age&lt;/font&gt; 27 years 226 days&lt;br /&gt;   &lt;font class="test-proof"&gt;Major teams&lt;/font&gt; &lt;span style="white-space: nowrap"&gt;Japan&lt;/span&gt; &lt;span style="white-space: nowrap"&gt;Jakarta&lt;/span&gt; &lt;span style="white-space: nowrap"&gt;bazz&lt;/span&gt; &lt;span style="white-space: nowrap"&gt;foo&lt;/span&gt; &lt;span style="white-space: nowrap"&gt;foobazz&lt;/span&gt;&lt;br /&gt;   &lt;font class="test-proof"&gt;Also&lt;/font&gt; bar&lt;br /&gt;   &lt;font class="test-proof"&gt;foo style&lt;/font&gt; hand &lt;br /&gt;   &lt;font class="test-proof"&gt;bar style&lt;/font&gt; ball&lt;br /&gt;   &lt;font class="test-proof"&gt;foo position&lt;/font&gt; bak&lt;br /&gt;   &lt;br class="bar" /&gt; &lt;/p&gt;"""  R_EXTRACT_DATA = re.compile("&lt;font\s[^&gt;]*&gt;[\s]*(.*?)[\s]*&lt;/font&gt;[\s]*(.*?)[\s]*&lt;br /&gt;" re.IGNORECASE) R_STRIP_TAGS = re.compile("&lt;span\s[^&gt;]*&gt;|&lt;/span&gt;" re.IGNORECASE)  def strip_tags(str):     """Strip un-necessary &lt;span&gt; tags     """     return R_STRIP_TAGS.sub("" str)  def get_info(str):     """Extract useful info from the given string     """     data = R_EXTRACT_DATA.findall(str)     data_dict = {}      for x in [(x[0] strip_tags(x[1])) for x in data]:         data_dict[x[0]] = x[1]      return data_dict  print get_info(str)  
import order o = order.foo()  model     __init__.py     client.py     staff.py     order.py  import model.client  import model.client o = model.client.clientclass()     from .client import clientclass as client from .staff import staffclass as staff from .order import orderclass as order  import model c = model.client() s = model.staff() o = model.order()  import model.client o = model.client.clientclass()     
cgi.FieldStorage cgi.FieldStorage make_file import os import cgi  class MyFieldStorage(cgi.FieldStorage):     def make_file(self binary=None):         return open(os.path.join('/tmp' self.filename) 'wb')  FieldStorage cStringIO.StringIO cgi tempfile 
find_module() load_module() 
mysql_cursor.execute( "call get_lastpoll();" ) results=mysql_cursor.fetchone() print results[0]  2009-02-19 17:10:42  fetchone fetchall 
pack grid pack grid f.pack_propagate(0)  root.pack_propagate(0) pack place grid 
#!/usr/bin/perl  use strict; use warnings;  use XML::Twig; use Digest::MD5 'md5_base64';  my @tags_to_anonymize= qw( name surname address email phone);  # the handler for each element ($_) sets its content with the md5 and then flushes my %handlers= map { $_ =&gt; sub { $_-&gt;set_text( md5_base64( $_-&gt;text))-&gt;flush } } @tags_to_anonymize;  XML::Twig-&gt;new( twig_roots =&gt; \%handlers twig_print_outside_roots =&gt; 1)          -&gt;parsefile( "my_big_file.xml")          -&gt;flush;  
class Pathology(models.Model):     pathology = models.CharField(max_length=100)     publications = models.ManyToManyField(Publication)  class Publication(models.Model):     pubtitle = models.TextField()  def pathology(request):     pathology_id = request.POST['pathology_id']      p = get_object_or_404(Pathology pk=pathology_id)     publications = p.publications.all()     return render_to_response('my_template.html'                               {'publications':publications}                               context_instance=RequestContext(request))  
python -c "for x in range(110): print x"  python -c "for x in range(110): x==1 and __import__('calendar').prcal(2009); print x;"  
import operator  ranges = {     '4'  : 'a'     '70' : 'b'     '700': 'c'     '701': 'd'     '85' : 'e'     '87' : 'a' }  def id_for_value(value):     possible = '*'     for idvalue id in sorted(ranges.iteritems()):         if value.startswith(idvalue):             possible = id         elif idvalue &gt; value:             break     return possible  assert id_for_value('10') == '*' assert id_for_value('499') == 'a' assert id_for_value('703') == 'b' assert id_for_value('7007') == 'c' assert id_for_value('7017') == 'd' assert id_for_value('76') == id_for_value('83') == '*' assert id_for_value('857') == 'e' assert id_for_value('8716') == 'a'  def firstlast(iterator):     """ Returns the first and last value of an iterator"""     first = last = iterator.next()     for value in iterator:         last = value     return first last  maxlen = max(len(x) for x in ranges) + 1 test_range = ('%0*d' % (maxlen i) for i in xrange(10 ** maxlen)) result = dict((firstlast(gr) id)                for id gr in itertools.groupby(test_range key=id_for_value))  {('0000' '3999'): '*'  ('4000' '4999'): 'a'  ('5000' '6999'): '*'  ('7000' '7009'): 'c'  ('7010' '7019'): 'd'  ('7020' '7099'): 'b'  ('7100' '8499'): '*'  ('8500' '8599'): 'e'  ('8600' '8699'): '*'  ('8700' '8799'): 'a'  ('8800' '9999'): '*'}  
continue break import math  def main():     count = 3          while True:         isprime = True                  for x in range(2 int(math.sqrt(count) + 1)):             if count % x == 0:                  isprime = False                 break                  if isprime:             print count                  count += 1  # Sieve of Eratosthenes # Code by David Eppstein UC Irvine 28 Feb 2002 # http://code.activestate.com/recipes/117119/  def gen_primes():     &quot;&quot;&quot; Generate an infinite sequence of prime numbers.     &quot;&quot;&quot;     # Maps composites to primes witnessing their compositeness.     # This is memory efficient as the sieve is not &quot;run forward&quot;     # indefinitely but only as long as required by the current     # number being tested.     #     D = {}          # The running integer that's checked for primeness     q = 2          while True:         if q not in D:             # q is a new prime.             # Yield it and mark its first multiple that isn't             # already marked in previous iterations             #              yield q             D[q * q] = [q]         else:             # q is composite. D[q] is the list of primes that             # divide it. Since we've reached q we no longer             # need it in the map but we'll mark the next              # multiples of its witnesses to prepare for larger             # numbers             #              for p in D[q]:                 D.setdefault(p + q []).append(p)             del D[q]                  q += 1  
conn = MySQLdb.connect(host user password database) cursor = conn.cursor() attempts = 0  while attempts &lt; 3:     try:         cursor.execute(query)         rows = cursor.fetchall()         for row in rows:             # do something with the data         break     except MySQLdb.Error e:         attempts += 1         print "MySQL Error %d: %s" % (e.args[0] e.args[1])  
import sys re  first_re = re.compile(r'^\d{3}$')  if len(sys.argv) &gt; 1:      if first_re.match(sys.argv[1]):         print "Primary argument is : " sys.argv[1]     else:         raise ValueError("First argument should be ...")      args = sys.argv[2:]  else:      args = ()  # ... anywhere in code ...  if 'debug' in args:     print 'debug flag'  if 'xls' in args:     print 'xls flag'  import sys re optparse  first_re = re.compile(r'^\d{3}$')  parser = optparse.OptionParser() parser.set_defaults(debug=Falsexls=False) parser.add_option('--debug' action='store_true' dest='debug') parser.add_option('--xls' action='store_true' dest='xls') (options args) = parser.parse_args()  if len(args) == 1:     if first_re.match(args[0]):         print "Primary argument is : " args[0]     else:         raise ValueError("First argument should be ...") elif len(args) &gt; 1:     raise ValueError("Too many command line arguments")  if options.debug:     print 'debug flag'  if options.xls:     print 'xls flag'  python script.py --debug --xls 001  
__str__. 
import os  def check_pid(pid):             """ Check For the existence of a unix pid. """     try:         os.kill(pid 0)     except OSError:         return False     else:         return True  
&gt;&gt;&gt; import numpy &gt;&gt;&gt; a = numpy.zeros(shape=(52)) &gt;&gt;&gt; a array([[ 0.  0.]    [ 0.  0.]    [ 0.  0.]    [ 0.  0.]    [ 0.  0.]]) &gt;&gt;&gt; a[0] = [12] &gt;&gt;&gt; a[1] = [23] &gt;&gt;&gt; a array([[ 1.  2.]    [ 2.  3.]    [ 0.  0.]    [ 0.  0.]    [ 0.  0.]])  
from django.utils.functional import lazy  class CarSearchForm(forms.Form):       # lots of fields like this     bodystyle = forms.ChoiceField(choices=lazy(bodystyle_choices tuple)())  
_reduce_ex() copy_reg.py if base is self.__class__:     print self # new        raise TypeError "can't pickle %s objects" % base.__name__  &lt;bound method ?.test_func of &lt;__main__.Test object at 0xb7f4230c&gt;&gt; Traceback (most recent call last):   File "nopickle.py" line 14 in ?     pickle.dumps(test)   File "/usr/lib/python2.4/copy_reg.py" line 69 in _reduce_ex     raise TypeError "can't pickle %s objects" % base.__name__ TypeError: can't pickle instancemethod objects  
ClientCreator Deferred ClientFactory *args Deferred 
class MyForm (forms.Form):     def __init__ (self title desc *args **kwargs):         self.title = title         self.desc = desc         super (MyForm self).__init__ (*args **kwargs) # call base class  form = MyForm ('Title A' 'Description A')     &lt;h1&gt;{{ form.title }}&lt;/h1&gt;    &lt;p&gt;{{ form.desc }}&lt;/p&gt;  
PyString_Size PyString_AsString 
MEDIA_ROOT settings.py MEDIA_ROOT /static/ /static/ MEDIA_ROOT C:/Documents/static/ MEDIA_ROOT MEDIA_URL MEDIA_ROOT /static/files/8.nzb /static/ MEDIA_URL MEDIA_ROOT MEDIA_URL File.nzb %(1)sfiles/%(2)s.nzb' % {'1': settings.MEDIA_URL '2': self.pk} MEDIA_URL delete() delete() File super(File self).delete() File.nzb MEDIA_URL 
def get_tags(s open_delim  ='{{'                  close_delim ='}}' ):     while True:        # Search for the next two delimiters in the source text       start = s.find(open_delim)       end   = s.find(close_delim)        # We found a non-empty match       if -1 &lt; start &lt; end:           # Skip the length of the open delimiter          start += len(open_delim)           # Spit out the tag          yield s[start:end].strip()           # Truncate string to start from last match          s = s[end+len(close_delim):]        else:          return  # prints: today runner_up blabla oooo for tag in get_tags(html):     print tag  
try:     x except NameError:     # x doesn't exist do something else:     # x exists do something else  assert(isinstance(variable type))  var win:ThingPicker = PopUpManager.createPopUp(fEmotionsButton         ThingPicker false) as ThingPicker;  win = createPopup(parent ThingPicker)  
def add_active_residents(self):     ssa_res = SSA_Resident.objects.select_related(depth=1).filter(ssa=self.ssa active=True)     for r in ssa_res:         self.residents.add(r.resident) # Fails Here     self.save()  ssa_res 
{% load pretty_forms %} &lt;form action="." method="POST"&gt; {{ form.as_p|pretty_checkbox }} &lt;p&gt;&lt;input type="submit" value="Submit"&gt;&lt;/p&gt; &lt;/form&gt;  from django import template from django.template.defaultfilters import stringfilter import logging  register=template.Library()  @register.filter(name='pretty_checkbox') @stringfilter def pretty_checkbox(value):     # Iterate over the HTML fragment extract &lt;label&gt; and &lt;input&gt; tags and     # switch the order of the pairs where the input type is "checkbox".     scratch = value     output = ''     try:         while True:             ls = scratch.find('&lt;label')             if ls &gt; -1:                 le = scratch.find('&lt;/label&gt;')                 ins = scratch.find('&lt;input')                 ine = scratch.find('/&gt;' ins)                 # Check whether we're dealing with a checkbox:                 if scratch[ins:ine+2].find(' type="checkbox" ')&gt;-1:                     # Switch the tags                     output += scratch[:ls]                     output += scratch[ins:ine+2]                     output += scratch[ls:le-1]+scratch[le:le+8]                 else:                     output += scratch[:ine+2]                 scratch = scratch[ine+2:]             else:                 output += scratch                 break     except:         logging.error("pretty_checkbox caught an exception")     return output  
q = 'uri:http\://www.example.com'  
PyListObject Py_ssize_t PyObject_HEAD Py_ssize_t PyObject_VAR_HEAD 
__call__ pickle class foo(object):     def __init__(self bar baz):         self.baz = baz     def __call__(selfwaldo):         return self.baz * waldo  pickle pickle 
python manage.py my_cool_command  cron at at schtasks.exe 
class Widget(object):     def process(self):         # Determine if this widget should process a POST aimed at it         # ie one of the POST args is a widget id indicating the widget         # to handle the POST      def prepare(self):         # Load data from the database if needed in prep for the render      def render(self):         # return the rendered content      def __call__(self):         self.process()         self.prepare()         return self.render()  
rsync 10**6 1% 
for for x * x y * y for x in 1..N {     for y in 1..N {         for z in 1..N {             if x * x + y * y == z * z then {                 // use x y z             }         }     } }  z &lt; y N x &lt; y &lt; z for x in 1..N {     for y in x+1..N {         for z in y+1..N {             if x * x + y * y == z * z then {                 // use x y z             }         }     } }  N N z z * z &lt; x * x + y * y z for x in 1..N {     for y in x+1..N {         z = y + 1         while z * z &lt; x * x + y * y {             z = z + 1         }         if z * z == x * x + y * y and z &lt;= N then {             // use x y z         }     } }  N N x y z z y y for x in 1..N {     y = x+1     z = y+1     while z &lt;= N {         while z * z &lt; x * x + y * y {             z = z + 1         }         if z * z == x * x + y * y and z &lt;= N then {             // use x y z         }         y = y + 1     } }  y z x N N N while z z while while x y x N Version 4:           46 sec. using square root:  134 sec. array and map:      400 sec.  squares = array of i*i for i in 1 .. N roots = map of i*i -&gt; i for i in 1 .. N for x in 1 .. N     for y in x+1 .. N         z = roots[squares[x] + squares[y]]         if z exists use x y z  for x in 1 .. N     for y in x+1 .. N         z = (int) sqrt(x * x + y * y)         if z * z == x * x + y * y then use x y z  public Collection&lt;Triple&gt; byBetterWhileLoop() {     Collection&lt;Triple&gt; result = new ArrayList&lt;Triple&gt;(limit);     for (int x = 1; x &lt; limit; ++x) {         int xx = x * x;         int y = x + 1;         int z = y + 1;         while (z &lt;= limit) {             int zz = xx + y * y;             while (z * z &lt; zz) {++z;}             if (z * z == zz &amp;&amp; z &lt;= limit) {                 result.add(new Triple(x y z));             }             ++y;         }     }     return result; }  x * x z * z 
def f(n x): # these `n` `x` have nothing to do with `n` and `x` from main()     n = 2    # put `n` label on `2` balloon     x.append(4) # call `append` method of whatever object `x` is referring to.     print('In f():' n x)     x = []   # put `x` label on `[]` ballon     # x = [] has no effect on the original list that is passed into the function  
file_dealloc Objects/fileobject.c __del__ __del__ 
import signal sys time pstats cProfile  call = 0  def sigint_handler(signal frame):   global call   if call &lt; 2:     stats = pstats.Stats(profiler)     stats.strip_dirs().sort_stats('cumulative').print_stats()     profiler.enable()     call += 1   else:     sys.exit()  def wait():   time.sleep(1)  def main_io_loop():   signal.signal(signal.SIGINT sigint_handler)   while 1:     wait()  profiler = cProfile.Profile() profiler.runctx("main_io_loop()" globals() locals())  
map filter map(lambda x: x*x lst) [x*x for x in lst] psyco.cannotcompile(re.compile) 
import sys import tty tty.setcbreak(sys.stdin) while True:     print ord(sys.stdin.read(1))  ReadConsoleInput e.EventType==KEY_EVENT e.Event.KeyEvent.wVirtualKeyCode 
&gt;&gt;&gt; def convert(s):     try:         return float(s)     except ValueError:         num denom = s.split('/')         return float(num) / float(denom) ...  &gt;&gt;&gt; convert("0.1234") 0.1234  &gt;&gt;&gt; convert("1/2") 0.5  
super() super().__init__() super(ChildB self).__init__() super() 
blocks = []  blocks.append  
class Profile(models.Model):     ...     user = models.ForeignKey("django.contrib.auth.models.User" unique=True)  AUTH_PROFILE_MODULE = "appname.profile"  def my_view(request):     profile = request.user.get_profile()     etc...  
:) 
def set_canvas(cv):     global photo # here!     photo=PhotoImage(file=sys.argv[1])     cv.create_image(0 0 image=photo anchor=NW)  # embed a photo     print cv     print photo  photo set_canvas 
cursor.execute("""SELECT foo bar baz quux FROM table WHERE id = %s;"""                    (interesting_record_id))  for foo bar baz quux in cursor.fetchall():     frobnicate(foo + bar baz * quux)  SELECT * FROM table... 
try:    from skynet import SkyNet    inherit_from = SkyNet except ImportError:    inherit_from = object  class SelfAwareSkyeNet(inherit_from):     pass  
a.update(b)  
from django.db.models.signals import post_save from somewhere_in_my_app import my_post_save_handler  post_save.disconnect(my_post_save_handler) instance.save() post_save.connect(my_post_save_handler)  save() 
raw_input() 
os.walk for root dirnames filenames in os.walk(...):   dirnames[:] = [     dir for dir in dirnames     if not os.path.ismount(os.path.join(root dir))]   ...  
self.connect(lcdRange QtCore.SIGNAL('valueChanged') previousRange.setValue)  SIGNAL('valueChanged') previousRange.setValue 
def prime_factors(n):   for i in range(2n):     if n % i == 0:       return [i] + prime_factors(n / i)   return [n]  
wind = MyCustomWindow(self)  wind = MyCustomWindow(self.scrolling_window)  
def fibo(a=-1b=1upto=4000000):     while a+b&lt;upto:         ab = ba+b         yield b  print sum(i for i in fibo() if not i%2)  
&gt;&gt;&gt; def change(obj): ...     obj.x = 10 ... &gt;&gt;&gt; class Point(object): xy = 00 ... &gt;&gt;&gt; p = Point() &gt;&gt;&gt; p.x 0 &gt;&gt;&gt; change(p) &gt;&gt;&gt; p.x 10  
def new_panel(self nm):     pnl = wx.Panel(self)     # just to debug I added a string attribute to the panel     # don't you love dynamic languages? :)     pnl.identifierTag = nm        self.nb.AddPage(pnl nm)     self.sizer = wx.BoxSizer()     self.sizer.Add(self.nb 1 wx.EXPAND)     self.SetSizer(self.sizer)      pnl.Bind(wx.EVT_LEFT_DOWN self.click)  def click(self event):     print 'Mouse click'     # get the current selected page     page = self.nb.GetPage(self.nb.GetSelection())     # notice that it is the panel that you created in new_panel     print page.identifierTag  
apply_func_to f num return f(num) def my_func(x):     return x*x  def apply_func_to(f num):     return f(num)  &gt;&gt;&gt;apply_func_to(my_func 2) 4  &gt;&gt;&gt;apply_func_to(lambda x:x*x 3) 9  
warnings 
class Calculator(object):     def add(self a b):         return a + b  ScriptEngine engine = Python.CreateEngine(); ScriptSource source = engine.CreateScriptSourceFromFile("Calculator.py"); ScriptScope scope = engine.CreateScope();  ObjectOperations op = engine.Operations;  source.Execute(scope); // class object created object klaz = scope.GetVariable("Calculator"); // get the class object object instance = op.Call(klaz); // create the instance object method = op.GetMember(instance "add"); // get a method int result = (int)op.Call(method 4 5); // call method and get result (9)  ScriptEngine engine = Python.CreateEngine(); ScriptSource source = engine.CreateScriptSourceFromFile("Calculator.py"); ScriptScope scope = engine.CreateScope(); source.Execute(scope);  dynamic Calculator = scope.GetVariable("Calculator"); dynamic calc = Calculator(); int result = calc.add(4 5);  Install-Package IronPython  
isinstance isinstance isinstance hasattr new.instancemethod __base__ LogFoo 
b.value = 12.0 change(b) print b.value  
dict(zip(keysvalues))  
make_link link_output return def make_link(in_link):   ...   if title == '':     link_output = ...   else:     link_output = ...   return link_output  anchor_output anchor_output = make_link(anchor_text)  None None 
quad quad sin quad quad 
tempfile.mkdtemp 
inspect &gt;&gt;&gt; func = lambda x y: (x y) &gt;&gt;&gt;  &gt;&gt;&gt; func.__code__.co_argcount 2 &gt;&gt;&gt; func.__code__.co_varnames ('x' 'y') &gt;&gt;&gt; &gt;&gt;&gt; def func2(xy=3): ...  print(func2.__code__.co_varnames) ...  pass # Other things ...  &gt;&gt;&gt; func2(33) ('x' 'y') &gt;&gt;&gt;  &gt;&gt;&gt; func2.__defaults__ (3)  func_code __code__ func_defaults __defaults__ 
import cProfile cProfile.run('foo()')  python -m cProfile myscript.py  python -m cProfile %1  profile euler048.py  1007 function calls in 0.061 CPU seconds  Ordered by: standard name ncalls  tottime  percall  cumtime  percall filename:lineno(function)     1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)  1000    0.051    0.000    0.051    0.000 euler048.py:2(&lt;lambda&gt;)     1    0.005    0.005    0.061    0.061 euler048.py:2(&lt;module&gt;)     1    0.000    0.000    0.061    0.061 {execfile}     1    0.002    0.002    0.053    0.053 {map}     1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}     1    0.000    0.000    0.000    0.000 {range}     1    0.003    0.003    0.003    0.003 {sum}  
setup(   windows=[{"script" : "main.py"}]   options={"py2exe" : {     "includes": ["sip" "PyQt4.QtSql"]     "packages": ["sqlalchemy.databases.sqlite"] }})  
lib/ sys.path lib/__init__.py from . import settings # or just 'import settings' on old Python versions class Helper(object):       pass  from lib.settings import Values from lib import Helper  __init__.py Helper settings.py Helper lib/helper.py $ python import_submodule.py  settings helper Helper in lib.settings someobject Helper in lib.foo.someobject  # ./import_submodule.py import fnmatch os from lib.settings import Values from lib import Helper  print for root dirs files in os.walk('.'):     for f in fnmatch.filter(files '*.py'):         print "# %s/%s" % (os.path.basename(root) f)         print open(os.path.join(root f)).read()         print   # lib/helper.py print 'helper' class Helper(object):     def __init__(self module_name):         print "Helper in" module_name   # lib/settings.py print "settings" import helper  class Values(object):     pass  helper.Helper(__name__)   # lib/__init__.py #from __future__ import absolute_import import settings foo.someobject helper  Helper = helper.Helper   # foo/someobject.py print "someobject" from .. import helper  helper.Helper(__name__)   # foo/__init__.py import someobject  
/etc/init.d/postfix &lt;username&gt;  ALL = NOPASSWD: /etc/init.d/postfix  
csv import sys csv writer = csv.writer(sys.stdout delimiter="\t") writer.writerows(data)  
join split ' '.join(&lt;list&gt;) list_output = ''.join('&lt;li&gt;' + item + '&lt;/li&gt;\n' for item in x)  list_output = '\n'.join('&lt;li&gt;' + item + '&lt;/li&gt;' for item in x)  list_output = '&lt;li&gt;' + '&lt;/li&gt;\n&lt;li&gt;'.join(item for item in x) + '&lt;/li&gt;\n'  
python python 2.5.1 select.poll() $ /usr/bin/python Python 2.5.1 (r251:54863 Jan 13 2009 10:26:13)  [GCC 4.0.1 (Apple Inc. build 5465)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import socket select &gt;&gt;&gt; select.poll() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; AttributeError: 'module' object has no attribute 'poll' &gt;&gt;&gt;   select.poll() $ /opt/local/bin/python2.5 Python 2.5.4 (r254:67916 Feb  3 2009 21:40:31)  [GCC 4.0.1 (Apple Inc. build 5488)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import socket select &gt;&gt;&gt; select.poll() &lt;select.poll object at 0x11128&gt; &gt;&gt;&gt;   
from ftplib import FTP  ftp = FTP(host user passwd) for r in ftp.dir():     if r.upper().startswith('D'):         print r[58:]  # Starting point  
re.compile(r"^(.+)\n((?:\n.+)+)" re.MULTILINE)  ^ $ ^ $ re.compile(r"^(.+)(?:\n|\r\n?)((?:(?:\n|\r\n?).+)+)" re.MULTILINE)  
list_of_ids format_strings = ''.join(['%s'] * len(list_of_ids)) cursor.execute("DELETE FROM foo.bar WHERE baz IN (%s)" % format_strings                 tuple(list_of_ids))  list_of_ids 
import re urlparse  find_re = re.compile(r'\bhref\s*=\s*("[^"]*"|\'[^\']*\'|[^"\'&lt;&gt;=\s]+)')  def fix_urls(document base_url):     ret = []     last_end = 0     for match in find_re.finditer(document):         url = match.group(1)         if url[0] in "\"'":             url = url.strip(url[0])         parsed = urlparse.urlparse(url)         if parsed.scheme == parsed.netloc == '': #relative to domain             url = urlparse.urljoin(base_url url)             ret.append(document[last_end:match.start(1)])             ret.append('"%s"' % (url))             last_end = match.end(1)     ret.append(document[last_end:])     return ''.join(ret)  &gt;&gt;&gt; document = '''&lt;tr class="build"&gt;&lt;th colspan="0"&gt;Build 110&lt;/th&gt;&lt;/tr&gt; &lt;tr class="arccase project flagday"&gt;&lt;td&gt;Feb-25&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="../pages/2009022501/"&gt;Flag Day and Heads Up: Power Aware Dispatcher and Deep C-States&lt;/a&gt;&lt;br /&gt;cpupm keyword mode extensions - &lt;a href="/os/community/arc/caselog/2008/777/"&gt;PSARC/2008/777&lt;/a&gt;&lt;br /&gt; CPU Deep Idle Keyword - &lt;a href="/os/community/arc/caselog/2008/663/"&gt;PSARC/2008/663&lt;/a&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;''' &gt;&gt;&gt; fix_urls(document"http://www.opensolaris.org/os/community/on/flag-days/all/") '&lt;tr class="build"&gt;&lt;th colspan="0"&gt;Build 110&lt;/th&gt;&lt;/tr&gt; &lt;tr class="arccase project flagday"&gt;&lt;td&gt;Feb-25&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="http://www.opensolaris.org/os/community/on/flag-days/pages/2009022501/"&gt;Flag Day and Heads Up: Power Aware Dispatcher and Deep C-States&lt;/a&gt;&lt;br /&gt;cpupm keyword mode extensions - &lt;a href="http://www.opensolaris.org/os/community/arc/caselog/2008/777/"&gt;PSARC/2008/777&lt;/a&gt;&lt;br /&gt; CPU Deep Idle Keyword - &lt;a href="http://www.opensolaris.org/os/community/arc/caselog/2008/663/"&gt;PSARC/2008/663&lt;/a&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;' &gt;&gt;&gt;  
oldname.pyc oldname.pyo 
class Feature( models.Model ):     feature_name = models.CharField( max_length=128 )     feature_value = models.TextField()     part_of = models.ForeignKey( Product )  p= Product( "iPhone" "Apple" 350 ) p.save() f= Feature( "mp3 capacity" "16Gb" p ) f.save()  
def adds_dynamic_z_decorator(f):   def replacement(*arg**karg):     # create a new 'z' binding in globals saving previous     if 'z' in globals():       oldZ = (globals()['z'])     else:       oldZ = None     try:       globals()['z'] = None       #invoke the original function       res = f(*arg **karg)     finally:       #restore any old bindings       if oldZ:         globals()['z'] = oldZ[0]       else:         del(globals()['z'])     return res   return replacement  @adds_dynamic_z_decorator def func(xy):   print z  def other_recurse(x):   global z   print 'x=%s z=%s' %(xz)   recurse(x+1)   print 'x=%s z=%s' %(xz)  @adds_dynamic_z_decorator def recurse(x=0):   global z   z = x   if x &lt; 3:     other_recurse(x)  print 'calling func(12)' func(12)  print 'calling recurse()' recurse()  
&lt; .5 
backgroundr backgroundr = int(random.random() * 255) + 1  
global backgroundr; global backgroundg; global backgroundb; backgroundr = int(random.random()*255)+1 backgroundg = int(random.random()*255)+1 backgroundb = int(random.random()*255)+1  def ColourCheck():     global backgroundr;     global backgroundg;     global backgroundb;     checknumber = int(random.random()*50)+1     if checknumber == 50:         backgroundr = int(random.random()*255)+1         backgroundg = int(random.random()*255)+1         backgroundb = int(random.random()*255)+1  
GetExitCodeProcess OpenProcess 
def updateQListWidget(qlistwidget values):         """ Updates a QListWidget object with a list of values         ARGS:             qlistwidget  - QListWidget object             values       - list of values to add to list widget         """         qlistwidget.clear()         qlist = QtCore.QStringList()         for v in values:             s = QtCore.QString(v)             qlist.append(s)         qlistwidget.addItems(qlist)   
import inspect re  def varname(p):   for line in inspect.getframeinfo(inspect.currentframe().f_back)[3]:     m = re.search(r'\bvarname\s*\(\s*([A-Za-z_][A-Za-z0-9_]*)\s*\)' line)     if m:       return m.group(1)  if __name__ == '__main__':   spam = 42   print varname(spam)  
import compiler eq= "sin(x)*x**2" ast= compiler.parse( eq )  
def get_first_text_part(msg):     maintype = msg.get_content_maintype()     if maintype == 'multipart':         for part in msg.get_payload():             if part.get_content_maintype() == 'text':                 return part.get_payload()     elif maintype == 'text':         return msg.get_payload()  
class X(object):     def get_i(self):         return self._i     def set_i(self value):         self._i= value     i= property(get_i set_i)  
from functools import reduce  # Required in Python 3 import operator def prod(iterable):     return reduce(operator.mul iterable 1)  &gt;&gt;&gt; prod(range(1 5)) 24  &gt;&gt;&gt; import math  &gt;&gt;&gt; math.factorial(10) 3628800  &gt;&gt;&gt; from math import log exp  &gt;&gt;&gt; data = [1.2 1.5 2.5 0.9 14.2 3.8] &gt;&gt;&gt; exp(sum(map(log data))) 218.53799999999993  &gt;&gt;&gt; 1.2 * 1.5 * 2.5 * 0.9 * 14.2 * 3.8 218.53799999999998  
class Toolbar():   def __init__(self frame_to_connect_to):     frame_to_connect_to.toolbar = frame_to_connect_to.CreateToolBar(style=(wx.TB_HORZ_LAYOUT | wx.TB_TEXT))     frame_to_connect_to.toolbar.SetToolBitmapSize((3232))     frame_to_connect_to.toolbar.AddLabelTool(3 '' wx.Bitmap('GUI/icons/fileopen.png'))     frame_to_connect_to.toolbar.AddLabelTool(3 '' wx.Bitmap('GUI/icons/filesave.png'))     frame_to_connect_to.toolbar.AddSeparator()     frame_to_connect_to.toolbar.Realize()  class Window(wx.Frame)   def __init__(self parent plot):     wx.Frame.__init__(self parent wx.ID_ANY "Name" size =(900 600))     self.Centre()     self._init_toolbar()    def _init_toolbar(self):     self.toolbar = self.CreateToolBar(style=(wx.TB_HORZ_LAYOUT | wx.TB_TEXT))     self.toolbar.SetToolBitmapSize((3232))     self.toolbar.AddLabelTool(3 '' wx.Bitmap('GUI/icons/fileopen.png'))     self.toolbar.AddLabelTool(3 '' wx.Bitmap('GUI/icons/filesave.png'))     self.toolbar.AddSeparator()     self.toolbar.Realize()  
enter search string open file if file has data    start loop      get next line of file      search the line for your string and do something     Exit loop if line was end of file  jargon = open("jargonFile.txt""r") searchPhrase = raw_input("Enter the search phrase: ") while searchPhrase != "":     &lt;&lt;if file has data?&gt;&gt;       &lt;&lt;while&gt;&gt;         result = jargon.readline().find(searchPhrase)         if result == -1:             print "Cannot find this term."         else:             print result       &lt;&lt;result is not end of file&gt;&gt;    searchPhrase = raw_input("Enter the search phrase: ") jargon.close()  with open("hello.txt") as f:     for line in f:         print line  searchPhrase = raw_input("Enter the search phrase: ") while searchPhrase != "":     with open("jargonFile.txt") as f:         for line in f:            result = line.find(searchPhrase)            if result == -1:               print "Cannot find this term."            else:               print result     searchPhrase = raw_input("Enter the search phrase: ")  
p.getElementsByTagName('Category')[0].textContent  p.getElementsByTagName('Category')[0].firstChild.wholeText  
IPV6_JOIN_GROUP IPV6_JOIN_ANYCAST s.setsockopt() socket IPV6_JOIN_ANYCAST 27 IPV6_LEAVE_ANYCAST 28 
import re  class Re(object):   def __init__(self):     self.last_match = None   def match(selfpatterntext):     self.last_match = re.match(patterntext)     return self.last_match   def search(selfpatterntext):     self.last_match = re.search(patterntext)     return self.last_match  gre = Re() if gre.match(r'foo'text):   # do something with gre.last_match elif gre.match(r'bar'text):   # do something with gre.last_match else:   # do something else  
% ./jython -J-XX:+PrintCompilation -J-verbose:gc   1       java.lang.String::hashCode (60 bytes)   2       java.lang.String::charAt (33 bytes)   3       java.lang.String::lastIndexOf (156 bytes)   4       java.lang.String::indexOf (151 bytes) [GC 1984K-&gt;286K(7616K) 0.0031513 secs]  
object MyClass(object) class testDec(object):      @property     def x(self):          print 'called getter'         return self._x      @x.setter     def x(self value):          print 'called setter'         self._x = value  &gt;&gt;&gt; k = testDec() &gt;&gt;&gt; k.x called getter Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "/devel/class_test.py" line 6 in x     return self._x AttributeError: 'testDec' object has no attribute '_x' &gt;&gt;&gt; k.x = 5 called setter &gt;&gt;&gt; k.x called getter 5 &gt;&gt;&gt;   @x.setter def x_setter(self value):     ...  name 'x' is not defined 
[x for x in myList if x.n == 30]  # list of all elements with .n==30  def contains(list filter):     for x in list:         if filter(x):             return True     return False  if contains(myList lambda x: x.n == 3)  # True if any element has .n==3     # do stuff  
//title[text()='Text 1']/../content/text()  
&gt;&gt;&gt; import re &gt;&gt;&gt; s = 'blah blah &lt;a href="blah"&gt;link&lt;/a&gt;' &gt;&gt;&gt; re.sub('&lt;[^&gt;]*&gt;' '' s) 'blah blah link'  
[u'ABC']  soup[0].encode("ascii")   soup[0].encode("latin-1")    soup[0].encode("utf-8")   soup[0].encode(soup.originalEncoding)  
Python 3.9 removeprefix 'Path=helloworld'.removeprefix('Path=') # 'helloworld'  
pathlib.Path.mkdir import pathlib pathlib.Path("/tmp/path/to/desired/directory").mkdir(parents=True exist_ok=True)  exist_ok os.makedirs exist_ok True mkdir -p mode OSError import os os.makedirs("/tmp/path/to/desired/directory" exist_ok=True)  os.makedirs import errno     import os  def mkdir_p(path):     try:         os.makedirs(path)     except OSError as exc:  # Python ? 2.5         if exc.errno == errno.EEXIST and os.path.isdir(path):             pass         else:             raise  
import numpy list_size_1 = [] list_size_2 = [] for row in data.itervalues():     if len(row) == 1:       list_size_1.append(row)     elif len(row) == 2:       list_size_2.append(row) list_size_1 = numpy.array(list_size_1) list_size_2 = numpy.array(list_size_2) std_1 = numpy.std(list_size_1 axis = 1) std_2 = numpy.std(list_size_2 axis = 1)  
logger= logging.getLogger( __name__ )  
fread = open('input.csv' 'rb').read() mytext = fread.decode('utf-16')  
[^&lt;&gt;]*  ((?!&lt;/a).)*  &lt;/a 
.find() .findall() xpath() cssselect() from lxml.html import fromstring mySearchTree = fromstring(your_input_string)  # Find all 'a' elements inside 'tr' table rows with css selector for a in mySearchTree.cssselect('tr a'):     print 'found "%s" link to href "%s"' % (a.text a.get('href'))  # Find all 'a' elements inside 'tr' table rows with xpath for a in mySearchTree.xpath('.//tr/*/a'):     print 'found "%s" link to href "%s"' % (a.text a.get('href'))  
eventFilter QEvent.MouseButtonRelease eventFilter QEvent.MouseButtonRelease def mousePressEvent (self e):     self.colapse_expand_click = False     if &lt;user clicked node&gt;:         colapse_expand_node()         e.accept ()         self.colapse_expand_click = True  mousePressEvent mouseReleaseEvent class RevisionSelectorWidget(QtGui.QComboBox):     def __init__(self parent = None):         QtGui.QComboBox.__init__(self parent)          self.log_list = RevisionSelectorLogList(self)         self.setView(self.log_list)         self.log_list.installEventFilter(self)         self.log_list.viewport().installEventFilter(self)      def eventFilter(self object event):         if event.type() == QtCore.QEvent.MouseButtonRelease:             if self.log_list.colapse_expand_click:                 return True         return False  
def iterate(i):     for value in i:         yield value     return  count = 0 for value in iterate(range([])):     print value     count += 1 else:     if count == 0:         print "list was empty"  
form = JournalForm(initial={'tank': 123})  tank = forms.IntegerField(widget=forms.HiddenInput() initial=123)   
def foo():     foo.bar = foo.bar + 1  foo.bar = 0  foo() foo() foo()  print foo.bar # prints 3  
from string import uppercase as up import itertools  def to_base(q alphabet):     if q &lt; 0: raise ValueError( "must supply a positive integer" )     l = len(alphabet)     converted = []     while q != 0:         q r = divmod(q l)         converted.insert(0 alphabet[r])     return "".join(converted) or alphabet[0]  class TimestampUniqifier( object ):     def __init__(self):         self.last = ''         self.counter = itertools.count()     def __call__( self str ):         if str == self.last:             suf = self.counter.next()             return str + to_base( suf up )         else:             self.last = str             self.counter = itertools.count()             return str              timestamp_uniqify = TimestampUniqifier()  timestamp_uniqify('1') '1' timestamp_uniqify('1') '1A' timestamp_uniqify('1') '1B' timestamp_uniqify('1') '1C' timestamp_uniqify('2') '2' timestamp_uniqify('3') '3' timestamp_uniqify('3') '3A' timestamp_uniqify('3') '3B'  for i in range(100): print timestamp_uniqify('4')  4 4A 4B 4C 4D 4E 4F 4G 4H 4I 4J 4K 4L 4M 4N 4O 4P 4Q 4R 4S 4T 4U 4V 4W 4X 4Y 4Z 4BA 4BB 4BC 4BD 4BE 4BF 4BG 4BH 4BI 4BJ 4BK 4BL 4BM 4BN 4BO 4BP 4BQ 4BR 4BS 4BT 4BU 4BV 4BW 4BX 4BY 4BZ 4CA 4CB 4CC 4CD 4CE 4CF 4CG 4CH 4CI 4CJ 4CK 4CL 4CM 4CN 4CO 4CP 4CQ 4CR 4CS 4CT 4CU 4CV 4CW 4CX 4CY 4CZ 4DA 4DB 4DC 4DD 4DE 4DF 4DG 4DH 4DI 4DJ 4DK 4DL 4DM 4DN 4DO 4DP 4DQ 4DR 4DS 4DT 4DU  
numpy cv2 pip install numpy pip install opencv-python import cv2  cv2.namedWindow("preview") vc = cv2.VideoCapture(0)  if vc.isOpened(): # try to get the first frame     rval frame = vc.read() else:     rval = False  while rval:     cv2.imshow("preview" frame)     rval frame = vc.read()     key = cv2.waitKey(20)     if key == 27: # exit on ESC         break cv2.destroyWindow("preview")  
 def initialize():     global VAR     print('Content-type: text/html\n\n')     print(VAR)     VAR = 'h'     print(VAR)  
 >>> from mechanize import Browser >>> b = Browser() >>> b._ua_handlers['_cookies'].cookiejar mechanize._clientcookie.CookieJar[] >>> b.open('http://google.com') response_seek_wrapper at 0xb7a922ccL whose wrapped object = closeable_response at 0xb7aa070cL whose fp = socket._fileobject object at 0xb7a94224 >>> >>> b._ua_handlers['_cookies'].cookiejar mechanize._clientcookie.CookieJar[Cookie(version=0 name='PREF' value='ID=57d545c229b4cf3f:TM=1236081634:LM=1236081634:S=p001WJMOr-V8Rlvi' port=None port_specified=False domain='.google.com' domain_specified=True domain_initial_dot=True path='/' path_specified=True secure=False expires=1299153634 discard=False comment=None comment_url=None rest={} rfc2109=False) Cookie(version=0 name='PREF' value='ID=20534d80a5ccf2ea:TM=1236081635:LM=1236081635:S=jW3UotZ0dg8sv6mf' port=None port_specified=False domain='.google.com.ua' domain_specified=True domain_initial_dot=True path='/' path_specified=True secure=False expires=1299153635 discard=False comment=None comment_url=None rest={} rfc2109=False)] >>>                             
&gt;&gt;&gt; b"abcde" b'abcde'  # utf-8 is used here because it is a very common encoding but you # need to use the encoding your data is actually in. &gt;&gt;&gt; b"abcde".decode("utf-8")  'abcde'  
 >>> re.match("(get|post|put|head)\s+(\S+) "'GET some-site.com HTTP/1.0 ...'re.IGNORECASE).groups() ('GET' 'some-site.com') >>>                                                                                             
 >>> p = re.compile('.*' re.DEBUG) max_repeat 0 65535   any None >>>                           
import __main__ print __main__.__file__  
class JournalForm(ModelForm):     tank = forms.ModelChoiceField(label=""                                   queryset=TankProfile.objects.all()                                   widget=forms.HiddenInput)  
__mro__ __init__  MRO: DBCAobject    super(D self).__init__() B.__init__ B.__init__ super(B self).__init__() __init__ 
d = SomeObject() def fread():     d = None     for line in open('somefile.txt'):          if d is None:             d = SomeObject()          if line.strip():             # do some processing         else:             yield d             d = None      if d: yield d  
import imaplib  sess = imaplib.IMAP4() sess.login('superuser' 'password') # Honor the mailbox syntax of your server! sess.select('INBOX/Luke') # Or something similar.  typ data = sess.search(None 'ALL') # All Messages.  subjectlines = [] for num in data[0].split():     typ msgdata = sess.fetch(num '(RFC822.SIZE BODY[HEADER.FIELDS (SUBJECT)])')     subject = msgdata[0][1].lstrip('Subject: ').strip()     subjectlines.append(subject)  
import re pat = re.compile('([\w\s]+)\(([\w\s]+)(\d+/\d+)\)') info = pat.match(s) print info.groups()  ('Michael Schenker Group ' 'House of Blues Dallas ' '3/26')  info print info.group(1) # or info.groups()[0]  print '"%s""%s""%s"' % (info.group(1) info.group(2) info.group(3)) "Michael Schenker Group""House of Blues Dallas""3/26"  ([\w\s]+) \( ([\w\s]+) (\d+/\d+) \) 
None django/core/mail.py mail_admins() django/core/mail.py django/core/mail.py send_mail() from_mail 
bind s.setsockopt(socket.SOL_SOCKET socket.SO_REUSEADDR 1)  SO_REUSEADDR 
def foo(x)   (0..x).select { |i| bar(i) } end  yield 
class QuestionInline(admin.TabularInline):     model = Question     extra = 20  class AnswerInline(admin.TabularInline):     model = Answer     extra = 4  class QuestionAdmin(admin.ModelAdmin):     inlines = [AnswerInline]  class AnswerAdmin(admin.ModelAdmin):     pass  class QuizAdmin(admin.ModelAdmin):     inlines = [QuestionInline]  
hasattr() if hasattr(a 'property'):     a.property  hasattr hasattr 
built_in_list = ['__builtins__' '__doc__' '__file__' '__name__']  for i in built_in_list:     if i in module.__dict__:         del module.__dict__[i]  from mypackage import fooplugin barplugin bazplugin plugins= [fooplugin.FooPlugin barplugin.BarPlugin bazplugin.BazPlugin]  
ls -al | python -c "import sys; print sys.stdin.readlines()"  
$ **uname -a** Darwin lizard-wifi 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386 dpc@lizard-wifi:~$ **which python** /usr/bin/python  dpc@lizard-wifi:~$ python Python 2.5.1 (r251:54863 Jan 13 2009 10:26:13)  [GCC 4.0.1 (Apple Inc. build 5465)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import hashlib hmac &gt;&gt;&gt; print hmac.new("\x0b"*20 "Hi There" hashlib.sha512).hexdigest() 9656975ee5de55e75f2976ecce9a04501060b9dc22a6eda2eaef638966280182477fe09f080b2bf564649cad42af8607a2bd8d02979df3a980f15e2326a0a22a &gt;&gt;&gt;   python2.5 $ /opt/local/bin/python2.5 Python 2.5.4 (r254:67916 Feb  3 2009 21:40:31)  [GCC 4.0.1 (Apple Inc. build 5488)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import hashlib hmac &gt;&gt;&gt; print hmac.new("\x0b"*20 "Hi There" hashlib.sha512).hexdigest() 87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cdedaa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854 &gt;&gt;&gt;   
== is *x **x __set__ 
def XinY_Stack(x y):     stack = [(x 0 [0]*y)]     while stack:         x index slots = stack.pop()         if (y - index) == 1:             slots[index] = x             print slots             slots[index] = 0         else:             for i in range(x + 1):                 slots[index] = x-i                 stack.append((i index + 1 slots[:]))  &gt;&gt;&gt; XinY_Stack(2 3) [0 0 2] [0 1 1] [0 2 0] [1 0 1] [1 1 0] [2 0 0]  itertools.product def XinY_Product(nmarbles nslots):     return (slots             for slots in product(xrange(nmarbles + 1) repeat=nslots)             if sum(slots) == nmarbles)   def XinY_Iter(nmarbles nslots):     assert 0 &lt; nslots &lt; 22 # 22 -&gt; too many statically nested blocks     if nslots == 1: return iter([nmarbles])     # generate code for iter solution     TAB = "  "     loopvars   = []     stmt       = ["def f(n):\n"]     for i in range(nslots - 1):         var = "m%d" % i         stmt += [TAB * (i + 1) "for %s in xrange(n - (%s)):\n"                  % (var '+'.join(loopvars) or 0)]         loopvars.append(var)      stmt += [TAB * (i + 2) "yield " ''.join(loopvars)              ' n - 1 - (' '+'.join(loopvars) ')\n']     print ''.join(stmt)     # exec the code within empty namespace     ns = {}     exec(''.join(stmt) ns ns)     return ns['f'](nmarbles + 1)   &gt;&gt;&gt; list(XinY_Product(2 3)) [(0 0 2) (0 1 1) (0 2 0) (1 0 1) (1 1 0) (2 0 0)] &gt;&gt;&gt; list(XinY_Iter(2 3)) def f(n):   for m0 in xrange(n - (0)):     for m1 in xrange(n - (m0)):       yield m0m1 n - 1 - (m0+m1)  [(0 0 2) (0 1 1) (0 2 0) (1 0 1) (1 1 0) (2 0 0)]  
$ set FOO='bar' $ echo $FOO bar $ python -c 'import os; print os.getenv("FOO")' None  $ setenv BAR 'wiz' $ echo $BAR wiz $ python -c 'import os; print os.getenv("BAR")' wiz  
tee tee # Note this version was written circa Python 2.6 see below for # an updated 3.3+-compatible version. import subprocess os sys  # Unbuffer output (this ensures the output is in the correct order) sys.stdout = os.fdopen(sys.stdout.fileno() 'w' 0)  tee = subprocess.Popen(["tee" "log.txt"] stdin=subprocess.PIPE) os.dup2(tee.stdin.fileno() sys.stdout.fileno()) os.dup2(tee.stdin.fileno() sys.stderr.fileno())  print "\nstdout" print &gt;&gt;sys.stderr "stderr" os.spawnve("P_WAIT" "/bin/ls" ["/bin/ls"] {}) os.execve("/bin/ls" ["/bin/ls"] os.environ)  tee import subprocess os sys  tee = subprocess.Popen(["tee" "log.txt"] stdin=subprocess.PIPE) # Cause tee's stdin to get a copy of our stdin/stdout (as well as that # of any child processes we spawn) os.dup2(tee.stdin.fileno() sys.stdout.fileno()) os.dup2(tee.stdin.fileno() sys.stderr.fileno())  # The flush flag is needed to guarantee these lines are written before # the two spawned /bin/ls processes emit any output print("\nstdout" flush=True) print("stderr" file=sys.stderr flush=True)  # These child processes' stdin/stdout are  os.spawnve("P_WAIT" "/bin/ls" ["/bin/ls"] {}) os.execve("/bin/ls" ["/bin/ls"] os.environ)  
encoder = Popen(["uuencode" "dummy"] stdin=PIPE stdout=PIPE) compressor = Popen("gzip" stdin=PIPE stdout=encoder.stdin)  compressor.communicate("UUencode me please") encoded_text = encoder.communicate()[0] print encoded_text  begin 644 dummy F'XL(`%]^L$D``PL-3&lt;U+SD])5&lt;A-52C(24TL3@4`;2O+"!(````` ` end  
alias myip="python -c 'from urllib import urlopen; print urlopen(\"http://whatismyip.appjet.net\").read()[:-1]'"  
request.POST.getlist('services')  
b rrule(MONTHLY dtstart = b).between(b e inc=True)  between 
otf2bdf -p 8 -r 72 -o fonts/slkscr.bdf fonts/slkscr.ttf  
mysql_cmd_line = "/Applications/MAMP/Library/bin/mysql --defaults-file=credentials.cnf"  [client] host     = localhost user     = root password = password socket   = /var/run/mysqld/mysqld.sock  
from datetime import datetime day_of_year = datetime.now().timetuple().tm_yday  
linecache traceback 
from inspect import getmro [st for cls st in MY_TYPES.items() if cls in getmro(ClassB)]  ['This is ClassA or a subclass']  (st for cls st in MY_TYPES.iteritems() if cls in getmro(ClassB))  
def find_class(self module name):     # Subclasses may override this     __import__(module)     mod = sys.modules[module]     klass = getattr(mod name)     return klass  klass = getattr(mod name) 
__unicode__ repr self.id # models.py class Profile(models.Model):     name = models.CharField('profile name' max_length=10)      def __unicode__(self):         return u'%d' % self.id  class Plan(models.Model):     name = models.CharField('plan name' max_length=10)     profile = models.ForeignKey(Profile related_name='profiles')      def __unicode__(self):         return self.name   # forms.py class PlanForm(forms.ModelForm):     profile = forms.ModelChoiceField(queryset=Profile.objects.all()             widget=forms.HiddenInput())      class Meta:         model = Plan  # views.py def add_plan(request):      if request.method == 'POST':         return HttpResponse(request.POST['profile'])       profile = Profile.objects.all()[0]     form = PlanForm(initial={'profile':profile})     return render_to_response('add_plan.html'             {                 'form':form             }             context_instance=RequestContext(request))  &lt;input type="hidden" name="profile" value="1" id="id_profile" /&gt;  
def reprunicode(u):     return repr(u).decode('raw_unicode_escape')  print u'[%s]' % u' '.join([u'(%s)' % reprunicode(ti[0]) for ti in t])  
test[3:] = [3 4 5 6 7 8 9] test[:3] = [0 1 2]  
test.cgi test.cgi python PATH PATH connect() SELECT python which python import cgitb cgitb.enable()  &gt;&gt;&gt; import MySQLdb  
foo.__class__ foo def conv(foo bar) :     return foo.__class__(bar)  foo 
EVT_KEY_DOWN EVT_TEXT Caret SetInsertionPoint # Somewhere in __init__:     self.rich.Bind(wx.EVT_TEXT self.onClick)  def onClick(self event):     self.rich.SetInsertionPoint(0) # No refresh necessary.     event.Skip()  EVT_KEY_DOWN EVT_TEXT EVT_KEY_DOWN EVT_TEXT EVT_KEY_DOWN # Somewhere in __init__:     self.rich.Bind(wx.EVT_KEY_DOWN self.onKeyDown)  def onKeyDown(self event):     self.rich.SetInsertionPointEnd()     event.Skip()  event.Skip() event 
from django.db.models import F ... MyModel.objects.filter(id=...).update(hit_count=F('hit_count')+1)  
mkdir /home/masi/.local  cd Python-2.6.1 make clean ./configure --prefix=/home/masi/.local make make install  /home/masi/.local/bin/python  #!/home/masi/.local/bin/python  ./configure --prefix=/home/masi/.local --with-python=/home/masi/.local  /home/masi/.local/bin/python setup.py install  
from functools import partial wraps from django.forms.formsets import formset_factory  ServiceFormSet = formset_factory(wraps(ServiceForm)(partial(ServiceForm affiliate=request.affiliate)) extra=3)  
__slots__ 
url(r'^login/$' 'django.contrib.auth.views.login' {'template_name': 'quiz/quiz_login.html'})  url(r'^login$' 'django.contrib.auth.views.login' {'template_name': 'quiz/quiz_login.html'})  
form = MyModelForm (initial={'gender':'M'})  class MyModelForm (forms.ModelForm):     gender = forms.ChoiceField (choices=... initial='M' ...)     class Meta:         model=MyModel  form = MyModelForm (instance=someinst)  
/home/masi/.local/bin/python setup.py install  
callable() callable(obj)  __call__ hasattr(obj '__call__')  types.FunctionTypes &gt;&gt;&gt; isinstance(open types.FunctionType) False  &gt;&gt;&gt; callable(open) True  types.FunctionType 
self.Bind(wx.aui.EVT_AUINOTEBOOK_PAGE_CLOSED self.close self.nb)  self.Bind(wx.aui.EVT_AUINOTEBOOK_TAB_RIGHT_DOWN self.right self.nb)  EVT_AUINOTEBOOK_PAGE_CLOSE EVT_AUINOTEBOOK_PAGE_CLOSED EVT_AUINOTEBOOK_PAGE_CHANGED EVT_AUINOTEBOOK_PAGE_CHANGING EVT_AUINOTEBOOK_BUTTON EVT_AUINOTEBOOK_BEGIN_DRAG EVT_AUINOTEBOOK_END_DRAG EVT_AUINOTEBOOK_DRAG_MOTION EVT_AUINOTEBOOK_ALLOW_DND EVT_AUINOTEBOOK_DRAG_DONE EVT_AUINOTEBOOK_BG_DCLICK EVT_AUINOTEBOOK_TAB_MIDDLE_DOWN EVT_AUINOTEBOOK_TAB_MIDDLE_UP EVT_AUINOTEBOOK_TAB_RIGHT_DOWN EVT_AUINOTEBOOK_TAB_RIGHT_UP  
ret_val = func(args)  ret_val = func(*args)  &gt;&gt;&gt; class Test2: ...     @trace ...     def test3(self a b): ...        pass ...  &gt;&gt;&gt; t = Test2() &gt;&gt;&gt; t.test3(12) entering test3 with args (&lt;__main__.Test2 instance at 0x7ff2b42c&gt; 1 2) return value None exiting test3 &gt;&gt;&gt;   ** 
None or my_model.width = form.cleaned_data['width'] or None  
.svn .svn/text-base .svn-base 
Objects/frameobject.c static PyMemberDef frame_memberlist[] = {     {"f_back"      T_OBJECT       OFF(f_back)    RO}     {"f_code"      T_OBJECT       OFF(f_code)    RO}     {"f_builtins"  T_OBJECT       OFF(f_builtins)RO}     {"f_globals"   T_OBJECT       OFF(f_globals) RO}     {"f_lasti"     T_INT          OFF(f_lasti)   RO}     {"f_exc_type"  T_OBJECT       OFF(f_exc_type)}     {"f_exc_value" T_OBJECT       OFF(f_exc_value)}     {"f_exc_traceback" T_OBJECT   OFF(f_exc_traceback)}     {NULL}    /* Sentinel */ }; ... static PyGetSetDef frame_getsetlist[] = {     {"f_locals"    (getter)frame_getlocals NULL NULL}     {"f_lineno"    (getter)frame_getlineno                     (setter)frame_setlineno NULL}     {"f_trace"     (getter)frame_gettrace (setter)frame_settrace NULL}     {"f_restricted"(getter)frame_getrestrictedNULL NULL}     {0} };  PyMemberDef RO READONLY PyGetSetDef f_exc_type f_exc_value f_exc_traceback f_trace &gt;&gt;&gt; f = sys._getframe() &gt;&gt;&gt; f.f_locals['foo'] = 3 &gt;&gt;&gt; foo 3 &gt;&gt;&gt;  f_fastlocals f_locals &gt;&gt;&gt; def foo(): ...   x = 3 ...   f = sys._getframe() ...   print f.f_locals['x'] ...   x = 4 ...   print f.f_locals['x'] ...   d = f.f_locals ...   x = 5 ...   print d['x'] ...   f.f_locals ...   print d['x'] ... &gt;&gt;&gt; foo() 3 4 4 5 &gt;&gt;&gt;  f_local f_globals f_globals 
del &gt;&gt;&gt; a = [0 1 2 3 4 5 6 7 8 9] &gt;&gt;&gt; del a[-1] &gt;&gt;&gt; a [0 1 2 3 4 5 6 7 8]  &gt;&gt;&gt; del a[2:4] &gt;&gt;&gt; a [0 1 4 5 6 7 8 9]  
from functools import wraps  def intercept(target**trigger):     def decorator(func):         names = getattr(func'_names'None)         if names is None:             code = func.func_code             names = code.co_varnames[:code.co_argcount]         @wraps(func)         def decorated(*args**kwargs):             all_args = kwargs.copy()             for nv in zip(namesargs):                 all_args[n] = v             for kv in trigger.iteritems():                 if k in all_args and all_args[k] != v:                     break             else:                 return target(all_args)             return func(*args**kwargs)         decorated._names = names         return decorated     return decorator  def interceptor1(kwargs):     print 'Intercepted by #1!'  def interceptor2(kwargs):     print 'Intercepted by #2!'  def interceptor3(kwargs):     print 'Intercepted by #3!'  @intercept(interceptor1arg1=20arg2=5) # if arg1 == 20 and arg2 == 5 @intercept(interceptor2arg1=20)        # elif arg1 == 20 @intercept(interceptor3arg2=5)         # elif arg2 == 5 def foo(arg1arg2):     return arg1+arg2  &gt;&gt;&gt; foo(34) 7 &gt;&gt;&gt; foo(204) Intercepted by #2! &gt;&gt;&gt; foo(35) Intercepted by #3! &gt;&gt;&gt; foo(205) Intercepted by #1! &gt;&gt;&gt;  functools.wraps __doc__ __name__ 
   registration = Registration (**cleaned_data)  registration = Registration ({'key':'value' ...})  registration = Registration (key='value' ...)  registration = Registration (**{'key':'value' ...})  registration = Registration (     x=cleaned_data['x']     y=cleaned_data['y']     z=cleaned_data['z']     ... )  
a = [f(x) for x in bar]  def foo(x):     return lambda f: f*x  &gt;&gt;&gt; def foo (x): ...     return lambda f: f*x ...  &gt;&gt;&gt; a=[123] &gt;&gt;&gt; fn_foo = foo(5) &gt;&gt;&gt; [fn_foo (y) for y in a] [5 10 15]  &gt;&gt;&gt; y=5 &gt;&gt;&gt; a=[123] &gt;&gt;&gt; [x*y for x in a] [5 10 15]  
def factorial( *args ):     def fact( n ):         if n == 0: return 1         return n*fact(n-1)     return [ fact(a) for a in args ]  &gt;&gt;&gt; factorial(5) [120] &gt;&gt;&gt; factorial( 5 6 7 ) [120 720 5040] &gt;&gt;&gt; factorial( *[5 6 7] ) [120 720 5040]  
The Children of H&amp;Atilde;&amp;ordm;rin unicode(title_field.find('fact').string).encode("latin1").decode("utf-8")  
{id:'name'label:'Name'type:'string'}  {'id':'name''label':'Name''type':'string'}  easy_install demjson  
# Sierra Wireless AirCard 880 U BUS=="usb" KERNEL=="ttyUSB2*" ACTION=="add" \    PRODUCT=="1199/6855/0" DEVNAME=="/dev/tts/USB2" \    OWNER="root" GROUP="dialout" \    SYMLINK+="bpw" RUN="/usr/sbin/bpw"  
from django.db.models import Count Members.objects.values('designation').annotate(dcount=Count('designation'))  SELECT designation COUNT(designation) AS dcount FROM members GROUP BY designation  [{'designation': 'Salesman' 'dcount': 2}   {'designation': 'Manager' 'dcount': 2}]  
GOOGLE_ANALYTICS_KEY GOOGLE_ANALYTICS_KEY {% if settings.GOOGLE_ANALYTICS_KEY %} &lt;script&gt; blah blah {{settings.GOOGLE_ANALYTICS_KEY}} blah blah &lt;/script&gt; {% endif %}  
mod_wsgi mod_python mod_proxy 
import urllib html = urllib.urlopen('http://www.coopamerica.org/programs/responsibleshopper/company.cfm?id=271').read() h = html.decode('iso-8859-1') soup = BeautifulSoup(h)  curl -i http://www.coopamerica.org/programs/responsibleshopper/company.cfm?id=271 HTTP/1.1 200 OK Connection: close Date: Tue 10 Mar 2009 13:14:29 GMT Server: Microsoft-IIS/6.0 X-Powered-By: ASP.NET Set-Cookie: COMPANYID=271;path=/ Content-Language: en-US Content-Type: text/html; charset=UTF-8  import urllib html = urllib.urlopen('http://www.coopamerica.org/programs/responsibleshopper/company.cfm?id=271').read() h = html.decode('utf-8') soup = BeautifulSoup(h) ps = soup.body("p") p = ps[52] print p  
join(None) join(2**31) isAlive servth.join(100) servth.join() select(0 NULL NULL NULL {0 1000})  = 0 (Timeout) select(0 NULL NULL NULL {0 2000})  = 0 (Timeout) select(0 NULL NULL NULL {0 4000})  = 0 (Timeout) select(0 NULL NULL NULL {0 8000})  = 0 (Timeout) select(0 NULL NULL NULL {0 16000}) = 0 (Timeout) select(0 NULL NULL NULL {0 32000}) = 0 (Timeout) select(0 NULL NULL NULL {0 50000}) = 0 (Timeout) select(0 NULL NULL NULL {0 50000}) = 0 (Timeout) select(0 NULL NULL NULL {0 50000}) = 0 (Timeout) --- Skipped 15 equal lines --- select(0 NULL NULL NULL {0 50000}Killing  
easy_install ipython ? dir In [2]: dir {} ------&gt; dir({})  Out[2]:  ['__class__'  ...  'keys'  'pop'  'popitem'  'setdefault'  'update'  'values']  In [3]: {}.update? Type:       dict Base Class: &lt;type 'dict'&gt; String Form:    {} Namespace:  Interactive Length:     0 Docstring:     dict() -&gt; new empty dictionary.     dict(mapping) -&gt; new dictionary initialized from a mapping object's         (key value) pairs.     dict(seq) -&gt; new dictionary initialized as if via:         d = {}         for k v in seq:             d[k] = v     dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs         in the keyword argument list.  For example:  dict(one=1 two=2)  set common_keys = [k for k in dict1 if k in dict2]  k setdefault new = {} for (k v) in dict1.items():     new.setdefault(k []).append(v) for (k v) in dict2.items():     new.setdefault(k []).append(v)  
3.907985046680551e-14 
__init__.py &gt; ./packageTest &gt;   ./packageTest/__init__.py &gt;   ./packageTest/setup.py  __init__.py # package directory __init__.py __version__ = 1.0  # setup.py from packageTest import __version__ ...  from packageTest import setup print 'Setup.py version:' setup.__version__   # prints Setup.py version: 1.0  
open("icon.png" "rb")  
.pth .pth .pth 
&lt;% for match in matches:   #begin %&gt;&lt;tr&gt; &lt;% for i in range(1 len(match.groups())+1):   #begin %&gt;   &lt;td style="border-style:solid;border-width:1px;border-spacing:0px;text-align:center;"&gt;&lt;%= match.group(i) %&gt;&lt;/td&gt; &lt;%   #end # end %&gt;  matches range(...) &lt;% for match in matches:     # begin %&gt;&lt;tr&gt;&lt;%     for group in match.groups():         # begin %&gt;&lt;td style="border-style:solid;border-width:1px;border-spacing:0px;text-align:center;"&gt;&lt;%= group %&gt;&lt;/td&gt;&lt;%     # end %&gt;&lt;/tr&gt;&lt;% # end %&gt;  &lt;px:for item="match" in="matches"&gt;&lt;tr&gt;     &lt;px:for item="group" in="match.groups()"&gt;         &lt;td style="border-style:solid;border-width:1px;border-spacing:0px;text-align:center;"&gt;             &lt;?_ group ?&gt;         &lt;/td&gt;     &lt;/px:for&gt; &lt;/tr&gt;&lt;/px:for&gt;  
getattr(f field) field = "foo" f.foo eval() eval() 
outfile = open("out.txt" "w") 
nzb_data = File.get_nzb_data(nzb_absolute)  get_nzb_data @classmethod temp_f= File(...) temp_f.get_dnb_data 
import urllib2 base64  request = urllib2.Request("http://api.foursquare.com/v1/user") base64string = base64.encodestring('%s:%s' % (username password)).replace('\n' '') request.add_header("Authorization" "Basic %s" % base64string)    result = urllib2.urlopen(request)  
dict.setdefault KeyError __missing__ dict class Vividict(dict):     def __missing__(self key):         value = self[key] = type(self)() # retain local pointer to value         return value                     # faster to return than dict lookup  self[key] data = {('new jersey' 'mercer county' 'plumbers'): 3         ('new jersey' 'mercer county' 'programmers'): 81         ('new jersey' 'middlesex county' 'programmers'): 81         ('new jersey' 'middlesex county' 'salesmen'): 62         ('new york' 'queens county' 'plumbers'): 9         ('new york' 'queens county' 'salesmen'): 36}  vividict = Vividict() for (state county occupation) number in data.items():     vividict[state][county][occupation] = number  &gt;&gt;&gt; import pprint &gt;&gt;&gt; pprint.pprint(vividict width=40) {'new jersey': {'mercer county': {'plumbers': 3                                   'programmers': 81}                 'middlesex county': {'programmers': 81                                      'salesmen': 62}}  'new york': {'queens county': {'plumbers': 9                                 'salesmen': 36}}}  &gt;&gt;&gt; vividict['new york']['queens counyt'] {}  &gt;&gt;&gt; pprint.pprint(vividict width=40) {'new jersey': {'mercer county': {'plumbers': 3                                   'programmers': 81}                 'middlesex county': {'programmers': 81                                      'salesmen': 62}}  'new york': {'queens county': {'plumbers': 9                                 'salesmen': 36}               'queens counyt': {}}}  Vividict class AutoVivification(dict):     &quot;&quot;&quot;Implementation of perl's autovivification feature.&quot;&quot;&quot;     def __getitem__(self item):         try:             return dict.__getitem__(self item)         except KeyError:             value = self[item] = type(self)()             return value  import pprint  class Vividict(dict):     def __missing__(self key):         value = self[key] = type(self)()         return value  d = Vividict()  d['foo']['bar'] d['foo']['baz'] d['fizz']['buzz'] d['primary']['secondary']['tertiary']['quaternary'] pprint.pprint(d)  {'fizz': {'buzz': {}}  'foo': {'bar': {} 'baz': {}}  'primary': {'secondary': {'tertiary': {'quaternary': {}}}}}  __missing__ dict.setdefault Vividict d = {} # or dict() for (state county occupation) number in data.items():     d.setdefault(state {}).setdefault(county {})[occupation] = number  &gt;&gt;&gt; pprint.pprint(d width=40) {'new jersey': {'mercer county': {'plumbers': 3                                   'programmers': 81}                 'middlesex county': {'programmers': 81                                      'salesmen': 62}}  'new york': {'queens county': {'plumbers': 9                                 'salesmen': 36}}}  &gt;&gt;&gt; d['new york']['queens counyt'] Traceback (most recent call last):   File &quot;&lt;stdin&gt;&quot; line 1 in &lt;module&gt; KeyError: 'queens counyt'  d = dict()  d.setdefault('foo' {}).setdefault('bar' {}) d.setdefault('foo' {}).setdefault('baz' {}) d.setdefault('fizz' {}).setdefault('buzz' {}) d.setdefault('primary' {}).setdefault('secondary' {}).setdefault('tertiary' {}).setdefault('quaternary' {})  &gt;&gt;&gt; id({}) id({}) id({}) (523575344 523575344 523575344)  __missing__ from collections import defaultdict  def vivdict():     return defaultdict(vivdict)  &gt;&gt;&gt; d = vivdict(); d['foo']['bar']; d['foo']['baz']; d['fizz']['buzz']; d['primary']['secondary']['tertiary']['quaternary']; import pprint;  &gt;&gt;&gt; pprint.pprint(d) defaultdict(&lt;function vivdict at 0x17B01870&gt; {'foo': defaultdict(&lt;function vivdict  at 0x17B01870&gt; {'baz': defaultdict(&lt;function vivdict at 0x17B01870&gt; {}) 'bar':  defaultdict(&lt;function vivdict at 0x17B01870&gt; {})}) 'primary': defaultdict(&lt;function  vivdict at 0x17B01870&gt; {'secondary': defaultdict(&lt;function vivdict at 0x17B01870&gt;  {'tertiary': defaultdict(&lt;function vivdict at 0x17B01870&gt; {'quaternary': defaultdict( &lt;function vivdict at 0x17B01870&gt; {})})})}) 'fizz': defaultdict(&lt;function vivdict at  0x17B01870&gt; {'buzz': defaultdict(&lt;function vivdict at 0x17B01870&gt; {})})})  &gt;&gt;&gt; import timeit &gt;&gt;&gt; min(timeit.repeat(lambda: {}.setdefault('foo' {}))) - min(timeit.repeat(lambda: {})) 0.13612580299377441 &gt;&gt;&gt; min(timeit.repeat(lambda: vivdict()['foo'])) - min(timeit.repeat(lambda: vivdict())) 0.2936999797821045 &gt;&gt;&gt; min(timeit.repeat(lambda: Vividict()['foo'])) - min(timeit.repeat(lambda: Vividict())) 0.5354437828063965 &gt;&gt;&gt; min(timeit.repeat(lambda: AutoVivification()['foo'])) - min(timeit.repeat(lambda: AutoVivification())) 2.138362169265747  dict.setdefault __getitem__ __missing__ __missing__ dict __getitem__ setdefault 
my_form = MyFormClass(request.POST request.FILES)  if my_form.is_valid():     data = request.FILES['myfile'].read()  clean cleaned_data.get('xml_file') __str__ xml_file = myform.cleaned_data.get('xml_file') print xml_file.read()  
FieldsetMixin from django.forms import Form from formfieldset.forms import FieldsetMixin   class MyForm(Form FieldsetMixin):     fieldsets = (         (u'' {'fields': ['name' 'company']})         (u'Interested in' {'fields': ['foo' 'bar' 'baz']})     )      # rest of the form  
from subprocess import Popen p = Popen(['watch' 'ls']) # something long running # ... do other stuff while subprocess is running p.terminate()  poll() communicate() 
awk '{ gsub(/\. +/ ".\n"); print }'  $ echo "abc. 123. xyz." | awk '{ gsub(/\. +/ ".\n"); print }' abc. 123. xyz.  
def __init__(self *args **kwargs):     super(RegistrationFormTOS self).__init__(*args **kwargs)     self.fields['email'].label = "New Email Label"  
' '.join(set(foo.split()))  ' '.join(set(foo.split(' ')))  
#!/usr/bin/env python import codecs sys  class NullWriter:     def write(self *args **kwargs):         pass  if len(sys.argv) == 2:    if sys.argv[1] == '1':       sys.stderr = NullWriter()    elif sys.argv[1] == '2':       #NOTE: sys.stderr.encoding is *read-only*        #      therefore the whole stderr should be replaced       # encode all output using 'utf8'       sys.stderr = codecs.getwriter('utf8')(sys.stderr)  print &gt;&gt;sys.stderr u"\u20AC" # euro sign print "ok"  $ python silence_stderr.py Traceback (most recent call last):   File "silence_stderr.py" line 11 in &lt;module&gt;     print &gt;&gt;sys.stderr u"\u20AC" UnicodeEncodeError: 'ascii' codec can't encode character u'\u20ac' in position 0: ordinal not in range(128)  $ python silence_stderr.py 1 ok  $ python silence_stderr.py 2 € ok  $ python ... 2&gt;out.txt $ cat out.txt  chcp 65001 Lucida Console C:\&gt; python silence_stderr.py 2 Traceback (most recent call last):   File "silence_stderr.py" line 14 in &lt;module&gt;     print &gt;&gt;sys.stderr u"\u20AC" # euro sign   File "C:\pythonxy\python\lib\codecs.py" line 304 in write     self.stream.write(data) IOError: [Errno 13] Permission denied  C:\&gt; perl  -E"say qq(\x{20ac})" Wide character in print at -e line 1. €  C:\&gt;python silence_stderr.py 2 2&gt;tmp.log ok C:\&gt;cat tmp.log € cat: write error: Permission denied  codecs.getwriter LookupError class UTF8StreamWriter:     def __init__(self writer):         self.writer = writer     def write(self s):         self.writer.write(s.encode('utf-8'))  sys.stderr = UTF8StreamWriter(sys.stderr)  
os.environ['DJANGO_SETTINGS_MODULE'] = ‘myproject.settings’                                        ^                  ^  
sum([pair[0] for pair in list_of_pairs])  
    rs = client.CreateObject("ADODB.Recordset")      rs = client.CreateObject("ADODB.Recordset" dynamic=True)  
dict((x set(y) &amp; set(d1.get(x ()))) for (x y) in d2.iteritems())  &gt;&gt;&gt; d3 = {k: list(set(d1.get(k[])).intersection(v)) for k v in d2.items()} {0: ['11' '25' '38'] 1: ['38'] 2: ['11' '18'] 3: ['11' '25']}  &gt;&gt;&gt; d3 = {k: v for k v in d3.items() if v}  d3 = {} for k v in d2.items():     # find common elements for d1 &amp; d2     v3 = set(d1.get(k[])).intersection(v)     if v3: # whether there are common elements        d3[k] = list(v3)   
&gt;&gt;&gt; import stackless &gt;&gt;&gt; ch1 = stackless.channel() &gt;&gt;&gt; def a(): ...  ch2 = stackless.channel() ...  ch1.send(ch2) ...  ch2.send("Hello") ... &gt;&gt;&gt; def b(): ...  ch3 = ch1.receive() ...  print ch3.receive() ... &gt;&gt;&gt; stackless.tasklet(a)() &lt;stackless.tasklet object at 0x01C6FCB0&gt; &gt;&gt;&gt; stackless.tasklet(b)() &lt;stackless.tasklet object at 0x01C6FAB0&gt; &gt;&gt;&gt; stackless.run() Hello  
#In your model head = models.BooleanField(default=True)  #As a signal plugin: def check_head(sender **kwargs):     message = kwargs['instance']     if hasattr(message'no_check_head') and message.no_check_head:         return     previous_message = Message.objects.filter(time__lt=message.time).order_by('-time')[0]     if message.source == previous_message.source:         message.head = False     next_message = Message.objects.filter(time__gt=message.time).order_by('time')[0]     if message.source == next_message.source:         next_message.head = False         next_message.no_check_head         next_message.save()  messages = Message.objects.filter(head=True).order_by('time')[0:15]  Lock import thread lock = thread.allocate_lock() def check_head(sender **kwargs):     # This check must come outside the safe zone     # Otherwise your code will screech to a hault     message = kwargs['instance']     if hasattr(message'no_check_head') and message.no_check_head:         return     # define safe zone     lock.acquire()     # see code above     ....     lock.release()  
import string re timeit  # Precomputed values (for str_join_set and translate)  letter_set = frozenset(string.ascii_lowercase + string.ascii_uppercase) tab = string.maketrans(string.ascii_lowercase + string.ascii_uppercase                        string.ascii_lowercase * 2) deletions = ''.join(ch for ch in map(chrrange(256)) if ch not in letter_set)  s="A235th@#$&amp;( er Ra{}|?&gt;ndom"  # From unwind's filter approach def test_filter(s):     return filter(lambda x: x in string.ascii_lowercase s.lower())  # using set instead (and contains) def test_filter_set(s):     return filter(letter_set.__contains__ s).lower()  # Tomalak's solution def test_regex(s):     return re.sub('[^a-z]' '' s.lower())  # Dana's def test_str_join(s):     return ''.join(c for c in s.lower() if c in string.ascii_lowercase)  # Modified to use a set. def test_str_join_set(s):     return ''.join(c for c in s.lower() if c in letter_set)  # Translate approach. def test_translate(s):     return string.translate(s tab deletions)   for test in sorted(globals()):     if test.startswith("test_"):         assert globals()[test](s)=='atherrandom'         print "%30s : %s" % (test timeit.Timer("f(s)"                "from __main__ import %s as f s" % test).timeit(200000))                 test_filter : 2.57138351271            test_filter_set : 0.981806765698                 test_regex : 3.10069885233              test_str_join : 2.87172979743          test_str_join_set : 2.43197956381             test_translate : 0.335367566218  set.__contains__ 
printf '%s\n' *|awk -F7 NF==4  
inspect.getmro 
runtests.py import os os.environ['PYTHONPATH'] = '/path/to/site-packages'  import nose nose.run()  runtests.py maya.standalone import maya.standalone maya.standalone.initialize(name='python')  
from django.views.generic.create_update import get_model_and_form_class def form_user_default(request):     if request.method == 'GET':         model custom_form = get_model_and_form_class(PostNone)         custom_form.author = request.user         return {'form':custom_form}     else: return {}  url(r'pattern_to_match' 'django.views.generic.create_update.create_object' kwargs={'context_processors':form_user_default})  
namelist() import os zipfile  z = zipfile.ZipFile('myfile.zip') for f in z.namelist():     if f.endswith('/'):         os.makedirs(f)  
s/\([^)]*\)//  re.sub(r'\([^)]*\)' '' filename)  
import os os.environ['PYTHONINSPECT'] = '1'  import os from ctypes import POINTER c_int cast pythonapi  def in_interactive_inspect_mode():     """Whether '-i' option is present or PYTHONINSPECT is not empty."""     if os.environ.get('PYTHONINSPECT'): return True     iflag_ptr = cast(pythonapi.Py_InteractiveFlag POINTER(c_int))     #NOTE: in Python 2.6+ ctypes.pythonapi.Py_InspectFlag &gt; 0     #      when PYTHONINSPECT set or '-i' is present      return iflag_ptr.contents.value != 0  
inspect findsource &gt;&gt;&gt; import inspect &gt;&gt;&gt; import StringIO &gt;&gt;&gt; inspect.findsource(StringIO.StringIO)[1] 41 &gt;&gt;&gt;  findsource co_firstlineno 
def get_jobrecord_cost(self):     return sum((activity.get_cost() or 0 for activity in activity_set.all()) or 0)  
select 
dispatch = {   'check': do_check   'search': do_search } cmd _ arg = input.partition(' ') if cmd in dispatch:     dispatch[cmd](arg) else:     do_default(cmd arg)  
{   scopeName = 'source.whitespace';     patterns = (         {  name = 'source.invalid.trailing-whitespace';             match = '(\s+)$';             captures = { 1 = { name = 'invalid.trailing-whitespace'; }; };          }     ); }  {  name = 'comment.line.number-sign.python';    match = '(#).*$\n?';    captures = { 1 = { name = 'punctuation.definition.comment.python'; }; }; }  {  name = 'comment.line.number-sign.python';    match = '(#).*?(\s*)$\n?';    captures = {       1 = { name = 'punctuation.definition.comment.python'; };       2 = { name = 'invalid.trailing-whitespace';  };     }; }  : patterns = (  {    name = 'comment.line.number-sign.python'; :  : patterns = (  {  include = 'source.whitespace'; }  {    name = 'comment.line.number-sign.python'; :  
int() print (int("1") + 1)  2 T2 = [map(int x) for x in T1]  T2 = [list(map(int x)) for x in T1]  
#!/usr/bin/env python from optparse import OptionParser Option IndentedHelpFormatter  class PosOptionParser(OptionParser):     def format_help(self formatter=None):         class Positional(object):             def __init__(self args):                 self.option_groups = []                 self.option_list = args          positional = Positional(self.positional)         formatter = IndentedHelpFormatter()         formatter.store_option_strings(positional)         output = ['\n' formatter.format_heading("Positional Arguments")]         formatter.indent()         pos_help = [formatter.format_option(opt) for opt in self.positional]         pos_help = [line.replace('--''') for line in pos_help]         output += pos_help         return OptionParser.format_help(self formatter) + ''.join(output)      def add_positional_argument(self option):         try:             args = self.positional         except AttributeError:             args = []         args.append(option)         self.positional = args      def set_out(self out):         self.out = out def main():     usage = "usage: %prog [options] bar baz"     parser = PosOptionParser(usage)     parser.add_option('-f' '--foo' dest='foo'                       help='Enable foo')     parser.add_positional_argument(Option('--bar' action='store_true'                                    help='The bar positional argument'))     parser.add_positional_argument(Option('--baz' action='store_true'                                    help='The baz positional argument'))     (options args) = parser.parse_args()     if len(args) != 2:         parser.error("incorrect number of arguments")     pass  if __name__ == '__main__':     main()  Usage: test.py [options] bar baz    Options:     -h --help         show this help message and exit     -f FOO --foo=FOO  Enable foo  Positional Arguments:   bar  The bar positional argument   baz  The baz positional argument  
#!/usr/bin/env python  class PrintCallInfo:     def __init__(selff):         self.f = f     def __call__(self*args**kwargs):         print "--&gt;"self.f.__name__argskwargs         r = self.f(*args**kwargs)         print "&lt;--"self.f.__name__"returned: "r         return r  # the condition to modify the function... some_condition=True  def my_decorator(f):     if (some_condition): # modify the function         return PrintCallInfo(f)     else: # leave it as it is         return f  @my_decorator def foo():     print "foo"  @my_decorator def bar(s):     print "hello"s     return s  @my_decorator def foobar(x=1y=2):     print xy     return x + y  foo() bar("world") foobar(y=5)  
c1 = [1 6 7 10 13 28 32 41 58 63] c2 = [[13 17 18 21 32] [7 11 13 14 28] [1 5 6 8 15 16]] c3 = [[13 32] [7 13 28] [16]]  c3 = [filter(lambda x: x in c1 sublist) for sublist in c2]  filter list filter list() c3 = [list(filter(lambda x: x in c1 sublist)) for sublist in c2]  
numpy.correlate(a v mode) a v t a v a v a v numpy.convolve numpy.correlate def autocorr(x):     result = numpy.correlate(x x mode='full')     return result[result.size/2:]  x 
MyClass.objects.filter( aField__contains=var1 secondField__exact=var2 )  stmt= "select... afield like '%%%s%%' and secondfield = '%s'..." % ( var1 var2 ) print stmt cursor.execute( stmt )  
get(key default) &gt;&gt;&gt; dict().get("blah" "default") 'default'  
x = 1 if foo else 2  
item = getattr(foo 'bar' None) if item is None:     .... else:     ....  
message = "%s was a match"%(matches[key]) if key in matches else "There was no match."  
name_map = {'oldcol1': 'newcol1' 'oldcol2': 'newcol2' 'oldcol3': 'newcol3'...}  for row in rows:     # Each row is a dict of the form: {'oldcol1': '...' 'oldcol2': '...'}     row = dict((name_map[name] val) for name val in row.iteritems())     ...  for row in rows:     row = {name_map[name]: val for name val in row.items()}  
dirFoo\     __init__.py     test.py     dirBar\         __init__.py         Foo.py         Bar.py  from dirBar import * import unittest  if __name__ == "__main__":      unittest.main()  $ python test.py ........... ---------------------------------------------------------------------- Ran 11 tests in 2.305s  OK  
import urllib.request contents = urllib.request.urlopen("http://example.com/foo/bar").read()  import urllib2 contents = urllib2.urlopen("http://example.com/foo/bar").read()  urllib.request read 
class IRSensor:     def read(self): return {'ir_amplitude': 12}  class UltrasonicSensor:     def read(self): return {'ultrasonic_amplitude': 63}  class SickLaserSensor:     def read(self): return {'laser_amplitude': 55}  class CompositeSensor:     """Wrap multiple component sensors coalesce the results and return     the composite readout.     """     component_sensors = []      def __init__(self component_sensors=None):         component_sensors = component_sensors or self.component_sensors         self.sensors = [cls() for cls in component_sensors]      def read(self):         measurements = {}         for sensor in self.sensors:             measurements.update(sensor.read())         return measurements  class MyCompositeSensor(CompositeSensor):     component_sensors = [UltrasonicSensor IRSensor]   composite_sensor = MyCompositeSensor() measurement_map = composite_sensor.read() assert measurement_map['ultrasonic_amplitude'] == 63 assert measurement_map['ir_amplitude'] == 12  __getattr__ class MovementActuator:     def __init__(self x=0 y=0):         self.x self.y = (x y)      def move(self x y):         print 'Moving to' x y         self.x self.y = (x y)      def get_position(self):         return (self.x self.y)  class CommunicationActuator:     def communicate(self):         return 'Hey you out there!'  class CompositeActuator:     component_actuators = []      def __init__(self component_actuators=None):         component_actuators = component_actuators \             or self.component_actuators         self.actuators = [cls() for cls in component_actuators]      def __getattr__(self attr_name):         """Look for value in component sensors."""         for actuator in self.actuators:             if hasattr(actuator attr_name):                 return getattr(actuator attr_name)         raise AttributeError(attr_name)   class MyCompositeActuator(CompositeActuator):     component_actuators = [MovementActuator CommunicationActuator]  composite_actuator = MyCompositeActuator() assert composite_actuator.get_position() == (0 0) assert composite_actuator.communicate() == 'Hey you out there!'  from sensors import * from actuators import *  class AbstractNode:     sensors = [] # Set of classes.     actuators = [] # Set of classes.     def __init__(self):         self.composite_sensor = CompositeSensor(self.sensors)         self.composite_actuator = CompositeActuator(self.actuators)  class MyNode(AbstractNode):     sensors = [UltrasonicSensor SickLaserSensor]     actuators = [MovementActuator CommunicationActuator]      def think(self):         measurement_map = self.composite_sensor.read()         while self.composite_actuator.get_position()[1] &gt;= 0:             self.composite_actuator.move(100 -100)  my_node = MyNode() my_node.think()  SensorInterface isinstance(sensor PositionSensor) def get_position(sensor):     try:         return sensor.geolocate()     except AttributeError:         return None   import inspect  import types   from sensors import Sensor   def is_class(obj):      return type(obj) in (types.ClassType types.TypeType)   def instrumented_init(self *args **kwargs):      Sensor.__init__(self *args **kwargs)   for module in plugin_modules: # Get this from somewhere...      classes = inspect.getmembers(module predicate=is_class)      for name cls in classes:          if hasattr(cls '__init__'):              # User specified own init may be deriving from something else.              continue           if cls.__bases__ != tuple([Sensor]):              continue # Class doesn't singly inherit from sensor.          cls.__init__ = instrumented_init  
# Obviously this should be more interesting.. import sys print "cd" sys.argv[1]  @echo off python xdir.py %* &gt;%TEMP%\__xdir.cmd call %TEMP%\__xdir.cmd  doskey x=xdir.cmd $*  $ x subdir  
BytesIO BytesIO import io  with io.BytesIO() as output:     image.save(output format="GIF")     contents = output.getvalue()  format format format=image.format io StringIO 
sys.gettotalrefcount # ... if hasattr(sys 'gettotalrefcount'):    plat_specifier += '-pydebug'  *_d.exe _d.pyd 
import xmlrpclib svc = xmlrpclib.ServerProxy('http://ws.audioscrobbler.com/2.0/') print svc.system.listMethods()  ServerProxy system.listMethods user.getTopTags print svc.user.getTopTags({'user': 'foo' 'api_key': 'bar'})  
&gt;&gt;&gt; a = [1 2 3 4 5 6 7 8 9 10 11 12] &gt;&gt;&gt; a [1 2 3 4 5 6 7 8 9 10 11 12] &gt;&gt;&gt; a[-9:] [4 5 6 7 8 9 10 11 12]  a[-9:] 
#!/usr/bin/env python """Find executables in %PATH% that match PATTERN.  """ #XXX: remove --use-pathext option  import fnmatch itertools os re sys warnings from optparse import OptionParser from stat import S_IMODE S_ISREG ST_MODE from subprocess import PIPE Popen   def warn_import(*args):     """pass '-Wd' option to python interpreter to see these warnings."""     warnings.warn("%r" % (args) ImportWarning stacklevel=2)   class samefile_win:     """ http://timgolden.me.uk/python/win32_how_do_i/see_if_two_files_are_the_same_file.html """     @staticmethod     def get_read_handle (filename):         return win32file.CreateFile (             filename             win32file.GENERIC_READ             win32file.FILE_SHARE_READ             None             win32file.OPEN_EXISTING             0             None             )      @staticmethod     def get_unique_id (hFile):         (attributes          created_at accessed_at written_at          volume          file_hi file_lo          n_links          index_hi index_lo          ) = win32file.GetFileInformationByHandle (hFile)         return volume index_hi index_lo      @staticmethod     def samefile_win(filename1 filename2):         """Whether filename1 and filename2 represent the same file.  It works for subst ntfs hardlinks junction points. It works unreliably for network drives.  Based on GetFileInformationByHandle() Win32 API call. http://timgolden.me.uk/python/win32_how_do_i/see_if_two_files_are_the_same_file.html """         if samefile_generic(filename1 filename2): return True         try:             hFile1 = samefile_win.get_read_handle (filename1)             hFile2 = samefile_win.get_read_handle (filename2)             are_equal = (samefile_win.get_unique_id (hFile1)                          == samefile_win.get_unique_id (hFile2))             hFile2.Close ()             hFile1.Close ()             return are_equal         except win32file.error:             return None   def canonical_path(path):     """NOTE: it might return wrong path for paths with symbolic links."""     return os.path.realpath(os.path.normcase(path))   def samefile_generic(path1 path2):     return canonical_path(path1) == canonical_path(path2)   class is_executable_destructive:     @staticmethod     def error_message(barename):         r""" "'%(barename)s' is not recognized as an internal or external\r\n command operable program or batch file.\r\n"  in Russian: """         return '"%(barename)s" \xad\xa5 \xef\xa2\xab\xef\xa5\xe2\xe1\xef \xa2\xad\xe3\xe2\xe0\xa5\xad\xad\xa5\xa9 \xa8\xab\xa8 \xa2\xad\xa5\xe8\xad\xa5\xa9\r\n\xaa\xae\xac\xa0\xad\xa4\xae\xa9 \xa8\xe1\xaf\xae\xab\xad\xef\xa5\xac\xae\xa9 \xaf\xe0\xae\xa3\xe0\xa0\xac\xac\xae\xa9 \xa8\xab\xa8 \xaf\xa0\xaa\xa5\xe2\xad\xeb\xac \xe4\xa0\xa9\xab\xae\xac.\r\n' % dict(barename=barename)      @staticmethod     def is_executable_win_destructive(path):         # assume path &lt;-&gt; barename that is false in general         barename = os.path.splitext(os.path.basename(path))[0]         p = Popen(barename stdout=PIPE stderr=PIPE shell=True)         stdout stderr = p.communicate()         return p.poll() != 1 or stdout != '' or stderr != error_message(barename)   def is_executable_win(path):     """Based on: http://timgolden.me.uk/python/win32_how_do_i/tell-if-a-file-is-executable.html  Known bugs: treat some "*~" files as executable e.g. some "*.bat~" files """     try:         _ executable = FindExecutable(path)         return bool(samefile(GetLongPathName(executable) path))     except error:         return None # not an exe or a document with assoc.   def is_executable_posix(path):     """Whether the file is executable.  Based on which.py from stdlib """     #XXX it ignores effective uid guid?     try: st = os.stat(path)     except os.error:         return None      isregfile = S_ISREG(st[ST_MODE])     isexemode = (S_IMODE(st[ST_MODE]) &amp; 0111)     return bool(isregfile and isexemode)  try:     #XXX replace with ctypes?     from win32api import FindExecutable GetLongPathName error     is_executable = is_executable_win except ImportError e:     warn_import("is_executable: fall back on posix variant" e)     is_executable = is_executable_posix  try: samefile = os.path.samefile except AttributeError e:     warn_import("samefile: fallback to samefile_win" e)     try:         import win32file         samefile = samefile_win.samefile_win     except ImportError e:         warn_import("samefile: fallback to generic" e)         samefile = samefile_generic  def main():     parser = OptionParser(usage=""" %prog [options] PATTERN %prog [options] -e PATTERN""" description=__doc__)     opt = parser.add_option     opt("-e" "--regex" metavar="PATTERN"         help="use PATTERN as a regular expression")     opt("--ignore-case" action="store_true" default=True         help="""[default] ignore case when --regex is present; for \ non-regex PATTERN both FILENAME and PATTERN are first \ case-normalized if the operating system requires it otherwise \ unchanged.""")     opt("--no-ignore-case" dest="ignore_case" action="store_false")     opt("--use-pathext" action="store_true" default=True         help="[default] whether to use %PATHEXT% environment variable")     opt("--no-use-pathext" dest="use_pathext" action="store_false")     opt("--show-non-executable" action="store_true" default=False         help="show non executable files")      (options args) = parser.parse_args()      if len(args) != 1 and not options.regex:        parser.error("incorrect number of arguments")     if not options.regex:        pattern = args[0]     del args      if options.regex:        filepred = re.compile(options.regex options.ignore_case and re.I).search     else:        fnmatch_ = fnmatch.fnmatch if options.ignore_case else fnmatch.fnmatchcase        for file_pattern_symbol in "*?":            if file_pattern_symbol in pattern:                break        else: # match in any place if no explicit file pattern symbols supplied            pattern = "*" + pattern + "*"        filepred = lambda fn: fnmatch_(fn pattern)      if not options.regex and options.ignore_case:        filter_files = lambda files: fnmatch.filter(files pattern)     else:        filter_files = lambda files: itertools.ifilter(filepred files)      if options.use_pathext:        pathexts = frozenset(map(str.upper             os.environ.get('PATHEXT' '').split(os.pathsep)))      seen = set()     for dirpath in os.environ.get('PATH' '').split(os.pathsep):         if os.path.isdir(dirpath): # assume no expansion needed            # visit "each" directory only once            # it is unaware of subst drives junction points symlinks etc            rp = canonical_path(dirpath)            if rp in seen: continue            seen.add(rp); del rp             for filename in filter_files(os.listdir(dirpath)):                path = os.path.join(dirpath filename)                isexe = is_executable(path)                 if isexe == False and is_executable == is_executable_win:                   # path is a document with associated program                   # check whether it is a script (.pl .rb .py etc)                   if not isexe and options.use_pathext:                      ext = os.path.splitext(path)[1]                      isexe = ext.upper() in pathexts                 if isexe:                   print path                elif options.show_non_executable:                   print "non-executable:" path   if __name__=="__main__":    main()  
import gtk  import webkit   view = webkit.WebView()   sw = gtk.ScrolledWindow()  sw.add(view)   win = gtk.Window(gtk.WINDOW_TOPLEVEL)  win.add(sw)  win.show_all()   view.open("http://w3.org/")  gtk.main()  
In [99]: %cpaste Pasting code; enter '--' alone on the line to stop. :&gt;&gt;&gt; class eg(object): :...     def __init__(self name): :...             self.name = name :...     def hi(self): :...             print "Hi %s" % (self.name) :... :&gt;&gt;&gt; greeter = eg("Bob") :&gt;&gt;&gt; greeter.hi() :-- Hi Bob  C-x r k documentation.txt $ python -c "import doctest; doctest.testfile('documentation.txt')" -v  Trying:     class eg(object):         def __init__(self name):                 self.name = name         def hi(self):                 print "Hi %s" % (self.name) Expecting nothing ok Trying:     greeter = eg("Bob") Expecting nothing ok Trying:     greeter.hi() Expecting:     Hi Bob ok 1 items passed all tests:    3 tests in doctest.txt 3 tests in 1 items. 3 passed and 0 failed. Test passed.  if __name__=="__main__":    import doctest; doctest.testmod()  QED 
x=arange(10) y1=sin(x) y2=10*cos(x)  rect=[0.10.10.80.8] a1=axes(rect) a1.yaxis.tick_left() plot(xy1) ylabel('axis 1') xlabel('x')  a2=axes(rectframeon=False) a2.yaxis.tick_right() plot(xy2) a2.yaxis.set_label_position('right') ylabel('axis 2') a2.set_xticks([])  
&gt;&gt;&gt; import os &gt;&gt;&gt; import sys &gt;&gt;&gt; os.path.dirname(sys.executable) 'C:\\Python25'  python -c &quot;import os sys; print(os.path.dirname(sys.executable))&quot;  
(\s) (\W) l = re.compile("(\s)").split(s)  l = re.compile("\s").split(s)  
r"\"" r"\" 
except Exception e: print repr(e) Exception dir(e) e.__class__.__name__ &gt;&gt;&gt; 
django.core.files.base ContentFile File from django.core.files.base import ContentFile def save_item(request uname data):     item = Item()     myFile = ContentFile(base64.b64decode(data))     item.preview.save('fakename.jpg' myFile save=False)  
doStuff() self.assert_(True)  
self.nb.AddPage(pnl nm select=True)  self.nb.SetSelection(self.nb.GetPageCount()-1)  def new_panel(self nm):         pnl = wx.Panel(self)         pnl.identifierTag = nm         self.nb.AddPage(pnl nm select=True)          self.sizer = wx.BoxSizer()         self.sizer.Add(self.nb 1 wx.EXPAND)         self.SetSizer(self.sizer)         #self.nb.SetSelection(self.nb.GetPageCount()-1)         pnl.SetFocus() # Have focused the last panel.         print self.nb.GetSelection()  
[f.group(0) for f in current_f]  
function s:buffers_list()     let result = []      for buffer_number in range(1 bufnr('$'))         if !buflisted(buffer_number)             continue         endif          call add(result buffer_number)     endfor      return result endfunction  
for 
&gt;&gt;&gt; import inspect &gt;&gt;&gt; inspect.getargspec(func) (['a' 'b' 'c'] None None None)  
my_var class MyClass:     my_var = []      @my_decorator(my_var 'sometext')     def my_func()         # do some super cool thing  my_var 
Iterator2 = xrange(25)  def Iterator3():     i = 1     while i &lt; 5:         i += 1         yield i  import itertools Iterator4 = itertools.takewhile(                          lambda y : y &lt; 5                          itertools.count(2) )  Iterator5 = ( x for x in [2 3 4] )  
index() def getIndexOrMinusOne(a x):   try:     return a.index(x)   except ValueError:     return -1  
for ln in f:     # work on line in ln  stdout from subprocess import Popen PIPE pp = Popen('dir' shell=True stdout=PIPE)  for ln in pp.stdout:     print '#'ln  
class AutoVivification(dict):     """Implementation of perl's autovivification feature."""     def __getitem__(self item):         try:             return dict.__getitem__(self item)         except KeyError:             value = self[item] = type(self)()             return value  a = AutoVivification()  a[1][2][3] = 4 a[1][3][3] = 5 a[1][2]['test'] = 6  print a  {1: {2: {'test': 6 3: 4} 3: {3: 5}}}  
File def create_with_pk(self):     instance = self.create()     instance.save()     # probably this line is unneeded     return instance  create_with_pk self 
&gt;&gt;&gt; a = ['1' '2' '3' '4'] &gt;&gt;&gt; a ['1' '2' '3' '4'] &gt;&gt;&gt; i = a.index('2') + 1  # after the item '2' &gt;&gt;&gt; a[i:i] = ['2.4' '2.6'] &gt;&gt;&gt; a ['1' '2' '2.4' '2.6' '3' '4'] &gt;&gt;&gt;  
&gt;&gt;&gt; class MicroMock(object): ...     def __init__(self **kwargs): ...         self.__dict__.update(kwargs) ... &gt;&gt;&gt; def print_foo(x): ...     print x.foo ... &gt;&gt;&gt; print_foo(MicroMock(foo=3)) 3  
list.sort(key=lambda item:item['date'] reverse=True)  
animals = {'dog':set(['bite'])            'cat':set(['bite' 'scratch'])}  animals.setdefault('dog' set()).add('bite')  
myfile.write(c_uncompData_p[:c_uncompSize])  
re.split('[\s|!\?\.;:"]' text)  import re def getwords(text splitchars=' \t|!?.;:"'):   words_iter = re.finditer(     "([%s]+)" % "".join([("^" + c) for c in splitchars])     text)   for word in words_iter:     yield word.group()  # a quick test s = "a:b cc? def...a||" words = [x for x in getwords(s)] assert ["a" "b" "cc" "def" "a"] == words words  
def decorator(*args **kwargs):     if len(args) == 1 and len(kwargs) == 0 and callable(args[0]):         # called as @decorator     else:         # called as @decorator(*args **kwargs)  def doublewrap(f):     '''     a decorator decorator allowing the decorator to be used as:     @decorator(with arguments and=kwargs)     or     @decorator     '''     @wraps(f)     def new_dec(*args **kwargs):         if len(args) == 1 and len(kwargs) == 0 and callable(args[0]):             # actual decorated function             return f(args[0])         else:             # decorator arguments             return lambda realf: f(realf *args **kwargs)      return new_dec  def test_doublewrap():     from util import doublewrap     from functools import wraps          @doublewrap     def mult(f factor=2):         '''multiply a function's return value'''         @wraps(f)         def wrap(*args **kwargs):             return factor*f(*args**kwargs)         return wrap      # try normal     @mult     def f(x y):         return x + y      # try args     @mult(3)     def f2(x y):         return x*y      # try kwargs     @mult(factor=5)     def f3(x y):         return x - y      assert f(23) == 10     assert f2(25) == 30     assert f3(81) == 5*7  
return 
form = JobRecordForm( {'supervisor':request.user} )  
print "frozen_f=" dict( (if(i)) for i in range(100) )  
s = mode; while (*s) {     switch (*s++) {     case 'r':         if (rwa) {         bad_mode:             PyErr_SetString(PyExc_ValueError                     "Must have exactly one of read/write/append mode");             goto error;         }         rwa = 1;         self-&gt;readable = 1;         break;     case 'w':         if (rwa)             goto bad_mode;         rwa = 1;         self-&gt;writable = 1;         flags |= O_CREAT | O_TRUNC;         break;     case 'a':         if (rwa)             goto bad_mode;         rwa = 1;         self-&gt;writable = 1;         flags |= O_CREAT;         append = 1;         break;     case 'b':         break;     case '+':         if (plus)             goto bad_mode;         self-&gt;readable = self-&gt;writable = 1;         plus = 1;         break;     default:         PyErr_Format(PyExc_ValueError                  "invalid mode: %.200s" mode);         goto error;     } }  if (!rwa)     goto bad_mode;  "rwab+" "rwa" '+' 'b' 
def __init__(self *args **kwargs):     super(MyForm self).__init__(*args **kwargs)      instance = kwargs.get('instance')     if instance:         self.fields['pay_tourns'].initial = [ o.id for o in instance.tournaments.all().active().pay_tourns()]         self.fields['rep_tourns'].initial = [ o.id for o in instance.tournaments.all().active().rep_tourns()]  
results = dict.fromkeys(inputs [])  runs = 10 inputs = (1 2 3 5 8 13 21 34 55) results = {}  for run in range(runs):     for i in inputs:         results.setdefault(i[]).append(benchmark(i))  runs = 10 inputs = (1 2 3 5 8 13 21 34 55) results = dict([(i[]) for i in inputs])  for run in range(runs):     for i in inputs:         results[i].append(benchmark(i))  
NOW() statement_timestamp() CURRENT_DATE CURRENT_TIME CURRENT_TIMESTAMP CURRENT_TIME(precision) CURRENT_TIMESTAMP(precision) LOCALTIME LOCALTIMESTAMP LOCALTIME(precision) LOCALTIMESTAMP(precision) CURRENT_TIME CURRENT_TIMESTAMP LOCALTIME LOCALTIMESTAMP CURRENT_TIME CURRENT_TIMESTAMP LOCALTIME LOCALTIMESTAMP now() transaction_timestamp() statement_timestamp() clock_timestamp() timeofday() now() CURRENT_TIMESTAMP transaction_timestamp() CURRENT_TIMESTAMP statement_timestamp() statement_timestamp() transaction_timestamp() clock_timestamp() timeofday() clock_timestamp() 
mainMsg.Body = RTFTEMPLATE % (subjectbody)  mainMsg.HTMLBody = RTFTEMPLATE % (subjectbody)  
datetime.combine(date.today() time()) + timedelta(hours=1)  from datetime import date datetime time timedelta  dt = datetime.combine(date.today() time(23 55)) + timedelta(minutes=30) print dt.time()  00:25:00  
import sys  sys.stdout.write ('some stuff')  
(okayvalue) = get_some_input(blah); if (okay): print value  
void App::exec() {     for(;;) {         vector&lt;Waitable&gt; waitables;         waitables.push_back(m_networkSocket);         waitables.push_back(m_xConnection);         waitables.push_back(m_globalTimer);         Waitable* whatHappened = System::waitOnAll(waitables);         switch(whatHappened) {             case &amp;m_networkSocket: readAndDispatchNetworkEvent(); break;             case &amp;m_xConnection: readAndDispatchGuiEvent(); break;             case &amp;m_globalTimer: readAndDispatchTimerEvent(); break;         }     } }  vector&lt;Waitable&gt; ::fd_set FD_ISSET m_xConnection 
'%f' % (x/y)  '%f' % (1/10**8)  
myargs = ['-vv' '-m' '-a' '-f' '//filesrver/eggs http://webserver1/python_eggs http://webserver2/python_eggs 'myproject==trunk-99']  setuptools.command.easy_install.main( myargs )  'myproject==trunk-99' myproject== -v -vv myargs = ['-v' '-m' '-a' '-f' '"//filesrver/eggs/" "http://webserver1/python_eggs/" "http://webserver2/python_eggs/"' 'trunk-99'] setuptools.command.easy_install.main( myargs )  
win32file.GetFileAttributes(i)  fattrs &amp; win32con.FILE_ATTRIBUTE_ARCHIVE   fattrs = win32file.GetFileAttributes(os.path.join(root i))  os.path.splitext(path) 
def decorator(f):   def decorated(*args**kwargs):       cache = Cache(cachepath)       if cache.iscached(*args**kwargs):           ...       else:           res = f(*args**kwargs)           cache.store((*args**kwargs) res)           return res   return decorated  def cache(filepath)     def decorator(f):       def decorated(*args**kwargs):           cache = Cache(cachepath)           if cache.iscached(*args**kwargs):               ...           else:               res = f(*args**kwargs)               cache.store((*args**kwargs) res)               return res       return decorated     return decorator  
query = self.project.jobrecord_set.filter(         date__lte=date         date__gte=self.start_date) values= ( jobrecord.get_cost() or 0 for jobrecord in query or 0 ) return sum( values )  values= ( jobrecord.get_cost() or 0 for jobrecord in query or 0 ) jobrecord.get_cost() or 0 for jobrecord in 0 
.start()  def myfunc(arg1 arg2):      print 'In thread'      print 'args are' arg1 arg2   thread = Thread(target=myfunc args=(destination_name destination_config))  thread.start()  
pdb.runcall( object.method )  
[{&lt;Type1&gt;: 16   &lt;Type2&gt;: 10   &lt;Type3&gt;: 12   &lt;Type4&gt;: 7   &lt;Type5&gt;: 0   'assemblage': &lt;Assemblage1&gt;}  {&lt;Type1&gt;: 85   &lt;Type2&gt;: 18   &lt;Type3&gt;: 21   &lt;Type4&gt;: 12   &lt;Type5&gt;: 2   'assemblage': &lt;Assemblage2&gt;}  ...]  from collections import defaultdict titles = [] cells = defaultdict(list) for xcol in enumerate(table):     titles.append( col['assemblage'] )     for rk in col:         if rk == 'assemblage': continue # skip the title         cells[rk][x]= col[rk]  final= [] for name in sorted( cells.keys() ):     final.append( cells[name] )  titles final &lt;table&gt;   &lt;tr&gt;     {% for t in titles %}&lt;th&gt;{{t}}&lt;/th&gt;{% endfor %}   &lt;/tr&gt;   {% for row in final %}   &lt;tr&gt;       {% for cell in row %}&lt;td&gt;{{cell}}&lt;/td&gt;{% endfor %}   &lt;/tr&gt;   {% endfor %} &lt;/table&gt;  
&gt;&gt;&gt; import HTMLParser &gt;&gt;&gt; h= HTMLParser.HTMLParser() &gt;&gt;&gt; h.unescape('alpha &amp;lt; &amp;beta;') u'alpha &lt; \u03b2'  &gt;&gt;&gt; import html.parser &gt;&gt;&gt; h = html.parser.HTMLParser() &gt;&gt;&gt; h.unescape('alpha &amp;lt; &amp;beta;') 'alpha &lt; \u03b2'  
&gt;&gt;&gt; x = "Hello World!" &gt;&gt;&gt; x[2:] 'llo World!' &gt;&gt;&gt; x[:2] 'He' &gt;&gt;&gt; x[:-2] 'Hello Worl' &gt;&gt;&gt; x[-2:] 'd!' &gt;&gt;&gt; x[2:-2] 'llo Worl'  
&gt;&gt;&gt; def f(): ...     return {'a' : 1 'b' : 2} ...  &gt;&gt;&gt; def g(): ...     return dict(a=1 b=2) ...  &gt;&gt;&gt; g() {'a': 1 'b': 2} &gt;&gt;&gt; f() {'a': 1 'b': 2} &gt;&gt;&gt; import dis &gt;&gt;&gt; dis.dis(f)   2           0 BUILD_MAP                0               3 DUP_TOP                            4 LOAD_CONST               1 ('a')               7 LOAD_CONST               2 (1)              10 ROT_THREE                         11 STORE_SUBSCR                      12 DUP_TOP                           13 LOAD_CONST               3 ('b')              16 LOAD_CONST               4 (2)              19 ROT_THREE                         20 STORE_SUBSCR                      21 RETURN_VALUE         &gt;&gt;&gt; dis.dis(g)   2           0 LOAD_GLOBAL              0 (dict)               3 LOAD_CONST               1 ('a')               6 LOAD_CONST               2 (1)               9 LOAD_CONST               3 ('b')              12 LOAD_CONST               4 (2)              15 CALL_FUNCTION          512              18 RETURN_VALUE          
NameError &gt;&gt;&gt; val Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; NameError: name 'val' is not defined  'val' in dir() try:     val except NameError:     print("val not set")  if 'val' in dir():     print('val set') else:     print('val not set')  
var = None  None 
tagdata[start:end].decode('iso-8859-1')  
pickle.py pickle pickle.py Pickle::Parse Python::Serialise::Pickle Pickle::Parse feeds.dat pickle.py Can't use string (&quot;sxOYAAuyzSx0WqN3BVPjE+6pgPU&quot;) as a subroutine ref while &quot;strict refs&quot; in use at lib/Pickle/Parse.pm line 489 &lt;STDIN&gt; line 187102.  g7724 ((I2009 I3 I19 I1 I19 I31 I3 I78 I0 t(dtRp62457  &quot;sxOYAAuyzSx0WqN3BVPjE+6pgPU&quot; time.struct_time rss2email pickle.py pickle.py 
pk = None try: pk = User.objects.filter(username=username)[0].pk except: pass  try:     user = User.objects.get(username=username) except User.DoesNotExist:     user = None  {{ user.id }} {{ pk }} authenticate() User.DoesNotExist try try:     ... a line of code that can generate exceptions to be handled ... except SomeException:     ... handle this particular exception ... else:     ... the rest of the code to execute if there were no exceptions ...  
&gt;&gt;&gt; marshal.dumps(defaultdict(list)) '{0' &gt;&gt;&gt; marshal.dumps(dict()) '{0'  
first = [x for (xy) in data] second = [y for (xy) in data]  
request = urllib2.Request('http://www.example.com' postBackData { 'User-Agent' : 'My User Agent' })  try:      response = urllib2.urlopen(request) except urllib2.HTTPError e:     checksLogger.error('HTTPError = ' + str(e.code)) except urllib2.URLError e:     checksLogger.error('URLError = ' + str(e.reason)) except httplib.HTTPException e:     checksLogger.error('HTTPException') except Exception:     import traceback     checksLogger.error('generic exception: ' + traceback.format_exc())  
class NullDecl (object):    def __init__ (self func):       self.func = func       for name in set(dir(func)) - set(dir(self)):         setattr(self name getattr(func name))     def __call__ (self *args):       return self.func (*args)  @NullDecl def myFunc (xyz):    return (x+y)/z  
&gt;&gt;&gt; 'w\xc3\xb6rner'.decode('utf-8') u'w\xf6rner'  &gt;&gt;&gt; file.write('Name: %s - %s\n' %(Name type(Name))) UnicodeEncodeError: 'ascii' codec can't encode character u'\xf6' in position 7: ordinal not in range(128)  name= 'w\xc3\xb6rner'.decode('utf-8') file.write('Name: %r\n' % name)  Name: u'w\xf6rner'  
from xml.dom.minidom import parse parseString tree = parseString("&lt;div id='asd'&gt;&lt;pre&gt;skdsk&lt;/pre&gt;&lt;/div&gt;") root = tree.firstChild node = root.childNodes[0] print node.toxml()  
class MakeSlots(type):      def __new__(cls name bases attrs):         attrs['__slots__'] = attrs.keys()          return super(MakeSlots cls).__new__(cls name bases attrs)  class A(object):     one = 1     two = 2      __metaclass__ = MakeSlots  
&lt;foo&gt; bar &lt;/foo&gt; &lt;foo&gt;bar&lt;/foo&gt; import BeautifulSoup  s = """ &lt;node1&gt;     &lt;node2&gt;         &lt;node3&gt;foo&lt;/node3&gt;     &lt;/node2&gt;     &lt;node3&gt;       &lt;!-- I'm a comment! Leave me be! --&gt;     &lt;/node3&gt;     &lt;node4&gt;     &lt;![CDATA[       I'm CDATA!  Changing me would be bad!     ]]&gt;     &lt;/node4&gt; &lt;/node1&gt; """  soup = BeautifulSoup.BeautifulStoneSoup(s)  for t in soup.findAll(text=True):    if type(t) is BeautifulSoup.NavigableString: # Ignores comments and CDATA       t.replaceWith(t.strip())  print soup  
flickerObject connect ObjectPath NameOwnerChanged 
[widget][widget][widget][widget]  [widget] [widget] [widget] [widget]  import gtk box = gtk.HBox() b1 = gtk.Button('button1') b2 = gtk.Button('button2') box.pack_start(b1) box.pack_start(b2)  expand=True [[    widget    ][    widget    ]]  box.pack_start(b1 expand=False)  [[widget][        widget        ]]  pack_start expand=False fill set_size_request set_size_request 
&lt;img name="myImageXYZ00618" id="myImageXYZ00618" src='http://www2.lib.myschool.edu:7017/INS01/icon_eng/v-add_favorite.png' alt='Add to My Sets' title='Add to My Sets' border="0"title="Add to clipboard PAIS International (CSA)" alt="Add to clipboard PAIS International (CSA)"&gt;  border="0" 
c:\python30 c:\Python24\libs\python30 Py_InitModule PyModule_Create 
   class Page(db.Model):        title = db.StringProperty(required=True)        // string property now       uri = db.StringProperty(required=True)        created = db.DateTimeProperty(auto_now_add=True)        modified = db.DateTimeProperty(auto_now=True)        content = db.TextProperty()  
class MyObject( object ):     def __init__( self args ):         pass # Something Expensive  class MyObjectFactory( object ):     def __init__( self ):         self.pool = {}     def makeMyObject( self args ):         if args not in self.pool:             self.pool[args] = MyObject( args )         return self.pool[args]  
socket = urllib.urlopen(TheURL) FileContents = socket.read() LocalFilename = LocalDir + FilenameOnly LocalFile = open(LocalDir + FilenameOnly 'wb') LocalFile.write(FileContents) LocalFile.close()  TheURL FilenameOnly LocalDir LocalFile.close() FTPServer = ftplib.FTP(FTPServer FTPUsername FTPPassword) UploadFile = open(Filename "rb") FTPServer.cwd(FTPSubDirectory)  UploadFile.close() FTPServer.quit()  FTPServer.quit() 
find find /some/path -perm 0777  
sudo easy_install http://ipython.scipy.org/dist/readline-2.5.1-py2.5-macosx-10.5-i386.egg  
from sgmllib import SGMLParser  class URLLister(SGMLParser):     def reset(self):                                       SGMLParser.reset(self)         self.urls = []      def start_a(self attrs):                              href = [v for k v in attrs if k=='href']           if href:             self.urls.extend(href)  import urllib urllister usock = urllib.urlopen("http://diveintopython.net/") parser = urllister.URLLister() parser.feed(usock.read())          usock.close()       parser.close()                     for url in parser.urls: print url  
getpixel  im.getpixel(xy) =&gt; value or tuple  Returns the pixel at the given position. If the image is a multi-layer image this method returns a tuple.  
{% extends "base.html" %} {% extends "base.html" %} {# ... rest of your code ...#} {% extends "section1/base.html" %} 
easy_install Unipath 
use Builder; my $builder = Builder-&gt;new; my $h = $builder-&gt;block( 'Builder::XML' );  $h-&gt;table( { border =&gt; 0 cellpadding =&gt; 4 } sub {    for ( my $i = 1; $i &lt; 25; $i += 5 ) {        $h-&gt;tr( { align =&gt; 'right' } sub {            for my $j (0..4) {                $h-&gt;td( { color =&gt; $j % 2 ? 'pink' : 'green' } $i + $j );            }        });    }  });  say $builder-&gt;render;  use HTML::AsSubs;  my $td = sub {     my $i = shift;     return map {          td( { color =&gt; $_ % 2 ? 'pink' : 'green' } $i + $_ )     } 0..4; };  say table( { border =&gt; 0 cellpadding =&gt; 4 }     map {          &amp;tr( { align =&gt; 'right' } $td-&gt;( $_ ) )      } loop( below =&gt; 25 by =&gt; 5 ) )-&gt;as_HTML;  use HTML::Tiny; my $h = HTML::Tiny-&gt;new;  my $td = sub {     my $i = shift;     return map {          $h-&gt;td( { 'color' =&gt; $_ % 2 ? 'pink' : 'green' } $i + $_ )     } 0..4; };  say $h-&gt;table(     { border =&gt; 0 cellpadding =&gt; 4 }     [         map {              $h-&gt;tr( { align =&gt; 'right' } [ $td-&gt;( $_ ) ] )           } loop( below =&gt; 25 by =&gt; 5 )         ] );  use Markapl;  template 'MyTable' =&gt; sub {     table ( border =&gt; 0 cellpadding =&gt; 4 ) {        for ( my $i = 1; $i &lt; 25; $i += 5 ) {            row ( align =&gt; 'right' ) {                for my $j ( 0.. 4 ) {                    td ( color =&gt; $j % 2 ? 'pink' : 'green' ) { $i + $j }                }            }        }      } };  print main-&gt;render( 'MyTable' );  package MyTemplates; use Template::Declare::Tags; use base 'Template::Declare';  template 'MyTable' =&gt; sub {     table {         attr { border =&gt; 0 cellpadding =&gt; 4 };         for ( my $i = 1; $i &lt; 25; $i += 5 ) {             row  {                 attr { align =&gt; 'right' };                     for my $j ( 0..4 ) {                         cell {                             attr { color =&gt; $j % 2 ? 'pink' : 'green' }                              outs $i + $j;                         }                     }             }         }      } };  package main; use Template::Declare; Template::Declare-&gt;init( roots =&gt; ['MyTemplates'] ); print Template::Declare-&gt;show( 'MyTable' );  use XML::Generator; my $x = XML::Generator-&gt;new( pretty =&gt; 2 );  my $td = sub {     my $i = shift;     return map {          $x-&gt;td( { 'color' =&gt; $_ % 2 ? 'pink' : 'green' } $i + $_ )     } 0..4; };  say $x-&gt;table(     { border =&gt; 0 cellpadding =&gt; 4 }     map {          $x-&gt;tr( { align =&gt; 'right' } $td-&gt;( $_ ) )       } loop( below =&gt; 25 by =&gt; 5 )     );  sub loop {     my ( %p ) = @_;     my @list;      for ( my $i = $p{start} || 1; $i &lt; $p{below}; $i += $p{by} ) {         push @list $i;     }      return @list; }  
bars maptest foos = [1.02.03.04.05.0] bars = [123]  def maptest(foo):     print foo bars  map(maptest foos)  maptest map map((lambda foo: maptest(foo bars)) foos)  
Tkinter tkinter Tkinter tkinter tkMessageBox tkinter.messagebox tkColorChooser tkinter.colorchooser tkFileDialog tkinter.filedialog tkCommonDialog tkinter.commondialog tkSimpleDialog tkinter.simpledialog tkFont tkinter.font Tkdnd tkinter.dnd ScrolledText tkinter.scrolledtext Tix tkinter.tix ttk tkinter.ttk dir Tkinter tkinter 
import os fcntl fcntl.fcntl(thePipe fcntl.F_SETFL os.O_NONBLOCK)   thePipe.read() F_SETFL O_NONBLOCK 
&gt;&gt;&gt; {'a': 1 'b': 2} {'a': 1 'b': 2} &gt;&gt;&gt; {'a': 1 'b': 2}.items() [('a' 1) ('b' 2)]  sorted(somedict.items() key=lambda x: {'carrot': 2 'banana': 1 'apple':3}[x[0]])  
PythonPath "['D:/therap' 'D:/therap/therap'] + sys.path"  
import logging LOG_FILENAME = '/tmp/logging_example.out' logging.basicConfig(filename=LOG_FILENAMElevel=logging.DEBUG)  ...  try:     # code except:     logging.debug('Something bad happened' exc_info=True)     # display message box     # raise (if necessary)  
-1 None -1 str.find() 
__new__ __init__ __new__ __init__ __new__ __new__ __init__ __new__ 
sorted(dictionary.items() key=lambda x: x[1])  import operator sorted(dictionary.items() key=operator.itemgetter(1))  operator 
&gt;&gt;&gt; d = { 'a': 1 'b': 2 'c': 3 } &gt;&gt;&gt; d.items() [('a' 1) ('c' 3) ('b' 2)] &gt;&gt;&gt; [(v k) for k v in d.iteritems()] [(1 'a') (3 'c') (2 'b')]  iteritems items 
# 
python python -tt 
Firstclass.rect = &lt;...&gt; __setattr__ Firstclass.rect.bottom = 3 __setattr__ __setattr__ 
verbose_name_plural 
extrema 
tee 
infodict = {     'queryset': Post.objects.all()     'date_field': 'date'     'template_name': 'index.html'     'template_object_name': 'latest_post_list' }  urlpatterns = patterns('django.views.generic.date_based'     url(r'^gindex/$' 'archive_index' dict(infodict template_name='gindex.html'))     url(r'^hindex/$' 'archive_index' dict(infodict template_name='hindex.html')) )  
&gt;&gt;&gt; get_session('Mmusc20090126' False True) #doctest: +ELLIPSIS &lt;sqlalchemy.orm.session.Session object at 0x...&gt;  
import os print(os.path.splitext("/path/to/some/file.txt")[0])  /path/to/some/file  os.path.splitext import os print(os.path.splitext("/path/to/some/file.txt.zip.asc")[0])  /path/to/some/file.txt.zip  
cherrypy.quickstart(Root() "/")  
for x in range(750 765) + [769 770 774]: print x  
import urllib  url_handle = urllib.urlopen( "http://www.webservicex.net/whois.asmx/GetWhoIS?HostName=%s" \                              % ("www.google.com") ) print url_handle.read()  
# test_client.py from poster.encode import multipart_encode from poster.streaminghttp import register_openers import urllib2  # Register the streaming http handlers with urllib2 register_openers()  # Start the multipart/form-data encoding of the file "DSC0001.jpg" # "image1" is the name of the parameter which is normally set # via the "name" parameter of the HTML &lt;input&gt; tag.  # headers contains the necessary Content-Type and Content-Length # datagen is a generator object that yields the encoded parameters datagen headers = multipart_encode({"image1": open("DSC0001.jpg")})  # Create the Request object request = urllib2.Request("http://localhost:5000/upload_image" datagen headers) # Actually do the request and get the response print urllib2.urlopen(request).read()  
slice(*[{True: lambda n: None False: int}[x == ''](x) for x in (mystring.split(':') + ['' '' ''])[:3]])  
switch if/elif funcs = {     'CONNECT': connect     'RAWFEED': rawfeed     'RAWCONFIG' : rawconfig     'TESTFEED': testfeed } funcs[status](*args **kwargs)  
ON DELETE CASCADE Message User _collect_sub_objects() delete() django.db.base delete() _collect_sub_objects from django.db.models.query import CollectedObjects u = User.objects.get(id=1)   instances_to_be_deleted = CollectedObjects() u._collect_sub_objects(instances_to_be_deleted)  for k in instances_to_be_deleted.ordered_keys():     inst_dict = instances_to_be_deleted.data[k]     for i in inst_dict.values():         i.sender = None  # You will need a more generic way for this         i.save()  u.delete()  
__new__ def substitute_init(self id *args **kwargs):     pass  class FooMeta(type):      def __new__(cls name bases attrs):         attrs['__init__'] = substitute_init         return super(FooMeta cls).__new__(cls name bases attrs)  class Foo(object):      __metaclass__ = FooMeta      def __init__(self value1):         pass  
split ps = subprocess.Popen(['ps' 'aux'] stdout=subprocess.PIPE).communicate()[0] processes = ps.split('\n') # this specifies the number of splits so the splitted lines # will have (nfields+1) elements nfields = len(processes[0].split()) - 1 for row in processes[1:]:     print row.split(None nfields)  
None class Cheese():     def __init__(self num_holes = None):         if num_holes is None:             ...  class Cheese():     def __init__(self *args **kwargs):         #args -- tuple of anonymous arguments         #kwargs -- dictionary of named arguments         self.num_holes = kwargs.get('num_holes'random_holes())  *args **kwargs def f(*args **kwargs):    print 'args: ' args ' kwargs: ' kwargs  &gt;&gt;&gt; f('a') args:  ('a')  kwargs:  {} &gt;&gt;&gt; f(ar='a') args:  ()  kwargs:  {'ar': 'a'} &gt;&gt;&gt; f(12param=3) args:  (1 2)  kwargs:  {'param': 3}  
[] class A(dict):       def __init__(self):         self['a'] = 'success'      def __getitem__(self name):         print 'getitem!'         return dict.__getitem__(self name)  class B(object):     def __init__(self):         self._a = A()         B.__getitem__ = self._a.__getitem__  b = B() c = b['a']  
def text_return(self event):     self.st.Clear()     self.st.Append('3')     self.st.Append('4')  
def DestinationThread( a ) :   while True :     items = q.get()     func = items[0]     args = items[1:]     func(*args)  
True 
close() GeneratorExit GeneratorExit StopIteration close() try...finally finally try...finally with with __exit__ with def coroutine():     lock.acquire()     yield 'spam'     yield 'eggs'     lock.release()  generator = coroutine() generator.next() lock.acquire() # whoops!  
threading.Thread Thread(target=callable).start() gtk.main_iteration block True gtk.main_iteration gtk.main_iteration(block=False)  gtk.gdk.threads_init 
unittest.main()  unittest.main(failfast=True)  
def create_querytable2():     constring = "OLEDB;Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\path\to\db.mdb;"     SQL = "Select * from tblName;"     excel = client.CreateObject("Excel.Application" dynamic=True)     excel.Visible = True     ws = excel.Workbooks.Add().Worksheets(1)     ws.QueryTables.Add(constring ws.Range["A1"] SQL).Refresh()  
__new__() __init__() __new__() cls klass __init__() self __new__ 
import pygame MyDll 
__getitem__ class A(dict):                       def __getitem__(self name):         return dict.__getitem__(self name)  class B(object):     def __init__(self):         self.a = A()      def __getitem__(self item):         return self.a[item]  b1 = B() b1.a['a'] = 5 b2 = B() b2.a['b'] = 10  c = b1['a'] d = b2['b']  __init__ def __init__(self):     self.a = A()     def mygetitem(self item):         return self.a[item]     B.__getitem__ = types.MethodType(mygetitem None B)  
dir() &gt;&gt;&gt; li = [] &gt;&gt;&gt; dir(li)       ['append' 'count' 'extend' 'index' 'insert' 'pop' 'remove' 'reverse' 'sort']  li dir(li) class Foo:     def foo(): pass  class Bar(Foo):     def bar(): pass  &gt;&gt;&gt; from test import Foo Bar &gt;&gt;&gt; dir(Foo) ['__doc__' '__module__' 'foo'] &gt;&gt;&gt; dir(Bar) ['__doc__' '__module__' 'bar' 'foo']  dir() vars() Vars() dir() help() 
&gt;&gt;&gt; from myapp.models import Entry &gt;&gt;&gt; from django.db.models import Q  &gt;&gt;&gt; Entry.objects.filter(~Q(id = 3))  [&lt;Entry: Entry object&gt; &lt;Entry: Entry object&gt; &lt;Entry: Entry object&gt; ...]  
os.path from os import path path.dirname("C:\\a\\b\\c\\d\\")  
itertools.groupby(biglist operator.itemgetter(2))  
update tblName set date_field = dateadd("hh" 2 data_field)  
file file file.jpg 
if x == 0:   pass else:   print "x not equal 0"  def f():   pass  class c:   pass  
# in urls.py assuming you have a customized view url(r'foo/$' 'foo' name='foo_index')  # in the template to get the admin url {% url admin:foo_index %}  
iptype() &gt;&gt;&gt; from IPy import IP &gt;&gt;&gt; ip = IP('127.0.0.0/30') &gt;&gt;&gt; ip.iptype() 'PRIVATE'  
printa(*cord())  * * def fn(*args):     # args is now a tuple of the non-keyworded arguments     print args  fn(1 2 3 4 5)  (1 2 3 4 5) fn(*[1 2 3 4 5])  
import struct  data = self.socket.recv(4) print "data is " data print "repr(data) is " repr(data) myint = struct.unpack("!i" data)[0]  
&gt;&gt;&gt; 'a_b_c_d'.rsplit('_' 1) ['a_b_c' 'd']  S.rsplit([sep [maxsplit]]) 
lst = [0] * 3  &gt;&gt;&gt; lst_2d = [[0] * 3] * 3 &gt;&gt;&gt; lst_2d [[0 0 0] [0 0 0] [0 0 0]] &gt;&gt;&gt; lst_2d[0][0] = 5 &gt;&gt;&gt; lst_2d [[5 0 0] [5 0 0] [5 0 0]]  &gt;&gt;&gt; lst_2d = [[0] * 3 for i in xrange(3)] &gt;&gt;&gt; lst_2d [[0 0 0] [0 0 0] [0 0 0]] &gt;&gt;&gt; lst_2d[0][0] = 5 &gt;&gt;&gt; lst_2d [[5 0 0] [0 0 0] [0 0 0]]  
class C(object):     @staticmethod     def f(x):        return x + x  c = C() c.f(2)  C.f(2)  
print "platform.name="+ "Jython " + version   print("platform.name="+ "Jython " + version)  
def alter_elements(lst func):   for i item in enumerate(lst):     if isinstance(item list):       alter_elements(item func)     else:       lst[i] = func(item)  &gt;&gt;&gt; sample = [[123][456][789]] &gt;&gt;&gt; alter_elements(sample lambda x: -x) &gt;&gt;&gt; print sample &gt;&gt;&gt; [[-1 -2 -3] [-4 -5 -6] [-7 -8 -9]]  
d6 = Die() #create die 1 with the default side of 6 d4 = Die(4) #create die 2 with 4 sides d12 = Die(12) #create die 3 with 12 sides  roll1 = d6.roll_die() roll2 = d4.roll_die() roll3 = d12.roll_die()  print "%d\n%d\n%d\nsum = %d" % (roll1 roll2 roll3 roll1 + roll2 + roll3)  
//pseudocode: var urlsToVisit = new Queue(); // Could be a queue (BFS) or stack(DFS). (probably with a database backing or something). var visitedUrls = new Set(); // List of visited URLs.  // initialization: urlsToVisit.Add( rootUrl );  while(urlsToVisit.Count &gt; 0) {   var nextUrl = urlsToVisit.FetchAndRemoveNextUrl();   var page = FetchPage(nextUrl);   ProcessPage(page);   visitedUrls.Add(nextUrl);   var links = ParseLinks(page);   foreach (var link in links)      if (!visitedUrls.Contains(link))         urlsToVisit.Add(link);  }  
def _(message):     return my_gettext(__name__ message)  
def testDecorator(f):     def _testDecorator():         a = someTestFunction()         if a is None:             return f()         else: return a     return _testDecorator  @testDecorator def SomeCallingFunction():     ... normal execution  testDecorator SomeCallingFunction SomeCallingFunction SomeCallingFunction a SomeCallingFunction 
curtime = time.strftime("%H") ... for hour in range(int(s) int(f)):     nrt.append(hour) # this is an inefficient synonym for # nrt = range(int(s) int(f))  if curtime in nrt:     ...  '4' == 4 # False '4' in [3 4 5] # False  cur_hour = time.localtime().tm_hour if int(s) &lt;= cur_hour &lt; int(f):     # You can "chain" comparison operators in Python     # so that a op1 b op2 c is equivalent to a op1 b and b op2c     ...  
p.sort_stats('time' 'cum').print_stats(.5 'init|get')  
import re RE_kv = re.compile("\[%(.*)%\].*?\n?\s*{\s*(.*)") matches = re.findall(RE_kv test re.M) for k v in matches:     print k v  price $54.99 model WRT54G brand LINKSYS  
get_info(__init__) __init__ get_info(__init__) get_info __init__ 
samples/contacts/contacts_example.py 
pickle.dumps() 
try:     frobnicate() except KeyError as exc:     raise ValueError(&quot;Bad grape&quot;) from exc  exc __cause__ 
import win32api import win32pdhutil import win32con  def killProcName(procname):     """Kill a running process by name.  Kills first process with the given name."""     try:         win32pdhutil.GetPerformanceAttributes("Process" "ID Process" procname)     except:         pass      pids = win32pdhutil.FindPerformanceAttributesByName(procname)      # If _my_ pid in there remove it!     try:         pids.remove(win32api.GetCurrentProcessId())     except ValueError:         pass      handle = win32api.OpenProcess(win32con.PROCESS_TERMINATE 0 pids[0])     win32api.TerminateProcess(handle 0)     win32api.CloseHandle(handle)  
&gt;&gt;&gt; tuples = [(11) (01) (10) (00) (21)] &gt;&gt;&gt; l = {} &gt;&gt;&gt; for t in tuples: ...    l[t] = "something" &gt;&gt;&gt; sorted(l) # equivalent to sorted(l.keys()) [(0 0) (0 1) (1 0) (1 1) (2 1)] &gt;&gt;&gt; sorted(l.items()) # make a list of (key value) tuples and sort by key [((0 0) 'something') ((0 1) 'something') ((1 0) 'something') ((1 1) 'something') ((2 1) 'something')]      something 
In [1]: import hmac hashlib In [2]: hmac.new('key' 'msg').hexdigest() Out[2]: '18e3548c59ad40dd03907b7aeee71d67' In [3]: hmac.new('key2' 'msg').hexdigest() Out[3]: 'a4bde113179bc2a7c6ac9ad7309ea073' In [4]: hmac.new('key' 'msg' hashlib.sha256).hexdigest() Out[4]: '2d93cbc1be167bcb1637a4a23cbff01a7878f0c50ee833954ea5221bb1b8c628'  hmac.new(CryptoKey '^'.join([login seq time amo]) hashlib.md5).hexdigest()  
__init__ 
%f time.strptime('30/03/09 16:31:32.123' '%d/%m/%y %H:%M:%S.%f')  time datetime &gt;&gt;&gt; from datetime import datetime &gt;&gt;&gt; a = datetime.strptime('30/03/09 16:31:32.123' '%d/%m/%y %H:%M:%S.%f') &gt;&gt;&gt; a.microsecond 123000  
w.update_idletasks() 
&gt;&gt;&gt; import urllib &gt;&gt;&gt; params = urllib.urlencode({'spam': 1 'eggs': 2 'bacon': 0}) &gt;&gt;&gt; f = urllib.urlopen("http://www.musi-cal.com/cgi-bin/query" params) &gt;&gt;&gt; print f.read()  
&gt;&gt;&gt; import subprocess &gt;&gt;&gt; s = subprocess.Popen(['cowsay' 'hello'] \       stderr=subprocess.STDOUT stdout=subprocess.PIPE).communicate()[0] &gt;&gt;&gt; print s  _______  &lt; hello &gt;  -------          \   ^__^          \  (oo)\_______             (__)\       )\/\                 ||----w |                 ||     ||  
$ python -c 'import sys; print sys.stdin.isatty()' True $ echo | python -c 'import sys; print sys.stdin.isatty()' False  
flat=True &gt;&gt;&gt; Entry.objects.values_list('id' flat=True).order_by('id') [1 2 3 ...]  
from bs4 import BeautifulSoup  VALID_TAGS = ['strong' 'em' 'p' 'ul' 'li' 'br']  def sanitize_html(value):      soup = BeautifulSoup(value)      for tag in soup.findAll(True):         if tag.name not in VALID_TAGS:             tag.hidden = True      return soup.renderContents()  tag.extract() tag.hidden 
__getattr__ class CustomVal(object):     def __init__(self value):         self.value = value      def __getattr__(self attr):         return getattr(self.value attr)  &gt;&gt;&gt; obj = CustomVal(wrapped_obj) &gt;&gt;&gt; obj.SomeAttributeOfWrappedObj  __setattr__ __delattr__ 
method method(child *args **kwargs)  map_children(method)(child *args **kwargs)  
&gt;&gt;&gt; import os &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; path = "F:/dir/" &gt;&gt;&gt; &gt;&gt;&gt; clean_path = os.path.normpath(path) &gt;&gt;&gt; clean_path 'F:\\dir' &gt;&gt;&gt; drive directory = os.path.splitdrive(clean_path) &gt;&gt;&gt; drive 'F:' &gt;&gt;&gt; directory '\\dir'  
datetime.combine datetime.time datetime.time datetime.strptime t = datetime.strptime(self.start "%H:%M:%S").time() start = datetime.combine(self.job_record.date t)  
&gt;&gt;&gt; "%10d" % 5 '         5' &gt;&gt;&gt;   * &gt;&gt;&gt; "%*d" % (105) '         5' &gt;&gt;&gt;   
import os random random.choice(os.listdir("C:\\")) #change dir name to whatever  dircache dircache 
def call_attrs(obj attrs_list *args):     for attr in attrs_list:         if hasattr(obj attr):             bound_method = getattr(obj attr)             return bound_method(*args)      raise AttributeError  call_attrs(a ['method1' 'method2' 'method3'])  call_attrs(a ['method1' 'method2' 'method3'] arg1 arg2)  
save() 
&gt;&gt;&gt; import unidecode &gt;&gt;&gt; from unidecode import unidecode &gt;&gt;&gt; unidecode(u'???????????') 'diakritikos'  &gt;&gt;&gt; unidecode(u'???') 'Ying Shi Ma ' &gt;&gt;&gt;   from unidecode import unidecode from django.template import defaultfilters slug = defaultfilters.slugify(unidecode(input_text))  
ResultProxy rowcount 
import psutil os p = psutil.Process(os.getpid()) p.ionice(psutil.IOPRIO_CLASS_IDLE)  
LinkSectionInline LinkFormset = forms.modelformset_factory(Link) class LinkSectionForm(forms.ModelForm):     def __init__(self **kwargs):         super(LinkSectionForm self).__init__(**kwargs)         self.link_formset = LinkFormset(instance=self.instance                                          data=self.data or None                                         prefix=self.prefix)      def is_valid(self):         return (super(LinkSectionForm self).is_valid() and                      self.link_formset.is_valid())      def save(self commit=True):         # Supporting commit=False is another can of worms.  No use dealing         # it before it's needed. (YAGNI)         assert commit == True          res = super(LinkSectionForm self).save(commit=commit)         self.link_formset.save()         return res  
doc = 'a b c d e f' words = doc.split(None) max = 3             for index in xrange(len(words)):         for n in xrange(max):         if index + n &lt; len(words):                        print ' '.join(words[index:index+n+1])     def find_terms(words max_words_per_term):            if len(words) == 0: return []     return [" ".join(words[:i+1]) for i in xrange(min(len(words) max_words_per_term))] + find_terms(words[1:] max_words_per_term)   doc = 'a b c d e f' words = doc.split(None)  for term in find_terms(words 3):     print term  def find_terms(words max_words_per_term):         # If there are no words you've reached the end. Stop.         if len(words) == 0:         return []            # What's the max term length you could generate from the remaining      # words? It's the lesser of max_words_per_term and how many words      # you have left.                                                              max_term_len = min(len(words) max_words_per_term)             # Find all the terms that start with the first word.     initial_terms = [" ".join(words[:i+1]) for i in xrange(max_term_len)]      # Here's the recursion. Find all of the terms in the list      # of all but the first word.     other_terms = find_terms(words[1:] max_words_per_term)      # Now put the two lists of terms together to get the answer.     return initial_terms + other_terms   
class Materials:     Shaded Shiny Transparent Matte = range(4)  &gt;&gt;&gt; print Materials.Matte 3  
urllib.quote 
odd_integers_up_to_length(el).next() &gt;&gt;&gt; odd_integers_up_to_length('a').next() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; StopIteration  
datetime date start_date = datetime.datetime.now() - datetime.timedelta(30)  date time datetime 
function! s:transpose()     let maxcol = 0     let lines = getline(1 line('$'))      for line in lines         let len = len(line)         if len &gt; maxcol              let maxcol = len         endif     endfor      let newlines = []     for col in range(0 maxcol - 1)         let newline = ''         for line in lines             let line_with_extra_spaces = printf('%-'.maxcol.'s' line)             let newline .= line_with_extra_spaces[col]         endfor         call add(newlines newline)     endfor      1$"_d     call setline(1 newlines) endfunction  command! TransposeBuffer call s:transpose()  :TransposeBuffer 
chr() ord() &gt;&gt;&gt; chr(97) 'a' &gt;&gt;&gt; ord('a') 97  
buffer_size = 720 * 288 * ctypes.sizeof(ctypes.c_float) rgb_buffer = ctypes.create_string_buffer(buffer_size)  ctypes.memmove(rgb_buffer getRgbBuffer() buffer_size)  ctypes.memmove() memmove(dst src count) count src dst dst src rgb_buffer.value '\0' buffer_contents = rgb_buffer[:] 
def my_func():     # do useful stuff     pass  import eg2 while True:     eg2.my_func()  
import os import stat import sys  MODE = "775"  def mode_matches(mode file):     """Return True if 'file' matches 'mode'.      'mode' should be an integer representing an octal mode (eg     int("755" 8) -&gt; 493).     """     # Extract the permissions bits from the file's (or     # directory's) stat info.     filemode = stat.S_IMODE(os.stat(file).st_mode)      return filemode == mode  try:     top = sys.argv[1] except IndexError:     top = '.'  try:     mode = int(sys.argv[2] 8) except IndexError:     mode = MODE  # Convert mode to octal. mode = int(mode 8)  for dirpath dirnames filenames in os.walk(top):     dirs = [os.path.join(dirpath x) for x in dirnames]     for dirname in dirs:         if mode_matches(mode dirname):             print dirname  
&gt;&gt;&gt; ord("£") 156  
state = 1 for sLine in oFile:    if state == 1:       if ... some logic ... :          state = 2    elif state == 2:       if ... some logic ... :          state = 1  
from django.core.cache import cache key = 'some-key' data = cache.get(key) if data is None:     # soupify the page and what not     cache.set(data key 60*60*8)     return render_to_response ... return render_to_response  
try:     import simplejson as json except ImportError:     import json  
soup.findAll(lambda tag: tag.name == 'a' and \ tag.findParent('strong' 'sans') and \ tag.findParent('strong' 'sans').findParent('td' attrs={'width':'50%'}))  findParent('strong' 'sans') &lt;a&gt; strong 
xmldoc = minidom.parse('your.xml') matchingNodes = [node for node in xmldoc.getElementsByTagName("id") if node.nodeValue == '345754']  
import a_ridiculously_long_module_name as short_name  import module.submodule.subsubmodule as short_name  
self def method1(self):     return 'hello world'  def method2(self methodToRun):     result = methodToRun()     return result  obj.method2(obj.method1)  __call__() methodToRun.__call__() __call__() method1 method2 method1 method1 def method1(self spam):     return 'hello ' + str(spam)  method2 def method2(self methodToRun spam_value):     return methodToRun(spam_value)  def method2(self methodToRun):     spam_value = compute_some_value()     return methodToRun(spam_value)  def method1(self spam ham):     return 'hello ' + str(spam) + ' and ' + str(ham)  def method2(self methodToRun ham_value):     spam_value = compute_some_value()     return methodToRun(spam_value ham_value)  def method2(self methodToRun ham_value):     spam_value = compute_some_value()     return methodToRun(spam_value ham=ham_value)  method2 methodToRun def method1(self spam ham):     return 'hello ' + str(spam) + ' and ' + str(ham)  def method2(self methodToRun positional_arguments keyword_arguments):     return methodToRun(*positional_arguments **keyword_arguments)  obj.method2(obj.method1 ['spam'] {'ham': 'ham'})  positional_arguments keyword_arguments method2 positional_arguments keyword_arguments method1 
newID = db.insert_id()  conn = MySQLdb(host...)  c = conn.cursor() c.execute("INSERT INTO...") newID = c.lastrowid  
def method1(name):     def wrapper():         return 'Hello ' + name     return wrapper  def method2(method question):     output = method()     return output + ' ' + question  method2(method1(name = 'Sam') 'How are you?')  def method1(name):     def wrapper(greeting):         return greeting + name     return wrapper  def method2(method question):     output = method(greeting = 'Hello ')     return output + ' ' + question  method2(method1(name = 'Sam') 'How are you?')  
unless (caller) {   print "This is the script being executed\n"; }  undef 
python manage.py runserver 192.168.x.x:8000  python manage.py runserver 0.0.0.0:8000  
/bin/sh #!/bin/sh  /usr/bin/env $PATH which python #!/usr/bin/env python  $ python script.py  chmod +x script.py $ ./script.py  cp yourCmd.py /usr/local/bin/yourCmd chmod a+rx /usr/local/bin/yourCmd  yourCmd  
bar self.bar Foo.bar Foo.bar self.bar 
isinstance()  isinstance("this is a string" str) True 
import folder_on_path/     com/         __init__.py         domain1/             module.py             __init__.py   other_folder_on_path/     com/         __init__.py         domain2/             module.py             __init__.py  from com.domain1 import module from com.domain2 import module  folder_on_path other_folder_on_path from com. com domain1 import ImportError import com com from com import domain1 from com.domain1 import module from com.domain1.module import variable  com com variable import com domain 
'iterator' if obj is iter(obj) else 'iterable'  
sys.stdout write class DevNull(object):     def write(self arg):         pass  import sys     sys.stdout = DevNull() print "this goes to nirvana!"  sys.stdout 
size = min(image.Size)  originX = image.Size[0] / 2 - size / 2 originY = image.Size[1] / 2 - size / 2  cropBox = (originX originY originX + size originY + size)  
SimpleCookie BaseCookie.output() print cookie  BaseCookie.output() output() &gt;&gt;&gt; c1=Cookie.SimpleCookie() &gt;&gt;&gt; c1['name']='A:0' &gt;&gt;&gt; print c1 Set-Cookie: name="A:0" &gt;&gt;&gt; c1['name']=r'"A:0"' &gt;&gt;&gt; print c1 Set-Cookie: name="\"A:0\"" &gt;&gt;&gt; c1['name']=r'"\"A:0\""' &gt;&gt;&gt; print c1 Set-Cookie: name="\"\\\"A:0\\\"\"" &gt;&gt;&gt;   
{% for field in form %}     {% ifnotequal field.label title %}         {{ field }}     {% endifnotequal %} {% endfor %}  ifequal ifnotequal 
ak.sort(key=lambda x:x[0].lower())  cmp cmp lower cmp(x[0].lower() y[0].lower()) cmp(x[0].lower y[0].lower) 
import module from module import foo import module import module.foo import module as mo mo.foo from module import foo foo import foo ceil() math.ceil() from module import * import * import 
replaceWith make.contents[0].replaceWith('Top of the world Ma!')  
--keyword=_pl:12 
nosetests -v --collect-only  
for key in dict:     if check_condition(dict[key]):        del dict[key]  for key in list(dict.keys()):     if key in dict and check_condition(dict[key]):         del dict[key]  list(dict.keys()) 
json simplejson json simplejson simplejson simplejson try:     import simplejson as json except ImportError:     import json  
help(my_func)  my_func.__doc__  
bool Boolean ArrayList bool True Boolean &gt;&gt;&gt; from java.lang import Boolean &gt;&gt;&gt; b = Boolean('True') &gt;&gt;&gt; b       true &gt;&gt;&gt; from java.util import ArrayList &gt;&gt;&gt; l = ArrayList() &gt;&gt;&gt; l.add(b) True &gt;&gt;&gt; l [true] &gt;&gt;&gt; l.add(True) True &gt;&gt;&gt; l [true true] &gt;&gt;&gt; list(l)  [True True]  Boolean bool Boolean.TRUE True 
from __future__ import with_statement  try:     with open( "a.txt" ) as f :         print f.readlines() except EnvironmentError: # parent of IOError OSError *and* WindowsError where available     print 'oops'  try:     f = open('foo.txt') except IOError:     print('error') else:     with f:         print f.readlines()  
ptdraft import nib ptdraft 
p = subprocess.Popen( args=["script.sh" "-p" p_opt "-v" v_opt arg1 arg2] )  subprocess.Popen 
ctypes.c_char_Array_829400 .raw .value self.rgb_buffer_ptr ctypes.string_at(self.rgb_buffer_ptr self.buffer_size) 
CALL_FUNCTION* EXTENDED_ARG() &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.version_info sys.version_info(major=3 minor=7 micro=0 releaselevel='alpha' serial=2) &gt;&gt;&gt; def f(*args **kwargs): pass ... &gt;&gt;&gt; exec("f({})".format(' '.join(map(str range(256))))) &gt;&gt;&gt; exec("f({})".format(' '.join(map(str range(2 ** 16)))))  sys.maxsize *args **kwargs *args **kwargs sys.maxint &gt;&gt;&gt; def f(*args **kwargs): pass ... &gt;&gt;&gt; exec("f({})".format(' '.join(map(str range(256))))) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;string&gt;" line 1 SyntaxError: more than 255 arguments  CALL_FUNCTION 
print_all #!/usr/bin/env python  import subprocess import sys  phrase = "bar" if len(sys.argv) &gt; 1 and sys.argv[1] == 'print_all':     tee_args = ['tee' '/dev/tty'] else:     tee_args = ['tee']  p1 = subprocess.Popen(["./program"] stderr=subprocess.STDOUT stdout=subprocess.PIPE shell=False) p2 = subprocess.Popen(tee_args stdin=p1.stdout stdout=subprocess.PIPE shell=False) p3 = subprocess.Popen(["grep" phrase] stdin=p2.stdout stdout=subprocess.PIPE shell=False) p1.wait() p2.wait() p3.wait() p = str(p3.stdout.readlines()) print 'p is ' p  program #!/bin/sh  echo foo echo bar echo baz  
import Math  Calculate from Math import Calculate  from Math import *  
class ObservableDict( dict ):     def __init__( self *args **kw ):         self.observers= []         super( ObservableDict self ).__init__( *args **kw )     def observe( self observer ):         self.observers.append( observer )     def __setitem__( self key value ):         for o in self.observers:             o.notify( self key self[key] value )         super( ObservableDict self ).__setitem__( key value )     def update( self anotherDict ):         for k in anotherDict:             self[k]= anotherDict[k]  class Watcher( object ):     def notify( self observable key old new ):         print "Change to " observable "at" key  w= Watcher() a= ObservableDict( {'a':'hamburger' 'b':'fries' 'c':'coke'} ) a.observe( w ) b = {'b':'fries' 'c':'pepsi'} a.update( b )  
import fileinput for line in fileinput.input():     process(line)  
s == 'True'  s.lower() in ['true' '1' 't' 'y' 'yes' 'yeah' 'yup' 'certainly' 'uh-huh']  &gt;&gt;&gt; bool("foo") True &gt;&gt;&gt; bool("") False  False True 
import urllib urllib2 import time import sys  query = ' '.join(sys.argv)     # encode params as a list of 2-tuples params = ( ('from''ACC') ('to' 'P_REFSEQ_AC') ('format''tab') ('query' query)) # url encode them data = urllib.urlencode(params)     url = 'http://www.uniprot.org/mapping/'  # fetch the data try:     foo = urllib2.urlopen(url data) except urllib2.HttpError e:     if e.code == 503:         # blah blah get the value of the header...         wait_time = int(e.hdrs.get('Retry-after' 0))         print 'Sleeping %i seconds...' % (wait_time)         time.sleep(wait_time)         foo = urllib2.urlopen(url data)   # foo is a file-like object do with it what you will. foo.read()  
{"[12]": [(23)(17)]}  JSON.parse jQuery.each var myjson = JSON.parse('{"[12]": [[23][17]]}'); $.each(myjson function(keystrval){     var key = JSON.parse(keystr);     // do something with key and val });  {1: {2: [(23)(17)]}}  myjson[12] // doesn't work  myjson[1][2] // returns [[23][17]]  
&lt;a href="/comment/5/"&gt;Comment on me&lt;/a&gt;  initial def show_comment_form(request item_id):     form = MyCommentForm(initial={'item_drop_down':item_id})  item_id choices = ( (1 'Item 1')             (2 'Item 2') )  item_id &lt;select&gt; &lt;option value="1"&gt;Item 1&lt;/option&gt; 
disable_interspersed_args() #!/usr/bin/env python from optparse import OptionParser  parser = OptionParser() parser.disable_interspersed_args() parser.add_option("-v" action="store_true" dest="verbose") (options args) = parser.parse_args()  print "Options: %s args: %s" % (options args)  
dtype object In [1]: m = numpy.matrix([[1 2 3] [4 '5' 6]] dtype=numpy.object) In [2]: m Out[2]:  matrix([[1 2 3]         [4 5 6]] dtype=object) In [3]: m[1 1] Out[3]: '5' In [4]: m[1 2] Out[4]: 6  
copyWithZone copyWithZone __copy__ copyWithZone SceneView.py MainMenu.xib SceneView import SceneView main.py awakeFromNib SceneView.py self.renderer __init__ initWithFrame __dict__ drawRect_ def awakeFromNib(self):     print "Awake from nib"     self.renderer = gv.CoreRenderer()  
import itertools a = [['a''b'] ['c']] print(list(itertools.chain.from_iterable(a)))  
C_KEY_MAKER 
__init__.py cachekey = defrag_uri cached_value = self.cache.get(cachekey)  urlnorm 
try: ... except: ... run try/except while 
def setVenueIntroText(text):   query = db.GqlQuery("SELECT * FROM Venue")   for result in query:     result.intro_text = text     db.put(result)  
import types  def comp(source *args **kwargs):     """Compile the source string; takes the same arguments as builtin compile().     Modifies the resulting code object so that the original source can be     recovered with decomp()."""     c = compile(source *args **kwargs)     return types.CodeType(c.co_argcount c.co_nlocals c.co_stacksize          c.co_flags c.co_code c.co_consts + (source) c.co_names          c.co_varnames c.co_filename c.co_name c.co_firstlineno          c.co_lnotab c.co_freevars c.co_cellvars)  def decomp(code_object):     return code_object.co_consts[-1]  &gt;&gt;&gt; a = comp('2 * (3 + x)' '' 'eval') &gt;&gt;&gt; eval(a dict(x=3)) 12 &gt;&gt;&gt; decomp(a) '2 * (3 + x)'  
for forloop.counter 
cherrypy.config.update({'tools.sessions.name': "special_session_name"})  
import re  myString = "This is my tweet check it out http://tinyurl.com/blah"  r = re.compile(r"(http://[^ ]+)") print r.sub(r'&lt;a href="\1"&gt;\1&lt;/a&gt;' myString)  This is my tweet check it out &lt;a href="http://tinyurl.com/blah"&gt;http://tinyurl.com/blah&lt;/a&gt;  
class A :     def m1(self nameageaddress) :         print('Name --&gt;'name)         print('Age --&gt;'age)         print('Address --&gt;'address)  class A :     @staticmethod     def m1(nameageaddress) :         print('Name --&gt;'name)         print('Age --&gt;'age)         print('Address --&gt;'address)  
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm() top_level_url = "http://example.com/" password_mgr.add_password(None top_level_url 'user' 'password') handler = urllib2.HTTPBasicAuthHandler(password_mgr) opener = urllib2.build_opener(urllib2.HTTPHandler handler) request = urllib2.Request(url)  top_level_url 
import urllib  BASE_URL = 'http://foobar.com/?%s' print BASE_URL % urllib.urlencode({    'foo': 'bar'    })  lst = ['foo' 'bar' 'foo bar'] lst2 = []  for l in lst:     if ' ' in l:         lst2.append(repr(l))  
&amp;nbsp; {{ "hey there  world"|spacify }}  hey&amp;nbsp;there&amp;nbsp;&amp;nbsp;world from django.template import Library from django.template.defaultfilters import stringfilter from django.utils.html import conditional_escape from django.utils.safestring import mark_safe import re  register = Library()  @stringfilter def spacify(value autoescape=None):     if autoescape:     esc = conditional_escape     else:     esc = lambda x: x     return mark_safe(re.sub('\s' '&amp;'+'nbsp;' esc(value))) spacify.needs_autoescape = True register.filter(spacify)  
select_data = {"d": """strftime('%%m/%%d/%%Y' time_stamp)"""}  data = My_Model.objects.extra(select=select_data).values('d').annotate(Sum("numbers_data")).order_by()  
create_socket() create_socket() packet_socket() ETH_P_ALL   #!/usr/bin/python  import asyncore socket IN struct  proto=3 s = socket.socket(socket.AF_PACKET socket.SOCK_RAW socket.htons(3)) s.bind(("eth0"proto))  class packet_socket(asyncore.dispatcher):      def __init__(selfsock):         asyncore.dispatcher.__init__(selfsock)         #self.create_socket(socket.AF_PACKET socket.SOCK_RAWsocket.htons(3))         self.buffer = '0180C20034350012545900040060078910'         self.socket.setsockopt(socket.SOL_SOCKETIN.SO_BINDTODEVICEstruct.pack("%ds" % (len("eth0")+1) "eth0"))      def handle_close(self):         self.close()      def handle_connect(self):         pass      def handle_read(self):         print "handle_read() called"      dataaddr=self.recvfrom(1024)         print data         print addr      def readable(self):         print "Checking read flag"      return True      def writable(self):         return (len(self.buffer) > 0)      def handle_write(self):         print "Writing buffer data to the socket"      sent = self.sendto(self.buffer("eth0"0xFFFF))         self.buffer = self.buffer[sent:]  c = packet_socket(s)  asyncore.loop()    
from modules import controller ctrl = controller  from modules import controller ctrl = controller()  
from collections import defaultdict fq= defaultdict( int ) for w in words:     fq[w] += 1  
 class PPIterator(BaseRequestHandler):   def get(self):     query = Model.gql('ORDER BY __key__')     last_key_str = self.request.get('last')     if last_key_str:       last_key = db.Key(last_key_str)       query = Model.gql('WHERE __key__ &gt; :1 ORDER BY __key__' last_key)     entities = query.fetch(11)     new_last_key_str = None     if len(entities) == 11:       new_last_key_str = str(entities[9].key())     for e in entities:       e.put()     if new_last_key_str:       self.response.out.write(json.write(new_last_key_str))     else:       self.response.out.write(json.write('done'))  require 'net/http' require 'json' last=nil while last != 'done'   url = 'your_url'   path = '/your_path'   path += "?/last=#{last}" if last   last = Net::HTTP.get(urlpath)   puts last end  
class CItem(list):     def __eq__(self other):         return list.__eq__(self other) and self.__dict__ == other.__dict__  
save_instance() forms.models save_m2m commit=False 
from win32com.client import Dispatch  auto = Dispatch("AutoItX3.Control") auto.WinActivate("The window's title" "") auto.WinWaitActive("The window's title" "" 10)  auto.Send("The input")  
class BuildProcess(wx.Process):      def __init__(self cmd notify=None):         wx.Process.__init__(self notify)         self.Redirect()         self.cmd = cmd         self.pid = None         self.timer = wx.Timer(self)         self.Bind(wx.EVT_TIMER self.on_timer)      def start(self):         wx.PostEvent(self BuildEvent(EVT_BUILD_STARTED self))         self.pid = wx.Execute(self.cmd wx.EXEC_ASYNC self)         self.timer.Start(100)      def on_timer(self evt):         stream = self.GetInputStream()         if stream.CanRead():             text = stream.read()             wx.PostEvent(self BuildEvent(EVT_BUILD_UPDATE self data=text))       def OnTerminate(self *args **kwargs):         print "terminating..."         stream = self.GetInputStream()         if stream.CanRead():             text = stream.read()             wx.PostEvent(self BuildEvent(EVT_BUILD_UPDATE self data=text))         if self.timer:             self.timer.Stop()         wx.PostEvent(self BuildEvent(EVT_BUILD_FINISHED self))  
[main_list[x] for x in indexes]  
l = list(str) l[i] = 'e' str = ''.join(l)  
class A(object):     def method(self):         return "foo"  try:     import c_ext     import types     A.method = types.MethodType(c_ext.optimized_method None A) except ImportError:     pass  
Python 3.0 (r30:67507 Dec  3 2008 20:14:27) [MSC v.1500 32 bit (Intel)] on win32 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import timeit &gt;&gt;&gt; timeit.Timer('s.append("something")' 's = []').timeit() 0.20177424499999999 &gt;&gt;&gt; timeit.Timer('s += ["something"]' 's = []').timeit() 0.41192320500000079  Python 2.5.1 (r251:54863 Apr 18 2007 08:51:08) [MSC v.1310 32 bit (Intel)] on win32 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import timeit &gt;&gt;&gt; timeit.Timer('s.append("something")' 's = []').timeit() 0.23079359499999999 &gt;&gt;&gt; timeit.Timer('s += ["something"]' 's = []').timeit() 0.44208112500000141  append += append LOAD_ATTR CALL_FUNCTION BUILD_LIST BUILD_LIST LOAD_ATTR CALL_FUNCTION &gt;&gt;&gt; import dis &gt;&gt;&gt; dis.dis(compile("s = []; s.append('spam')" '' 'exec'))   1           0 BUILD_LIST               0               3 STORE_NAME               0 (s)               6 LOAD_NAME                0 (s)               9 LOAD_ATTR                1 (append)              12 LOAD_CONST               0 ('spam')              15 CALL_FUNCTION            1              18 POP_TOP              19 LOAD_CONST               1 (None)              22 RETURN_VALUE &gt;&gt;&gt; dis.dis(compile("s = []; s += ['spam']" '' 'exec'))   1           0 BUILD_LIST               0               3 STORE_NAME               0 (s)               6 LOAD_NAME                0 (s)               9 LOAD_CONST               0 ('spam')              12 BUILD_LIST               1              15 INPLACE_ADD              16 STORE_NAME               0 (s)              19 LOAD_CONST               1 (None)              22 RETURN_VALUE  LOAD_ATTR &gt;&gt;&gt; timeit.Timer('a("something")' 's = []; a = s.append').timeit() 0.15924410999923566  
 &gt;&gt;&gt; print u'exámple'.upper()  EXÁMPLE  
__repr__ __str__ __repr__ def __str__(self):     ... def __repr__(self):     return self.__str__()  
_winreg.ExpandEnvironmentStrings os.path.expandvars import re os  def expandEnvironmentStrings(s):     r= re.compile('%([^%]+)%')     return r.sub(lambda m: os.environ.get(m.group(1) m.group(0)) s)  
del password mail.login password 
items = ["stack" "over" "flow"] map = { }  for item in items:     def new_command():         print(item)      map[item] = new_command  map["stack"]() map["over"]() map["flow"]()  flow flow flow  for item item new_command() item for item in items:     def item_command(name):         def new_command():             print(name)         return new_command      map[item] = item_command(item)  stack over flow  
__iadd__ add 
try:      from itertools import combinations  except ImportError:      def combinations(l n):         if n != 2: raise Exception('This placeholder only good for n=2')         for i in range(len(l)):             for j in range(i+1 len(l)):                 yield l[i] l[j]   coords_list = [(00) (34) (68)]  def distance(p1 p2):     return ( ( p2[0]-p1[0] ) ** 2 + ( p2[1]-p1[1] )**2 ) ** 0.5  largest_distance (p1 p2) = max([      (distance(p1p2) (p1 p2)) for (p1p2) in combinations(coords_list 2)      ])   print largest_distance p1 p2  
python setup.py bdist_msi  
coding[=:]\s*([-\w.]+) # -*- coding: &lt;encoding-name&gt; -*-  # vim:fileencoding=&lt;encoding-name&gt;  coding 
test_variable = None  def my_func():     print test_variable  &gt;&gt;&gt; import my_test &gt;&gt;&gt; eval('my_test.my_func()') None &gt;&gt;&gt; my_test.test_variable = 'hello' &gt;&gt;&gt; my_test.test_variable 'hello' &gt;&gt;&gt; eval('my_test.my_func()') hello  
instanceof if (v['content'] instanceof java.util.map)  
env.Command ('document.tex' '' 'python table_generator.py') env.PDF ('document.pdf' 'document.tex')  
C:\Python30\python.exe -u "%" "%"  "C:\Python30\python.exe" -u "%s"   
HTMLParser &gt;&gt;&gt; import HTMLParser &gt;&gt;&gt; pars = HTMLParser.HTMLParser() &gt;&gt;&gt; pars.unescape('&amp;copy; &amp;euro;') u'\xa9 \u20ac' &gt;&gt;&gt; print _ © €  HTMLParser &gt;&gt;&gt; from html.parser import HTMLParser &gt;&gt;&gt; pars = HTMLParser() &gt;&gt;&gt; pars.unescape('&amp;copy; &amp;euro;') © €  
try:     doSomething() except:      pass  try:     doSomething() except Exception:      pass  KeyboardInterrupt SystemExit exceptions.BaseException exceptions.Exception try 
destination = Vector2(*event.pos) – Vector2(*sprite.get_size())/2.  – - - destination = Vector2(*event.pos) - Vector2(*sprite.get_size())/2.  
def __unicode__(self):     return self.user.username  User.__unicode__() str(self.user.username)  
for a in range(10):   time.sleep(1)   barra.setValue(a)  barra.hide()  
def contact_create(request):     if request.method == 'POST':         form = ContactForm(request.POST)         if form.is_valid():             new_contact = form.save()             return HttpResponseRedirect(reverse(contact_details args=(new_contact.pk)))     else:         form = ContactForm()  
zfill() In [3]: str(1).zfill(2) Out[3]: '01'  
&gt;&gt;&gt; x = [('a_key' 'a value') ('another_key' 'another value')] &gt;&gt;&gt; y = dict(x) &gt;&gt;&gt; y['a_key'] 'a value' &gt;&gt;&gt; y['another_key'] 'another value'  
isinstance() if isinstance(n unicode):     # do this elif isinstance(n Node):     # do that ...  
class X(object): pass  classobj= globals()[self.__class__.__name__] print classobj.var  locals() eval() self.__class__ classobj self.__class__.var print self.var  
* opt1 = OptionMenu(root var1 *optionlist)  
class MyClass(object):     @staticmethod     def the_static_method(x):         print(x)  MyClass.the_static_method(2)  # outputs 2  staticmethod class MyClass(object):     def the_static_method(x):         print(x)     the_static_method = staticmethod(the_static_method)  MyClass.the_static_method(2)  # outputs 2  @staticmethod staticmethod class C:     @staticmethod     def f(arg1 arg2 ...): ...  C.f() C().f() classmethod() 
try:     float(element) except ValueError:     print "Not a float"  import re if re.match(r'^-?\d+(?:\.\d+)?$' element) is None:     print "Not float"  
 lambda :logging.debug(name)   lambda name=name: logging.debug(name)  
zipsafe PYTHONPATH 
class DescDict(dict):     def __init__(self *args **kwargs):         self.descs = {}         dict.__init__(self)      def __getitem__(self name):         return dict.__getitem__(self name)      def __setitem__(self name tup):         value description = tup         self.descs[name] = description         dict.__setitem__(self name value)      def get_desc(self name):         return self.descs[name]  my_dict = DescDict() my_dict["foo"] = (0.5 "A foo var")  # just use a tuple if you only have 2 vals print my_dict["foo"] + 15            # prints 15.5 print my_dict.get_desc("foo")        # prints 'A foo var'  
self.fields['author'].queryset = choices  
class C(object):     my_var = 'a'      @classmethod     def t(cls):         print cls.my_var  C.t()  
import signal signal.signal(signal.SIGINT signal.SIG_IGN)  import subprocess cat = subprocess.Popen(['cat']) subprocess.call(['gdb' '--pid=%d' % cat.pid])  import subprocess cat = subprocess.Popen(['cat'])  import signal os signal.signal(signal.SIGINT               lambda signum frame: os.kill(cat.pid signum))  subprocess.call(['gdb' '--pid=%d' % cat.pid])  
if 4 &lt;= day &lt;= 20 or 24 &lt;= day &lt;= 30:     suffix = "th" else:     suffix = ["st" "nd" "rd"][day % 10 - 1]  
class ThingForm(models.ModelForm):   class Meta:     model = Thing    def __init__(self *args **kwargs):     super(ThingForm self).__init__(*args **kwargs)     self.fields['verb'].empty_label = None  class ThingForm(models.ModelForm):   verb = ModelChoiceField(Verb.objects.all() empty_label=None)    class Meta:     model = Thing  
path = str(self.pathBox.displayText())  xmlFile = str(self.xmlFileBox.displayText())  outFileName = str(self.outfileNameBox.displayText())  displayText : const QString  text : QString  
EMAIL_PORT EMAIL_USE_TLS EMAIL_PORT = 25 EMAIL_USE_TLS = False  
import myapplication  a= myapplication.Application()  a= myapplication.Application(basedir= '/opt/myapp' site= 'www.example.com' debug= False)  # myapplication/__init__.py  class Application(object):     def __init__(self dbfactory debug):         # ...         self.mailer= self.Mailer(self)         self.webservice= self.Webservice(self)         # ...  import myapplication.mailer myapplication.webservice   # myapplication/mailer.py  import myapplication  class Mailer(object):     def __init__(self owner):         self.owner= owner      def send(self message recipients):         # ...  myapplication.Application.Mailer= Mailer  import myapplication  class MockApplication(myapplication.Application):     class Mailer(myapplication.Application.Mailer):         def send(self message recipients):             self.owner.log('Mail send called (not actually sent)')             return True  
xgettext --files-from=POTFILES.in --directory=.. --output=messages.pot  msgmerge --update --no-fuzzy-matching --backup=off da.po messages.pot  msgfmt nl.po --output-file nl.mo  
def __init__(self **kwargs):     self.__dict__.update( kwargs )  
(?P&lt;name&gt;...) MatchOjbect.lastgroup 
from functools import wraps  def makebold(fn):     @wraps(fn)     def wrapped(*args **kwargs):         return "&lt;b&gt;" + fn(*args **kwargs) + "&lt;/b&gt;"     return wrapped  def makeitalic(fn):     @wraps(fn)     def wrapped(*args **kwargs):         return "&lt;i&gt;" + fn(*args **kwargs) + "&lt;/i&gt;"     return wrapped  @makebold @makeitalic def hello():     return "hello world"  @makebold @makeitalic def log(s):     return s  print hello()        # returns "&lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;" print hello.__name__ # with functools.wraps() this returns "hello" print log('hello')   # returns "&lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;"  
class IterRegistry(type):     def __iter__(cls):         return iter(cls._registry)  class Person(object):     __metaclass__ = IterRegistry     _registry = []      def __init__(self name):         self._registry.append(self)         self.name = name  __registry _registry &gt;&gt;&gt; p = Person('John') &gt;&gt;&gt; p2 = Person('Mary') &gt;&gt;&gt; for personobject in Person: ...     print personobject ... &lt;person.Person object at 0x70410&gt; &lt;person.Person object at 0x70250&gt;  
&gt;&gt;&gt; L1 = [234] &gt;&gt;&gt; L2 = [12] &gt;&gt;&gt; [i for i in L1 if i in L2] [2]   &gt;&gt;&gt; S1 = set(L1) &gt;&gt;&gt; S2 = set(L2) &gt;&gt;&gt; S1.intersection(S2) set([2])  
def since_date_created(self):     '''Compute the time since creation time based on self.date_created.'''  {% for msg in messagesSQL %}     {{ msg.since_date_created }} {% endfor %}  
figure close 
for i in x[:]:     x.remove(i)  [:] x x 
class HandlerCase1(object):     def handle_stuff(self *args **kwargs):         print "Handling case 1"   class HandlerCase2(object):     def handle_stuff(self *args **kwargs):         print "Handling case 2"   if __name__ == "__main__":     handlers = []     handlers.append(HandlerCase1())     handlers.append(HandlerCase2())     for h in handlers:         h.handle_stuff()  class Handler(object):     def common_function(self):         print "Common function"   class HandlerCase1(Handler):     def handle_stuff(self *args **kwargs):         print "Handling case 1"   class HandlerCase2(Handler):     def handle_stuff(self *args **kwargs):         print "Handling case 2"   if __name__ == "__main__":     handlers = []     handlers.append(HandlerCase1())     handlers.append(HandlerCase2())     for h in handlers:         h.handle_stuff()         h.common_function()  
ab = ac = [None None]  ab = [None None] ac = [None None]  
__setitem__ __setslice__ 
tiny_impdef.exe .def 
while True:   stuff()   if fail_condition:     break  stuff() while not fail_condition:   stuff()  for i in l:   print i print "done"  for s in l:    while True:      stuff()      # use a "break" instead of s = i.next()  for s in some_list:   while True:     if state is STATE_CODE:       if "//" in s:         tokens.add( TOKEN_COMMENT s.split( "//" )[1] )         state = STATE_COMMENT       else :         tokens.add( TOKEN_CODE s )     if state is STATE_COMMENT:       if "//" in s:         tokens.append( TOKEN_COMMENT s.split( "//" )[1] )         break # get next s       else:         state = STATE_CODE         # re-evaluate same line         # continues automatically  
english2german = open("english2german.txt") englist = [] gerlist = []  for line in english2german:     (e g) = line.split()     englist.append(e)     gerlist.append(g)  englist[i:] gerlist[0:] = "alfa" gerlist = ['a' 'l' 'f' 'a'] 
text.split()  words words.append(word)  word.append(words)  
class PermissionList(models.Model):     setter = models.ManyToManyField(User)     email = models.EmailField(unique=True) #don't want conflicting results     permission = models.BooleanField()  # whitelist PermissionList.objects.filter(permission=True) # blacklist PermissionList.objects.filter(permission=False)  class PermissionList(...):     ...     @classmethod     def is_on_whitelist(email):         return PermissionList.objects.filter(email=email permission=True).count() &gt; 0      @classmethod     def is_on_blacklist(email):         return PermissionList.objects.filter(email=email permission=False).count() &gt; 0      @classmethod     def has_permission(email):         if PermissionList.is_on_whitelist(email):             return True         if PermissionList.is_on_blacklist(email):             return False         return None  
import bar.py i bar.py i foo.py bar.i foo.i 10 foo.i foo.fi() i foo i i 
functions_to_call = ["func_1" "func_2" "func_3"]  for f in functions_to_call:     eval(f+'()')  
(?iLmsux) re.I re.L re.M re.S re.U re.X compile() (?x) 
#. Translators: # Blah blah blah _("String")  xgettext --language=Python --keyword=_ --add-comments=. --output=test.pot *.py  
class TABLE(models.Model):     id = models.AutoField(primary_key=True)     parent = models.ForeignKey('self')  
DELIMITER DELIMITER DELIMITER CREATE FUNCTION CREATE FUNCTION trivial_func (radius float)      RETURNS FLOAT      BEGIN     IF radius &gt; 1 THEN         RETURN 0.0; &lt;-- does this semicolon terminate RETURN or CREATE FUNCTION?     ELSE         RETURN 1.0;     END IF; END  CREATE FUNCTION DELIMITER 
&gt;&gt;&gt; from xml.dom?import minidom &gt;&gt;&gt; document= minidom.parseString('&lt;a/&gt;') &gt;&gt;&gt; document.documentElement.setAttribute('a' 'a\r\nb') &gt;&gt;&gt; document.toxml() u'&lt;?xml version="1.0" ?&gt;&lt;a a="a\r\nb"/&gt;'  &gt;&gt;&gt; import pxdom &gt;&gt;&gt; document= pxdom.parseString('&lt;a/&gt;') &gt;&gt;&gt; document.documentElement.setAttribute('a' 'a\r\nb') &gt;&gt;&gt; document.pxdomContent u'&lt;?xml version="1.0" ?&gt;&lt;a a="a&amp;#13;&amp;#10;b"/&gt;'  
py import functiondoc autoparts for line in list_of_parts:     k v = line.split()     list1.append(k)     list2.append(v)  # k and v are now the last line split up *not* the list you've been constructing. # The following incorrect line: dictionary = dict(zip(k v)) # ...should be: dictionary = dict(zip(list1 list2)) # ..although you shouldn't use zip for this:  zip for line in list_of_parts:     ... dictionary = dict(zip(k v))  def autoparts():     # open() returns a file object not the contents of the file     # you need to use .read() or .readlines() to get the actual text     input_file = open('list_of_parts.txt' 'r')     all_lines = input_file.read_lines() # reads files as a list (one index per line)      mydict = {} # initialise a empty dictionary      for line in list_of_parts:         k v = line.split()         mydict[k] = v      return mydict # you have to explicitly return stuff or it returns None  
entity_two.__setattr(some_variable some_value) #where some_variable is populated by user at runtime :)  
self.__myvalue = "" __init__ myvalue conf = Config() conf.myvalue("Hello") print conf.myvalue()  # prints Hello conf2 = Config() print conf.myvalue()  # prints nothing print conf2.myvalue() # prints nothing  self.__myvalue myvalue() __init__ myvalue class Config(object):     """     Borg singleton config object     """     _we_are_one = {}      def __init__(self):         #implement the borg pattern (we are one)         self.__dict__ = self._we_are_one      def set_myvalue(self val):         self._myvalue = val      def get_myvalue(self):         return getattr(self '_myvalue' None)      myvalue = property(get_myvalue set_myvalue)  c = Config() print c.myvalue # prints None c.myvalue = 5 print c.myvalue # prints 5 c2 = Config() print c2.myvalue #prints 5  
output output = subprocess.Popen(["mycmd" "myarg"] stdout=subprocess.PIPE).communicate()[0]  cmd &gt;&gt;&gt; p1 = subprocess.Popen(["cmd" "/C" "date"]stdout=subprocess.PIPE) &gt;&gt;&gt; p1.communicate()[0] 'The current date is: Tue 04/14/2009 \r\nEnter the new date: (mm-dd-yy) ' &gt;&gt;&gt;   
y x = 35 570 for line in attText.splitlines():     draw.text( (xy) line ... )     y = y + attSpacing  
gtk.Builder self.uifile = "sdm.ui" self.wTree = gtk.Builder() self.wTree.add_from_file(self.uifile)  get_widget get_object self.window = self.wTree.get_object("MainWindow") if self.window:     self.window.connect("destroy" gtk.main_quit)  connect_signals dic = { "on_button1_clicked" : self.button1_clicked      "on_MainWindow_destroy" : gtk.main_quit} self.wTree.connect_signals(dic)  connect_signals 
Paragraph &lt;para&gt; story.append(Paragraph(text TEXT_STYLE bulletText='-'))  &lt;bullet&gt; Paragraph story.append(Paragraph('&lt;bullet&gt;The rain in spain&lt;/bullet&gt;' TEXT_STYLE))  
class Jean(db.Model):     sex = db.StringProperty(required=True choices=set(["male" "female"]) default="male")  
topics = forms.ModelMultipleChoiceField(queryset=BlogTopic.objects.all())  
# this will result in a="length" and b="25" a b = "length=25".partition("=")[::2]  # this will result in a="DEFAULT_LENGTH" and b="" a b = "DEFAULT_LENGTH".partition("=")[::2]  
# -*- Mode: Python -*- # vi:si:et:sw=4:sts=4:ts=4  p = "Plural-Forms: nplurals=3; plural=n%10==1 &amp;&amp; n%100!=11 ? 0 : n%10&gt;=2 &amp;&amp; n%10&lt;=4 &amp;&amp; (n%100&lt;10 || n%100&gt;=20) ? 1 : 2;\n"  # extract rule import re matcher = re.compile('plural=(.*);') match = matcher.search(p) rule = match.expand("\\1")  # convert rule to python syntax oldrule = None while oldrule != rule:     oldrule = rule     rule = re.sub('(.*)\?(.*):(.*)' r'(\1) and (\2) or (\3)' oldrule)  rule = re.sub('&amp;&amp;' 'and' rule) rule = re.sub('\|\|' 'or' rule)  for n in range(40):     code = "n = %d" % n     print n eval(rule)  
def check_data(data):     s = "\n".join(data);     for k in keywords:         if k in s:             return True      return False  
&gt;&gt;&gt; from guppy import hpy &gt;&gt;&gt; hp = hpy() &gt;&gt;&gt; hp.setrelheap() # ignore all existing objects &gt;&gt;&gt; d = {} &gt;&gt;&gt; d['key'] = [ (1131 3.11e18) (9813 2.48e19) (4991 9.11e18) ] &gt;&gt;&gt; hp.heap()  Partition of a set of 24 objects. Total size = 1464 bytes.  Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)      0      2   8      676  46       676  46 types.FrameType      1      6  25      220  15       896  61 str      2      6  25      184  13      1080  74 tuple  ...  
# root/django/trunk/django/contrib/auth/models.py # snip def get_hexdigest(algorithm salt raw_password):     """     Returns a string of the hexdigest of the given plaintext password and salt     using the given algorithm ('md5' 'sha1' or 'crypt').     """     raw_password salt = smart_str(raw_password) smart_str(salt)     if algorithm == 'crypt':         try:             import crypt         except ImportError:             raise ValueError('"crypt" password algorithm not supported in this environment')         return crypt.crypt(raw_password salt)      if algorithm == 'md5':         return md5_constructor(salt + raw_password).hexdigest()     elif algorithm == 'sha1':         return sha_constructor(salt + raw_password).hexdigest()     raise ValueError("Got unknown password algorithm type in password.")  # Also from root/django/trunk/django/contrib/auth/models.py def check_password(raw_password enc_password):     """     Returns a boolean of whether the raw_password was correct. Handles     encryption formats behind the scenes.     """     algo salt hsh = enc_password.split('$')     return hsh == get_hexdigest(algo salt raw_password)  
def autoparts():   parts_dict = {}   list_of_parts = open('list_of_parts.txt' 'r')   for line in list_of_parts:         k v = line.split()         parts_dict[k] = v   return parts_dict  my_auto_parts = autoparts()  print(my_auto_parts['engine'])   
print myObject.myVar if hasattr(myObject 'myVar') else 'not defined'  hasattr() x in y.__dict__ hasattr() __getattr__ y.__dict__ y 
os.path.join() sys.path.insert(0 os.path.abspath(os.path.join(__file__ 'modules')))  import modules.commands.CommandSomething  import CommandSomething  __all__= ['ThisCommand' 'ThatCommand' 'TheOtherCommand']  
set.remove set.remove mi_set 
A = [123456] B = A[:len(A)//2] C = A[len(A)//2:]  def split_list(a_list):     half = len(a_list)//2     return a_list[:half] a_list[half:]  A = [123456] B C = split_list(A)  
IF exists(variable) AND variable.doSomething()     THEN ...  
&gt;&gt;&gt; class TestGetitem(object): ...   def __getitem__(self item): ...     print type(item) item ...  &gt;&gt;&gt; t = TestGetitem()  &gt;&gt;&gt; t[1] &lt;type 'int'&gt; 1 &gt;&gt;&gt; t[3-2] &lt;type 'int'&gt; 1 &gt;&gt;&gt; t['test'] &lt;type 'str'&gt; test &gt;&gt;&gt; t[t] &lt;class '__main__.TestGetitem'&gt; &lt;__main__.TestGetitem object at 0xb7e9bc4c&gt;  &gt;&gt;&gt; t[1:2] &lt;type 'slice'&gt; slice(1 2 None) &gt;&gt;&gt; t[1:'this':t] &lt;type 'slice'&gt; slice(1 'this' &lt;__main__.TestGetitem object at 0xb7e9bc4c&gt;)  &gt;&gt;&gt; t[...] &lt;type 'ellipsis'&gt; Ellipsis  &gt;&gt;&gt; t[...1:] &lt;type 'tuple'&gt; (Ellipsis slice(1 None None))  
s=unicodestring.replace(u'\xa0'u'')  
from io import StringIO from html.parser import HTMLParser  class MLStripper(HTMLParser):     def __init__(self):         super().__init__()         self.reset()         self.strict = False         self.convert_charrefs= True         self.text = StringIO()     def handle_data(self d):         self.text.write(d)     def get_data(self):         return self.text.getvalue()  def strip_tags(html):     s = MLStripper()     s.feed(html)     return s.get_data()  from HTMLParser import HTMLParser from StringIO import StringIO  class MLStripper(HTMLParser):     def __init__(self):         self.reset()         self.text = StringIO()     def handle_data(self d):         self.text.write(d)     def get_data(self):         return self.text.getvalue()  def strip_tags(html):     s = MLStripper()     s.feed(html)     return s.get_data()  
__metaclass__ returns class CheckedReturnType(object):     def __init__(self meth rtype):         self.meth = meth         self.rtype = rtype  def returns(rtype):     def _inner(f):         return CheckedReturnType(f rtype)     return _inner  class BaseInspector(type):     def __new__(mcs name bases dct):         for obj_name obj in dct.iteritems():             if isinstance(obj CheckedReturnType):                 # do your wrapping &amp; checking here base classes are in bases                 # reassign to dct         return type.__new__(mcs name bases dct)  class A(object):     __metaclass__ = BaseInspector     @returns(int)     def compute(self value):         return value * 3  
class FileInfo(dict):     """store file metadata"""     def __init__(self filename=None):         super(FileInfo self).__init__()         self["name"] = filename  dict list tuple super 
&gt;&gt;&gt; l = [ 1 2 3 4 ] &gt;&gt;&gt; dict( ( v v**2 ) for v in l ) {1: 1 2: 4 3: 9 4: 16}  { v : v**2 for v in l }  
for file in os.listdir(dir):     f = open(dir+'\\'+file'r')     y = f.readlines()     for line in y:         pass     f.close()  for file in os.listdir(dir):     y = open(dir+'\\'+file'r')     for line in y:         pass     y.close()  for file in os.listdir(dir):     with open(dir+'\\'+file'r') as y:         for line in y:             pass  with os.path 
connnection_info = LIVE_CONNECTION 
chr(0xe2) . chr(0x80) . chr(0x98)  '\xe2\x80\x98'  def defang(string):     return string.decode('utf-8').encode('ascii' 'xmlcharrefreplace')  ‘ &amp;#8220; import re from htmlentitydefs import codepoint2name  def convert_match_to_named(match):     num = int(match.group(1))     if num in codepoint2name:         return "&amp;%s;" % codepoint2name[num]     else:         return match.group(0)  def defang_named(string):     return re.sub('&amp;#(\d+);' convert_match_to_named defang(string))  &gt;&gt;&gt; defang_named('\xe2\x80\x9cHello world!\xe2\x80\x9d') '&amp;ldquo;Hello world!&amp;rdquo;'  # in Python it's common to operate a line at a time on a file instead of # reading the entire thing into memory  my_file = open("test100.html") for line in my_file:     print defang_named(line) my_file.close()  
d* ([ef]d\*b|d\*)*&lt;/pre&gt;&lt;/code&gt; and &lt;code&gt;&lt;pre&gt;([ef]|([gh]d\*(ad\*[gh]d)\*b))d\*b  | 
reload(three)  
cron: - description: job that runs every minute   url: /cronjobs/job1   schedule: every minute  
editable False default b = models.CharField(max_length=7 default='0000000' editable=False)  id 
static IEnumerable&lt;T[]&gt; Permute&lt;T&gt;(this T[] xs params T[] pre) {     if (xs.Length == 0) yield return pre;     for (int i = 0; i &lt; xs.Length; i++) {         foreach (T[] y in Permute(xs.Take(i).Union(xs.Skip(i+1)).ToArray() pre.Union(new[] { xs[i] }).ToArray())) {             yield return y;         }     } }  int[] values = {123}; foreach(int[] perm in values.Permute()) {    WriteArray(perm); }  void WriteArray&lt;T&gt;(T[] values) {     StringBuilder sb = new StringBuilder();     foreach(T value in values) {         sb.Append(value).Append(" ");     }     Console.WriteLine(sb); }  yield return + 
from packagename import Session 
zip() t = ('a' 'b' 'c' 'd' 'e' 'f' 'g' 'h') zip(t[::2] t[1::2])  
exportselection b1 = Listbox(exportselection=0) for item in families:     b1.insert(END item)  b2 = Listbox(exportselection=0) for item in fonts:     b2.insert(END item)  b3 = Listbox(exportselection=0) for item in styles:     b3.insert(END item)  exportselection 
. re.DOTALL re.search('&lt;!-- begin staff --&gt;.*&lt;!-- end staff --&gt;' text re.DOTALL)  re.search('&lt;!-- begin staff --&gt;.*?&lt;!-- end staff --&gt;' text re.DOTALL)  
def build_tree(nodes):     # create empty tree to fill     tree = {}      # fill in tree starting with roots (those with no parent)     build_tree_recursive(tree None nodes)      return tree  def build_tree_recursive(tree parent nodes):     # find children     children  = [n for n in nodes if n.parent == parent]      # build a subtree for each child     for child in children:         # start new subtree         tree[child.name] = {}          # call recursively to build a subtree for current node         build_tree_recursive(tree[child.name] child nodes)  
re.findall findall(pattern string flags=0)     Return a list of all non-overlapping matches in the string.      If one or more groups are present in the pattern return a     list of groups; this will be a list of tuples if the pattern     has more than one group.      Empty matches are included in the result.  (tickets\.) findall r'(\w+@(tickets\.)?company\.com)' r'\w+@(?:tickets\.)?company\.com'  findall 
sed '/regexp/i\  $H x'  
  'payment_form_cls': 'payment_form_cls'  # form class to use for payment     'payment_form_cls': MyValidationForm  # form class to use for payment  
re.search(r"{(?:\\fad|fade)\((\d{14})(\d{14})\)}" text).groups() {} 
import sys sys.path.append('/home/myuser/lib/python')  
beginPosit = tempans.index('007 A000000 Y') endPosit = min([i for i item in enumerate(tempans) if '008 ' in item])  for line in tempans[beginPosit:endPosit]:     process each line  from itertools import takewhile beginPosit = tempans.index('007 A000000 Y') new=takewhile(lambda x: '007 ' in x tempans[beginPosit:])  
visits.iteritems() sorted 
breakindent 
import os import cherrypy  PATH = os.path.abspath(os.path.dirname(__file__)) class Root(object): pass  cherrypy.tree.mount(Root() '/' config={         '/': {                 'tools.staticdir.on': True                 'tools.staticdir.dir': PATH                 'tools.staticdir.index': 'index.html'             }     })  cherrypy.quickstart()  
.all() 
def posix_sysctl_long(name):     _mem = c_uint64(0)     _def = sysctl_names[name]     _arr = c_int * len(_def)     _name = _arr()     for i v in enumerate(_def):         _name[i] = c_int(v)     _sz = c_size_t(sizeof(_mem))     result = libc.sysctl(_name len(_def) byref(_mem) byref(_sz) None c_size_t(0))     if result != 0:         raise Exception('sysctl returned with error %s' % result)     return _mem.value  
thumbs . class ThumbnailGenerator( object ):  __ "%s%s%s" % (self.image_path os.sep thumb_path) os.path.join 
for y in range(0 len(x) 2):     print "%s%s" % (x[y] x[y+1])  len(x) % 2 == 0; 
import csv r = csv.reader(...) lines = [line for line in r] print len(lines) #number of lines for odd in lines[1::2]: print odd # print odd lines  
__nonzero__() __bool__() 
reason = form.cleaned_data['reason'] reason = dict(form.fields['reason'].choices)[reason]  
.strip() &gt;&gt;&gt; ' Hello '.strip() 'Hello' &gt;&gt;&gt; ' Hello'.strip() 'Hello' &gt;&gt;&gt; 'Bob has a cat'.strip() 'Bob has a cat' &gt;&gt;&gt; '   Hello   '.strip()  # ALL consecutive spaces at both ends removed 'Hello'  def strip_one_space(s):     if s.endswith(" "): s = s[:-1]     if s.startswith(" "): s = s[1:]     return s  &gt;&gt;&gt; strip_one_space("   Hello ") '  Hello'  str.strip() strip &gt;&gt;&gt; "  Hello\n".strip(" ") 'Hello\n'  
addheaders() opener opener.addheaders = [('User-agent' 'Mozilla/5.0')]  
{% if error_messages %}     &lt;div class="error"&gt;         {% ifequal error_messages|length 1 %}             error_messages[0]         {% else %}             Please fix the following errors:             &lt;div class="erroritem"&gt;             {% for key value in error_messages.items %}                 &lt;br&gt;{{ value }}             {% endfor %}             &lt;/div&gt;         {% endifequal %}     &lt;/div&gt; {% endif %}  
ft2build.h -I 
doSkip .skip() .work() doSkip doSkip doSkip 
findall search reg = re.compile("&lt;tr&gt;&lt;td width=60 bgcolor='#ffffcc'&gt;&lt;b&gt;([^&lt;]*)&lt;/b&gt;&lt;/td&gt;&lt;td align=center width=80&gt;") value = reg.findall(htmlbody) print 'Found %i match(es)' % len(value)  
def setVenueImage(img):   img = images.Image(img.read())   x y = photo_utils.getIdealResolution(img.width img.height)   img.resize(x y)   img_bytes = img.execute_transforms() # Converts to PNG   venue_obj = getVenueSingletonObject()   if venue_obj is None:       venue_obj = Venue(images = [img_bytes])   else:       venue_obj.images.append(img_bytes)   db.put(venue_obj)  
def map_params(func):     def decorated(request):         return func(request **request.GET)     return decorated  @map_params def some_view(request param1 param2):     ...  
def items(self):     for i obj in enumerate(Blog.objects.order_by('-pubDate')):        obj.priority = i &lt; 3 and 1 or 0.5        yield obj  def priority(self obj):     return obj.priority  
JSON &gt;&gt;&gt; string = "{ \"Dimensions\" : \" 12.0\\\" x 9.6\\\" \" }" &gt;&gt;&gt; print string { "Dimensions" : " 12.0\" x 9.6\" " }  from json import JSONEncoder encoder = JSONEncoder() string = encoder.encode({ "Dimensions":" 12.0\" x 9.6\" " })  &gt;&gt;&gt; print string {"Dimensions": " 12.0\" x 9.6\" "}  
alternatives = ("// @in " "// @out " "// @ret ") if any(a in sTxT for a in alternatives):     print "found"  if all(a in sTxT for a in alternatives):    print "found all"  any() all() 
hasattr() if hasattr(socket 'fromfd'):     pass else:     pass  
import site site.addsitedir('/media/server/www/webroot/')  
choices 
dict((k.lower() v.lower()) for kv in {'My Key':'My Value'}.iteritems())  dict((k.lower() v) for kv in {'My Key':'My Value'}.iteritems())  
sys.path .htaccess .htaccess 
mapping = { 'A':'1' 'B':'2' 'C':'3' 'D':'4' 'E':'5'} for k v in mapping.iteritems():     my_string = my_string.replace(k v)  mapping = [ ('A' '1') ('B' '2') ('C' '3') ('D' '4') ('E' '5') ] for k v in mapping:     my_string = my_string.replace(k v)  
(255 255 255 0) [255 255 255 0] img.putdata(newData) from PIL import Image  img = Image.open('img.png') img = img.convert("RGBA") datas = img.getdata()  newData = [] for item in datas:     if item[0] == 255 and item[1] == 255 and item[2] == 255:         newData.append((255 255 255 0))     else:         newData.append(item)  img.putdata(newData) img.save("img2.png" "PNG")  
timedelta dateutil.relativedelta datetime n from dateutil.relativedelta import relativedelta  def yearsago(years from_date=None):     if from_date is None:         from_date = datetime.now()     return from_date - relativedelta(years=years)  from datetime import datetime def yearsago(years from_date=None):     if from_date is None:         from_date = datetime.now()     try:         return from_date.replace(year=from_date.year - years)     except ValueError:         # Must be 2/29!         assert from_date.month == 2 and from_date.day == 29 # can be removed         return from_date.replace(month=2 day=28                                  year=from_date.year-years)  return     return from_date.replace(month=3 day=1                              year=from_date.year-years)  yearsago def num_years(begin end=None):     if end is None:         end = datetime.now()     num_years = int((end - begin).days / 365.25)     if begin &gt; yearsago(num_years end):         return num_years - 1     else:         return num_years  
[::] l = [123]  l[-1] l[-2] l[-3] step l = [12345678910]  l[::-1] [10987654321] a[::-1] 
datetime.timedelta &gt;&gt;&gt; import datetime &gt;&gt;&gt; a = datetime.datetime.now() &gt;&gt;&gt; b = datetime.datetime.now() &gt;&gt;&gt; c = b - a  &gt;&gt;&gt; c datetime.timedelta(0 4 316543) &gt;&gt;&gt; c.days 0 &gt;&gt;&gt; c.seconds 4 &gt;&gt;&gt; c.microseconds 316543  c.microseconds c.total_seconds() &gt;&gt;&gt; c / 10 datetime.timedelta(0 0 431654)  
*? *? +? ?? {mn}? 
LazyUser a.x a.__dict__['x'] type(a).__dict__['x'] type(a) 
super(D self).__init__(*args**kwargs)  super(A...  super(A self).__init__ A object D A 
def add(x y):     return x + y  a = add          # Bind b = a(34 1)     # Call  
subdir __init__.py from subdir import sub1 
a = x if x is not None else y   false 0 a = x if x else y   a = x or y   try:   a = x  except NameError:   a = y  a = vars().get('x'y)  
import Tkinter  class Monitor(object):    def __init__(self):     self.mw = Tkinter.Tk()     self.mw.title("Messages by NeuronSimulation")     self.text = Tkinter.Text(self.mw width = 80 height = 30)     self.text.pack()     self.mw.protocol(name="WM_DELETE_WINDOW" func=self.handler)     self.is_mw = True    def write(self s):     if self.is_mw:       self.text.insert(Tkinter.END str(s) + "\n")     else:       print str(s)    def handler(self):     self.is_mw = False     self.mw.quit()     self.mw.destroy()  monitor = Monitor()  from monitor import monitor monitor.write("Foo")  
__import__() for module in modules:     try:         __import__(module)     except ImportError:         do_something()  imp.find_module import imp for module in modules:     try:         imp.find_module(module)     except ImportError:         do_something()  eval() import exec for module in modules:     try:         exec 'import ' + module     except ImportError:         do_something()  
ast 
subprocess shell=False subprocess.Popen os.system() 
__import__('structures.index') structures = __import__('structures.index') structures.index.SomeClass(...)  __import__ neoform.structures.index index structures = __import__('neoform.structures.index'                          fromlist=['does not in fact matter what goes here!'])  packages index MyClass modules = [ __import__('neoform.%s.index' % pkg fromlist=['a'])              for pkg in packages ] objects = [ m.MyClass() for m in modules ]  
procmail 
setup.py setup.py setup() setup.py setup() import sys if len(sys.argv) &gt; 1 and sys.argv[1] == 'script':     setup(name='tvnamer' ...) else:     setup(name='tvdb_api' ...)  
keyword argument repeated mymodel.objects.filter(first_name__icontains="Foo" first_name__icontains="Bar")  
class MyClass(object): ...     def my_method(self): pass ... &gt;&gt;&gt; MyClass.my_method &lt;function my_method at 0x661c38&gt;  &gt;&gt;&gt; MyClass().my_method &lt;bound method MyClass.my_method of &lt;__main__.myClass object at 0x6e2498&gt;&gt;  MyClass.my_method(MyClass()) sorted() getX operator.itemgetter operator.methodcaller 
$ python ./manage.py startapp foo  INSTALLED_APPS += ('foo')  ./djangoproject     __init__.py     settings.py     urls.py     etc..     foo/         __init__.py         templatetags/             __init__.py             range_template.py  
locals() greeting = "Hello World"  # Use this in versions prior to 2.6: print("My first programm; %(greeting)s" % locals())  # Since Python 2.6 the recommended example is: print("My first program; {greeting}".format(**locals()))  # Works in 2.x and 3.x: from string import Template print(Template("My first programm; $greeting").substitute(locals()))  
RCPT TO: RCPT TO: 
import pygame import random import sys  class Ball:     def __init__(selfXY):         self.velocity = [11]         self.ball_image = pygame.image.load ('Beachball.jpg'). convert()         self.ball_boundary = self.ball_image.get_rect (center=(XY))         self.sound = pygame.mixer.Sound ('Thump.wav')  if __name__ =='__main__':     width = 800     height = 600     background_colour = 000     pygame.init()     frame = pygame.display.set_mode((width height))     pygame.display.set_caption("Bouncing Ball animation")     num_balls = 1000     ball_list = []     for i in range(num_balls):         ball_list.append( Ball(random.randint(0 width)random.randint(0 height)) )     while True:         for event in pygame.event.get():             print event              if event.type == pygame.QUIT:                 sys.exit(0)         frame.fill (background_colour)         for ball in ball_list:             if ball.ball_boundary.left &lt; 0 or ball.ball_boundary.right &gt; width:                 ball.sound.play()                 ball.velocity[0] = -1 * ball.velocity[0]             if ball.ball_boundary.top &lt; 0 or ball.ball_boundary.bottom &gt; height:                 ball.sound.play()                 ball.velocity[1] = -1 * ball.velocity[1]              ball.ball_boundary = ball.ball_boundary.move (ball.velocity)             frame.blit (ball.ball_image ball.ball_boundary)         pygame.display.flip()  
myList[1:2 ... 0]  __getitem__ Ellipsis [:2:2] &gt;&gt;&gt; a array([[ 1  2  3  4]        [ 5  6  7  8]        [ 9 10 11 12]        [13 14 15 16]])  &gt;&gt;&gt; a[:2:2]  # top left array([[1 2]        [5 6]])  [:] a[...0] a[::0] a[:::0] a[0...0] a[0::0] ... &gt;&gt;&gt; ... Ellipsis  
max(a) &gt;&gt;&gt; from numpy import * &gt;&gt;&gt; a = array(1) &gt;&gt;&gt; b = int_(1) &gt;&gt;&gt; a.ndim 0 &gt;&gt;&gt; b.ndim 0 &gt;&gt;&gt; a[...] array(1) &gt;&gt;&gt; a[()] 1 &gt;&gt;&gt; b[...] array(1) &gt;&gt;&gt; b[()] 1  a[...] a[()] newaxis &gt;&gt;&gt; b[0123] = 1 Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: 'numpy.int32' object does not support item assignment &gt;&gt;&gt; b[newaxis] array([1])  a = array(a) 
def user_updater(self):     self.user_updater_id = self.user_label.after(1000 self.user_updater)     lines = []     for user in self.server.Users:         lines.append(user)     self.user_label["text"] = "\n".join(lines)  def stop_user_updater(self):     self.user_label.after_cancel(self.user_updater_id)  
import difflib def show_diff(seqm):     """Unify operations between two compared strings seqm is a difflib.SequenceMatcher instance whose a &amp; b are strings"""     output= []     for opcode a0 a1 b0 b1 in seqm.get_opcodes():         if opcode == 'equal':             output.append(seqm.a[a0:a1])         elif opcode == 'insert':             output.append("&lt;ins&gt;" + seqm.b[b0:b1] + "&lt;/ins&gt;")         elif opcode == 'delete':             output.append("&lt;del&gt;" + seqm.a[a0:a1] + "&lt;/del&gt;")         elif opcode == 'replace':             raise NotImplementedError "what to do with 'replace' opcode?"         else:             raise RuntimeError "unexpected opcode"     return ''.join(output)  &gt;&gt;&gt; sm= difflib.SequenceMatcher(None "lorem ipsum dolor sit amet" "lorem foo ipsum dolor amet") &gt;&gt;&gt; show_diff(sm) 'lorem&lt;ins&gt; foo&lt;/ins&gt; ipsum dolor &lt;del&gt;sit &lt;/del&gt;amet'  
def total_and_item(sequence):     total = 0     for i in sequence:         total += i         yield (total i)  list2 = list(total_and_item(list1))  
for file in DirectoryWalker(os.path.abspath('.')):     print file  os.path.normpath  os.path.join  
c.execute("SELECT * FROM foo WHERE bar = %s AND baz = %s" % (param1 param2))  c.execute("SELECT * FROM foo WHERE bar = %s AND baz = %s" (param1 param2))  printf python-sqlite 
import os for p in os.environ["PATH"].split(os.pathsep):     print os.path.exists(os.path.join(p 'notepad.exe'))  if not any([os.path.exists(os.path.join(p executable) for p in os.environ["PATH"].split(os.pathsep)]):     print "can't find %s" % executable  
def app(environ start_response):     path    = environ['PATH_INFO']     method  = environ['REQUEST_METHOD']     if method == 'POST':         if path.startswith('/test'):             try:                 request_body_size = int(environ['CONTENT_LENGTH'])                 request_body = environ['wsgi.input'].read(request_body_size)             except (TypeError ValueError):                 request_body = "0"             try:                 response_body = str(request_body)             except:                 response_body = "error"             status = '200 OK'             headers = [('Content-type' 'text/plain')]             start_response(status headers)             return [response_body]     else:         response_body = open('test.html').read()         status = '200 OK'         headers = [('Content-type' 'text/html')                     ('Content-Length' str(len(response_body)))]         start_response(status headers)         return [response_body]  
u[12] u[12] 
sphinx-build from pkg_resources import load_entry_point  load_entry_point('Sphinx==0.5.1' 'console_scripts' 'sphinx-build')()  entry-points.txt sphinx.main __init__.py sphinx-build build Sphinx from sphinx.application import Sphinx s = Sphinx(...) s.build(...)  Sphinx.__init__() Sphinx.build() 
time.sleep() time.sleep() twisted.internet.defer.inlineCallbacks #!/usr/bin/env python  import time  from twisted.web import http from twisted.internet import protocol from twisted.internet import reactor from twisted.internet import defer  def wait(seconds result=None):     """Returns a deferred that will be fired later"""     d = defer.Deferred()     reactor.callLater(seconds d.callback result)     return d  class StreamHandler(http.Request):     BOUNDARY = 'BOUNDARY'      def writeBoundary(self):         self.write("--%s\n" % (self.BOUNDARY))      def writeStop(self):         self.write("--%s--\n" % (self.BOUNDARY))      @defer.inlineCallbacks     def process(self):         self.setHeader('Connection' 'Keep-Alive')         self.setHeader('Content-Type' "multipart/x-mixed-replace;boundary=%s" % (self.BOUNDARY))          self.writeBoundary()          self.write("Content-Type: text/html\n")         s = "&lt;html&gt;foo&lt;/html&gt;\n"         self.write("Content-Length: %s\n\n" % (len(s)))         self.write(s)         self.writeBoundary()           yield wait(2)          self.write("Content-Type: text/html\n")         s = "&lt;html&gt;bar&lt;/html&gt;\n"         self.write("Content-Length: %s\n\n" % (len(s)))         self.write(s)         self.writeBoundary()          yield wait(2)          self.write("Content-Type: text/html\n")         s = "&lt;html&gt;baz&lt;/html&gt;\n"         self.write("Content-Length: %s\n\n" % (len(s)))         self.write(s)          self.writeStop()          self.finish()   class StreamProtocol(http.HTTPChannel):     requestFactory = StreamHandler  class StreamFactory(http.HTTPFactory):     protocol = StreamProtocol   if __name__ == '__main__':        reactor.listenTCP(8800 StreamFactory())     reactor.run()  
mark_safe from django.utils.safestring import mark_safe  currencies = ((mark_safe('&amp;#36;') mark_safe('&amp;#36;'))                (mark_safe('&amp;pound;') mark_safe('&amp;pound;'))                (mark_safe('&amp;euro;') mark_safe('&amp;euro;')))      autoescape off {% autoescape off %} {% endautoescape %} # coding=utf-8  currencies = (('$' '$')                ('£' '£')                ('€' '€'))   
subprocess.Popen() proc = [] proc.append(Popen(['svn' 'blame' shellquote(filename)] stdout=PIPE)) proc.append(Popen(['tr' '-s' r"'\040'"] stdin=proc[-1]) stdout=PIPE)  proc[-1] proc.append(Popen(['tr' '-s' r"'\040'"] stdin=proc[-1].stdout stdout=PIPE))  tr cut tr cut 
string $cons[] = `ls -type "constraint"`; for ( $con in $cons ){     string $targetAttrString = ( $con+ ".target" );     string $connections[] = `listConnections $targetAttrString`;     string $connectionsFlattened[] = stringArrayRemoveDuplicates($connections);     for ( $f in $connectionsFlattened )         if ( $f != $con )             print ( $f+ " is a target\n" ); }  
import gtk.gdk import pynotify  n = pynotify.Notification("This is my title" "This is my description") n.set_hint('x' gtk.gdk.screen_width()/2.) n.set_hint('y' gtk.gdk.screen_height()/2.) n.show()  
include *.jpg  
from multiprocessing import Process import time  class Starter(object):     def __init__(self):         self.state = False  x = Starter()  class EdgeRenderer(Process):     def __init__(selfstarter*args**kwargs):         Process.__init__(self*args**kwargs)         self.starter=starter     def run(self):         self.starter.state = "HAM SANDWICH"         time.sleep(1)         print self.starter.state  a = EdgeRenderer(x) a.start() x.state = True a.join() print x.state  HAM SANDWICH True  
__file__ import os this_dir this_filename = os.path.split(__file__) DATA_PATH = os.path.join(this_dir "data" "data.txt") print open(DATA_PATH).read()  
rangeList = range(021) lastNumber = rangeList[len(rangeList)-1:][0]  lastNumber = rangeList[-1]  
unquote &gt;&gt;&gt; import urllib &gt;&gt;&gt; urllib.unquote("myemail%40gmail.com") 'myemail@gmail.com'  unquote_plus 
a = 123456 b = str(a) c = []  for digit in b:     c.append (int(digit))  print c  
str(A()) __str__ dict.__str__() dict.__str__() 
from sqlalchemy import Column Integer String Table create_engine from sqlalchemy import orm MetaData Column ForeignKey from sqlalchemy.orm import relation mapper sessionmaker from sqlalchemy.orm.collections import column_mapped_collection from sqlalchemy.ext.associationproxy import association_proxy  engine = create_engine('sqlite:///:memory:' echo=True) meta = MetaData(bind=engine)  tb_items = Table('items' meta          Column('id' Integer primary_key=True)          Column('name' String(20))         Column('description' String(100))     ) tb_notes = Table('notes' meta          Column('id_item' Integer ForeignKey('items.id') primary_key=True)         Column('name' String(20) primary_key=True)         Column('value' String(100))     ) meta.create_all()  association_proxy class Note(object):     def __init__(self name value):         self.name = name         self.value = value class Item(object):     def __init__(self name description=''):         self.name = name         self.description = description     notes = association_proxy('_notesdict' 'value' creator=Note)  mapper(Note tb_notes) mapper(Item tb_items properties={         '_notesdict': relation(Note               collection_class=column_mapped_collection(tb_notes.c.name))     })  Session = sessionmaker(bind=engine) s = Session()  i = Item('ball' 'A round full ball') i.notes['color'] = 'orange' i.notes['size'] = 'big' i.notes['data'] = 'none'  s.add(i) s.commit() print i.notes  {u'color': u'orange' u'data': u'none' u'size': u'big'}  &gt;&gt;&gt; print list(tb_notes.select().execute()) [(1 u'color' u'orange') (1 u'data' u'none') (1 u'size' u'big')]  
ROOT_URLCONF 
rlcompleter.Completer readline import rlcompleter import readline class MyCompleter(rlcompleter.Completer):     def global_matches(self text):         ....     def attr_matches(self text):         ....  import readline readline.set_completer(MyCompleter().complete)   
&gt;&gt;&gt; def caller(func *args **kwargs): ...     return func(*args **kwargs) ... &gt;&gt;&gt; def hello(a b c): ...     print a b c ... &gt;&gt;&gt; caller(hello 1 b=5 c=7) 1 5 7  
...  def On_Idle(self event):     if not self.queued_batch:         wx.CallLater(1000 self.Do_Batch)         self.queued_batch = True  def Do_Batch(self):     # &lt;- insert your stuff here     self.queued_batch = False  ...  
compact() import inspect  def compact(*names):     caller = inspect.stack()[1][0] # caller of compact()     vars = {}     for n in names:         if n in caller.f_locals:             vars[n] = caller.f_locals[n]         elif n in caller.f_globals:             vars[n] = caller.f_globals[n]     return vars  extract() def extract(vars):     caller = inspect.stack()[1][0] # caller of extract()     for n v in vars.items():         caller.f_locals[n] = v   # NEVER DO THIS - not guaranteed to work  
f.seek(f.tell())  
def truncate(f n):     '''Truncates/pads a float f to n decimal places without rounding'''     s = '{}'.format(f)     if 'e' in s or 'E' in s:         return '{0:.{1}f}'.format(f n)     i p d = s.partition('.')     return '.'.join([i (d+'0'*n)[:n]])  def truncate(f n):     '''Truncates/pads a float f to n decimal places without rounding'''     s = '%.12f' % f     i p d = s.partition('.')     return '.'.join([i (d+'0'*n)[:n]])  i p d = s.partition('.') '.'.join([i (d+'0'*n)[:n]])  decimal str(Decimal(s).quantize(Decimal((0 (1) -n)) rounding=ROUND_DOWN))  0.3 0011111111010011001100110011001100110011001100110011001100110011  0.29999999999999998 0.3 0.2 0.2999999999999999888977697537484345957637...  0.2 '{}'.format(f)  g 1.23e+4 f 3e-10 0.0000000002999999999999999980 float '{0:.{1}f}'.format(f sys.float_info.dig + n + 2)  sys.float_info.dig + n + 2 2 &gt;&gt;&gt; 1.1 1.1000000000000001  float '%.12f' % f  def trunc_introspect(f n):     '''Truncates/pads the float f to n decimal places by looking at the caller's source code'''     current_frame = None     caller_frame = None     s = inspect.stack()     try:         current_frame = s[0]         caller_frame = s[1]         gen = tokenize.tokenize(io.BytesIO(caller_frame[4][caller_frame[5]].encode('utf-8')).readline)         for token_type token_string _ _ _ in gen:             if token_type == tokenize.NAME and token_string == current_frame[3]:                 next(gen) # left parenthesis                 token_type token_string _ _ _ = next(gen) # float literal                 if token_type == tokenize.NUMBER:                     try:                         cut_point = token_string.index('.') + n + 1                     except ValueError: # no decimal in string                         return token_string + '.' + '0' * n                     else:                         if len(token_string) &lt; cut_point:                             token_string += '0' * (cut_point - len(token_string))                         return token_string[:cut_point]                 else:                     raise ValueError('Unable to find floating-point literal (this probably means you called {} with a variable)'.format(current_frame[3]))                 break     finally:         del s current_frame caller_frame  
i &lt;div id="right_pod"&gt; {% for i in c %}     &lt;div class="user_pod"&gt;         {{ i.0.from_user }}     &lt;/div&gt; {% endfor %}  
myvars myvars c1 testClass c1 c2 class testClass:     def __init__(self):         self.myvars = dict()      def __getattr__(self k):         if self.myvars.has_key(k):             return self.myvars[k]      def __setattr__(self k v):         self.myvars[k] = v      def __str__(self):         l = []         for k v in self.myvars.iteritems():             l.append(str(k) + ":" + str(v))         return " - ".join(l)  
Foo.hello.im_func(bar)  
import os random_string = os.urandom(string_length)  import os random_string = os.urandom(string_length).hex()   
subprocess os.system os.popen import subprocess resultMD5 = subprocess.Popen(["md5sum""myFile"]stdout=subprocess.PIPE).communicate()[0]  hashlib import hashlib resultMD5 = hashlib.md5(open("myFile").read()).hexdigest()  
my $psTable = Process-&gt;new();  # Get list of process owned by 'root' for my $pid ( $psTable-&gt;getbyuser("root") ) {      $psDetail = $psList-&gt;getdetail( $pid );     # Do something with the psDetail..  }  
context_instance RequestContext views.py from django.template import RequestContext  def someview(request ...)     ...     return render_to_response('viewtemplate.html' someContext context_instance=RequestContext(request))  settings.py TEMPLATE_CONTEXT_PROCESSORS = (     'django.core.context_processors.auth'     ...     'myproj.app.context_processors.dynamic'     'myproj.app.context_processors.sidebar'     'myproj.app.context_processors.etc' )  context_processors request context_processors.py context_processors.py def sidebar(request):     recent_entry_list = Entry.objects...     recent_comment_list = Comment.objects...     return {'recent_entry_list': recent_entry_list 'recent_comment_list': recent_comment_list}  
from mechanize import Browser  b = Browser() b.open("http://utahcritseries.com/RawResults.aspx") b.select_form(nr=0)  year = b.form.find_control(type='select') year.get(label='2005').selected = True  src = b.submit().read() print src  easy_install mechanize 
re.sub(pattern repl string[ count]) &gt;&gt;&gt; y = re.sub(r 'blue' x) &gt;&gt;&gt; y 'The sky is blue'  RegexObject.sub(repl string[ count=0]) &gt;&gt;&gt; z = r.sub('blue' x) &gt;&gt;&gt; z 'The sky is blue'  
qs.filter( **{ 'attitudes__%s'%arg:True } )  
from datetime import datetime timedelta x = datetime.now() + timedelta(seconds=3) x += timedelta(seconds=3)  
import email re data = file('testmessage.txt').read() data = re.sub(r'\r(?!\n)' '\r\n' data)  # Bare \r becomes \r\n msg  = email.message_from_string( data ) payload = msg.get_payload(decode=True) print payload  
f_frsize f_bsize &gt;&gt;&gt; s = os.statvfs('/') &gt;&gt;&gt; (s.f_bavail * s.f_frsize) / 1024 23836592L &gt;&gt;&gt; os.system('df -k /') Filesystem   1024-blocks     Used Available Capacity  Mounted on /dev/disk0s2   116884912 92792320  23836592    80%    /  
time.sleep(0) time.sleep(0) 
#relese reference to l b and s del l del b del s  #now the WaveBuffer and Source should be destroyed so we could: pyopenal.quit()  quit() 
params = urllib.urlencode(dict([k v.encode('utf-8')] for k v in params.items()))  params['foo'] = my_raw_input.decode('iso-8859-1') params = urllib.urlencode(dict([k v.encode('utf-8')] for k v in params.items()))  
convert input.png gradient.png -fx "v.p{0u*v.h}" output.png  v is the second image (gradient.png) u is the first image (input.png) v.p will get a pixel value v.p{0 0} -&gt; first pixel in the image v.h -&gt; the hight of the second image v.p{0 u * v.h} -&gt; will read the Nth pixel where N = u * v.h  import Image  # open the input image input_img = Image.open('input.png')  # open gradient image and resize to 256px height gradient_img = Image.open('gradient.png') gradient_img = gradient_img.resize( (gradient_img.size[0] 256) )  # get pixel access object (significantly quicker than getpixel method) gradient_pix = gradient_img.load()  data = input_img.getdata() input_img.putdata([gradient_pix[0 r] for (r g b a) in data]) input_img.save('output.png')  
http.client.HTTPConnection.debuglevel = 1 urllib.request http.client urllib.request.HTTPHandler(debuglevel=1) 
Content-type response.headers['Content-type'] = 'text/csv' 
print urllib.urlopen("http://google.com").read()  External Frameworks.. Add &gt; Existing Frameworks /System/Library/Frameworks/ /System/Library/Frameworks/Python.framework/Headers Project &gt; Edit Project Settings #include &lt;Python.h&gt;  int main(){     NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];     Py_Initialize();      // import urllib     PyObject *mymodule = PyImport_Import(PyString_FromString("urllib"));     // thefunc = urllib.urlopen     PyObject *thefunc = PyObject_GetAttrString(mymodule "urlopen");      // if callable(thefunc):     if(thefunc &amp;&amp; PyCallable_Check(thefunc)){         // theargs = ()         PyObject *theargs = PyTuple_New(1);          // theargs[0] = "http://google.com"         PyTuple_SetItem(theargs 0 PyString_FromString("http://google.com"));          // f = thefunc.__call__(*theargs)         PyObject *f = PyObject_CallObject(thefunc theargs);          // read = f.read         PyObject *read = PyObject_GetAttrString(f "read");          // result = read.__call__()         PyObject *result = PyObject_CallObject(read NULL);           if(result != NULL){             // print result             printf("Result of call: %s" PyString_AsString(result));         }     }     [pool release]; }  
globals()['do_on_' + platform] getattr 
class Foo dir(Foo) getattr(Foo thename) type(theattr) isinstance 'Bar' Relationship OneToMany ManyToMany r.of_kind inspect 
{an_object.name : an_object for an_object in object_list}  dict([(an_object.name an_object) for an_object in object_list])  
u'\xe4\xf6\xfc'  &gt;&gt;&gt; u'\xe4\xf6\xfc'.encode('utf-8') '\xc3\xa4\xc3\xb6\xc3\xbc'  decode(...) u'\xe4\xf6\xfc' '\xe4\xf6\xfc' decode('latin1') &gt;&gt;&gt; '\xe4\xf6\xfc'.decode('latin1') u'\xe4\xf6\xfc'  
for result in messages:     times.append(result.group('time'))  times = [result.group('time') for result in messages]  
-gthread -tk ipython --help 
objects= Session.objects.aggregate(Max('date') Min('date')) print [ type[o] for o in objects ] result =  serializers.serialize("json" objects ensure_ascii=False)  
data1 = {'id':1 'name':'somehackers.jpg'      'img':psycopg2.Binary(open('somehackers.jpg').read())}  curs.execute("""INSERT INTO test_binary               VALUES (%(id)s %(name)s %(img)s)""" data1)  
awk awk 'NF &gt; 2' input_file &gt; output_file  
hash() 
form.fields['emails'].choices form.cleaned_data['emails'] 
map filter 
activated(int index) 
{{ item.date|date:"Y M d" }}  
class Subclass1(BaseClass):     def __init__(self):         super( Subclass1 self ).__init__()         self.specific()         super( Subclass1 self ).finalizeInitialization()  class BaseClass:     def __init__(self):         print 'base __init__'         self.common1()         self.specific()         self.finalizeInitialization()      def common1(self):         print 'common 1'      def finalizeInitialization(self):         print 'finalizeInitialization [common2]'      def specific( self ):         # two choices:         # if this is "abstract": raise an exception         # if this is "concrete": pass  
players = Player.objects.filter(batting__gt=F('bowling'))  
In [8]: x Out[8]:  array([[ 0.   0.   0. ]        [-1.   0.  -1. ]        [-2.   0.  -2. ]        [-3.   0.  -3. ]        [-4.   0.1 -4. ]]) In [9]: y Out[9]:  array([[0.  0. ]        [1.  0. ]        [2.  0. ]        [3.  0. ]        [4.  0.1]])  In [10]: import scipy.stats  In [27]: (scipy.stats.cov(yx)           /(numpy.sqrt(scipy.stats.var(yaxis=0)[:numpy.newaxis]))           /(numpy.sqrt(scipy.stats.var(xaxis=0)))) Out[27]:  array([[-1.          0.70710678 -1.        ]        [-0.70710678  1.         -0.70710678]])  In [40]: numpy.corrcoef(x.Ty.T)[numpy.arange(x.shape[1])[numpy.newaxis:]                                  numpy.arange(y.shape[1])[:numpy.newaxis]] Out[40]:  array([[-1.          0.70710678 -1.        ]        [-0.70710678  1.         -0.70710678]])  
naive = dt.replace(tzinfo=None)  
&lt;script charset="utf-8" type="text/javascript"&gt;   $(function(){     $("select#id_category").change(function(){       $.getJSON("/items/"{id: $(this).val() view: 'json'} function(j) {         var options = '&lt;option value=""&gt;--------&amp;nbsp;&lt;/option&gt;';         for (var i = 0; i &lt; j.length; i++) {           options += '&lt;option value="' + j[i].optionValue + '"&gt;' + j[i].optionDisplay + '&lt;/option&gt;';         }         $("#id_item").html(options);         $("#id_item option:first").attr('selected' 'selected');       })       $("#id_category").attr('selected' 'selected');     })   }) &lt;/script&gt;  
ParentModel.objects.filter(childmodel__in=ChildModel.objects.all()).distinct()  
&gt;&gt;&gt; t = 'a' 'bcd' &gt;&gt;&gt; t 'abcd'  &gt;&gt;&gt; print '%5s' % ':%2s' % ':'  &gt;&gt;&gt; print ('%5s' % ':%2s') % ':'  &gt;&gt;&gt; print ' :%2s' % ':'  : :  
snipplets sys.path sys.path site.path PYTHONPATH 
class Fooset(set):     def __init__(self s=() foo=None):         super(Foosetself).__init__(s)         if foo is None and hasattr(s 'foo'):             foo = s.foo         self.foo = foo        @classmethod     def _wrap_methods(cls names):         def wrap_method_closure(name):             def inner(self *args):                 result = getattr(super(cls self) name)(*args)                 if isinstance(result set) and not hasattr(result 'foo'):                     result = cls(result foo=self.foo)                 return result             inner.fn_name = name             setattr(cls name inner)         for name in names:             wrap_method_closure(name)  Fooset._wrap_methods(['__ror__' 'difference_update' '__isub__'      'symmetric_difference' '__rsub__' '__and__' '__rand__' 'intersection'     'difference' '__iand__' 'union' '__ixor__'      'symmetric_difference_update' '__or__' 'copy' '__rxor__'     'intersection_update' '__xor__' '__ior__' '__sub__' ])  
itertools.product &gt;&gt;&gt; import itertools &gt;&gt;&gt; a = [[123][456][78910]] &gt;&gt;&gt; list(itertools.product(*a)) [(1 4 7) (1 4 8) (1 4 9) (1 4 10) (1 5 7) (1 5 8) (1 5 9) (1 5 10) (1 6 7) (1 6 8) (1 6 9) (1 6 10) (2 4 7) (2 4 8) (2 4 9) (2 4 10) (2 5 7) (2 5 8) (2 5 9) (2 5 10) (2 6 7) (2 6 8) (2 6 9) (2 6 10) (3 4 7) (3 4 8) (3 4 9) (3 4 10) (3 5 7) (3 5 8) (3 5 9) (3 5 10) (3 6 7) (3 6 8) (3 6 9) (3 6 10)]  
success = False try:     foo()     success = True except(A):     bar() except(B):     baz() except(C):     bay() finally:     if not success:         foobar()  
&gt;&gt;&gt; i = 1240832864000L &gt;&gt;&gt; i 1240832864000L &gt;&gt;&gt; print i 1240832864000 &gt;&gt;&gt;  &gt;&gt;&gt; '&lt;script type="text/javascript"&gt; var num = %s; &lt;/script&gt;' % i '&lt;script type="text/javascript"&gt; var num = 1240832864000; &lt;/script&gt;'  __repr__ 
f.write("""&lt;html&gt; &lt;title&gt;python newb's twitter search&lt;/title&gt; &lt;head&gt;&lt;meta http-equiv='refresh' content='60'&gt;&lt;/head&gt; &lt;body&gt; &lt;h1 style='font-size:150%'&gt;Python Newb's Twitter Search&lt;/h1&gt; &lt;h2 style='font-size:125%'&gt;Searching Twitter for: %s&lt;/h2&gt; &lt;h2 style='font-size:125%'&gt;%s (updates every 60 seconds)&lt;/h2&gt;""" % (query time.ctime()))  for datum in reversed(data):     f.write("&lt;p style='font-size:90%'&gt;%s&lt;/p&gt;" % (datum))  f.write("&lt;/body&gt;&lt;/html&gt;")  import mako  f = file("outw.html" "w") data = reversed(data) t = Template(filename='/path/to/mytmpl.txt').render({"query":query "time":time.ctime() "data":data}) f.write(t)  &lt;html&gt; &lt;title&gt;python newb's twitter search&lt;/title&gt; &lt;head&gt;&lt;meta http-equiv='refresh' content='60'&gt;&lt;/head&gt; &lt;body&gt; &lt;h1 style='font-size:150%'&gt;Python Newb's Twitter Search&lt;/h1&gt; &lt;h2 style='font-size:125%'&gt;Searching Twitter for: ${query}&lt;/h2&gt; &lt;h2 style='font-size:125%'&gt;${time} (updates every 60 seconds)&lt;/h2&gt;  % for datum in data:     &lt;p style'font-size:90%'&gt;${datum}&lt;/p&gt; % endfor  &lt;/body&gt; &lt;/html&gt;  
&gt;&gt;&gt; import platform &gt;&gt;&gt; import socket &gt;&gt;&gt; import os &gt;&gt;&gt; platform.node() 'DARK-TOWER' &gt;&gt;&gt; socket.gethostname() 'DARK-TOWER' &gt;&gt;&gt; os.environ['COMPUTERNAME'] 'DARK-TOWER'  
redirectUrl = "/view/key/%s/" % item.key() self.redirect(redirectUrl)  
* import re  def parse_float(str):   re_float = re.compile(r'(-?)(\d+)\.(\d+)')   grps = re_float.search(str)   sign decimal fraction = grps.groups()   float_val = float('%s%s.%s' % (sign decimal fraction))   total_len = len(grps.group(0))   print '%*.*f'  % (total_len len(fraction) float_val)  parse_float('1.2345678') parse_float('1.234') parse_float('1.2340000')  1.2345678 1.234 1.2340000  
originalTime = None  def doSomething():   if originalTime:     print "originalTime is not None and does not evaluate to False"   else:     print "originalTime is None or evaluates to False"  def doSomethingElse():   originalTime = True  def doSomethingCompletelyDifferent()   global originalTime   originalTime = True  doSomething() doSomethingElse() doSomething() doSomethingCompletelyDifferent() doSomething()  originalTime is None or evaluates to False originalTime is None or evaluates to False originalTime is not None and does not evaluate to False  
import scipy.stats  def LogNormDist(prob mean=0 stddev=1):     return scipy.stats.lognorm.cdf(probstddevmean)  scipy.stats.lognormal return scipy.stats.lognorm.cdf(probstddevscipy.exp(mean))  import scipy.stats  def LogNormDist(prob mean=0 stddev=1):     return scipy.stats.lognorm.cdf(probstddevscale=scipy.exp(mean))  
QueryDict.getlist(key) &lt;form action='/my/path/' method='POST'&gt; &lt;input type='text' name='hi' value='heya1'&gt; &lt;input type='text' name='hi' value='heya2'&gt; &lt;input type='submit' value='Go'&gt; &lt;/form&gt;  def mypath(request):     if request.method == 'POST':         greetings = request.POST.getlist('hi') # will be ['heya1''heya2']  
get() post() post() memcache 
final public final List&lt;String&gt; messages = new LinkedList&lt;String&gt;();  public void addMessage() {     messages.add("Hello World!");  // this mutates the messages list }  public final List&lt;String&gt; messages = new LinkedList&lt;String&gt;();  public void changeMessages() {     messages = new ArrayList&lt;String&gt;();  // can't change a final variable }  final list tuple set frozenset 
except: grep 
for line in p.stdout:   ...  while True:   line = p.stdout.readline()   if not line: break   ...  
class Hello(db.Model):   name = db.StringProperty()   when = db.DateTimeProperty()  class MainHandler(webapp.RequestHandler):    def get(self):     self.response.out.write('Hello world!')     one = Hello(name='Uno' when=datetime.datetime.now())     two = Hello(name='Due' when=datetime.datetime.now())     both = [one two]     db.put(both)  def main():   application = webapp.WSGIApplication([('/' MainHandler)]                                        debug=True)   wsgiref.handlers.CGIHandler().run(application)   if __name__ == '__main__':   main()  
dict_a = dict(list_a) dict_x = dict(list_x)  shared_keys = set(dict_a).intersection(set(dict_x))  result = dict((k (dict_a[k] dict_x[k])) for k in shared_keys)  
import os sys  def fck_handler(environ start_response):     path = environ['PATH_INFO']     if path.endswith(('upload.py' 'connector.py')):         sys.path.append('/#correct_path_to#/fckeditor/editor/filemanager/connectors/py/')         if path.endswith('upload.py'):             from upload import FCKeditorQuickUpload             conn = FCKeditorQuickUpload(environ)         else:             from connector import FCKeditorConnector             conn = FCKeditorConnector(environ)         try:             data = conn.doResponse()             start_response('200 Ok' conn.headers)             return data         except:             start_response("500 Internal Server Error"[("Content-type""text/html")])             return "There was an error"     else:         sys.path.append('/path_to_your_django_site/')         os.environ['DJANGO_SETTINGS_MODULE'] = 'your_django_site.settings'         import django.core.handlers.wsgi         handler = django.core.handlers.wsgi.WSGIHandler()         return handler(environ start_response)  application = fck_handler  
def perform( fun *args ):     fun( *args )  def action1( args ):     something  def action2( args ):     something  perform( action1 ) perform( action2 p ) perform( action3 p r )  
import urlparse urllib  def fixurl(url):     # turn string into unicode     if not isinstance(urlunicode):         url = url.decode('utf8')      # parse it     parsed = urlparse.urlsplit(url)      # divide the netloc further     userpassathostport = parsed.netloc.rpartition('@')     usercolon1pass_ = userpass.partition(':')     hostcolon2port = hostport.partition(':')      # encode each component     scheme = parsed.scheme.encode('utf8')     user = urllib.quote(user.encode('utf8'))     colon1 = colon1.encode('utf8')     pass_ = urllib.quote(pass_.encode('utf8'))     at = at.encode('utf8')     host = host.encode('idna')     colon2 = colon2.encode('utf8')     port = port.encode('utf8')     path = '/'.join(  # could be encoded slashes!         urllib.quote(urllib.unquote(pce).encode('utf8')'')         for pce in parsed.path.split('/')     )     query = urllib.quote(urllib.unquote(parsed.query).encode('utf8')'=&amp;?/')     fragment = urllib.quote(urllib.unquote(parsed.fragment).encode('utf8'))      # put it back together     netloc = ''.join((usercolon1pass_athostcolon2port))     return urlparse.urlunsplit((schemenetlocpathqueryfragment))  print fixurl('http://\xe2\x9e\xa1.ws/\xe2\x99\xa5') print fixurl('http://\xe2\x9e\xa1.ws/\xe2\x99\xa5/%2F') print fixurl(u'http://Åsa:abc123@?.ws:81/admin') print fixurl(u'http://?.ws/admin')  http://xn--hgi.ws/%E2%99%A5 http://xn--hgi.ws/%E2%99%A5/%2F http://%C3%85sa:abc123@xn--hgi.ws:81/admin http://xn--hgi.ws/admin urlparse urlunparse urlsplit urlunsplit 
-vvv % pip install vermin % vermin -vvv somescript.py Detecting python files.. Analyzing using 8 processes.. !2 3.6      /path/to/somescript.py   L13: f-strings require 3.6+   L14: f-strings require 3.6+   L15: f-strings require 3.6+   L16: f-strings require 3.6+   print(expr) requires 2+ or 3+  Minimum required versions: 3.6 Incompatible versions:     2  -t=V V 1 
def application(environ start_response):     status = '200 OK'     output = 'Hello World!'      response_headers = [('Content-type' 'text/plain')                     ('Content-Length' str(len(output)))]     start_response(status response_headers)      yield output  for part in mylist:     yield part  return mylist  
super() class Foo(Bar):     def baz(self arg):         return super().baz(arg)  class Foo(Bar):     def baz(self arg):         return super(Foo self).baz(arg)  
cursor.description 
TEMPLATE_CONTEXT_PROCESSORS = (     "django.core.context_processors.auth"     "django.core.context_processors.debug"     "django.core.context_processors.i18n"     "django.core.context_processors.media"     "django.core.context_processors.request" )  &lt;a href="{% url django.contrib.auth.views.login %}?next={{request.path}}"&gt;Login&lt;/a&gt;  {% block content %} &lt;form method="post" action=""&gt;   {{form.as_p}} &lt;input type="submit" value="Login"&gt; &lt;/form&gt; {% endblock %}  
import fileinput  for line in fileinput.input(): ...  
from mailer import Mailer from mailer import Message  message = Message(From="me@example.com"                   To=["you@example.com" "him@example.com"]) message.Subject = "Kitty with dynamite" message.Body = """Kitty go boom!""" message.attach("kitty.jpg")  sender = Mailer('smtp.example.com') sender.login("username" "password") sender.send(message)  from mailer import Mailer from mailer import Message  message = Message(From="me@example.com"                   To="you@example.com"                   charset="utf-8") message.Subject = "An HTML Email" message.Html = """This email uses &lt;strong&gt;HTML&lt;/strong&gt;!""" message.Body = """This is alternate text."""  sender = Mailer('smtp.example.com') sender.send(message)  
from array import array output_file = open('file' 'wb') float_array = array('d' [3.14 2.7 0.0 -1.0 1.1]) float_array.tofile(output_file) output_file.close()  input_file = open('file' 'rb') float_array = array('d') float_array.fromstring(input_file.read())  array.array .fromfile 
import Queue  # Initialise queue as: queue = Queue.Queue() Finished = object()   # Unique marker the producer will put in the queue when finished  # Consumer: try:     while True:         next_item = self.queue.get(timeout=15)         if next_item is Finished: break         yield next_item  except Queue.Empty:     print "Timeout exceeded"  queue.put(item) 
# encoding: utf-8 name = 'helló wörld from two'  # encoding: utf-8 from __future__ import unicode_literals import two name = 'helló wörld from one' print name + two.name  python one.py Traceback (most recent call last):   File "one.py" line 5 in &lt;module&gt;     print name + two.name UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 4: ordinal not in range(128)  two.name unicode_literals one.name print name + two.name.decode('utf-8') # encoding: utf-8 html = '&lt;html&gt;&lt;body&gt;helló wörld&lt;/body&gt;&lt;/html&gt;' if isinstance(html unicode):     html = html.encode('utf-8') print 'DEBUG: %s' % html  DEBUG: &lt;html&gt;&lt;body&gt;helló wörld&lt;/body&gt;&lt;/html&gt;  import unicode_literals # encoding: utf-8 from __future__ import unicode_literals html = '&lt;html&gt;&lt;body&gt;helló wörld&lt;/body&gt;&lt;/html&gt;' if isinstance(html unicode):     html = html.encode('utf-8') print 'DEBUG: %s' % html  Traceback (most recent call last):   File "test.py" line 6 in &lt;module&gt;     print 'DEBUG: %s' % html UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 16: ordinal not in range(128)  'DEBUG: %s' html print str('DEBUG: %s') % html print 'DEBUG: %s' % html.decode('utf-8') 
import re  pattern = re.compile(r"\[\[([\w \|]+)\]\]") text = "blah blah [[Alexander of Paris|poet named Alexander]] bldfkas" results = pattern.findall(text)  output = [] for link in results:     output.append(link.split("|")[0])  # outputs ['Alexander of Paris']  import re  pattern = re.compile(r"\[\[([\w ]+)(\|[\w ]+)?\]\]") text = "[[a|b]] fdkjf [[c|d]] fjdsj [[efg]]" results = pattern.findall(text)  # outputs [('a' '|b') ('c' '|d') ('efg' '')]  print [link[0] for link in results]  # outputs ['a' 'c' 'efg']  pattern = re.compile(r"\[\[([\w ]+)(?:\|[\w ]+)?\]\]") text = "[[a|b]] fdkjf [[c|d]] fjdsj [[efg]]" results = pattern.findall(text)  # outputs ['a' 'c' 'efg']  
urllib2.urlopen(base_url)  &gt;&gt;&gt; import os &gt;&gt;&gt; os.uname()  ('Darwin' 'skom.local' '9.6.0' 'Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386' 'i386')  
from django.forms import extras ...     DOB = forms.DateField(widget=extras.SelectDateWidget)  
import locale lang encoding = locale.getdefaultlocale() mystring = u"blabla" print mystring.encode(encoding)  
import socket socket.setdefaulttimeout(5.0)    ... try:    ... except socket.timeout:    (it timed out retry)  
cls.text.see(Tkinter.END) 
def dict_factory(cursor row):     d = {}     for idxcol in enumerate(cursor.description):         d[col[0]] = row[idx]     return d  from pysqlite2 import dbapi2 as sqlite conn = sqlite.connect(...) conn.row_factory = dict_factory  
import logging import types  class ExtendedLogRecord(logging.LogRecord):      def getMessage(self):         """         Return the message for this LogRecord.          Return the message for this LogRecord after merging any user-supplied         arguments with the message.         """         if not hasattr(types "UnicodeType"): #if no unicode support...             msg = str(self.msg)         else:             try:                 msg = str(self.msg)             except UnicodeError:                 msg = self.msg      #Defer encoding till later         if self.args:             msg +=' '+' '.join(map(strself.args))         return msg  #Patch the logging default logging class logging.RootLogger.makeRecord=lambda self*args: ExtendedLogRecord(*args)  some_dict={'foo':14'bar':15} logging.error('text'15'some dictionary'some_dict)  ERROR:root:text 15 some dictionary {'foo': 14 'bar': 15}  
app = wx.App(redirect=True)  app = wx.App(redirect=Truefilename="mylogfile.txt")  
some_string.tr('a-zA-Z' 'c-zabC-ZAB') 
spyder import wx.py.crust ... ... # then call  crustFrame = wx.py.crust.CrustFrame(parent = self) crustFrame.Show()  self wx.Frame self 
import inspect dis opcode  def check_status():      try:         frame = inspect.currentframe().f_back         next_opcode = opcode.opname[ord(frame.f_code.co_code[frame.f_lasti+3])]         if next_opcode == "POP_TOP":              # or next_opcode == "RETURN_VALUE":             # include the above line in the if statement if you consider "return check_status()" to be assignment             print "I was not assigned"             print "Pretty printer status check 0.02v"             print "NOTE: This is so totally not written for giant robots"             return     finally:         del frame          # do normal routine      info = {'cond_op': 1 't_canoncharge': 1342 'stage_booster': 5}      return info  # no assignment     def test1():     check_status()  # assignment def test2():     a = check_status()  # could be assignment (check above for options) def test3():     return check_status()  # assignment def test4():     a = []     a.append(check_status())     return a  import inspect  def check_status():     frame = inspect.currentframe()     try:         if frame.f_back.f_code.co_name == "&lt;module&gt;" and frame.f_back.f_code.co_filename == "&lt;stdin&gt;":             print "Pretty printer status check 0.02v"             print "NOTE: This is so totally not written for giant robots"     finally:         del frame      # do regular stuff        return {'cond_op': 1 't_canoncharge': 1342 'stage_booster': 5}  def test():     check_status()   &gt;&gt;&gt; check_status() Pretty printer status check 0.02v NOTE: This is so totally not written for giant robots {'cond_op': 1 't_canoncharge': 1342 'stage_booster': 5}  &gt;&gt;&gt; a=check_status() Pretty printer status check 0.02v NOTE: This is so totally not written for giant robots  &gt;&gt;&gt; a {'cond_op': 1 't_canoncharge': 1342 'stage_booster': 5}  test() &gt;&gt;&gt;  
import shutil shutil.rmtree("dir-you-want-to-remove")  
&gt;&gt;&gt; print re.findall(r'(\w+)="(.*?)"' string) [('n' 'Foo Bar') ('t' '5') ('s' '10') ('l' '25')]  re.findall re.split 
* ur'^(\d+)\s?[x*\u00d7]\s?(\d+)(\w{24})$'  
raise ValueError('invalid gender %r' % gender)  
class SomeModel:     def some_method(self):         from myapp.factories import SomeFactory         SomeFactory().do_something()  
csvn 
import wx import wx.lib.agw.foldpanelbar as fpb  class frame(wx.Frame):     def __init__(self *args **kwargs):         wx.Frame.__init__(self *args **kwargs)         self.text_ctrl_1=wx.TextCtrl(self -1 size=(400 100)                                      style=wx.TE_MULTILINE)         self.fpb = fpb.FoldPanelBar(self -1             style=fpb.FPB_HORIZONTAL|fpb.FPB_DEFAULT_STYLE)         self.fold_panel = self.fpb.AddFoldPanel("Thing")         self.thing = wx.TextCtrl(self.fold_panel -1 size=(400 -1)                                  style=wx.TE_MULTILINE)         self.fpb.AddFoldPanelWindow(self.fold_panel self.thing)         self.fpb.Bind(fpb.EVT_CAPTIONBAR self.onCaptionBar)         self.sizer_1 = wx.BoxSizer(wx.HORIZONTAL)         self.sizer_1.Add(self.text_ctrl_1 1 wx.EXPAND)         self.sizer_1.Add(self.fpb 0 wx.EXPAND)         self.SetSizer(self.sizer_1)         self.ResizeFPB()      def onCaptionBar(self event):         event.Skip()         wx.CallAfter(self.ResizeFPB)      def ResizeFPB(self):         sizeNeeded = self.fpb.GetPanelsLength(0 0)[2]         self.fpb.SetMinSize((sizeNeeded self.fpb.GetSize()[1]))         self.Fit()   app = wx.App(0) f = frame(None) f.Show() app.MainLoop()  
InstanceMethodWrapper __get__ return self 
page = 1 while page &lt; num_pages + 1:     # do stuff that possibly updates num_pages here     page += 1  
def wrapper(func *args):  args args     func(*args)  args def wrapper1(func *args): # with star     func(*args)  def wrapper2(func args): # without star     func(*args)  def func2(x y z):     print x+y+z  wrapper1(func2 1 2 3) wrapper2(func2 [1 2 3])  wrapper2 args [123] 
&gt;&gt;&gt; s = "This must not b3 delet3d but the number at the end yes 134411" &gt;&gt;&gt; s = re.sub(" \d+" " " s) &gt;&gt;&gt; s 'This must not b3 delet3d but the number at the end yes '  s = re.sub("^\d+\s|\s\d+\s|\s\d+$" " " s)  
save commit save(commit=False) save def save(self commit=True):     m = super(CallResultTypeForm self).save(commit=False)     # do custom stuff     if commit:         m.save()     return m  save self.callResult self.fields['callResult'] ManyToManyField :P from django.db.models import AutoField   def copy_model_instance(obj):       """     Create a copy of a model instance.      M2M relationships are currently not handled i.e. they are not copied. (Fortunately you don't have any in this case)     See also Django #4027. From http://blog.elsdoerfer.name/2008/09/09/making-a-copy-of-a-model-instance/     """       initial = dict([(f.name getattr(obj f.name)) for f in obj._meta.fields if not isinstance(f AutoField) and not f in obj._meta.parents.values()])       return obj.__class__(**initial)    class CallResultTypeForm(ModelForm):     callResult = ModelMultipleChoiceField(queryset=CallResult.objects.all())     campaign = ModelMultipleChoiceField(queryset=Campaign.objects.all())     callType = ModelMultipleChoiceField(queryset=CallType.objects.all())      def save(self commit=True *args **kwargs):         m = super(CallResultTypeForm self).save(commit=False *args **kwargs)         results = []         for cr in self.callResult:             for c in self.campain:                 for ct in self.callType:                     m_new = copy_model_instance(m)                     m_new.callResult = cr                     m_new.campaign = c                     m_new.calltype = ct                     if commit:                         m_new.save()                     results.append(m_new)          return results  CallResultTypeForm 
class ClassMeta(metaclass=M):   pass  __metaclass__ 
&gt;&gt;&gt; import re &gt;&gt;&gt; myString = "HI there. You should higher that person for the job. Hi hi." &gt;&gt;&gt; keyword = "hi" &gt;&gt;&gt; search = re.compile(r'\b(%s)\b' % keyword re.I) &gt;&gt;&gt; search.sub('&lt;b&gt;\\1&lt;/b&gt;' myString) '&lt;b&gt;HI&lt;/b&gt; there. You should higher that person for the job. &lt;b&gt;Hi&lt;/b&gt; &lt;b&gt;hi&lt;/b&gt;.'  
readlines() str.strip() lstrip() rstrip() file file lines = [] f = open(filename) for line in f:     if not line.startswith('com'):         lines.append(line.strip())  lines = [] f = open(filename) for line in f:     if line.strip() and not line.startswith('com'):         lines.append(line.strip())  lines = [line.strip() for line in open(filename) if line.strip() and not line.startswith('com')]  
def loop(fn):     for i in xrange(n): f()  loop(lambda: &lt;insert expression here&gt; 5)  i _ for _ in range(n):     do_something()  _ &gt;&gt;&gt; 1+2 3 &gt;&gt;&gt; _ 3  &gt;&gt;&gt; for _ in xrange(10): pass ... &gt;&gt;&gt; _ 9 &gt;&gt;&gt; 1+2 3 &gt;&gt;&gt; _ 9  identifier ::= (letter|"_") (letter | digit | "_")*  
symbolList=[] for line in open('datafile.txt''r'): if '.o' in line:     tempname=line.split()[-1][0:-2]             pass  if 'FUNC' not in line:     pass  else:     symbolList.append((tempnameline.split('|')[0]))  fullDict={} for line in open('datafile.txt''r'):     if '.o' in line:         tempname=line.split()[-1][0:-2]     if '|' not in line:         pass     else:         tempDict={}             dataList=[dataItem.strip() for dataItem in line.strip().split('|')]             name=dataList[0].strip()             tempDict['Value']=dataList[1]             tempDict['Class']=dataList[2]             tempDict['Type']=dataList[3]             tempDict['Size']=dataList[4]             tempDict['Line']=dataList[5]             tempDict['Section']=dataList[6]             tempDict['o.name']=tempname             fullDict[name]=tempDict             tempDict={}  funcDict={} for record in fullDict:     if fullDict[record]['Type']=='FUNC':         funcDict[record]=fullDict[record]  
changed_list = [int(f) if f.isdigit() else f for f in original_list]  
QString chardet chardet.detect(self.ui.TextFrom.toPlainText())  chardet.detect(str(self.ui.TextFrom.toPlainText()))  
while True:     sleep(1)  stopped stopped = Event() def worker():     while not stopped.is_set():         try:             item = q.get_nowait()             do_work(item)         except Empty:      # import the Empty exception from the Queue module             stopped.wait(1)  stopped False KeyboardInterrupt try:     while not stopped.is_set():         stopped.wait(1) except KeyboardInterrupt:     stopped.set()  q.join() KeyboardInterrupt from signal import signal SIGINT def stop(signum frame):     stopped.set() signal(SIGINT stop)  q.join() 
__slots__ m   m = None # my attribute  m m __init__ class MyClass(object):   __slots__ = ("m")   def __init__(self):     self.m = None  a = MyClass() a.m = "?"  __slots__ 1 (1) 1 (1) 
def myview(request):     try:         try:             [...]         except MyExceptionClass e:             [...]     finally:         render_to_response(             'template.html' {} context_instance = RequestContext(request)         )  
import bisect  float_list = [line[-1] for line in foo] index = bisect.bisect(float_list random.random()) if index &lt; len(float_list)     result = foo[index] else:     result = None # None exists  
recv() recv() file.readline() read() recv() select() s.setblocking(False) 
import codecs  data       = "Let's just pretend that this is binary data ok?" uuencode   = codecs.getencoder("uu") data_uu n = uuencode(data) uudecode   = codecs.getdecoder("uu") decoded m = uudecode(data_uu)  print """* The initial input: %(data)s * Encoding these %(n)d bytes produces: %(data_uu)s * When we decode these %(m)d bytes we get the original data back: %(decoded)s""" % globals()  
import lxml.html  tree = lxml.html.fromstring(htmlcode) for link in tree.findall(".//a"):     url = link.get("href")     if url.endswith(".mp3"):         print url  
from BeautifulSoup import BeautifulSoup page = BeautifulSoup('&lt;foo bar="asdf" blah="123"&gt;xyz&lt;/foo&gt;') for attr value in page.find('foo').attrs:     print attr "=" value  # Prints: # bar = asdf # blah = 123  
newDict = eval(repr(myDict).lower())  newDict = dict((k1.lower()                 dict((k2.lower()                       [s.lower() for s in v2]) for k2 v2 in v1.iteritems()))                for k1 v1 in myDict.iteritems())  
return getnormal(self)  getnormal(self)  def getNormal(self):     normal = 0     while normal &lt; 1:         normal = normalvariate(4020)     return normal  
class A(object):     def __init__(self var=None):         if var is None:             var = []         self._var = var  
paramstyle paramstyle paramstyle paramstyles 
foo bar_for_foo_mixin class myfoo(bar_for_foo_mixin foo) bar foo.register(myfoo) 
pwd grp from pwd import getpwnam    print getpwnam('someuser')[2] # or print getpwnam('someuser').pw_uid print grp.getgrnam('somegroup')[2]  
newlist = [s for s in a_list if not any(r(s) for r in regex_list)]  a_list 
for line in original: original.readline() for line in original:     ...  while True:     line = original.readline()     if not line: break     ...  
FindMachine("kubuntu") IDispatch interface comtypes Python 2.5.4 (r254:67916 Dec 23 2008 15:10:54) [MSC v.1310 32 bit (Intel)] on win32 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; from comtypes.client import CreateObject &gt;&gt;&gt; box = CreateObject("VirtualBox.VirtualBox") &gt;&gt;&gt; m = box.FindMachine("Fedora") &gt;&gt;&gt; print m.State 4 &gt;&gt;&gt; print m.CpuCount 1 &gt;&gt;&gt; print m.Name Fedora &gt;&gt;&gt;  Index: automation.py =================================================================== --- automation.py   (revision 507) +++ automation.py   (working copy) @@ -7536 +7538 @@      c_float: VT_R4      c_double: VT_R8  +    c_ulonglong: VT_I8 +      VARIANT_BOOL: VT_BOOL       BSTR: VT_BSTR  
print print("Hello World")  
urlparse ::::: ":::::" ///// "" "///" "///" "bad://///worse/////" 
code/speed.py speed = Command('speed_analysis.tex' [] 'python code/speed.py -o $TARGET')  report.pdf report.tex report.tex speed_analysis.tex Depends(report speed)  scons --tree=all  + report.pdf   + report.tex   + speed_analysis.tex     + code/speed.py     + /usr/bin/python   + /usr/bin/pdflatex  speed.py Command('speed_analysis.tex' 'code/speed.py' 'python $SOURCE -o $TARGET')  
null_ptr = POINTER(c_float)() pa_stream_peek(stream null_ptr ctypes.c_ulong(length)) null_ptr[0] null_ptr[5] # etc  
print 'there are {0:&lt;10} students and {1:&lt;10} teachers'.format(scnt tcnt)  % - format &lt; &gt; 
output 
for element in selector:     print element.text_content()  
func_code.co_varnames[:func_code.co_argcount] import inspect argnames varargs kwargs defaults = inspect.getargspec(func)  **kwargs *args getargspec 
test_html &lt;html&gt; &lt;head&gt;&lt;title&gt;Test title&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;p&gt;Some paragraph&lt;/p&gt; Useless Text &lt;a href="http://stackoverflow.com"&gt;Some link&lt;/a&gt;not a link &lt;a href="http://python.org"&gt;Another link&lt;/a&gt; &lt;/body&gt;&lt;/html&gt;  from BeautifulSoup import BeautifulSoup  test_html = load_html_from_above() soup = BeautifulSoup(test_html)  for t in soup.findAll(text=True):     text = unicode(t)     for vowel in u'aeiou':         text = text.replace(vowel u'')      t.replaceWith(text)  print soup  &lt;html&gt; &lt;head&gt;&lt;title&gt;Tst ttl&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;p&gt;Sm prgrph&lt;/p&gt; Uslss Txt &lt;a href="http://stackoverflow.com"&gt;Sm lnk&lt;/a&gt;nt  lnk &lt;a href="http://python.org"&gt;Anthr lnk&lt;/a&gt; &lt;/body&gt;&lt;/html&gt;  
webbrowser import webbrowser webbrowser.open('http://www.google.com')  webbrowser.get('firefox').open_new_tab('http://www.google.com')  
sudo updatedb locate libigraph.so.0 echo $LD_LIBRARY_PATH export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/yourdirhere ldconfig -n /yourdirhere 
work_instance.variants = [&lt;some iterable of variants&gt;]  work variant variant work 
items() keys() values() iteritems() iterkeys() itervalues() 
__getattribute__ functools.partial from functools import partial  class DerivedClass(str):      def __new__(cls string):         ob = super(DerivedClass cls).__new__(cls string)         return ob      def upper(self):         #overridden new functionality. Return ob of type DerivedClass. Great.         caps = super(DerivedClass self).upper()         return DerivedClass(caps + '123')      def __getattribute__(self name):         func = str.__getattribute__(self name)         if name == 'upper':             return func          if not callable(func):             return func          def call_me_later(*args **kwargs):             result = func(*args **kwargs)             # Some str functions return lists ints etc             if isinstance(result basestring:                 return DerivedClass(result)             return result          return partial(call_me_later)  
[index for indexline in enumerate(open('myfile.txt')) if 'mystring' in line]  
from elixir import Entity has_field setup_all ManyToOne OneToMany Field Unicode using_options using_table_options GenericProperty from sqlalchemy.orm import relation from sqlalchemy import ForeignKeyConstraint  class Company(Entity):     using_options(tablename='company')      company_id = Field(Unicode(32) primary_key=True)     display_name = Field(Unicode(255))     pages = OneToMany('Page')  class Page(Entity):     using_options(tablename='page')      company = ManyToOne('Company' colname='company_id' primary_key=True)     url = Field(Unicode(255) primary_key=True)     attrs = OneToMany('Attr')  class Attr(Entity):     using_options(tablename='attr')      page = ManyToOne('Page' colname=['company_id' 'url'] primary_key=True)     attr_key = Field(Unicode(255) primary_key=True)      using_table_options(ForeignKeyConstraint(['company_id'] ['company.company_id']))     company = GenericProperty(relation(Company))  
def func( *files ):     for f in files:          doSomethingWithFile( f )  func( *['file1''file2''file3'] ) #Is treated like func('file1''file2''file3') func( 'file1' )  
import os def oldest_file_in_tree(rootfolder extension=".avi"):     return min(         (os.path.join(dirname filename)         for dirname dirnames filenames in os.walk(rootfolder)         for filename in filenames         if filename.endswith(extension))         key=lambda fn: os.stat(fn).st_mtime)  n import os heapq def oldest_files_in_tree(rootfolder count=1 extension=".avi"):     return heapq.nsmallest(count         (os.path.join(dirname filename)         for dirname dirnames filenames in os.walk(rootfolder)         for filename in filenames         if filename.endswith(extension))         key=lambda fn: os.stat(fn).st_mtime)  .endswith oldest_files_in_tree("/home/user" 20 (".avi" ".mov"))  import os def files_to_delete(rootfolder extension=".avi"):     return sorted(         (os.path.join(dirname filename)          for dirname dirnames filenames in os.walk(rootfolder)          for filename in filenames          if filename.endswith(extension))         key=lambda fn: os.stat(fn).st_mtime)         reverse=True)  reverse=True file_list.pop() os.statvfs import os def free_space_up_to(free_bytes_required rootfolder extension=".avi"):     file_list= files_to_delete(rootfolder extension)     while file_list:         statv= os.statvfs(rootfolder)         if statv.f_bfree*statv.f_bsize &gt;= free_bytes_required:             break         os.remove(file_list.pop())  statvfs.f_bfree statvfs.f_bsize rootfolder 
random.py randomchoice.py random.py random.pyc import random 
applications = {   'product.example.com': webapp.WSGIApplication([     ('/' IndexHandler)     ('/(.*)' ProductHandler)])   'user.example.com': webapp.WSGIApplication([     ('/' IndexHandler)     ('/(.*)' UserHandler)]) }  def main():   run_wsgi_app(applications[os.environ['HTTP_HOST']])  if __name__ == '__main__':   main()  
#!C:/Python25/python.exe  #!C:/Python25/python.exe -u  msvcrt.setmode(sys.stdin.fileno() os.O_BINARY)  stdin 
SELECT SELECT rowcount rowcount fetchall() 
raise "SomeNameOfAnExceptionClass"  
C = MyReallyBigClassNameWhichIHateToType  
lambda i 9 functools.partial() def test():     def makefunc(i):         return lambda x: p(i x)     a = []     for i in range(10):         a.append(makefunc(i))     return a  
range(1 600851475143) xrange range xrange for i in xrange(1 600851475143):   print i  range x = 1 &lt;&lt; 200 print list(xrange(x x + 3))  [1606938044258990275541962092341162602522202993782792835301376L 1606938044258990275541962092341162602522202993782792835301377L 1606938044258990275541962092341162602522202993782792835301378L]  def bigrange(a b = None):   if b is None:     b = a     a = 0   while a &lt; b:     yield a     a += 1  for i in bigrange(1 600851475143):   print i  continue i = 1 - 1 while i &lt; 600851475143 - 1:   i += 1   print i  
try:     do_something_crazy except AttributeError:     print 'there was an AttributeError' except NameError:     print 'there was a NameError' except: print 'something else failed miserably'  # No idea if this is the right import but they should be somewhere in that module import dbi  try:     cursor.execute("delete from TABLE") except dbi.internal-error:     print 'internal-error' except dbi.program-error:     print 'program-error'  
Player.objects.values('player_type').order_by().annotate(Count('player_type'))  values('player_type') player_type GROUP BY order_by() SELECT GROUP BY 
import getpass getpass.getuser() 'kostya'  
&gt;&gt;&gt; (8885558**0.5)**2 8885557.9999999981 &gt;&gt;&gt; sqrt(8885558)**2 8885558.0000000019  &gt;&gt;&gt; 2**1023.99999999999 1.7976931348498497e+308  &gt;&gt;&gt; (sqrt(2**1023.99999999999))**2 1.7976931348498495e+308 &gt;&gt;&gt; ((2**1023.99999999999)**0.5)**2 1.7976931348498499e+308  &gt;&gt;&gt; ((2**1023.99999999999)**0.5)**2 - 2**1023.99999999999 1.9958403095347198e+292 &gt;&gt;&gt; (sqrt(2**1023.99999999999))**2 - 2**1023.99999999999 -1.9958403095347198e+292  math.pow() pow() __builtin__.pow() ** pow() math.sqrt pow 
import time from threading import Thread  def noInterrupt():     for i in xrange(4):         print i         time.sleep(1)  a = Thread(target=noInterrupt) a.start() a.join() print "done"   0 1 2 3 Traceback (most recent call last):   File "C:\Users\Admin\Desktop\test.py" line 11 in &lt;module&gt;     a.join()   File "C:\Python26\lib\threading.py" line 634 in join     self.__block.wait()   File "C:\Python26\lib\threading.py" line 237 in wait     waiter.acquire() KeyboardInterrupt  import time from threading import Thread  def noInterrupt(path obj):     try:         file = open(path 'w')         dump(obj file)     finally:         file.close()  a = Thread(target=noInterrupt args=(pathobj)) a.start() a.join()  
os.path os.path.join(os.path.abspath(os.path.dirname(__file__)) 'logs')  os.path.sep  
os.walk results = [] if regex_search:     p = re.compile(__searchtext__) for dir subdirs subfiles in os.walk('c:/docs/2009'):     for name in fnmatch.filter(subfiles '*.txt'):         fn = os.path.join(dir name)         with open(fn 'r') as f:             if regex_search:                 results += [(fnlineno) for lineno line in enumerate(f) if p.search(line)]             else:                 results += [(fnlineno) for lineno line in enumerate(f) if line.find(__searchtext__) &gt;= 0]  
s1 = u"%s"%a # works u"%s" % repr([a]).decode('utf-8') '[%s]' % u''.join(unicode(x) for x in [aa]) 
import re  def work():   to_find = re.compile("cat|fish|dog")   search_str = "blah fish cat dog haha"   match_obj = to_find.search(search_str)   the_index = match_obj.start()  # produces 5 the index of fish   which_word_matched = match_obj.group()  # "fish"   # Note if no match match_obj is None  def wordlist_to_regex(words):     escaped = map(re.escape words)     combined = '|'.join(sorted(escaped key=len reverse=True))     return re.compile(combined)  &gt;&gt;&gt; r.search('smash atomic particles').span() (6 10) &gt;&gt;&gt; r.search('visit usenet:comp.lang.python today').span() (13 29) &gt;&gt;&gt; r.search('a north\south division').span() (2 13) &gt;&gt;&gt; r.search('012cat').span() (3 6) &gt;&gt;&gt; r.search('0123dog789cat').span() (4 7)  import random import re import string import sys  def main(args):     words = []     letters_and_digits = "%s%s" % (string.letters string.digits)     for i in range(2000):         chars = []         for j in range(10):             chars.append(random.choice(letters_and_digits))         words.append(("%s"*10) % tuple(chars))     search_for = re.compile("|".join(words))     first middle last = words[0] words[len(words) / 2] words[-1]     search_string = "%s %s %s" % (last middle first)     match_obj = search_for.search(search_string)     if match_obj is None:         print "Ahhhg"         return     index = match_obj.start()     which = match_obj.group()     if index != 0:         print "ahhhg"         return     if words[-1] != which:         print "ahhg"         return      print "success!!! Generated 2000 random words compiled re and was able to perform matches."  if __name__ == "__main__":     main(sys.argv)  &gt;&gt;&gt; search_str = "01catdog" &gt;&gt;&gt; test1 = re.compile("cat|catdog") &gt;&gt;&gt; match1 = test1.search(search_str) &gt;&gt;&gt; match1.group() 'cat' &gt;&gt;&gt; match1.start() 2 &gt;&gt;&gt; test2 = re.compile("catdog|cat")  # reverse order &gt;&gt;&gt; match2 = test2.search(search_str) &gt;&gt;&gt; match2.group() 'catdog' &gt;&gt;&gt; match2.start() 2  
unicode(content)  content content.renderContents()  
if 'myVar' in locals():   # myVar exists.  if 'myVar' in globals():   # myVar exists.  if hasattr(obj 'attr_name'):   # obj.attr_name exists.  
response.info() response.info().headers 
'some string' a = 'hi mom' a = 'next value'  'hi mom' 'hi mom' 
.bash_profile PYTHONPATH 
p = User(name="Fred" email="fred@example.com")  # In User class declaration @classmethod def create(cls name email):   return cls(name=name email=email)  # Use it p = User.create("Fred" "fred@example.com")  
import datetime ist_time = datetime.utcnow() + datetime.timedelta(hours=5 minutes = 30) # Turn this into a time object (no day information). ist_time = ist_time.time() if datetime.time(9 55) &lt;= ist_time &lt;= datetime.time(16 1):    ...  
python -m cProfile --sort cumulative myScript.py  import inspect print inspect.getframeinfo(inspect.currentframe().f_back)[2]  record = {}  caller = inspect.getframeinfo(inspect.currentframe().f_back)[2] record[caller] = record.get(caller 0) + 1  print sorted(record.items() key=lambda a: a[1])  
def number_of_ones(n):     sum = 0     while n != 0:         sum += lookup_table[n &amp; 0xff]         n &gt;&gt;= 8     return sum  
clear tab = {1: (100 None) {'acs': (20 None)})        20: ((30 'hst_ota') {'ota': (30 'hst_ota') 'noota': (30 None)})        30: ((None None) {'acs': (10000None) 'cos':(11000None)})        etc etc  def f(icss):   kws = set(icss.split(''))   N = 1   while N in tab:     stuff others = tab[N]     found = kws &amp; set(others)     if found:       # maybe error if len(found) &gt; 1 ?       stuff = others[found.pop()]     N word_to_add = stuff     if word_to_add is not None:       print word_to_add  
comment_re = re.compile(     r'(^)?[^\S\n]*/(?:\*(.*?)\*/[^\S\n]*|/[^\n]*)($)?'     re.DOTALL | re.MULTILINE )  def comment_replacer(match):     startmidend = match.group(123)     if mid is None:         # single line comment         return ''     elif start is not None or end is not None:         # multi line comment at start or end of a line         return ''     elif '\n' in mid:         # multi line comment with line break         return '\n'     else:         # multi line comment without line break         return ' '  def remove_comments(text):     return comment_re.sub(comment_replacer text)  (^)? MULTILINE [^\S\n] /\*(.*?)\*/ DOTALL . //[^\n] . DOTALL ($)? MULTILINE &gt;&gt;&gt; s = ("qwe /* 123\n"          "456\n"          "789 */ asd /* 123 */ zxc\n"          "rty // fgh\n") &gt;&gt;&gt; print '"' + '"\n"'.join( ...     remove_comments(s).splitlines() ... ) + '"' "qwe" "asd zxc" "rty" &gt;&gt;&gt; comments_test = ("hello // comment\n" ...                  "line 2 /* a comment */\n" ...                  "line 3 /* a comment*/ /*comment*/\n" ...                  "line 4 /* a comment\n" ...                  "continuation of a comment*/ line 5\n" ...                  "/* comment */line 6\n" ...                  "line 7 /*********\n" ...                  "********************\n" ...                  "**************/\n" ...                  "line ?? /*********\n" ...                  "********************\n" ...                  "********************\n" ...                  "********************\n" ...                  "********************\n" ...                  "**************/\n") &gt;&gt;&gt; print '"' + '"\n"'.join( ...     remove_comments(comments_test).splitlines() ... ) + '"' "hello" "line 2" "line 3 " "line 4" "line 5" "line 6" "line 7" "line ??" "line ??"  
\n 
wx.GCDC wx.DC 
copy.deepcopy __copy__ __deepcopy__ clone() 
In [1]: a = [123]  In [2]: b = [234]  In [3]: map(sum zip(ab)) Out[3]: [3 5 7]  In [5]: from itertools import izip  In [6]: map(sum izip(ab)) Out[6]: [3 5 7]  
&gt;&gt;&gt; print date.fromtimestamp(1241711346274/1000.0) 2009-05-07  
def _unidiff_output(expected actual):     """     Helper function. Returns a string containing the unified diff of two multiline strings.     """      import difflib     expected=expected.splitlines(1)     actual=actual.splitlines(1)      diff=difflib.unified_diff(expected actual)      return ''.join(diff)  
print(sum(decimal.Decimal(1) / i for i in range(1 31)))  Decimal sum var var = lambda i: decimal.Decimal(str(1.0 / i))  str Decimal sum sum print(sum(var(i) for i in range(131))) print(sum(map(var range(1 31))))  one = decimal.Decimal(1) unitFractions = (one / i for i in itertools.count(1)) print(sum(itertools.islice(unitFractions 30)))  &gt;&gt;&gt; unitFractions = (fractions.Fraction(1 i) for i in itertools.count(1)) &gt;&gt;&gt; print(sum(itertools.islice(unitFractions 30))) 9304682830147/2329089562800  
blank=True null=True parent 
class Round(models.Model):             number = models.IntegerField()     round_type = models.CharField(max_length=1 default="n" choices=CHOICES)     tournament = models.ForeignKey(Tournament)     players = models.ManyToManyField(Player related_name="rounds")     winner = models.ForeignKey(Player null=True related_name="round_winner")   # grab a player  p = Player.objects.get(name='Tom')  # see what rounds this player played in rounds_played = p.rounds.all()  # who did this player play against? [r.players for r in rounds_played]  # to see all rounds this player won p.round_winner.all()  
GetCommandLineArgvW win32_unicode_argv.py """ win32_unicode_argv.py  Importing this will replace sys.argv with a full Unicode form. Windows only.  From this site with adaptations:       http://code.activestate.com/recipes/572200/  Usage: simply import this module into a script. sys.argv is changed to be a list of Unicode strings. """   import sys  def win32_unicode_argv():     """Uses shell32.GetCommandLineArgvW to get sys.argv as a list of Unicode     strings.      Versions 2.x of Python don't support Unicode in sys.argv on     Windows with the underlying Windows API instead replacing multi-byte     characters with '?'.     """      from ctypes import POINTER byref cdll c_int windll     from ctypes.wintypes import LPCWSTR LPWSTR      GetCommandLineW = cdll.kernel32.GetCommandLineW     GetCommandLineW.argtypes = []     GetCommandLineW.restype = LPCWSTR      CommandLineToArgvW = windll.shell32.CommandLineToArgvW     CommandLineToArgvW.argtypes = [LPCWSTR POINTER(c_int)]     CommandLineToArgvW.restype = POINTER(LPWSTR)      cmd = GetCommandLineW()     argc = c_int(0)     argv = CommandLineToArgvW(cmd byref(argc))     if argc.value &gt; 0:         # Remove Python executable and commands if present         start = argc.value - len(sys.argv)         return [argv[i] for i in                 xrange(start argc.value)]  sys.argv = win32_unicode_argv()  import sys import win32_unicode_argv  sys.argv optparse 
"string" """ ''' import re sanitized = re.sub(r'(#.*)|\'(?:[^\'\\]+|\\.)*\'|"(?:[^"\\]+|\\.)*"'     lambda match: match.group(1) or '"string"' source_code)  \" \\ \n \\ \\" \\\" 
$ cat /tmp/test #!/usr/bin/env escript main(_) -&gt; io:format("Hello World!\n"). $ chmod +x /tmp/test $ /tmp/test Hello World!  
import tempfile  print tempfile.gettempdir() # prints the current temporary directory  f = tempfile.TemporaryFile() f.write('something on temporaryfile') f.seek(0) # return to beginning of file print f.read() # reads data back from the file f.close() # temporary file is automatically deleted here  TMPDIR TEMP TMP Wimp$ScrapDir C:\TEMP C:\TMP \TEMP \TMP /tmp /var/tmp /usr/tmp 
Python 3.0 inspect.getargspec Signature signature from inspect import signature  def someMethod(self arg1 kwarg1=None):     pass  sig = signature(someMethod)  str str(sig)  # returns: '(self arg1 kwarg1=None)'  sig.parameters params = sig.parameters  print(params['kwarg1']) # prints: kwarg1=20  len sig.parameters print(len(params))  # 3  params Parameter kwarg1 = params['kwarg1'] kwarg1.default # returns: None  parameters 2.x inspect.getargspec Signature 2.x inspect.getargspec getargspec signature 3 inspect.getfullargspec getargspec getargspec from inspect import getfullargspec  def someMethod(self arg1 kwarg1=None):     pass  args = getfullargspec(someMethod)  getargspec getfullargspec NamedTuple print(args) FullArgSpec(args=['self' 'arg1' 'kwarg1'] varargs=None varkw=None defaults=(None) kwonlyargs=[] kwonlydefaults=None annotations={})  
letters = [('a' 'A') ('b' 'B')] for i (lowercase uppercase) in enumerate(letters):     print "Letter #%d is %s/%s" % (i lowercase uppercase)  
include Base Story_* Story_* Story_base Story_list Base {% extends &quot;Base&quot; %} Story_list Base Story_list Base include include Base Story_base Story_* 
mydict = default.copy()  
from BeautifulSoup import BeautifulSoup  html = \ """ &lt;div id=hotlinklist&gt;   &lt;a href="foo1.com"&gt;Foo1&lt;/a&gt;   &lt;div id=hotlink&gt;     &lt;a href="/"&gt;Home&lt;/a&gt;   &lt;/div&gt;   &lt;div id=hotlink&gt;     &lt;a href="/extract"&gt;Extract&lt;/a&gt;   &lt;/div&gt;   &lt;div id=hotlink&gt;     &lt;a href="/sitemap"&gt;Sitemap&lt;/a&gt;   &lt;/div&gt; &lt;/div&gt;"""  soup = BeautifulSoup(html) soup.findAll("div"id="hotlink")[2].a  # &lt;a href="/sitemap"&gt;Sitemap&lt;/a&gt;  
data = '\n'.join(''.join('"%s"' % field for field in row) for row in data) f= open('data.txt' 'w') f.write(data) f.close()  LOAD DATA INFILE 'data.txt' INTO TABLE db2.my_table;  
python myfile.py  print 'Sleeping for ' + wait + ' seconds'  print 'Sleeping for %d seconds' % (wait)  
import sys sys.modules  &gt;&gt;&gt; pprint.pprint(sys.modules) {'UserDict': &lt;module 'UserDict' from 'C:\python26\lib\UserDict.pyc'&gt;  '__builtin__': &lt;module '__builtin__' (built-in)&gt;  '__main__': &lt;module '__main__' (built-in)&gt;  '_abcoll': &lt;module '_abcoll' from 'C:\python26\lib\_abcoll.pyc'&gt; # the rest omitted for brevity  &lt;importheaders.py&gt; from django.utils import simplejson from google.appengine.ext import webapp from google.appengine.ext.webapp import template from google.appengine.ext import db   &lt;mycontroller.py&gt; from importheaders import *  
&gt;&gt;&gt; g = testGen([12]4) &gt;&gt;&gt; g.next() ('yield' [10 2])   # note brackets in print statement because I'm on python 2.5 [10 2] &gt;&gt;&gt; g.next() ('yield' [10 4]) [10 4] &gt;&gt;&gt; g.next() ('yield' [10 7]) [10 7] &gt;&gt;&gt; g.next() ('yield' [12 11]) [12 11] &gt;&gt;&gt; g.next() ('yield' [12 13]) [12 13]  
errno errno __init__ except IOError e: # or "as" if you're using Python 3.0   if e.errno == errno.ENOENT:     ...  
&gt;&gt;&gt; a = [1 2 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; a = [] &gt;&gt;&gt; print(a) [] &gt;&gt;&gt; print(b) [1 2 3]  &gt;&gt;&gt; a = [1 2 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; del a[:]      # equivalent to   del a[0:len(a)] &gt;&gt;&gt; print(a) [] &gt;&gt;&gt; print(b) [] &gt;&gt;&gt; a is b True  &gt;&gt;&gt; a[:] = []  
import re  infile  = open('C:/infile.txt') outfile = open('C:/outfile.txt' 'w')  pattern = re.compile('^(cow\w*)')  for line in infile:     found = pattern.match(line)     if found:         text = "%s\n" % (found.group(0))         outfile.write(text)  outfile.close() infile.close()  
@classmethod @staticmethod 
# Assume both Bob and Fred are derived from Exception &gt;&gt;&gt; class Bob(Bob Fred): ...     pass ...  &gt;&gt;&gt; try: ...     raise Bob() ... except Fred: ...     print 'blah' blah  ... except (Bob Fred):  
__metaclass__ 
class MyModelAdmin(admin.ModelAdmin):         def changelist_view(self request extra_context=None):          if not request.GET.has_key('decommissioned__exact'):              q = request.GET.copy()             q['decommissioned__exact'] = 'N'             request.GET = q             request.META['QUERY_STRING'] = request.GET.urlencode()         return super(MyModelAdminself).changelist_view(request extra_context=extra_context)  
\n copy(i.strip() r"C:\opencascade")  
name photo Student.objects.exclude(photo__isnull=True)  isnull None Student.objects.exclude(photo='')  
db.GqlQuery("SELECT * FROM Schedule WHERE station = $1" foo.key())  Schedule.all().filter("station =" foo.key())  
&gt;&gt;&gt; def g(x): ...   g.r = 4 ... &gt;&gt;&gt; g &lt;function g at 0x0100AD68&gt; &gt;&gt;&gt; g(3) &gt;&gt;&gt; g.r 4  
values = [123]  # Turn list of values into list of Q objects queries = [Q(pk=value) for value in values]  # Take one Q object from the list query = queries.pop()  # Or the Q object with the ones remaining in the list for item in queries:     query |= item  # Query the model Article.objects.filter(query)  
Poll.objects.filter(category='foo').fetch_reverse_relations('choices_set')  
def newFunct(keytestDict['key']):  def newFunct(key val):  newvalue=key+str(testDict[key])  newvalue=key+str(val)  newValue=newFunct(keytestDict[key])  def newFunct(key testDict):  newvalue=key+str(testDict[key])  newValue=newFunct(keytestDict)  
conn conn.adoConn conn.adoConn.CommitTrans() cursor.execute('CREATE DATABASE ...') conn.adoConn.BeginTrans()  
from BeautifulSoup import BeautifulSoup  string = \ """&lt;h1&gt;foo&lt;/h1&gt; &lt;h2&gt;&lt;hr/&gt;bar&lt;/h2&gt;"""  soup = BeautifulSoup(string)  bad_tags = soup.findAll('hr'); [tag.extract() for tag in bad_tags]   for i in soup.findAll(['h1' 'h2']):     print i i.next  # &lt;h1&gt;foo&lt;/h1&gt; foo # &lt;h2&gt;bar&lt;/h2&gt; bar  
--cover-package=foo --cover-package=bar      if options.cover_packages:         for pkgs in [tolist(x) for x in options.cover_packages]:  
def my_view(request):     context = {}     context['items'] = Item.objects.all()     context['anothervalue'] = context['items'][2].name     return render_to_response('template.html' context)  
global yourvar #!/usr/bin/python  total  def checkTotal():     global total     total = 0  #!/usr/bin/env python  total = 0  def doA():     # not accessing global total     total = 10  def doB():     global total     total = total + 1  def checkTotal():     # global total - not required as global is required     # only for assignment - thanks for comment Greg     print total  def main():     doA()     doB()     checkTotal()  if __name__ == '__main__':     main()  doA() 
newDict['bubba'] funcdef ::=               [decorators] "def" funcname "(" [parameter_list] ")"               ":" suite  parameter_list ::=                   (defparameter "")*                 (~~"*" identifier [ "**" identifier]                  | "**" identifier                  | defparameter [""] )  defparameter ::=               parameter ["=" expression]  identifier ::=               (letter|"_") (letter | digit | "_")*  subscription ::=               primary "[" expression_list "]"  
else try IOError try:     operation_that_can_throw_ioerror() except IOError:     handle_the_exception_somehow() else:     # we don't want to catch the IOError if it's raised     another_operation_that_can_throw_ioerror() finally:     something_we_always_need_to_do()  another_operation_that_can_throw_ioerror() operation_that_can_throw_ioerror except try finally else finally IOError 
 _members_ = {'T_UNDEF':0 'T_NAME':1 'T_NUMBER':2 'T_STRING':3 'T_OPERATOR':4 'T_VARIABLE':5 'T_FUNCTION':6}  globals()[key] = value  def __init__(self value):     for kv in self._members_.items():         if v == value:             self.name = k             break  c_uint.__init__(self value)  
dlopen() 
class A(object):     def __init__( self arg1 arg2 ):          etc.  class B(object):     def __init__( self arg1 arg2 ):          etc.  thing_to_make = A argList= ( some pair ) thing_to_make( *argList )  thing_to_make = B argList- ( another pair ) thing_to_make( *argList )  def doSomething( class_ arg1 arg2 ):     thing= class_( arg1 arg2 )     thing.method()     print thing  
def test(filename):     parser = xml.sax.make_parser()     parser.parse(open(filename))  
__init__ 
$ python manage.py sql appname  
from string import Template import optparse  def main():     usage = "usage: %prog options outputname"     p = optparse.OptionParser(usage)     p.add_option('--optiona' '-a' default="")     p.add_option('--optionb' '-b' default="")     options arguments = p.parse_args()     t = Template('Option a is ${optiona} option b is ${optionb}')     print t.substitute(vars(options)) #I'm assuming the uppercase S was a typo.  
SELECT org ROUND(time/604800) - week_offset COUNT(*) FROM table GROUP BY org ROUND(time/604800) - week_offset  SELECT org TO_CHAR(time 'YYYY-IW') COUNT(*) FROM table GROUP BY org TO_CHAR(time 'YYYY-IW')  
from sqlalchemy import * from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker scoped_session  engine = create_engine('sqlite:///:memory:' echo=True) Base = declarative_base(bind=engine) Session = scoped_session(sessionmaker(engine))  class User(Base):     __tablename__ = 'users'      id = Column(Integer primary_key=True)     name = Column(String)     fullname = Column(String)     password = Column(String)  Base.metadata.create_all()  users_table User(name="foo") Session 
__all__ (defun python-add-to-all ()   "take the symbol under the point and add to the __all__ routine"   (interactive)   (save-excursion     (let ((thing (thing-at-point 'word))           p)       (if (progn (goto-char (point-min))                  (re-search-forward "^__all__ = \\[" nil t))           (insert (format "\"%s\" " thing))         (goto-char (point-min))         (insert (format "__all__ = [\"%s\"]\n" thing))))))  
__init__ __setattr__ __dict__ from ConfigParser import  SafeConfigParser  class Section:     def __init__(self name parser):         self.__dict__['name'] = name         self.__dict__['parser'] = parser      def __setattr__(self attr value):         self.__dict__[attr] = str(value)         self.parser.set(self.name attr str(value))  class Configuration(object):     def __init__(self fileName):         self.__parser = SafeConfigParser()         self.__parser.read(fileName)         self.fileName = fileName         for section in self.__parser.sections():             setattr(self section Section(section self.__parser))             for option in self.__parser.options(section):                 setattr(getattr(self section) option                         self.__parser.get(section option))      def __getattr__(self attr):         self.__parser.add_section(attr)         setattr(self attr Section(attr self.__parser))         return getattr(self attr)      def save(self):         f = open(self.fileName 'w')         self.__parser.write(f)         f.close()  c = Configuration('config.ini')  print dir(c) -&gt; will print all sections print dir(c.UserOptions) -&gt; will print all user options print c.UserOptions.sampledate  c.new.value = 10 c.save()  
posix_fadvise(2) POSIX_FADV_SEQUENTIAL 
class Product(models.Model):     name = models.CharField(max_length=50)     product_rank = models.OneToOneField('ProductRank')  class ProductRank(models.Model):     rank = models.IntegerField(default=0)  Product.objects.filter([...]).select_related()  SELECT "example_product"."id" "example_product"."name" "example_product"."product_rank_id" "example_productrank"."id" "example_productrank"."rank" FROM "example_product" INNER JOIN "example_productrank" ON ("example_product"."product_rank_id" = "example_productrank"."id")  
from types import *  class Foo(object):     def __init__(self):         self.bar = methodize(bar self)         self.baz = 999      @classmethod     def bar(cls baz):         return 2 * baz   def methodize(func instance):     return MethodType(func instance instance.__class__)  def bar(self):     return 4*self.baz   &gt;&gt;&gt; Foo.bar(5) 10 &gt;&gt;&gt; a=Foo() &gt;&gt;&gt; a.bar() 3996  
1 1 2 
mylist.sort(key=lambda d: (d['weight'] d['factor']))  import operator mylist.sort(key=operator.itemgetter('weight' 'factor'))  
min(points key=lambda x: dist(pointToCompare2 x))  
Content-Disposition: attachment; filename="the filename.ext"  Content-Disposition remotefile = urllib2.urlopen('http://example.com/somefile.zip') remotefile.info()['Content-Disposition']  
find -prune icecream/cupcake/ cupcake/ cpio find test -path 'test/icecream/cupcake/*' -o -path 'test/mtndew/livewire/*' | cpio -padluv test-keep rm -rf test  
def def second_lowest(l):     l.sort()     return l[1]  map(second_lowest lst)  sorted() sorted(l)[1] &gt;&gt;&gt; import  heapq &gt;&gt;&gt; l = [526835] &gt;&gt;&gt; heapq.nsmallest(l 2) [2 3]  map(lambda x: heapq.nsmallest(x2)[1]  list_of_lists)  [heapq.nsmallest(x2)[1] for x in list_of_lists]  
&gt;&gt;&gt; a = 1 &gt;&gt;&gt; b = a &gt;&gt;&gt; a = 2 &gt;&gt;&gt; print b 1  child def neu(self sortByValue secondValue):     def child(node):         if(node is None):             return MyTree(sortByValue secondValue)         else:             child.neu(sortByValue secondValue)             return node      if(sortByValue.lower() &lt; self.value[0].lower()):         self.left = child(self.left)     else:         self.right = child(self.right)  
import sys  @sys.settrace def trace_debug(frame event arg):     if event == 'call':         print ("calling %r on line %d vars: %r" %                  (frame.f_code.co_name                   frame.f_lineno                  frame.f_locals))         return trace_debug     elif event == "return":         print "returning" arg  def fun1(a b):     return a + b  print fun1(1 2)  calling 'fun1' on line 14 vars: {'a': 1 'b': 2} returning 3 3  
&gt;&gt;&gt; NS = 'http://www.w3.org/2001/XMLSchema-instance'  noNameSpaceSchemaLocation TreeInventory &gt;&gt;&gt; location_attribute = '{%s}noNameSpaceSchemaLocation' % NS &gt;&gt;&gt; elem = etree.Element('TreeInventory' attrib={location_attribute: 'Trees.xsd'}) &gt;&gt;&gt; etree.tostring(elem pretty_print=True) '&lt;TreeInventory xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Trees.xsd"/&gt;\n'  &gt;&gt;&gt; elem = etree.Element('TreeInventory') &gt;&gt;&gt; elem.set(location_attribute 'Trees.xsd')  nsmap 
__import__ import imp import os  def module_from_path(path):     filename = os.path.basename(path)     modulename = os.path.splitext(filename)[0]      with open(path) as f:         return imp.load_module(modulename f path ('py' 'U' imp.PY_SOURCE))  
xmlns 
class TwoWay:     def __init__(self):        self.d = {}     def add(self k v):        self.d[k] = v        self.d[v] = k     def remove(self k):        self.d.pop(self.d.pop(k))     def get(self k):        return self.d[k]  
class FooForm(forms.ModelForm):     class Meta:         model = Foo      def __init__(self *args **kwargs):         super(FooForm self).__init__(*args **kwargs)         current_state = self.instance.state         ...construct available_choices based on current state...         self.fields['state'].choices = available_choices  class FooAdmin(admin.ModelAdmin):     form = FooForm  
derived_type get_derived derived_type 
myenv/bin/python /usr/bin/nosetests 
with close() finally with   def __enter__(self)   def __exit__(self exc_type exc_value traceback)  class Package:     def __init__(self):         self.files = []      def __enter__(self):         return self      # ...      def __exit__(self exc_type exc_value traceback):         for file in self.files:             os.unlink(file)  with Package() as package_obj:     # use package_obj  __enter__ __exit__ with __enter__ __exit__ __enter__ with class PackageResource:     def __enter__(self):         class Package:             ...         self.package_obj = Package()         return self.package_obj      def __exit__(self exc_type exc_value traceback):         self.package_obj.cleanup()  with PackageResource() as package_obj:     # use package_obj  
__class__.__name__  
timedelta.__div__ divtdi = datetime.timedelta.__div__ def divtd(td1 td2):     if isinstance(td2 (int long)):         return divtdi(td1 td2)     us1 = td1.microseconds + 1000000 * (td1.seconds + 86400 * td1.days)     us2 = td2.microseconds + 1000000 * (td2.seconds + 86400 * td2.days)     return us1 / us2 # this does integer division use float(us1) / us2 for fp division  class MyTimeDelta:     __div__ = divtd  &gt;&gt;&gt; divtd(datetime.timedelta(hours = 12) datetime.timedelta(hours = 2)) 6 &gt;&gt;&gt; divtd(datetime.timedelta(hours = 12) 2) datetime.timedelta(0 21600) &gt;&gt;&gt; MyTimeDelta(hours = 12) / MyTimeDelta(hours = 2) 6  timedelta timedelta 
__doc__ doc string sys path 
from BeautifulSoup import BeautifulSoup import re  html_text = """ &lt;h2&gt;this is cool #12345678901&lt;/h2&gt; &lt;h2&gt;this is nothing&lt;/h2&gt; &lt;h1&gt;foo #126666678901&lt;/h1&gt; &lt;h2&gt;this is interesting #126666678901&lt;/h2&gt; &lt;h2&gt;this is blah #124445678901&lt;/h2&gt; """  soup = BeautifulSoup(html_text)   for elem in soup(text=re.compile(r' #\S{11}')):     print elem.parent  &lt;h2&gt;this is cool #12345678901&lt;/h2&gt; &lt;h2&gt;this is interesting #126666678901&lt;/h2&gt; &lt;h2&gt;this is blah #124445678901&lt;/h2&gt;  
self.data clean_email newsletter_sub newsletter_unsub # in the context of a django.forms form  def clean(self):     if 'newsletter_sub' in self.data:         # do subscribe     elif 'newsletter_unsub' in self.data:         # do unsubscribe  
__init__ __init__ save 
for table in soup.findAll('table'):     rows=[]     for row in table.findAll('tr'):         columns=0         for column in row.findAll('td'):             columns+=1             rows.append(columns)         if max(rows)&gt;3:           table.delete()  
def foo(self blah=None):     if blah is None: # faster than blah == None - thanks to kcwu         blah = self.instance_var  
__init__ self __init__ 
&gt;&gt;&gt; print '3' &lt; 4 False  
import sys try:      raise "a string exception" except:      e t tb = sys.exc_info()      if not isinstance(e str):           raise          print "caught" e  
chr() &gt;&gt;&gt; chr(int('fd9b' 16)).encode('utf-8') '\xef\xb6\x9b'  c hex(ord(c)) unichr() 
import cPickle  # # Load if neccesary # def loadfile(variable filename namespace=None):     if module is None:         import __main__ as namespace     setattr(namespace variable cPickle.load(file(filename'r')))  # From the main script just do: loadfile('myvar''myfilename')  # To set the variable in module 'mymodule': import mymodule ... loadfile('myvar' 'myfilename' mymodule)  
return def func(input):     # do calculation on input     return result  s = "hello goodbye" res = func(s)       # res now a result dictionary  result def func(input):     # do work     return length something_else         # one might be an integer another string etc.  s = "hello goodbye" length something = func(s)  
from setuptools import setup  DATA_FILES = [] OPTIONS = {'argv_emulation': True            'packages' : ['lxml']            'frameworks' : ['/usr/local/libxml2-2.7.2/lib/libxml2.2.7.2.dylib']           }  setup(app=MyApp.py       data_files=DATA_FILES       options={'py2app' : OPTIONS}       setup_requires=['py2app'])  
aString = 'abcd' newString ='' colors= [0.0 1.0 0.5 1.0] for i in aString:     newString = newString + '&lt;span style="background-color: rgb(0%s0)"&gt;%s&lt;/span&gt;'%(colors.pop(0)*255i)    response = HttpResponse(newString)  
1           0 LOAD_CONST               0 (0)             3 STORE_NAME               0 (i)  2           6 SETUP_LOOP              28 (to 37)       &gt;&gt;    9 LOAD_NAME                0 (i)              # &lt;-            12 LOAD_CONST               1 (100000000)      # &lt;-            15 COMPARE_OP               0 (&lt;)              # &lt;-            18 JUMP_IF_FALSE           14 (to 35)          # &lt;-            21 POP_TOP                                     # &lt;-  3          22 LOAD_NAME                0 (i)              # &lt;-            25 LOAD_CONST               2 (1)              # &lt;-            28 INPLACE_ADD                                 # &lt;-            29 STORE_NAME               0 (i)              # &lt;-            32 JUMP_ABSOLUTE            9                  # &lt;-       &gt;&gt;   35 POP_TOP            36 POP_BLOCK  1           0 SETUP_LOOP              23 (to 26)             3 LOAD_NAME                0 (range)             6 LOAD_CONST               0 (0)             9 LOAD_CONST               1 (100000000)            12 CALL_FUNCTION            2            15 GET_ITER       &gt;&gt;   16 FOR_ITER                 6 (to 25)        # &lt;-            19 STORE_NAME               1 (n)            # &lt;-  2          22 JUMP_ABSOLUTE           16                # &lt;-       &gt;&gt;   25 POP_BLOCK       &gt;&gt;   26 LOAD_CONST               2 (None)            29 RETURN_VALUE  
def finish():     unittest.main(module=__name__)  
myfile = open('myfile.tar' 'wb') shutil.copyfileobj(response.fp myfile) myfile.close()  response.fp shutil.copyfileobj() 
0 None myList = [None] * 100  # Create list of 100 'None's myList[12] = 'a'  # etc.  
range(100-1-1) 
objc.loadBundle NSClassFromString 
gdata.alt.appengine.run_on_appengine(client) gdata.alt.appengine.run_on_appengine(client._GetDocsClient()) gdata.alt.appengine.run_on_appengine(client._GetSpreadsheetsClient()) here  auth_url = client._GetDocsClient().GenerateAuthSubURL(       next_urlscope='http://spreadsheets.google.com/feeds/ http://docs.google.com/feeds/documents/' secure=False session=True)  
d = {'user':'amarillion' 'pass':'*****' } server.login(**d)  
zip(t[::2] t[1::2])  &gt;&gt;&gt; s = ''.join(str(i) for i in range(10)) &gt;&gt;&gt; s '0123456789' &gt;&gt;&gt; t = [int(i) for i in s.split('')] &gt;&gt;&gt; t [0 1 2 3 4 5 6 7 8 9] &gt;&gt;&gt; p = zip(t[::2] t[1::2]) &gt;&gt;&gt; p [(0 1) (2 3) (4 5) (6 7) (8 9)] &gt;&gt;&gt;  
engine = create_engine( 'mssql+pyodbc://./MyDb' strategy='mock' executor= lambda sql *multiparams **params: print (sql.compile(dialect=engine.dialect)))  engine = create_engine( 'mssql+pyodbc://./MyDb' strategy='mock' executor= lambda sql *multiparams **params: print (sql)  
self.fields class TicketForm(forms.Form):    Type = Type.GetTicketTypeField()    def __init__(self ticket *args **kwargs):     super(TicketForm self).__init__(*args **kwargs)     self.fields['state'] = State.GetTicketStateField(ticket.Type)  
s = '&lt;p&gt;Hello!&lt;/p&gt;' 
. .. parent:: parent::*[@b]  
for line in f for line in r: import os sys time  rw=os.pipe() rw=os.fdopen(r'r'0) os.fdopen(w'w'0)  pid = os.fork() if pid:          # Parent     w.close()     while 1:         data=r.readline()         if not data: break         print "parent read: " + data.strip() else:           # Child     r.close()     for i in range(10):         print &gt;&gt;w "line %s" % i         w.flush()         time.sleep(1)  
a = """\ def rec(n):     if n &gt; 10:         return     print n     return rec(n+1)  rec(5)"""  exec(a) 5 6 7 8 9 10  def fn1():     glob = {}     a = """\ def rec(n):     if n &gt; 10:         return     print n     return rec(n+1)  rec(5)"""     exec(a glob)  fn1()  
in 
mylist.sort() print mylist  
&gt;&gt;&gt; indices = ['one''two''three''four''five''six'] &gt;&gt;&gt; i = 2 &gt;&gt;&gt; indices[i:] = indices[i+1:] + indices[i:i+1] &gt;&gt;&gt; indices ['one' 'two' 'four' 'five' 'six' 'three']  indices = indices.concat( indices.splice( i 1 ) );  &gt;&gt;&gt; var indices = ['one''two''three''four''five''six']; &gt;&gt;&gt; var i = 2; &gt;&gt;&gt; indices = indices.concat( indices.splice( i 1 ) ); &gt;&gt;&gt; indices ["one" "two" "four" "five" "six" "three"]  
num_chars = 5 num_rows = 8 empty = ['.' * num_chars] full = ['*' * num_chars] print '\n'.join(     '|'.join(empty * (i + 1) + (num_rows - i - 1) * full)     for i in xrange(num_rows) )  .....|*****|*****|*****|*****|*****|*****|***** .....|.....|*****|*****|*****|*****|*****|***** .....|.....|.....|*****|*****|*****|*****|***** .....|.....|.....|.....|*****|*****|*****|***** .....|.....|.....|.....|.....|*****|*****|***** .....|.....|.....|.....|.....|.....|*****|***** .....|.....|.....|.....|.....|.....|.....|***** .....|.....|.....|.....|.....|.....|.....|.....  rows = 5 cols = 6 char = '#' empty = '.' bitmap = [[ (i + j)%2 == 0 for i in xrange(cols)] for j in xrange(rows)] print '\n'.join(     '|'.join(bitmap[j][i] * char or empty for i in xrange(cols))     for j in xrange(rows) )  
while True break f.close() currentmoney = float(f.readline()) f 
&gt;&gt;&gt; import pycurl &gt;&gt;&gt; import StringIO &gt;&gt;&gt; b = StringIO.StringIO() &gt;&gt;&gt; conn = pycurl.Curl() &gt;&gt;&gt; conn.setopt(pycurl.URL 'http://www.example.org') &gt;&gt;&gt; conn.setopt(pycurl.WRITEFUNCTION b.write) &gt;&gt;&gt; conn.perform() &gt;&gt;&gt; print b.getvalue() &lt;HTML&gt; &lt;HEAD&gt;   &lt;TITLE&gt;Example Web Page&lt;/TITLE&gt; &lt;/HEAD&gt; &lt;body&gt; &lt;p&gt;You have reached this web page by typing &amp;quot;example.com&amp;quot; &amp;quot;example.net&amp;quot;   or &amp;quot;example.org&amp;quot; into your web browser.&lt;/p&gt; &lt;p&gt;These domain names are reserved for use in documentation and are not availabl e   for registration. See &lt;a href="http://www.rfc-editor.org/rfc/rfc2606.txt"&gt;RFC    2606&lt;/a&gt; Section 3.&lt;/p&gt; &lt;/BODY&gt; &lt;/HTML&gt;  
data_member coo def generate_data():     print "Generating"     return [123]  class coo:     data_member = generate_data()     def modify(self):         self.data_member.append(4)      def display(self):         print self.data_member  x = coo() y = coo() y.modify() x.display()  # Output: # Generating # [1 2 3 4]  
max &gt;&gt;&gt; mylist = ['123''123456''1234'] &gt;&gt;&gt; print max(mylist key=len) 123456  
&gt;&gt;&gt; orig # Byte string encoded in cp1252 'Fabulous home on one of Decatur\x92s most'   &gt;&gt;&gt; uni = orig.decode('cp1252') &gt;&gt;&gt; uni # Unicode string u'Fabulous home on one of Decatur\u2019s most'  &gt;&gt;&gt; s = uni.encode('utf8')   &gt;&gt;&gt; s # Correct byte string encoded in utf-8 'Fabulous home on one of Decatur\xe2\x80\x99s most'  
python setup.py install 
import git import os os.path g = git.Git(os.path.expanduser("~/git/GitPython")) result = g.execute(["git" "commit" "-m" "'message'"])  
def _Render(self): get post self.Render() 
set(line.strip() for line in open('filename.txt'))  
__init__ from random import randrange class Poly:     points = [0]*8      def __init__(self width=100 height=100):         for i in range(0 8 2):             self.points[i] = randrange(width)             self.points[i+1] = randrange(height)         return  p1 = Poly() print "p1:" p1.points p2 = Poly() print "p2:" p2.points print "p1:" p1.points  [C:\Temp] test.py p1: [19 5 1 46 93 18 18 57] p2: [92 71 42 84 54 29 27 71] p1: [92 71 42 84 54 29 27 71]  from random import randrange class Poly:     def __init__(self width=100 height=100):         self.points = [0]*8         for i in range(0 8 2):             self.points[i] = randrange(width)             self.points[i+1] = randrange(height)         return  
def my_callback(a p frame p1 p2)     pass  callback = write_callback_prototype(my_callback)  
import scipy.io import scipy.io mat = scipy.io.loadmat('file.mat')  
os.chdir("location to images folder")  def getProgramFolder():     moduleFile = __file__     moduleDir = os.path.split(os.path.abspath(moduleFile))[0]     programFolder = os.path.abspath(moduleDir)     return programFolder  bmpFilePath = os.path.join(getProgramFolder() "images\\new.png")  
__repr__ &gt;&gt;&gt; class Foo: ...     def __str__(self): ...             return '__str__' ...     def __repr__(self): ...             return '__repr__' ... &gt;&gt;&gt; bar = Foo() &gt;&gt;&gt; bar  __repr__ &gt;&gt;&gt; print bar  __str__ &gt;&gt;&gt; repr(bar) '__repr__' &gt;&gt;&gt; str(bar) '__str__'  __str__ __repr__ &gt;&gt;&gt; class Foo: ...     def __repr__(self): ...             return '__repr__' ... &gt;&gt;&gt; bar = Foo() &gt;&gt;&gt; bar __repr__ &gt;&gt;&gt; print bar __repr__  __repr__ repr 
from base64 import binascii  f = VCFile(head = binascii.b2a_base64('blahblah'.encode('zlib')))  
select readable writable = select(output_fds input_fds [] 0.1)[0:2]  
map for item.my_func() map map map list map map f f map(g map(f l)) map(lambda x: g(f(x)) l) f g map f g map(g map(f l)) g map(f l) map(f l) f l map map map(f l) itertools.tee map map map map 
&gt;&gt;&gt; from BTrees.IIBTree import IITreeSet union intersection &gt;&gt;&gt; a = IITreeSet([123]) &gt;&gt;&gt; a &lt;BTrees._IIBTree.IITreeSet object at 0x00B3FF18&gt; &gt;&gt;&gt; b = IITreeSet([432]) &gt;&gt;&gt; list(a) [1 2 3] &gt;&gt;&gt; list(b) [2 3 4] &gt;&gt;&gt; union(ab) IISet([1 2 3 4]) &gt;&gt;&gt; intersection(ab) IISet([2 3])  
import base64 import sys  encoded = base64.b64encode(sys.stdin.read()) print encoded  decoded = base64.b64decode(encoded) print decoded  
&gt;&gt;&gt; s = "how much for the maple syrup? $20.99? That's ridiculous!!!" &gt;&gt;&gt; re.sub(r'[^\w]' ' ' s) 'how much for the maple syrup   20 99  That s ridiculous   '  \w [^\w] 
QApplication QApplication.processEvents() 
with 
&gt;&gt;&gt; import numpy as np &gt;&gt;&gt; p = np.array([[12][34]])  &gt;&gt;&gt; p = np.append(p [[56]] 0) &gt;&gt;&gt; p = np.append(p [[7][8][9]]1)  &gt;&gt;&gt; p array([[1 2 7]    [3 4 8]    [5 6 9]])      p = np.array(range(20)) &gt;&gt;&gt; p.shape = (45) &gt;&gt;&gt; p array([[ 0  1  2  3  4]        [ 5  6  7  8  9]        [10 11 12 13 14]        [15 16 17 18 19]]) &gt;&gt;&gt; n = 2 &gt;&gt;&gt; p = np.append(p[:n]p[n+1:]0) &gt;&gt;&gt; p = np.append(p[...:n]p[...n+1:]1) &gt;&gt;&gt; p array([[ 0  1  3  4]        [ 5  6  8  9]        [15 16 18 19]])  
__enter__ __exit__ 
PyImport_Import PyRun_SimpleString PyRun_SimpleString __main__ PyObject *main = PyImport_AddModule("__main__");   PyObject *obj = PyString_FromString("Pootle"); PyObject *pootle = PyImport_Import(obj);   PyObject_SetAttrString(main "Pootle" pootle);    Py_DECREF(obj); Py_XDECREF(pootle);  
__lt__() NotImplemented NotImplemented a == b a.__eq__(b) NotImplemented b.__eq__(a) b True False == != 
warnings  #!/usr/bin/env python -W ignore::DeprecationWarning  -W ignore::DeprecationWarning 
logging.Filter filter(record) Logger Handler addFilter(filter) class NoParsingFilter(logging.Filter):     def filter(self record):         return not record.getMessage().startswith('parsing')  logger.addFilter(NoParsingFilter())  
print hasattr(d1each) print each type(getattr(d1each)) dir() help() 
partCount = len(pathParts) - 1  path = "/" for i in range(2 partCount):     path += pathParts[i] + "/"  path = '/'.join(pathParts[2:-1])  
manage.py startmigration app --initial  
fileName = sys.argv[1] fileName = sys.argv[1:] mactypes.File(u&quot;/Users/Daniel/Pictures/['test.jpg']&quot;) 
urlfetch.fetch() import urllib  form_fields = {   "first_name": "Albert"   "last_name": "Johnson"   "email_address": "Albert.Johnson@example.com" } form_data = urllib.urlencode(form_fields) headers = {'Content-Type': 'application/x-www-form-urlencoded'} result = urlfetch.fetch(url=url                         payload=form_data                         method=urlfetch.POST                         headers=headers)  
 p = Popen([vmrun_cmd list_arg] stdout=PIPE).communicate()[0]  for line in p.splitlines():  if line.strip():      print line  
print "a" print """a"""  
&gt;&gt;&gt; class test(object):pass ... &gt;&gt;&gt; issubclass(testobject) True  
from django.contrib.contenttypes.models import ContentType from django.contrib.contenttypes import fields   class Photo(models.Model):     picture = models.ImageField(null=True upload_to='./images/')     caption = models.CharField(_("Optional caption")max_length=100null=True blank=True)      content_type = models.ForeignKey(ContentType)     object_id = models.PositiveIntegerField()     content_object = fields.GenericForeignKey('content_type' 'object_id')  class Article(models.Model):     ....     images     = fields.GenericRelation(Photo)      content_type = models.ForeignKey(ContentType)     object_id = models.PositiveIntegerField()     content_object = fields.GenericForeignKey('content_type' 'object_id')      fields.GenericRelation(Faves)  
select select.select([p.stdout.fileno()] [] [] 0) 
&gt;&gt;&gt; try: ...     raise UnrecognizedAirportError("func""arg1""arg2") ... except UnrecognizedAirportError e: ...     print e.args ... ('func' 'arg1' 'arg2') &gt;&gt;&gt;  args Exception class TestSomeException( unittest.TestCase ):     def testRaiseWithArgs( self ):         try:             ... Something that raises the exception ...             self.fail( "Didn't raise the exception" )         except UnrecognizedAirportError e:             self.assertEquals( "func" e.args[0] )             self.assertEquals( "arg1" e.args[1] )         except Exception e:             self.fail( "Raised the wrong exception" )  
sys.exit() while True: while keep_processing: keep_processing 
class Foo(models.Model):     name = models.CharField(max_length=128)  Foo.objects.create(name='a10') Foo.objects.create(name='a1') Foo.objects.create(name='a2')  ordered = sorted(Foo.objects.all() key=lambda n: (n[0] int(n[1:]))) print ordered # yields a1 a2 10  models.Manager class FooManager(models.Manager):     def in_a_number_order(self *args **kwargs):         qs = self.get_query_set().filter(*args **kwargs)         return sorted(qs key=lambda n: (n[0] int(n[1:])))  class Foo(models.Model):     ... as before ...     objects = FooManager()  print Foo.objects.in_a_number_order() print Foo.objects.in_a_number_order(id__in=[5 4 3]) # or any filtering expression  
from optparse import OptionParser Option  # Complete hack. Option.ALWAYS_TYPED_ACTIONS += ('callback')  def dostuff(*a):     pass  parser = OptionParser() parser.add_option("-c"                   "--callback"                   dest="filename"                   action="callback"                   callback=dostuff                   metavar='LIST'                   help='do stuff'                   )  (options args) = parser.parse_args()  Usage: opt.py [options]  Options:   -h --help            show this help message and exit   -c LIST --callback=LIST                         do stuff  
def func(n):     x y = n     ...  
None decorator join() None join() import threading  # Callable that stores the result of calling the given callable f. class ResultCatcher:     def __init__(self f):         self.f = f         self.val = None      def __call__(self *args **kwargs):         self.val = self.f(*args **kwargs)  def threaded(f):     def decorator(*args**kargs):         # Encapsulate f so that the return value can be extracted.         retVal = ResultCatcher(f)          th = threading.Thread(target=retVal args=args)         th.start()         th.join()          # Extract and return the result of executing f.         return retVal.val      decorator.__name__ = f.__name__     return decorator  @threaded def add_item(a b):     return a + b  print(add_item(2 2))  
theobj = object.__getattribute__(self "theObject")  
import multiprocessing import subprocess  def work(cmd):     return subprocess.call(cmd shell=False)  if __name__ == '__main__':     count = multiprocessing.cpu_count()     pool = multiprocessing.Pool(processes=count)     print pool.map(work ['ls'] * count)  import multiprocessing import subprocess  def calculate(value):     return value * 10  if __name__ == '__main__':     pool = multiprocessing.Pool(None)     tasks = range(10000)     results = []     r = pool.map_async(calculate tasks callback=results.append)     r.wait() # Wait on the results     print results  
from email.utils import parsedate_tz print parsedate_tz('Fri 15 May 2009 17:58:28 +0700')  
delete() 
ones = relation('O1' order_by=lambda:[O1.value])  ones = relation('O1' order_by='O1.value O1.something_else')  
getCode() getCode() 
from itertools import groupby group = groupby([1 2 2 2 2 1 1 1 2 2 1 1]) print max(group key=lambda k: len(list(k[1])))  &gt;&gt;&gt; group = groupby([1 2 2 2 2 1 1 1 2 2 1 1]) &gt;&gt;&gt; print max(group key=lambda k: len(list(k[1]))) (2 &lt;itertools._grouper object at 0xb779f1cc&gt;) &gt;&gt;&gt; group = groupby([1 2 2 2 2 1 1 1 2 2 1 1 3 3 3 3 3]) &gt;&gt;&gt; print max(group key=lambda k: len(list(k[1]))) (3 &lt;itertools._grouper object at 0xb7df95ec&gt;)  # [k for k g in groupby('AAAABBBCCDAABBB')] --&gt; A B C D A B # [list(g) for k g in groupby('AAAABBBCCD')] --&gt; AAAA BBB CC D  group = groupby([1 2 2 2 2 1 1 1 2 2 1 1 3 3 3 3 3]) result = [] index = 0 for k g in group:    length = len(list(g))    result.append((k length index))    index += length  print max(result key=lambda a:a[1])  
dns.resolver rdata dns.resolver.query() MX exchange preference dns.resolver __getattr__ dir() 
a wua wu w auw au &gt;&gt;&gt; f = open('test.txt' 'r') &gt;&gt;&gt; f.read() 'Initial contents\n' &gt;&gt;&gt; f.close() &gt;&gt;&gt; f = open('test.txt' 'wua') &gt;&gt;&gt; print &gt;&gt; f 'writing' &gt;&gt;&gt; f.close() &gt;&gt;&gt; f = open('test.txt' 'r') &gt;&gt;&gt; f.read() 'writing\n' &gt;&gt;&gt; f.close() &gt;&gt;&gt; f = open('test.txt' 'auw') &gt;&gt;&gt; print &gt;&gt; f 'appending' &gt;&gt;&gt; f.close() &gt;&gt;&gt; f = open('test.txt' 'r') &gt;&gt;&gt; f.read() 'writing\nappending\n' &gt;&gt;&gt; f.close()  a w 
str() cleaned_html 
in Team.objects.filter(team_members=request.user)  request.user.team_set.all()  
width bar(x y width=30)  bar(x y width=[(x[j+1]-x[j]).days for j in range(len(x)-1)] + [30])  
select([foo] foo.c.bar.in_([1 2 3]))  .in_() 
$ LANG="en_US.UTF8" python -c "import sys; print sys.stdout.encoding" UTF-8 $ LANG="en_US" python -c "import sys; print sys.stdout.encoding"   ANSI_X3.4-1968  (setenv "LANG" "en_US.UTF8")  
ManyToOne ForeignKey User Groups class Group(models.Model):     name = models.CharField(max_length=64)  class User(models.Model):     name = models.CharField(max_length=64)     group = models.ForeignKey(Group)  g = Group.objects.get(id=1) print g.user_set.all()  # prints list of all users in the group  ManyToOne 
from BaseHTTPServer import BaseHTTPRequestHandler HTTPServer from SocketServer import ThreadingMixIn  class ThreadedHTTPServer(ThreadingMixIn HTTPServer):   """Handle requests in a separate thread."""  server = ThreadedHTTPServer((config['HTTPServer']['listen']config['HTTPServer']['port']) HTTPHandler) server.serve_forever()  
def isReal(txt):     try:         float(txt)         return True     except ValueError:         return False  
def f(*args):     pass  f *args **kwargs verbose import time  def timed(f):     def dec(*args **kwargs):         verbose = kwargs.pop('verbose' False)         t = time.clock()          ret = f(*args **kwargs)          if verbose:             print("%s executed in %ds" % (f.__name__ time.clock() - t))          return ret      return dec  @timed def add(a b):     return a + b  print(add(2 2 verbose=True))  kwargs.pop 
r'^(\#{1}([0-7])\#{2})'  ###7###### ########1###  
if i / 3 == True  if i / 3 == 1  if i % 3 == 0  [x for x in range(20) if x % 3 == 0]  
output = response.read()  
profile cProfile 
def team(t):     iterations = range(2 len(t)/2+1)      totalscore = sum(t)     halftotalscore = totalscore/2.0      oldmoves = {}      for p in t:         people_left = t[:]         people_left.remove(p)         oldmoves[p] = people_left      if iterations == []:         solution = min(map(lambda i: (abs(float(i)-halftotalscore) i) oldmoves.keys()))         return (solution[1] sum(oldmoves[solution[1]]) oldmoves[solution[1]])      for n in iterations:         newmoves = {}         for total roster in oldmoves.iteritems():             for p in roster:                 people_left = roster[:]                 people_left.remove(p)                 newtotal = total+p                 if newtotal &gt; halftotalscore: continue                 newmoves[newtotal] = people_left         oldmoves = newmoves      solution = min(map(lambda i: (abs(float(i)-halftotalscore) i) oldmoves.keys()))     return (solution[1] sum(oldmoves[solution[1]]) oldmoves[solution[1]])  print team([90200100]) print team([23105897352]) print team([1111111119]) print team([8710028676841671]) print team([1 1 50 50 50 1000])  #output #(200 190 [90 100]) #(27 27 [3 9 7 3 5]) #(5 13 [1 1 1 1 9]) #(229 230 [28 67 68 67]) #(150 1002 [1 1 1000])  
import os from django.db.models.loading import AppCache cache = AppCache()  curdir = os.getcwd()  for app in cache.get_apps():     f = app.__file__     if f.startswith(curdir) and f.endswith('.pyc'):         os.remove(f)     __import__(app.__name__)     reload(app)  from django.utils.datastructures import SortedDict cache.app_store = SortedDict() cache.app_models = SortedDict() cache.app_errors = {} cache.handled = {} cache.loaded = False  %run ~/mysite/reloadmodels.py  
getattr(soup.find('link' id=1) sometag) soup.find('link' id=1).mode getattr 
method_two method_three cls.method_two class Test:     def method_one(self):         print "Called method_one"     @staticmethod     def method_two():         print "Called method_two"     @classmethod     def method_three(cls):         cls.method_two()  class T2(Test):     @staticmethod     def method_two():         print "T2"  a_test = Test() a_test.method_one()  # -&gt; Called method_one a_test.method_two()  # -&gt; Called method_two a_test.method_three()  # -&gt; Called method_two  b_test = T2() b_test.method_three()  # -&gt; T2 Test.method_two()  # -&gt; Called method_two T2.method_three()  # -&gt; T2  
PYTHONSTARTUP /etc/pythonstart 
with with A() as a B() as b C() as c:     doSomething(abc)  contextlib.nested a b __exit__() C() __enter__() with A() as a B(a) as b C(a b) as c:     doSomething(a c)  
&gt;&gt;&gt; 0 / -2 -0.0  
Counter collections from collections import Counter words = "apple banana apple strawberry banana lemon" Counter(words.split()) # Counter({'apple': 2 'banana': 2 'strawberry': 1 'lemon': 1})  
print repr(mystringobject)  
ln -s /Users/xyz/long/absolute/path/to/script.py /usr/bin/script.py  chmod a+x /Users/xyz/long/absolute/path/to/script.py  
SST = Sum(i=1..n) (y_i - y_bar)^2 SSReg = Sum(i=1..n) (y_ihat - y_bar)^2 Rsquared = SSReg/SST  import numpy  # Polynomial Regression def polyfit(x y degree):     results = {}      coeffs = numpy.polyfit(x y degree)       # Polynomial Coefficients     results['polynomial'] = coeffs.tolist()      # r-squared     p = numpy.poly1d(coeffs)     # fit values and mean     yhat = p(x)                         # or [p(z) for z in x]     ybar = numpy.sum(y)/len(y)          # or sum(y)/len(y)     ssreg = numpy.sum((yhat-ybar)**2)   # or sum([ (yihat - ybar)**2 for yihat in yhat])     sstot = numpy.sum((y - ybar)**2)    # or sum([ (yi - ybar)**2 for yi in y])     results['determination'] = ssreg / sstot      return results  
readline() string.split() re.split() 
&gt;&gt;&gt; import xml.dom.minidom &gt;&gt;&gt; s = "&lt;example&gt;4 &amp;lt; 5&lt;/example&gt;" &gt;&gt;&gt; x = xml.dom.minidom.parseString(s) &gt;&gt;&gt; x.firstChild.firstChild.toxml() u'4 &amp;lt; 5'  
__init__ import sys from PyQt4 import QtGui  class SystemTrayIcon(QtGui.QSystemTrayIcon):      def __init__(self icon parent=None):         QtGui.QSystemTrayIcon.__init__(self icon parent)         menu = QtGui.QMenu(parent)         exitAction = menu.addAction("Exit")         self.setContextMenu(menu)  def main():     app = QtGui.QApplication(sys.argv)      w = QtGui.QWidget()     trayIcon = SystemTrayIcon(QtGui.QIcon("Bomb.xpm") w)      trayIcon.show()     sys.exit(app.exec_())  if __name__ == '__main__':     main()  
from StringIO import StringIO import struct  class BinaryIO(StringIO):     def writepack(self fmt *values):         self.write(struct.pack('&lt;' + fmt *values))  def to_binary_example():     data = BinaryIO()     data.writepack('I' 42)     data.writepack('II' 1 2)     return data.getvalue()  
urlopen urllib.urlopen(your_url proxies = {"http" : "http://192.168.0.1:80"})  
from setuptools import setup find_packages setup(name="package"     version="1.3.3.7"     package=find_packages()     include_package_data=True     namespace_packages=['package']       package_data = {         # If any package contains *.txt or *.rst files include them:         '': ['*.txt' '*.rst']...  )  
import subprocess  commands = [ ["p1"] ["p2"] ] programs = [ subprocess.Popen(c) for c in commands ] while True:     for i in range(len(programs)):         if programs[i].returncode is None:             continue # still running         else:             # restart this one             programs[i]= subprocess.Popen(commands[i])         time.sleep(1.0)  
perl -p -i -e 's/Masi/Bond/g' $(grep -rl Masi *)  find . -type f -exec perl -p -i -e 's/Masi/Bond/g' {} \;  find . -type f -print0 | xargs -0 perl -p -i -e 's/Masi/Bond/g'  
unsorted sorted sorted False while sorted False sorted True sorted = False  # We haven't started sorting yet  while not sorted:     sorted = True  # Assume the list is now sorted     for element in range(0 length):         if badList[element] &gt; badList[element + 1]:             sorted = False  # We found two elements in the wrong order             hold = badList[element + 1]             badList[element + 1] = badList[element]             badList[element] = hold     # We went through the whole list. At this point if there were no elements     # in the wrong order sorted is still True. Otherwise it's false and the     # while loop executes again.  for element element i for i in range(0 length):  range stop for i in range(length):  def bubble(bad_list):  (badList[i+1] badList[i]) (3 5) (badList[i] badList[i+1]) bad_list[i] bad_list[i+1] = bad_list[i+1] bad_list[i]  my_list = [12 5 13 8 9 65]  def bubble(bad_list):     length = len(bad_list) - 1     sorted = False      while not sorted:         sorted = True         for i in range(length):             if bad_list[i] &gt; bad_list[i+1]:                 sorted = False                 bad_list[i] bad_list[i+1] = bad_list[i+1] bad_list[i]  bubble(my_list) print my_list  
None None mc.get(key) is None == "" 
num = int(input("Enter a number: ")) num2 = int(input("Enter a number: "))  
p = subprocess.Popen(...)  p.wait()  
__init__.py sys.path PYTHONPATH Lib/site-packages sys.path import thisModule as tm import thisModule as tm from moduleImports import * import this import that import package.module  sys.path 
def the_view(request):   url_stuff = "custid=%s sortid ...." % (name.id 2 ...)    return render_to_response('template.html'     {'url_stuff':url_stuff}     context_instance = RequestContext(request))   ....      &lt;a href='{{url_stuff}}'&gt;{{name}}&lt;/a&gt;   ....  
from pyglet import image from PIL import Image pic = image.load('pic.jpg') pitch = -(pic.width * len('RGB')) data = pic.get_data('RGB' pitch) # using the new pitch im = Image.fromstring('RGB' (pic.width pic.height) data) im.show()  
map print for f in lst:     f("event_info")  map map list map.py map(lambda x: x range(10))  2to3-3.0 map.py RefactoringTool: Skipping implicit fixer: buffer RefactoringTool: Skipping implicit fixer: idioms RefactoringTool: Skipping implicit fixer: set_literal RefactoringTool: Skipping implicit fixer: ws_comma --- map.py (original) +++ map.py (refactored) @@ -11 +11 @@ -map(lambda x: x range(10)) +list(map(lambda x: x list(range(10)))) RefactoringTool: Files that need to be modified: RefactoringTool: map.py RefactoringTool: Warnings/messages while refactoring: RefactoringTool: ### In file map.py ### RefactoringTool: Line 1: You should use a for loop here  
\f some_str = r'C:\\foobar'  s = re.sub(r'&lt;INPUT&gt;' some_str.encode("string_escape") str_to_be_subbed)  
# Define the other classes first  class Observer:     @classmethod     def on_new_user_registration(new_user):         #body of handler... NewUserRegistered().subscribe(Observer.on_new_user_registration)  
PyObject *ioMod *openedFile;  PyGILState_STATE gilState = PyGILState_Ensure();  ioMod = PyImport_ImportModule("io");  openedFile = PyObject_CallMethod(ioMod "open" "ss" "foo.txt" "wb"); Py_DECREF(ioMod);  PyObject_CallMethod(openedFile "write" "y" "Written from Python C API!\n"); PyObject_CallMethod(openedFile "flush" NULL); PyObject_CallMethod(openedFile "close" NULL); Py_DECREF(openedFile);  PyGILState_Release(gilState); Py_Finalize();  
lists = [['dog' 1] ['cat' 2 'a'] ['rat' 3 4] ['bat' 5]] result = "\n".join("\t".join(map(strl)) for l in lists)  
import mimetypes ... mime = mimetypes.guess_type(file)  
with open('your_file.txt' 'w') as f:     for item in my_list:         f.write("%s\n" % item)  with open('your_file.txt' 'w') as f:     for item in my_list:         print &gt;&gt; f item  [] 
import os  def findup(filename):     drive thisdir = os.path.splitdrive(os.getcwd())     while True:         fullpath = os.path.join(drive thisdir filename)         if os.path.isfile(fullpath):             return fullpath         if thisdir == os.path.sep: #root dir             raise LookupError('file not found: %r' % filename)         thisdir = os.path.dirname(thisdir)  os.makedirs('/tmp/foo/bar/baz/qux') open('/tmp/foo/findme.txt' 'w').close() os.chdir('/tmp/foo/bar/baz/qux') print findup('findme.txt')  /tmp/foo/findme.txt  
&gt;&gt;&gt; import shlex &gt;&gt;&gt; shlex.split('-o 1 --long "Some long string"') ['-o' '1' '--long' 'Some long string']  
. ^(\d{2})\.(\d{1})[\.](.*)  \1.0\2.\3  
wikiquote import wikipedia site = wikipedia.getSite('en' 'wikiquote')  
&gt;&gt;&gt; import inspect &gt;&gt;&gt; def f(): ...     print inspect.stack()[1][3] ... &gt;&gt;&gt; def g(): ...     f() ... &gt;&gt;&gt; g() g  print inspect.stack()[1][3]  print(inspect.stack()[1].function)  
&gt;&gt;&gt; print eval("[('tupleValueA' 1) 'someString']") [('tupleValueA' 1) 'someString']  &gt;&gt;&gt; import json &gt;&gt;&gt; json.dumps(['foo' {'bar': ('baz' None 1.0 2)}]) '["foo" {"bar": ["baz" null 1.0 2]}]' &gt;&gt;&gt; json.loads('["foo" {"bar": ["baz" null 1.0 2]}]') ["foo" {"bar": ["baz" null 1.0 2]}]  
list(a) == list(b)  tuple(a) == tuple(b)  
import x  x import x.y  y x x.y x     __init__.py     y.py  import x # the module as a whole x.a # Must pick items out of the module x.b  from x import a b # two things lifted out of the module a # items are global b  __init__.py from x import y # isn't sensible import x.y # importing a whole module.  __init__.py import module 
settings.py ... INSTALLED_APPS = (     ... ) ...  from localsettings import *  localsettings.py ... INSTALLED_APPS = (     ... ) ...  localsettings.py settings.py INSTALLED_APPS 
getattr getattr(rpc function_name)(*params)  
&lt;img src="../media/foo.png"&gt;  
os.system("screen -dmS RealmD top")  top screen -rd RealmD 
class clsmaker(object):     def __init__(self N):         self.N = N     def __call__(self X):         return X * self.N  &gt;&gt;&gt; T1 = timeit.Timer('maker(3)(4)' 'from __main__ import maker') &gt;&gt;&gt; T1.timeit() 1.2818338871002197 &gt;&gt;&gt; T2 = timeit.Timer('clsmaker(3)(4)' 'from __main__ import clsmaker') &gt;&gt;&gt; T2.timeit() 2.2137160301208496  &gt;&gt;&gt; dis(clsmaker.__call__)   5           0 LOAD_FAST                1 (X)               3 LOAD_FAST                0 (self)               6 LOAD_ATTR                0 (N)               9 BINARY_MULTIPLY                   10 RETURN_VALUE         &gt;&gt;&gt; act = maker(3) &gt;&gt;&gt; dis(act)   3           0 LOAD_FAST                0 (X)               3 LOAD_DEREF               0 (N)               6 BINARY_MULTIPLY                    7 RETURN_VALUE    
["screen" "-dmS" "RealmD" "top"] ["screen -dmS RealmD top"] screen 
start-stop-daemon /var/run/&lt;name&gt;.pid ps /proc/&lt;pid&gt;/exe 
re.match re.search re.match re.search * *? re.search(r'\[\[(.*?)\|(.*?)\]\]' value)  re.sub import re  WIKILINK_RE = re.compile(r'\[\[(.*?)\|(.*?)\]\]')  def wikilink(value):   def wikilink_sub_callback(match_obj):     alias = match_obj.group(1).strip()     text = match_obj.group(2).strip()     if(alias exists in Page):       class_attr = ''     else:       class_attr = ' class="redlink"'     return '&lt;a href="%s"%s&gt;%s&lt;/a&gt;' % (alias class_attr text)    return WIKILINK_RE.sub(wikilink_sub_callback value)  
cursor.execute("INSERT INTO table VALUES (%s %s %s)" (var1 var2 var3))  % 
for word in wordlist word = word.strip() if guess in word:     print ("Yessssh")  print (guess) #for testing purposes  print (repr(guess)) #for testing purposes  guess 
# this follows your pseudocode most closely but it is *not* # the most efficient since it creates the interpolation  # functions on each call to bilinterp from scipy import interpolate import numpy data = numpy.arange(0. 16.).reshape((44))  #2D array prices = numpy.arange(10000. 50000. 10000.) cars = numpy.arange(1. 5.) def bilinterp(pricecar):     return interpolate.interp1d(cars interpolate.interp1d(prices a)(price))(car) print bilinterp(220002)  
hasattr try/except 
def codeinfo():     import sys     f = sys._getframe(1)      filename = f.f_code.co_filename     classname = ''      if 'self' in f.f_locals:         classname = f.f_locals['self'].__class__.__name__      funcname = f.f_code.co_name      return "filename: %s\nclass: %s\nfunc: %s" % (filename classname funcname)  logger.info("Some message \n %s" % codeinfo())  
as with __enter__ 
(?:) r"(?:(?P&lt;a&gt;1)=(?P&lt;b&gt;2))|(?P&lt;c&gt;3)"  | r"(?P&lt;a&gt;1)=(?P&lt;b&gt;2)|(?P&lt;c&gt;3)"  
super super 
.encode codecs codecs.open csv import csv  def unicode_csv_reader(utf8_data dialect=csv.excel **kwargs):     csv_reader = csv.reader(utf8_data dialect=dialect **kwargs)     for row in csv_reader:         yield [unicode(cell 'utf-8') for cell in row]  filename = 'da.csv' reader = unicode_csv_reader(open(filename)) for field1 field2 field3 in reader:   print field1 field2 field3   csv line.decode('whateverweirdcodec').encode('utf-8') yield 'utf-8' csv 
#!/usr/bin/python /usr/bin/python /usr/local/bin/python /opt/local/bin/python #!/usr/bin/env python python PATH 
sep = '...' rest = text.split(sep 1)[0]  
page = wikipedia.Page(site u"Wikiquote:Quote_of_the_day:" + month)  
sys.exit() SystemExit thread.exit() sys.exit() thread.exit() 
class Oracle(object):   ...  class SQLite(object):   ...  dbkind = dict(sqlite=SQLite oracle=Oracle)  def Database(url):   db_type rest = string.split(self.url "://" 1)   return dbkind[db_type](rest)  
==== FILE: b.py ====  class B:     def __init__(self):         print "B"  import a  if __name__ == "__main__":     a = a.A()  ==== FILE: a.py ==== import b  class A(b.B):             ###=&gt; B  is not  defined     def __init__(self):         print "A"  
use strict; use warnings;  use Win32::OLE; $Win32::OLE::Warn = 3;  my $ie = get_ie();  $ie-&gt;{Visible} = 1;  $ie-&gt;Navigate(     'http://www.bmreports.com/servlet/com.logica.neta.bwp_PanBMDataServlet?'     .'param1=&amp;param2=&amp;param3=&amp;param4=&amp;param5=2009-04-22&amp;param6=37#' );  sleep 1 until is_ready( $ie );  my $scripts = $ie-&gt;Document-&gt;{scripts};  for my $script (in $scripts ) {     print $script-&gt;text; }  sub is_ready { $_[0]-&gt;{ReadyState} == 4 }  sub get_ie {     Win32::OLE-&gt;new('InternetExplorer.Application'          sub { $_[0] and $_[0]-&gt;Quit }     ); }  __END__  C:\Temp&gt; ie &gt; output  output 
compile exec compile exec compile exec compile exec 
Parent.options = dict(     option1='value1'     option2='value2' )  Child.options = dict(Parent.options     option2='value2a'     option3='value3' )  
import sys sys.stdout.buffer.write(b"some binary data")  
import re sys  # your convert function goes here  regex = re.compile(r'(\d+)') for line in sys.stdin:   sys.stdout.write(regex.sub(lambda m:   convert(int(m.group(1))) line))  re.sub 
&lt;netlist&gt;   &lt;net NetName="abc" attr1="123" attr2="234" attr3="345".../&gt;   &lt;net NetName="cde" attr1="456" attr2="567" attr3="678".../&gt;   .... &lt;/netlist&gt;  #!/usr/bin/perl  use strict; use warnings; use XML::Simple;  sub usage {   die "Usage: $0 [NetName] ([attr])\n"; }  my $file = XMLin("file.xml" KeyAttr =&gt; { net =&gt; 'NetName' });  usage() if @ARGV == 0;  exists $file-&gt;{net}{$ARGV[0]}   or die "$ARGV[0] does not exist.\n";   if(@ARGV == 2) {   exists $file-&gt;{net}{$ARGV[0]}{$ARGV[1]}     or die "NetName $ARGV[0] does not have attribute $ARGV[1].\n";   print "$file-&gt;{net}{$ARGV[0]}{$ARGV[1]}.\n";  } elsif(@ARGV == 1) {   print "$ARGV[0]:\n";   print "  $_ = $file-&gt;{net}{$ARGV[0]}{$_}\n"     for keys %{ $file-&gt;{net}{$ARGV[0]} };  } else {   usage(); }  'NetName' 'NetName' 
&gt;&gt;&gt; [random.randint(160) for _ in range(6)] [22 29 48 18 20 22]  &gt;&gt;&gt; [str(random.randint(160)) for _ in range(6)] ['55' '54' '15' '46' '42' '37']  
&gt;&gt;&gt; type(Person.objects.all()) &lt;class 'django.db.models.query.QuerySet'&gt;  &gt;&gt;&gt; pa = Person.objects.all() # Not evaluated yet - lazy &gt;&gt;&gt; type(pa) &lt;class 'django.db.models.query.QuerySet'&gt;  &gt;&gt;&gt; pa[2]  &gt;&gt;&gt; pa[2].first_name = "Blah"   &gt;&gt;&gt; PersonObject1.first_name = "Blah"  &gt;&gt;&gt; pa[2].save()   PersonObject2.save()  
public class InheritedAce {     public static string GetDACLReport(string path)     {         StringBuilder result = new StringBuilder();         FileSecurity fs = new FileSecurity(path AccessControlSections.Access);         foreach (var rule in fs.GetAccessRules(true true typeof(SecurityIdentifier)).OfType&lt;FileSystemAccessRule&gt;())         {             result.AppendFormat("{0}  --&gt;  IsInherited:  {1}" rule.FileSystemRights rule.IsInherited);             result.AppendLine();         }          return result.ToString();     } }  
print u'Ã'.encode('utf-8')  f = open(my_file) a = f.next().decode('utf-8') # you have a unicode line in a print a.encode('utf-8')   
class GraphElement:     def __init__(self graph):         pass  class Edge(GraphElement tuple):     def __new__(cls graph (source target)):         return tuple.__new__(cls (source target))     def __init__(self graph (source target)):         GraphElement.__init__(self graph)  
numpy.isnan(myarray).any()  import timeit s = 'import numpy;a = numpy.arange(10000.).reshape((100100));a[1010]=numpy.nan' ms = [     'numpy.isnan(a).any()'     'any(numpy.isnan(x) for x in a.flatten())'] for m in ms:     print "  %.2f s" % timeit.Timer(m s).timeit(1000) m    0.11 s numpy.isnan(a).any()   3.75 s any(numpy.isnan(x) for x in a.flatten())  &gt;&gt;&gt; a = numpy.float64(42.) &gt;&gt;&gt; numpy.isnan(a).any() False &gt;&gt;&gt; a = numpy.float64(numpy.nan) &gt;&gt;&gt; numpy.isnan(a).any() True  
class C(object):     blah blah  for name in (...):     setattr(C name "....")  
sys.executable import sys import subprocess  theproc = subprocess.Popen([sys.executable "myscript.py"]) theproc.communicate()  
class FindableModel(db.Model):   def __getattr__(self name):     if not name.startswith("find_by_"):       raise AttributeError(name)     field = name[len("find_by_"):]     return lambda value: self.all().filter(field value)  
# -*- coding: utf-8 -*- do_it()  
Form field_order class MyForm(forms.Form):     summary = forms.CharField()     description = forms.CharField(widget=forms.TextArea)     author = forms.CharField()     notes = form.CharField()      field_order = ['author' 'summary']  field_order ['author' 'summary' 'description' 'notes'] class EditForm(forms.Form):     summary = forms.CharField()     description = forms.CharField(widget=forms.TextArea)   class CreateForm(EditForm):     name = forms.CharField()      def __init__(self *args **kwargs):         super(CreateForm self).__init__(*args **kwargs)         self.fields.keyOrder = ['name' 'summary' 'description']  
httplib import httplib  @property def http_fileno(self):    return self.fp.fileno  @http_fileno.setter def http_fileno(self value):    self.fp.fileno = value  httplib.HTTPResponse.fileno = http_fileno  # and now on with the previous code # ...  fd.read(4096) fd poll 
#!/usr/bin/env python # -*- coding: utf-8 -*- from BeautifulSoup import BeautifulSoup  string = "Scam hoax or the real deal he&amp;#8217;s gonna work his way to the bottom of the sordid tale and hopefully end up with an arcade game in the process." s = BeautifulSoup(stringconvertEntities=BeautifulSoup.HTML_ENTITIES).contents[0] print s  
line.split() textWithIndentation = open(sys.argv[1] "r").read()  
os.path.expanduser("~")  os.environ['HOME']  
from multiprocessing import Process Queue cpu_count import random import time   def serve(queue):     works = ["task_1" "task_2"]     while True:         time.sleep(0.01)         queue.put(random.choice(works))   def work(id queue):     while True:         task = queue.get()         if task is None:             break         time.sleep(0.05)         print "%d task:" % id task     queue.put(None)   class Manager:     def __init__(self):         self.queue = Queue()         self.NUMBER_OF_PROCESSES = cpu_count()      def start(self):         print "starting %d workers" % self.NUMBER_OF_PROCESSES         self.workers = [Process(target=work args=(i self.queue))                         for i in xrange(self.NUMBER_OF_PROCESSES)]         for w in self.workers:             w.start()          serve(self.queue)      def stop(self):         self.queue.put(None)         for i in range(self.NUMBER_OF_PROCESSES):             self.workers[i].join()         self.queue.close()   Manager().start()  starting 2 workers 0 task: task_1 1 task: task_2 0 task: task_2 1 task: task_1 0 task: task_1  
re.sub(r'"(?:""|[^"])+"' '"string"' original)  
import re  s = 'this-is-toronto.-and-this-is-boston' t = re.sub('-[a-z]' lambda x: x.group(0).upper() s) print t  this-is-Toronto.-and-this-is-Boston  
from django.db.models.fields import EmailField def email_field_init(self *args **kwargs):   kwargs['max_length'] = kwargs.get('max_length' 200)   CharField.__init__(self *args **kwargs) EmailField.__init__ = email_field_init  from django.contrib.auth.models import User from django.utils.translation import ugettext as _ from django.db import models User.email = models.EmailField(_('e-mail address') blank=True max_length=200)  from django.contrib.auth.models import AbstractUser from django.db import models  class User(AbstractUser):     email = models.EmailField(_('e-mail address') blank=True max_length=200)  AUTH_USER_MODEL = 'your_app.models.User'  
def on_mouseDrag( self event ):            do_stuff()      if event.MiddleIsDown():         do_other_stuff()  
python $PATH svnperms.py #!/usr/bin/env python  $PATH python which python 
def maplist(func values):     return [map(func values[i:]) for i in xrange(len(values))]  &gt;&gt;&gt; maplist(lambda a: a* 2 [123]) [[2 4 6] [4 6] [6]]  def maplist(func values):     return [func(values[i:]) for i in xrange(len(values))]  &gt;&gt;&gt; maplist(lambda l: list(reversed(l)) [123]) [[3 2 1] [3 2] [3]]  
OnInit() wxWidgets::wxApp::OnInit() __init__(self...) 
&gt;&gt;&gt; sorted(mytuple) [['I' 4] ['say' 2] ['say' 5] ['tomato' 3] ['tomato' 6] ['you' 1]]  &gt;&gt;&gt; tuple(sorted(mytuple)) (['I' 4] ['say' 2] ['say' 5] ['tomato' 3] ['tomato' 6] ['you' 1])  
for e in Entry.objects.all():    if i.entered.hour&gt;= 9 and i.entered.hour &lt; 17 :# or break down to minutes/seconds         list.append(e)  
dict((myTuple[1] index) for index myTuple in enumerate(l))  &gt;&gt;&gt; l = [(1 2 3) (4 5 6) (1 4 6)] &gt;&gt;&gt; dict((myTuple[1] index) for index myTuple in enumerate(l)) {2: 0 4: 2 5: 1}  dict((myTuple[1] {'index': index}) for index myTuple in enumerate(l))  {2: {'index': 0} 4: {'index': 2} 5: {'index': 1}}  def build_index(l):     indexes = [(myTuple[1] index) for index myTuple in enumerate(l)]     d = {}     for e index in indexes:         d[e] = min(index d.get(e index))     return d  &gt;&gt;&gt; l = [(1 2 3) (4 5 6) (1 4 6) (2 4 6)] &gt;&gt;&gt; build_index(l) {2: 0 4: 2 5: 1}  def index(l key):     d = {}     for index myTuple in enumerate(l):         d[key(myTuple)] = min(index d.get(key(myTuple) index))     return d  &gt;&gt;&gt; index(l lambda a: a[1]) {2: 0 4: 2 5: 1}  
&gt;&gt;&gt; print '?????' ?????  &gt;&gt;&gt; u'?????'  u &gt;&gt;&gt; us = '?????'.decode('my-terminal-encoding')  # -*- encoding: ISO-8859-5 -*- us = u'?????'  sys.setdefaultencoding(...) sys.stdin.encoding 
urls.py urlpatterns = patterns(''     (r'^compare/(\d+)/(\d+)/$' 'my.compareview') )  def compareview(request id1 id2):     # in_bulk returns a dict: { obj_id1: &lt;MyModel instance&gt;      #                           obj_id2: &lt;MyModel instance&gt; }     # the SQL pulls all at once rather than sequentially... arguably     # better than async as it pulls in one DB hit rather than two     # happening at the same time     comparables = MyModel.objects.in_bulk([id1 id2])     o1 o2 = (comparables.get(id1) comparables.get(id2))        
from struct import Struct  unpacker = Struct("b") unpacker.unpack("z")[0]  
from ctypes import *  list = (c_int*1)()  def customresize(array new_size):     resize(array sizeof(array._type_)*new_size)     return (array._type_*new_size).from_address(addressof(array))  list[0] = 123 list = customresize(list 5)  &gt;&gt;&gt; list[0] 123 &gt;&gt;&gt; list[4] 0  
*args def manyArgs(*arg):   print "I was called with" len(arg) "arguments:" arg  &gt;&gt;&gt; manyArgs(1) I was called with 1 arguments: (1) &gt;&gt;&gt; manyArgs(1 2 3) I was called with 3 arguments: (1 2 3)  
from lineup import registry from lineup import _debug  def create_archive(queue_id queue):     queue.set_param("zip_link" _create_archive(resource = queue.context_object user = queue.user))     return queue   def create_archive_callback(queue_id queue):     _send_email_notification(subject = queue.get_param("zip_link") user = queue.user)     return queue  registry.register_job('create_archive' create_archive callback = create_archive_callback)      from lineup.factory import JobFactory     j = JobFactory()     j.create_job(self 'create_archive' request.user your_resource_object_containing_files_to_zip { 'extra_param': 'value' })  ./manage.py run_queue  
threading.get_ident() threading.current_thread().ident threading.currentThread().ident 
import gc  def foo():                                   code = """ class DummyA(object):     pass              """     context = {}     exec code in context     exec code in context      gc.collect()     print len(gc.garbage) len(gc.get_objects())  gc.enable() foo(); foo() # amount of objects doesn't increase gc.set_debug(gc.DEBUG_LEAK) foo() # leaks  
def __unicode__(self):     return u'%s' % self.choice  
range xrange sorted enumerate 
# Send an HTML email with an embedded image and a plain text message for # email clients that don't want to display the HTML.  from email.MIMEMultipart import MIMEMultipart from email.MIMEText import MIMEText from email.MIMEImage import MIMEImage  # Define these once; use them twice! strFrom = 'from@example.com' strTo = 'to@example.com'  # Create the root message and fill in the from to and subject headers msgRoot = MIMEMultipart('related') msgRoot['Subject'] = 'test message' msgRoot['From'] = strFrom msgRoot['To'] = strTo msgRoot.preamble = 'This is a multi-part message in MIME format.'  # Encapsulate the plain and HTML versions of the message body in an # 'alternative' part so message agents can decide which they want to display. msgAlternative = MIMEMultipart('alternative') msgRoot.attach(msgAlternative)  msgText = MIMEText('This is the alternative plain text message.') msgAlternative.attach(msgText)  # We reference the image in the IMG SRC attribute by the ID we give it below msgText = MIMEText('&lt;b&gt;Some &lt;i&gt;HTML&lt;/i&gt; text&lt;/b&gt; and an image.&lt;br&gt;&lt;img src=&quot;cid:image1&quot;&gt;&lt;br&gt;Nifty!' 'html') msgAlternative.attach(msgText)  # This example assumes the image is in the current directory fp = open('test.jpg' 'rb') msgImage = MIMEImage(fp.read()) fp.close()  # Define the image's ID as referenced above msgImage.add_header('Content-ID' '&lt;image1&gt;') msgRoot.attach(msgImage)  # Send the email (this example assumes SMTP authentication is required) import smtplib smtp = smtplib.SMTP() smtp.connect('smtp.example.com') smtp.login('exampleuser' 'examplepass') smtp.sendmail(strFrom strTo msgRoot.as_string()) smtp.quit()  
~/Library/Application Support/TextMate/Bundles/ Bundles | Bundle Editor | Reload Bundles Mako HTML (Mako) 
import $PYTHONPATH #mainprogram.py class mainprogram:     def runme(self):         execfile("my2ndscript.py")     def bleh(self):         print "bleh" if __name__ == '__main__':     mainprogram().runme()  #my2ndscript.py import mainprogram x = mainprogram.mainprogram() x.bleh()  mainprogram #mainprogram.py class mainprogram:     def runme(self):         execfile("my2ndscript.py" globals={'this': self})     def bleh(self):         print "bleh" if __name__ == '__main__':     mainprogram().runme()  #my2ndscript.py this.bleh()  execfile import __import__ reload() #mainprogram.py import my2ndscript  class mainprogram:     def runme(self):         reload(my2ndscript)         my2ndscript.main(self)     def bleh(self):         print "bleh"  if __name__ == '__main__':     mainprogram().runme()  #my2ndscript.py def main(program):     program.bleh()  
import subprocess process = subprocess.Popen(["yourcommand"] stdout=subprocess.PIPE) result = process.communicate()[0]  
&gt;&gt;&gt; mat = [[0]*2 for x in xrange(3)] &gt;&gt;&gt; mat[0][0] = 1 &gt;&gt;&gt; mat [[1 0] [0 0] [0 0]]  def matrix(rows cols):     return [[0]*cols for x in xrange(rows)]  
import glob from BeautifulSoup import BeautifulSoup  for filename in glob.glob('/home/phi/Data/*.htm'):     soup = BeautifulSoup(open(filename "r").read()) # assuming some HTML     for a_tr in soup.findAll("tr" attrs={ "class" : "evenColor" }):         print a_tr  
&lt;br/&gt; pattern = re.compile('&lt;p class=\"thisClass\"&gt;(.*?)&lt;\/p&gt;' re.DOTALL)  
(a b *rest) = seq  
local from mako.template import Template from mako.runtime import Context from StringIO import StringIO  mytemplate = Template(""" &lt;%def name='html_link(w)'&gt; &lt;a href='http://${w}'&gt;${w}&lt;/a&gt; &lt;/%def&gt; &lt;%def name='text_link(w)'&gt; ${w} &lt;/%def&gt; &lt;%def name="body()"&gt; I visit ${getattr(local format + '_link')(website)} all the time. &lt;/%def&gt; """)  buf = StringIO() ctx = Context(buf website='stackoverflow.com' format='html') mytemplate.render_context(ctx) print buf.getvalue()  I visit  &lt;a href='http://stackoverflow.com'&gt;stackoverflow.com&lt;/a&gt;  all the time.  
regexp = re.compile(r'\[(\d+)\] SERVICE NOTIFICATION: (.+)') with open('var/tmp/nagios.log' 'r') as file:     for line in file:         fields = line.split(';')         match = regexp.match(fields[0])         if match:             timestamp = int(match.group(1))             hostname = match.group(2)  
the_dict globals().update(the_dict) for (n v) in the_dict.items():     exec('%s=%s' % (n repr(v)))  exec 
import numpy as np import matplotlib.pyplot as plt  x = np.linspace(0 2*np.pi 100) y = np.sin(x)  ax = plt.subplot(111) ax.plot(x y)  # Hide the right and top spines ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False)  # Only show ticks on the left and bottom spines ax.yaxis.set_ticks_position('left') ax.xaxis.set_ticks_position('bottom')  plt.show()  
main import sys  def main(args):     pass  # All your other function definitions here  if __name__ == '__main__':     exit(main(sys.argv[1:]))  main __name__ main dict dict 
Queue Queue.Queue multiprocessing Queue.Queue Queue.Queue Queue.Queue Queue.Queue Queue.Queue multiprocessing Queue.Queue 
/usr/bin/python -&gt; python2.6 /usr/bin/python2.5 /usr/bin/python2.6  
1. An object can be iterated over with "for" if it implements    __iter__() or __getitem__().  2. An object can function as an iterator if it implements next().  
class A(object):     # show what happens with a non-iterable class with no __getitem__     pass  class B(object):     def __getitem__(self k):         return k     def __iter__(self):         raise TypeError('%r object is not iterable'                         % self.__class__.__name__)  &gt;&gt;&gt; iter(A()) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: 'A' object is not iterable &gt;&gt;&gt; iter(B()) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "iter.py" line 9 in __iter__     % self.__class__.__name__) TypeError: 'B' object is not iterable  
all(value in some_map for value in required_values)  
gateway = new NetConnection(); gateway.addEventListener(NetStatusEvent.NET_STATUS gateway_status); gateway.connect("http://127.0.0.1:8000/robs_amf/default/call/amfrpc/"); resp = new Responder(show_results on_fault); gateway.call("getContacts" resp);  
import os.path sys PY_PATH = None for p in ['c:\\Data\\Python' 'e:\\Data\\Python''c:\\Python''e:\\Python']:     if os.path.exists(p):          PY_PATH = p         break if PY_PATH and PY_PATH not in sys.path: sys.path.append(PY_PATH)  
\s re startswith \s 
class SuperFoo(models.Model):     name = models.CharField('name of SuperFoo instance' max_length=50)     ...     class Meta:          abstract = True  class Foo(SuperFoo):     ... # do something that changes verbose_name of name field of SuperFoo Foo._meta.get_field('name').verbose_name = 'Whatever'  
sudo /etc/init.d/apache stop sudo /etc/init.d/apache restart  raise Exception() 
class Person(object):     AnotherName = 'Sue Ann'     def __init__(self):         super(Person self).__init__()         self.FirstName = 'Tom'         self.LastName = 'Sneed'      def get_name(self):         return self.FirstName + ' ' + self.LastName  class Employee(Person):     def __init__(self):         super(Employee self).__init__()         self.empnum = 'abc123'      def get_emp(self):         print self.AnotherName         return self.FirstName + ' ' + 'abc'  
(the entire matched section + all the matched groups) group() 
from Tkinter import * root = Tk()  aValue = "5" spam = StringVar() spam.set(aValue)  class MyScale(Scale):     def __init__(selfvar*args**kwargs):         self.var_pointer = var         Scale.__init__(self*args**kwargs)         self.bind("&lt;ButtonRelease-1&gt;"self.getValue)         self.set(var.get())     def getValue(selfevent):         ## spam gets changed to the new value set          ## by the user manipulating the scale         self.var_pointer.set(self.get())  eggs = MyScale(spam) eggs.pack(anchor=CENTER)  
&gt;&gt;&gt; import csv &gt;&gt;&gt; reader = csv.reader(open('C:/www/stackoverflow.txt') delimiter='\t') &gt;&gt;&gt; for row in reader: ...     print row ... ['1' 'John Smith' 'Developer' 'http://twiiter.com/johns' 'Chicago IL'] ['2' 'John Doe' 'Developer' 'http://whatever.com' 'Tallahassee FL']  
    (...)     while True:         if line.rstrip().endswith('"""'):             line = infile.readline()             return find_comment(infile line)         else:             line = infile.readline()  
Projectfundingdetail.objects.annotate(latest=Max('project__projectfundingdetail__end_date')).filter(end_date=F('latest')).filter(budget__lte==1000).select_related()  &gt;&gt;&gt; Projectfundingdetail.objects.latest_by_project()  &gt;&gt;&gt; Projectfundingdetail.objects.latest_by_project().filter(budget__lte=1000)  from django.db import connection models qn = connection.ops.quote_name  class ProjectfundingdetailManager(models.Manager):     def latest_by_project(self):         project_model = self.model._meta.get_field('project').rel.to          names = {'project': qn(project_model._meta.db_table)                  'pfd': qn(self.model._meta.db_table)                  'end_date': qn(self.model._meta.get_field('end_date').column)                  'project_id': qn(self.model._meta.get_field('project').column)                  'pk': qn(self.model._meta.pk.column)                  'p_pk': qn(project_model._meta.pk.column)}          sql = """SELECT pfd.%(pk)s FROM %(project)s AS p                   JOIN %(pfd)s AS pfd ON p.%(p_pk)s = pfd.%(project_id)s                  WHERE pfd.%(end_date)s =                      (SELECT MAX(%(end_date)s) FROM %(pfd)s                        WHERE %(project_id)s = p.%(p_pk)s)               """ % names          cursor = connection.cursor()         cursor.execute(sql)         return self.model.objects.filter(id__in=[r[0] for r                                                  in cursor.fetchall()])  
inspect.getsource(forms.ContactForm) BlockFinder.tokeneater() ContactForm tokenize.DEDENT inspect class ContactForm(forms.Form):     full_name = forms.CharField(max_length=120)     email = forms.EmailField()     website = forms.URLField()     message = forms.CharField(max_length=500 widget=forms.Textarea)     send_notification = forms.BooleanField(required=False)     # &lt;-- insert 4 spaces here     fieldsets = ((u'Personal Information'                 {'fields': ('full_name' 'email' 'website')                 'description': u'Your personal information will not ' \                                 u'be shared with 3rd parties.'})                 (None                 {'fields': ('message')                 'description': u'All HTML will be stripped out.'})                 (u'Preferences'                 {'fields': ('send_notification')}))  inspect.getsource(forms) inspect 
a = value global a = 7 def setA(value):     global a   # declare a to be a global     a = value  # this sets the global value of a  
def latin1_to_ascii (unicrap):     """This replaces UNICODE Latin-1 characters with     something equivalent in 7-bit ASCII. All characters in the standard     7-bit ASCII range are preserved. In the 8th bit range all the Latin-1     accented letters are stripped of their accents. Most symbol characters     are converted to something meaningful. Anything not converted is deleted.     """     xlate = {         0xc0:'A' 0xc1:'A' 0xc2:'A' 0xc3:'A' 0xc4:'A' 0xc5:'A'         0xc6:'Ae' 0xc7:'C'         0xc8:'E' 0xc9:'E' 0xca:'E' 0xcb:'E'         0xcc:'I' 0xcd:'I' 0xce:'I' 0xcf:'I'         0xd0:'Th' 0xd1:'N'         0xd2:'O' 0xd3:'O' 0xd4:'O' 0xd5:'O' 0xd6:'O' 0xd8:'O'         0xd9:'U' 0xda:'U' 0xdb:'U' 0xdc:'U'         0xdd:'Y' 0xde:'th' 0xdf:'ss'         0xe0:'a' 0xe1:'a' 0xe2:'a' 0xe3:'a' 0xe4:'a' 0xe5:'a'         0xe6:'ae' 0xe7:'c'         0xe8:'e' 0xe9:'e' 0xea:'e' 0xeb:'e'         0xec:'i' 0xed:'i' 0xee:'i' 0xef:'i'         0xf0:'th' 0xf1:'n'         0xf2:'o' 0xf3:'o' 0xf4:'o' 0xf5:'o' 0xf6:'o' 0xf8:'o'         0xf9:'u' 0xfa:'u' 0xfb:'u' 0xfc:'u'         0xfd:'y' 0xfe:'th' 0xff:'y'         0xa1:'!' 0xa2:'{cent}' 0xa3:'{pound}' 0xa4:'{currency}'         0xa5:'{yen}' 0xa6:'|' 0xa7:'{section}' 0xa8:'{umlaut}'         0xa9:'{C}' 0xaa:'{^a}' 0xab:'&lt;&lt;' 0xac:'{not}'         0xad:'-' 0xae:'{R}' 0xaf:'_' 0xb0:'{degrees}'         0xb1:'{+/-}' 0xb2:'{^2}' 0xb3:'{^3}' 0xb4:"'"         0xb5:'{micro}' 0xb6:'{paragraph}' 0xb7:'*' 0xb8:'{cedilla}'         0xb9:'{^1}' 0xba:'{^o}' 0xbb:'&gt;&gt;'         0xbc:'{1/4}' 0xbd:'{1/2}' 0xbe:'{3/4}' 0xbf:'?'         0xd7:'*' 0xf7:'/'     }      r = ''     for i in unicrap:         if xlate.has_key(ord(i)):             r += xlate[ord(i)]         elif ord(i) &gt;= 0x80:             pass         else:             r += i     return r  # This gives an example of how to use latin1_to_ascii(). # This creates a string will all the characters in the latin-1 character set # then it converts the string to plain 7-bit ASCII. if __name__ == '__main__': s = unicode('''latin-1') for c in range(32256):     if c != 0x7f:         s = s + unicode(chr(c)'latin-1') print 'INPUT:' print s.encode('latin-1') print print 'OUTPUT:' print latin1_to_ascii(s)  
self.redirect POST post get post POST def post def get action="post" action="get" post get 
def parsemsg(s):     &quot;&quot;&quot;Breaks a message from an IRC server into its prefix command and arguments.     &quot;&quot;&quot;     prefix = ''     trailing = []     if not s:        raise IRCBadMessage(&quot;Empty line.&quot;)     if s[0] == ':':         prefix s = s[1:].split(' ' 1)     if s.find(' :') != -1:         s trailing = s.split(' :' 1)         args = s.split()         args.append(trailing)     else:         args = s.split()     command = args.pop(0)     return prefix command args  parsemsg(&quot;:test!~test@test.com PRIVMSG #channel :Hi!&quot;) # ('test!~test@test.com' 'PRIVMSG' ['#channel' 'Hi!'])   
save() 
assertEqual assertEquals failUnlessEqual  # Synonyms for assertion methods  assertEqual = assertEquals = failUnlessEqual  failUnlessEqual assertEquals assertEqual 
&gt;&gt;&gt; 'hello world'[::-1] 'dlrow olleh'  [begin:end:step] 
self self def foo(result *argv):     print argv[0]  def foo(self result *argv):     print argv[0]  self result 
friendList = friendList.append(self)  friendList None append return None def getFriends(selfdegree friendList):     if degree == 0:         friendList.append(self)         return friendList     else:         friendList.append(self)         for each in self.friends:             each.getFriends(degree-1 friendList)         return friendList  def getFriends(selfdegree friendList):     friendList.append(self)     if degree &gt; 0:         for each in self.friends:             each.getFriends(degree-1 friendList)     return friendList  alist=alist.append(...) 
class myList(list):     def __new__(cls data=None):         obj = super(myList cls).__new__(cls data)         return obj      def __str__(self):         return 'myList(%s)' % list(self)      def __add__(self other):         return myList(list(self) + list(other))  &gt;&gt;&gt; l = myList(range(5)) &gt;&gt;&gt; print l myList([0 1 2 3 4]) &gt;&gt;&gt; print l + [1 2] myList([0 1 2 3 4 1 2]) &gt;&gt;&gt; l.sort() &gt;&gt;&gt; print l myList([0 1 2 3 4])  
tags description description 
def next_string(s):     strip_zs = s.rstrip('z')     if strip_zs:         return strip_zs[:-1] + chr(ord(strip_zs[-1]) + 1) + 'a' * (len(s) - len(strip_zs))     else:         return 'a' * (len(s) + 1)  z a z a 
def display(var):     import inspect re     callingframe = inspect.currentframe().f_back     cntext = "".join(inspect.getframeinfo(callingframe 5)[3]) #gets 5 lines     m = re.search("display\s+\(\s+(\w+)\s+\)" cntext re.MULTILINE)     print m.group(1) type(var) var  display(         my_var        )  display(first_var) display(second_var)  
global def increment(n)   # this creates a new local m   m = n+1   return m  m m global def increment(n)   global increment_calls   increment_calls += 1   return n+1  global globvar &gt;&gt;&gt; import animals &gt;&gt;&gt; d = animals.dog() &gt;&gt;&gt; d.bark() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "animals.py" line 7 in bark     print globvar NameError: global name 'globvar' is not defined  globvar class dog:    def __init__(self):       global globvar       globvar = 1 ...  &gt;&gt;&gt; import animals &gt;&gt;&gt; d = animals.dog() &gt;&gt;&gt; d.bark() 1 &gt;&gt;&gt; print animals.globvar 1  
 match = re.search (r'^\[(\d+)\] (SERVICE NOTIFICATION:).*(\bCRITICAL).*(%s)'                     % options.hostname line)  
from numpy import * from pylab import ion plot draw show xlabel ylabel figure  sample_rate = 20000. times = arange(0 10. 1./sample_rate) wfm0 = sin(2*pi*200.*times) wfm1 = sin(2*pi*500.*times) *(10.-times)/10. wfm = wfm0+wfm1 #  int test #wfm *= 2**8 #wfm = wfm.astype(int16) #wfm = wfm.astype(float) #  abs test #wfm = abs(wfm) #  clip test #wfm = clip(wfm  -1.2 1.2)  fft_length = 5*2048. total_num_samps = len(times) num_fft = (total_num_samps / fft_length ) - 2 temp = zeros((num_fftfft_length) float)  for i in range(num_fft):     temp[i:] = wfm[i*fft_length:(i+1)*fft_length]  pts = fft_length/2+1 data = (abs(fft.rfft(temp fft_length)) / (pts))[:pts]  x_axis = arange(pts)*sample_rate*.5/pts spec_range = pts plot(x_axis data[2] linewidth=3) xlabel("freq (Hz)") ylabel('abs(FFT)') show()  
from django.db import models from django.contrib.contenttypes import generic from django.contrib.contenttypes.models import ContentType  class Client(models.Model):     city = models.CharField(max_length=16)      # These aren't required but they'll allow you do cool stuff     # like "person.sent_messages.all()" to get all messages sent     # by that person and "person.received_messages.all()" to     # get all messages sent to that person.     # Well...sort of since "received_messages.all()" will return     # a queryset of "MessageRecipient" instances.     sent_messages = generic.GenericRelation('Message'         content_type_field='sender_content_type'         object_id_field='sender_id'     )     received_messages = generic.GenericRelation('MessageRecipient'         content_type_field='recipient_content_type'         object_id_field='recipient_id'     )      class Meta:         abstract = True  class PersonClient(Client):     first_name = models.CharField(max_length=16)     last_name = models.CharField(max_length=16)     gender = models.CharField(max_length=1)      def __unicode__(self):         return u'%s %s' % (self.last_name self.first_name)  class CompanyClient(Client):     name = models.CharField(max_length=32)     tax_no = models.PositiveIntegerField()      def __unicode__(self):         return self.name  class Message(models.Model):     sender_content_type = models.ForeignKey(ContentType)     sender_id = models.PositiveIntegerField()     sender = generic.GenericForeignKey('sender_content_type' 'sender_id')     msg_body = models.CharField(max_length=1024)      def __unicode__(self):         return u'%s...' % self.msg_body[:25]  class MessageRecipient(models.Model):     message = models.ForeignKey(Message)     recipient_content_type = models.ForeignKey(ContentType)     recipient_id = models.PositiveIntegerField()     recipient = generic.GenericForeignKey('recipient_content_type' 'recipient_id')      def __unicode__(self):         return u'%s sent to %s' % (self.message self.recipient)  &gt;&gt;&gt; person1 = PersonClient.objects.create(first_name='Person' last_name='One' gender='M') &gt;&gt;&gt; person2 = PersonClient.objects.create(first_name='Person' last_name='Two' gender='F') &gt;&gt;&gt; company = CompanyClient.objects.create(name='FastCompany' tax_no='4220') &gt;&gt;&gt; company_ct = ContentType.objects.get_for_model(CompanyClient) &gt;&gt;&gt; person_ct = ContentType.objects.get_for_model(person1) # works for instances too.  # now we create a message:  &gt;&gt;&gt; msg = Message.objects.create(sender_content_type=person_ct sender_id=person1.pk msg_body='Hey did any of you move my cheese?')  # and send it to a coupla recipients:  &gt;&gt;&gt; MessageRecipient.objects.create(message=msg recipient_content_type=person_ct recipient_id=person2.pk) &gt;&gt;&gt; MessageRecipient.objects.create(message=msg recipient_content_type=company_ct recipient_id=company.pk) &gt;&gt;&gt; MessageRecipient.objects.count() 2  
inspect.getargspec(cb) d args = inspect.getargspec(cb)[0] cb( **dict((ad.get(a)) for a in args) )  
entries = Entry.objects.filter(user=request.user).order_by("-timestamp")  {% for entry in entries %}     &lt;td&gt;{{ entry.datadesc }}&lt;/td&gt;     &lt;td&gt;&lt;table&gt;     {% for file in entry.entryfile_set.all %}         &lt;td&gt;{{ file.datafile.name|split:"/"|last }}&lt;/td&gt;         &lt;td&gt;{{ file.datafile.size|filesizeformat }}&lt;/td&gt;         &lt;td&gt;&lt;a href="{{ object.datafile.url }}"&gt;download&lt;/a&gt;&lt;/td&gt;         &lt;td&gt;&lt;a href="{% url main.views.delete object.id %}"&gt;delete&lt;/a&gt;&lt;/td&gt;     {% endfor %}     &lt;/table&gt;&lt;/td&gt; {% endfor %}  related_name entry = models.ForeignKey(Entry)  entry = models.ForeignKey(Entry related_name='files')  {% for file in files.entryfile_set.all %}  {% for file in entry.files.all %}  
easy_install ElementTree easy_install Markdown  import markdown markdown_text = """[Hollywood Holt](http://www.hollywoodholt.com)""" html = markdown.markdown(markdown_text)  
codecs.BOM_UTF8 import codecs  file = codecs.open("lol" "w" "utf-8") file.write(u'\ufeff') file.close()  
import bluetooth  def whats_nearby():     name_by_addr = {}     nearby = bluetooth.discover_devices(flush_cache=True)     for bd_addr in nearby:         name = bluetooth.lookup_name( bd_addr 5)         print bd_addr name         name_by_addr[bd_addr] = name     return name_by_addr  def what_services( addr name ):     print " %s - %s" % ( addr name )     for services in bluetooth.find_service(address = addr):          print "\t Name:           %s" % (services["name"])          print "\t Description:    %s" % (services["description"])          print "\t Protocol:       %s" % (services["protocol"])          print "\t Provider:       %s" % (services["provider"])          print "\t Port:           %s" % (services["port"])          print "\t service-classes %s" % (services["service-classes"])         print "\t profiles        %s" % (services["profiles"])         print "\t Service id:  %s" % (services["service-id"])          print ""   if __name__ == "__main__":     name_by_addr = whats_nearby()     for addr in name_by_addr.keys():         what_services(addr name_by_addr[addr])  
public abstract class Command {   public final Object execute(Map&lt;String Object&gt; args) {     // do permission checking here or transaction management     Object retval = doExecute(args);     // do logging cleanup caching etc here     return retval;   }   // subclasses override this to do the real work   protected abstract Object doExecute(Map&lt;String Object&gt; args); }  
textDidChange_ NSTextField textDidChange controlTextDidChange_ NSTextField NSControl def controlTextDidChange_(self notification):     NSLog("textdidchange")  
src = 'foo="bar"\n' 
from setuptools.command import easy_install easy_install.main( ["-U""py2app"] )  
__method __method__ _method _single_leading_underscore from M     import * single_trailing_underscore_ Tkinter.Toplevel(master class_='ClassName')  __double_leading_underscore FooBar _FooBar__boo __double_leading_and_trailing_underscore__ __init__ __import__ __file__ 
class MyThing( object ):     def __init__( self theInstance ):         self.ec2_instance = theInstance   MyThing boto.ec2.instance.Instance 
iface = "eth0" socket.inet_ntoa(fcntl.ioctl(socket.socket(socket.AF_INET socket.SOCK_DGRAM) 35099 struct.pack('256s' iface))[20:24])  
shell=True for el in ('90.''52.62263.''26.5651.''10.8123.'):     if el == '90.':         z = ('0.')     elif el == '52.62263.':         z = ('0.' '72.' '144.' '216.' '288.')     elif el == '26.5651':         z = ('324.' '36.' '108.' '180.' '252.')     else el == '10.8123':         z = ('288.' '0.' '72.' '144.' '216.')      for az in z:          exepath = os.path.join('Path where .exe file is')         exepath = os.path.normpath(comstring)          cmd = [exepath '-el' str(el) '-n' str(z)]          print 'The python program is running this command:'         print cmd          process = Popen(cmd stderr=STDOUT stdout=PIPE)         outputstring = process.communicate()[0]          print 'The command returned the following back to python:'         print outputstring         outputlist = outputstring.splitlines()         AspecificLine = outputlist[22]   # get some specific line. 23?         print AspecificLine  
sys.exc_info()[:2] Queue.Queue .put .get 
return self.insert(key root=tmp.left)  self.insert(key root=tmp.left)  
__init__.py __init__.py __init__.py urls.py __init__.py base.py urls.py urls.py urls.py 
print print Old: print "The answer is" 2*2 New: print("The answer is" 2*2)  Old: print x           # Trailing comma suppresses newline New: print(x end=" ")  # Appends a space instead of a newline  Old: print              # Prints a newline New: print()            # You must call the function!  Old: print &gt;&gt;sys.stderr "fatal error" New: print("fatal error" file=sys.stderr)  Old: print (x y)       # prints repr((x y)) New: print((x y))      # Not the same as print(x y)!  
somere.sub(lambda m: replacements[m.group()] text)  &gt;&gt;&gt; za = re.compile('z\w') &gt;&gt;&gt; za.sub(lambda m: dict(za='BLU' zo='BLA')[m.group()] 'fa za zo bu') 'fa BLU BLA bu'  .get [] replacements '\d+S' def dict_sub(d text):    """ Replace in 'text' non-overlapping occurences of REs whose patterns are keys   in dictionary 'd' by corresponding values (which must be constant strings: may   have named backreferences but not numeric ones). The keys must not contain   anonymous matching-groups.   Returns the new string."""     # Create a regular expression  from the dictionary keys   regex = re.compile("|".join("(%s)" % k for k in d))   # Facilitate lookup from group number to value   lookup = dict((i+1 v) for i v in enumerate(d.itervalues()))    # For each match find which group matched and expand its value   return regex.sub(lambda mo: mo.expand(lookup[mo.lastindex]) text)    d={'\d+S': 'wot' '\d+T': 'zap'}   t='And 23S and 45T and 66T but always 029S!'   print dict_sub(d t)  And wot and zap and zap but always wot!  lookup mo.expand(d.values()[mo.lastindex-1]) d 
class Person(db.Model):     mother = db.SelfReferenceProperty(collection_name='mother_set')     father = db.SelfReferenceProperty(collection_name='father_set')     firstName = db.StringProperty()  
from StringIO import StringIO import string  inputs = ["10:a stringly"          "i1234e"           "l1:a1:be"          "d1:a1:b3:one3:twoe"]  # Constants DICT_TYPE = 'd' LIST_TYPE = 'l' INT_TYPE  = 'i' TOKEN_EOF = '' TOKEN_END = 'e' COLON     = ':'   class BadTypeIndicatorException(Exception):pass   def read_int(stream):     s = ""     while True:       ch = stream.read(1)       if ch not in [TOKEN_EOF TOKEN_END COLON]:          s += ch       else:          break     return s   def tokenize(stream):     s = ""     while True:        ch = stream.read(1)        if ch == TOKEN_END or ch == TOKEN_EOF:          return         if ch == COLON:          length = int(s)          yield stream.read(length)          s = ""        else:          s += ch   def parse(stream):     TYPE = stream.read(1)     if TYPE in string.digits:       length = int( TYPE + read_int(stream) )       return stream.read(length)     elif TYPE is INT_TYPE:        return int( read_int(stream) )     elif TYPE is LIST_TYPE:        return list(tokenize(stream))     elif TYPE is DICT_TYPE:       tokens = list(tokenize(stream))       return dict(zip(tokens[0::2] tokens[1::2]))     else:        raise BadTypeIndicatorException    for input in inputs:    stream = StringIO(input)    print parse(stream)  
m def callback(msg):     print msg  def callback_factory(m):     return lambda: callback(m)  funcList=[] for m in ('do' 're' 'mi'):     funcList.append(callback_factory(m)) for f in funcList:     f()  m callback_factory callback_factory from functools import partial  def callback(msg):     print msg  funcList=[partial(callback m) for m in ('do' 're' 'mi')] for f in funcList:     f()  
&gt;&gt;&gt; client = gdata.youtube.service.YouTubeService() &gt;&gt;&gt; video = client.GetYouTubeVideoEntry(video_id='CoYBkXD0QeU') &gt;&gt;&gt; video.author[0].name.text 'GoogleDevelopers'  
data = irc.recv ( 4096 ) try: data = str(data"UTF-8") except UnicodeDecodeError: data = str(data"CP1252")  
import gtk  square_sz = 20 pixmap = None colour = "#FF0000" gc = None  def configure_event( widget event):     global pixmap     x y width height = widget.get_allocation()     pixmap = gtk.gdk.Pixmap(widget.window width height)     white_gc = widget.get_style().white_gc     pixmap.draw_rectangle(white_gc True 0 0 width height)     return True  def expose_event(widget event):     global pixmap     if pixmap:         x  y w h = event.area         drawable_gc = widget.get_style().fg_gc[gtk.STATE_NORMAL]         widget.window.draw_drawable(drawable_gc pixmap x y x y w h)     return False  def button_press_event(widget event):     global pixmap square_sz gc colour     if event.button == 1 and pixmap:         x = int(event.x / square_sz) * square_sz         y = int(event.y / square_sz) * square_sz         if not gc:             gc = widget.window.new_gc()             gc.set_rgb_fg_color(gtk.gdk.color_parse(colour))         pixmap.draw_rectangle(gc True x y square_sz square_sz)         widget.queue_draw_area(x y square_sz square_sz)      return True  if __name__ == "__main__":     da = gtk.DrawingArea()     da.set_size_request(square_sz*20 square_sz*20)      da.connect("expose_event" expose_event)     da.connect("configure_event" configure_event)     da.connect("button_press_event" button_press_event)      da.set_events(gtk.gdk.EXPOSURE_MASK | gtk.gdk.BUTTON_PRESS_MASK)      w = gtk.Window()     w.add(da)     w.show_all()     w.connect("destroy" lambda w: gtk.main_quit())      gtk.main()  
' '.join(str(i) for i in your_list)  
&lt;shameless plug&gt; &lt;/shameless plug&gt; 
print sys.stdout stdin stdout stderr stdout stderr 
def do_this_on_column_reflect(inspector table column_info):     column_name = column_info.get("name")     if column_name == "create_datetime":         column_info["default"] = datetime.now() event.listen(Table "column_reflect" do_this_on_column_reflect)  
for keyvalue in request.GET.items():     setattr(foo key value)  
AAF(10 [4 5.5 10] [1 1 2] 3);  void f(list o) {     std::size_t n = len(o);     double* tmp = new double[n];     for (int i = 0; i &lt; n; i++) {         tmp[i] = extract&lt;double&gt;(o[i]);     }     std::cout &lt;&lt; std::endl;     // use tmp     delete tmp; }  
&gt;&gt;&gt; listDict = [{'id':1'other':2}{'id':3'other':4}{'id':5'other':6}] &gt;&gt;&gt; [item["id"] for item in listDict] [1 3 5]  
lambda self.connect(button3 SIGNAL("clicked()")     lambda who="Three": self.anyButton(who))  functools.partial lambda 
for 
yield def application(environ start_response):     start_response('200 OK' [('Content-type' 'text/plain')]     yield 'Chunk 1\n'         yield 'Chunk 2\n'         yield 'Chunk 3\n'     for chunk in chunk_data_generator():         yield chunk  def chunk_data_generator()     yield 'Chunk 4\n'     yield 'Chunk 5\n'  BUFFER_SIZE = 10 # 10 bytes for testing. Use something bigger def application(environ start_response):     start_response('200 OK' [('Content-type' 'text/plain')]     buffer = []     size = 0     for chunk in chunk_generator():         buffer.append(chunk)         size += len(chunk)         if size &gt; BUFFER_SIZE:             for buf in buffer:                 yield buf             buffer = []             size = 0  def chunk_data_generator()     yield 'Chunk 1\n'         yield 'Chunk 2\n'         yield 'Chunk 3\n'     yield 'Chunk 4\n'     yield 'Chunk 5\n'  
re.compile('$^')  re.compile('a^')  
django.models.SlugField from django.core.validators import validate_slug  slug = forms.CharField(... validators=[validate_slug])  from django.core.validators import slug_re  if slug_re.match(...):     ...  
combined_list = zip(somelist otherlist) ... {% for item in combined_list %}     {{ item.0 }} {{ item.1 }} {% endfor %}  
class CheckingThread(threading.Thread):     '''     This class runs a check on Parent Window to see if it still is running     If Parent Window closes this class kills the Python Window application in memory     '''     def run(self):         '''         Checks Parent Window in 5 seconds intervals to make sure it is still alive.         If not alive exit application         '''         self.needKill = False          while not self.needKill:             if self.handle is not None:                 if not win32gui.IsWindow(self.handle):                     os._exit(0)                     break             time.sleep(5)      def Kill(self):         '''         Call from Python Window main application that causes application to exit         '''         self.needKill = True      def SetHandle(self handle):         '''         Sets Handle so thread can check if handle exists.         This must be called before thread is started.         '''         self.handle = handle  
{% url django.contrib.auth.views.password_reset_confirm uidb36=uid token=token %}  http://mysite.com/accounts/reset/{{uid}}-{{token}}/  
int phase_of_the_moon()     /* 0-7 with 0: new 4: full */ {     register struct tm *lt = getlt();     return testable_potm(lt); }  static int testable_potm(const struct tm *lt) {     register int epact diy goldn;      diy = lt-&gt;tm_yday;     goldn = (lt-&gt;tm_year % 19) + 1;     epact = (11 * goldn + 18) % 30;     if ((epact == 25 &amp;&amp; goldn &gt; 11) || epact == 24)         epact++;      return( (((((diy + epact) * 6) + 11) % 177) / 22) &amp; 7 ); }  getlt() time_t localtime() 
product() itertools import itertools  my_list = [1234] for pair in itertools.product(my_list repeat=2):     foo(*pair)  my_list = [1234] for x in my_list:     for y in my_list:         foo(x y)  permutations() combinations() product() 11  12  13  14 21  22  23  24 31  32  33  34 41  42  43  44  permutations() xx  .   12  13  14 21   .   23  24 31  32   .   34 41  42  43   .  combinations()  .   12  13  14  .    .   23  24  .    .    .   34  .    .    .    .  
timeit print $ python -mtimeit 'tmp=[]; tmp.append(True); x=tmp[0]' 1000000 loops best of 3: 0.716 usec per loop $ python -mtimeit 'tmp={}; tmp[0]=True; x=tmp[0]' 1000000 loops best of 3: 0.515 usec per loop  
apt-get .tar.gz apt-get .tar.gz .tar.bz2 
def build_active_solution(progid="VisualStudio.DTE.7.1"):     from win32com.client import GetActiveObject     dte = GetActiveObject(progid)     sb = dte.Solution.SolutionBuild     sb.Build(True)      output = dte.Windows['Output'].Object.ActivePane.TextDocument.Selection     output.SelectAll()     return output.Text  
gobject.idle_add 
import atexit atexit.register(myfunction)  def close_database():     proceed_to_close()  import atexit atexit.register(close_database)  database.py class DataBase(object):     @staticmethod     def execute_some_query(query):         code_here()         some_code()     @staticmethod     def close_database():         proceed_to_close() import atexit ; atexit.register(DataBase.close_database)  from database import DataBase DataBase.execute_some_query(query)  database.py def execute_some_query(query):     code_here()     some_code()  def close_database():     proceed_to_close() import atexit ; atexit.register(close_database)  import database database.execute_some_query(query)  
os.makedirs os.makedirs 
class LessThanZeroException(Exception):     pass  class variable(object):     def __init__(self value=0):         self.__x = value      def __set__(self obj value):         if value &lt; 0:             raise LessThanZeroException('x is less than zero')          self.__x  = value      def __get__(self obj objType):         return self.__x  class MyClass(object):     x = variable()  &gt;&gt;&gt; m = MyClass() &gt;&gt;&gt; m.x = 10 &gt;&gt;&gt; m.x -= 20 Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "my.py" line 7 in __set__     raise LessThanZeroException('x is less than zero') LessThanZeroException: x is less than zero  
True False &gt;&gt;&gt; import math &gt;&gt;&gt; x = float('nan') &gt;&gt;&gt; math.isnan(x) True  
None numpy.newaxis None In [1]: import numpy  In [2]: numpy.newaxis is None Out[2]: True  None newaxis None numpy None None 
&gt;&gt;&gt; "%d " * 3 '%d %d %d ' &gt;&gt;&gt; "%d " * 3 % (123) '1 2 3 '  
function quoteUrl(url safe) {     if (typeof(safe) !== 'string') {         safe = '/';    // Don't escape slashes by default     }      url = encodeURIComponent(url);      // Unescape characters that were in the safe list     toUnencode = [  ];     for (var i = safe.length - 1; i &gt;= 0; --i) {         var encoded = encodeURIComponent(safe[i]);         if (encoded !== safe.charAt(i)) {    // Ignore safe char if it wasn't escaped             toUnencode.push(encoded);         }     }      url = url.replace(new RegExp(toUnencode.join('|') 'ig') decodeURIComponent);      return url; }   var unquoteUrl = decodeURIComponent;    // Make alias to have symmetric function names  '/' encodeURIComponent() decodeURIComponent() encodeURIComponent() quote_url() def quote_url(url safe):     """URL-encodes a string (either str (i.e. ASCII) or unicode);     uses de-facto UTF-8 encoding to handle Unicode codepoints in given string.     """     return urllib.quote(unicode(url).encode('utf-8') safe)  unquote_url() def unquote_url(url):     """Decodes a URL that was encoded using quote_url.     Returns a unicode instance.     """     return urllib.unquote(url).decode('utf-8')  
&gt;&gt;&gt; tuple_list = [("pineapple" 5) ("cherry" 7) ("kumquat" 3) ("plum" 11)] &gt;&gt;&gt; [x for x y in enumerate(tuple_list) if y[1] == 7] [1] &gt;&gt;&gt; [x for x y in enumerate(tuple_list) if y[0] == 'kumquat'] [2]  &gt;&gt;&gt; [y[0] for y in tuple_list].index('kumquat') 2  
uni = u'Hey my name is André' in_utf8 = uni.encode('utf-8') # send the utf-8 data to server # send(in_utf8)  # on server side # server receives it. But server is Japanese. # So the server treats the data with the National charset shift-jis: some_string = in_utf8 # some_string = receive()     decoded = some_string.decode('sjis')  /etc/freetds/freetds.conf 
self.send_header('Content-type' 'text/html')  import os import mimetypes  #...      def do_GET(self):         try:              filepath = self.path             print filepath USTAW['rootwww']              f = open(os.path.join('.' 'www' filepath))          except IOError:             self.send_error(404'File Not Found: %s ' % filepath)          else:             self.send_response(200)             mimetype _ = mimetypes.guess_type(filepath)             self.send_header('Content-type' mimetype)             self.end_headers()             for s in f:                 self.wfile.write(s)  
re [^\d.] UNICODE &gt;&gt;&gt; import re &gt;&gt;&gt; non_decimal = re.compile(r'[^\d.]+') &gt;&gt;&gt; non_decimal.sub('' '12.34fe4e') '12.344'  
/slug-is-here  /app-pathslug-is-here  
%save %save my_useful_session 10-20 23 my_useful_session.py %save current_session ~0/ %save previous_session ~1/  
insert() item[-1] 
good = [x for x in mylist if x in goodvals] bad  = [x for x in mylist if x not in goodvals]  # files looks like: [ ('file1.jpg' 33L '.jpg') ('file2.avi' 999L '.avi') ... ] IMAGE_TYPES = ('.jpg''.jpeg''.gif''.bmp''.png') images = [f for f in files if f[2].lower() in IMAGE_TYPES] anims  = [f for f in files if f[2].lower() not in IMAGE_TYPES]  images anims = [] []  for f in files:     if f.lower() in IMAGE_TYPES:         images.append(f)     else:         anims.append(f)  set() if f[1] == 0:     continue  
class A(int):     def sqr(self):         return A(self*self)  sqr = A.sqr a = A(5) print sqr(a) # Prints 25  bin_pow(a n sqr=A.sqr)  bin_pow(a n sqr=lambda x: x.sqr())  
sub r{($a=shift)=~/0/g?my$i=pos:die$a;T:for$m(1..9){($i-$_)%9*(int($i/9)^int($_/9))*(int($i/27)^int($_/27)|int($i%9/3)^int($_%9/3))||$a=~/^.{$_}$m/&amp;&amp;next Tfor 0..80;substr($a$i1)=$m;r($a)}}r@ARGV  / 
def sort_deps(objs):     queue = [objs with no dependencies]     while queue:         obj = queue.pop()         yield obj         for obj in objs:             if dependencies are now satisfied:                 queue.append(obj)     if not all dependencies are satisfied:         error     return result  
&gt;&gt;&gt; all([int(value) for value in "0 1 2 3 4 5 6 7 8 9".split()]) False &gt;&gt;&gt; all([int(value) for value in "1 2 3 4 5 6 7 8 9".split()]) True &gt;&gt;&gt;  
l flat_list = [item for sublist in l for item in sublist] flat_list = [] for sublist in l:     for item in sublist:         flat_list.append(item)  l flatten = lambda l: [item for sublist in l for item in sublist]  timeit $ python -mtimeit -s'l=[[123][456] [7] [89]]*99' '[item for sublist in l for item in sublist]' 10000 loops best of 3: 143 usec per loop $ python -mtimeit -s'l=[[123][456] [7] [89]]*99' 'sum(l [])' 1000 loops best of 3: 969 usec per loop $ python -mtimeit -s'l=[[123][456] [7] [89]]*99' 'reduce(lambda xy: x+yl)' 1000 loops best of 3: 1.1 msec per loop  + sum O(L**2) I * (L**2)/2 
.close() os.stat() import os  _MAX_SIZE = 691  def delete_if_blank(listFile):     # Make a list of files to check.     with open(listFile) as listFile:         filesToCheck = filter(None (line.rstrip() for line in listFile.readlines()))      # listFile is automatically closed now because we're out of the 'with' statement.      print "Found %u files to check. Starting check." % len(filesToCheck)      # Remove each file.     for filename in filesToCheck:         if os.stat(filename).st_size &lt; _MAX_SIZE:             print "Deleting %s" % filename             os.remove(filename)         else:             print "Keeping %s" % filename  
for item in something:  # Default iterator: returns non-tuple objects     do_something(item)  for (itemkey) in something.iter_pairs(): # iter_pairs returns different iterator     do_something_else(item key)  for key in mydict for kv in mydict.iteritems() import inspect opcode  def num_expected_results():     """Return the number of items the caller is expecting in a tuple.      Returns None if a single value is expected rather than a tuple.     """     f = inspect.currentframe(2)     code = map(ord f.f_code.co_code)     pos = f.f_lasti     if code[pos] == opcode.opmap['GET_ITER']: pos += 1 # Skip this and the FOR_ITER     if code[pos] &gt; opcode.EXTENDED_ARG: pos +=5     elif code[pos] &gt; opcode.HAVE_ARGUMENT: pos +=3     else: pos += 1     if code[pos] == opcode.opmap['UNPACK_SEQUENCE']:         return code[pos+1] + (code[pos+2] &lt;&lt; 8)     return None  class MagicDict(dict):     def __iter__(self):         if num_expected_results() == 2:             for kv in self.iteritems():                 yield kv         else:             for k in self.iterkeys():                  yield k  d=MagicDict(foo=1 bar=2)  print "Keys:" for key in d:     print "   " key print "Values"     for kv in d:     print "   "kv  
self.frame = Frame()  self.frame = wx.Frame()  
__self__ &gt;&gt; a.__self__ &lt;__main__.test object at 0x782d0&gt; &gt;&gt; a.__self__.b = 2 &gt;&gt; obj.b 2  im_self &gt;&gt; a.im_self &lt;__main__.test object at 0x782d0&gt;  
raw_input() input() 
while(raw_input('Press "1" to exit.') != '1'):     pass  
regex = re.compile(r"""          ^           # Must start in a newline first          \[(.*?)\]   # Get what's enclosed in brackets           \n          # only capture bracket if a newline is next          ([^\[]*)    # stop reading at opening bracket     """ re.MULTILINE | re.VERBOSE)  import re  regex = re.compile(r"""     (?:^|\n)\[             # tag's opening bracket           ([^\]\n]*)         # 1. text between brackets     \]\n                   # tag's closing bracket     (.*?)                  # 2. text between the tags     (?=\n\[[^\]\n]*\]\n|$) # until tag or end of string but don't consume it     """ re.DOTALL | re.VERBOSE)  haystack = """[tag1] this is captured [not a tag[ but this is suppose to be captured too! [another non-tag  [tag2] help me write a better RE[[[] """  print regex.findall(haystack)  tag_re = re.compile(r'^\[([^\]\n]*)\]$' re.MULTILINE) tags = list(tag_re.finditer(haystack))  result = {} for (mo1 mo2) in zip(tags[:-1] tags[1:]):     result[mo1.group(1)] = haystack[mo1.end(1)+1:mo2.start(1)-1].strip() result[mo2.group(1)] = haystack[mo2.end(1)+1:].strip()  print result  ^ [^squarebrackets] re.MULTILINE 
dot /usr/local/bin /dot 
inspect &gt;&gt;&gt; import inspect &gt;&gt;&gt; inspect.getmembers(a) [('__class__' &lt;class '__main__.A'&gt;)  ('__delattr__' &lt;method-wrapper '__delattr__' of A object at 0xb77d48ac&gt;)  ('__dict__' {})  ('__doc__' None)  ('__getattribute__'   &lt;method-wrapper '__getattribute__' of A object at 0xb77d48ac&gt;)  ('__hash__' &lt;method-wrapper '__hash__' of A object at 0xb77d48ac&gt;)  ('__init__' &lt;method-wrapper '__init__' of A object at 0xb77d48ac&gt;)  ('__module__' '__main__')  ('__new__' &lt;built-in method __new__ of type object at 0x8146220&gt;)  ('__reduce__' &lt;built-in method __reduce__ of A object at 0xb77d48ac&gt;)  ('__reduce_ex__' &lt;built-in method __reduce_ex__ of A object at 0xb77d48ac&gt;)  ('__repr__' &lt;method-wrapper '__repr__' of A object at 0xb77d48ac&gt;)  ('__setattr__' &lt;method-wrapper '__setattr__' of A object at 0xb77d48ac&gt;)  ('__str__' &lt;method-wrapper '__str__' of A object at 0xb77d48ac&gt;)  ('__weakref__' None)  ('methodA' &lt;bound method A.methodA of &lt;__main__.A object at 0xb77d48ac&gt;&gt;)  ('methodB' &lt;bound method A.methodB of &lt;__main__.A object at 0xb77d48ac&gt;&gt;)] &gt;&gt;&gt; inspect.getargspec(a.methodA) (['self' 'intA'] None None (1)) &gt;&gt;&gt; inspect.getargspec(getattr(a 'methodA')) (['self' 'intA'] None None (1)) &gt;&gt;&gt; print inspect.getargspec.__doc__ Get the names and default values of a function's arguments.      A tuple of four things is returned: (args varargs varkw defaults).     'args' is a list of the argument names (it may contain nested lists).     'varargs' and 'varkw' are the names of the * and ** arguments or None.     'defaults' is an n-tuple of the default values of the last n arguments. &gt;&gt;&gt; print inspect.getmembers.__doc__ Return all members of an object as (name value) pairs sorted by name.     Optionally only return members that satisfy a given predicate.  
locale.setlocale(locale.LC_ALL 'de_DE') # use German locale; name might vary with platform  locale.setlocale(locale.LC_ALL 'deu_deu')  
description 
a = filter(23) b = filter(45) ... a.foo = 67 ... x = random.choice([ab]) if hasattr(x 'foo'): munge(x.foo)  foos = dict() a = filter(23) b = filter(45) ... foos[a] = 67 ... x = random.choice([ab]) if x in foos: munge(foos[x])  
def EntryMatches(e):   if use_currency and not (e.currency == currency):     return False   if use_category and not (e.category == category):     return False   return True  totals['quantity'] = sum([e.quantity for e in entries if EntryMatches(e)])  
object_hook import json  def json_load_byteified(file_handle):     return _byteify(         json.load(file_handle object_hook=_byteify)         ignore_dicts=True     )  def json_loads_byteified(json_text):     return _byteify(         json.loads(json_text object_hook=_byteify)         ignore_dicts=True     )  def _byteify(data ignore_dicts = False):     # if this is a unicode string return its string representation     if isinstance(data unicode):         return data.encode('utf-8')     # if this is a list of values return list of byteified values     if isinstance(data list):         return [ _byteify(item ignore_dicts=True) for item in data ]     # if this is a dictionary return dictionary of byteified keys and values     # but only if we haven't already byteified it     if isinstance(data dict) and not ignore_dicts:         return {             _byteify(key ignore_dicts=True): _byteify(value ignore_dicts=True)             for key value in data.iteritems()         }     # if it's anything else return it in its original form     return data  >>> <b><i>json_loads_byteified('{"Hello": "World"}') i> b> {'Hello': 'World'} >>> <b><i>json_loads_byteified('"I am a top-level string"') i> b> 'I am a top-level string' >>> <b><i>json_loads_byteified('7') i> b> 7 >>> <b><i>json_loads_byteified('["I am inside a list"]') i> b> ['I am inside a list'] >>> <b><i>json_loads_byteified('[[[[[[[["I am inside a big nest of lists"]]]]]]]]') i> b> [[[[[[[['I am inside a big nest of lists']]]]]]]] >>> <b><i>json_loads_byteified('{"foo": "bar" "things": [7 {"qux": "baz" "moo": {"cow": ["milk"]}}]}') i> b> {'things': [7 {'qux': 'baz' 'moo': {'cow': ['milk']}}] 'foo': 'bar'} >>> <b><i>json_load_byteified(open('somefile.json')) i> b> {'more json': 'from a file'} object_hook json.load json.loads object_hook dict dict object_hook object_hook ignore_dicts _byteify object_hook dict ignore_dicts _byteify dict json_load_byteified json_loads_byteified _byteify ignore_dicts=True json.load json.loads dict 
class A(object):  
print sql.literal_column('ARRAY[2]').op('&lt;@')(table.c.lineage) # ARRAY[2] &lt;@ "treeItems".lineage  
a = re.compile(r"""\d +  # the integral part                    \.    # the decimal point                    \d *  # some fractional digits""" re.X)  b = re.compile(r"\d+\.\d*")  
lstrip() &gt;&gt;&gt; '     hello world!'.lstrip() 'hello world!'  lstrip(' ') &gt;&gt;&gt; '   hello world with 2 spaces and a tab!'.lstrip(' ') '\thello world with 2 spaces and a tab!'  
dr_area.realize() self.gc = dr_area.get_style().fg_gc[gtk.STATE_NORMAL] img = gtk.gdk.pixbuf_new_from_file("image.png") self.image = gtk.gdk.Pixmap(dr_area.window img.get_width() img.get_height()) self.image.draw_pixbuf(self.gc img 0 0 0 0)  dr_area.window.draw_drawable(self.gc self.image 0 0 x y *self.image.get_size())  
chunk_split = lambda s: '\r\n'.join(s[i:min(i+76 len(s))] for i in xrange(0 len(s) 76))  
Node.toxml([encoding]) Return the XML that the DOM represents as a string.  With no argument the XML header does not specify an encoding and the result is Unicode string if the default encoding cannot represent all characters in the  document. Encoding this string in an encoding other than UTF-8 is likely incorrect since UTF-8 is the default encoding of XML.  With an explicit encoding [1] argument the result is a byte string in the  specified encoding. It is recommended that this argument is always specified. To avoid UnicodeError exceptions in case of unrepresentable text data the  encoding argument should be specified as “utf-8”.  .toxml('utf8') .toxml() &gt;&gt;&gt; t.data = u"The text\u0180content" &gt;&gt;&gt; dom.parseString(e.toxml('utf8')).toxml('utf8') '&lt;?xml version="1.0" encoding="utf8"?&gt;&lt;node&gt;The text\xc6\x80content&lt;/node&gt;' &gt;&gt;&gt;   
self.msg.content_subtype = "html" self.msg.content_subtype = "iso-8859-1" class EmailMultiAlternativesWithEncoding(EmailMultiAlternatives):     def _create_attachment(self filename content mimetype=None):         """         Converts the filename content mimetype triple into a MIME attachment         object. Use self.encoding when handling text attachments.         """         if mimetype is None:             mimetype _ = mimetypes.guess_type(filename)             if mimetype is None:                 mimetype = DEFAULT_ATTACHMENT_MIME_TYPE         basetype subtype = mimetype.split('/' 1)         if basetype == 'text':             encoding = self.encoding or settings.DEFAULT_CHARSET             attachment = SafeMIMEText(smart_str(content                 settings.DEFAULT_CHARSET) subtype encoding)             # original text being replaced above (not last argument)             # attachment = SafeMIMEText(smart_str(content             #     settings.DEFAULT_CHARSET) subtype settings.DEFAULT_CHARSET)         else:             # Encode non-text attachments with base64.             attachment = MIMEBase(basetype subtype)             attachment.set_payload(content)             Encoders.encode_base64(attachment)         if filename:             attachment.add_header('Content-Disposition' 'attachment'                                   filename=filename)         return attachment 
&gt;&gt;&gt; f = open('myfile.txt' 'r') &gt;&gt;&gt; f.read()  &gt;&gt;&gt; f.read() ''  
itertools.permutations for p in itertools.permutations(range(3)):     if p[0] &lt;= p[-1]:         print(p)  (0 1 2) (0 2 1) (1 0 2)  p[1] &lt;= p[::-1][1] p[0] &lt; p[1] for p in itertools.permutations(range(3)):     if p &lt;= p[::-1]:         print(p)  itertools.permutations p p[::-1] 
&gt;&gt;&gt; from collections import defaultdict &gt;&gt;&gt; d = defaultdict(list) &gt;&gt;&gt; a = ['1' '2'] &gt;&gt;&gt; for i in a: ...   for j in range(int(i) int(i) + 2): ...     d[j].append(i) ... &gt;&gt;&gt; d defaultdict(&lt;type 'list'&gt; {1: ['1'] 2: ['1' '2'] 3: ['2']}) &gt;&gt;&gt; d.items() [(1 ['1']) (2 ['1' '2']) (3 ['2'])]  
import inspect  def get_class_that_defined_method(meth):     for cls in inspect.getmro(meth.im_class):         if meth.__name__ in cls.__dict__:              return cls     return None  
3 % 1 3 % 2 
ECONNREFUSED ECONNREFUSED WSAECONNREFUSED ECONNREFUSED ECONNREFUSED 
&gt;&gt;&gt; str(10) '10' &gt;&gt;&gt; int('10') 10  int() str() str() __str__() 
for index obj in enumerate(objects):   # Use index obj.  enumerate timeit enumerate &gt;&gt;&gt; timeit.Timer('for i in xrange(len(seq)): x = i + seq[i]' 'seq = range(100)').timeit() 10.322299003601074 &gt;&gt;&gt; timeit.Timer('for i e in enumerate(seq): x = i + e' 'seq = range(100)').timeit() 11.850601196289062  
import MA a = MA.array([1 2 None] mask = [0 0 1]) print "average =" MA.average(a)  
order_by('?') from django.db.models.aggregates import Count from random import randint  class PaintingManager(models.Manager):     def random(self):         count = self.aggregate(count=Count('id'))['count']         random_index = randint(0 count - 1)         return self.all()[random_index]  
print '-' * 3  print('-' * 3)  
{     "node":     {         "list": "&lt;ul&gt;&lt;li class='lists'&gt;Hello World&lt;/li&gt;&lt;ul&gt;"     } }  simplejson &gt;&gt;&gt; import simplejson &gt;&gt;&gt; simplejson.dumps({'node': {'list': '&lt;ul&gt;&lt;li class="lists"&gt;Hello World&lt;/li&gt;&lt;ul&gt;'}}) '{"node": {"list": "&lt;ul&gt;&lt;li class=\\"lists\\"&gt;Hello World&lt;/li&gt;&lt;ul&gt;"}}'  
class StrategyExample:     def __init__(self func=None):         if func:              self.execute = func      def execute(self):         print("Original execution")  def executeReplacement1():     print("Strategy 1")  def executeReplacement2():     print("Strategy 2")  if __name__ == "__main__":     strat0 = StrategyExample()     strat1 = StrategyExample(executeReplacement1)     strat2 = StrategyExample(executeReplacement2)      strat0.execute()     strat1.execute()     strat2.execute()  Original execution Strategy 1 Strategy 2  if func == None StrategyExample.execute = func func execute self types strat0.execute = types.MethodType(executeReplacement1 strat0) strat0.execute = types.MethodType(executeReplacement1 strat0                                    StrategyExample) strat0 strat0 start0.execute() self class StrategyExample:     def __init__(self func=None):         self.name = "Strategy Example 0"         if func:              self.execute = func      def execute(self):         print(self.name)  def executeReplacement1():     print(self.name + " from execute 1")  def executeReplacement2():     print(self.name + " from execute 2")  if __name__ == "__main__":     strat0 = StrategyExample()     strat1 = StrategyExample(executeReplacement1)     strat1.name = "Strategy Example 1"     strat2 = StrategyExample(executeReplacement2)     strat2.name = "Strategy Example 2"      strat0.execute()     strat1.execute()     strat2.execute()  Traceback (most recent call last):   File "test.py" line 28 in &lt;module&gt;     strat1.execute()   File "test.py" line 13 in executeReplacement1     print self.name + " from execute 1" NameError: global name 'self' is not defined  import sys import types  if sys.version_info[0] &gt; 2:  # Python 3+     create_bound_method = types.MethodType else:     def create_bound_method(func obj):         return types.MethodType(func obj obj.__class__)  class StrategyExample:     def __init__(self func=None):         self.name = "Strategy Example 0"         if func:              self.execute = create_bound_method(func self)      def execute(self):         print(self.name)  def executeReplacement1(self):     print(self.name + " from execute 1")  def executeReplacement2(self):     print(self.name + " from execute 2")  if __name__ == "__main__":     strat0 = StrategyExample()     strat1 = StrategyExample(executeReplacement1)     strat1.name = "Strategy Example 1"     strat2 = StrategyExample(executeReplacement2)     strat2.name = "Strategy Example 2"      strat0.execute()     strat1.execute()     strat2.execute()  Strategy Example 0 Strategy Example 1 from execute 1 Strategy Example 2 from execute 2  
import dbus bus = dbus.SystemBus() obj = bus.get_object("org.freedesktop.Hal" "/org/freedesktop/Hal/Manager") iface = dbus.Interface(obj "org.freedesktop.Hal.Manager") print iface.FindDeviceStringMatch("block.device" "/dev/sda")  
  sys.stdout.flush()  print python -u 
infile = codecs.open(filename 'r' encoding='iso-8859-1')  print location.encode('ISO-8859-1')  
a[j]=a[j-2]+(j+2)*(j+3)/2  a.append(a[j-2] + (j+2)*(j+3)/2)  
self.instance 
pipes.quote shlex.quote 
vtkMassProperties vol[2] += (area * (double)u[2] * (double)zavg); // 5.0.4 vol[2] += (area * u[2] * zavg); // 5.4.2  kxyz[0] = (munc[0] + (wxyz/3.0) + ((wxy+wxz)/2.0)) /(double)(numCells); // 5.0.4 kxyz[0] = (munc[0] + (wxyz/3.0) + ((wxy+wxz)/2.0)) /numCells; // 5.4.2  vtkMarchingCubes self-&gt;UpdateProgress ((double) k / ((double) dims[2] - 1)); // 5.0.4 self-&gt;UpdateProgress (k / static_cast&lt;double&gt;(dims[2] - 1)); // 5.4.2  estimatedSize = (int) pow ((double) (dims[0] * dims[1] * dims[2]) .75); // 5.0.4 estimatedSize = static_cast&lt;int&gt;(              pow(static_cast&lt;double&gt;(dims[0]*dims[1]*dims[2])0.75)); // 5.4.2  vtkImageThreshold lowerThreshold = (IT) inData-&gt;GetScalarTypeMin(); // 5.0.4 lowerThreshold = static_cast&lt;IT&gt;(inData-&gt;GetScalarTypeMin()); // 5.4.2  vtkTIFFReader maxthres=81 
from wsgiref.simple_server import make_server  def serveImage(environ start_response):     status = '200 OK'     headers = [('Content-type' 'image/png')]     start_response(status headers)      return open("about.png" "rb").read()  httpd = make_server('' 8000 serveImage) httpd.serve_forever()  
forms.RegexField('^[a-zA-Z0-9\\-\' ]$'max_length=30 min_length=3)  forms.RegexField('^[a-zA-Z0-9\\-\' ]+$'max_length=30 min_length=3)  
ISO 8601 2010-05-08T23:41:54.000Z pyiso8601 import dateutil.parser yourdate = dateutil.parser.parse(datestring)  
CTRL+space  (  CTRL+space 
add2virtualenv directory1 directory2 ...  
import heapq itertools def intersect(*its):     for key values in itertools.groupby(heapq.merge(*its)):         if len(list(values)) == len(its):             yield key  &gt;&gt;&gt; list(intersect(*postings)) [100 322]  
os.stat os.fstat st_dev import os  def same_fs(file1 file2):     dev1 = os.stat(file1).st_dev     dev2 = os.stat(file2).st_dev     return dev1 == dev2  
.pyc tests.py try:     some_external_resource_processing() except Exception e:     logger.exception( e )     raise  class SomeLoadtest( unittest.TestCase ):     def test_something( self ):         self.connection = urllib2.urlopen( "localhost:8000/some/path" )         results = self.connection.read()  
reader def isLast(itr):   old = itr.next()   for new in itr:     yield False old     old = new   yield True old  for line_num (is_last row) in enumerate(isLast(reader)):     if not is_last: assert len(row) == len(header)  
mydbobject = DbModel.get_by_id(int(self.request.get("selectedrow")))  
for cell in self.cells.flat:     do_somethin(cell)  
filter resources = [file_obj              for file_obj in (obj.get("file") for obj in iterator)              if file_obj is not None]  
os.fork os.exec... fork _exit setsid os.exec... e subprocess multiprocessing fork setsid import os import sys  def spawnDaemon(path_to_executable *args)     """Spawn a completely detached subprocess (i.e. a daemon).      E.g. for mark:     spawnDaemon("../bin/producenotify.py" "producenotify.py" "xx")     """     # fork the first time (to make a non-session-leader child process)     try:         pid = os.fork()     except OSError e:         raise RuntimeError("1st fork failed: %s [%d]" % (e.strerror e.errno))     if pid != 0:         # parent (calling) process is all done         return      # detach from controlling terminal (to make child a session-leader)     os.setsid()     try:         pid = os.fork()     except OSError e:         raise RuntimeError("2nd fork failed: %s [%d]" % (e.strerror e.errno))         raise Exception "%s [%d]" % (e.strerror e.errno)     if pid != 0:         # child process is all done         os._exit(0)      # grandchild process now non-session-leader detached from parent     # grandchild process must now close all open files     try:         maxfd = os.sysconf("SC_OPEN_MAX")     except (AttributeError ValueError):         maxfd = 1024      for fd in range(maxfd):         try:            os.close(fd)         except OSError: # ERROR fd wasn't open to begin with (ignored)            pass      # redirect stdin stdout and stderr to /dev/null     os.open(os.devnull os.O_RDWR)  # standard input (0)     os.dup2(0 1)     os.dup2(0 2)      # and finally let's execute the executable for the daemon!     try:       os.execv(path_to_executable args)     except Exception e:       # oops we're cut off from the world let's just give up       os._exit(255)  
from BeautifulSoup import BeautifulSoup  # Here's your HTML html = '&lt;p data="5" size="4"&gt;item1&lt;/p&gt;&lt;p size="4"&gt;item2&lt;/p&gt;&lt;p size="4"&gt;item3&lt;/p&gt;'  # Here's some simple HTML that breaks your accepted  # answer but doesn't break BeautifulSoup. # For each example the regex will ignore the first &lt;p&gt; tag. html2 = '&lt;p size="4" data="5"&gt;item1&lt;/p&gt;&lt;p size="4"&gt;item2&lt;/p&gt;&lt;p size="4"&gt;item3&lt;/p&gt;' html3 = '&lt;p data="5" size="4" &gt;item1&lt;/p&gt;&lt;p size="4"&gt;item2&lt;/p&gt;&lt;p size="4"&gt;item3&lt;/p&gt;' html4 = '&lt;p data="5" size="12"&gt;item1&lt;/p&gt;&lt;p size="4"&gt;item2&lt;/p&gt;&lt;p size="4"&gt;item3&lt;/p&gt;'  # This BeautifulSoup code works for all the examples. paragraphs = BeautifulSoup(html).findAll('p') items = [''.join(p.findAll(text=True)) for p in paragraphs]  
clojure.contrib.test-is clojure.contrib.test-is/run-tests foo.clj (ns foo)  (defn hello [x] (println "Hello" x))  (if *command-line-args*   (hello "command line")   (hello "REPL"))  $ java -cp ~/path/to/clojure.jar:. clojure.main foo.clj -- Hello command line $ java -cp ~/path/to/clojure.jar:. clojure.main Clojure 1.1.0-alpha-SNAPSHOT user=&gt; (use 'foo) Hello REPL nil user=&gt;  src/clj/clojure/main.clj .class foo.clj (ns foo   (:gen-class))  (defn hello [x] (println "Hello" x))  (defn -main [] (hello "command line"))  .class ./classes $CLASSPATH ./classes foo.clj $ mkdir classes $ java -cp ~/path/to/clojure.jar:./classes:. clojure.main Clojure 1.1.0-alpha-SNAPSHOT user=&gt; (compile 'foo) foo  classes .class -main $ java -cp ~/path/to/clojure.jar:./classes foo Hello command line.  
def run_example1():     """     This is example number 1. Running it should give you the following output:      &gt;&gt;&gt; run_example1()     "This is the output from example1.py"     """      os.system('python example1.py') # or you could use subprocess here  if __name__ == "__main__":     import doctest     doctest.testmod()  import subprocess  cmd = ('example1.py' 'any' 'more' 'arguments')  expected_out = """Your expected output of the script"""  exampleP = subprocess.Popen(cmd stdout=subprocess.PIPE stderr=subprocess.PIPE) out err = exampleP.communicate() # out and err are stdout and stderr respectively  if out != expected_out:     print "Output does not match"  
&gt;&gt;&gt; import audiere &gt;&gt;&gt; d = audiere.open_device() &gt;&gt;&gt; t = d.create_tone(17000) # 17 KHz &gt;&gt;&gt; t.play() # non-blocking call &gt;&gt;&gt; import time &gt;&gt;&gt; time.sleep(5) &gt;&gt;&gt; t.stop()  pyaudiere-0.2.tar.gz pyaudio #!/usr/bin/env python """Play a fixed frequency sound.""" from __future__ import division import math  from pyaudio import PyAudio # sudo apt-get install python{3}-pyaudio  try:     from itertools import izip except ImportError: # Python 3     izip = zip     xrange = range  def sine_tone(frequency duration volume=1 sample_rate=22050):     n_samples = int(sample_rate * duration)     restframes = n_samples % sample_rate      p = PyAudio()     stream = p.open(format=p.get_format_from_width(1) # 8bit                     channels=1 # mono                     rate=sample_rate                     output=True)     s = lambda t: volume * math.sin(2 * math.pi * frequency * t / sample_rate)     samples = (int(s(t) * 0x7f + 0x80) for t in xrange(n_samples))     for buf in izip(*[samples]*sample_rate): # write several samples at a time         stream.write(bytes(bytearray(buf)))      # fill remainder of frameset with silence     stream.write(b'\x80' * restframes)      stream.stop_stream()     stream.close()     p.terminate()  sine_tone(     # see http://www.phy.mtu.edu/~suits/notefreqs.html     frequency=440.00 # Hz waves per second A4     duration=3.21 # seconds to play sound     volume=.01 # 0..1 how loud it is     # see http://en.wikipedia.org/wiki/Bit_rate#Audio     sample_rate=22050 # number of samples per second )  
import signal  def quit_gracefully(*args):     print 'quitting loop'     exit(0);  if __name__ == "__main__":     signal.signal(signal.SIGINT quit_gracefully)      try:         print 'starting loop'         while True:             pass     except KeyboardInterrupt:         quit_gracefully()  
def alternate(i):     i = iter(i)     while True:         yield(i.next() i.next())  &gt;&gt;&gt; list(alternate(range(10))) [(0 1) (2 3) (4 5) (6 7) (8 9)]  
&gt;&gt;&gt; dict((key sum(d[key] for d in dictList)) for key in dictList[0]) {'a': 22 'b': 56 'c': 191}  import operator itertools dict((key sum(itertools.imap(operator.itemgetter(key) dictList)))        for key in dictList[0])  List Size   Original      dict+generator       imap+itemgetter       3      0.054          0.090                0.097      30      0.473          0.255                0.236     300      4.668          1.884                1.529    3000     46.668         17.975               14.499  
def __insert_values(self values):     cursor = self.connection.cursor()     cursor.executemany("""         insert into `values` (ensg value sampleid)         values (%s %s %s)""" values)     cursor.close()  
atexit # db.py: import sqlite3 import atexit  con = None  def get_connection():     global con     if not con:         con = sqlite3.connect('somedb.sqlite')     atexit.register(close_connection con)     return con  def close_connection(some_con):     some_con.commit()     some_con.close()  # your_program.py import db con = db.get_connection() cur = con.cursor() cur.execute("SELECT ...")  with delete new close() 
innerList = [0] * 10  int 0 innerList[1] = 15  15 int outerList = innerList * 5  list innerList list outerList[2].append('something')  innerList.append('something')  list list list outerList[1] = outerList[1] + ['something']  list + outerList innerList 
cleanMsg __init__ import inspect f = inspect.currentframe(N)  code = f.f_code caller = '%s:%s' % (code.co_filename code.co_name)  
b = wx.Button(self 10 "Default Button" (20 20)) b.myname = "default button" self.Bind(wx.EVT_BUTTON self.OnClick b)  def OnClick(self event):     name = event.GetEventObject().myname  
TCP_SERVICES &gt;&gt;&gt; TCP_REVERSE = dict((TCP_SERVICES[k] k) for k in TCP_SERVICES.keys()) &gt;&gt;&gt; TCP_REVERSE[80] 'www'  
random.shuffle from random import shuffle x = [[i] for i in range(10)] shuffle(x)  # print(x)  gives  [[9] [2] [7] [0] [4] [5] [3] [1] [8] [6]] # of course your results will vary  
1) Loop through every line in the log      a)If line matches appropriate Regex:        Display/Store Next Line as the item title.       Look for the next line containing "Result        XXXX." and parse out that result for        including in the result set.  
# Like so difflib.SequenceMatcher(None str1 str2)  # Or just read the files in difflib.SequenceMatcher(None file1.read() file2.read())  
from fortran_code import fortran_function import os  print "will run fortran function!"  # open 2 fds null_fds = [os.open(os.devnull os.O_RDWR) for x in xrange(2)] # save the current file descriptors to a tuple save = os.dup(1) os.dup(2) # put /dev/null fds on 1 and 2 os.dup2(null_fds[0] 1) os.dup2(null_fds[1] 2)  # *** run the function *** fortran_function()  # restore file descriptors so I can print the results os.dup2(save[0] 1) os.dup2(save[1] 2) # close the temporary fds os.close(null_fds[0]) os.close(null_fds[1])  print "done!"  
from datetime import datetime timedelta last_month = datetime.today() - timedelta(days=30) items = Item.objects.filter(my_date__gte=last_month).order_by(...)  
openssl-devel sudo apt-get build-dep python2.5 
columns = dict() columnsTitles = [] rows = dict() colIdxCounter = 1 # Start with 1 because the first col are ids  rowIdxCounter = 1 # Start with 1 because the columns titles  for i in dataset:     if not rows.has_key(i[0]):         rows[i[0]] = rowIdxCounter         rowIdxCounter += 1     if not columns.has_key(i[1]):         columns[i[1]] = colIdxCounter         colIdxCounter += 1         columnsTitles.append(i[1])  toRet = [columnsTitles] for i in range(len(rows)):     toAppend = []     for j in range(colIdxCounter):         toAppend.append("")     toRet.append(toAppend)  for i in dataset:     toRet[rows[i[0]]][columns[i[1]]] = i[2]  for i in toRet:     print i  
vars(x) x.__dict__ dir(x) x x C m class C(object):     def m(self):         print "m"  x = C() x.m()  m x.__dict__ C x.m() x.__dict__ x C C.__dict__ m x vars(x) dir(x) dir(x) x x vars(x) x dir(x) ['__class__' '__delattr__' '__dict__' '__doc__' '__getattribute__' '__hash__' '__init__' '__module__' '__new__' '__reduce__' '__reduce_ex__' '__repr__' '__setattr__' '__str__' '__weakref__' 'm']  
os.seteuid capabilities(7) 
a = 1.23040000 print str(a).rstrip('0')  
conn.send(str(i) exchange=exchange destination='')  import stomp import sys from amqplib import client_0_8 as amqp #read in the exchange name so I can set up multiple recievers for different exchanges to tset exchange = sys.argv[1] conn = amqp.Connection(host="localhost:5672" userid="username" password="password"  virtual_host="/" insist=False)  chan = conn.channel()  chan.access_request('/' active=True write=True read=True)  #declare my exchange chan.exchange_declare(exchange 'topic') #not passing a queue name means I get a new unique one back qname__ = chan.queue_declare() #bind the queue to the exchange chan.queue_bind(qname exchange=exchange)  class MyListener(object):     def on_error(self headers message):         print 'recieved an error %s' % message      def on_message(self headers message):         print 'recieved a message %s' % message  conn = stomp.Connection([('0.0.0.0' 61613) ('127.0.0.1' 61613)] 'browser' 'browser') conn.set_listener('' MyListener()) conn.start() conn.connect(username="username" password="password") headers = {}  #subscribe to the queue conn.subscribe(destination=qname ack='auto')  while True:     pass conn.disconnect()  
s.write() # The pipe behaves like a file object in Python. process = Popen(cmd shell=True stdout=PIPE) process_output = "" while process.poll():      process_output += process.stdout.read(256) s.write(process_output)  # Better yet. process = Popen(cmd shell=true stdout=PIPE) stdout stderr = process.communicate() # will read and wait for process to end. s.write(stdout)  # ... snip ... import subprocess con addr = s.accept() while True:     datagram = con.recv(1024)     if not datagram:         break     print "Rx Cmd:" datagram     if settings.has_key(datagram):         print "Launch:" settings[datagram]         process = subprocess.Popen(settings[datagram]+" &amp;" shell=True stdout=subprocess.PIPE)         stdout stderr = process.communicate()         con.send(stdout)     con.close() s.close()  
order_by Author.objects.order_by('first_name' 'last_name')  sorted(Author.objects.all() key=lambda a: a.full_name)  
mod = __import__("mod") for klass in vars(mod):     o =  getattr(mod klass)     if type(o) == type:         print o  
if len(sys.argv) &lt; 2:     sys.exit('Usage: %s database-name' % sys.argv[0])  if not os.path.exists(sys.argv[1]):     sys.exit('ERROR: Database %s was not found!' % sys.argv[1])  
flatpage from django.contrib.flatpages.views import flatpage  else: return flatpage(request '/path/to/your/flatpage/')  return flatpage(request request.path)  
lists arrays dict &gt;&gt;&gt; json.dumps({'apple': 'cat' 'banana':'dog' 'pear':'fish'}) '{"pear": "fish" "apple": "cat" "banana": "dog"}'  
import urllib urllib2  def steam_login(usernamepassword):     data = urllib.urlencode({       'action': 'doLogin'       'goto': ''       'steamAccountName': username       'steamPassword': password     })     request = urllib2.Request('https://steamcommunity.com/'data)     cookie_handler = urllib2.HTTPCookieProcessor()     opener = urllib2.build_opener(cookie_handler)     response = opener.open(request)     if not 200 &lt;= response.code &lt; 300:         raise Exception("HTTP error: %d %s" % (response.coderesponse.msg))     else:         return cookie_handler.cookiejar  HTTPCookieProcessor HTTPCookieProcessor 
from datetime import datetime from django.shortcuts import render_to_response  def my_view(request):     ws_date_as_string = ... get the webservice date     the_date = datetime.strptime(ws_date "%Y-%m-%d %H:%M:%S+0000")     return render_to_response('my_template.html' {'date':the_date})  
get_db_prep_value pre_save pre_save class Table1(models.Model):     f = models.DateTimeField(auto_now=True)  pre_save auto_now /django/db/models/fields/__init__.py def pre_save(self model_instance add):     if self.auto_now or (self.auto_now_add and add):         value = datetime.datetime.now()         setattr(model_instance self.attname value)         return value     else:         return super(DateField self).pre_save(model_instance add)  
def send_message(addr to msg):     ## Connect to host     try:         server = smtplib.SMTP(host) #can throw an exception     except smtplib.socket.gaierror:         return False      ## Login     try:         server.login(username password)     except SMTPAuthenticationError:         server.quit()         return False      ## Send message     try:         server.sendmail(addr [to] msg.as_string())         return True     except Exception: # try to avoid catching Exception unless you have too         return False     finally:         server.quit()  sender = MyMailer("username" "password") # the except SocketError/AuthError could go here try:     sender.message("addr.." ["to.."] "message...") except SocketError:     print "Couldn't connect to server" except AuthError:     print "Invalid username and/or password!" else:     print "Message sent!"  message() class ConnectionError(Exception): pass class AuthError(Exception): pass class SendError(Exception): pass  class MyMailer:     def __init__(self host username password):         self.host = host         self.username = username         self.password = password      def connect(self):         try:             self.server = smtp.SMTP(self.host)         except smtplib.socket.gaierror:             raise ConnectionError("Error connecting to %s" % (self.host))      def auth(self):         try:             self.server.login(self.username self.password)         except SMTPAuthenticationError:             raise AuthError("Invalid username (%s) and/or password" % (self.username))      def message(self addr to msg):         try:             server.sendmail(addr [to] msg.as_string())         except smtplib.something.senderror errormsg:             raise SendError("Couldn't send message: %s" % (errormsg))         except smtp.socket.timeout:             raise ConnectionError("Socket error while sending message")  
 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39   # Compute which of the 8 characters the pixel falls in 0..7:  char = int(number / 40)   # Compute which pixel column the pixel is in 0..4:  col = number % 5   # Compute which pixel row the pixel is in 0..7:  row = int((number - char * 40) / 5)  int() 
if __name__ == '__main__':   main()  
self.data = map(lambda x: list(x) data)  self.data = map(list data)  map lambda x: somecallable(x) somecallable 
def comparator(lop rop):     def comp(i j k):         if j &lt;= k:             return lop(j i) and rop(ik)         return lop(j i) or rop(ik)      return comp  from operator import le lt  inRange = comparator(le lt) inStrictRange = comparator(lt lt) inRange2 = comparator(lt le)  
for i in line:     print i  import codecs f = codecs.open('in' 'r' 'utf8')  sys.stdout sys.stdout = codecs.getwriter('utf8')(sys.stdout)  
&gt;&gt;&gt; import time &gt;&gt;&gt; print time.strftime("%a %d %b %Y %H:%M:%S") Sun 23 Oct 2005 20:38:56 &gt;&gt;&gt; import locale &gt;&gt;&gt; locale.setlocale(locale.LC_TIME "sv_SE") # swedish 'sv_SE' &gt;&gt;&gt; print time.strftime("%a %d %b %Y %H:%M:%S") sön 23 okt 2005 20:39:15  
def try_to_change_list_contents(the_list):     print('got' the_list)     the_list.append('four')     print('changed to' the_list)  outer_list = ['one' 'two' 'three']  print('before outer_list =' outer_list) try_to_change_list_contents(outer_list) print('after outer_list =' outer_list)  before outer_list = ['one' 'two' 'three'] got ['one' 'two' 'three'] changed to ['one' 'two' 'three' 'four'] after outer_list = ['one' 'two' 'three' 'four']  outer_list def try_to_change_list_reference(the_list):     print('got' the_list)     the_list = ['and' 'we' 'can' 'not' 'lie']     print('set to' the_list)  outer_list = ['we' 'like' 'proper' 'English']  print('before outer_list =' outer_list) try_to_change_list_reference(outer_list) print('after outer_list =' outer_list)  before outer_list = ['we' 'like' 'proper' 'English'] got ['we' 'like' 'proper' 'English'] set to ['and' 'we' 'can' 'not' 'lie'] after outer_list = ['we' 'like' 'proper' 'English']  the_list the_list outer_list the_list outer_list def try_to_change_string_reference(the_string):     print('got' the_string)     the_string = 'In a kingdom by the sea'     print('set to' the_string)  outer_string = 'It was many and many a year ago'  print('before outer_string =' outer_string) try_to_change_string_reference(outer_string) print('after outer_string =' outer_string)  before outer_string = It was many and many a year ago got It was many and many a year ago set to In a kingdom by the sea after outer_string = It was many and many a year ago  the_string the_string outer_string the_string outer_string def return_a_whole_new_string(the_string):     new_string = something_to_do_with_the_old_string(the_string)     return new_string  # then you could call it like my_string = return_a_whole_new_string(my_string)  def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):     new_string = something_to_do_with_the_old_string(stuff_to_change[0])     stuff_to_change[0] = new_string  # then you could call it like wrapper = [my_string] use_a_wrapper_to_simulate_pass_by_reference(wrapper)  do_something_with(wrapper[0])  
push bx xor ax ax inc ax cpuid pop bx retn  
from suds.sax.element import Element #create the nodes q = Element('query') where=Element('Where') eq=Element('Eq') fieldref=Element('FieldRef') fieldref.set('Name' '_ows_ID') value=Element('Value') value.setText('66')  #append them eq.append(fieldref) eq.append(value) where.append(eq) q.append(where)  &lt;query&gt;   &lt;name&gt;Elmer Fudd&lt;/name&gt; &lt;age unit="years"&gt;33&lt;/age&gt; &lt;job&gt;Wabbit Hunter&lt;/job&gt; &lt;/query&gt; from suds.sax.element import Element query = Element('query') name = Element('name').setText('Elmer Fudd') age = Element('age').setText('33') age.set('units' 'years') job = Element('job').setText('Wabbit Hunter') query.append(name) query.append(age) query.append(job) client.service.runQuery(query)  
if kwargs.has_key('bases_queryset'):     bases_queryset = kwargs['bases_queryset']     del kwargs['bases_queryset']  
urllib2 urllib &gt;&gt;&gt; import urllib2 &gt;&gt;&gt; resp = urllib2.urlopen("http://google.com/abc.jpg") Traceback (most recent call last): &lt;&lt;MANY LINES SKIPPED&gt;&gt; urllib2.HTTPError: HTTP Error 404: Not Found  resp HTTPResponse &gt;&gt;&gt; resp = urllib2.urlopen("http://google.com/") &gt;&gt;&gt; resp.code 200 &gt;&gt;&gt; resp.headers["content-type"] 'text/html; charset=windows-1251' &gt;&gt;&gt; resp.read() "&lt;&lt;ACTUAL HTML&gt;&gt;"  
# Your for loop should be rewritten as follows: for index in xrange(len(a)):     a[index] += 1  item a &gt;&gt;&gt; a = [[1] [2] [3] [4]] &gt;&gt;&gt; for item in a: item += [1] &gt;&gt;&gt; a [[11] [21] [31] [41]]  
ast.literal_eval &gt;&gt;&gt; import ast &gt;&gt;&gt; ast.literal_eval("{'muffin' : 'lolz' 'foo' : 'kitty'}") {'muffin': 'lolz' 'foo': 'kitty'}  eval &gt;&gt;&gt; eval("shutil.rmtree('mongo')") Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;string&gt;" line 1 in &lt;module&gt;   File "/opt/Python-2.6.1/lib/python2.6/shutil.py" line 208 in rmtree     onerror(os.listdir path sys.exc_info())   File "/opt/Python-2.6.1/lib/python2.6/shutil.py" line 206 in rmtree     names = os.listdir(path) OSError: [Errno 2] No such file or directory: 'mongo' &gt;&gt;&gt; ast.literal_eval("shutil.rmtree('mongo')") Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "/opt/Python-2.6.1/lib/python2.6/ast.py" line 68 in literal_eval     return _convert(node_or_string)   File "/opt/Python-2.6.1/lib/python2.6/ast.py" line 67 in _convert     raise ValueError('malformed string') ValueError: malformed string  
OSError error error OSError 
from calendar import Calendar SUNDAY  cal = Calendar(SUNDAY) month_dates = list(cal.itermonthdates(year month))  month_start = month_dates[0] month_end = month_dates[-1]  
paramstyle pyformat %(the_id)s h 
inspect inspect.getargspec(func) args varargs varkw defaults len(args) varargs varkw None defaults None 
doctest.OutputChecker.check_output() 
$ deactivate  virtualenvwrapper deactivate conda conda conda deactivate  source deactivate  
repo localrepo repo.__class__ repo def reposetup(ui repo):     # ...      class bookmark_repo(repo.__class__):          def rollback(self):             if os.path.exists(self.join('undo.bookmarks')):                 util.rename(self.join('undo.bookmarks') self.join('bookmarks'))             return super(bookmark_repo self).rollback()           # ...      repo.__class__ = bookmark_repo   reposetup ui repo repo localrepo repo.__class__ foo_repo repo.__class__ foo_repo localrepo 
with open('connections.cfg') as fp:     config = ConfigParser()     config.readfp(fp)     sections = config.sections()  
% 
a=(0.5 + 2.5*(k %2))*k + k % 2  (0.5 + 2.5*(k %2))*k a=(1 + 5*(k %2))*k//2 + k % 2  
import re  try except 
sub[random.randint(09)] = 1  sub[first] = 1 sub[second] = 1  second first first second 
# Adapted from example on http://codespeak.net/lxml/tutorial.html import lxml.etree as et import StringIO s = """&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;!DOCTYPE root SYSTEM "test" [ &lt;!ENTITY tasty "cheese"&gt;  &lt;!ENTITY eacute "&amp;#233;"&gt; ]&gt; &lt;root&gt; &lt;a&gt;&amp;tasty; souffl&amp;eacute;&lt;/a&gt; &lt;/root&gt; """ tree = et.parse(StringIO.StringIO(s)) print et.tostring(tree xml_declaration=True encoding="utf-8")  &lt;?xml version='1.0' encoding='utf-8'?&gt; &lt;!DOCTYPE root SYSTEM "test" [ &lt;!ENTITY tasty "cheese"&gt; &lt;!ENTITY eacute "&amp;#233;"&gt; ]&gt; &lt;root&gt; &lt;a&gt;cheese soufflé&lt;/a&gt; &lt;/root&gt;  xml = et.XML("&lt;root&gt;&lt;test/&gt;&lt;a&gt;whatever&lt;/a&gt;&lt;end_test/&gt;&lt;/root&gt;") root = tree.getroot() root[:] = xml root.text root.tail = xml.text xml.tail print et.tostring(tree xml_declaration=True encoding="utf-8")  &lt;?xml version='1.0' encoding='utf-8'?&gt; &lt;!DOCTYPE root SYSTEM "test" [ &lt;!ENTITY tasty "cheese"&gt; &lt;!ENTITY eacute "&amp;#233;"&gt; ]&gt; &lt;root&gt;&lt;test/&gt;&lt;a&gt;whatever&lt;/a&gt;&lt;end_test/&gt;&lt;/root&gt;  
from django.db import models from django.contrib.admin.filterspecs import FilterSpec ChoicesFilterSpecDateFieldFilterSpec from django.utils.encoding import smart_unicode from django.utils.translation import ugettext as _ from datetime import datetime  class IsLiveFilterSpec(DateFieldFilterSpec):     """     Adds filtering by future and previous values in the admin     filter sidebar. Set the is_live_filter filter in the model field attribute     'is_live_filter'.    my_model_field.is_live_filter = True     """      def __init__(self f request params model model_admin):         super(IsLiveFilterSpec self).__init__(f request params model                                                model_admin)         today = datetime.now()         self.links = (             (_('Any') {})             (_('Yes') {'%s__lte' % self.field.name: str(today)                        })             (_('No') {'%s__gte' % self.field.name: str(today)                     })          )       def title(self):         return "Is Live"  # registering the filter FilterSpec.filter_specs.insert(0 (lambda f: getattr(f 'is_live_filter' False)                                IsLiveFilterSpec))  
el.findAll(text=True) &lt;b&gt;hello&lt;/b&gt; &lt;b&gt; &lt;/b&gt; findAll 
some_dict = {      1: "spam"     2: "eggs"     3: "foo"     4: "bar"     8: "anything"     9: "nothing" }  
target_link_libraries(dbookpy dbook)  ADD_LIBRARY(dbookpy dbookpy) IMPORTED_LINK_INTERFACE_LIBRARIES  Lists libraries whose interface is included when an IMPORTED library target is  linked to another target.  The libraries will be included on the link line for  the target.  Unlike the LINK_INTERFACE_LIBRARIES property this property  applies to all imported target types including STATIC libraries.  This  property is ignored for non-imported targets.   add_library(dbook SHARED IMPORTED)  find_library() find_library(DBOOK_LIBRARY dbook REQUIRED) target_link_libraries(dbookpy ${DBOOK_LIBRARY})      
ResultSet list get_rows ResultSet ResultSet list get_rows ResultSet findAll get_rows findAll create for row in get_rows:     text = ''.join(row.findAll(text=True))     data = text.strip()     print data  
{% for photos in gallery.photo_set|slice:":3" %}  
# -*- coding: utf-8 -*- from bidi.algorithm import get_display import PIL.Image PIL.ImageFont PIL.ImageDraw img= PIL.Image.new("L" (400 200)) draw = PIL.ImageDraw.Draw(img) font = PIL.ImageFont.truetype( r"c:\windows\fonts\arial.ttf" 30) t1 = u'????? ???!' draw.text( (1010) 'before BiDi :' + t1 fill=255 font=font)  t2 = get_display(t1)        # &lt;--- here's the magic &lt;--- draw.text( (1050) 'after BiDi: ' + t2 fill=220 font=font)  img.save( 'bidi-test.png')  
1/2 == 0  1.0/2  from __future__ import division  
base = datetime.datetime.today() date_list = [base - datetime.timedelta(days=x) for x in range(numdays)]  
class ControlPanel(wx.Panel):     def __init__(self *args **kwargs):         wx.Panel.__init__(self *args **kwargs)         self.Bind(wx.EVT_SIZE self.OnResize)      def OnResize(self *args **kwargs):         print "Resizing"  
&gt;&gt;&gt; number = re.search(" ([0-9]) " "test test2 test_ 2 333") &gt;&gt;&gt; print number.groups() ('2')  \d &gt;&gt;&gt; number = re.search(r" (\d) " "test test2 test_ 2 333") &gt;&gt;&gt; print number.groups() ('2')  
&lt;tr&gt;   &lt;td&gt;Yardage&lt;/td&gt;   % for hole in range(9):   &lt;td&gt;${h.text('hole-%s.yardage'%(hole) maxlength=3 size=3)}&lt;/td&gt;   % endfor &lt;/tr&gt;  hole-1.yardage <a href="http://www.formencode.org/en/latest/modules/variabledecode.html" rel="nofollow noreferrer">FormEncode.variabledecode a> import formencode  class HoleSchema(formencode.Schema):     allow_extra_fields = False     yardage = formencode.validators.Int(not_empty=True)     par = formencode.validators.Int(not_empty=True)  class CourseForm(formencode.Schema):     allow_extra_fields = True     filter_extra_fields = True     name = formencode.validators.NotEmpty(messages={'empty': 'Name must not be empty'})     hole = formencode.ForEach(HoleSchema())  hole-#.par hole-#.yardage formencode.ForEach HoleSchema variable_decode=True @validate submit @validate(schema=CourseForm() form='add' post_only=False on_get=True            auto_error_formatter=custom_formatter           variable_decode=True) def submit(self):     # Do whatever here.     return 'Submitted!'  @validate variable_decode=True 
while False while while break while True:     if (some_condition):         break     else:         # Do stuff...  
#!/usr/bin/perl -w  use strict;  open FILE "&lt;header.h" or die $!; my @file = &lt;FILE&gt;; close FILE or die $!;  my $in_block = 0; my $regex = 'Some_Idx\[\]'; my $byte_line = ''; my @byte_entries; foreach my $line (@file) {     chomp $line;      if ( $line =~ /$regex.*\{(.*)/ ) {         $in_block = 1;         my @digits = @{ match_digits($1) };         push @digits @byte_entries;         next;     }      if ( $in_block ) {         my @digits = @{ match_digits($line) };         push @byte_entries @digits;     }      if ( $line =~ /\}/ ) {         $in_block = 0;     } }  print "const BYTE Some_Idx_Mod_mul_2[] = {\n"; print join "" map { $_ * 2 } @byte_entries; print "};\n";  sub match_digits {     my $text = shift;     my @digits;     while ( $text =~ /(\d+)*/g ) {         push @digits $1;     }      return \@digits; }    use GCC::TranslationUnit;    # echo '#include &lt;stdio.h&gt;' &gt; stdio.c   # gcc -fdump-translation-unit -c stdio.c   $node = GCC::TranslationUnit::Parser-&gt;parsefile('stdio.c.tu')-&gt;root;    # list every function/variable name   while($node) {     if($node-&gt;isa('GCC::Node::function_decl') or        $node-&gt;isa('GCC::Node::var_decl')) {       printf "%s declared in %s\n"         $node-&gt;name-&gt;identifier $node-&gt;source;     }   } continue {     $node = $node-&gt;chain;   }  
from subprocess import Popen PIPE  (stdout stderr) = Popen(["cat""foo.txt"] stdout=PIPE).communicate() print stdout  
errs = dict((f.auto_id f.errors) for f in form if f.errors)  
long max_range[] long long c_long() max_range 0x00000000 long max_range array_size = 3 ThreeLongsArrayType = c_long * array_size  array = ThreeLongsArrayType()  
sites_list = Site.objects.filter(worker=worker)  for site in sites_list:     new_sites_list = Site.objects.filter(name=site.name).filter(something else)  
os.path.join(path tfile) 
import pyparsing string = pyparsing.CharsNotIn("{} \t\r\n") group = pyparsing.Forward() group &lt;&lt; pyparsing.Group(pyparsing.Literal("{").suppress() +                           pyparsing.ZeroOrMore(group) +                           pyparsing.Literal("}").suppress())          | string  toplevel = pyparsing.OneOrMore(group)  &gt;&gt;&gt; toplevel.parseString(text) ['protocol' 'sample_thread' [['AUTOSTART' '0'] ['BITMAP' 'thread.gif']  ['COORDS' ['0' '0']] ['DATAFORMAT' [['TYPE' 'hl7'] ['PREPROCS'  [['ARGS' [[]]] ['PROCS' 'sample_proc']]]]]]]  
&gt;&gt;&gt; import re &gt;&gt;&gt; re.compile(r"(\d{04}[1-9])0*$")  &gt;&gt;&gt; import re &gt;&gt;&gt; re.compile(r"^\d*?(\d{04}[1-9])0*$")  \d {04} + \d 
import sqlalchemy from sqlalchemy import Column Table create_engine MetaData Integer from sqlalchemy import func select from sqlalchemy.pool import StaticPool from random import randrange import numpy import sqlite3  class NumpyVarAggregate(object):   def __init__(self):     self.values = []   def step(self value):     self.values.append(value)   def finalize(self):     return numpy.array(self.values).var()  def sqlite_memory_engine_creator():     con = sqlite3.connect(':memory:')     con.create_aggregate("np_var" 1 NumpyVarAggregate)     return con  e = create_engine('sqlite://' echo=True poolclass=StaticPool                   creator=sqlite_memory_engine_creator) m = MetaData(bind=e) t = Table('mytable' m              Column('id' Integer primary_key=True)             Column('number' Integer)           ) m.create_all()  # insert 30 random-valued rows t.insert().execute([{'number': randrange(100)} for x in xrange(30)])  for row in select([func.avg(t.c.number) func.np_var(t.c.number)]).execute():     print 'RESULT ROW: ' row  2009-06-15 14:55:34171 INFO sqlalchemy.engine.base.Engine.0x...d20c PRAGMA  table_info("mytable") 2009-06-15 14:55:34174 INFO sqlalchemy.engine.base.Engine.0x...d20c () 2009-06-15 14:55:34175 INFO sqlalchemy.engine.base.Engine.0x...d20c  CREATE TABLE mytable (     id INTEGER NOT NULL      number INTEGER      PRIMARY KEY (id) ) 2009-06-15 14:55:34175 INFO sqlalchemy.engine.base.Engine.0x...d20c () 2009-06-15 14:55:34176 INFO sqlalchemy.engine.base.Engine.0x...d20c COMMIT 2009-06-15 14:55:34177 INFO sqlalchemy.engine.base.Engine.0x...d20c INSERT INTO mytable (number) VALUES (?) 2009-06-15 14:55:34177 INFO sqlalchemy.engine.base.Engine.0x...d20c [[98]  [94] [7] [1] [79] [77] [51] [28] [85] [26] [34] [68] [15] [43]  [52] [97] [64] [82] [11] [71] [27] [75] [60] [85] [42] [40]  [76] [12] [81] [69]] 2009-06-15 14:55:34178 INFO sqlalchemy.engine.base.Engine.0x...d20c COMMIT 2009-06-15 14:55:34180 INFO sqlalchemy.engine.base.Engine.0x...d20c SELECT avg(mytable.number) AS avg_1 np_var(mytable.number) AS np_var_1 FROM mytable 2009-06-15 14:55:34180 INFO sqlalchemy.engine.base.Engine.0x...d20c [] RESULT ROW: (55.0 831.0)  
&gt;&gt;&gt; int('ffffffff'16) 4294967295L  subkey = int(hexkey[pos:pos+8] 16)  0xffffffff subkeys = [] while key:     subkeys.append(key &amp; 0xffffffff)     key &gt;&gt;= 32  if not subkeys: subkeys = [0] # Handle 0 case subkeys.reverse() # Use same order as before (BUT SEE BELOW)  0x123456789 0x12345678 0x9 0x00000001 0x23456789 
%s #Python2 name = raw_input("who are you? ") print "hello %s" % (name)  #Python3+ name = input("who are you? ") print("hello %s" % (name))  %s %s % 
argparse int 
ordered_attributes True 
from multiprocessing import Process  if __name__ == '__main__':     print "tic"     Process(target=longcalc).start()     print "toc"     Process(target=longtime).start()     print "tic"  "pickle.PicklingError: Can't pickle &lt;type 'PySwigObject'&gt;: it's not found as __builtin__.PySwigObject" multiprocessing copy_reg module __main__ 
urls.py mecore.views.index include('mecore.views') from django.conf.urls.defaults import *  # Uncomment the next two lines to enable the admin: from django.contrib import admin admin.autodiscover()  urlpatterns = patterns(''     # Example:     # (r'^****/' include('****.foo.urls'))      # Uncomment the admin/doc line below and add 'django.contrib.admindocs'      # to INSTALLED_APPS to enable admin documentation:     # (r'^admin/doc/' include('django.contrib.admindocs.urls'))      # Uncomment the next line to enable the admin:     (r'^admin/' include(admin.site.urls))     (r'^test/' 'mecore.views.test')     (r'^' 'mecore.views.index') )  
def select_rows(to_select):     if type(to_select) is not list: to_select = [ to_select ]      for row in range(0 table.numRows()):         if _table.item(row 1).text() in to_select:             table.selectRow(row)  def select_rows(to_select):     if type(to_select) is list: to_select = set( to_select )     elif type(to_select) is not set: to_select = set( [to_select] )      for row in range(0 table.numRows()):         if _table.item(row 1).text() in to_select:             table.selectRow(row)  
&amp;#10; &amp;#x10; Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]  
xmlFailed.toxml() 
class PyLogger:    def __init__(self source):     self.file_handle = open('Python_Log.txt' 'a')     self.source=source     self.buf = []    def write(self data):     self.buf.append(data)     if data.endswith('\n'):       self.file_handle = open('Python_Log.txt' 'a')       self.file_handle.write('\t' * indent_level)       self.file_handle.write(self.source + "::" + ''.join(self.buf))       self.file_handle.close()       self.buf = []    def __del__(self):     if self.buf != []:       self.file_handle = open('Python_Log.txt' 'a')       self.file_handle.write('\t' * indent_level)       self.file_handle.write(self.source + "::" + ''.join(self.buf) + '\n')       self.file_handle.close()           self.file_handle.close()  import sys sys.stdout = PyLogger('stdout') sys.stderr = PyLogger('stderr')  
return list() list_() import re value='   r.dushaynth@gmail.com dash@ben   abc@ac.com.edu    ' value = value.lower()  #value = list(set(re.split('^\s*|\s*+\s*|\s*$' value))) #if (value[0] == ''): #    value.remove('')  value = set(re.findall(r'[\w\d\.\-_]+@[\w\d\.\-_]+' value))  print value  re.findall() list 
&lt;img src="someScript.php?param1=xyz"&gt;  someScript.php?param1=xyz from wsgiref.simple_server import make_server  def serveImage(environ start_response):     status = '200 OK'     headers = [('Content-type' 'image/png')]     start_response(status headers)      return open("about.png" "rb").read()  httpd = make_server('' 8000 serveImage) httpd.serve_forever()  img 
PyObject_Str() PyErr_Fetch() PyErr_NormalizeException() 
from glob import iglob import shutil import os  PATH = r'C:\music'  destination = open('everything.mp3' 'wb') for filename in iglob(os.path.join(PATH '*.mp3')):     shutil.copyfileobj(open(filename 'rb') destination) destination.close()  sys.argv[1:] iglob(...) 
def decorated_file(f key):     for line in f:          yield (key(line) line)  filenames = ['file1.txt''file2.txt''file3.txt'] files = map(open filenames) outfile = open('merged.txt')  for line in heapq.merge(*[decorated_file(f keyfunc) for f in files]):     outfile.write(line[1])  from heapq26 import merge 
splitted_line = line.rstrip("\n").split(";")  
c = a.' / b  c = numpy.linalg.lstsq(b.T a.T)[0].T  
from __future__ import with_statement try:     import cPickle as pickle except ImportError:     import pickle   class cached(object):     """Decorator/context manager for caching function call results.     All results are cached in one dictionary that is shared by all cached     functions.      To use this as a decorator:         @cached         def function(...):             ...      The results returned by a decorated function are not cleared from the     cache until decorated_function.clear_my_cache() or cached.clear_cache()     is called      To use this as a context manager:          with cached(function) as function:             ...             function(...)             ...      The function's return values will be cleared from the cache when the     with block ends      To clear all cached results call the cached.clear_cache() class method     """      _CACHE = {}      def __init__(self fn):         self._fn = fn      def __call__(self *args **kwds):         key = self._cache_key(*args **kwds)         function_cache = self._CACHE.setdefault(self._fn {})         try:             return function_cache[key]         except KeyError:             function_cache[key] = result = self._fn(*args **kwds)             return result      def clear_my_cache(self):         """Clear the cache for a decorated function         """         try:             del self._CACHE[self._fn]         except KeyError:             pass # no cached results      def __enter__(self):         return self      def __exit__(self type value traceback):         self.clear_my_cache()      def _cache_key(self *args **kwds):         """Create a cache key for the given positional and keyword         arguments. pickle.dumps() is used because there could be         unhashable objects in the arguments but passing them to          pickle.dumps() will result in a string which is always hashable.          I used this to make the cached class as generic as possible. Depending         on your requirements other key generating techniques may be more         efficient         """         return pickle.dumps((args sorted(kwds.items())) pickle.HIGHEST_PROTOCOL)      @classmethod     def clear_cache(cls):         """Clear everything from all functions from the cache         """         cls._CACHE = {}   if __name__ == '__main__':     # used as decorator     @cached     def fibonacci(n):         print "calculating fibonacci(%d)" % n         if n == 0:             return 0         if n == 1:             return 1         return fibonacci(n - 1) + fibonacci(n - 2)      for n in xrange(10):         print 'fibonacci(%d) = %d' % (n fibonacci(n))       def lucas(n):         print "calculating lucas(%d)" % n         if n == 0:             return 2         if n == 1:             return 1         return lucas(n - 1) + lucas(n - 2)      # used as context manager     with cached(lucas) as lucas:         for i in xrange(10):             print 'lucas(%d) = %d' % (i lucas(i))      for n in xrange(9 -1 -1):         print 'fibonacci(%d) = %d' % (n fibonacci(n))      cached.clear_cache()      for n in xrange(9 -1 -1):         print 'fibonacci(%d) = %d' % (n fibonacci(n))  
sys.exit sys.exit SystemExit import sys try:     sys.exit() except SystemExit:     print "Somebody called sys.exit()." print "Still running."  finally try:     do_something() finally:     cleanup()  
bin() oct() hex() __index__ hex() oct() bin() __oct__ __hex__ bin() 
#and this should get me the items that a user saved useritems = db.get(saveditemkeys)  
__init__.py from GChartWrapper.GChart import *  myview.py myapp\view GChartWrapper import sys import os sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__) '..' 'utils')))  
__dict__ 
for link in mysite.getallLinks():     if link[0] == firstletter:         print link  import collections d=collections.defaultdict(list) for link in mysite.getallLinks():     d[link[0]].append(link)             # Dict of first letter -&gt; list of links  # Print all links starting with firstletter for link in d[firstletter]:     print link  
enumerate for i item in enumerate(some_seq):     bar(item i)  
multiprocessing.cpu_count() import os import re import subprocess   def available_cpu_count():     """ Number of available virtual or physical CPUs on this system i.e.     user/real as output by time(1) when called with an optimally scaling     userspace-only program"""      # cpuset     # cpuset may restrict the number of *available* processors     try:         m = re.search(r'(?m)^Cpus_allowed:\s*(.*)$'                       open('/proc/self/status').read())         if m:             res = bin(int(m.group(1).replace('' '') 16)).count('1')             if res &gt; 0:                 return res     except IOError:         pass      # Python 2.6+     try:         import multiprocessing         return multiprocessing.cpu_count()     except (ImportError NotImplementedError):         pass      # https://github.com/giampaolo/psutil     try:         import psutil         return psutil.cpu_count()   # psutil.NUM_CPUS on old versions     except (ImportError AttributeError):         pass      # POSIX     try:         res = int(os.sysconf('SC_NPROCESSORS_ONLN'))          if res &gt; 0:             return res     except (AttributeError ValueError):         pass      # Windows     try:         res = int(os.environ['NUMBER_OF_PROCESSORS'])          if res &gt; 0:             return res     except (KeyError ValueError):         pass      # jython     try:         from java.lang import Runtime         runtime = Runtime.getRuntime()         res = runtime.availableProcessors()         if res &gt; 0:             return res     except ImportError:         pass      # BSD     try:         sysctl = subprocess.Popen(['sysctl' '-n' 'hw.ncpu']                                   stdout=subprocess.PIPE)         scStdout = sysctl.communicate()[0]         res = int(scStdout)          if res &gt; 0:             return res     except (OSError ValueError):         pass      # Linux     try:         res = open('/proc/cpuinfo').read().count('processor\t:')          if res &gt; 0:             return res     except IOError:         pass      # Solaris     try:         pseudoDevices = os.listdir('/devices/pseudo/')         res = 0         for pd in pseudoDevices:             if re.match(r'^cpuid@[0-9]+$' pd):                 res += 1          if res &gt; 0:             return res     except OSError:         pass      # Other UNIXes (heuristic)     try:         try:             dmesg = open('/var/run/dmesg.boot').read()         except IOError:             dmesgProcess = subprocess.Popen(['dmesg'] stdout=subprocess.PIPE)             dmesg = dmesgProcess.communicate()[0]          res = 0         while '\ncpu' + str(res) + ':' in dmesg:             res += 1          if res &gt; 0:             return res     except OSError:         pass      raise Exception('Can not determine number of CPUs on this system')  
x = matrix([[0.][0][1]]) theta = matrix(zeros([31])) for i in range(5):   grad = matrix(zeros([31]))   hess = matrix(zeros([33]))   [xfile yfile] = [open('q1'+a+'.dat' 'r') for a in 'xy']   for xline yline in zip(xfile yfile):     x.transpose()[0:2] = [map(float xline.split("  ")[1:3])]     y = float(yline)     hypoth = 1 / (1 + math.exp(theta.transpose() * x))     grad += (y - hypoth) * x     hess -= hypoth * (1 - hypoth) * x * x.transpose()   theta += inv(hess) * grad print "done" print theta  
mystring.replace(" " "_")  
import itertools  group1 = ['a' 'b'] group2 = ['c' 'd']  print list(itertools.product(group1 group2))  #==&gt; [('a' 'c') ('a' 'd') ('b' 'c') ('b' 'd')]  
import subprocess subprocess.Popen(cmd stderr=subprocess.STDOUT stdout=subprocess.PIPE) # etc.  
def loadDictionaryFromAFile( aFile ):     dictionary = {}     for line in aFile:         fields = line.split('\t')         dictionary[fields[0]]= fields  dict2 = loadDictionaryFromAFile( open("file2""r" ) dict3 = loadDictionaryFromAFile( open("file3""r" )  for line in open("file1""r"):     fields = line.split("/t")     d2= dict2.get( fields[0] None )     d3= dict3.get( fields[0] None )     print fields d2 d3  
getattr &gt;&gt;&gt; class helloworld: ...     def world(self): ...         print("Hello World!") ...  &gt;&gt;&gt; m = "world" &gt;&gt;&gt; hello = helloworld() &gt;&gt;&gt; getattr(hello m)() Hello World!  class helloworld() str 
login_required hello def login_required(f):     # This function is what we "replace" hello with     def wrapper(*args **kw):         args[0].client_session['test'] = True         logged_in = 0         if logged_in:             return f(*args **kw)  # Call hello         else:             return redirect(url_for('login'))     return wrapper  
import cStringIO from wsgiref import simple_server util  input_string = """POST /mum/ble?q=huh HTTP/1.0 Content-Length: 18 Content-Type: application/json; charset="utf-8" Host: localhost:80  ["do" "re" "mi"] """  class FakeHandler(simple_server.WSGIRequestHandler):     def __init__(self rfile):         self.rfile = rfile         self.wfile = cStringIO.StringIO() # for error msgs         self.server = self         self.base_environ = {}         self.client_address = ['?' 80]         self.raw_requestline = self.rfile.readline()         self.parse_request()      def getenv(self):         env = self.get_environ()         util.setup_testing_defaults(env)         env['wsgi.input'] = self.rfile         return env  handler = FakeHandler(rfile=cStringIO.StringIO(input_string)) wsgi_env = handler.getenv()  print wsgi_env  rfile wfile HTTP/1.0 POST handler.wfile 
def genfactors(fdict):         factors = set([1])      for factor count in fdict.iteritems():         for ignore in range(count):             factors.update([n*factor for n in factors])             # that line could also be:             # factors.update(map(lambda e: e*factor factors))      return factors  factors = {2:3 3:2 5:1}  for factor in genfactors(factors):     print factor  (13) U (13)*2 = (1236) (1236) U (1236)*2 = (1234612) (1234612)  U (1234612)*2 = (1234681224) (13) + (13)*2 = (1236) (1236) + ((13)*2)*2 = (1234612) (1234612) + (((13)*2)*2)*2 = (1234681224) def genfactors(fdict):     factors = [1]      for factor count in fdict.iteritems():         newfactors = factors         for ignore in range(count):             newfactors = map(lambda e: e*factor newfactors)             factors += newfactors      return factors  
application=WSGIApplication([(r'.*'MyRequestHandler)])  
def categories_view(request):     categories = Categories.objects.all()   #maybe put an order_by or filter here     return render_to_response("your_template.html" {'categories':categories})  {% for category in categories %}     &lt;h1&gt;{{ category.name }}&lt;/h1&gt;     {% for company in category.company_set.all %}         &lt;h2&gt;{{ company.name }}&lt;/h2&gt;         &lt;ul&gt;         {% for video in company.video_set.all %}             &lt;li&gt;{{ video.name }}&lt;/li&gt;         {% endfor %}         &lt;/ul&gt;     {% endfor %} {% endfor %}  
s = s[:-3] + s[-2:]  s[:-3] "this is a string" s[-2:] " a" "this is a string a" 
foo/package1/resources __file__ foo/package1/__init__.py from os import path resources_dir = path.join(path.dirname(__file__) 'resources')  
sleep elsif ( $item =~ /leftclick/i ) {     SendLButtonDown ();     SendLButtonUp (); }  mouse_event SendInput MOUSEINPUT 
foo = somevalue previous = next_ = None l = len(objects) for index obj in enumerate(objects):     if obj == foo:         if index &gt; 0:             previous = objects[index - 1]         if index &lt; (l - 1):             next_ = objects[index + 1]  enumerate 
T = [L[i] for i in Idx]  
items() keys() values() iteritems() iterkeys() itervalues() (value key) zip(): pairs = zip(d.values() d.keys()). iterkeys() itervalues() pairs = zip(d.itervalues() d.iterkeys()) pairs = [(v k) for (k v) in d.iteritems()] keys() values() 
joined = '\x01'.join(data)   \x01 
ERRORLEVEL python somescript.py echo %ERRORLEVEL%  exit() exit(15)  exit() sys from sys import exit exit(15)  
s[i:j:k]    slice of s from i to j with step k  s i j k x = i + n*k 0 &lt;= n &lt; (j-i)/k i i+k i+2*k i+3*k j j i j len(s) len(s i j None k k k None 
libpython26.a .a gcc -shared -o ./toto.dll ./toto.c -I/Python26/include/ -L/Python26/libs -lpython26  
size = 0 for line in f1:   if str(line) == '&lt;/Service&gt;\n':     break   else:     f2.write(line)     size += len(line)     print('size = ' + str(size))  \r\n 
def listit(t):     return list(map(listit t)) if isinstance(t (list tuple)) else t  
cmd list # Just removing the square brackets cmd = exepath + '-j' + str(j) + '-n' + str(z)  # This returns a one-element list cmd = [exepath + '-j' + str(j) +         '-n' + str(z)]  # This returns a string cmd = (exepath + '-j' + str(j) +         '-n' + str(z))  list tuple # This is a string str = ("I'm a string")  # This is a tuple tup = ("I'm a string""me too")  # This is also a (one-element) tuple tup = ("I'm a string")  
mylist.insert(0 mylist.pop(mylist.index(targetvalue)))  
{% for company in category.company_set.all %}  
eval(string) eval(code globals=None locals=None) __builtins__ eval("print('Hello')")  hello eval("print('Hello %s'%name)" {} {'name':'person-b'})  eval("import os;os.system('sudo rm -rf /')")  eval("import os;..." {'os':None})  eval def hello() : print('Hello') def world() : print('world') CURRENT_MOOD = 'happy'  eval(get_code() {'contrivedExample':__main__} {'hi':hello}.update(locals()))  contrivedExample contrivedExample.hello() hi hello exec exec exec "code" [in scope] exec exec "print('hello')"  hello eval "print('hello '+name)" in {'name':'person-b'}  exec exec "import os;os.system('sudo rm -rf /')"  print from __future__ import print_statement print "hello"  print("hello")  
__get__ bound_handler = handler.__get__(self MyWidget)  def bind(instance func as_name=None):     """     Bind the function *func* to *instance* with either provided name *as_name*     or the existing name of *func*. The provided *func* should accept the      instance as the first argument i.e. "self".     """     if as_name is None:         as_name = func.__name__     bound_method = func.__get__(instance instance.__class__)     setattr(instance as_name bound_method)     return bound_method  class Thing:     def __init__(self val):         self.val = val  something = Thing(21)  def double(self):     return 2 * self.val  bind(something double) something.double()  # returns 42  
__new__ __init__ class Test(object):     def __new__(cls):         return 5  t = Test() print t  5 __new__ __init__ __new__ __init__ __new__ __init__ 
startupinfo = None if os.name == 'nt':     startupinfo = subprocess.STARTUPINFO()     startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW proc = subprocess.Popen(command startupinfo=startupinfo)  
buf = open('the_file' 'rb').read() len(buf) ubuf = buf.decode('utf8') # splat ... but it will give you the byte offset into the file buf[offset-50:60] # should show you where/what the problem is # By the way from the error message looks like a bad # FOUR-byte UTF-8 character ... interesting  
0 1 def vacuum(self):     old_isolation_level = self.conn.isolation_level     self.conn.set_isolation_level(0)     query = "VACUUM FULL"     self._doQuery(query)     self.conn.set_isolation_level(old_isolation_level)  
self me if me.has_no_changeset(ticket):  me self self def validate_ticket(self req ticket):     # [...]     if self.has_no_changeset(ticket):  
def _define_checker(name args contract path):     """Define a function that does contract assertion checking.      args is a string argument declaration (ex: 'a b c = 1 *va **ka')     contract is an element of the contracts list returned by parse_docstring     module is the containing module (not parent class)      Returns the newly-defined function.      pre::         isstring(name)         isstring(args)         contract[0] in _CONTRACTS         len(contract[2]) &gt; 0     post::         isinstance(__return__ FunctionType)         __return__.__name__ == name     """     output = StringIO()     output.write('def %s(%s):\n' % (name args))     # ttw001... raise new exception classes     ex = _EXCEPTIONS.get(contract[0] 'ContractViolationError')     output.write('\tfrom %s import forall exists implies %s\n' % \                 (MODULE ex))     loc = '.'.join([x.__name__ for x in path])     for c in contract[2]:         output.write('\tif not (')         output.write(c[0])         # jlr001: adding conidition statement to output message easier debugging         output.write('): raise %s("%s" %u "%s")\n' % (ex loc c[1] c[0]))     # ...ttw001      # ttw016: return True for superclasses to use in preconditions     output.write('\treturn True')     # ...ttw016      return _define(name output.getvalue() path[0])  
self   return self.createTable(self tableName schema asType=asType)    return self.createTable(tableName schema asType=asType)  
from subprocess import Popen STDOUT stdout stderr = Popen('echo ' + cmd shell=True stderr=STDOUT).communicate() print stdout  
&gt;&gt;&gt; a.x GET (10 100.0) &gt;&gt;&gt; b.x &lt;__main__.poweroftwo object at 0x00C57D10&gt; &gt;&gt;&gt; type(a.x) GET &lt;type 'tuple'&gt; &gt;&gt;&gt; type(b.x) &lt;class '__main__.poweroftwo'&gt;  a.x __get__ __set__ b.x 
for row in reader:     row[-1] = row[-1].replace('/?' '?')     writer.writerow(row)  total needchange changeList 
static PyObject* py_set_perlin_parameters(PyObject* self PyObject* args) {     int octaves;     double persistence;     PyObject* zoom_list;     int zoom_count = 0;     std::vector&lt;double&gt; zoom_vector;      if(!PyArg_ParseTuple(args "idO!:set_perlin_parameters" &amp;octaves &amp;persistence &amp;PyList_Type &amp;zoom_list))     {         return NULL;     }      if(!PyList_Check(zoom_list))      {         PyErr_SetString(PyExc_TypeError "set_perlin_parameters: third parameter must be a list");         return NULL;     }      zoom_count = PyList_Size(zoom_list);      for(int i = 0; i &lt; zoom_count; i++)     {         PyObject* list_val;         double val;          list_val = PyList_GetItem(zoom_list i);          if(list_val == NULL)         {             return NULL;         }          val = PyFloat_AsDouble(list_val);          zoom_vector.push_back(val);     }      set_perlin_parameters(octaves persistence zoom_vector);      return Py_None; }  
sqlite import sqlite3  c = sqlite3.Connection(':memory:') c.execute('CREATE TABLE data (a b c)')  c.executemany('INSERT INTO data VALUES (? ? ?)' [     (1 None    1)     (1    0    3)     (1    0    3)     (1    2    3)     (2 None    1)     (2    0 None)     (2    2    2)     (2    2    4)     (2    2 None) ])  # queries # ...  
re.split('(?=(?:[^"]*"[^"]*")*[^"]*$)' str)  
type &gt;&gt;&gt; MySub = type("MySub" (DrvCrystalfontz some_other_class)           {'some_extra method' : lamba self: do_something() })  DrvCrystalfontz some_other_class some_extra_method 
"Counts answer" Please update these counts and feel free to add/modify.  Do you usually read config options via: - command-line/gui options : 1 - a config text file       : 0   How do multiple modules/objects have access to these options? - they receive them from the caller as an argument: 1 - read them directly from the config text file:     0   When doing unit-testing of a single module (NOT the "main" module) and the module uses one option e.g. input filename: - unit-test framework provides own "simplified" config functionality: 0 - unit-test framework invokes main app's config functionality:        1   Do you use: - optparse:  1 - getopt:    0 - others?   Please list any config management "design pattern"  (usable in Python) and add a count if you use it - thanks. -  -  
def fixedpoint(f start stop):     while start != stop:         yield start         start = f(start)  print ".".join(x.name for x in fixedpoint(lambda p:p.parent self None))  
source = open("PALTemplateData.csv""rb") reader = csv.reader(source  dialect)  target = open("AnotherFile.csv""wb") writer = csv.writer(target  dialect)  source = open("PALTemplateData.csv""rb")  target = open("AnotherFile.csv""wb")  
subplan = ForeignKey('self')  subplan = SelfReferenceProperty()  __new__ 
&gt;&gt;&gt; string = ("some text " ...           "more text " ...           "and even more") &gt;&gt;&gt; string 'some text more text and even more'  &gt;&gt;&gt; string = """some text ...             more text ...             and even more"""  
class Animal(object):     def speak(self):         raise NotImplementedError()      def speak_twice(self):         self.speak()         self.speak()  class Dog(Animal):     def speak(self):         print "woff!"  class Cat(Animal):     def speak(self):         print "meow"  "speak_twice" "speak_twice" "number_of_legs" "print_number_of_legs" 
dict.fromkeys &gt;&gt;&gt; my_list = [1 2 3] &gt;&gt;&gt; dict.fromkeys(my_list) {1: None 2: None 3: None}  None &gt;&gt;&gt; my_list = [1 2 3] &gt;&gt;&gt; dict.fromkeys(my_list 0) {1: 0 2: 0 3: 0}  
&gt;&gt;&gt; req.headers['content-type'] 'text/html; charset=windows-1251'  &gt;&gt;&gt; encoding=req.headers['content-type'].split('charset=')[-1] &gt;&gt;&gt; ucontent = unicode(content encoding)  ucontent &gt;&gt;&gt; print ucontent[76:110].encode('utf-8') &lt;title&gt;Lenta.ru: ???????: &lt;/title&gt;  &gt;&gt;&gt; x=u'\u0413\u043b\u0430\u0432\u043d\u043e\u0435' &gt;&gt;&gt; print x.encode('utf-8') ??????? &gt;&gt;&gt; x in ucontent True &gt;&gt;&gt; ucontent.find(x) 93  
class FooBar(Foo):      @property     def bar(self):         # return the same value         # as in the base class         return Foo.bar(self)  class FooBar(Foo):      @property     def bar(self):         # return the same value         # as in the base class         return Foo.bar.fget(self)  
inspect.getargspec() inspect.getargspec(func) 
with open("..." "wb") as out:   xml = XmlWriter(out)   xml.addNamespace("xhtml" "http://www.w3.org/1999/xhtml")   xml.startTag("xhtml:html")   xml.startTag("xhtml:body")   xml.text("Hello world!")   xml.tag("xhtml:img" {"src": "smile.png" "alt": ":-)"})   xml.endTag()   xml.endTag()   xml.close()  &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;xhtml:html xlmns:xhtml="http://www.w3.org/1999/xhtml"&gt;   &lt;xhtml:body&gt;     Hello world!     &lt;xhtml:img alt=":-)" src="smile.png" /&gt;   &lt;/xhtml:body&gt; &lt;/xhtml:html&gt;  
__contains__ class A(object):     def __init__(self):        self.mydict = {}      def __contains__(self other):        return self.mydict.__contains__(other)  return other in self.mydict class BlackMagic(object):     def __init__(self):         self.mydict = {}         self.__class__ = type(self.__class__.__name__ (self.__class__) {})         self.__class__.__contains__ = self.mydict.__contains__  self.__class__ self self.__magicname__ self.__class__.__magicname__ staticmethod self in BlackMagic -mtimeit built-in method self.__class__ __new__ __setattr__ 
subprocess.Popen env= 
from cPickle import dumps from cookielib import CookieJar import threading  class MyCookieJar(CookieJar):     def __getstate__(self):         state = self.__dict__.copy()         del state['_cookies_lock']         return state      def __setstate__(self state):         self.__dict__ = state         self._cookies_lock = threading.RLock()  class Person(object):     def __init__(self name):         self.name = name         self.cookies = MyCookieJar()  bob = Person("bob") print dumps(bob)  
def getAvgValues(data avgSampleTime):   lastTime = 0   prevValsBuf = []   prevValsStart = 0   tot = 0   for t v in data:     avgStart = t - avgSampleTime     # remove too old values     while prevValsStart &lt; len(prevValsBuf):       pt pv = prevValsBuf[prevValsStart]       if pt &gt; avgStart:         break       tot -= pv       prevValsStart += 1     # add new item     tot += v     prevValsBuf.append((t v))     # yield result     numItems = len(prevValsBuf) - prevValsStart     yield (t tot / numItems)     # clean prevVals if it's time     if prevValsStart * 2 &gt; len(prevValsBuf):       prevValsBuf = prevValsBuf[prevValsStart:]       prevValsStart = 0       # recalculate tot for not accumulating float precision error       tot = sum(v for (t v) in prevValsBuf)  
(.)\1  import re  regexp = re.compile(r"(.)\1") data = ["parrot""follia""carrot""mattia""rettoo""melone"]  for str in data:     match = re.search(regexp str)     if match:         print str "&lt;- match for double" match.group(1)     else:         print str "&lt;- doesn't match"  
ImportError pyChecker 
import urlparse qsdata = "test=test&amp;test2=test2&amp;test2=test3" qs = dict( (k v if len(v)&gt;1 else v[0] )             for k v in urlparse.parse_qs(qsdata).iteritems() ) print qs  
feof + " &amp;" &amp; s = socket.socket(socket.AF_INET socket.SOCK_STREAM) s.bind(("" port)) s.listen(5) print "OK." print "  Listening on port:" port import subprocess try:     while 1:         con addr = s.accept()         try:             datagram = con.recv(1024)             if not datagram:                 continue             print "Rx Cmd:" datagram             print "Launch:" datagram             process = subprocess.Popen(datagram shell=True stdout=subprocess.PIPE)             stdout stderr = process.communicate()             con.send(stdout)         finally:             print "closing connection"             con.close() except KeyboardInterrupt:     pass finally:     print "closing socket"     s.close()  fgets 
doctest.ELLIPSIS ... doctest &gt;&gt;&gt; print range(20) # doctest:+ELLIPSIS [0 1 ... 18 19]  optionflags= doctest.testfile | 
def my_func(a b='abc' c='def'):     print a b c  my_func('hello' c='world')  hello abc world  def my_other_func(a *b **c):     print a b c  *b b a tuple **c c dict my_other_func('hello' 'world' 'what a' state='fine' what='day')  hello ('world' 'what a') {'state': 'fine' 'what': 'day'}  
foo os.path.join os.getcwd() foo path=os.path.normpath(path) 
select_related select_related  GroupMembership.objects.filter( user="someUser" )   groups = GroupMembership.objects.filter( user="someUser" )  groups 
d = {'key': 'value'} print(d) # {'key': 'value'} d['mynewkey'] = 'mynewvalue' print(d) # {'key': 'value' 'mynewkey': 'mynewvalue'}  
TEMPLATE_CONTEXT_PROCESSORS 
import elementtree.ElementTree as ET  html = """&lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;p&gt;TEXT STRING HERE ......&lt;/p&gt;  &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;"""  for e in ET.fromstring(html).getiterator():     if e.text.find('TEXT STRING HERE') != -1:         print "Found string %r element = %r" % (e.text e)  
optparse argparse add_argument nargs='*' '+' 
import re ut0 = re.compile(r'(\d)0+$')  thelist = [ut0.sub(r'\1' "%12f" % x) for x in a]  print '\n'.join(thelist)  import re import textwrap  a = [  5.50056103e+02   6.77383566e+03   6.01001513e+05          3.55425142e+08   7.07254875e+05   8.83174744e+02          8.22320510e+01   4.25076609e+08   6.28662635e+07          1.56503068e+02]  thelist = textwrap.dedent(         '\n'.join(ut0.sub(r'\1' "%20f" % x) for x in a)).splitlines()  print '\n'.join(thelist)        550.056103      6773.83566    601001.513 355425142.0    707254.875       883.174744        82.232051 425076609.0  62866263.5       156.503068  
flup auth 
.extra(select={'is_staff': "%s.name='staff'" % Permission._meta.db_table 'is_student': "%s.name='student'" % Permission._meta.db_table })   
import ctypes os try:  is_admin = os.getuid() == 0 except AttributeError:  is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0  print is_admin  
import mod2 import mod2 mod2 import import mod2 mod2.foobar foobar mod2 import mod2 
myFile=open(r'C:\NEWMASTERLIST\FULLLIST.txt''r+')  
main execfile try except sys.exit main except main.py try:   execfile('whatever.py') except SystemExit:   print "sys.exit was called but I'm proceeding anyway (so there!-)." print "so I'll print this etc etc"  whatever.py sys.exit(0) execfile execfile SystemExit 
x = [70 80 90 100 110] y = [49.7 80.6 122.5 153.8 163.0] f = interpolate.UnivariateSpline(x y s=0) xnew = np.arange(701111)  plt.plot(xy'x'xnewf(xnew))  yToFind = 140 yreduced = np.array(y) - yToFind freduced = interpolate.UnivariateSpline(x yreduced s=0) freduced.roots()  
process_message raise raise 
argparse if __name__ == '__main__':     parser = argparse.ArgumentParser()     parser.add_argument('--input' default='My Input')     parser.add_argument('filename' default='some_file.txt')     parser.add_argument('unittest_args' nargs='*')      args = parser.parse_args()     # TODO: Go do something with args.input and args.filename      # Now set the sys.argv to the unittest_args (leaving sys.argv[0] alone)     sys.argv[1:] = args.unittest_args     unittest.main()  python test.py --input=foo data.txt MyTest  foo data.txt 
import subprocess  text = raw_input("Enter text to be classified: ") p1 = subprocess.Popen('bin/stupidfilter' 'data/c_trbf') stupid = float(p1.communicate(text)[0])  if stupid:     print "Text is likely to be stupid" else:     print "Text is not likely to be stupid"  
select ... for update from django.db import transaction  @transaction.commit_manually() def add_points(request):     user = User.objects.select_for_update().get(id=request.user.id)     # you can go back at this point if something is not right      if user.points &gt; 1000:         # too many points         return     user.points += calculate_points(user)     user.save()     transaction.commit()  
'_x' _ 
dict( [ (n a.get(n 0)+b.get(n 0)) for n in set(a)|set(b) ] )  dict( (n a.get(n 0)+b.get(n 0)) for n in set(a)|set(b) )  from collections import Counter dict(Counter(a)+Counter(b))  
cProfile.runctx("self.profileCommand(100)" globals()locals())  class A(object):     def performProfile(self):         import cProfile         cProfile.runctx("self.profileCommand(100)" globals()locals())      def profileCommand(self a):         for i in xrange(a):             pass         print "end."  A().performProfile()  
recovery service properties Restart the Service sys.exit() self.iVal 5 
res = dict((vk) for kv in a.iteritems())  res = dict((vk) for kv in a.items())  
countMap = {} for v in a.itervalues():     countMap[v] = countMap.get(v0) + 1 uni = [ k for k v in a.iteritems() if countMap[v] == 1]  
def TrueXor(*args):     return sum(args) == 1  TrueXor(1 0 0) TrueXor(True False False)  sum( bool(x) for x in args ) == 1 
eval ... def import_plugin(name):     mod = __import__(name)     components = name.split('.')     for comp in components[1:]:         mod = getattr(mod comp)     return mod  ... feed_parser = import_plugin('parsers.%s' % feed['format']) data = feed_parser(...) ...  parsers/csv.py #!/usr/bin/python from __future__ import absolute_import  import urllib2 import csv  def parse_feed(...):     ...  class BaseParser(object):     ...  class CSVParser(BaseParser):     ... register_feed_parser(CSVParser ['text/plain' 'text/csv']) ...  parsers = get_registered_feed_parsers(feed['mime_type']) data = None for parser in parsers:     try:         data = parser(feed['data'])         if data is not None: break     except ParsingError:         pass ...  
lambda lambda launchEmployee eval display lambda lambda type(lambda:0) 'menuBar':[('File' 0 [('Save' 0 (lambda widget=None: widget.onSave()))])]  'title': 'Employee Data Entry'}  display = DisplayScreen(**config) config def place_widget(widget mess):   if isinstance(mess (list tuple)):     for item in mess:       place_widget(widget item)   elif isinstance(mess type(lambda:0)):     if mess.func_code.co_varnames[-1:] == ('widget'):       mess.func_defaults = mess.func_defaults[:-1] + (widget)  eval dict lambda inspect func_defaults inspect class Bunch(object): pass widgets = Bunch()  widgets.foobar foobar eval lambda lambda: widgets.foobar.onSave()  eval lambda 
transaction DBSession.flush() object1 = Model1(param) DBSession.add(object1) DBSession.flush() assert object1.id != None # flushing the session populates the id  object2 = AnotherModel(object1.id)  flush() flush() flush() commit() flush() 
lgrAdminObject.fields class Photos(lgrAdminObject):     fields = list(lgrAdminObject.fields)  
duplicate = [] # Sort the list so we can compare adjacent values fail.sort() #if you didn't want to modify the list in place you can use: #sortedFail = sorted(fail) #      and then use sortedFail in the rest of the code instead of fail for i x in enumerate(fail):     if i+1 == len(fail):         #end of the list         break     if x[:2] == fail[i+1][:2]:         if x not in duplicate:             duplicate.add(x)         if fail[i+1] not in duplicate:             duplicate.add(fail[i+1]) # diff is just anything not in duplicate as far as I can tell from the explanation diff = [d for d in fail if d not in duplicate]  duplicate: [               ['95d1543adea47e88923c3d4ad56e9f65c2b40c76' 'ron\\c' ['apa.txt']]                ['95d1543adea47e88923c3d4ad56e9f65c2b40c76' 'ron\\c' 'knark.txt']            ]  diff: [           ['b5cc17d3a35877ca8b76f0b2e07497039c250696' 'ron\\a' ['apa2.txt']]            ['b5cc17d3a35877ca8b76f0b2e07497039c250696' 'ron\\c' 'apa1.txt']            ['da39a3ee5e6b4b0d3255bfef95601890afd80709' 'ron\\a\\include' ['svin.txt']]           ['da39a3ee5e6b4b0d3255bfef95601890afd80709' 'ron\\b\\include' 'Test.java']           ['da39a3ee5e6b4b0d3255bfef95601890afd80709' 'ron\\d' 'Sourcecheck.py']       ]  
$ type time time is a shell keyword  
str() def xstr(s):     if s is None:         return ''     return str(s)  
def f():     stacks  = inspect.stack()     grand_parent_locals = stacks[2][0].f_locals     caller_name = stacks[1][3]     candidate = grand_parent_locals[caller_name]  class test(object):     def f(self):         stack = inspect.stack()         parent_func_name = stack[1][3]         parent_func = getattr(self parent_func_name).im_func  
&gt;&gt;&gt; from cStringIO import StringIO &gt;&gt;&gt; from tokenize import tokenize &gt;&gt;&gt;  &gt;&gt;&gt; python_code = ''' ... def foo(): # This is a comment ...     print 'foo' ... ''' &gt;&gt;&gt;  &gt;&gt;&gt; fp = StringIO(python_code) &gt;&gt;&gt;  &gt;&gt;&gt; tokenize(fp.readline) 10-11:    NL  '\n' 20-23:    NAME    'def' 24-27:    NAME    'foo' 27-28:    OP  '(' 28-29:    OP  ')' 29-210:   OP  ':' 211-230:  COMMENT '# This is a comment' 230-231:  NEWLINE '\n' 30-34:    INDENT  '    ' 34-39:    NAME    'print' 310-315:  STRING  "'foo'" 315-316:  NEWLINE '\n' 40-40:    DEDENT  '' 40-40:    ENDMARKER   ''  
def todict(obj classkey=None):     if isinstance(obj dict):         data = {}         for (k v) in obj.items():             data[k] = todict(v classkey)         return data     elif hasattr(obj "_ast"):         return todict(obj._ast())     elif hasattr(obj "__iter__") and not isinstance(obj str):         return [todict(v classkey) for v in obj]     elif hasattr(obj "__dict__"):         data = dict([(key todict(value classkey))              for key value in obj.__dict__.items()              if not callable(value) and not key.startswith('_')])         if classkey is not None and hasattr(obj "__class__"):             data[classkey] = obj.__class__.__name__         return data     else:         return obj  
from __future__ import with_statement 
default= def generate_invoice_number():     # special logic to generate a unique invoice number  class Invoice(DeclarativeBase):     __tablename__ = 'invoice'     number = Column(Integer unique=True default=generate_invoice_number)     ...  
connection = sqlite3.connect(':memory:')  sqlite3 import csv import sqlite3  db = sqlite3.connect(':memory:')  def init_db(cur):     cur.execute('''CREATE TABLE foo (         Row INTEGER         Name TEXT         Year INTEGER         Priority INTEGER)''')  def populate_db(cur csv_fp):     rdr = csv.reader(csv_fp)     cur.executemany('''         INSERT INTO foo (Row Name Year Priority)         VALUES (????)''' rdr)  cur = db.cursor() init_db(cur) populate_db(cur open('my_csv_input_file.csv')) db.commit()  lod = [ ] # "list of dicts"  def populate_lod(lod csv_fp):     rdr = csv.DictReader(csv_fp ['Row' 'Name' 'Year' 'Priority'])     lod.extend(rdr)  def query_lod(lod filter=None sort_keys=None):     if filter is not None:         lod = (r for r in lod if filter(r))     if sort_keys is not None:         lod = sorted(lod key=lambda r:[r[k] for k in sort_keys])     else:         lod = list(lod)     return lod  def lookup_lod(lod **kw):     for row in lod:         for kv in kw.iteritems():             if row[k] != str(v): break         else:             return row     return None  &gt;&gt;&gt; lod = [] &gt;&gt;&gt; populate_lod(lod csv_fp) &gt;&gt;&gt;  &gt;&gt;&gt; pprint(lookup_lod(lod Row=1)) {'Name': 'Cat' 'Priority': '1' 'Row': '1' 'Year': '1998'} &gt;&gt;&gt; pprint(lookup_lod(lod Name='Aardvark')) {'Name': 'Aardvark' 'Priority': '1' 'Row': '4' 'Year': '2000'} &gt;&gt;&gt; pprint(query_lod(lod sort_keys=('Priority' 'Year'))) [{'Name': 'Cat' 'Priority': '1' 'Row': '1' 'Year': '1998'}  {'Name': 'Dog' 'Priority': '1' 'Row': '3' 'Year': '1999'}  {'Name': 'Aardvark' 'Priority': '1' 'Row': '4' 'Year': '2000'}  {'Name': 'Wallaby' 'Priority': '1' 'Row': '5' 'Year': '2000'}  {'Name': 'Fish' 'Priority': '2' 'Row': '2' 'Year': '1998'}  {'Name': 'Zebra' 'Priority': '3' 'Row': '6' 'Year': '2001'}] &gt;&gt;&gt; pprint(query_lod(lod sort_keys=('Year' 'Priority'))) [{'Name': 'Cat' 'Priority': '1' 'Row': '1' 'Year': '1998'}  {'Name': 'Fish' 'Priority': '2' 'Row': '2' 'Year': '1998'}  {'Name': 'Dog' 'Priority': '1' 'Row': '3' 'Year': '1999'}  {'Name': 'Aardvark' 'Priority': '1' 'Row': '4' 'Year': '2000'}  {'Name': 'Wallaby' 'Priority': '1' 'Row': '5' 'Year': '2000'}  {'Name': 'Zebra' 'Priority': '3' 'Row': '6' 'Year': '2001'}] &gt;&gt;&gt; print len(query_lod(lod lambda r:1997 &lt;= int(r['Year']) &lt;= 2002)) 6 &gt;&gt;&gt; print len(query_lod(lod lambda r:int(r['Year'])==1998 and int(r['Priority']) &gt; 2)) 0  
strip x.strip(y) y x endswith url = 'abcdc.com' if url.endswith('.com'):     url = url[:-4]  import re url = 'abcdc.com' url = re.sub('\.com$' '' url)  
#!/bin/bash sed "s/\(^[^#]\)/  \1/" $1 | \ sed "s/^##bind [a-z]*=\([a-z][a-z]*\)$/import \1/" | \ sed "s/^##parameters=\(.*\)/def foo(\1):/" | pyflakes  
os.remove() os.rmdir() shutil.rmtree() import shutil shutil.rmtree('/home/me/test')   
&gt;&gt;&gt; import json &gt;&gt;&gt; json.dumps(json.loads(""" ... {"node0":{ ...     "node1":{ ...         "attr0":"foo" ...         "attr1":"foo bar" ...         "attr2":"value with        long        spaces" ...     } ... }} ... """)) '{"node0": {"node1": {"attr2": "value with        long        spaces" "attr0": "foo" "attr1": "foo bar"}}}'  
initial form = EditAdminForm(initial={'password':'abcdef'})  
import sys number = int(sys.argv[1]) fact = 1 for x in range(1 number+1):     fact *= x  print fact  if else for for 
&gt;&gt;&gt; 0.1 0.10000000000000001  &gt;&gt;&gt; 0.1 + 0.2 == 0.3 False  
re.split('-(?=\d)' 'foo-bar-1.23-4' 1)  
dict(globals() **locals()) thefunction.func_code.co_freevars thefunction.func_closure cell_contents 
def my_view(request movie):     return render_to_template('my_view.html'                               {'movie': settings.MEDIA_URL + 'flash.swf?' + movie})  urls.py ... url(r'/flash/(?P&lt;movie&gt;.+)$' 'myapp.views.my_view') ...  my_view.html ... &lt;object classid="clsid:XXXXXXXXX-YYYY-ZZZZ-AAAA-BBBBBBBBBB" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7000" width="100%" height="100%" id="main" align="middle"&gt; &lt;param name="allowScriptAccess" value="all" /&gt; &lt;param name="flashvars" value= /&gt; &lt;param name="movie" value="{{ movie }}" /&gt; &lt;param name="loop" value="false" /&gt; &lt;param name="quality" value="high" /&gt; &lt;param name="bgcolor" value="#eeeeee" /&gt; &lt;embed src="{{ movie }}" loop="false" quality="high" bgcolor="#eeeeee" width="100%" height="100%" name="main" align="middle" allowScriptAccess="all" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt; &lt;/object&gt; ...  def return_movie_html(environ start_response):     request_uri = environ.get('REQUEST_URI')     movie_uri = request_uri[request_uri.rfind('/')+1:]     start_response('200 OK' [('Content-Type' 'text/html')])     return ['''             &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"                                   "http://www.w3.org/TR/html4/strict.dtd"&gt;             &lt;html&gt;             ...             &lt;object ...&gt;             &lt;param name="allowScriptAccess" value="all" /&gt;             &lt;param name="flashvars" value= /&gt;             &lt;param name="movie" value="%(movie)s" /&gt;             &lt;param name="loop" value="false" /&gt;             &lt;param name="quality" value="high" /&gt;             &lt;param name="bgcolor" value="#eeeeee" /&gt;             &lt;embed src="%(movie)s" loop="false" ... /&gt;             &lt;/object&gt;             ...             &lt;/html&gt;             ''' % {'movie': movie_uri}]  
# test_client.py from poster.encode import multipart_encode from poster.streaminghttp import register_openers import urllib2  # Register the streaming http handlers with urllib2 register_openers()  # headers contains the necessary Content-Type and Content-Length # datagen is a generator object that yields the encoded parameters datagen headers = multipart_encode({     'categoryID' : 1     'cID'        : -3     'FileType'   : 'zip'     'name'       : 'Kylie Minogue'     'file1'      : open('At the Beach x8-8283.zip') })  # Create the Request object request = urllib2.Request("http://localhost:5000/upload_data" datagen headers)  # Actually do the request and get the response print urllib2.urlopen(request).read()  
years months days = the_string.split('-') days time = days.split(' ') time = time.split(':')  date time = the_string.split(' ') years months days = date.split('-') hours minute seconds = time.split(":")  
@patch datetime datetime.date.today utils/date.py import datetime  def today():     return datetime.date.today()  tests.py import datetime import mock from unittest2 import TestCase  from django.core.exceptions import ValidationError  from .. import validators  class ValidationTests(TestCase):     @mock.patch('utils.date.today')     def test_validate_future_date(self today_mock):         # Pin python's today to returning the same date         # always so we can actually keep on unit testing in the future :)         today_mock.return_value = datetime.date(2010 1 1)          # A future date should work         validators.validate_future_date(datetime.date(2010 1 2))          # The mocked today's date should fail         with self.assertRaises(ValidationError) as e:             validators.validate_future_date(datetime.date(2010 1 1))         self.assertEquals([u'Date should be in the future.'] e.exception.messages)          # Date in the past should also fail         with self.assertRaises(ValidationError) as e:             validators.validate_future_date(datetime.date(2009 12 31))         self.assertEquals([u'Date should be in the future.'] e.exception.messages)  from django.utils.translation import ugettext_lazy as _ from django.core.exceptions import ValidationError  from utils import date  def validate_future_date(value):     if value &lt;= date.today():         raise ValidationError(_('Date should be in the future.'))  
wx.MessageBox(messages.GREET_SO)  wx.MessageBox(_("GREET_SO")) or wx.MessageBox(_("messages.GREET_SO"))  
from weakref import ref  pointers = set()  class Pointer(object):     def __init__(self cfun ptr):         pointers.add(self)         self.ref = ref(ptr self.cleanup)         self.data = cast(ptr c_void_p).value # python cast it so smart but it can't be smarter than this.         self.cfun = cfun      def cleanup(self obj):         print 'cleanup 0x%x' % self.data         self.cfun(self.data)         pointers.remove(self)  def cleanup(cfun ptr):     Pointer(cfun ptr)  
print "%2d. %8.2f %8.2f %8.2f" % (         # no mistake here             i lyhennys korkoera kuukausiera)  
2**3*2  2*3*2  ** 
public class FibonacciAlgorithm {      private int a = 0;      private int b = 1;      public FibonacciAlgorithm() {      }      public int increment() {         int temp = b;         b = a + b;         a = temp;         return value;     }      public int getValue() {         return b;     } }  Integers ints Integers 
class C(): pass  x = C() y = C() print(id(x) id(y))    #(4400352 16982704)  
dupedict = {} for a b c in dupe:   dupedict.setdefault((ab)[]).append(c)  for key values in dupedict.iteritems():   print ' '.join(key) ' '.join(values)  
import requests  url = 'https://www.someserver.com/toplevelurl/somepage.htm'  res = requests.get(url auth=('USER' 'PASSWORD'))  status = res.status_code text   = res.text  
class x:     print "hello"     def __init__(self): print "hello again"  hello x hello again def __init__(self): ... __init__ = lambda self: ... def class X(models.Model):     creator = Registry()     creator.register(Y)  Y Y class X type class X(models.Model):     pass class Y(models.Model):     foo = something_that_uses_(X) X.bar = something_which_uses(Y)  X Y Y Y X Y X 
class X(object):   print("Loading X")  
cmd /c program name arguments | further stuff "\p" '\\p' '\n' proc = subprocess.Popen(     ['C:/Program Files/GNU/GnuPG/gpg.exe'     '--batch' '--passphrase-fd' '0'     '--output ' 'c:/docume~1/usi/locals~1/temp/tmptlbxka.txt'     '--decrypt' 'test.txt.gpg']     stdin=subprocess.PIPE     stdout=subprocess.PIPE    stderr=subprocess.STDOUT ) stdout_value stderr_value = proc.communicate('bosco')  
year=['51-52' '53' '55'  '56'  '58' '59' '60' '61'] photo=[[707273] [646568][79808182][747778][606162][848587][575859][53545556]]  for i in range(len(year)):    for j in range(len(photo[i])):        print '&lt;img src=\"http://files.getdropbox.com/u/100000/Akuja/%s/P10104%s.JPG&gt;' % (year[i] photo[i][j])  
agent/agent.py checks.py  path = os.path.abspath(os.path.join(os.path.dirname(__file__) '..')) if not path in sys.path:     sys.path.insert(1 path) del path  __file__ 
from os import * 
heap[0] 
import pickle d = { "abc" : [1 2 3] "qwerty" : [456] } afile = open(r'C:\d.pkl' 'wb') pickle.dump(d afile) afile.close()  #reload object from file file2 = open(r'C:\d.pkl' 'rb') new_d = pickle.load(file2) file2.close()  #print dictionary object loaded from file print new_d  
debug.log config.map 
things &gt;&gt; my_thing = [x for x in things if x[2]=="Blurgle"][0]  my_things dict 
readline() from collections import defaultdict try:   from io import StringIO # 2.6+ 3.x except ImportError:   from StringIO import StringIO # 2.5  data = defaultdict(int)  #with open("filename" "r") as f: # if a real file with StringIO("10\n5\n-1\n-1\n-1\n1\n1\n0\n2") as f:   for line in f:     data[int(line)] += 1  for number count in data.iteritems():   print number "was found" count "times"  
class Lesson(models.Model):     contents = models.TextField()     visit_count = models.IntegerField(default=0)  class StatLesson(models.Model):     lesson = models.ForeignKey(Lesson)     datetime = models.DateTimeField(default=datetime.datetime.now())      def save(self *args **kwargs):         if self.pk is None:             self.lesson.visit_count += 1             self.lesson.save()         super(StatLesson self).save(*args **kwargs)  Lesson.objects.all().order_by('visit_count')  
re.compile(r'([^a-zA-Z0-9])(%s)([^a-zA-Z0-9])' % '\+test' re.I)  re.compile(r'([^a-zA-Z0-9])(%s)([^a-zA-Z0-9])' % re.escape('+test') re.I)  
foreign_key subscription_set class HardwareNode(models.Model):     ip_address = models.CharField(max_length=15)     port = models.IntegerField()     location = models.CharField(max_length=50)     hostname = models.CharField(max_length=30)     subscription_count = lambda(self: self.subscription_set.count())  
class MonkeyTester(unittest.TestCase):     def test_myfunc(self):         without_timestamp = my_func()         del without_timestamp["monkey_creation"]         self.assertEqual(without_timestamp {'monkey_head_count': 3})  datetime.now() import datetime constant_now = datetime.datetime(200987654) old_datetime_class = datetime.datetime class new_datetime(datetime.datetime):     @staticmethod     def now():         return constant_now  datetime.datetime = new_datetime  datetime.datetime.now() constant_now datetime.datetime.now() datetime.datetime = old_datetime_class  
shell = False from subprocess import Popen PIPE  cmd = [     r"C:\Program Files\Microsoft Visual Studio 8\Common7\IDE\devenv" # in raw r"blah" string you don't need to escape backslashes     "solution.sln"     "/build"     "Debug|Win32" ]  p = Popen(cmd stdout=PIPE stderr=PIPE) out = p.stdout.read() # reads full output into string including line breaks  print out  
BufferedReader input = null; try {     input = new BufferedReader(new FileReader(inputFileName));     // Stack of instruction blocks     Stack&lt;Block&gt; stack = new Stack&lt;Block&gt;();     // Push the root block     stack.push(this.topLevelBlock);     String line = null;     Instruction prev = new Noop();     while ((line = input.readLine()) != null) {         // Difference between the indentation of the previous and this line         // You do not need this you will be using {} to specify block boundaries         int level = indent_level(line) - stack.size();         // Parse the line (returns an instruction object)         Instruction inst = Instruction.parse(line.trim().split(" +"));         // If the previous instruction expects a block (for example repeat)         if (prev.block_expected()) {             if (level != 1) {                 // TODO handle error                 continue;             }             // Push the previous instruction and add the current instruction             stack.push((Block)(prev));             stack.peek().add(inst);         } else {             if (level &gt; 0) {                 // TODO handle error                 continue;             } else if (level &lt; 0) {                 // Pop the stack at the end of blocks                 for (int i = 0; i &lt; -level; ++i)                     stack.pop();             }             stack.peek().add(inst);         }         prev = inst;     } } finally {     if (input != null)         input.close(); }  
class _GetchUnix:     def __init__(self):         import tty sys      def __call__(self):         import sys tty termios         fd = sys.stdin.fileno()         old_settings = termios.tcgetattr(fd)         try:             tty.setraw(sys.stdin.fileno())             ch = sys.stdin.read(1)         finally:             termios.tcsetattr(fd termios.TCSADRAIN old_settings)         return ch   getch = _GetchUnix()  print getch()  
os.walk() &gt;&gt;&gt; list(os.walk(r'C:\example'))          # Passing an ASCII string [('C:\\example' [] ['file.txt'])] &gt;&gt;&gt;  &gt;&gt;&gt; list(os.walk(ur'C:\example'))        # Passing a Unicode string [(u'C:\\example' [] [u'file.txt'])]  
def my_timer(*args):     return True# do ur work here but not for long  gtk.timeout_add(60*1000 my_timer) # call every min  
lines = open("/proc/net/dev" "r").readlines()  columnLine = lines[1] _ receiveCols  transmitCols = columnLine.split("|") receiveCols = map(lambda a:"recv_"+a receiveCols.split()) transmitCols = map(lambda a:"trans_"+a transmitCols.split())  cols = receiveCols+transmitCols  faces = {} for line in lines[2:]:     if line.find(":") &lt; 0: continue     face data = line.split(":")     faceData = dict(zip(cols data.split()))     faces[face] = faceData  import pprint pprint.pprint(faces)  {'    lo': {'recv_bytes': '7056295'             'recv_compressed': '0'             'recv_drop': '0'             'recv_errs': '0'             'recv_fifo': '0'             'recv_frame': '0'             'recv_multicast': '0'             'recv_packets': '12148'             'trans_bytes': '7056295'             'trans_carrier': '0'             'trans_colls': '0'             'trans_compressed': '0'             'trans_drop': '0'             'trans_errs': '0'             'trans_fifo': '0'             'trans_packets': '12148'}  '  eth0': {'recv_bytes': '34084530'             'recv_compressed': '0'             'recv_drop': '0'             'recv_errs': '0'             'recv_fifo': '0'             'recv_frame': '0'             'recv_multicast': '0'             'recv_packets': '30599'             'trans_bytes': '6170441'             'trans_carrier': '0'             'trans_colls': '0'             'trans_compressed': '0'             'trans_drop': '0'             'trans_errs': '0'             'trans_fifo': '0'             'trans_packets': '32377'}}  
import atexit atexit._exithandlers = []  logging atexit my_handler_entries = [e for e in atexit._exithandlers if e[0] == my_handler_func] for e in my_handler_entries:     atexit._exithandlers.remove(e)  my_handler_func atexit 
openb \k&lt;season&gt; (P=season) r = re.compile(r'^(?:(?P&lt;name&gt;.*?)[\/\s._-]*)?(?P&lt;openb&gt;\[)?(?P&lt;season&gt;\d{12})[x\/](?P&lt;episode&gt;\d{12})(?:-(?:(?P=season)x)?(?P&lt;endep&gt;\d{12}))?(?(openb)\])(?:[\s._-]*(?P&lt;epname&gt;[^\/]+?))?$')  openb 
from django.db import models  class ArticleBase(models.Model):     title = models.CharField()     author = models.CharField()     # Store the actual class name.     class_name = models.CharField()      # Define save to make sure class_name is set.     def save(self *args **kwargs):         self.class_name = self.__class__.__name__         super(ArticleBase self).save(*args **kwargs)      # Multi-table inheritance defines an attribute to fetch the child     # from a parent instance given the lower case subclass name.     def get_child(self):         return getattr(self self.class_name.lower())      # If indeed you really need the class.     def get_child_class(self):         return self.get_child().__class__      # Check the type against a subclass name or a subclass.     # For instance 'if article.child_is(News):'     # or 'if article.child_is("News"):'.     def child_is(self cls):         if isinstance(cls basestring):             return cls.lower() == self.class_name.lower()         else:             return self.get_child_class()  == cls  class Review(ArticleBase):     rating = models.IntegerField()  class News(ArticleBase):     source = models.CharField()  def __unicode__(self)     return self.get_child().__unicode__()  __unicode__ __unicode__ 
(\w+\).s(\d+)\.e(\d+)  (?P&lt;showname&gt;\w+\).s(?P&lt;seasonnumber&gt;\d+)\.e(?P&lt;episodenumber&gt;\d+)  startingepisodenumber endingepisodenumber showname.s01e01-03 (?P&lt;showname&gt;\w+\)\.s(?P&lt;seasonnumber&gt;\d+)\.e(?P&lt;startingepisodenumber&gt;\d+)-(?P&lt;endingepisodenumber&gt;e\d+)  episodenumber\d+ episodenumber1 episodenumber2 (?P&lt;showname&gt;\w+\)\. s(?P&lt;seasonnumber&gt;\d+)\. e(?P&lt;episodenumber1&gt;\d+) e(?P&lt;episodenumber2&gt;\d+) e(?P&lt;episodenumber3&gt;\d+)  e01 show.s01e01e03e04 starting/endingepisodenumber episodenumber\d+ s01e23e24...e27 
__import__ __import__ def call assert print import this &gt;&gt;&gt; sys.stdout print 2to3 print print print print __print__ __print__ &gt;&gt; myfile print print 
print MyTestCase.suite # &lt;unbound method MyTestCase.suite&gt;  MyTestCase.run print MyTestCase.run # &lt;unbound method MyTestCase.run&gt;  suite run MyTestCase.run() # ?  run self suite run suite import unittest  def average(values):     return sum(values) / len(values)  class MyTestCase(unittest.TestCase):     def testFoo(self):         self.assertEqual(average([10100])55)      def testBar(self):         self.assertEqual(average([11])11)      def testBaz(self):         self.assertEqual(average([2020])20)  def suite():     suite = unittest.TestSuite()     suite.addTest(MyTestCase('testFoo'))     suite.addTest(MyTestCase('testBar'))     suite.addTest(MyTestCase('testBaz'))     return suite  print suite() # &lt;unittest.TestSuite tests=[&lt;__main__.MyTestCase testMethod=testFoo&gt; &lt;__main__.MyTestCase testMethod=testBar&gt; &lt;__main__.MyTestCase testMethod=testBaz&gt;]&gt;  MyTestCase.suite() suite self self self static @staticmethod def suite():     suite = unittest.TestSuite()     suite.addTest(MyTestCase('testFoo'))     suite.addTest(MyTestCase('testBar'))     suite.addTest(MyTestCase('testBaz'))     return suite  print MyTestCase.suite # &lt;function suite at 0x...&gt;  MyTestCase.suite() if __name__ == '__main__':     s = MyTestCase.suite()     unittest.TextTestRunner().run(s) # Ran 3 tests in 0.000s OK  
@thisonetoo 
def lineKey (line):     keyStr rest = line.split(' ' 1)     a b = keyStr.split('/' 1)     return (a int(b))  sorted(lines key=lineKey)  
latest_poll_list object object_list latest_poll_list object_list poll object 
import pythoncom  class HelloWorld:     _reg_clsctx_ = pythoncom.CLSCTX_LOCAL_SERVER     _reg_clsid_ = "{B83DD222-7750-413D-A9AD-01B37021B24B}"     _reg_desc_ = "Python Test COM Server"     _reg_progid_ = "Python.TestServer"     _public_methods_ = ['Hello']     _public_attrs_ = ['softspace' 'noCalls']     _readonly_attrs_ = ['noCalls']      def __init__(self):         self.softspace = 1         self.noCalls = 0      def Hello(self who):         self.noCalls = self.noCalls + 1         # insert "softspace" number of spaces         return "Hello" + " " * self.softspace + str(who)  if __name__ == '__main__':     if '--register' in sys.argv[1:]  or '--unregister' in sys.argv[1:]:         import win32com.server.register         win32com.server.register.UseCommandLine(HelloWorld)     else:         # start the server.         from win32com.server import localserver         localserver.serve('B83DD222-7750-413D-A9AD-01B37021B24B')  
dat = mlab.csv2rec(args[0] delimiter=' ') m_Obsr = dat.is_observed == 1 m_ZeroScale = dat[m_Obsr].scale_mean &lt; 0.01 the_copy = dat[m_Obsr][m_ZeroScale]  for d in the_copy:     d.scale_mean = 1.0  newFile = args[0] + ".no-zero-scale" mlab.rec2csv(the_copy newFile delimiter=' ')  
import types if not isinstance(arg types.StringTypes):  class MyString(str):     pass  isinstance(MyString("  ") types.StringTypes) # true  StringTypes basestring isinstance str (str bytes unicode) six 
dict class MyDict(dict):     def __getitem__(self key):         if key == 'density':            return self['mass'] / self['volume']         else:             return dict.__getitem__(selfkey)     def keys(self):         return ['density'] + dict.keys(self)  x = MyDict() x['mass'] = 1.0 x['volume'] = 0.5  print x  print x.keys()  print x['density']  x['mass'] = 2.0  print x['density']  {'volume': 0.5 'mass': 1.0} ['density' 'volume' 'mass'] 2.0 4.0  
collections.defaultdict from collections import defaultdict  LofD = [{'name': 'johnny' 'surname': 'smith' 'age': 53}  {'name': 'johnny' 'surname': 'ryan' 'age': 13}  {'name': 'jakob' 'surname': 'smith' 'age': 27}  {'name': 'aaron' 'surname': 'specter' 'age': 22}  {'name': 'max' 'surname': 'headroom' 'age': 108} ]  def counters():   return defaultdict(int)  def freqs(LofD):   r = defaultdict(counters)   for d in LofD:     for k v in d.items():       r[k][v] += 1   return dict((k dict(v)) for k v in r.items())  print freqs(LofD)  {'age': {27: 1 108: 1 53: 1 22: 1 13: 1} 'surname': {'headroom': 1 'smith': 2 'specter': 1 'ryan': 1} 'name': {'jakob': 1 'max': 1 'aaron': 1 'johnny': 2}}  
import spidermonkey  def loadfile(fname):     return open(fname).read()  rt = spidermonkey.Runtime() cx = rt.new_context() cx.add_global("loadfile" loadfile) ret = cx.execute('var contents = loadfile("foo.js"); eval(contents);')  
random.choice([k for k in d for x in d[k]])  
from grabbers.items import FeedItem  class StoreFeedPost(object):      def process_item(self domain item):         if isinstance(item FeedItem):             #process it...          return item  from scrapy.item import ScrapedItem  class FeedItem(ScrapedItem):     pass  
.py __all__ __init__.py from os.path import dirname basename isfile join import glob modules = glob.glob(join(dirname(__file__) "*.py")) __all__ = [ basename(f)[:-3] for f in modules if isfile(f) and not f.endswith('__init__.py')]  
def __init__(self):     self.foo = 5  Base foo Base foo super() foobar = Derived()  __init__() self.foo = 5  Derived self.foo.fset(5)  self._foo = 5 return 1 + self._foo  self.foo Base _foo @foo.setter 
scriptA.py | scriptB.py  scriptA.py scriptB.py scriptB.py scriptA.py scriptA.py scriptB.py scriptA.py scriptB.py json.dump( {} sys.stdout ) pickle.dump( {} sys.stdout ) json.load( sys.stdin ) pickle.load( sys.stdin ) 
__import__('messages_en' globals=globals())  __name__ __import__('messages_en' globals={"__name__": __name__})  
to_import_from.py to_import_from.py to_import_from.py class InstrumentBase(object):     def external_method(self arg1 arg2):         if self.flag:             ...  main_module.py import to_import_from  class Instrument(to_import_from.InstrumentBase):     def __init__(self):         ...  
reputation 
print str import sys; print sys.stdout.encoding print repr(str) print str \python26\python hockey.py cp850 \python26\python hockey.py | more  \python26\python hockey.py &gt;hockey.txt  None C:\junk&gt;\python26\python hockey.py &gt;hockey.txt Traceback (most recent call last):   File "hockey.py" line 18 in &lt;module&gt;     print str UnicodeEncodeError: 'ascii' codec can't encode character u'\xe4' in position 2: ordinal not in range(128)  
''.join(list_of_strings)  
SELECT id table_name ts_rank_cd(body query) AS rank     FROM search_view to_tsquery('search&amp;words') query     WHERE query @@ body     ORDER BY rank DESC     LIMIT 10;  
import re DATA = "Hey you - what are you doing here!?" print re.findall(r"[\w']+" DATA) # Prints ['Hey' 'you' 'what' 'are' 'you' 'doing' 'here']  
&gt;&gt;&gt; n = 23 &gt;&gt;&gt; a = [nn] &gt;&gt;&gt; print id(n) id(a[0]) id(a[1]) 8402048 8402048 8402048 &gt;&gt;&gt; n = 45 &gt;&gt;&gt; print id(n) id(a[0]) id(a[1]) 8401784 8402048 8402048  a n n a array.array array.array('h') list arr id(v) array.array 2**64 2**64 
d1 = {'a': 1 'b': 2} d2 = {'a': 1} l = [d1 d2 d1 d2 d1 d2] for d in l:     d.pop('b'None) print l  
SET TEXTSIZE 2147483647 /etc/freetds/freetds.conf cur.execute('SET TEXTSIZE 2147483647 SELECT myimage FROM testing WHERE id = 1')  TEXTSIZE text image set TEXTSIZE T-SQL #!/usr/bin/env python # -*- coding: utf-8 -*-  import pyodbc import urllib2  odbcstring = "SERVER=10.32.42.69;UID=sa;PWD=secret;DATABASE=Common;DRIVER=FreeTDS" con = pyodbc.connect(odbcstring) cur = con.cursor()  cur.execute(""" IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES       WHERE TABLE_NAME = 'testing')    DROP TABLE testing """)  cur.execute(''' CREATE TABLE testing (     id INTEGER NOT NULL IDENTITY(11)      myimage IMAGE NULL     PRIMARY KEY (id) )     ''')  con.commit() cur = con.cursor() url = 'http://www.forestwander.com/wp-content/original/2009_02/west-virginia-mountains.jpg' data = urllib2.urlopen(url).read()  sql = "INSERT INTO testing (myimage) VALUES (?)" cur.execute(sql (pyodbc.Binary(data))) con.commit()  cur.execute('SELECT DATALENGTH(myimage) FROM testing WHERE id = 1') data_inside = cur.fetchone()[0] assert data_inside == len(data)  cur.execute('SET TEXTSIZE 2147483647 SELECT myimage FROM testing WHERE id = 1') result = cur.fetchone() returned_data = str(result[0]) print 'Original: %d; Returned; %d' % (len(data) len(returned_data)) assert data == returned_data  
from decorator import decorator def substitute_args(arg_sub_dict):   @decorator   def wrapper(fun arg):     new_arg = arg_sub_dict.get(arg arg)     return fun(new_arg)   return wrapper  substitute_args decorator def substitute_args(arg_sub_dict):   def my_decorator(fun):     def wrapper(arg):       new_arg = arg_sub_dict.get(arg arg)       return fun(new_arg)     # magic to update __name__ etc.     return wrapper   return my_decorator  @substitute_args({}) # this function is called and return value is the decorator def f(x):   return x # that (anonymous) decorator is applied to f  def f(x):   return x f = substitude_args({})(f) # notice the double call  
for single_date in (start_date + timedelta(n) for n in range(day_count)):     print ...  from datetime import timedelta date  def daterange(start_date end_date):     for n in range(int((end_date - start_date).days)):         yield start_date + timedelta(n)  start_date = date(2013 1 1) end_date = date(2015 6 2) for single_date in daterange(start_date end_date):     print(single_date.strftime(&quot;%Y-%m-%d&quot;))  range() end_date range() 
import subprocess  def php(script_path):     p = subprocess.Popen(['php' script_path] stdout=subprocess.PIPE)     result = p.communicate()[0]     return result  # YOUR CODE BELOW: page_html = "&lt;h1&gt;News and Updates&lt;/h1&gt;" news_script_output = php("news-generator.php")  print page_html + news_script_output  
type(obj) type.__class__ &gt;&gt;&gt; class a(object): ...     pass ... &gt;&gt;&gt; class b(a): ...     pass ... &gt;&gt;&gt; class c: ...     pass ... &gt;&gt;&gt; ai=a() &gt;&gt;&gt; bi=b() &gt;&gt;&gt; ci=c() &gt;&gt;&gt; type(ai) is ai.__class__ True &gt;&gt;&gt; type(bi) is bi.__class__ True &gt;&gt;&gt; type(ci) is ci.__class__ False  
__call__ mod_call &lt;type 'module'&gt; 
__lt__ class ComparableMixin:   def __eq__(self other):     return not self&lt;other and not other&lt;self   def __ne__(self other):     return self&lt;other or other&lt;self   def __gt__(self other):     return other&lt;self   def __ge__(self other):     return not self&lt;other   def __le__(self other):     return not other&lt;self  __lt__ __eq__ __ne__ dict __ne__ def __ne__(self other):   return not self == other  &lt; __cmp__ __lt__ __key__ class KeyedMixin:   def __lt__(self other):     return self.__key__() &lt; other.__key__()   # and so on for other comparators as above plus:   def __hash__(self):     return hash(self.__key__())  __key__ 
runcall(main self.argv)  
type: //map values:   type: //rec   required:     exec: //str   optional:     aliases:       type: //arr       contents: //str       length: {min: 1 max: 10}     filter:       type: //rec       optional:         sms: //str         email: //str         all: //str  
x = raw_input('How many numbers do you want to play?') for i in xrange(int(x)):    print random.randrange(181)  xrange int raw_input randrange 
from __future__ import division from math import ceil  def make_combos(max_valtarget_sumn_cells):     combos = []     # The highest possible value of the next cell is whatever is      # largest of the max_val or the target_sum minus the number      # of remaining cells (as you can't enter 0).     highest = min(max_val target_sum - n_cells + 1)     # The lowest is the lowest number you can have that will add upp to      # target_sum if you multiply it with n_cells.     lowest = int(ceil(target_sum/n_cells))     for x in range(highest lowest-1 -1):         if n_cells == 1: # This is the last cell no more recursion.             combos.append((x))             break         # Recurse to get the next cell:         # Set the max to x (or we'll get duplicates like         # (6321) and (6231) which is pointless.         # Reduce the target_sum with x to keep the sum correct.         # Reduce the number of cells with 1.         for combo in make_combos(x target_sum-x n_cells-1):             combos.append((x)+combo)     return combos  if __name__ == '__main__':     import pprint     # And by using pprint the output gets easier to read     pprint.pprint(make_combos( 6124))  max_val=8 target_sum=20 and n_cells=5 (86411) from __future__ import division from math import ceil  def make_combos(max_valtarget_sumn_cells):     highest = min(max_val target_sum - n_cells + 1)     lowest = int(ceil(target_sum/n_cells))     for x in xrange(highest lowest-1 -1):         if n_cells == 1:             yield (x)             break         for combo in make_combos(x target_sum-x n_cells-1):             yield (x)+combo  if __name__ == '__main__':     import pprint     pprint.pprint(list(make_combos( 6124)))  
... t = 'application/xml'; if encoding != None:   t += '; charset="%s"' % encoding ...  
for sublist in thelist:   sublist.insert(0 9)  list mylist thelist list for sublist in thelist:   sublist[0:0] = 8 9  sublist[0:0] sublist 
2.* 3.* 3.* key=lambda x: str(type(x)) sort &gt;&gt;&gt; decimal.Decimal('2.0') &gt; 1.2 Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: unorderable types: Decimal() &gt; float()  2.* '%.2f' % x repr(x) def to_decimal(float_price):     return decimal.Decimal('%.2f' % float_price)  
NotImplemented False x.__op__(y) y.__rop__(x) __rop__() __rop__() __op__() __op__() 
# To fetch and iterate over every Childs entity that refers to the # Parent instance p: for child in p.children: # ...  
Framebuffer XOrigin YOrigin = display.getFrameBuffer(ScreenId)  
[x for x in a + b if (a + b).count(x) == 1]  list(set(a).symmetric_difference(set(b)))  list(set(a) ^ set(b))  
import exceptions l=[] try:     l[1] except exceptions.IndexErrore:     print e  try:     l[1] except IndexErrore:     print e  import os os.myerror = exceptions.IndexError try:     l[1] except os.myerrore:     print e  
f = File.new("tracklist.txt" "r") s = f.read s.scan(/mmc.+?mp3/) do |track|   puts track end  s /mmc.+?mp3/ String#scan 
&gt;&gt;&gt; "Return value: %c%c%c" % (567) 'Return value: \x05\x06\x07'  &gt;&gt;&gt; import struct &gt;&gt;&gt; foo bar kaka = struct.unpack("BBB" '\x06\x06\x06') &gt;&gt;&gt; struct.pack("BBB" foo bar+1 kaka+5) '\x06\x07\x0b'  
sys stdin Foo(String name int size) {  private final String name; private final int size;  public String getName() {   return name; }  public int getSize() {   return size; }  @Override public boolean equals(Object that) {   return this == that       || (that instanceof Foo &amp;&amp; equals((Foo) that)); }  public boolean equals(Foo that) {   return Objects.equal(getName() that.getName())       &amp;&amp; this.getSize() == that.getSize(); }  @Override public int hashCode() {   return Objects.hashCode(       getName()       getSize()); }  Foo(String name int size) {   this.name = Preconditions.checkNotNull(name);   this.size = size;  !jhelper.py rev tac 
# aesthetically (so YMMV) I think the code would be better if it were ... # (and I've asked some questions throughout)  j_map = {   90: [0] # prefer lists [] to tuples () I say...   52.62263: [0  72 144 216 288]   26.5651: [324 36 108 180 252]   10.8123: [288  0 72 144 216]    } # have a look at dict() in http://docs.python.org/tutorial/datastructures.html # to know what's going on here -- e.g. j_map['90'] is ['0']  # then the following is cleaner for j k in j_map.iteritems():   # first iteration j = '90' k=[0]   # second iteration j = '52.62263'' k= [0...288]   for b in k:     # fixed the ordering of these statements so this may actually work     cmd = "program_name -j %f -b %d" % (j b)       # where program_name is the program you're calling       # be wary of the printf-style %f formatting and       #     how program_name takes its input     print cmd     process = Popen(cmd shell=True stderr=STDOUT stdout=PIPE)     outputstring = process.communicate()[0]     outputlist = outputstring.splitlines()     blah = outputlist[53]  
content mimetype = renderer().render(data=dataset) return HttpResponse(content mimetype=mimetype)  format2renderer = dict(   xml=XMLRenderer   rss=RSSRenderer   # ...etc... )  renderer = format2renderer.get(format) if renderer is not None: ...  None 
numpy itertools def runs_of_ones(bits):   for bit group in itertools.groupby(bits):     if bit: yield sum(group)  def runs_of_ones_list(bits):   return [sum(g) for b g in itertools.groupby(bits) if b]  def runs_of_ones_array(bits):   # make sure all runs of ones are well-bounded   bounded = numpy.hstack(([0] bits [0]))   # get 1 at run starts and -1 at run ends   difs = numpy.diff(bounded)   run_starts = numpy.where(difs &gt; 0)   run_ends = numpy.where(difs &lt; 0)   return run_ends - run_starts  
[myTri.a myTri.b ...] 0 [0 0 0 0 0 0] sample[0] myTri random.sample sample = random.sample(["a" "b" "c" "d" "e" "f"] 3)  setattr setattr(myTri "b" 72) myTri.b = 72 setattr(myTri sample[0] random.randint(1 100)) setattr(myTri sample[1] random.randint(1 100)) setattr(myTri sample[2] random.randint(1 100))  
zap.co.it co.it zap.co.uk co.uk zap.co.uk 
import re fileinput  def main():   for line in fileinput.input():     process = False     for nope in ('BEGIN TRANSACTION''COMMIT'                  'sqlite_sequence''CREATE UNIQUE INDEX'):       if nope in line: break     else:       process = True     if not process: continue     m = re.search('CREATE TABLE "([a-z_]*)"(.*)' line)     if m:       name sub = m.groups()       line = '''DROP TABLE IF EXISTS %(name)s; CREATE TABLE IF NOT EXISTS %(name)s%(sub)s '''       line = line % dict(name=name sub=sub)     else:       m = re.search('INSERT INTO "([a-z_]*)"(.*)' line)       if m:         line = 'INSERT INTO %s%s\n' % m.groups()         line = line.replace('"' r'\"')         line = line.replace('"' "'")     line = re.sub(r"([^'])'t'(.)" r"\1THIS_IS_TRUE\2" line)     line = line.replace('THIS_IS_TRUE' '1')     line = re.sub(r"([^'])'f'(.)" r"\1THIS_IS_FALSE\2" line)     line = line.replace('THIS_IS_FALSE' '0')     line = line.replace('AUTOINCREMENT' 'AUTO_INCREMENT')     print line  main()  
&gt;&gt;&gt; import tkMessageBox Tkinter &gt;&gt;&gt; Tkinter.Tk().withdraw() &gt;&gt;&gt; tkMessageBox.askquestion( ...     title="Symbol Display" ...     message="Is the symbol visible on the console")  
unittest.main() fast = TestSuite() fast.addTests( TestFastThis ) fast.addTests( TestFastThat )  slow = TestSuite() slow.addTests( TestSlowAnother ) slow.addTests( TestSlowSomeMore )  alltests = unittest.TestSuite([fast slow])  sys.argv[1] if __name__ == "__main__":     suite = eval(sys.argv[1])  # Be careful with this line!     unittest.TextTestRunner().run(suite)  
from xml.etree import ElementTree # part of python distribution from elementtree import SimpleXMLTreeBuilder # part of your codebase ElementTree.XMLTreeBuilder = SimpleXMLTreeBuilder.TreeBuilder  
all() def is_odd(x):      return x%2==1  result = all(is_odd(x) for x in [1357])  inject reduce() result = reduce(lambda xy: x and y%2==1 [1357] True)  all() False reduce 
sub def encode_string_with_links(unencoded_string):   return URL_REGEX.sub(r'&lt;a href="\1"&gt;\1&lt;/a&gt;' unencoded_string)  URL_REGEX URL_REGEX = re.compile(r'''((?:mailto:|ftp://|http://)[^ &lt;&gt;'"{}|\\^`[\]]*)''')  
zip myZip = list( zip ( funcTriple (1 3 5) ) )  
import tw.forms f = tw.forms.TableForm(fields=[tw.forms.CheckBoxTable("name"options=(("foo")("bar")))])  f(value={"name":{"foo":True"bar":False}}) &gt;&gt;&gt; u'&lt;form xmlns="http://www.w3.org/1999/xhtml" action="" method="post" class="tableform"&gt;\n    &lt;table border="0" cellspacing="0" cellpadding="2"&gt;\n&lt;tr id="name.container" class="even" title=""&gt;\n            &lt;td class="labelcol"&gt;\n                &lt;label id="name.label" for="name" class="fieldlabel"&gt;Name&lt;/label&gt;\n            &lt;/td&gt;\n            &lt;td class="fieldcol"&gt;\n                &lt;table id="name" class="checkboxtable"&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n     &lt;input id="name_0" value="foo" name="name" type="checkbox" checked="checked" /&gt;\n            &lt;label for="name_0"&gt;foo&lt;/label&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;&lt;tr&gt;\n        &lt;td&gt;\n            &lt;input id="name_1" value="bar" name="name" type="checkbox" /&gt;\n            &lt;label for="name_1"&gt;bar&lt;/label&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n &lt;/tbody&gt;\n&lt;/table&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;&lt;tr id="submit.container" class="odd" title=""&gt;\n            &lt;td class="labelcol"&gt;\n            &lt;/td&gt;\n        &lt;td class="fieldcol"&gt;\n                &lt;input type="submit" class="submitbutton" value="Submit" /&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/form&gt;'  
class NameStrength {     public String name;     public String strength; }  Map&lt;Integer NameStrength&gt; nodesMap = new HashMap&lt;Integer NameStrength&gt;();  for (NameStrength nameStrength : nodesMap.values()) {}  for (Entry&lt;Integer NameStrength&gt; entry : nodesMap.entrySet()) {}  
counter 
__dict__ object __slots__ __dict__ object 
import threading  class Foo(object):     instance_count = 0  def inc_by(n):     for i in xrange(n):         Foo.instance_count += 1  threads = [threading.Thread(target=inc_by args=(100000)) for thread_nr in xrange(100)] for thread in threads: thread.start() for thread in threads: thread.join()  print(Foo.instance_count) # Expected 10M for threadsafe ops I get around 5M  Foo.lock = threading.Lock()  def interlocked_inc(n):     for i in xrange(n):         with Foo.lock:             Foo.instance_count += 1  threads = [threading.Thread(target=interlocked_inc args=(100000)) for thread_nr in xrange(100)] for thread in threads: thread.start() for thread in threads: thread.join()  print(Foo.instance_count)  
score += child.points*math.pow(.1 get_ancestors(child)) score += get_score(child)  score += get_score(child)*.1  def get_score(player):     score = player.points     for child in children:         score += get_score(child)*.1     return score  
g.next() g.__next__() __init__() __del__() .next() g.__next__() next(g) func_name __name__ 
# SConstruct SConscript('SConscript' build_dir='build' src='.')  # SConscript Program('main.c')  
importHook iu.py level= svn log -r HEAD  r685 | giovannibajo | 2009-06-30 05:19:59 -0700 (Tue 30 Jun 2009) | 3 lines  Preliminar support for creating a bundle on Mac OSX. Yet to be integrated into Makespec.py.  svn up 
response = HttpResponse(mimetype="image/png") img.save(response "PNG") return response  
id() is  if obj1 is obj2:       # Objects are identical.  
if config:     cherrypy.config.update(config)  tree.mount(root script_name config)  if hasattr(engine "signal_handler"):     engine.signal_handler.subscribe() if hasattr(engine "console_control_handler"):     engine.console_control_handler.subscribe()  engine.start() engine.block()  Thread(target=cherrypy.quickstart args=[Root()]).start()  cherrypy.tree.mount(Root()) cherrypy.engine.start()  
SCM_RIGHTS multiprocessing multiprocessing file 
if (self.a != 0) and (self.b != 0) :  &amp; &amp;&amp; if 0 not in (self.a self.b) :  "foo" in ("foo" 1 c etc) "foo" in ["foo" 1 c etc] "a" in "ago" "foo" in {"foo" : "bar"} 0 not in (self.a self.b self.c)  (self.a != 0) and (self.b != 0) and (self.c != 0)   
(r'^media/(?P&lt;path&gt;.*)$' 'django.views.static.serve'     {'document_root': '/media'})  (r'^media/(?P&lt;path&gt;.*)$' 'django.views.static.serve'     {'document_root': settings.MEDIA_ROOT})  
DATA = {"records": [{"key1": "AAA" "key2": "BBB" "key3": "CCC" "key4": "AAA"}]}  for name datalist in DATA.iteritems():  # Or items() in Python 3.x     for datadict in datalist:         for key value in datadict.items():             if value == "AAA":                 datadict[key] = "XXX"  print (DATA) # Prints {'records': [{'key3': 'CCC' 'key2': 'BBB' 'key1': 'XXX' 'key4': 'XXX'}]}  
left = 2407 top = 804 width = 300 height = 200 box = (left top left+width top+height) area = img.crop(box)  
A SIZE A A class ClassWithSize(type):     def __init__(cls name bases attrs):         if 'SIZE' not in attrs:             raise NotImplementedError('The "%s" class does not implement a "SIZE" attribute' % name)         super(ClassWithSize cls).__init__(name bases attrs)  class A(object):     __metaclass__ = ClassWithSize      SIZE = 5     def getsize(self):         return self.SIZE  class B(A):     SIZE = 6  class C(A):     pass  C 
import urllib2 proxy_handler = urllib2.ProxyHandler({'http': 'http://yourcorporateproxy:12345/'}) proxy_auth_handler = urllib2.HTTPBasicAuthHandler() proxy_auth_handler.add_password('realm' 'host' 'username' 'password')  opener = urllib2.build_opener(proxy_handler proxy_auth_handler) opener.open('http://www.stackoverflow.com')  
[filename for path in dirs for filename in os.listdir(path)]  
if sys.stdout.isatty():     # You're running in a real terminal else:     # You're being piped or redirected  
class Order(models.Model):   customer = models.foreignKey(Customer)   total = models.charField(max_length=10)   has_shipped = models.booleanField()   products = models.ManyToManyField(Product)  
struct_time datetime.utctimetuple() calendar.timegm() calendar.timegm(parseddate.utctimetuple())  utctimetuple() 
next In [3]: (5*x for x in xrange(24)).next() Out[3]: 10  
print("Hello World!")  print 
self.response.headers['Location'] = urllib.quote(absolute_url.encode("utf-8"))  
import sys sys.exc_info()  
(add-to-list 'load-path "~/.emacs.d/site-lisp/Pymacs-0.23")  
    menuBar = wx.MenuBar()     fileMenu=wx.Menu()     tempitem = fileMenu.Append(-1"X")       # !!!     tempitem.SetBitmap(getBmp())             # !!!     item = fileMenu.Append(wx.ID_NEW "New")     fileMenu.Remove(tempitem.GetId())        # !!!     item.SetBitmap(getBmp())     item = fileMenu.Append(wx.ID_OPEN "Open")     item.SetBitmap(getBmp())     item = fileMenu.Append(wx.ID_SAVE "Save")     item.SetBitmap(getBmp())     menuBar.Append(fileMenu "File")     self.SetMenuBar(menuBar)   
import ctypes  winHttp = ctypes.windll.LoadLibrary("Winhttp.dll")  WINHTTP_ACCESS_TYPE_DEFAULT_PROXY=0 WINHTTP_NO_PROXY_NAME=WINHTTP_NO_PROXY_BYPASS=0 WINHTTP_FLAG_ASYNC=0x10000000 # http://msdn.microsoft.com/en-us/library/aa384098(VS.85).aspx HINTERNET = winHttp.WinHttpOpen("PyWin32" WINHTTP_ACCESS_TYPE_DEFAULT_PROXY WINHTTP_NO_PROXY_NAME WINHTTP_NO_PROXY_BYPASS WINHTTP_FLAG_ASYNC)  print HINTERNET  
def data(self role):     t = QTableWidgetItem.data(self role)     ...  def __init__(self parent=None):     super(MyDialog self).__init__(parent)      self.table = QTableWidget()     self.acell = MyCell()     self.table.setItemPrototype(self.acell)  
x :: t -&gt; B  B apply apply :: (t -&gt; B) -&gt; B  
^bar$ ^.*(?&lt;!\.ml)$ 
{% extends "basic/layout.html" %} 
import ctypes import ctypes.wintypes  winHttp = ctypes.windll.LoadLibrary("Winhttp.dll")  # http://msdn.microsoft.com/en-us/library/aa384098(VS.85).aspx # first get a handle to HTTP session WINHTTP_ACCESS_TYPE_DEFAULT_PROXY=0 WINHTTP_NO_PROXY_NAME=WINHTTP_NO_PROXY_BYPASS=0 WINHTTP_FLAG_ASYNC=0x10000000 HINTERNET = winHttp.WinHttpOpen("PyWin32" WINHTTP_ACCESS_TYPE_DEFAULT_PROXY WINHTTP_NO_PROXY_NAME WINHTTP_NO_PROXY_BYPASS WINHTTP_FLAG_ASYNC) print HINTERNET  # now get proxy using HTTP session # http://msdn.microsoft.com/en-us/library/aa384097(VS.85).aspx """ BOOL WinHttpGetProxyForUrl(   __in   HINTERNET hSession   __in   LPCWSTR lpcwszUrl   __in   WINHTTP_AUTOPROXY_OPTIONS *pAutoProxyOptions   __out  WINHTTP_PROXY_INFO *pProxyInfo ); """ # create C structure for WINHTTP_AUTOPROXY_OPTIONS #http://msdn.microsoft.com/en-us/library/aa384123(VS.85).aspx """ typedef struct {   DWORD   dwFlags;   DWORD   dwAutoDetectFlags;   LPCWSTR lpszAutoConfigUrl;   LPVOID  lpvReserved;   DWORD   dwReserved;   BOOL    fAutoLogonIfChallenged; } WINHTTP_AUTOPROXY_OPTIONS; """ class WINHTTP_AUTOPROXY_OPTIONS(ctypes.Structure):     _fields_ = [("dwFlags" ctypes.wintypes.DWORD)                 ("dwAutoDetectFlags" ctypes.wintypes.DWORD)                 ("lpszAutoConfigUrl" ctypes.wintypes.LPCWSTR)                 ("lpvReserved" ctypes.c_void_p )                 ("dwReserved" ctypes.wintypes.DWORD)                 ("fAutoLogonIfChallenged"ctypes.wintypes.BOOL)]  WINHTTP_AUTOPROXY_AUTO_DETECT = 0x00000001; WINHTTP_AUTO_DETECT_TYPE_DHCP = 0x00000001; WINHTTP_AUTO_DETECT_TYPE_DNS_A = 0x00000002; options = WINHTTP_AUTOPROXY_OPTIONS() options.dwFlags = WINHTTP_AUTOPROXY_AUTO_DETECT options.dwAutoDetectFlags = WINHTTP_AUTO_DETECT_TYPE_DHCP|WINHTTP_AUTO_DETECT_TYPE_DNS_A options.lpszAutoConfigUrl = 0 options.fAutoLogonIfChallenged = False  # create C structure for WINHTTP_AUTOPROXY_OPTIONS # http://msdn.microsoft.com/en-us/library/aa383912(VS.85).aspx """ struct WINHTTP_PROXY_INFO {   DWORD  dwAccessType;   LPWSTR lpszProxy;   LPWSTR lpszProxyBypass; }; """ class WINHTTP_PROXY_INFO(ctypes.Structure):     _fields_ = [("dwAccessType" ctypes.wintypes.DWORD)                 ("lpszProxy" ctypes.wintypes.LPCWSTR)                 ("lpszProxyBypass" ctypes.wintypes.LPCWSTR)]  info = WINHTTP_PROXY_INFO()  ret = winHttp.WinHttpGetProxyForUrl(HINTERNET "http://www.google.com" ctypes.pointer(options) ctypes.pointer(info) ) print "proxy success?"ret if not ret:     # some error lets see what is that?     import win32api     import win32con     errorCode = win32api.GetLastError()     print "win32 Error:"errorCode     s = ""     print win32api.FormatMessage(errorCode)  print info.dwAccessType info.lpszProxy info.lpszProxyBypass  
&gt;&gt;&gt; Foo() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: cannot create 'foo.Foo' instances &gt;&gt;&gt; Foo.__new__(Foo) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: object.__new__(foo.Foo) is not safe use foo.Foo.__new__()  
cd /where/you/want/it; jar xf /path/to/jarfile.jar  jar 
any any(installWow(x 'installed by me') for x in wowList)  installWow None False any or None False False None True 1 
master = list(daily) random.shuffle(master)  random.shuffle(endofday); master.extend(endofday) def random_mix(seq_a seq_b):     iters = [iter(seq_a) iter(seq_b)]     while True:         it = random.choice(iters)         try: yield it.next()         except StopIteration:             iters.remove(it)             it = iters[0]             for x in it: yield x  master = list(random_mix(master projects)) random.choice def random_mix_rp(seq_a seq_b):     iters = [iter(seq_a) iter(seq_b)]     lens = [len(seq_a) len(seq_b)]     while True:         r = random.randrange(sum(lens))         itindex = r &lt; lens[0]         it = iters[itindex]         lens[itindex] -= 1          try: yield it.next()         except StopIteration:             iters.remove(it)             it = iters[0]             for x in it: yield x  def random_mix_rp1(seq_a seq_b):     iters = [iter(seq_a) iter(seq_b)]     lens = [len(seq_a) len(seq_b)]     while all(lens):         r = random.randrange(sum(lens))         itindex = r &lt; lens[0]         it = iters[itindex]         lens[itindex] -= 1         yield it.next()     for it in iters:         for x in it: yield x  
   def reload_module():        import file2        reload(file2)  
auto_id f = ContactForm(auto_id=False)  
class CommentForm(forms.Form):     comment = forms.CharField(widget=forms.Textarea() label='')  comment = new CommentForm()  
import urllib2  class HTTPNxBasicAuthHandler(urllib2.HTTPBasicAuthHandler):      def http_error_auth_reqed(self authreq host req headers):         # host may be an authority (without userinfo) or a URL with an         # authority         # XXX could be multiple headers         authreq = headers.get(authreq None)         if authreq:             mo = AbstractBasicAuthHandler.rx.search(authreq)             if mo:                 scheme realm = mo.groups()                 if scheme.lower() == 'nxbasic':                     return self.retry_http_basic_auth(host req realm)      def retry_http_basic_auth(self host req realm):         user pw = self.passwd.find_user_password(realm host)         if pw is not None:             raw = "%s:%s" % (user pw)             auth = 'NxBasic %s' % base64.b64encode(raw).strip()             if req.headers.get(self.auth_header None) == auth:                 return None             req.add_header(self.auth_header auth)             return self.parent.open(req)         else:             return None  
&gt;&gt;&gt; class Foo: ...     def bar(hello=None): ...          return hello ...     def baz(world=None): ...          return baz ... &gt;&gt;&gt; import inspect &gt;&gt;&gt; members = inspect.getmembers(Foo) &gt;&gt;&gt; print members [('__doc__' None) ('__module__' '__main__') ('bar' &lt;unbound method Foo.bar&gt; ) ('baz' &lt;unbound method Foo.baz&gt;)] &gt;&gt;&gt; inspect.getargspec(members[2][1]) (['hello'] None None (None)) &gt;&gt;&gt; inspect.getargspec(members[3][1]) (['world'] None None (None))  
cursor.execute("UPDATE table_name SET field1=%s ... field10=%s WHERE id=%s" (var1... var10 id))  
D = project(ACAB) AD = vsub(DA)  AD = project(ACAB) D = vadd(AAD)  
In [1]: def grp(pat txt):     ...:     r = re.search(pat txt)    ...:     return r.group(0) if r else '&amp;'  In [2]: y Out[2]:  ['random text random text can be anything blabla %A blabla'  'random text random text can be anything blabla %D blabla'  'random text random text can be anything blabla blabla %F'  'random text random text can be anything blabla blabla'  'random text random text %C can be anything blabla blabla']  In [3]: y.sort(key=lambda l: grp("%\w" l))  In [4]: y Out[4]:  ['random text random text can be anything blabla %A blabla'  'random text random text %C can be anything blabla blabla'  'random text random text can be anything blabla %D blabla'  'random text random text can be anything blabla blabla %F'  'random text random text can be anything blabla blabla']  
python2.6 #!/usr/bin/python2.6  
file.__init__ write print file.write sys.stdout file print write object file print 
from PyQt4.QtNetwork import QNetworkAccessManager from abpy import Filter adblockFilter = Filter(file("easylist.txt")) class MyNetworkAccessManager(QNetworkAccessManager):     def createRequest(self op request device=None):         url = request.url().toString()         doFilter = adblockFilter.match(url)         if doFilter:             return QNetworkAccessManager.createRequest(self self.GetOperation QNetworkRequest(QUrl()))         else:             QNetworkAccessManager.createRequest(self op request device) myNetworkAccessManager = MyNetworkAccessManager()  QWebView.page().setNetworkAccessManager(myNetworkAccessManager)  
&gt;&gt;&gt; simplejson.loads('{"a":1 "b":2}') {u'a': 1 u'b': 2} &gt;&gt;&gt; eval('{"a":1 "b":2}') {'a': 1 'b': 2}  &gt;&gt;&gt; simplejson.loads('{"X": "\uabcd"}') {u'X': u'\uabcd'} &gt;&gt;&gt; eval('{"X": "\uabcd"}') {'X': '\\uabcd'} &gt;&gt;&gt; simplejson.loads('{"X": "\uabcd"}') == eval('{"X": "\uabcd"}') False  &gt;&gt;&gt; simplejson.loads('[false true null]') [False True None] &gt;&gt;&gt; eval('[false true null]') Traceback (most recent call last):   File "&lt;interactive input&gt;" line 1 in &lt;module&gt;   File "&lt;string&gt;" line 1 in &lt;module&gt; NameError: name 'false' is not defined &gt;&gt;&gt;   
datetime 
using System;  using System.Collections.Generic;  using System.Linq;  using System.Text;  using System.Reflection;  namespace ConsoleApplication2  {      class Program      {         static void Main(string[] args)          {                Type pythonServer;               object pythonObject;               pythonServer = Type.GetTypeFromProgID("PythonDemos.Utilities");               pythonObject = Activator.CreateInstance(pythonServer);          }     } }   `  
APPNAME = "MyApp" import sys from os import path environ if sys.platform == 'darwin':     from AppKit import NSSearchPathForDirectoriesInDomains     # http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/Foundation/Miscellaneous/Foundation_Functions/Reference/reference.html#//apple_ref/c/func/NSSearchPathForDirectoriesInDomains     # NSApplicationSupportDirectory = 14     # NSUserDomainMask = 1     # True for expanding the tilde into a fully qualified path     appdata = path.join(NSSearchPathForDirectoriesInDomains(14 1 True)[0] APPNAME) elif sys.platform == 'win32':     appdata = path.join(environ['APPDATA'] APPNAME) else:     appdata = path.expanduser(path.join("~" "." + APPNAME))  
from a import * &gt;&gt;&gt; from a import * &gt;&gt;&gt; if name == "Michael" and age == 15: ...     print('Simple!') ... Simple!  
__init__ import asyncore socket from tlslite.api import *  s = open("./clientX509Cert.pem").read() x509 = X509() x509.parse(s) certChain = X509CertChain([x509])  s = open("./clientX509Key.pem").read() privateKey = parsePEMKey(s private=True)   class http_client(TLSAsyncDispatcherMixIn asyncore.dispatcher):     ac_in_buffer_size = 16384      def __init__(self host path):         asyncore.dispatcher.__init__(self)         self.create_socket(socket.AF_INET socket.SOCK_STREAM)         self.connect( (host 80) )          TLSAsyncDispatcherMixIn.__init__(self self.socket)         self.tlsConnection.ignoreAbruptClose = True         handshaker = self.tlsConnection.handshakeClientCert(             certChain=certChain             privateKey=privateKey             async=True)         self.setHandshakeOp(handshaker)          self.buffer = 'GET %s HTTP/1.0\r\n\r\n' % path      def handle_connect(self):         pass      def handle_close(self):         self.close()      def handle_read(self):         print self.recv(8192)      def writable(self):         return (len(self.buffer) &gt; 0)      def handle_write(self):         sent = self.send(self.buffer)         self.buffer = self.buffer[sent:]  c = http_client('www.readyhosting.com' '/')  asyncore.loop()  
import codecs users = codecs.open( "users-16.txt" "r" "utf-16" )  
for line in proc.stdout:     print("&gt;&gt;&gt; " + str(line.rstrip()))  while True:     line = proc.stdout.readline()     if not line:         break     print "&gt;&gt;&gt; " + line.rstrip()  
import csv writer = csv.writer(open("%s.csv" % filename "wb"))  values = (td.fetchText() for td in row) writer.writerow(values)  
def custom_view(request year foo):     context = RequestContext(request {'foo': year})     return render_to_response('my_template.tmpl' context)  NameError year 
val = func()  return val yield func() &lt;generator&gt; val val.next() func yield return val.next() __someFunc self.__someFunc().next() self.__someFunc() 
__nonzero__ class foo(object):     def __nonzero__( self) :         return self.bar % 2 == 0  def a(foo):     if foo:         print "spam"     else:         print "eggs"  def main():     myfoo = foo()     myfoo.bar = 3     a(myfoo)  if __name__ == "__main__":     main()  
eval exec ast.literal_eval eval node = ast.parse(source) node literal_eval compile ast.literal_eval eval exec eval getattr setattr globals() json 
process=subprocess.Popen([PathToProcess]stdin=subprocess.PIPEstdout=subprocess.PIPE); for i in xrange(StepsToComplete):     print "Forcing step # %s"%i     process.stdin.write("\n")     result=process.stdout.readline()  
RingBell 
sort(key=XXX) DATA = [     { 'name' : 'A' 'value' : '10.0' }     { 'name' : 'B' 'value' : '2.0' } ]  def get_attr(name):     def inner_func(o):         try:             rv = float(o[name])         except ValueError:             rv = o[name]         return rv     return inner_func  for attrname in ('name' 'value'):     DATA.sort(key=get_attr(attrname))     print "%r-sorted: %s" % (attrname DATA)  'name'-sorted: [{'name': 'A' 'value': '10.0'} {'name': 'B' 'value': '2.0'}] 'value'-sorted: [{'name': 'B' 'value': '2.0'} {'name': 'A' 'value': '10.0'}]  
import django.db.models.options as options  options.DEFAULT_NAMES = options.DEFAULT_NAMES + ('schema')  
&lt; &lt; == &amp;lt; 
class Label(db.Model)    name = db.StringProperty()     @property    def members(self):       return Task.gql("WHERE labels = :1" self.key())  class Task(db.Model)    title = db.StringProperty();    labels = db.ListProperty(db.Key)  foo_label = Label.gql("WHERE name = 'foo'").get() task1 = Task.gql("WHERE title = 'task 1'").get() if foo_label.key() not in task1.labels:   task1.labels.append(foo_label.key()) task1.put()  
LOGIN_URL settings.py urls.py from projectname.settings import LOGIN_URL  
import functools  def execonce(f):      @functools.wraps(f)     def donothing(*a **k):         pass      @functools.wraps(f)     def doit(self *a **k):         try:             return f(self *a **k)         finally:             setattr(self f.__name__ donothing)      return doit  
log = logging.getLogger(name) while some_condition:     try:         handler = make_handler(filename)         log.addHandler(handler)         # do something and log      finally:         log.removeHandler(handler)         handler.close()  
DeflateStream Block length does not match with its complement DeflateStream Deflater public Deflater(int level boolean nowrap) public Deflater(int level) public Deflater() uncompressed_string.encode('zlib')[2:-4] # does not work in Python 3.x  zlib.compress(uncompressed_string)[2:-4]  
timeit AmAir:stko aleax$ python -mtimeit -s'def isodd(x): x &amp; 1' 'isodd(9)' 1000000 loops best of 3: 0.446 usec per loop AmAir:stko aleax$ python -mtimeit -s'def isodd(x): x &amp; 1' 'isodd(10)' 1000000 loops best of 3: 0.443 usec per loop AmAir:stko aleax$ python -mtimeit -s'def isodd(x): x % 2' 'isodd(10)' 1000000 loops best of 3: 0.453 usec per loop AmAir:stko aleax$ python -mtimeit -s'def isodd(x): x % 2' 'isodd(9)' 1000000 loops best of 3: 0.461 usec per loop  &amp; % timeit timeit 
Node import sys  class Node(object):   def __init__(self title indent):     self.title = title     self.indent = indent     self.children = []     self.notes = []     self.parent = None   def __repr__(self):     return 'Node(%s %s %r %s)' % (         self.indent self.parent self.title self.notes)   def aspython(self):     result = dict(title=self.title children=topython(self.children))     if self.notes:       result['notes'] = self.notes     return result  def print_tree(node):   print ' ' * node.indent node.title   for subnode in node.children:     print_tree(subnode)   for note in node.notes:     print ' ' * node.indent 'Note:' note  def topython(nodelist):   return [node.aspython() for node in nodelist]  def lines_to_tree(lines):   nodes = []   for line in lines:     indent = len(line) - len(line.lstrip())     marker body = line.strip().split(None 1)     if marker == '*':       nodes.append(Node(body indent))     elif marker == '-':       nodes[-1].notes.append(body)     else:       print&gt;&gt;sys.stderr "Invalid marker %r" % marker    tree = Node('' -1)   curr = tree   for node in nodes:     while node.indent &lt;= curr.indent:       curr = curr.parent     node.parent = curr     curr.children.append(node)     curr = node    return tree   data = """\ * 1  * 1.1  * 1.2   - Note for 1.2 * 2 * 3 - Note for root """.splitlines()  def main():   tree = lines_to_tree(data)   print_tree(tree)   print   alist = topython(tree.children)   print alist  if __name__ == '__main__':   main()   1   1.1   1.2   Note: 1.2  2  3  Note: 3  [{'children': [{'children': [] 'title': '1.1'} {'notes': ['Note for 1.2'] 'children': [] 'title': '1.2'}] 'title': '1'} {'children': [] 'title': '2'} {'notes': ['Note for root'] 'children': [] 'title': '3'}]  notes 
glob &gt;&gt;&gt; import glob &gt;&gt;&gt; glob.glob('./[0-9].*') ['./1.gif' './2.txt'] &gt;&gt;&gt; glob.glob('*.gif') ['1.gif' 'card.gif'] &gt;&gt;&gt; glob.glob('?.gif') ['1.gif']  
operator OperatorFunctions = {     '+': operator.add     '-': operator.sub     '*': operator.mul     '/': operator.div     # etc }  for char in postfix_expression:     if char in OperatorFunctions:         stack.append(OperatorFunctions[char](stack.pop() stack.pop()))     else:         stack.append(char)  
def hasmethod(obj name):     return hasattr(obj name) and type(getattr(obj name)) == types.MethodType  
class Component(object):     def __init__(self **kwargs):         assert type(self) != Component "Component must not be instantiated directly"  class Leaf(Component):     def __init__(self some args **kwargs):         # regular initialization         Component.__init__(self **kwargs)  
python -O game.py  python -O game.py  import subprocess subprocess.Popen( "python -O game.py" )  
${PWD} status output = commands.getstatusoutput("mvn clean install -s./../../foo/bar/settings.xml -Dportal -Dmain.dir=%s/../.. -o" % os.getcwd ())  
userinfo = fb.users.getInfo(self.request.get('uid')...)  
python code.py 80  python WebServer start  if __name__ == "__main__":     if DEBUG:         app.run()     else:         service = WebService(os.path.join(DIR_ACTUAL'ElAdministrador.pid'))         if len(sys.argv) == 2:             if 'start' == sys.argv[1]:                 sys.argv[1] = '8080'                 service.start()  
mtasic inWaiting() last_received buffer def receiving(ser):     global last_received      buffer_string = ''     while True:         buffer_string = buffer_string + ser.read(ser.inWaiting())         if '\n' in buffer_string:             lines = buffer_string.split('\n') # Guaranteed to have at least 2 entries             last_received = lines[-2]             #If the Arduino sends lots of empty lines you'll lose the             #last filled line so you could make the above statement conditional             #like so: if lines[-2]: last_received = lines[-2]             buffer_string = lines[-1]  readline() 
[NSString stringWithFormat:] NSString *str = [NSString stringWithFormat:@"%@ %@ %@"                                   @"Hello" @"World" @"Yay!"];  
f = open("%s/%s" % (config['vsftp']['user_dir'] (vusername) 'wr'))  f = open("%s/%s" % (config['vsftp']['user_dir'] (vusername)) 'wr')  
f = open(curdir + sep + self.path 'rb')  f = open(curdir + sep + self.path)  
&gt;&gt;&gt; s = '23.45678' &gt;&gt;&gt; int(float(s)) 23  &gt;&gt;&gt; int(Decimal(s)) 23  &gt;&gt;&gt; int(s.split('.')[0]) 23  
def sizeof_fmt(num suffix='B'):     for unit in ['''Ki''Mi''Gi''Ti''Pi''Ei''Zi']:         if abs(num) &lt; 1024.0:             return "%3.1f%s%s" % (num unit suffix)         num /= 1024.0     return "%.1f%s%s" % (num 'Yi' suffix)  &gt;&gt;&gt; sizeof_fmt(168963795964) '157.4GiB'  
&gt;&gt;&gt; from StringIO import StringIO &gt;&gt;&gt; from csv import DictReader &gt;&gt;&gt; fh = StringIO(""" ... idcase1case2case3 ...  ... 123nullXY ...  ... 342XXY ...  ... 456nullnullnull ...  ... 789nullnullX ... """.strip()) &gt;&gt;&gt; dr = DictReader(fh) &gt;&gt;&gt; dr.next() {'case1': 'null' 'case3': 'Y' 'case2': 'X' 'id': '123'}  &gt;&gt;&gt; from csv import DictWriter &gt;&gt;&gt; out_fh = StringIO() &gt;&gt;&gt; writer = DictWriter(fh fieldnames=dr.fieldnames) &gt;&gt;&gt; for mapping in dr: ...     writer.write(dict((k v) for k v in mapping.items() if v != 'null')) ...  dr.fieldnames out_fh 
import re grps = re.compile(r'CN=(\w+)').findall  def anyof(short_group_list adu):   all_groups_of_user = set(g for gs in adu.get('memberOf'()) for g in grps(gs))   return sorted(all_groups_of_user.intersection(short_group_list))  ['group2' 'group16'] ADUser short_group_list   return any(g for g in short_group_list if g in all_groups_of_user)  any def anyof_v2(short_group_list adu):   gset = set(short_group_list)   return any(g for gs in adu.get('memberOf'()) for g in grps(gs) if g in gset)  any 
inspect.stack() inspect.stack()[1] def info(msg):     frm = inspect.stack()[1]     mod = inspect.getmodule(frm[0])     print '[%s] %s' % (mod.__name__ msg)  
&gt;&gt;&gt; __import__('temp/a40bd22344') &lt;module 'temp/a40bd22344' from 'temp/a40bd22344/__init__.py'&gt;  project &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.modules['project'] = sys.modules.pop('temp/a40bd22344')  &gt;&gt;&gt; import project &gt;&gt;&gt; project &lt;module 'temp/a40bd22344' from 'temp/a40bd22344/__init__.py'&gt;  &gt;&gt;&gt; import project.foobar &gt;&gt;&gt; project.foobar &lt;module 'project.foobar' from 'temp/a40bd22344/foobar.py'&gt;  &gt;&gt;&gt; print sys.version 2.5.2 (r252:60911 Jul 31 2008 17:28:52)  [GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]  
__call__ AdminSite if not self.has_permission(request):      return self.login(request)   __call__ has_permission AdminSite login 
&gt;&gt;&gt; parser = etree.XMLParser(remove_blank_text=True) # lxml.etree only! &gt;&gt;&gt; root = etree.XML("&lt;root&gt;  &lt;a/&gt;   &lt;b&gt;  &lt;/b&gt;     &lt;/root&gt;" parser) &gt;&gt;&gt; etree.tostring(root) b'&lt;root&gt;&lt;a/&gt;&lt;b&gt;  &lt;/b&gt;&lt;/root&gt;'  
del glist[:] glist = [] 
from itertools import product map("".join product(*[['A' 'C'] if x == "M" else [x] for x in "GMTTMCA"]))  import sys from itertools import product  base_globs = {"M":['A''C'] "R":['A''G'] "W":['A''T']               "S":['C''G'] "Y":['C''T'] "K":['G''T']                "V":['A''C''G'] "H":['A''C''T']               "D":['A''G''T'] "B":['C''G''T']               }  def base_glob(glob_sequence):     production_sequence = [base_globs.get(base [base]) for base in glob_sequence]     return map("".join product(*production_sequence))  for line in sys.stdin.readlines():     productions = base_glob(line.strip())     print "\n".join(productions)  
get() self.val2 = kwargs.get('val2'"default value")  def __init__(self val2="default value" **kwargs):  
map reduce rot_points  = (i.rotated(self.orientation.get_angle()) for i in points) real_points = [self.pos+i*self.scale for i in rot_points]  (parentheses) [brackets] rot_points rot_points 
i.find('The student says') outputstring 
from pyparsing import nestedExpr  data = "( (a ( ( c ) b ) ) ( d ) e )" print nestedExpr().parseString(data).asList()  [[['a' [['c'] 'b']] ['d'] 'e']]  
quad.scale= 10  quad.scale= MySin()  Quad class Quad( object ):     @property     def scale( self ):         return self._scale      @scale.setter     def set_scale( self value ):         # handle numeric and MySin() values appropriately.  property class Quad( object ):     def get_scale( self ):         return self._scale     def set_scale( self value )         # Handle numeric and MySin() values      scale = property( get_scale set_scale )  scale quad.scale * 2  MySin quad.scale * 2 
try:     iSoupList = BeautifulSoup(response parseOnlyThese=SoupStrainer('img'))  except HTMLParseError:     #Do something intelligent here  
scipy.signal.fftconvolve In [1]: a = asarray([[ 1 2 3]    ...:              [ 4 5 6]    ...:              [ 7 8 9]])  In [2]: b = asarray([[-1-2-1]    ...:              [ 0 0 0]    ...:              [ 1 2 1]])  In [3]: scipy.signal.fftconvolve(a b mode = 'same') Out[3]:  array([[-13. -20. -17.]        [-18. -24. -18.]        [ 13.  20.  17.]])  In [4]: stsci.convolve2d(a b fft = True) Out[4]:  array([[-12. -12. -12.]        [-24. -24. -24.]        [-12. -12. -12.]])  fftconvolve() In [5]: a Out[5]:  array([[3 0 0]        [2 0 0]        [1 0 0]])  In [6]: b Out[6]:  array([[3 2 1]        [0 0 0]        [0 0 0]])  In [7]: scipy.signal.fftconvolve(a b[::-1 ::-1]) Out[7]:  array([[ 0. -0.  0.  0.  0.]        [ 0. -0.  0.  0.  0.]        [ 3.  6.  9.  0.  0.]        [ 2.  4.  6.  0.  0.]        [ 1.  2.  3.  0.  0.]])  In [8]: scipy.signal.correlate2d(a b) Out[8]:  array([[0 0 0 0 0]        [0 0 0 0 0]        [3 6 9 0 0]        [2 4 6 0 0]        [1 2 3 0 0]])  
class AppScreenshots(db.Model):      image_file     = db.StringProperty()      description    = db.StringProperty()      apps            = db.ReferenceProperty(Apps)  appsObject = db.Query(Apps).get()  ss = AppScreenshots(image_file = 'foo' description = 'bar'apps = appsObject)  
    for item in menuitems:         entry = menu.addAction(item)         self.connect(entryQtCore.SIGNAL('triggered()') lambda: self.doStuff(item))      for item in menuitems:         entry = menu.addAction(item)         self.connect(entryQtCore.SIGNAL('triggered()') lambda item=item: self.doStuff(item))  item functools.partial(self.doStuff item) import functools 
&lt;br/&gt; cool import calendar import xml.etree.ElementTree as etree  myCal = calendar.HTMLCalendar(calendar.SUNDAY) htmlStr = myCal.formatmonth(2009 7) htmlStr = htmlStr.replace("&amp;nbsp;"" ")  root = etree.fromstring(htmlStr) for elem in root.findall("*//td"):     if elem.get("class") != "tue":         continue     elem.text += "!"      br = etree.SubElement(elem "br")     br.tail = "cool!"  print etree.tostring(root)  
oil_changes itertools next_oil len(next_oil) izip izip tee   it = iter(oil_changes)   a b = itertools.tee(it)   b.next()   thesum = 0   for thelen (i j) in enumerate(itertools.izip(a b)):     thesum += j - i   last_one = j   next_oil = last_one + thesum / (thelen + 1)  b tee izip enumerate enumerate += sum last_one = a.next() a izip a b j b izip thelen enumerate last_one j 
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;   &lt;meta charset=iso-8859-1"/&gt;.  .info() 
grid pack place Entry None a().b() b() Entry(...).grid(...) None entryBox = Entry(root width=60) entryBox.grid(row=2 column=1 sticky=W)  Entry entryBox grid pack 
&gt;&gt;&gt; Achievement.objects.get(name = u"Mirror's Edge\u2122") &lt;Achievement: Mirror's Edge™&gt;  &gt;&gt;&gt; b = BeautifulSoup(u"&lt;span&gt;Mirror's Edge\u2122&lt;/span&gt;").span.string &gt;&gt;&gt; Achievement.objects.get(name = b) ... Exceptoins ... UnicodeEncodeError: 'ascii' codec can't encode character u'\u2122' in position 13: ordinal not in range(128)  &gt;&gt;&gt; Achievement.objects.get(name = unicode(b)) &lt;Achievement: Mirror's Edge™&gt;  
os.rename("c:/a" "c:/b/a")   move c:\a c:\b  
QGraphicsView scroll translate QGraphicsScene 
if True:     print "long test long test long test long test long"\     "test long test long test long test long test long test"  
pydoc.py name(...) 
class CounterFile():     def __init__(self file maxsize):         self.file = file         self.count = 0         self.maxsize = maxsize      def write(self bytes):         self.count += len(bytes)         print "total %d bytes / %d"%(self.count self.maxsize)         if self.count == self.maxsize:             print "   Should be complete"         self.file.write(bytes)   from ftplib import FTP ftp = FTP('ftp.gimp.org') ftp.login('ftp' 'thouis@gmail.com') ftp.set_debuglevel(2)  ftp.cwd('/pub/gimp/v2.6/') fname = 'gimp-2.6.2.tar.bz2'  # LOOP BODY sz = ftp.size(fname) if sz is None:     print "Could not get size!"     sz = 0 ret_status = ftp.retrbinary('RETR ' + fname CounterFile(open(fname 'wb') sz).write)  
_map loop() my_asyncore_obj = SomeAsyncoreObj() asyncore.loop(map=my_asyncore_obj._map)  
if text[j] != key[i]:     if text[j] not in bcs.keys():         j += len_key         i = index     else:         j += bcs[text[j]]         i = index  if text[j] != key[i]:     j += bcsget(text[j] len_key)     i = index  func_list = [searchv1 searchv2 searchv3] def test():     for text in text_list:             print '==== text is' repr(text)         for func in func_list:              for key in key_list:                 try:                     result = func(text key)                 except Exception e:                     print "EXCEPTION: %r expected:%d func:%s key:%r" % (e expected func.__name__ key)                     continue                 expected = text.find(key)                 if result != expected:                     print "ERROR actual:%d expected:%d func:%s key:%r" % (result expected func.__name__ key)  
def max_execs(n=5):     def decorator(fn):         fn.max = n         fn.called = 0         def wrapped(*args **kwargs):             fn.called += 1             if fn.called &lt;= fn.max:                 return fn(*args **kwargs)             else:                 # Replace with your own exception or something                 # else that you want to happen when the limit                 # is reached                 raise RuntimeError("max executions exceeded")         return wrapped     return decorator  max_execs decorator wrapped decoration wrapped @max_execs(5) def f():     print "hi!"  f = max_execs(5)(f)  
def open_socket(counter):   sockets = []   for i in range(counter):      s = socket.socket()      s.bind(('localhost' i+3000))      s.listen(1)      sockets.append(s)   time.sleep(20)  
sys.modules['os.path'] = path from os.path import (curdir pardir sep pathsep defpath extsep altsep     devnull)  path if 'posix' in _names:     name = 'posix'     linesep = '\n'     from posix import *     try:         from posix import _exit     except ImportError:         pass     import posixpath as path      import posix     __all__.extend(_get_exports_list(posix))     del posix  elif 'nt' in _names: # ...  
import sys inspect  def is_mod_function(mod func):     return inspect.isfunction(func) and inspect.getmodule(func) == mod  def list_functions(mod):     return [func.__name__ for func in mod.__dict__.itervalues()              if is_mod_function(mod func)]   print 'functions in current module:\n' list_functions(sys.modules[__name__]) print 'functions in inspect module:\n' list_functions(inspect)  
aList = ["a" "b" "c"] listAndFlags = [ (itemitem in aList) for item in someQuerySet ]  {% for item flag in someList %}     &lt;tr&gt;&lt;td class="{{flag}}"&gt;{{item}}&lt;/td&gt;&lt;/tr&gt; {% endfor %}  
itertools.islice import itertools rows = list(itertools.islice(csvreader 20))  
import functools  def f(ab):     return a*b  funcs = []  for i in range(010):     funcs.append(functools.partial(fi))  
db_connection = DatabaseConnection() with db_connection as cursor:     cursor.execute('insert into ...')     cursor.execute('delete from ...')     # ... more operations ...  
%016 
obj.arr = Array[T]([f(x) for x in obj.arr])  T obj.arr = tuple([f(x) for x in obj.arr])  
PYTHONHOME set PYTHONHOME=C:\Program Files\ActiveState Komodo Edit 5\lib\python _KOMODO_HOSTUSERDATADIR=C:\Users\Dev\AppData\Roaming\ActiveState\KomodoEdit\5.1\host-host\ _KOMODO_VERUSERDATADIR=C:\Users\Dev\AppData\Roaming\ActiveState\KomodoEdit\5.1\ _XRE_USERAPPDATADIR=C:\Users\Dev\AppData\Roaming\ActiveState\KomodoEdit\5.1\host-host\XRE  
book = db.get(bookkey) q = book.updatepoint_set q.order('date') ups = q.fetch(50)  
PYTHONPATH .egg sys.path .pth library1.egg foo library1.egg PYTHONPATH import foo PYTHONPATH import sys sys.path.append("library1.egg") import foo  
HttpResponse response = HttpResponse(mimetype="image/png") # create your image as usual e.g. pylab.plot(...) pylab.savefig(response format="png") return response  HttpResponse 
Friends myFriends Friend MyClass 
import sys if sys.stdout.isatty():     print "Running from command line" else:     print "Running from cron"  
x.insert bisect x.insert x.insert 
eastern = timezone('US/Eastern')  from datetime import datetime import pytz from tzlocal import get_localzone # $ pip install tzlocal  utc_dt = datetime(2009 7 10 18 44 59 193982 tzinfo=pytz.utc) print(utc_dt.astimezone(get_localzone())) # print local time # -&gt; 2009-07-10 14:44:59.193982-04:00  
__del__ __del__ __del__ __del__ __del__ __del__ __del__ __enter__/__exit__ class A(object):     def __init__(self):         print('Constructing A')      def __del__(self):         print('Destructing A')  class B(object):     a = A()  __del__ __del__ 
&lt;script&gt; 
import re  pat1 = re.compile(r"(^|[\n ])(([\w]+?://[\w\#$%&amp;~.\-;:=?@\[\]+]*)(/[\w\#$%&amp;~/.\-;:=?@\[\]+]*)?)" re.IGNORECASE | re.DOTALL)  pat2 = re.compile(r"#(^|[\n ])(((www|ftp)\.[\w\#$%&amp;~.\-;:=?@\[\]+]*)(/[\w\#$%&amp;~/.\-;:=?@\[\]+]*)?)" re.IGNORECASE | re.DOTALL)   urlstr = 'http://www.example.com/foo/bar.html'  urlstr = pat1.sub(r'\1&lt;a href="\2" target="_blank"&gt;\3&lt;/a&gt;' urlstr) urlstr = pat2.sub(r'\1&lt;a href="http:/\2" target="_blank"&gt;\3&lt;/a&gt;' urlstr)  print urlstr  &lt;a href="http://www.example.com/foo/bar.html" target="_blank"&gt;http://www.example.com&lt;/a&gt;  
'__name__' '__console__' '__doc__' None __name__ __main__ if __name__ == '__main__' to   if __name__ in set(["__main__" "__console__"])  
signal.signal #!/usr/bin/env python import signal import sys  def signal_handler(sig frame):     print('You pressed Ctrl+C!')     sys.exit(0) signal.signal(signal.SIGINT signal_handler) print('Press Ctrl+C') signal.pause()  signal 
grep #!/usr/bin/env perl use strict; use warnings;  my %data = ( A =&gt; undef B =&gt; 'yes' C =&gt; undef );  my @keys = grep { defined $data{$_} } keys %data;  print "Key: $_\n" for @keys;  0 undef undef 0 0 0 
os.path $ python -c"import sys; import StringIO; x = StringIO.StringIO(); sys.stdout = x; import this; sys.stdout = sys.__stdout__; print x.getvalue().splitlines()[10][9:]"  $ python -c"import sys; import io; x = io.StringIO(); sys.stdout = x; import this; sys.stdout = sys.__stdout__; print(x.getvalue().splitlines()[10][9:])"  
from . import import mypackage mypackage sys.path sys.path sys.path 
ast.literal_eval ast eval True object eval 
class Kaka   puts self end  
run? __name__ globals() run globals()['myvar'] = [123] export import sys sys.modules["originalmodule"].myvar = [1 2 3] 
app.yaml application: yourappname version: 1 runtime: python api_version: 1  handlers:  - url: /tasks/.*   script: main.py  cron.yaml cron:     - description: daily mailing job     url: /tasks/summary     schedule: every 24 hours  main.py #!/usr/bin/env python    import cgi from google.appengine.ext import webapp from google.appengine.api import mail from google.appengine.api import urlfetch   class MailJob(webapp.RequestHandler):     def get(self):          # Call your website using URL Fetch service ...         url = "http://www.yoursite.com/page_or_service"         result = urlfetch.fetch(url)          if result.status_code == 200:                 doSomethingWithResult(result.content)          # Send emails using Mail service ...         mail.send_mail(sender="admin@gmail.com"                         to="someone@gmail.com"                         subject="Your account on YourSite.com has expired"                         body="Bla bla bla ...")         return  application = webapp.WSGIApplication([         ('/tasks/summary' MailJob)] debug=True)  def main():     wsgiref.handlers.CGIHandler().run(application)  if __name__ == '__main__':     main()  
Restaurant Place Restaurant Place 
$ echo 'print "test" def f1():     print "f1"  def f2():     print "f2"  ' &gt; util.py  $ echo 'from util import f1 f1() from util import f2 f2() ' &gt; test.py  $ python test.py  test f1 f2  $   
set array.array 
urllib.unquote_plus 
GET_MODULE_FUNCTION = """ def f():     import %(parent)s     try:         from %(parent)s import %(child)s     except ImportError:         # one more time...         reload(%(parent)s)         from %(parent)s import %(child)s     return %(child)s """  exec defn = GET_MODULE_FUNCTION % {"parent": parentname "child": partname} exec(defn)  import sys  def f(parentname partname):     name = '%s.%s' % (parentname partname)     try:         __import__(name)     except ImportError:         parent = __import__(parentname)         reload(parent)         __import__(name)     return sys.modules[name]  f 
def bracketed_find(s start end startat=0):     startloc=s.find(start startat)     if startloc==-1:         return []     endloc=s.find(end startloc+len(start))     if endloc == -1:         return [s[startloc+len(start):]]     return [s[startloc+len(start):endloc]] + bracketed_find(s start end endloc+len(end))  def bracketed_find(s start end startat=0):     startloc=s.find(start startat)     if startloc==-1:         return     endloc=s.find(end startloc+len(start))     if endloc == -1:         yield s[startloc+len(start):]         return     else:         yield s[startloc+len(start):endloc]      for found in bracketed_find(s start end endloc+len(end)):         yield found  
def _another_register(self func subst=None needcleanup=1):     ...  def change_register(self):     self.register = self._another_register  def restore_register(self):     self.register = self._register  
httppost.addHeader("Referer" referer);  import org.apache.http.Header; import org.apache.http.HeaderElement; import org.apache.http.HttpRequestInterceptor; import org.apache.http.HttpRequest; import org.apache.http.HttpException; import org.apache.http.NameValuePair; import org.apache.http.HttpResponse; import org.apache.http.HttpEntity; import org.apache.http.client.entity.UrlEncodedFormEntity; import org.apache.http.client.methods.HttpPost; import org.apache.http.client.HttpClient; import org.apache.http.protocol.HttpContext; import org.apache.http.message.BasicNameValuePair; import org.apache.http.impl.client.DefaultHttpClient;  import java.util.ArrayList; import java.util.List; import java.io.OutputStream; import java.io.ByteArrayOutputStream; import java.io.IOException;  public class HttpClientTest {     public static void main(String[] args) throws Exception     {         // initialize some variables         String referer = "URL of referring web page goes here";         String submitUrl = "https URL of form action goes here";         List&lt;NameValuePair&gt; formparams = new ArrayList&lt;NameValuePair&gt;();         formparams.add(new BasicNameValuePair("firstName" "John"));         formparams.add(new BasicNameValuePair("lastName" "Doe"));          // set up httppost         UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams "UTF-8");         HttpPost httppost = new HttpPost(submitUrl);         httppost.setEntity(entity);          // add referer         httppost.addHeader("Referer" referer);          // create httpclient         DefaultHttpClient httpclient = new DefaultHttpClient();          // execute the request         HttpResponse response = httpclient.execute(httppost);          // display the response body         HttpEntity responseEntity = response.getEntity();         OutputStream out = new ByteArrayOutputStream();         responseEntity.writeTo(out);         System.out.println(out);     } }  
easy_install 
__add__ __radd__ class IntContainer(int):     pass i = IntContainer(3) print i + 5 # 8  print 4 + i # 7  class StrContainer(str):     pass s = StrContainer(3) print s + '5' # 35 print '4' + s # 43  
reload import sys.modules[themodulename] from ... import * 
for app in apps:     if app.split('.' 1)[0] != 'zc': #only look for cron in zc apps         continue      try:         a = app + '.cron'         __import__(a)     except ImportError: #no cron jobs for this module         continue      # etc etc  continue 
LOW = 0 NORMAL = 1 HIGH = 2 STATUS_CHOICES = (     (LOW 'Low')     (NORMAL 'Normal')     (HIGH 'High') )  thing.priority = Thing.NORMAL 
sudo ethtool -K eth1 tx off  #!/usr/bin/env python from socket import socket AF_PACKET SOCK_RAW s = socket(AF_PACKET SOCK_RAW) s.bind(("eth1" 0))  # We're putting together an ethernet frame here  # but you could have anything you want instead # Have a look at the 'struct' module for more  # flexible packing/unpacking of binary data # and 'binascii' for 32 bit CRC src_addr = "\x01\x02\x03\x04\x05\x06" dst_addr = "\x01\x02\x03\x04\x05\x06" payload = ("["*30)+"PAYLOAD"+("]"*30) checksum = "\x1a\x2b\x3c\x4d" ethertype = "\x08\x01"  s.send(dst_addr+src_addr+ethertype+payload+checksum)  
__init__ __init__ __init__ CoolDog(True) CoolDog(True old=False) CoolDog(bite=True old=True) CoolDog(old=True bite=False)  
def f(abc=None):     if c is None:         c = g(b)  None c sentinel = object() def f(abc=sentinel):     if c is sentinel:         c = g(b)  
(?!^[0-9]*$)  (?!^[a-zA-Z]*$)  ^([a-zA-Z0-9]{810})$  
def unit_disabled(func):     def wrapper(func):          func.__test__ = False          return func      return wrapper  @unit_disabled def test_my_sample_test():     assert 1 &lt;&gt; 1  def test2_my_sample_test():     assert 1 &lt;&gt; 1  
UnapprovedUser User UnapprovedUser.get() User.get cls @classmethod def get(cls uid):     ldap_data = LdapUtil.get(uid + '' + self.base_dn)     return cls._from_ldap(ldap_data)  _from_ldap _from_ldap result = User(... blah ...)  result = cls(... blah ...)  cls 
for line in open('infile'):   if line[0] == '6':     print ''   print line.strip()   newline = '' for line in open('infile'):     if line[0] == '6':         if newline:             print newline             newline = ''     newline += ' ' + line.strip() if newline:      print newline  
os.listdir() import os for filename in os.listdir('dirname'):      callthecommandhere(blablahbla filename foo)  
[buildout] parts = instance  [zope2] recipe = plone.recipe.zope2install url = http://www.zope.org/Products/Zope/2.11.3/Zope-2.11.3-final.tgz  [instance] recipe = plone.recipe.zope2instance zope2-location = ${zope2:location} user = admin:admin http-address = 127.0.0.1:8080  instance zope2 [buildout] parts = scripts extends = http://svn.zope.org/*checkout*/Zope/tags/2.12.0b3/versions.cfg  [versions] Zope2 = 2.12.0b3  [scripts] recipe = zc.recipe.egg:scripts eggs = Zope2  
del foo.bar   2           0 LOAD_FAST                0 (foo)               3 DELETE_ATTR              0 (bar)  delattr(foo "bar")   2           0 LOAD_GLOBAL              0 (delattr)               3 LOAD_FAST                0 (foo)               6 LOAD_CONST               1 ('bar')               9 CALL_FUNCTION            2              12 POP_TOP               LOAD_FAST LOAD_GLOBAL 
HOST = raw_input('Enter Host: ') PORT = int(raw_input('Enter Port: '))  HOST = raw_input('Enter host: ') print HOST  &gt;&gt;&gt;  Enter host: stackoverflow.com stackoverflow.com &gt;&gt;&gt;   
_unused_1 class Article(models.Model):     title = models.CharField(blank=False max_length=80)     slug = models.SlugField(max_length=80)     revision_1 = models.OneToOneField(ArticleRevision related_name='_unused_1')     revision_2 = models.OneToOneField(ArticleRevision related_name='_unused_2')      def __unicode__(self):         return self.title  
mymodel_obj_list 
dict &gt;&gt;&gt; foo = dict(x=1 y=2) &gt;&gt;&gt; bar = dict(y=2 x=1) &gt;&gt;&gt; foo == bar True  foo['x'] foo.x class Bunch(object):     def __init__(self **kwds):         self.__dict__.update(kwds)      def __eq__(self other):         return self.__dict__ == other.__dict__  class Bunch(dict):     __getattr__ __setattr__ = dict.get dict.__setitem__  
content() protected_view request content protected_view content 
class DictModelAdaptor():     def __init__(self model):         self.model = model      def __getitem__(self key):         return self.model.objects.get(key=key)      def __setitem__(self key item):         pair = self.model()         pair.key = key         pair.value = item         pair.save()      def __contains__(self key):         ...  modelDict = DictModelAdaptor(DictModel) modelDict["name"] = "Bob Jones"  
IEnumerator&lt;T&gt; var newList = oldList.Where(x =&gt; ShouldBeRetained(x)).ToList();  ShouldBeRetained ToList() 
objects = B.objects.get(user=a.user) objects += A.objects.get(user=user)  user = models.ForeignKey(User)  objects = C.objects.get(user=user)  for object in objects:     if object.A:         #code     if object.B:         #code     
def removePrefix(path prefix):     plist = path.split(os.sep)     pflist = prefix.split(os.sep)     rest = plist[len(pflist):]     return os.path.join(*rest)  print removePrefix("this/is/the/basedir/path/b/include" "this/is/the/basedir/path") b/include  os.sep 
curl wget $ wget http://cs.edu.com/u/user/TEST/one.py $ python one.py  one.py 
ipdb import ipdb; ipdb.set_trace()  pip install ipdb ipdb ipdb.py import sys from IPython.Debugger import Pdb from IPython.Shell import IPShell from IPython import ipapi  shell = IPShell(argv=[''])  def set_trace():     ip = ipapi.get()     def_colors = ip.options.colors     Pdb(def_colors).set_trace(sys._getframe().f_back)  
# -*- coding: utf-8 -*-  
-U typeset 
verb title definition = myString.split (' ' 2)  
urlpatterns = patterns(''    (r'^item/value/(?P&lt;value&gt;\d+\.\d{2})/$' 'myapp.views.byvalue')    ... more urls )  def byvalue(requestvalue='0.99'):     try:         value = float(value)     except:         ...  
def count(obj):     total = 0     for o in obj[1:]:         # Add the node itself.         total += 1          if isinstance(o list):             total += count(o)     return total  def find_idx(tree idx):     """     Return the node containing the idx'th function parameter and the index of that     parameter.  If the tree contains fewer than idx parameters return (None None).     """     if not isinstance(idx list):         # Stash this in a list so recursive calls share the same value.         idx = [idx]      for i o in enumerate(tree):         # Skip the function itself.         if i == 0:             continue          if idx[0] == 0:             return tree i          idx[0] -= 1         if isinstance(o list):             container result_index = find_idx(o idx)             if container is not None:                 return container result_index      return None None  def random_swap(tree1 tree2):     from random import randrange     pos_in_1 = randrange(0 count(tree1))     pos_in_2 = randrange(0 count(tree2))      parent1 idx1 = find_idx(tree1 pos_in_1)     parent2 idx2 = find_idx(tree2 pos_in_2)      # Swap:     parent1[idx1] parent2[idx2] = parent2[idx2] parent1[idx1]  c = 1 tree1 = ["f:2" c ["f:1" c]] tree2 = ["f:2" ["f:2" ["f:2" c c] ["f:2" c c]] ["f:3" ["f:4" c c c c] ["f:2" c c] c]]  while True:     random_swap(tree1 tree2)     print tree1     print tree2  
(_foo_) ([_asdf_])  -&gt;  &lt;p&gt;(&lt;em&gt;asdf&lt;/em&gt;)&lt;/p&gt;  (]_asdf_])  Textile.span()             (?:^|(?&lt;=[\s&gt;%(pnct)s])|([{[]))              (?:^|(?&lt;=[\s&gt;(%(pnct)s])|([{[]))  (_foo_) 
from distutils.command.sdist import sdist from setuptools import setup  setup(     # ... all the usual setup arguments ...     cmdclass = {'sdist': sdist} )  
import operator  ourtags = sorted(ourtags key=operator.attrgetter('date_added'))  
def perm(i seq):   seq = tuple(seq)   n = len(seq)   max = n # number of perms with 'digits' digits   digits = 1   last_max = 0   while i &gt;= max:     last_max = max     max = n * (max + 1)     digits += 1   result = ''   i -= last_max   while digits:     digits -= 1     result = seq[i % n] + result     i //= n   return result  
class SpamMeta(type):      def __new__(cls name bases dct):         SpamType = type.__new__(cls name bases dct)         SpamType.decorated = []         return SpamType   class Spam(object):      __metaclass__ = SpamMeta      @classmethod     def decorate(cls funct):         cls.decorated.append(funct)         return funct   class Eggs(Spam):     pass   @Eggs.decorate def foo():     print "spam and eggs"   print Eggs.decorated # [&lt;function foo at 0x...&gt;] print Spam.decorated # []  
raise socket.error msg socket.error import socket ... try:     ... except socket.error:     ...  
update() import hashlib with open("your_filename.txt" "rb") as f:     file_hash = hashlib.md5()     while chunk := f.read(8192):         file_hash.update(chunk) print(file_hash.digest()) print(file_hash.hexdigest())  # to get a printable str instead of bytes  
import datetime year = datetime.date.today().year  import datetime year = datetime.datetime.today().year  
reduce In [13]: reduce(lambda s t: (s[0]+t[0] s[1]+t[1]) [a b c] (0 0)) Out[13]: (51 73)  map zip In [14]: map(sum zip(a b c)) Out[14]: [51 73]  In [15]: tups = [a b c]  In [15]: map(sum zip(*tups)) Out[15]: [51 73]  map In [16]: [sum(z) for z in zip(*tups)] Out[16]: [51 73]  
bla bla Foo class Foo:     def __init__(self bla=None):         if bla is None:             bla = {}         self.task_defs = bla     def __str__(self):         return ''.join(str(self.task_defs))  a = Foo() b = Foo() a.task_defs['BAR'] = 1 print 'B is ==&gt; %s' % str(b) print 'A is ==&gt; %s' % str(a)  
__init__ libc = ctypes.cdll.LoadLibrary("libc.so") mask = '\x00' * 17 # 16 byte empty mask + null terminator  libc.sigprocmask(3 mask None) # '3' on FreeBSD is the value for SIG_SETMASK  
blog_post_list = blogPosts.objects.all().order_by('-pub_date')[:5]  
def __init__(self *args **kwargs):     super(CircuitForm self).__init__(*args **kwargs)      for key in self.fields:         self.fields[key].required = False   
${section:variable} ${dollar} 
java -Djava.net.preferIPv4Stack=true -jar bridge.jar 
django.db.transaction.commit_manually from django.db import transaction  @transaction.commit_manually def viewfunc(request):     ...     for item in items:         entry = Entry(a1=item.a1 a2=item.a2)         entry.save()     transaction.commit()  from django.db import transaction  def viewfunc(request):     ...     with transaction.commit_on_success():         for item in items:             entry = Entry(a1=item.a1 a2=item.a2)             entry.save()  bulk_create &gt;&gt;&gt; Entry.objects.bulk_create([ ...     Entry(headline="Django 1.0 Released") ...     Entry(headline="Django 1.1 Announced") ...     Entry(headline="Breaking: Django is awesome") ... ])  commit_on_success commit_manually from django.db import transaction  @transaction.atomic def viewfunc(request):     # This code executes inside a transaction.     do_stuff()  from django.db import transaction  def viewfunc(request):     # This code executes in autocommit mode (Django's default).     do_stuff()      with transaction.atomic():         # This code executes inside a transaction.         do_more_stuff()  
subprocess **kwargs 
for x in (12345):     fd.write(x + '\n')  for x in (12345):     fd.write('%s\n' % x)  
Z: \\hostname r'...' mountvol drive:path /L mountvol subprocess.Popen 
SMTPChannel smtp_ SMTPServer 
^[A-Za-z0-9_.][A-Za-z0-9_ ]{031}$  
`&lt;?xml version="1.0" encoding="UTF-8"?&gt;`  &lt;?xml version="1.0"?&gt; &gt;&gt;&gt; import xml.etree.ElementTree as ET &gt;&gt;&gt; from StringIO import StringIO as sio  &gt;&gt;&gt; raw_text = '&lt;root&gt;can\x92t&lt;/root&gt;' # text encoded in cp1252 no XML declaration  &gt;&gt;&gt; t = ET.parse(sio(raw_text)) [tracebacks omitted] xml.parsers.expat.ExpatError: not well-formed (invalid token): line 1 column 9 # parser is expecting UTF-8  &gt;&gt;&gt; t = ET.parse(sio('&lt;?xml version="1.0" encoding="UTF-8"?&gt;' + raw_text)) xml.parsers.expat.ExpatError: not well-formed (invalid token): line 1 column 47 # parser is expecting UTF-8 again  &gt;&gt;&gt; t = ET.parse(sio('&lt;?xml version="1.0" encoding="cp1252"?&gt;' + raw_text)) &gt;&gt;&gt; t.getroot().text u'can\u2019t' # parser was told to expect cp1252; it works  &gt;&gt;&gt; import unicodedata &gt;&gt;&gt; unicodedata.name(u'\u2019') 'RIGHT SINGLE QUOTATION MARK' # not quite an apostrophe but better than an exception  &gt;&gt;&gt; fixed_text = raw_text.decode('cp1252').encode('utf8') # alternative: we transcode the data to UTF-8  &gt;&gt;&gt; t = ET.parse(sio(fixed_text)) &gt;&gt;&gt; t.getroot().text u'can\u2019t' # UTF-8 is the default; no declaration needed  
importKey key k = key() k.importKey(myKey passphrase='PASSPHRASE')  k = key(keyobj=myKey passphrase='PASSPHRASE')  
&lt;root&gt; import urllib from xml.etree import ElementTree  url = 'http://69.36.9.147:8090/clientes/SMS_API_OUT.jsp?codigo=ABCDEFGH&amp;cliente=XX' xmldata = '&lt;root&gt;' + urllib.urlopen(url).read() + '&lt;/root&gt;' tree = ElementTree.fromstring(xmldata) codigo = tree.find('codigo').text  print codigo  
f = open("mdata.txt")  data_dict = {} section = None data_for_section = "" for line in f:     line = line.strip() #remove whitespace at start and end      if section != None and (line[0] == "*" or line == "///"):         # if we've just finished a section put whatever we got into the data dict         data_dict[section] = [bit for bit in data_for_section.split("") if bit != ""]      if line[0] == "*":         # "*" denotes the start of a new section probably so remember the name         section = line [2:]         data_for_section = ""         continue     data_for_section += line  f.close() #got the data now for some output print "loaded file. Found headings: %s"%(" ".join(data_dict.keys()))  for key in data_dict.keys():     if len(data_dict[key])&gt;5:         print key ": array of %i entries"%len(data_dict[key])     else:         print key ": " data_dict[key]  startingPosition = float(data_dict["Starting position"][0]) data_list_of_floats = map(float data_dict["Data"])  
repository_dir = E:/Projects/svn/InfoProj remote_repository_dir = Y:/Projects/svn/InfoProj   repository_dir = Option('trac' 'repository_dir' ''     """Path to local repository. This can also be a relative path     (''since 0.11'').""")  remote_repository_dir = Option('trac' 'remote_repository_dir' ''     """Path to remote repository.""")                 rtype rdir = self.repository_type self.repository_dir             if not os.path.isabs(rdir):                 rdir = os.path.join(self.env.path rdir)              rtype rdir = self.repository_type self.repository_dir             if not os.path.isdir(rdir):                 rdir = self.remote_repository_dir             if not os.path.isabs(rdir):                 rdir = os.path.join(self.env.path rdir)      if repository_dir:         # directory part of the repo name can vary on case insensitive fs         if os.path.normcase(repository_dir) != os.path.normcase(self.name):             self.log.info("'repository_dir' has changed from %r to %r"                           % (repository_dir self.name))             raise TracError(_("The 'repository_dir' has changed a "                               "'trac-admin resync' operation is needed."))     elif repository_dir is None: #          self.log.info('Storing initial "repository_dir": %s' % self.name)         cursor.execute("INSERT INTO system (namevalue) VALUES (%s%s)"                        (CACHE_REPOSITORY_DIR self.name))     else: # 'repository_dir' cleared by a resync         self.log.info('Resetting "repository_dir": %s' % self.name)         cursor.execute("UPDATE system SET value=%s WHERE name=%s"                        (self.name CACHE_REPOSITORY_DIR))      if repository_dir is None: #          self.log.info('Storing initial "repository_dir": %s' % self.name)         cursor.execute("INSERT INTO system (namevalue) VALUES (%s%s)"                        (CACHE_REPOSITORY_DIR self.name))     else: # 'repository_dir' cleared by a resync         self.log.info('Resetting "repository_dir": %s' % self.name)         cursor.execute("UPDATE system SET value=%s WHERE name=%s"                        (self.name CACHE_REPOSITORY_DIR))  
def sum(*args):     result = 0     for a in args:         result += a     return result  sum(12) sum(9578) sum(1.72.38.93.4)  
import new  def with_bar(func):     def bar(x):         return x + 1     f_globals = func.func_globals.copy()     f_globals['bar'] = bar     return new.function(func.func_code f_globals                         func.func_name func.func_defaults func.func_closure)  @with_bar def foo(x):     return bar(x)  print foo(5) # prints 6  
myFoo.bar(someArgs) 
gameclaim_set gameclaim_set related_name class GameClaim(models.Model):     target = models.ForeignKey(User related_name='gameclaim_targets')     claimer = models.ForeignKey(User related_name='gameclaim_users')     isAccepted = models.BooleanField()  
def drawItems(painter items options):     print len(items)     for idx i in enumerate(items):         print idx i         if idx &gt; 5:             raise ValueError()  45 0 &lt;PyQt4.QtGui.QGraphicsPathItem object at 0x3585270&gt; 1 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356ca68&gt; 2 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356ce20&gt; 3 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356cc88&gt; 4 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356cc00&gt; 5 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356caf0&gt; 6 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356cb78&gt;  Exception ValueError: ValueError() in &lt;module 'threading' from '/usr/lib/python2.6/threading.pyc'&gt; ignored  threading.currentThread() drawItems options def drawItems(self painter items options):     for item option in zip(items options):         print "Processing" item         # ... Do checking ...         item.paint(painter option self.target)  self.target paint() QWidget* QGraphicsScene QObject 
from win32file import * from winioctlcon import FSCTL_GET_REPARSE_POINT  __all__ = ['islink' 'readlink']  # Win32file doesn't seem to have this attribute. FILE_ATTRIBUTE_REPARSE_POINT = 1024 # To make things easier. REPARSE_FOLDER = (FILE_ATTRIBUTE_DIRECTORY | FILE_ATTRIBUTE_REPARSE_POINT)  # For the parse_reparse_buffer function SYMBOLIC_LINK = 'symbolic' MOUNTPOINT = 'mountpoint' GENERIC = 'generic'  def islink(fpath):     """ Windows islink implementation. """     if GetFileAttributes(fpath) &amp; REPARSE_FOLDER:         return True     return False   def parse_reparse_buffer(original reparse_type=SYMBOLIC_LINK):     """ Implementing the below in Python:      typedef struct _REPARSE_DATA_BUFFER {         ULONG  ReparseTag;         USHORT ReparseDataLength;         USHORT Reserved;         union {             struct {                 USHORT SubstituteNameOffset;                 USHORT SubstituteNameLength;                 USHORT PrintNameOffset;                 USHORT PrintNameLength;                 ULONG Flags;                 WCHAR PathBuffer[1];             } SymbolicLinkReparseBuffer;             struct {                 USHORT SubstituteNameOffset;                 USHORT SubstituteNameLength;                 USHORT PrintNameOffset;                 USHORT PrintNameLength;                 WCHAR PathBuffer[1];             } MountPointReparseBuffer;             struct {                 UCHAR  DataBuffer[1];             } GenericReparseBuffer;         } DUMMYUNIONNAME;     } REPARSE_DATA_BUFFER *PREPARSE_DATA_BUFFER;      """     # Size of our data types     SZULONG = 4 # sizeof(ULONG)     SZUSHORT = 2 # sizeof(USHORT)      # Our structure.     # Probably a better way to iterate a dictionary in a particular order     # but I was in a hurry unfortunately so I used pkeys.     buffer = {         'tag' : SZULONG         'data_length' : SZUSHORT         'reserved' : SZUSHORT         SYMBOLIC_LINK : {             'substitute_name_offset' : SZUSHORT             'substitute_name_length' : SZUSHORT             'print_name_offset' : SZUSHORT             'print_name_length' : SZUSHORT             'flags' : SZULONG             'buffer' : u''             'pkeys' : [                 'substitute_name_offset'                 'substitute_name_length'                 'print_name_offset'                 'print_name_length'                 'flags'             ]         }         MOUNTPOINT : {             'substitute_name_offset' : SZUSHORT             'substitute_name_length' : SZUSHORT             'print_name_offset' : SZUSHORT             'print_name_length' : SZUSHORT             'buffer' : u''             'pkeys' : [                 'substitute_name_offset'                 'substitute_name_length'                 'print_name_offset'                 'print_name_length'             ]         }         GENERIC : {             'pkeys' : []             'buffer': ''         }     }      # Header stuff     buffer['tag'] = original[:SZULONG]     buffer['data_length'] = original[SZULONG:SZUSHORT]     buffer['reserved'] = original[SZULONG+SZUSHORT:SZUSHORT]     original = original[8:]      # Parsing     k = reparse_type     for c in buffer[k]['pkeys']:         if type(buffer[k][c]) == int:             sz = buffer[k][c]             bytes = original[:sz]             buffer[k][c] = 0             for b in bytes:                 n = ord(b)                 if n:                     buffer[k][c] += n             original = original[sz:]      # Using the offset and length's grabbed we'll set the buffer.     buffer[k]['buffer'] = original     return buffer  def readlink(fpath):     """ Windows readlink implementation. """     # This wouldn't return true if the file didn't exist as far as I know.     if not islink(fpath):         return None      # Open the file correctly depending on the string type.     handle = CreateFileW(fpath GENERIC_READ 0 None OPEN_EXISTING FILE_FLAG_OPEN_REPARSE_POINT 0) \                 if type(fpath) == unicode else \             CreateFile(fpath GENERIC_READ 0 None OPEN_EXISTING FILE_FLAG_OPEN_REPARSE_POINT 0)      # MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16384 = (16*1024)     buffer = DeviceIoControl(handle FSCTL_GET_REPARSE_POINT None 16*1024)     # Above will return an ugly string (byte array) so we'll need to parse it.      # But first we'll close the handle to our file so we're not locking it anymore.     CloseHandle(handle)      # Minimum possible length (assuming that the length of the target is bigger than 0)     if len(buffer) &lt; 9:         return None     # Parse and return our result.     result = parse_reparse_buffer(buffer)     offset = result[SYMBOLIC_LINK]['substitute_name_offset']     ending = offset + result[SYMBOLIC_LINK]['substitute_name_length']     rpath = result[SYMBOLIC_LINK]['buffer'][offset:ending].replace('\x00''')     if len(rpath) &gt; 4 and rpath[0:4] == '\\??\\':         rpath = rpath[4:]     return rpath  def realpath(fpath):     from os import path     while islink(fpath):         rpath = readlink(fpath)         if not path.isabs(rpath):             rpath = path.abspath(path.join(path.dirname(fpath) rpath))         fpath = rpath     return fpath   def example():     from os import system unlink     system('cmd.exe /c echo Hello World &gt; test.txt')     system('mklink test-link.txt test.txt')     print 'IsLink: %s' % islink('test-link.txt')     print 'ReadLink: %s' % readlink('test-link.txt')     print 'RealPath: %s' % realpath('test-link.txt')     unlink('test-link.txt')     unlink('test.txt')  if __name__=='__main__':     example()  sys.getwindowsversion()[0] &gt;= 6  
dict((x[0] x) for x in L).values()  def unique_items(L):     found = set()     for item in L:         if item[0] not in found:             yield item             found.add(item[0])  print list(unique_items(L))  
def multikeysort(items columns):     from operator import itemgetter     comparers = [((itemgetter(col[1:].strip()) -1) if col.startswith('-') else                   (itemgetter(col.strip()) 1)) for col in columns]     def comparer(left right):         for fn mult in comparers:             result = cmp(fn(left) fn(right))             if result:                 return mult * result         else:             return 0     return sorted(items cmp=comparer)  b = [{u'TOT_PTS_Misc': u'Utley Alex' u'Total_Points': 96.0}      {u'TOT_PTS_Misc': u'Russo Brandon' u'Total_Points': 96.0}      {u'TOT_PTS_Misc': u'Chappell Justin' u'Total_Points': 96.0}      {u'TOT_PTS_Misc': u'Foster Toney' u'Total_Points': 80.0}      {u'TOT_PTS_Misc': u'Lawson Roman' u'Total_Points': 80.0}      {u'TOT_PTS_Misc': u'Lempke Sam' u'Total_Points': 80.0}      {u'TOT_PTS_Misc': u'Gnezda Alex' u'Total_Points': 78.0}      {u'TOT_PTS_Misc': u'Kirks Damien' u'Total_Points': 78.0}      {u'TOT_PTS_Misc': u'Worden Tom' u'Total_Points': 78.0}      {u'TOT_PTS_Misc': u'Korecz Mike' u'Total_Points': 78.0}      {u'TOT_PTS_Misc': u'Swartz Brian' u'Total_Points': 66.0}      {u'TOT_PTS_Misc': u'Burgess Randy' u'Total_Points': 66.0}      {u'TOT_PTS_Misc': u'Smugala Ryan' u'Total_Points': 66.0}      {u'TOT_PTS_Misc': u'Harmon Gary' u'Total_Points': 66.0}      {u'TOT_PTS_Misc': u'Blasinsky Scott' u'Total_Points': 60.0}      {u'TOT_PTS_Misc': u'Carter III Laymon' u'Total_Points': 60.0}      {u'TOT_PTS_Misc': u'Coleman Johnathan' u'Total_Points': 60.0}      {u'TOT_PTS_Misc': u'Venditti Nick' u'Total_Points': 60.0}      {u'TOT_PTS_Misc': u'Blackwell Devon' u'Total_Points': 60.0}      {u'TOT_PTS_Misc': u'Kovach Alex' u'Total_Points': 60.0}      {u'TOT_PTS_Misc': u'Bolden Antonio' u'Total_Points': 60.0}      {u'TOT_PTS_Misc': u'Smith Ryan' u'Total_Points': 60.0}]  a = multikeysort(b ['-Total_Points' 'TOT_PTS_Misc']) for item in a:     print item  from operator import itemgetter as i  def multikeysort(items columns):     comparers = [         ((i(col[1:].strip()) -1) if col.startswith('-') else (i(col.strip()) 1))         for col in columns     ]     def comparer(left right):         comparer_iter = (             cmp(fn(left) fn(right)) * mult             for fn mult in comparers         )         return next((result for result in comparer_iter if result) 0)     return sorted(items cmp=comparer)  cmp sort from operator import itemgetter as i from functools import cmp_to_key  def cmp(x y):     """     Replacement for built-in function cmp that was removed in Python 3      Compare the two objects x and y and return an integer according to     the outcome. The return value is negative if x &lt; y zero if x == y     and strictly positive if x &gt; y.      https://portingguide.readthedocs.io/en/latest/comparisons.html#the-cmp-function     """      return (x &gt; y) - (x &lt; y)  def multikeysort(items columns):     comparers = [         ((i(col[1:].strip()) -1) if col.startswith('-') else (i(col.strip()) 1))         for col in columns     ]     def comparer(left right):         comparer_iter = (             cmp(fn(left) fn(right)) * mult             for fn mult in comparers         )         return next((result for result in comparer_iter if result) 0)     return sorted(items key=cmp_to_key(comparer))  
&gt;&gt;&gt; class Person: ...     def __init__(self): self.mid = True ...  &gt;&gt;&gt; def is_midwestern(self): return self.mid ...  &gt;&gt;&gt; Person.is_midwestern = is_midwestern &gt;&gt;&gt; p = Person() &gt;&gt;&gt; p.is_midwestern()  True &gt;&gt;&gt;   
matplotlib.pyplot matplotlib.pyplot.xticks tick_locs = [list of locations where you want your tick marks placed] tick_lbls = [list of corresponding labels for each of the tick marks] plt.xticks(tick_locs tick_lbls)  imshow pcolor x y Figure Axes Axes Axis x y pyplot 
('a' 'b')[0] == 'a' any() True &gt;&gt;&gt; t = ( ...     ('dog' 'Dog') ...     ('cat' 'Cat') ...     ('fish' 'Fish') ... ) &gt;&gt;&gt; def contains(w t): ...     return any(w == e[0] for e in t) ...  &gt;&gt;&gt; contains('fish' t) True &gt;&gt;&gt; contains('dish' t) False  
import json from pyparsing import *  data = """var txns = [    { apples: '100' oranges: '20' type: 'SELL'}     { apples: '200' oranges: '10' type: 'BUY'}]"""   def js_grammar():     key = Word(alphas).setResultsName("key")     value = QuotedString("'").setResultsName("value")     pair = Group(key + Literal(":").suppress() + value)     object_ = nestedExpr("{" "}" delimitedList(pair ""))     array = nestedExpr("[" "]" delimitedList(object_ ""))     return array + StringEnd()  JS_GRAMMAR = js_grammar()  def parse(js):     return JS_GRAMMAR.parseString(js[len("var txns = "):])[0]  def to_dict(object_):     return dict((p.key p.value) for p in object_)  result = [     {"transaction": to_dict(object_)}     for object_ in parse(data)] print json.dumps(result)  [{"transaction": {"type": "SELL" "apples": "100" "oranges": "20"}}  {"transaction": {"type": "BUY" "apples": "200" "oranges": "10"}}]  
setattr setattr(self 'wavelength' wavelength_val)  self.wavelength = wavelength_val  for variable in self.variable_list:        var_typevar_text_ctrlvar_name = variable        if var_type == 'f' :            setattr(self var_name var_text_ctrl.GetValue())  
path dirs files = walktoo('/home/damon/walktemp/%s' % path)  walktoo path dirs files walktoo walktoo() next() walkdeep() walktoo() for path dirs files in walktoo(...):     # do something  
&amp;lt; &lt; &amp;lt; xml.sax.saxutils.escape &gt;&gt;&gt; from xml.sax.saxutils import escape &gt;&gt;&gt; escape("&lt;fail/&gt;") '&amp;lt;fail/&amp;gt;'  
# ... ("^foo/(.*)$" "foo") # or whatever # ...  fields = paramPassedInAccordingToThatUrl.split('/')  
zip_safe = False 
c:\My App\MyApp.exe c:\My App\Microsoft.VC90.CRT\Microsoft.VC90.CRT.manifest c:\My App\Microsoft.VC90.CRT\msvcr90.dll  
class ref:     def __init__(self obj): self.obj = obj     def get(self):    return self.obj     def set(self obj):      self.obj = obj  a = ref([1 2]) b = a print(a.get())  # =&gt; [1 2] print(b.get())  # =&gt; [1 2]  b.set(2) print(a.get())  # =&gt; 2 print(b.get())  # =&gt; 2  
storm.locals components.storm.locals __name__ storm.locals locals properties storm.locals from properties import Bool  
class Urlregex(db.Model):     """     the data field is structured as a newline separated record list     and each record is a space separated list of regex's and      dispatch key. Example of one such record      domain_tld: google.com     data:         ^(.*)google.com/search(.*) google-search      """     domain_tld = db.StringProperty()     data = db.TextProperty()  class Urldispatch(db.Model):     urlkey = db.StringProperty()     data = db.TextProperty()  
/* get sys.modules dict */ PyObject* sys_mod_dict = PyImport_GetModuleDict(); /* get the __main__ module object */ PyObject* main_mod = PyMapping_GetItemString(sys_mod_dict "__main__"); /* call the class inside the __main__ module */ PyObject* instance = PyObject_CallMethod(main_mod "MyClass" "");  instance 
Xlib.X.ButtonPressMask | Xlib.X.ButtonReleaseMask ButtonPress ButtonRelease detail import Xlib import Xlib.display  def main():     display = Xlib.display.Display(':0')     root = display.screen().root     root.change_attributes(event_mask=         Xlib.X.ButtonPressMask | Xlib.X.ButtonReleaseMask)      while True:         event = root.display.next_event()         print event  if __name__ == "__main__":     main()  
import logging logging.handlers from django.conf import settings  LOGGING_INITIATED = False LOGGER_NAME = 'project_logger'  def init_logging():     logger = logging.getLogger(LOGGER_NAME)     logger.setLevel(logging.INFO)     handler = logging.handlers.TimedRotatingFileHandler(settings.LOG_FILENAME when = 'midnight')     formatter = logging.Formatter(LOG_MSG_FORMAT)     handler.setFormatter(formatter)     logger.addHandler(handler)  if not LOGGING_INITIATED:     LOGGING_INITIATED = True     init_logging()  settings.py LOG_FILENAME = '/path/to/log/file/in/development/environment  production.py from settings import * LOG_FILENAME = '/path/to/log/file/in/production/environment'  
self.setDaemon(True) __init__ self.start() self.daemon = True 
cx_Oracle Connection 
global SQLConnection global cursor  
i class klass(object):     pass  for i in [12]:     def f(self i=i):         print(i)     setattr(klass 'f' + str(i) f)  class klass(object):     pass  def fmaker(i):     def f(self):         print(i)     return f  for i in [12]:     setattr(klass 'f' + str(i) fmaker(i))  
import os import sys  pid = os.fork() if pid:     # we are the parent continue on     print("This runs in a separate process from the else clause.")  else:     # child runs browser then quits.     webbrowser.open_new(url)     print("Exiting...")     sys.exit()  
connect def connect(self receiver sender=None weak=True dispatch_uid=None)  dispatch_uid dispatch_uid dispatch_uid dispatch_uid connect 
self.memberlist self.memberlist[someindexA] self.memberlist[someindexB] = self.memberlist[someindexB] self.memberlist[someindexA]  L = self.memberlist L[someindexA] L[someindexB] = L[someindexB] L[someindexA]  self.memberlist &gt;=0 def slicer(a b):   return slice(a b+cmp(ba) b-a) slice(b a+cmp(ab) a-b)  back forth = slicer(someindexA someindexB) self.memberlist[back] = self.memberlist[forth]  +cmp 
META request request.META['foo'] assert False DEBUG=True request 
with __exit__ with try:     with file("hello.txt") as input_file:         for line in input_file:             if "hello" not in line:                  raise ValueError("Every line must contain 'hello'!") except IOError:     print "Damnit couldn't open the file." except:     raise else:     print "Everything went fine!"  
&lt;Python_Source&gt;/Modules/Setup  &lt;Python_Source&gt;/Modules/Setup.dist  Setup README ./configure LDFLAGS="-static -static-libgcc" CPPFLAGS="-static"  Modules/Setup *static*  make 2&gt;&amp;1 | grep 'renaming'  
getattr p.pcp = getattr(row "LPPDR#")  setattr(p "&amp;)(@#$@!!~%&amp;" "Hello World!") print getattr(p "&amp;)(@#$@!!~%&amp;")  # prints "Hello World!"  SELECT LPPDR# AS LPPDR ...  
is .func_code.co_consts 
def get_object_votes(self obj all=False):     """     Get a dictionary mapping vote to votecount     """     object_id = obj._get_pk_val()     ctype = ContentType.objects.get_for_model(obj)     queryset = self.filter(content_type=ctype object_id=object_id)      if not all:         queryset = queryset.filter(is_archived=False) # only pick active votes      queryset = queryset.values('vote')     queryset = queryset.annotate(vcount=Count("vote")).order_by()      votes = {}      for count in queryset:         votes[count['vote']] = count['vcount']      return votes  
@property class Base(object):      @property     def example(self):         raise NotImplementedError("Subclasses should implement this!")  NotImplementedError b = Base() print b.example  
class hashabledict(dict):     def __hash__(self):         return hash(tuple(sorted(self.items())))  
class foo(object):     c = 0     def __init__(self):         self.next = self.next2      def __iter__(self):         return self      def next(self):         if self.c == 5: raise StopIteration         self.c += 1         return 1      def next2(self):         if self.c == 5: raise StopIteration         self.c += 1         return 2  it = iter(foo()) # Outputs: &lt;bound method foo.next2 of &lt;__main__.foo object at 0xb7d5030c&gt;&gt; print it.next # 2 print it.next() # 1?! for x in it:     print x  tp_iternext class IteratorWrapper2(object):     def __init__(self otheriter):         self.wrapped_iter_next = otheriter.next     def __iter__(self):         return self     def next(self):         return self.wrapped_iter_next()  for j in IteratorWrapper2(iter([1 2 3])):     print j  
Python 3.8 := re.match(r'(\d+)g' '123g') match None &gt;&gt;&gt; if match := re.match(r'(\d+)g' '123g'): ...   print(match.group(1)) ...  123 &gt;&gt;&gt; if match := re.match(r'(\d+)g' 'dddf'): ...   print(match.group(1)) ... &gt;&gt;&gt;  
indexOf href.index('/') href.find('/') find -1 index ValueError index 
import re splitterForIndexing = re.compile(r"(?:[a-zA-Z0-9\-]+[a-zA-Z0-9\-])|(?:[.])") source = "Hello. 1-methyl-4-phenylpyridinium is ultra-bad. However 1-methyl-4-phenyl-1236-tetrahydropyridine is worse." print "\n".join( splitterForIndexing.findall(source))  """ Hello . 1-methyl-4-phenylpyridinium is ultra-bad . However  1-methyl-4-phenyl-1236-tetrahydropyridine is worse . """  import re splitterForIndexing = re.compile(r"(?:[a-zA-Z]+)|(?:[a-zA-Z0-9][a-zA-Z0-9\-()]+[a-zA-Z0-9\-()])|(?:[.-])") source = "Hello. 1-methyl-4-phenylpyridinium is ultra-bad. However 1-methyl-4-phenyl-1(23)6-tetrahydropyridine is worse." print "\n".join( splitterForIndexing.findall(source))  """ Hello . 1-methyl-4-phenylpyridinium is ultra - bad . However  1-methyl-4-phenyl-1(23)6-tetrahydropyridine is worse . """  
from mercurial import ui hg from mercurial.node import hex  repo = hg.repository('/path/to/repo/root' ui.ui()) fctx = repo.filectx('/path/to/file' 'tip') hexnode = hex(fctx.node())     repo = hg.repository(ui.ui() '/path/to/repo/root' )  
%WINDIR%\WinSxS %WINDIR%\WinSxS\Manifests setup.py &lt;dependency&gt;     &lt;dependentAssembly&gt;         &lt;assemblyIdentity             type="win32"             name="Microsoft.VC90.CRT"             version="9.0.30729.4918"             processorArchitecture="X86"             publicKeyToken="1fc8b3b9a1e18e3b"             language="*"         /&gt;     &lt;/dependentAssembly&gt; &lt;/dependency&gt;  &lt;dependency&gt; version publicKeyToken 
     def view1(request):        import sqlalchemy        data = sqlalchemy.complex_join_magic(...)        ...        payload = {'data': data ...}        return render_to_response('template' payload ...)  
&gt;&gt;&gt; l = [[]] * 10 &gt;&gt;&gt; l [[] [] [] [] [] [] [] [] [] []] &gt;&gt;&gt; l[0].append(1) &gt;&gt;&gt; l [[1] [1] [1] [1] [1] [1] [1] [1] [1] [1]] &gt;&gt;&gt; l = [[] for i in range(10)] &gt;&gt;&gt; l[0].append(1) &gt;&gt;&gt; l [[1] [] [] [] [] [] [] [] [] []]  
class CommonInfo(models.Model):     ...     class Meta:         abstract = True         ordering = ['name']  class Student(CommonInfo):     ...     class Meta(CommonInfo.Meta):         db_table = 'student_info'  
re.findall def getLongestSequenceSize(search_str polymer_str):     matches = re.findall(r'(?:\b%s\b\s?)+' % search_str polymer_str)     longest_match = max(matches)     return longest_match.count(search_str)  polymer_str re.finditer def getLongestSequenceSize(search_str polymer_str):     longest_match = ''     for match in re.finditer(r'(?:\b%s\b\s?)+' % search_str polymer_str):         if len(match.group(0)) &gt; len(longest_match):             longest_match = match.group(0)     return longest_match.count(search_str)  findall finditer finditer 
&lt;?xml version="1.0"?&gt; &lt;rs:data xmlns="http://example.com" xmlns:rs="http://example.com/rs" xmlns:z="http://example.com/z"&gt;   &lt;z:row Attribute1="1" Attribute2="1" /&gt;   &lt;z:row Attribute1="2" Attribute2="2" /&gt;   &lt;z:row Attribute1="3" Attribute2="3" /&gt;   &lt;z:row Attribute1="4" Attribute2="4" /&gt;   &lt;z:row Attribute1="5" Attribute2="5" /&gt;   &lt;z:row Attribute1="6" Attribute2="6" /&gt; &lt;/rs:data&gt;  ElementTree.parse("r.xml").getroot().findall('{http://example.com/z}row') # =&gt; [&lt;Element {http://example.com/z}row at 551ee0&gt; &lt;Element {http://example.com/z}row at 551c60&gt; &lt;Element {http://example.com/z}row at 551f08&gt; &lt;Element {http://example.com/z}row at 551be8&gt; &lt;Element {http://example.com/z}row at 551eb8&gt; &lt;Element {http://example.com/z}row at 551f30&gt;]  
sub [start end] start end &gt;&gt;&gt; sentence = 'Mary had a little lamb' &gt;&gt;&gt; sentence.count('a') 4  
# coding: latin1  &gt;&gt;&gt; s = u'ééé'.encode('latin1') # a string you may get from the database &gt;&gt;&gt; s.decode('latin1') u'\xe9\xe9\xe9'  
year = member("1" "2") + digit*3 month = either("Jan" "Feb" "Mar") day = digit*2 hour_mins = digit*2 + ":" + digit*2  date = month + " " + day + " " + year + " " + hour_mins  DateR = date.compile()  
map() data = [['a''b'] ['a''c'] ['b''d']] search = 'c' for sublist in data:     if sublist[1] == search:         print "Found it!" sublist         break # Prints: Found it! ['a' 'c']  ['b''d'] 
from django.utils.encoding import smart_str  response = HttpResponse(mimetype='application/force-download') # mimetype is replaced by content_type for django 1.7 response['Content-Disposition'] = 'attachment; filename=%s' % smart_str(file_name) response['X-Sendfile'] = smart_str(path_to_file) # It's usually a good idea to set the 'Content-Length' header too. # You can also set any other required headers: Cache-Control etc. return response  response = HttpResponse(content_type='application/force-download')    nginx X-Accel-Redirect apache 
random.seed() /dev/random 
[instance.ticker for instance in Ticker.query.all()]  Ticker.query.filter_by(ticker=new_ticker_value).first()  if Ticker.query.filter_by(ticker=new_ticker_value).first() is None:     Ticker(ticker=new_ticker_value)     session.commit()  
&gt;&gt;&gt; x = [12322234] &gt;&gt;&gt; list(filter((2).__ne__ x)) [1 3 3 4]  &gt;&gt;&gt; x = [12322234] &gt;&gt;&gt; list(filter(lambda a: a != 2 x)) [1 3 3 4]  &gt;&gt;&gt; x = [12322234] &gt;&gt;&gt; filter(lambda a: a != 2 x) [1 3 3 4]  
surface.h #define BLEND_MULT(sR sG sB sA dR dG dB dA) \     dR = (dR &amp;&amp; sR) ? (dR * sR) &gt;&gt; 8 : 0;          \     dG = (dG &amp;&amp; sG) ? (dG * sG) &gt;&gt; 8 : 0;          \     dB = (dB &amp;&amp; sB) ? (dB * sB) &gt;&gt; 8 : 0;  new_val = old_dest * old_source / 256  new_val = old_dest * old_source / 255  255 / 256 1 255 * 255 == 255 1 
&lt;html&gt;  &lt;body&gt;   &amp; == &amp;amp; in HTML  &lt;/body&gt; &lt;/html&gt;  &amp; &amp;amp; &lt;html&gt;  &lt;body&gt;   {{ msg }}  &lt;/body&gt; &lt;/html&gt;  def view(request) :   msg = "&amp; == &amp;amp; in HTML"  def view(request) :   msg = '&lt;img src="http://example.com/pretty.jpg" /&gt;This picture is very pretty'  &lt;html&gt;  &lt;body&gt;   {{ msg|safe }}  &lt;/body&gt; &lt;/html&gt;  
_search _search() pargs[0][1] object.getElementsByTagName(pargs[0][0])         &lt;color_swatch image="red_cardigan.jpg"&gt;Red&lt;/color_swatch&gt;         &lt;color_swatch image="burgundy_cardigan.jpg"&gt;Burgundy&lt;/color_swatch&gt;  .toxml() 
item.setPen(markupColors[drawable.source])  void QAbstractGraphicsShapeItem::setPen(const QPen &amp;pen) {     Q_D(QAbstractGraphicsShapeItem);     prepareGeometryChange();     d-&gt;pen = pen;     d-&gt;boundingRect = QRectF();     update(); }  
from datetime import datetime  myValue = datetime.strptime(self.request.get('date') '%Y-%m-%d')  from datetime import datetime  myValue = datetime.strptime(self.request.get('date') '%Y-%m-%d').date()  
&gt;&gt;&gt; import grp &gt;&gt;&gt; groupinfo = grp.getgrnam('root') &gt;&gt;&gt; print groupinfo[2] 0 &gt;&gt;&gt; print groupinfo.gr_gid 0  &gt;&gt;&gt; import grp &gt;&gt;&gt; admin = grp.getgrnam('admin') &gt;&gt;&gt; admin ('admin' '*' 80 ['root' 'admin' 'mj']) &gt;&gt;&gt; admin.gr_name 'admin' &gt;&gt;&gt; admin.gr_gid 80 &gt;&gt;&gt; admin.gr_mem ['root' 'admin' 'mj']  &gt;&gt;&gt; grp.getgrgid(80) ('admin' '*' 80 ['root' 'admin' 'mj']) &gt;&gt;&gt; len(grp.getgrall()) 73  
pathlib from pathlib import Path  Path('path/to/file.txt').touch()  file.txt 
heapq.merge sorted(itertools.chain(args) cmp)  
import struct from zlib import crc32 import os  # PNG file format signature pngsig = '\x89PNG\r\n\x1a\n'  def swap_palette(filename):     # open in read+write mode     with open(filename 'r+b') as f:         f.seek(0)         # verify that we have a PNG file         if f.read(len(pngsig)) != pngsig:             raise RuntimeError('not a png file!')          while True:             chunkstr = f.read(8)             if len(chunkstr) != 8:                 # end of file                 break              # decode the chunk header             length chtype = struct.unpack('&gt;L4s' chunkstr)             # we only care about palette chunks             if chtype == 'PLTE':                 curpos = f.tell()                 paldata = f.read(length)                 # change the 3rd palette entry to cyan                 paldata = paldata[:6] + '\x00\xff\xde' + paldata[9:]                  # go back and write the modified palette in-place                 f.seek(curpos)                 f.write(paldata)                 f.write(struct.pack('&gt;L' crc32(chtype+paldata)&amp;0xffffffff))             else:                 # skip over non-palette chunks                 f.seek(length+4 os.SEEK_CUR)  if __name__ == '__main__':     import shutil     shutil.copyfile('redghost.png' 'blueghost.png')     swap_palette('blueghost.png')  
class staticmethod:     def __init__(self thefunc): self.f = thefunc     def __call__(self *a **k): return self.f(*a **k)  class classmethod:     def __init__(self thefunc): self.f = thefunc     def __call__(self obj *a **k): return self.f(obj.__class__ *a **k)  @ class sic:   def f(cls): ...   f = classmethod(f)  class classmethod2:     def __init__(self thefunc clsnam):         self.f = thefunc         self.clsnam = clsnam     def __call__(self *a **k):         klass = globals()[self.clsnam]         return self.f(klass *a **k)  class sic2:   def f(cls): ...   f = classmethod2(f 'sic2')  @classmethod class class classmethod3:     def __init__(self thefunc klass):         self.f = thefunc         self.klass = klass     def __call__(self *a **k):         return self.f(self.klass *a **k)  def decorate(klass klassmethodnames):   for n in klassmethodnames:     thefunc = klass.__dict__[n]     setattr(klass n classmethod3(thefunc klass))  class sic2:   def f(cls): ...   def g(self): ...   def h(cls): ... decorate(sic2 ['f' 'h'])  
models.py model.py 
id comment = Comments( ...)  
print print('Hello World') print 'Hello World' 
dnspython 
http://www.w3.org/TR/2001/CR-css3-selectors-20011113/#nth-child-pseudo  ".item:nth-child(odd)"  
for (op code) in zip(s[0::2] s[1::2]):     print op code  from itertools import izip islice for (op code) in izip(islice(s 0 None 2) islice(s 1 None 2)):     print op code  
class Memory(db.Model):     author = db.UserProperty()     content = db.StringProperty(multiline=True)     date = db.DateProperty(auto_now_add=True)  from otherpyfile import Memory import datetime memories = db.GqlQuery("SELECT * from Memory where date = '2007-07-20'")  memories = Memory.all().filter("date=" datetime.datetime.strptime(self.request.get('date') '%Y-%m-%d').date())  memories = Memory.all().filter("date=" self.request.get('date'))  
stack = [(my_list -1)] while stack:     item level = stack.pop()      if isinstance(item list):         for i in reversed(item):             stack.append((i level+1))     else:         print "\t" * level item  
read struct import struct  print(struct.unpack('i' fin.read(4)))  unpack struct.unpack('i' fin.read(4))[0] '&lt;i' 
__init__ __self__ __main__ class Car(object):     def __init__(selfinput):         self.carName = input      def showName(self):         print self.carName def main():     a = Car("bmw")     a.showName() if __name__ == "__main__":     main()  
from sqlalchemy import Table from sqlalchemy.orm import MetaData mapper  metadata = MetaData() metadata.bind = engine  person_table = Table(metadata "tablename" autoload=True)  class Person(object):     pass  mapper(Person person_table)  mapper() def map_class(class_):     table = Table(metadata class_.__name__ autoload=True)     mapper(class_ table)  map_class(Person) map_class(Order)  
sleep 
trunk head trunk 
@with_connection def spam(connection):     # Do something  def spam(connection):     # Do something  spam = with_connection(spam)  def with_connection(f):     def decorated(*args **kwargs):         f(get_connection(...) *args **kwargs)     decorated._original = f     return decorated  @with_connection def spam(connection):     # Do something  spam._original(testcon) # calls the undecorated function  
w = textwrap.TextWrapper(width=90break_long_words=Falsereplace_whitespace=False)  
x = getattr(self source) source other_data 
def overrides(interface_class):     def overrider(method):         assert(method.__name__ in dir(interface_class))         return method     return overrider  class MySuperInterface(object):     def my_method(self):         print 'hello world!'   class ConcreteImplementer(MySuperInterface):     @overrides(MySuperInterface)     def my_method(self):         print 'hello kitty!'  class ConcreteFaultyImplementer(MySuperInterface):     @overrides(MySuperInterface)     def your_method(self):         print 'bye bye!'  &gt;&gt; AssertionError!!!!!!!  
.py #!/usr/bin/env python  env python chmod a+x htswap  /usr/local/bin /usr/bin 
(number % 2 != 0)  bool(number % 2)  if number % 2:     print "Odd!" else:     print "Even!"  
def counts_all(targets paragraph word_regex=r"\w+"):     tally = dict((target 0) for target in targets)     for word in re.findall(word_regex paragraph):         if word in tally:             tally[word] += 1     return [tally[target] for target in targets]  def counts_iter(targets paragraph word_regex=r"\w+"):     tally = dict((target 0) for target in targets)     for matchobj in re.finditer(word_regex paragraph):         word = matchobj.group()         if word in tally:             tally[word] += 1     return [tally[target] for target in targets]   def currently_accepted_solution_augmented(targets paragraph):     def tester(s):          def f(x):             return len(re.findall(r"\b" + x + r"\b" s))         return f     return map(tester(paragraph) targets)  # acknowledgement: # this is structurally the same as one of hughdbrown's benchmark functions def currently_accepted_solution_augmented_without_extra_closure(targets paragraph):     def tester(x):         return len(re.findall(r"\b" + x + r"\b" paragraph))     return map(tester targets)  paragraph.find(target) 
print &gt;&gt;f for title description str for print &gt;&gt;f import urllib import sys import xml.dom.minidom  #The url of the feed address = 'http://www.vg.no/export/Alle/rdf.hbs?kat=nyheter'  f = open('lawl.txt''w')  #Our actual xml document document = xml.dom.minidom.parse(urllib.urlopen(address)) for item in document.getElementsByTagName('item'):     title = item.getElementsByTagName('title')[0].firstChild.data     link = item.getElementsByTagName('link')[0].firstChild.data     description = item.getElementsByTagName('description')[0].firstChild.data      str = link.strip("http://go.vg.no/cgi-bin/go.cgi/rssart/")     print "\n"     print "------------------------------------------------------------------"     print '''"%s"\n\n%s\n\n(%s)''' % (title.encode('UTF8' 'replace')                                             description.encode('UTF8''replace')                                             str.encode('UTF8''replace'))     print "------------------------------------------------------------------"     print "\n"      print &gt;&gt;f "----------------------Nyeste paa VG-------------------------------"     print &gt;&gt;f title.encode('UTF8''replace')     print &gt;&gt;f description.encode('UTF8''replace')     print &gt;&gt;f str.encode('UTF8''replace')     print &gt;&gt;f "------------------------------------------------------------------"     print &gt;&gt;f "\n"  
search match # DOTALL makes . match newlines  re_UNSUB_amsterdam = re.compile(".*UNSUBSCRIBE.*" re.UNICODE | re.DOTALL)  # search will find matches even if they aren't at the start of the string ... re_UNSUB_amsterdam.search(foo) ...  ISO_8859_2_encoded = rawdata.decode('ISO-8859-2')  
 while True:     os.system(kjor)     time.sleep(seconds)  for loop in xrange(240):     os.system(kjor)     time.sleep(seconds)  
pair[1] for line in f:     line = line.rstrip()     pair = line.split(":")     # ...etc  
import sys import codecs  if sys.platform == "win32":     import os msvcrt     msvcrt.setmode(sys.stdout.fileno() os.O_BINARY)  class CRLFWrapper(object):     def __init__(self output):         self.output = output      def write(self s):         self.output.write(s.replace("\n" "\r\n"))      def __getattr__(self key):         return getattr(self.output key)  sys.stdout = CRLFWrapper(codecs.getwriter('utf-16')(sys.stdout)) print "test1" print "test2"  
csv \r\n \n \r\n \r\r\n csv.writer 'b' if sys.version_info &gt;= (300):     f = open(filename 'w' newline='') else:     f = open(filename 'wb')  
UPDATE app_model SET state = 'F' WHERE state &lt;&gt; 'F';  UPDATE app_model SET state = 'F' WHERE id IN (     SELECT id FROM app_model WHERE state &lt;&gt; 'F' ORDER BY order LIMIT 3 ) AS sub;  
import Image im = Image.open('filename.png') im.show()  
profile parent parent = profile.parent parent = profile.parent.get_profile() user profile parent = user.parent user.parent = parent.parent parent.parent = user  children = user.children  for child in children:     child.parent = parent  user.children = parent.children  for child in user.children:     if child is user:         child = parent      child.parent = user  parent.children = children  for child in user.parent.children:     if child is parent:         child = user  
a d parse_str = '[a [a b] [c e f] d]' lst = [s.strip() for s in re.split('[\[\]]' parse_str) if s.strip()]  &gt;&gt;&gt;lst ['a' 'a b' 'c e f' 'd']  
class Foo():     def __init__(self frob frotz)         self.frobnicate = frob         self.frotz = frotz  class Bar(Foo):     def __init__(self frob frizzle)         super().__init__(frob 34)         self.frazzle = frizzle  Foo.__init__(self frob 34) 
keys = [MyModel.ref.get_value_for_datastore(x) for x in referers] referees = db.get(keys)  
sum(float(i) for i in open('/tmp/1.0'))  
stats.OnlineNormalEstimator stats.OnlineNormalEstimator.java test.unit.stats.OnlineNormalEstimatorTest.java 
class TaskListPage(webapp.RequestHandler):     def get(self):         user = users.get_current_user()         tasks_query = Task.all()         tasks = tasks_query.fetch(1000)         if user:           url = users.create_logout_url(self.request.uri)         else:           url = users.create_login_url(self.request.uri)         template_values = {           'tasks': tasks           'url': url           }         path = os.path.join(os.path.dirname(__file__) self.template_name())         self.response.out.write(template.render(path template_values))  class MainPage(TaskListPage):     def template_name(self):         return 'index.html'  class Gadget(TaskListPage):     def template_name(self):         return 'gadget.xml'  
class Project:     def __init__(self name actions=[] subprojects=[]):         self.name = name         self.actions = actions         self.subprojects = subprojects      def add(self action):         self.actions.append(action)      def add_project(self project)         self.subprojects.append(project)  class Project:     def __init__(self name children=[]):         self.name = name         self.children = children      def add(self object):         self.children.append(object)      def mark_done(self):         for c in self.children:             c.mark_done()  class Action:     def __init__(self do):         self.do = do         self.done = False      def mark_done(self):         self.done = True  def get_action_list(self):     actions = []     for c in self.children:         if c.__class__ == self.__class__:             actions += c.get_action_list()         else:             actions.append(c)     return actions  
import re  name = 'CamelCaseName' name = re.sub(r'(?&lt;!^)(?=[A-Z])' '_' name).lower() print(name)  # camel_case_name  pattern = re.compile(r'(?&lt;!^)(?=[A-Z])') name = pattern.sub('_' name).lower()  def camel_to_snake(name):   name = re.sub('(.)([A-Z][a-z]+)' r'\1_\2' name)   return re.sub('([a-z0-9])([A-Z])' r'\1_\2' name).lower()  print(camel_to_snake('camel2_camel2_case'))  # camel2_camel2_case print(camel_to_snake('getHTTPResponseCode'))  # get_http_response_code print(camel_to_snake('HTTPResponseCodeXYZ'))  # http_response_code_xyz  name = 'snake_case_name' name = ''.join(word.title() for word in name.split('_')) print(name)  # SnakeCaseName  
re.sub import re REPLACEMENTS = dict([('find1' 'replace1')                      ('find2' 'replace2')                      ('find3' 'replace3')])  def replacer(m):     return REPLACEMENTS[m.group(0)]  x = 'find1 find2 find3' r = re.compile('|'.join(REPLACEMENTS.keys())) print r.sub(replacer x)  
pexpect 
eval() eval() &gt;&gt;&gt; class Foo(object): ...     pass ...  &gt;&gt;&gt; eval("Foo") &lt;class '__main__.Foo'&gt;  
gtk.combo_box_new_text() combo = gtk.combo_box_new_text() combo.append_text('hello') combo.append_text('world') combo.set_active(0)  box = builder.get_object('some-box') box.pack_start(combo False False)  
         for message in prioritize():             if DontSendEntry.objects.has_address(message.to_address):                 logging.info("skipping email to %s as on don't send list " % message.to_address)                 MessageLog.objects.log(message 2) # @@@ avoid using literal result code                 message.delete()                 dont_send += 1             elif message.when_to_send &gt; datetime.datetime.now():                 continue             else:                 try:                   ... the rest of your code ...  
os.environ["LD_LIBRARY_PATH"] = ...  ld-linux.so.2 ld.so.1 LD_LIBRARY_PATH LD_LIBRARY_PATH xyz.so /some/path LD_LIBRARY_PATH Java /some/path/xyz.so x.so x.so xyz.so x.so -Wl-rpath=/some/path x.so /some/path 
line.split(";")[0]  
Spam = type("Spam" (Foo ) {"echo":echo}) spam = Spam() spam.echo()  
base.html base_object.html &lt;html&gt;     &lt;head&gt;         &lt;title&gt;{% block title %}Default Title{% endblock %}&lt;/title&gt;     &lt;/head&gt;      &lt;body&gt;         &lt;h1&gt;{% block h1 %}{% endblock %}&lt;/h1&gt;     &lt;/body&gt; &lt;/html&gt;  {% block %} {% block %} {% extends "base.html" %} {% block title %}Title{% endblock %} {% block h1 %}Title{% endblock %}  {% block title %}{{ title }}{% endblock %} {% block h1 %}{{ title }}{% endblock %}  base.html django.contrib.sites {{ block.super }} {% block title %}{{ block.super }} - Ask a Question{% endblock %}  
parser.ParseFile(open('sample.xml' 'rb'))  
ALTER TABLE PopByCountry DROP CONSTRAINT Country_Key  
def task():     workon = 'workon myvenv &amp;&amp; '     run(workon + 'git pull')     run(workon + 'do other stuff etc')  prefix def task():     with prefix('workon myvenv'):         run('git pull')         run('do other stuff etc')  command1 &amp;&amp; command2 command1 command2 command1 
sa_proc = Popen('C:\\sa\\sa.exe --?')  os.environ['COMSPEC']  shell=True Popen 
stderr stdout stdout stderr stdout stderr stderr=None stderr stderr stdout stderr=STDOUT select stdout stderr 
%s %i (i) i ORDER 
update original.update(col[user])  user = "user"  matrix = {     "user" : {         "a" : "b"         "c" : "d"         "e" : "f"     } }  col = {     "user" : {         "a" : "b_2"         "c" : "d_2"     } }  original.update(col[user])  print(original)  {'a': 'b_2' 'c': 'd_2' 'e': 'f'}  
 __init__(self name children=[]):   __init__(self name children=None):     if children is None:        children = []  
from multiprocessing import Process Queue  def do_sum(ql):     q.put(sum(l))  def main():     my_list = range(1000000)      q = Queue()      p1 = Process(target=do_sum args=(qmy_list[:500000]))     p2 = Process(target=do_sum args=(qmy_list[500000:]))     p1.start()     p2.start()     r1 = q.get()     r2 = q.get()     print r1+r2  if __name__=='__main__':     main()  
import gc import operator import random import time   nk = 1000  def popcon(d):   for x in xrange(nk*1000):     d['id%s' % x] = random.randrange(100*1000)  def sorted_container():   ctr = dict()   popcon(ctr)   start = time.time()   ctr_sorted = ctr.items()   ctr_sorted.sort(key=operator.itemgetter(1))   stend = time.time()   return stend-start ctr_sorted  def do_update(ctr newones):   start = time.time()   dicol = dict(ctr)   ctr.extend((kv) for (kv) in newones if v!=dicol.get(kNone))   dicnu = dict(newones)   ctr.sort(key=operator.itemgetter(1))   newctr = [(kv) for (kv) in ctr if v==dicnu.get(kv)]   stend = time.time()   return stend-start newctr  def main():   random.seed(12345)   for x in range(3):     duration ctr = sorted_container()     print 'dict-to-sorted %d: %.2f sec len=%d' % (x duration len(ctr))     newones = [('id%s' % y random.randrange(nk*100))                 for y in xrange(nk*990nk*1010)]     duration ctr = do_update(ctr newones)     print 'updt-to-sorted %d: %.2f sec len=%d' % (x duration len(ctr))     del ctr     gc.collect()  main()  $ time python som.py dict-to-sorted 0: 5.01 sec len=1000000 updt-to-sorted 0: 9.78 sec len=1010000 dict-to-sorted 1: 5.02 sec len=1000000 updt-to-sorted 1: 9.12 sec len=1010000 dict-to-sorted 2: 5.03 sec len=1000000 updt-to-sorted 2: 9.12 sec len=1010000  real    0m54.073s user    0m52.464s sys 0m1.258s  
line = p.stdout.readline() while line:     print line     line = p.stdout.readline()  
#ifndef EXAMPLE_H #define EXAMPLE_H  class Math {  public:     int pi() const {         return this-&gt;_pi;     }      void pi(int pi) {         this-&gt;_pi = pi;     }   private:     int _pi; };  #endif  %module example  %{     #define SWIG_FILE_WITH_INIT     #include "example.h" %}  [essentially example.h repeated again]  #include "example.h"  class PropertyVoodoo(type):     """A metaclass. Initializes when the *class* is initialized not     the object. Therefore we are free to muck around the class     methods and specifically descriptors."""      def __init__(cls *a):         # OK so the list of C++ properties using the style described         # in the OP is stored in a __properties__ magic variable on         # the class.         for prop in cls.__properties__:              # Get accessor.             def fget(self):                 # Get the SWIG class using super. We have to use super                 # because the only information we're working off of is                 # the class object itself (cls). This is not the most                 # robust way of doing things but works when the SWIG                 # class is the only superclass.                 s = super(cls self)                  # Now get the C++ method and call its operator().                 return getattr(s prop)()              # Set accessor.             def fset(self value):                 # Same as above.                 s = super(cls self)                  # Call its overloaded operator(int value) to set it.                 return getattr(s prop)(value)              # Properties in Python are descriptors which are in turn             # static variables on the class. So here we create the             # static variable and set it to the property.             setattr(cls prop property(fget=fget fset=fset))          # type() needs the additional arguments we didn't use to do         # inheritance. (Parent classes are passed in as arguments as         # part of the metaclass protocol.) Usually a = [&lt;some swig         # class&gt;] right now.         super(PropertyVoodoo cls).__init__(*a)          # One more piece of work: SWIG selfishly overrides         # __setattr__. Normal Python classes use object.__setattr__         # so that's what we use here. It's not really important whose         # __setattr__ we use as long as we skip the SWIG class in the         # inheritance chain because SWIG's __setattr__ will skip the         # property we just created.         def __setattr__(self name value):             # Only do this for the properties listed.             if name in cls.__properties__:                 object.__setattr__(self name value)             else:                 # Same as above.                 s = super(cls self)                  s.__setattr__(name value)          # Note that __setattr__ is supposed to be an instance method         # hence the self. Simply assigning it to the class attribute         # will ensure it's an instance method; that is it will *not*         # turn into a static/classmethod magically.         cls.__setattr__ = __setattr__  import example from util import PropertyVoodoo  class Math(example.Math):     __properties__ = ['pi']     __metaclass__  = PropertyVoodoo  m = Math() print m.pi m.pi = 1024 print m.pi m.pi = 10000 print m.pi  
__builtin__ __builtin__ __builtins__ 's' __builtins__ __dict__ 
 self.request.params[&lt;form element name with file&gt;].filename  
__new__ class C(int):      def __new__(cls val **kwargs):         inst = super(C cls).__new__(cls val)         inst.a = kwargs.get('a' 0)         return inst  
def writeline(line):     file.write(line + "\n")  file = open(filename "w") ftp.retrlines("retr " + filename writeline)  
class AboutFrame(wx.Frame):      title = "About this program"      def __init__(self):         wx.Frame.__init__(self wx.GetApp().TopWindow title=self.title)  
&gt;&gt;&gt; def magic(left op right): ...     return op(left right) ... &gt;&gt;&gt; magic(5 (lambda a b: a == b) 5) True &gt;&gt;&gt; magic(5 (lambda a b: a == b) 4) False  sort() filter() query.filter(User.name == 'ed') User.name __eq() filter() 
def mergesort(list):     if len(list) &lt; 2:         return list     middle = len(list) / 2     left = mergesort(list[:middle])     right = mergesort(list[middle:])     return merge(left right)  a = ["abc" "de" "f" "ghijkl"] print sorted(a lambda ab: cmp(len(a) len(b)))  
str.strip s = &quot;  \t a string example\t  &quot; s = s.strip()  rstrip s = s.rstrip()  lstrip s = s.lstrip()  s = s.strip(' \t\n\r')  \t \n \r re.sub import re print(re.sub('[\s+]' '' s))  astringexample  
enumerate() def draw_menu(options selected_index):     for counter option in enumerate(options):         if counter == selected_index:             print " [*] %s" % option         else:             print " [ ] %s" % option      options = ['Option 0' 'Option 1' 'Option 2' 'Option 3'] draw_menu(options 2)  counter option (counter option) 
query = MyModel.all(keys_only=True).filter('unique_property' value_to_be_used) entity = query.get() if entity:     raise Exception('unique_property must have a unique value!')  keys_only=True get_by_key_name None None class UniqueConstraint(db.Model):     @classmethod     def check(cls model **values):         # Create a pseudo-key for use as an entity group.         parent = db.Key.from_path(model.kind() 'unique-values')          # Build a list of key names to test.         key_names = []         for key in values:             key_names.append('%s:%s' % (key values[key]))          def txn():             result = cls.get_by_key_name(key_names parent)             for test in result:                 if test: return False             for key_name in key_names:                 uc = cls(key_name=key_name parent=parent)                 uc.put()             return True          return db.run_in_transaction(txn)  UniqueConstraint.check(...) 
os.read os.write os.pipe (1) (2) 
self.sorted_records updated_records self.sorted_data self.sorted_data = [(updated_records.pop(recid value) recid)                      for (value recid) in self.sorted_data]  .pop updated_records self.sorted_data recid value updated_record updated_record self.sorted_data self.sorted_data.extend(value recid                          for recid value in updated_records.iteritems()) self.sorted_data.sort()  
 def mymodelform_factory(maps):      class MyModelForm(forms.ModelForm):           def __init__(self *args **kwargs):                super(MyModelForm self).__init__(*args **kwargs)                #use maps to customize form delcaration here           class Meta:                model = myModel      return MyModelForm   MyFormSet = modelformset_factory(MyModel form=mymodelform_factory(maps))  
def some_func():     print 'in test 1 unproductive'  if __name__ == '__main__':     # test1.py executed as script     # do something     some_func()  import test1  def service_func():     print 'service func'  if __name__ == '__main__':     # service.py executed as script     # do something     service_func()     test1.some_func()  
sub.domain.tld domain.ltd 
ALT-M CTRL-O 
mystartup.py PYTHONSTARTUP def _(v):     if type(v) == type(0.0):         print "%e" % v     else:         print v  result_display.when_type(some_type)(my_print_func) 
# Method of the Element(Node) class. def writexml(self writer indent="" addindent="" newl=""):     # [snip]     if self.childNodes:         writer.write("&gt;%s"%(newl))         for node in self.childNodes:             node.writexml(writerindent+addindentaddindentnewl)         writer.write("%s&lt;/%s&gt;%s" % (indentself.tagNamenewl))     else:         writer.write("/&gt;%s"%(newl))  &gt;&gt;&gt; doc = Document() &gt;&gt;&gt; v = doc.appendChild(doc.createElement('v')) &gt;&gt;&gt; v.toxml() '&lt;v/&gt;' &gt;&gt;&gt; v.childNodes [] &gt;&gt;&gt; v.appendChild(doc.createTextNode('')) &lt;DOM Text node "''"&gt; &gt;&gt;&gt; v.childNodes [&lt;DOM Text node "''"&gt;] &gt;&gt;&gt; v.toxml() '&lt;v&gt;&lt;/v&gt;'  Element toxml 
main import sys traceback  def main():     try:         do main program stuff here         ....     except KeyboardInterrupt:         print "Shutdown requested...exiting"     except Exception:         traceback.print_exc(file=sys.stdout)     sys.exit(0)  if __name__ == "__main__":     main()  
(r'^/(?P&lt;kind&gt;blog)/$' 'view.stuff') (r'^/(?P&lt;kind&gt;news)/$' 'view.stuff')  def stuff( request kind ):     content= news_blog.objects.filter( kind=kind )     return render_to_response( kind+"_page" { 'content': content } )  
? l sys.stdin.encoding sys.stdin.encoding sys.getdefaultencoding() 
# python manage.py runserver 0.0.0.0:8000  
source_file = open("myfile" "r") file_data = list(source_file.read()) source_file.close() file_data.insert(position data) open("myfile" "wb").write(file_data)  
dict get() attribute_value = result.get("attribute" None)  if not "attribute" in result:     ...handle case where there is no attribute value...  
http://my.domain.com/my/webservice webservice my http://my.domain.com/my/webservice/ 
def aaaargh(alist):   for x in alist:     print a     a = 23  a print 
signal signal.signal() thread KeyboardInterrupt SIGINT signal signal KeyboardInterrupt thread.interrupt_main() thread signal 
cell_value type() this_row.append(s.cell_value(rowcol))  this_row.append(s.cell_value(rowcol).encode('utf8'))  cell_value val = s.cell_value(row col) if isinstance(val unicode):     val = val.encode('utf8') this_row.append(val)  
o = C2()  o = classToUse()  
def content_file_name(instance filename):     return '/'.join(['content' instance.user.username filename])  class Content(models.Model):     name = models.CharField(max_length=200)     user = models.ForeignKey(User)     file = models.FileField(upload_to=content_file_name)  
AS INNER JOIN ... ON ... sort_buffer key_buffer EXPLAIN JOIN 
EVT_MENU EVT_MENU_OPEN self.about_menu = wx.Menu()  # or whatever inherited class you have self.Bind(wx.EVT_MENU_OPEN self.on_menu_open)  def on_menu_open(self event):     if event.GetMenu()==self.about_menu:          #do something  
from subprocess import STDOUT check_output  output = check_output(cmd stderr=STDOUT timeout=seconds)  output check_output CalledProcessError proc.communicate() shell=True cmd shell=True check_output() subprocess32 
class Physician(Model):    ...    def sorted_patients(self):       return self.patients.order_by('bed__room__unit'                                     'bed__room__order'                                     'bed__order')  physician.sorted_patients physician.patients notes class NoteType:    ...    def notes(self):       return &lt;calculate note set&gt;  {% for note_type in note_types %}    &lt;div&gt;&lt;h3&gt;{{ note_type }}&lt;/h3&gt;&lt;/div&gt;    {% for note in note_type.notes %}       &lt;p&gt;{{ note }}&lt;/p&gt;    {% endfor %}    &lt;/div&gt; {% endfor %}  
python_dev 
results results = s.execute()  for row in results:     print row  from sqlalchemy.sql import select  s = select([users_table.c.user_name users_table.c.user_country] users_table.c.user_name == username)  for user_name user_country in s.execute():    print user_name user_country  
python tee python tee 
&gt;&gt;&gt; s = "a aa aaa aa" &gt;&gt;&gt; max(s.split() key=len) 'aaa'  split() max() len() 
os.path.relpath() import os root_dir = "myfolder" file_set = set()  for dir_ _ files in os.walk(root_dir):     for file_name in files:         rel_dir = os.path.relpath(dir_ root_dir)         rel_file = os.path.join(rel_dir file_name)         file_set.add(rel_file)  os.path.relpath() 
self.fields['myfield'].choices = [('%s' % d.id '%s' % d.name) for d in MyModel.objects.filter(owners = user)]  
def getstatusoutput(cmd):      """Return (status output) of executing cmd in a shell."""     """This new implementation should work on all platforms."""     import subprocess     pipe = subprocess.Popen(cmd stdout=subprocess.PIPE shell=True universal_newlines=True)       output = "".join(pipe.stdout.readlines())      sts = pipe.returncode     if sts is None: sts = 0     return sts output  
def test_evens():     for i in range(0 5):         yield check_even i i*3  def check_even(n nn):     assert n % 2 == 0 or nn % 2 == 0  
stat.sort(key=lambda x: x.created_at reverse=True)  from operator import attrgetter stat.sort(key=attrgetter('created_at') reverse=True)  
 class Car(models.Model):       manufacturer = models.ForeignKey('Manufacturer')       # ...   class Manufacturer(models.Model):       # ...  
.remove() george_author = Author.objects.get(name="George") for book in Book.objects.filter(authors__name="Georfe"):     book.authors.add(george_author.id)     book.authors.filter(name="Georfe").delete()  .update(id=george_author.id) 
local_var func func print nonlocal print def func1():     local_var = [None]      def func(args):         print args         print "local_var:" local_var[0]          local_var[0] = "local"      func("first")     func("second")  func1()  
from django.db import models  class Province(models.Model):     numberPlate = models.IntegerField(primary_key=True)     name = models.CharField(max_length=20)  class Office(models.Model):     name = models.CharField(max_length=30)     province = models.ForeignKey(Province)   python manage.py syncdb  
def do_something(attribute objects):     results = []     for object in objects:         if hasattr(object attribute):             results.append(getattr(object attribute))     return results  def do_something(attribute objects):     return [getattr(o attribute) for o in objects if hasattr(o attribute)]  
re.split('\n\s*\n' s)  
save state started 
Layout 
if __name__ == '__main__':     t = tk.Tk()     t.iconbitmap('icon.ico')      b = tk.Button(text='test' command=exit)     b.grid(row=0)      t.mainloop()  def threadmain():     t = tk.Tk()     t.iconbitmap('icon.ico')     b = tk.Button(text='test' command=exit)     b.grid(row=0)     t.mainloop()   if __name__ == '__main__':     thread.start_new_thread(threadmain ())      while 1:         sleep(1)  import Tkinter as tk import thread from time import sleep import Queue  request_queue = Queue.Queue() result_queue = Queue.Queue()  def submit_to_tkinter(callable *args **kwargs):     request_queue.put((callable args kwargs))     return result_queue.get()  t = None def threadmain():     global t      def timertick():         try:             callable args kwargs = request_queue.get_nowait()         except Queue.Empty:             pass         else:             print "something in queue"             retval = callable(*args **kwargs)             result_queue.put(retval)          t.after(500 timertick)      t = tk.Tk()     t.configure(width=640 height=480)     b = tk.Button(text='test' name='button' command=exit)     b.place(x=0 y=0)     timertick()     t.mainloop()  def foo():     t.title("Hello world")  def bar(button_text):     t.children["button"].configure(text=button_text)  def get_button_text():     return t.children["button"]["text"]  if __name__ == '__main__':     thread.start_new_thread(threadmain ())      trigger = 0     while 1:         trigger += 1          if trigger == 3:             submit_to_tkinter(foo)          if trigger == 5:             submit_to_tkinter(bar "changed")          if trigger == 7:             print submit_to_tkinter(get_button_text)          sleep(1)  
CREATE TABLE ALTER DATABASE ... CHARACTER SET utf8 COLLATE utf8_general_ci syncdb SET NAMES utf8 
def partition(alist indices):     return [alist[i:j] for i j in zip([0]+indices indices+[None])]  from itertools import izip chain def partition(alist indices):     pairs = izip(chain([0] indices) chain(indices [None]))     return (alist[i:j] for i j in pairs)  import numpy partition = numpy.split  
class Province(models.Model):     numberPlate = models.IntegerField(primary_key=True)     name = models.CharField(max_length=20)     content = models.TextField()     office = models.ManyToManyField(Office)     def __unicode__(self):         return self.name  
[x for b in a for x in b]  
import bisect bisect.bisect_left([1003005008001000] p)  
File '/home/andy/projects/evecharacters/evecharacters/controllers/characters.py' line 9 in &lt;module&gt;   from storm.local import * ImportError: No module named local  from storm.locals import *  from storm.local import *  from storm.local import * 
A:(__init__.py: print 'importing A'    B:(__init__.py: print 'importing B'       C1:(__init__.py: print 'importing C1'           D:(__init__.py: print 'importing D'))       C2:(__init__.py: print 'importing C2'           D:(__init__.py: print 'importing D'))))  C1 C2 D C1 C2 D from A.B import C1  import A.B.C1 C1 = A.B.C1  Python 2.6.2 (release26-maint Apr 19 2009 01:56:41) [GCC 4.3.3] on linux2 &gt;&gt;&gt; from A.B import C1 importing A importing B importing C1 &gt;&gt;&gt; C1 &lt;module 'A.B.C1' from 'A/B/C1/__init__.pyc'&gt; &gt;&gt;&gt;   Python 2.6.2 (release26-maint Apr 19 2009 01:56:41) [GCC 4.3.3] on linux2 &gt;&gt;&gt; import A.B.C1 importing A importing B importing C1 &gt;&gt;&gt; C1=A.B.C1 &gt;&gt;&gt; C1 &lt;module 'A.B.C1' from 'A/B/C1/__init__.pyc'&gt; &gt;&gt;&gt;   from A.B import C1.D A.B.C1.__init__.py import D __init__.py A.B.C1 Python 2.6.2 (release26-maint Apr 19 2009 01:56:41) [GCC 4.3.3] on linux2 &gt;&gt;&gt; from A.B import C1 importing A importing B importing C1 importing D &gt;&gt;&gt;   import models 
scipy.signal.fftconvolve scipy.signal.fftconvolve numpy.correlate from timeit import Timer from numpy import *  times = arange(0 100 .001)  xdata = 1.*sin(2*pi*1.*times) + .5*sin(2*pi*1.1*times + 1.) ydata = .5*sin(2*pi*1.1*times)  def xcorr(x y):     return correlate(x y mode='same')  def fftxcorr(x y):     fx fy = fft.fft(x) fft.fft(y[::-1])     fxfy = fx*fy     xy = fft.ifft(fxfy)     return xy  if __name__ == "__main__":     N = 10     t = Timer("xcorr(xdata ydata)" "from __main__ import xcorr xdata ydata")     print 'xcorr' t.timeit(number=N)/N     t = Timer("fftxcorr(xdata ydata)" "from __main__ import fftxcorr xdata ydata")     print 'fftxcorr' t.timeit(number=N)/N  xcorr 34.3761689901 fftxcorr 0.0768054962158  
{% load my_tags %} {% product bicycle &lt;extra vars ...&gt; %}  @register.inclusion_tag('results.html') def product(item *extra):     #maybe repackage extra variables     #and add them to the returned dictionary     item_form = ItemForm(item) #form.ModelForm instance     return {'item': item 'item_form':item_form ...}  &lt;h1&gt;{{item.title}}&lt;/h1&gt; {{item_form}} ... add some conditional statements depending on extra vars  
Destroy __del__ 
super class Foo(ctypes.BigEndianStructure):     def __init__(self):         super(Foo self).__init__()  
logging a b c a b c 
Screenshot files_in_db = Screenshot.objects.values_list('filename' flat=True).distinct()  files_on_disc = os.listdir(settings.SCREENSHOTS_ON_DISC)  
db.commit()  
${url('/static/resource.css')}  
wx.EVT_KEY_DOWN import wx import wx.aui wx.lib.scrolledpanel  class AppFrame(wx.Frame):     def __init__(self *args **kwds):         wx.Frame.__init__(self *args **kwds)          # The notebook         self.nb = wx.aui.AuiNotebook(self)          # Create a scrolled panel         panel = wx.lib.scrolledpanel.ScrolledPanel(self -1)         panel.SetupScrolling()         self.add_panel(panel 'Scrolled Panel')          # Create a normal panel         panel = wx.Panel(self -1)         self.add_panel(panel 'Simple Panel')          # Set the notebook on the frame         self.sizer = wx.BoxSizer()         self.sizer.Add(self.nb 1 wx.EXPAND)         self.SetSizer(self.sizer)          # Status bar to display the key code of what was typed         self.sb = self.CreateStatusBar()      def add_panel(self panel name):         panel.Bind(wx.EVT_KEY_DOWN self.on_key)         self.nb.AddPage(panel name)      def on_key(self event):         self.sb.SetStatusText("key: %d [%d]" % (event.GetKeyCode() event.GetTimestamp()))         event.Skip()  class TestApp(wx.App):     def OnInit(self):         frame = AppFrame(None -1 'Click on a panel and hit a key')         frame.Show()         self.SetTopWindow(frame)         return 1  if __name__ == "__main__":     app = TestApp(0)     app.MainLoop()  
names = random.sample(open('names.txt').readlines() count) print names  random.sample() split() random.sample() 
Choose(81)*P(one set of 5 Xs)  - Choose(82)*P(a set of 5 Xs and a set of 5 Ys)  + Choose(83)*P(5 Xs 5 Ys 5 Zs)  - Choose(84)*P(5 Xs 5 Ys 5 Zs 5 As)  P(set of 5 Xs) = 20 Choose 5 * 7^15 / 8^20 P(5 Xs 5 Ys) = 20 Choose 55 * 6^10 / 8^20  
request.user from django import forms  class UserForm(forms.Form):     email_address = forms.EmailField(widget = forms.TextInput(attrs = {'class':'required'}))      def __init__(self *args **kwargs):         self.user = kwargs.pop('user' None)         super(UserForm self).__init__(*args **kwargs)      def clean_email_address(self):         email = self.cleaned_data.get('email_address')         if self.user and self.user.email == email:             return email         if UserProfile.objects.filter(email=email).count():             raise forms.ValidationError(u'That email address already exists.')         return email  def someview(request):     if request.method == 'POST':         form = UserForm(request.POST user=request.user)         if form.is_valid():             # Do something with the data             pass     else:         form = UserForm(user=request.user)     # Rest of your view follows  user request.POST data=request.POST 
f.seek(0)  f.seek(0 2)  
csv f = open("my_csv_file.csv" "r") target = open("united.csv" 'w')  f.readline() f.readline() for line in f:     target.write(line)  
#!/usr/bin/env python  def format_box(title body width=80):     box_line = lambda text: "*  " + text + (" " * (width - 6 - len(text))) + "  *"      print "*" * width     print box_line(title)     print "*" * width     print box_line("")      for line in body.split("\n"):         print box_line(line.expandtabs())      print box_line("")     print "*" * width  format_box(     "Here's the title"      "The body will go in here.  Say I put a line break here ---&gt; \n"     "it will go to the next line.  I also want to keep track\n"     "\t&lt;----- of tabs so I can space things out on lines if i have to" );  
settings.py settings.py PYTHONPATH /admin 
add_subplot add_axes     import matplotlib.pyplot as plt      fig = plt.figure()      # add_axes takes [left bottom width height]     border_width = 0.05     ax_size = [0+border_width 0+border_width                 1-2*border_width 1-2*border-width]     ax = fig.add_axes(ax_size)     ax.plot_date((dates dates) (highs lows) '-' color='black')     ax.plot_date(dates closes '-' marker='_' color='black')      ax.set_title('Title')     ax.grid(True)     fig.set_figheight(96)     fig.set_figwidth(24)  set_figheight set_figwidth figure() 
return HttpResponseRedirect(reverse('poll_results' kwargs={'object_id': p.id}))  
.search &gt;&gt;&gt; _.groups() ('')  &gt;&gt;&gt; pat_error = re.compile(r"&gt;(\s*\w+)*&gt;") &gt;&gt;&gt; pat_error.search(text) &lt;_sre.SRE_Match object at 0x83ba0&gt; &gt;&gt;&gt; _.groups() (' the')  \1 &gt;&gt;&gt; pat_error.sub(r"&gt;\1" text) '&lt;hi type="italic"&gt; the&lt;/hi&gt;'  
import os.path shutil  def remove_ext(arg dirname fnames):     argfiles = (os.path.join(dirname f) for f in fnames if f.endswith(arg))     for f in argfiles:         shutil.move(f f[:-len(arg)])  os.path.walk('/some/path' remove_ext '.tex')  
x = int(x) y = int(y) Distance = float(decimal((2*(x*x))((decimal(math.zsin(y)))*(decimal(math.acos(y)))))/2)  
floatsleep from threading import Thread import time import sys  usb_device = 0  def usb_dump():     for i in range(100):         time.sleep(0.001)         print "dumping usb"  class DumpThread(Thread):     def run(self):         usb_dump()  t = DumpThread() t.start() print "Sleep 1" time.sleep(1) print "End" sys.exit(0)  Timer 
__init__ class PaymentsForm(forms.Form):     invoice = forms.CharField(widget=forms.HiddenInput())     total = forms.CharField(widget=forms.HiddenInput())      def __init__(self *args **kwargs):         super(PaymentsForm self).__init__(*args **kwargs)         for i in xrange(10):             self.fields['item_name_%d' % i] = forms.CharField(widget=forms.HiddenInput())  __init__     def __init__(self repetitions *args **kwargs):         super(PaymentsForm self).__init__(*args **kwargs)         for i in xrange(repetitions):             self.fields['item_name_%d' % i] = forms.CharField(widget=forms.HiddenInput())  payments_form = PaymentsForm(10)  
#!/usr/bin/env python  __all__ = ["monotonic_time"]  import ctypes os  CLOCK_MONOTONIC_RAW = 4 # see &lt;linux/time.h&gt;  class timespec(ctypes.Structure):     _fields_ = [         ('tv_sec' ctypes.c_long)         ('tv_nsec' ctypes.c_long)     ]  librt = ctypes.CDLL('librt.so.1' use_errno=True) clock_gettime = librt.clock_gettime clock_gettime.argtypes = [ctypes.c_int ctypes.POINTER(timespec)]  def monotonic_time():     t = timespec()     if clock_gettime(CLOCK_MONOTONIC_RAW  ctypes.pointer(t)) != 0:         errno_ = ctypes.get_errno()         raise OSError(errno_ os.strerror(errno_))     return t.tv_sec + t.tv_nsec * 1e-9  if __name__ == "__main__":     print monotonic_time()  
dispatcher.push_handlers(window)  
myVariable = testVariable or myVariable  myVariable = request.POST.get('query' myVariable)  
somelist = [x for x in somelist if not determine(x)]  somelist[:] somelist[:] = [x for x in somelist if not determine(x)]  somelist itertools from itertools import ifilterfalse somelist[:] = ifilterfalse(determine somelist)  from itertools import filterfalse somelist[:] = filterfalse(determine somelist)  [:] temp = [] while somelist:     x = somelist.pop()     if not determine(x):         temp.append(x) while temp:     somelist.append(templist.pop())  False while somelist: while len(somelist) &gt; 0: 
request.body request.raw_post_data var myEvent = {id: calEvent.id start: calEvent.start end: calEvent.end                allDay: calEvent.allDay }; $.ajax({     url: '/event/save-json/'     type: 'POST'     contentType: 'application/json; charset=utf-8'     data: $.toJSON(myEvent)     dataType: 'text'     success: function(result) {         alert(result.Result);     } });  def save_events_json(request):     if request.is_ajax():         if request.method == 'POST':             print 'Raw Data: "%s"' % request.body        return HttpResponse("OK")    def save_events_json(request):     if request.is_ajax():         if request.method == 'POST':             print 'Raw Data: "%s"' % request.raw_post_data     return HttpResponse("OK")  
numpy numpy.meshgrid() In [113]:  %timeit cartesian(([1 2 3] [4 5] [6 7])) 10000 loops best of 3: 135 µs per loop In [114]:  cartesian(([1 2 3] [4 5] [6 7]))  Out[114]: array([[1 4 6]        [1 4 7]        [1 5 6]        [1 5 7]        [2 4 6]        [2 4 7]        [2 5 6]        [2 5 7]        [3 4 6]        [3 4 7]        [3 5 6]        [3 5 7]])  numpy.meshgrid() In [115]:  %timeit np.array(np.meshgrid([1 2 3] [4 5] [6 7])).T.reshape(-13) 10000 loops best of 3: 74.1 µs per loop In [116]:  np.array(np.meshgrid([1 2 3] [4 5] [6 7])).T.reshape(-13)  Out[116]: array([[1 4 6]        [1 5 6]        [2 4 6]        [2 5 6]        [3 4 6]        [3 5 6]        [1 4 7]        [1 5 7]        [2 4 7]        [2 5 7]        [3 4 7]        [3 5 7]])  
shapes = {'1':Square '2':Circle '3':Triangle} # just the class names in the dict  x = shapes[raw_input()]() # get class from dict then call it to create a shape instance.  
reverse() from django.urls import reverse # or Django &lt; 2.0 : from django.core.urlresolvers import reverse  def myview(request):     return HttpResponseRedirect(reverse('arch-summary' args=[1945]))  args 
import re  def _callback(matches):     id = matches.group(1)     try:         return unichr(int(id))     except:         return id  def decode_unicode_references(data):     return re.sub("&amp;#(\d+)(;|(?=\s))" _callback data)  data = "U.S. Adviser&amp;#8217;s Blunt Memo on Iraq: Time &amp;#8216;to Go Home&amp;#8217;" print decode_unicode_references(data)  
threading.Thread try except SystemExit e: 
for line in someRangeOfLines:     for col in someRangeOfCols:         try:             cell= FooVal.objects().get( col = col line = line )         except FooVal.DoesNotExist:             cell= None  matrix = {} for f in FooVal.objects().all():     matrix[(f.linef.col)] = f  for line in someRangeOfLines:     for col in someRangeOfCols:         cell= matrix.get((linecol)None)  
        try:             f.extractall()         except OSError e:             # http://bugs.python.org/issue6609             if sys.platform.startswith('win'):                 if isinstance(e WindowsError) and e.winerror == 267:                     raise InvalidFile ('uses Windows special name (%s)' % e)             raise  
GET def post(self): "&lt;a href="/newtopic?id={{group.key.id}}" &gt;New topic &lt;/a&gt;"   id= Referer: def get id= &lt;INPUT TYPE=hidden NAME=thegroupid VALUE={{ theid }}&gt; &lt;/INPUT&gt;  theid def post 
'\n'.join(' '.join(x) for x in zip(a b))  
for f in self.engine.processMovie():     c s = dlg.Update(f "Processing frame %d"%f)     if not c: break  for f in self.engine.processMovie(): pass  def update_state(f):     c s = dlg.Update(f "Processing frame %d"%f)     return c self.engine.processMovie(progress=update_state)  
&gt;&gt;&gt; a = [12345] &gt;&gt;&gt; a.append(a.pop(0)) &gt;&gt;&gt; a [2 3 4 5 1]  collections.deque &gt;&gt;&gt; a = collections.deque([12345]) &gt;&gt;&gt; a deque([1 2 3 4 5]) &gt;&gt;&gt; a.rotate(-1) &gt;&gt;&gt; a deque([2 3 4 5 1])  a &gt;&gt;&gt; c = a &gt;&gt;&gt; # rotate a  c 
setattr(MyClass "blah" property(self.get_blah self.set_blah         self.del_blah "bleh blih"))  setattr(type(self) "blah" property(self.get_blah self.set_blah         self.del_blah "bleh blih"))  
def in_ipython():     try:         return __IPYTHON__     except NameError:         return False  
# Red! gc.set_rgb_fg_color(gtk.gdk.Color(0xff 0x0 0x0))  
from javax.swing import * from java.awt import *  class Test(JFrame):     def __init__(self):         JFrame.__init__(self                         'JDesktopPane and JInternalFrame Demo'                         size=(600 300)                         defaultCloseOperation=JFrame.EXIT_ON_CLOSE)          self.desktop = JDesktopPane()         self.contentPane.add(JScrollPane(self.desktop)) # This is the same as self.getContentPane().add(...)          frame = JInternalFrame("Frame" 1 1 1 1 size=(400 400) visible=1)         panel = JPanel()          self.label = JLabel('Hello from Jython')         panel.add(self.label)          self.textfield1 = JTextField('Type something here'15focusGained=self.myOnFocus)           panel.add(self.textfield1)          self.textfield2 = JTextField('and click Copy' 15)         panel.add(self.textfield2)          copyButton = JButton('Copy'actionPerformed=self.noAction)         panel.add(copyButton)          frame.add(panel)         frame.pack()         self.desktop.add(frame)          frame.setSelected(1)         frame.moveToFront()      def myOnFocus(selfevent):         print "testing..."      def noAction (self event):         pass  if __name__ == '__main__':     test = Test()     test.setLocation(100 100)     test.show()  
shutil.rmtree() import errno os stat shutil  def handleRemoveReadonly(func path exc):   excvalue = exc[1]   if func in (os.rmdir os.remove) and excvalue.errno == errno.EACCES:       os.chmod(path stat.S_IRWXU| stat.S_IRWXG| stat.S_IRWXO) # 0777       func(path)   else:       raise  shutil.rmtree(filename ignore_errors=False onerror=handleRemoveReadonly)  
self.textfield1 = JTextField('Type something here'15focusGained=self.myOnFocuskeyPressed=self.myOnKey)  #create textfield2...must be created before can be referenced below.  self.textfield1.setNextFocusableComponent(self.textfield2)  def myOnKey(selfevent):     print str(event) # see all other info you can get.     key_code = event.keyCode     if key_code == 10:         print "you pressed enter"         # simulate the "tab" just focus next textbox...         gotFocus = event.getComponent()         nextToFocus = gotFocus.nextFocusableComponent         nextToFocus.requestFocus()  
@echo off call proc1.bat proc2  
Transform Transform(raw_xml.encode('utf8') stylesheet) 
Profile.objects.filter(name__isnull=False)  
list() def filter_data(data predicate=lambda k v: True):     for d in data:          for k v in d.items():                if predicate(k v):                     yield d   test_data = [{"key1":"value1" "key2":"value2"} {"key1":"blabla"} {"key1":"value1" "eh":"uh"}] list(filter_data(test_data lambda k v: k == "key1" and v == "value1")) # [{'key2': 'value2' 'key1': 'value1'} {'key1': 'value1' 'eh': 'uh'}]  
property_names=[p for p in dir(SomeClass) if isinstance(getattr(SomeClassp)property)]  
import itertools import operator  def main():   for let gen in itertools.groupby(big_gen() key=operator.itemgetter(0)):     secgen = itertools.imap(operator.itemgetter(1) gen)     printer(let secgen)  groupby key= imap printer groupby itertools.groupby 
mysql&gt; SELECT id body MATCH (titlebody) AGAINST     -&gt; ('Security implications of running MySQL as root'     -&gt; IN NATURAL LANGUAGE MODE) AS score     -&gt; FROM articles WHERE MATCH (titlebody) AGAINST     -&gt; ('Security implications of running MySQL as root'     -&gt; IN NATURAL LANGUAGE MODE);  
uSplit('theuser!host')  'theuser!host' is is is None 
&lt;Location "/mysite"&gt;     SetHandler python-program     PythonHandler django.core.handlers.modpython     SetEnv DJANGO_SETTINGS_MODULE mysite.settings     PythonOption django.root /mysite     PythonPath "['/root/djangoprojects/' '/root/djangoprojects/mysite''/root/djangoprojects/mysite/polls' '/var/www'] + sys.path"     PythonDebug On &lt;/Location&gt;  
pipe() 
&gt;&gt;&gt; sorted(myDict.items() key=lambda e: e[1][2]) [('item2' [8 2 3]) ('item1' [7 1 9]) ('item3' [9 3 11])]  key sorted &gt;&gt;&gt; for key value in sorted(myDict.items() key=lambda e: e[1][2]): ...   print key value ...  item2 [8 2 3] item1 [7 1 9] item3 [9 3 11]  
[easy_install]  # i don't like having zipped files. zip_ok = 0  
  %% Main Sizer   wxSizer:add(MainSizer LeftPanel [{proportion0}{border 2} {flag?wxEXPAND bor ?wxALL}])   wxSizer:add(MainSizer RightPanel [{proportion1}{border 2} {flag?wxEXPAND bor ?wxTOP bor ?wxRIGHT bor ?wxBOTTOM}])  
__radd__ class T:     def __init__(selfx):         self.x = x     def __radd__(self other):         return other + self.x  test = (T(1)T(2)T(3)200) print sum(test)  
{us.store('http://www.google.com')} {us} {us.hasnext()} {q.get_nowait()} {threading} 
&gt;&gt;&gt; seg_length = 3 &gt;&gt;&gt; a = range(10) &gt;&gt;&gt; [a[x:x+seg_length] for x in range(0len(a)seg_length)] [[0 1 2] [3 4 5] [6 7 8] [9]]  
top100 = heapq.nlargest(100 iterable [key])  
from cStringIO import StringIO # Python3 use: from io import StringIO import sys  old_stdout = sys.stdout sys.stdout = mystdout = StringIO()  # blah blah lots of code ...  sys.stdout = old_stdout  # examine mystdout.getvalue()  
for key value in stateDict.items(): # .iteritems() in Python 2.x     print "The abbreviation for %s is %s." % (key value)  Map&lt;StringString&gt; stateDict;  for (Map.Entry&lt;StringString&gt; e : stateDict.entrySet())     System.out.println("The abbreviation for " + e.getKey() + " is " + e.getValue() + ".");  
&gt;&gt;&gt; "".join(('foo' 'bar' 'baz')) 'foobarbaz'  myString = myString + line  fileIN = open("testdata.txt" "r") myString = fileIN.read()  for mychar in bigString:     ... do your stuff ...  checked = {} ... if not checked.has_key(myChar):     checked[myChar] = True     ...  
#!/usr/local/env python  import pygtk pygtk.require('2.0') import gtk  def motion_cb(wid context x y time):     l.set_text('\n'.join([str(t) for t in context.targets]))     context.drag_status(gtk.gdk.ACTION_COPY time)     # Returning True which means "I accept this data".     return True  def drop_cb(wid context x y time):     # Some data was dropped get the data     wid.drag_get_data(context context.targets[-1] time)     return True  def got_data_cb(wid context x y data info time):     # Got data.     l.set_text(data.get_text())     context.finish(True False time)  w = gtk.Window() w.set_size_request(200 150) w.drag_dest_set(0 [] 0) w.connect('drag_motion' motion_cb) w.connect('drag_drop' drop_cb) w.connect('drag_data_received' got_data_cb) w.connect('destroy' lambda w: gtk.main_quit()) l = gtk.Label() w.add(l) w.show_all()  gtk.main()  
import datetime  a = datetime.date(2009 1 1) b = datetime.date(2009 7 1) one_day = datetime.timedelta(1)  day = a  while day &lt;= b:     # do important stuff     day += one_day  
#get the row with maximum number of columns maxrowlen = 0 maxrowkey = "" for timesid in d.keys():     if len(timesid.keys()) &gt; maxrowlen:          maxrowlen = len(timesid.keys())          maxrowkey = timesid maxrowcols = sorted(d[maxrowkey].keys())  # prepare the writing cell_format = "%10r"    # or whatever suits your data  # create the output string lines = [] for timesid in d.keys(): # go through all times     line = ""     for col in maxrowcols:  # go through the standard columns          colstr = ""          if col in d[timesid].keys():   # create an entry for each standard column              colstr += cell_format % d[timesid][col]  # either from actual data          else:              colstr += cell_format % ""                      # or blanks          line += colstr     lines.append(line)  text = "\n".join(lines)  
s = set(e[1] for e in l)  
{% for email in Emails %} email {% endfor %}  
[f(x) for x in list]  (f(x) for x in list)  def myFunction(x):     print("called for: " + str(x))     return x * x  originalList = [1 2 3 4 5 6 7 8 9 10] limit = 10 result =   [C2 for C2 in ((myFunction(C) C) for C in originalList) if C2[0] &lt; limit] # result = [C2 for C2 in [(myFunction(C) C) for C in originalList] if C2[0] &lt; limit]  unfiltered = [ (myFunction(C)C) for C in originalList ]              ^                                         ^              +---------- change these to (..) ---------+                                  |                                  v unfiltered = ( (myFunction(C)C) for C in originalList )  
import os os.write(fd os.linesep)  
stdout_handel = os.popen("/var/www/nsmweb/jre1.6.0_14/bin/java -jar /var/www/nsmweb/sla.jar -t %s grep -v DAN")  % data  stdout_handel = os.popen("/var/www/nsmweb/jre1.6.0_14/bin/java -jar /var/www/nsmweb/sla.jar -t %s grep -v DAN"  % data )  
import markdown mode = "remove" # or "replace" or "escape" md = markdown.Markdown(safe_mode=mode) html = md.convert(text)  
if request.method == 'POST':     form = SomeForm(request.POST)     if form.is_valid():         model.attr = form.cleaned_data['attr']         model.attr2 = form.cleaned_data['attr2']         model.save() else:     form = SomeForm() return render_to_response('page.html' {'form': form })  &lt;form method="POST"&gt; {{ form.as_p }} &lt;input type="submit"/&gt; &lt;/form&gt;  
import csv source= csv.reader( open("some file""rb") ) dest= csv.writer( open("another file""wb") ) for row in source:     result= row[:6] + [ row[6]+row[7]+row[8] ] + row[9:]     dest.writerow( result )  &gt;&gt;&gt; data='''JoeSmithNew HavenCT"Moved from Portland CT"goo ... '''.splitlines() &gt;&gt;&gt; rdr= csv.reader( data ) &gt;&gt;&gt; row= rdr.next() &gt;&gt;&gt; row ['' '' 'Joe' 'Smith' 'New Haven' 'CT' 'Moved from Portland CT' '' 'goo' '' ] &gt;&gt;&gt; row[:6] + [ row[6]+row[7]+row[8] ] +  row[9:] ['' '' 'Joe' 'Smith' 'New Haven' 'CT' 'Moved from Portland CTgoo' '']  
raise try except import sys  sentinel = object()  class FakeLoader(object):   def find_module(self fullname path=None):     return self   def load_module(*_):     return sentinel  def fakeHook(apath):   if apath == 'GIVINGUP!!!':     return FakeLoader()   raise ImportError  sys.path.append('GIVINGUP!!!') sys.path_hooks.append(fakeHook)  def isModuleOK(modulename):   result = __import__(modulename)   return result is not sentinel  print 'sys' isModuleOK('sys') print 'Cookie' isModuleOK('Cookie') print 'nonexistent' isModuleOK('nonexistent')  sys True Cookie True nonexistent False  try except 
from __future__ import absolute_import  from .email import ... from ... .py import ... 
all try except AttributeError e: groups = Group.all() except Group __bases__ dir() Group 
lambda name = property(lambda self: self.__name                  lambda self value: setattr(self                                              '_X__name'                                             self.process_value(value)))  setattr lambda lambda __name _X__name setattr 
 from a.b import c as BAR  BAR.foo()  
incoming = 'arbit' result = '{0} hello world {0} hello world {0}'.format(incoming)  
extlinks = {'issue':      ('http://bitbucket.org/birkenfeld/sphinx/issue/%s' 'issue ')}  :issue:`123` %s :issue:`this issue &lt;123&gt;` 
__eq__ class MyClass:     def __init__(self foo bar):         self.foo = foo         self.bar = bar      def __eq__(self other):          if not isinstance(other MyClass):             # don't attempt to compare against unrelated types             return NotImplemented          return self.foo == other.foo and self.bar == other.bar  &gt;&gt;&gt; x == y True  __eq__ foo bar __hash__ class MyClass:     ...      def __hash__(self):         # necessary for instances to behave sanely in dicts and sets.         return hash((self.foo self.bar))  __dict__ __dict__ __cmp__ __eq__ __ne__ 
class EthercatDatagram(Structure):     pass EthercatDatagram._fields_ = [     ("header" EthercatDatagramHeader)     ("packet_data_length" c_int)     ("packet_data" c_char_p)     ("work_count" c_ushort)     ("next_command" POINTER(EthercatDatagram))]  
&gt;&gt;&gt; s = list("Hello zorld") &gt;&gt;&gt; s ['H' 'e' 'l' 'l' 'o' ' ' 'z' 'o' 'r' 'l' 'd'] &gt;&gt;&gt; s[6] = 'W' &gt;&gt;&gt; s ['H' 'e' 'l' 'l' 'o' ' ' 'W' 'o' 'r' 'l' 'd'] &gt;&gt;&gt; "".join(s) 'Hello World'  
1 == 1.0 hash(1) != hash(1.0) x == y hash(x) == hash(y) x y d class W(object):    def __init__(self x):     self.x = x     self.t = type(x)    def __eq__(self other):     t = type(other)     if t != type(self):       return False     return self.x == other.x and self.t == other.t    def __hash__(self):     return hash(self.x) ^ hash(self.t)    def __getattr__(self name):     return getattr(self.x name)  __cmp__ __le__ __repr__ W(1) 1 W(1.0) 1.0 
if __name__ == "__main__":     sys.exit(main())  sys.exit 
ClientThread(arg1 arg2 kwarg1="three times!").start()  run run(arg1 arg2 kwarg1="three times!")  start() ClientThread myThread.setMyAttribute('new value')  Lock run run(self):     localVar = globalVar # only for immutable types     localList = globalList[:] # copy of a list     localDict = globalDict.copy() # Warning! Shallow copy only!  
self.sendLine(pickle.dumps({"size":filesize 'content': contents[:20]}))  
import struct  def getData():     data = []     for i in range( 0 1024 ):         data.append( 0.25 * math.sin( math.radians( i ) ) )     return struct.pack('f'*len(data) *data)  
print packet.data.header[0]  
print &gt;&gt;&gt; print u'\u3053' ?  print a.encode("utf-8") 
wx.SafeYield import time import wx   class Loader(wx.Frame):     def __init__(self):         wx.Frame.__init__(self None)         sizer = wx.BoxSizer(wx.VERTICAL)         self.SetSizer(sizer)         self.btn1 = wx.Button(self label="Option 1")         self.btn2 = wx.Button(self label="Option 2")         sizer.Add(self.btn1 flag=wx.EXPAND)         sizer.Add(self.btn2 flag=wx.EXPAND)         self.btn1.Bind(wx.EVT_BUTTON self.OnOption1)         self.btn2.Bind(             wx.EVT_BUTTON lambda e: wx.MessageBox("There is no option 2")         )      def OnOption1(self event):         self.btn1.Hide()         self.btn2.Hide()         self.Sizer.Add(             wx.StaticText(self label="Loading Option 1...")             1 wx.ALL | wx.EXPAND 15         )         self.Layout()         self.Update()         AppFrame(self).Show()  class AppFrame(wx.Frame):     def __init__(self parent):         wx.Frame.__init__(self parent)         time.sleep(3)         parent.Hide()          # the top window (Loader) is hidden so the app needs to be told to exit         # when this window is closed         self.Bind(wx.EVT_CLOSE lambda e: wx.GetApp().ExitMainLoop())   app = wx.PySimpleApp() app.TopWindow = Loader() app.TopWindow.Show() app.MainLoop()  
string = "number is %d" % 1  string = "float is %.3f" % 3.1425  string = "number %d and float %f" % (13.1415) string = "number %(mynum)d and float %(myfloat)f" % {'mynum':1'myfloat':3.1415}  
Update 
import psutil os  def kill_proc_tree(pid including_parent=True):         parent = psutil.Process(pid)     children = parent.children(recursive=True)     for child in children:         child.kill()     gone still_alive = psutil.wait_procs(children timeout=5)     if including_parent:         parent.kill()         parent.wait(5)  me = os.getpid() kill_proc_tree(me)  
#!/usr/bin/python  import datetime import sys os time string  a = datetime.date(2009 1 1) b = datetime.date(2009 2 1) one_day = datetime.timedelta(1)  day = a  while day &lt;= b:     print "Running query for \"" + str(day) + "\""      sql="""SELECT     d.Date       SUM(d.Revenue)     FROM Table d       WHERE d.Date = '%s'       AND d.Id = %s       GROUP BY d.Date       """ % (str(day) str(2840))      os.system('mysql -h -sN -u  -p -e "%s" &gt; FileName-%s.txt db' % (sql str(day)))     day += one_day  
def iterate_over_all():     for name in __all__:         value = globals()[name]         yield value # or do whatever with it  
$ wget https://bootstrap.pypa.io/get-pip.py $ python get-pip.py  pip uninstall easy_install 
pos_1 = 234 pos_n = 12890 min_width = len(str(pos_n))  raw_str = '... from %0*d to %0*d ...' % (min_width pos_1 min_width pos_n)  
def get_decorator(arg1):     def my_decorator(function):         print "get_decorator argument: %s" % arg1         return function     return my_decorator  class Foo(object):     def __init__(self arg1):         self.var1 = arg1         self.method1 = get_decorator(self.var1)(self.method1)      def method1(self):         print "method1"  foo = Foo("abc") foo.method1()  wrapper decorator1 
build/yourpackage::          nosetests  
u = Table1.objects.get(id=1) print u.id print u.user.user_name  
from django.core.files import File  f = File(open(os.path.join(IMPORT_DIR 'fotos' photo) 'r')) p = Photo(name=f.name image=f parent=supply.supply_ptr) name = str(uuid1()) + os.path.splitext(f.name)[1] p.image.save(name f) p.save()  
urllib.urlencode() key1=val1&amp;key2=val2 urllib.parse.urlencode() p=1&amp;p=2&amp;p=3 &gt;&gt;&gt; import urllib &gt;&gt;&gt; a = (('p'1)('p'2) ('p' 3)) &gt;&gt;&gt; urllib.urlencode(a) 'p=1&amp;p=2&amp;p=3'  &gt;&gt;&gt; urllib.urlencode({'p': [1 2 3]} doseq=True) 'p=1&amp;p=2&amp;p=3'  
&gt;&gt;&gt; from collections import defaultdict &gt;&gt;&gt; l= [(14)(24)(34)(415)(515)(623)(723)(823)(915)(1023)(1115)(1215)] &gt;&gt;&gt; d= defaultdict( list ) &gt;&gt;&gt; for v k in l: ...     d[k].append(v) ...  &gt;&gt;&gt; d defaultdict(&lt;type 'list'&gt; {23: [6 7 8 10] 4: [1 2 3] 15: [4 5 9 11 12]}) &gt;&gt;&gt; [ {k:d[k]} for k in sorted(d) ] [{4: [1 2 3]} {15: [4 5 9 11 12]} {23: [6 7 8 10]}]  
centroids = [prefs[random.choice(users)] for i in range(k)]  centroids = [prefs[u] for random.sample(users k)]  simple_pearson sim_func bestmatch=(00) if d &lt; bestmatch[1]: row[m] row m   row = prefs[user_id]                       for m in items:       if row[m] &gt; 0.0: centroids[i][m]+=(row[m]/len_best)  prefs   row = prefs[user_id]                       for m in row:       centroids[i][m]+=(row[m]/len_best)  row prefs row len_best row 
{% photo.image %}  {{ photo.image }}  {% %} {{ }} Photo Recipe Recipe def details(request slug='0'):     p = get_object_or_404(Recipe slug=slug)     photos = p.photo_set.all()  
from PyQt4 import QtCore QtGui  import os sys  class MainWindow(QtGui.QMainWindow):     def __init__(self parent=None):         super(MainWindow self).__init__(parent)           self.listWidget = QtGui.QListWidget(None)         self.setCentralWidget(self.listWidget)   class MyWidget(QtGui.QWidget):    def __init__(self):         super(MyWidget self).__init__()  if __name__ == '__main__':     app = QtGui.QApplication(sys.argv)     mainWin = MainWindow()     mainWin.show()     sys.exit(app.exec_())  print QtCore.PYQT_VERSION_STR  
from PIL import Image  img = Image.open('1.png') png_info = img.info img.save('2.png' **png_info)  {'transparency': 7 'gamma': 0.45454 'dpi': (72 72)}  
new import inspect import new  def f():     x y = 1 2     def get():         print 'get'     def post():         print 'post'  for c in f.func_code.co_consts:     if inspect.iscode(c):         f = new.function(c globals())         print f # Here you have your function :].  
import codecs buildLog = codecs.open(sys.argv[1] "r" "utf-16").readlines()  print repr(line)  
thelist[:] = [d for d in thelist if d.get('id') != 2]  $ python -mtimeit -s"lod=[{'id':i 'name':'nam%s'%i} for i in range(99)]; import random" "thelist=list(lod); random.shuffle(thelist); thelist[:] = [d for d in thelist if d.get('id') != 2]" 10000 loops best of 3: 82.3 usec per loop  $ python -mtimeit -s"lod=[{'id':i 'name':'nam%s'%i} for i in range(99)]; import random" "thelist=list(lod); random.shuffle(thelist); where=(i for id in enumerate(thelist) if d.get('id')==2).next(); del thelist[where]" 10000 loops best of 3: 72.8 usec per loop  next .next $ python -mtimeit -s"lod=[{'id':i 'name':'nam%s'%i} for i in range(33)]*3; import random" "thelist=list(lod); where=[i for id in enumerate(thelist) if d.get('id')==2]; where.reverse()" "for i in where: del thelist[i]" 10000 loops best of 3: 23.7 usec per loop  $ python -mtimeit -s"lod=[{'id':i 'name':'nam%s'%i} for i in range(33)]*3; import random" "thelist=list(lod); thelist[:] = [d for d in thelist if d.get('id') != 2]" 10000 loops best of 3: 23.8 usec per loop  $ python -mtimeit -s"lod=[{'id':i 'name':'nam%s'%i} for i in range(33)]*133; import random" "thelist=list(lod); where=[i for id in enumerate(thelist) if d.get('id')==2]; where.reverse()" "for i in where: del thelist[i]" 1000 loops best of 3: 1.11 msec per loop $ python -mtimeit -s"lod=[{'id':i 'name':'nam%s'%i} for i in range(33)]*133; import random" "thelist=list(lod); thelist[:] = [d for d in thelist if d.get('id') != 2]" 1000 loops best of 3: 998 usec per loop  
--dist-dir 
os.symlink 
TEST_RUNNER settings.py -s stdout ./manage.py test -s manage.py manage.py ./manage.py test -- -s -s 
TK.Tk()  
def join_with_commas(obj_list):     """Takes a list of objects and returns their string representations     separated by commas and with 'and' between the penultimate and final items     For example for a list of fruit objects:     [&lt;Fruit: apples&gt; &lt;Fruit: oranges&gt; &lt;Fruit: pears&gt;] -&gt; 'apples oranges and pears'     """     if not obj_list:         return ""     l=len(obj_list)     if l==1:         return u"%s" % obj_list[0]     else:             return " ".join(str(obj) for obj in obj_list[:l-1]) \                 + " and " + str(obj_list[l-1])  {{ fruits|join_with_commas }} 
# Always prints 0-9 in order a_list = [0123456789] for x in a_list:     print x  # May or may not print 0-9 in order. Implementation dependent. a_dict = {'0':0'1':1'2':2'3':3'4':4'5':5'6':6'7':7'8':8'9':9} for x in a_dict:     print x  for &lt;element&gt; in &lt;iterable&gt; iterable next() for..in 
{% regroup object_list by start_date|date:"Y-m-d" as objects_by_day %} {% for d in objects_by_day %} ### DO SOMETHING HERE {% endfor %}  
&gt;&gt;&gt; import math &gt;&gt;&gt; print math.sin.__doc__ sin(x)  Return the sine of x (measured in radians).  &gt;&gt;&gt; import math &gt;&gt;&gt; print math.sin(math.radians(68)) 0.927183854567  
import pdb sys traceback def info(type value tb):     traceback.print_exception(type value tb)     pdb.pm() sys.excepthook = info  # code snippet to be included in 'sitecustomize.py' import sys  def info(type value tb):    if hasattr(sys 'ps1') or not sys.stderr.isatty():       # we are in interactive mode or we don't have a tty-like       # device so we call the default hook       sys.__excepthook__(type value tb)    else:       import traceback pdb       # we are NOT in interactive mode print the exception...       traceback.print_exception(type value tb)       print       # ...then start the debugger in post-mortem mode.       pdb.pm()  sys.excepthook = info  # code snippet to be included in 'sitecustomize.py' import sys  def info(type value tb):    if (#hasattr(sys "ps1") or        not sys.stderr.isatty() or         not sys.stdin.isatty()):        # stdin or stderr is redirected just do the normal thing        original_hook(type value tb)    else:        # a terminal is attached and stderr is not redirected debug         import traceback pdb        traceback.print_exception(type value tb)        print        pdb.pm()        #traceback.print_stack()  original_hook = sys.excepthook if sys.excepthook == sys.__excepthook__:     # if someone already patched excepthook let them win     sys.excepthook = info  
if 
lxml.etree.tostring def indent(elem level=0):     i = "\n" + level*"  "     if len(elem):         if not elem.text or not elem.text.strip():             elem.text = i + "  "         if not elem.tail or not elem.tail.strip():             elem.tail = i         for elem in elem:             indent(elem level+1)         if not elem.tail or not elem.tail.strip():             elem.tail = i     else:         if level and (not elem.tail or not elem.tail.strip()):             elem.tail = i  
apply_async(func[ args[ kwds[ callback]]])  from multiprocessing import Pool  def f(x):     return x*x  if __name__ == '__main__':     pool = Pool(processes=1)              # Start a worker processes.     result = pool.apply_async(f [10] callback) # Evaluate "f(10)" asynchronously calling callback when finished.  
&lt;VirtualHost *:80&gt;     DocumentRoot /var/www/vtigercrm/     ErrorLog /var/log/apache2/vtiger.error_log     CustomLog /var/log/apache2/vtiger.access_log combined     &lt;Directory /var/www/vtigercrm&gt;         Options Indexes FollowSymLinks MultiViews         AllowOverride None         Order allowdeny         allow from all     &lt;/Directory&gt;     &lt;Location "/mysite/"&gt;         SetHandler python-program         PythonHandler django.core.handlers.modpython         SetEnv DJANGO_SETTINGS_MODULE mysite.settings         PythonOption django.root /mysite         PythonPath "['/var/www/djangoprojects'] + sys.path"         PythonDebug On     &lt;/Location&gt; &lt;/VirtualHost&gt;  
import bisect m[0][:bisect.bisect(m[0]n[0][-1])]  
QNetworkReply.abort() 
def comparepeople(p1 p2):     o1 = p1.lastname p1.firstname p1.dob     o2 = p2.lastname p2.firstname p2.dob     return cmp(o1o2)  l.sort(key=lambda p:(p.lastname p.firstname p.dob))  
class Foo(object):     def bar(self):         # Do something with 'self'  def baz(inst):     return inst.bar()  Foo.baz = baz  self inst cls 
button.modify_base(gtk.STATE_NORMAL gtk.gdk.color_parse("red")) 
    id         = models.Page.get_by_id(int(str(self.request.get("id"))))       id         = models.Page.get_by_id(int(id))       page_query = models.Page.get(db.Key.from_path('Page' id))  
__dict__ class C(object):     def __init__(self):         self._x = None      @property     def x(self):         """I'm the 'x' property."""         return self._x      @x.setter     def x(self value):         self._x = value      @x.deleter     def x(self):         del self._x  
for line in infile:     data = line.rstrip("\n").split("|")     kind = data[0]     # start of changes     if kind == "OBR":         data[7] += "0000" # check that 7 is correct!     # end of changes     outrecord = "|".join(data)     outfile.write(outrecord + "\n")  fix_targets = {     "OBR": [7]     "XYZ": [1 42]     }  if kind in fix_targets:     for col_index in fix_targets[kind]:         data[col_index] += "0000"  
&lt;title&gt;{% block title %}{% endblock %} - example.com&lt;/title&gt; [...]  &lt;h1&gt;    {{ self.title() }} - example.com &lt;/h1&gt;  
def stupid():     global x     x=False  
    def attach(wc1c2r1r2):         eb = gtk.EventBox()         a = gtk.Alignment(xalign=0.0yalign=0.5)         a.add(w)         eb.add(a)         eb.set_style(self.rowStyle)         def ene(ebev):             eb.set_state(gtk.STATE_PRELIGHT)         def lne(ebev):             eb.set_state(gtk.STATE_NORMAL)         eb.connect('enter-notify-event' ene)         eb.connect('leave-notify-event' lne)          self.table.attach(eb c1 c2 r1 r2                           xoptions=gtk.EXPAND|gtk.FILL                           yoptions=gtk.SHRINK)  self.rowStyle tmpeb = gtk.EventBox() st = tmpeb.get_style().copy() st.bg[gtk.STATE_PRELIGHT] = gtk.gdk.Color(65535655350) self.rowStyle = st  EventBox 
class IntMathMixin:     def __add__(self other):         return type(self)(int(self).__add__(int(other)))     # ... analog for the others  class Hex(IntMathMixin int):     def __repr__(self):          return "0x%x"%self     __str__=__repr__   
attach_row __call__ __init__ 
Python 2.7.5 (default May 15 2013 22:43:36) [MSC v.1500 32 bit (Intel)] Type "copyright" "credits" or "license" for more information.  In [1]: import bs4  In [2]: soup = bs4.BeautifulSoup('&lt;div class="foo bar"&gt;&lt;/div&gt;')  In [3]: soup(attrs={'class': 'bar'}) Out[3]: [&lt;div class="foo bar"&gt;&lt;/div&gt;]  
import sys from PyQt4 import QtCore QtGui QtWebKit  app = QtGui.QApplication(sys.argv)   web = QtWebKit.QWebView() web.load(QtCore.QUrl("http://upload.wikimedia.org/wikipedia/commons/a/af/Tux.png")) web.show()  sys.exit(app.exec_())   
readline readline import readline  readline readline 
ListenerBase = win32com.client.getevents("SAPI.SpInProcRecoContext") class Listener(ListenerBase):     def OnRecognition(self _1 _2 _3 Result):         """Callback whenever something is recognized."""         # Work with Result      def OnHypothesis(self _1 _2 Result):         """Callback whenever we have a potential match."""         # Work with Result      while not self.shutting_down.is_set():         # Trigger the event handlers if we have anything.         pythoncom.PumpWaitingMessages()          time.sleep(0.1) # Don't use up all our CPU checking constantly  
fh = open("NUL""w") subprocess.Popen("taskkill /PID " + str(p.pid) stdout = fh stderr = fh) fh.close()  
class SubSectionAdmin(admin.ModelAdmin):     # ...     def change_view(self request object_id extra_context=None):                self.exclude = ('field' )         return super(SubSectionAdmin self).change_view(request object_id extra_context)  
&gt;&gt;&gt; dict( (nint(v)) for nv in (a.split('=') for a in string.split() ) ) {'a': 0 'c': 3 'b': 1}  
import sys import re  stars_re = re.compile('^[*]+$' re.MULTILINE) file_line_re = re.compile(r'^File "(.*?)" line (\d*) in (.*)$')  doctest_output = sys.stdin.read() chunks = stars_re.split(doctest_output)[1:-1]  for chunk in chunks:     chunk_lines = chunk.strip().splitlines()     m = file_line_re.match(chunk_lines[0])      file line module = m.groups()     failed_example = chunk_lines[2].strip()     expected = chunk_lines[4].strip()         got = chunk_lines[6].strip()      print (file line module failed_example expected got)  
DEBUG = True TEMPLATE_DEBUG = DEBUG  
&gt;&gt;&gt; print "%d%%" % 100 100%  &lt;TABLE border="0" cellpadding="0" cellspacing="0" width="100%%"&gt;  C:\Python26\Lib\site-packages&gt;python C:\Python26\Lib\site-packages\docutils-0.5- py2.6.egg\EGG-INFO\scripts\rst2html.py --template=c:\temp\layout2.tpl ^Z &lt;TABLE border="0" cellpadding="0" cellspacing="0" width="100%"&gt;  
map $ python -mtimeit -s'xs=range(10)' 'map(hex xs)' 100000 loops best of 3: 4.86 usec per loop $ python -mtimeit -s'xs=range(10)' '[hex(x) for x in xs]' 100000 loops best of 3: 5.58 usec per loop  $ python -mtimeit -s'xs=range(10)' 'map(lambda x: x+2 xs)' 100000 loops best of 3: 4.24 usec per loop $ python -mtimeit -s'xs=range(10)' '[x+2 for x in xs]' 100000 loops best of 3: 2.32 usec per loop  
import random  iterations = 100000  doors = ["goat"] * 2 + ["car"] change_wins = 0 change_loses = 0  for i in xrange(iterations):     random.shuffle(doors)     # you pick door n:     n = random.randrange(3)     # monty picks door k k!=n and doors[k]!="car"     sequence = range(3)     random.shuffle(sequence)     for k in sequence:         if k == n or doors[k] == "car":             continue     # now if you change you lose iff doors[n]=="car"     if doors[n] == "car":         change_loses += 1     else:         change_wins += 1  print "Changing has %s wins and %s losses" % (change_wins change_loses) perc = (100.0 * change_wins) / (change_wins + change_loses) print "IOW by changing you win %.1f%% of the time" % perc  Changing has 66721 wins and 33279 losses IOW by changing you win 66.7% of the time  
s!foo!bar! s/foo/bar/ 
import matplotlib matplotlib.use('Agg') # before import pylab import pylab  
unset PYTHONPATH unset PYTHONSTARTUP $ python -c'import re; print re.__file__'  /System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.pyc  
for filename in os.listdir("."):     lines = open(filename).readlines()     for i line in enumerate(lines):         if "foo" in line:             for x in lines[i-5 : i+6]:                 print x  import collections  def sliding_windows(it):   fifo = collections.deque()   # prime the FIFO with the first 10    for i line in enumerate(it):     fifo.append(line)     if i == 9: break   # keep yielding 11-line sliding-windows   for line in it:     fifo.append(line)     yield fifo 5     fifo.popleft()  for w i in sliding_windows(open(filename)):   if "foo" in w[i]:     for line in w: print line  
string.split() ' '.join(my_string.split())  TEST = """This is        a test\twith a   mix of\ttabs     newlines and repeating whitespace"""  print ' '.join(TEST.split()) # Prints: # This is a test with a mix of tabs newlines and repeating whitespace  
iterparse from cStringIO import StringIO import xml.etree.ElementTree as ET  NS_MAP = {     'http://www.red-dove.com/ns/abc' : 'rdc'     'http://www.adobe.com/2006/mxml' : 'mx'     'http://www.red-dove.com/ns/def' : 'oth' }  DATA = '''&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;rdc:container xmlns:mx="http://www.adobe.com/2006/mxml"                  xmlns:rdc="http://www.red-dove.com/ns/abc"                  xmlns:oth="http://www.red-dove.com/ns/def"&gt;   &lt;mx:Style&gt;     &lt;oth:style1/&gt;   &lt;/mx:Style&gt;   &lt;mx:Style&gt;     &lt;oth:style2/&gt;   &lt;/mx:Style&gt;   &lt;mx:Style&gt;     &lt;oth:style3/&gt;   &lt;/mx:Style&gt; &lt;/rdc:container&gt;'''  tree = ET.parse(StringIO(DATA)) some_node = tree.getroot().getchildren()[1] print ET.fixtag(some_node.tag NS_MAP) some_node = some_node.getchildren()[0] print ET.fixtag(some_node.tag NS_MAP)  
# In b.py: def cause_a_to_do_something():     import a     a.do_something()  import b cause_a_to_do_something() import 
elem.sourceline 
&gt;&gt;&gt; cPickle.dump(Inf file("c:/temp/a.pcl"'wb') -1) &gt;&gt;&gt; cPickle.load(file("c:/temp/a.pcl"'rb')) 1.#INF                   -- may be platform dependent what prints here.  
&gt;&gt;&gt; import urlparse &gt;&gt;&gt; urlparse.urljoin('http://stackoverflow.com/questions/ask' ...                  '/users/48465/jader-dias') 'http://stackoverflow.com/users/48465/jader-dias'  
uncompressedData = bz2.BZ2File(zipFile).read()  open(filename) open(filename 'r') open(filename 'rb') bz2.BZ2File 2.* open 3.* '\0x1A' 'rb' open bz2.BZ2File 
def graburl(url **params):     print "LOG: Going to %s with %r" % (url params)     params = urllib.urlencode(params)     return urllib.urlopen(url params)  f = graburl("https://example.com/cgi-bin/query" spam=1 eggs=2 bacon=0)  
DeclarativeFieldsMetaclass base_fields media class Form(BaseForm):     "A collection of Fields plus their associated data."     # This is a separate class from BaseForm in order to abstract the way     # self.fields is specified. This class (Form) is the one that does the     # fancy metaclass stuff purely for the semantic sugar -- it allows one     # to define a form using declarative syntax.     # BaseForm itself has no way of designating self.fields.     __metaclass__ = DeclarativeFieldsMetaclass  type EmployeeForm return type(EmployeeForm)('EmployeeForm' (forms.Form ) EmployeeForm.__dict__)  __dict__ type 
class LocalTestHost:      def __init__(self mst port local_ip remote_if_mac remote_if_ip service_port):         .         . &lt;some initialization code&gt;         .          # This is the faulty line         self.__host_operations = HostOperationsFactory().create(                         local_ip port mst remote_if_ip)  &gt;&gt;&gt; test_hosts.LocalTestHost(123456) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in ?   File "test_hosts.py" line 709 in __init__     self.__host_operations = HostOperationsFactory().create(   File "test_hosts.py" line 339 in create     remote_ip)   File "test_hosts.py" line 110 in __init__     packet_size remote_ip) TypeError: __init__() takes exactly 7 arguments (6 given)  create 
v1 = 0  v1 0 
for property value in vars(theObject).items():     print(property &quot;:&quot; value)  __slots__ __dict__ 
__setattr__ type(type(source)) for property in self.request.arguments():   if property != 'id':     setattr(source property self.request.get(property))  request.get 
query = db.GqlQuery("SELECT * FROM Entry WHERE editor &gt; :1"None)  ORDER BY 
resize() from PIL import Image #...  img = img.resize((150 newheight) Image.ANTIALIAS)  
regexpHandler = re.compile('(&lt;div class="deg"&gt;.*?&lt;/div&gt;)')  regexpHandler = re.compile('&lt;div class="deg"&gt;(.*?)&lt;/div&gt;')  result = regexHandler.search( pageData ) matchedText = result.groups()[0]  
id(x)  x==y x.ref is y.ref hash hash 
d = list d = {'file_name':'thisfile.flt' 'item_name':'box' 'item_height':'8.7'       'item_width':'10.5' 'item_depth':'2.2' 'texture_file': 'red.jpg'}  order = {     'file_name':    0     'item_name':    1      'item_height':  2     'item_width':   3     'item_depth':   4     'texture_file': 5 }  ['thisfile.flt' 'box' '8.7' '10.5' '2.2' "red.jpg'] def doit(d order):   return  [d[k] for k in sorted(order key=order.get)]  
os.path.join(build_dir os.path.basename(source_file))  build_dir / path(source_file).name  path(build_dir path(source_file).name)  
cmd.exe shell=True cmd.exe /c COMSPEC cmd.exe w9xpopen UNIX /bin/sh -c gcc --version  /bin/sh -c "gcc --version" gcc --version  sh -c Read commands from the command_string operand instead of from the standard input.  Special parameter 0 will be set from the command_name operand and the positional parameters ($1 $2 etc.)  set from the remaining argument operands. --- subprocess.py.orig  2009-04-19 04:43:42.000000000 +0200 +++ subprocess.py       2009-08-10 13:08:48.000000000 +0200 @@ -9907 +9907 @@                  args = list(args)               if shell: -                args = ["/bin/sh" "-c"] + args +                args = ["/bin/sh" "-c"] + [" ".join(args)] + args               if executable is None:                  executable = args[0]  
import marshal def foo(x): return x*x code_string = marshal.dumps(foo.func_code)  import marshal types  code = marshal.loads(code_string) func = types.FunctionType(code globals() "some_func_name")  func(10)  # gives 100  
decimal decimal.Decimal.__repr__ return 'Decimal("%s")' % str(self)  return "Decimal('%s')" % str(self)  str() 
def check_file(file size=0):     try:         if not os.path.exists(file):             return False         if (size != 0 and os.path.getsize(file) != size):             return False         return True     except IOError:         return False # or True whatever your default is  while (check_file(rempdgself._ndays*130160640) is False):     try:         shutil.copy2(locpdg rempdg)     except IOError:         pass # ignore the IOError and keep going  
DATA = { u'spam': u'eggs' u'foo': frozenset([u'Gah!']) u'bar': { u'baz': 97 }          u'list': [u'list' (True u'Maybe') set([u'and' u'a' u'set' 1])]}  def convert(data):     if isinstance(data basestring):         return str(data)     elif isinstance(data collections.Mapping):         return dict(map(convert data.iteritems()))     elif isinstance(data collections.Iterable):         return type(data)(map(convert data))     else:         return data  print DATA print convert(DATA) # Prints: # {u'list': [u'list' (True u'Maybe') set([u'and' u'a' u'set' 1])] u'foo': frozenset([u'Gah!']) u'bar': {u'baz': 97} u'spam': u'eggs'} # {'bar': {'baz': 97} 'foo': frozenset(['Gah!']) 'list': ['list' (True 'Maybe') set(['and' 'a' 'set' 1])] 'spam': 'eggs'}  data.encode('utf-8') str(data) 
os._exit finally atexit 
    self.lock.acquire()     print "\nSubprocess started"     p = subprocess.Popen( # etc     stdout_value = proc.communicate('through stdin to stdout')[0]     self.lock.release()  stdout_value Queue.Queue() get get_nowait put Queue import Queue self.lock self.q = Queue.Queue() __init__ stdout_value = proc.communicate(... self.q.put(stdout_value) jsonrpc_run_procs while not self.q.empty():   result = self.q.get()   print 'One result is %r' % result  empty 
a= [1 2 3 4 5] b= [1 2 3 4 5 6 7 8] c= [8 9 10 12 23 43 45 56 76 78] d= [1 2 3 4 5 6 7 8 45 56 76 78 12 23 43]  fh = open("out.txt""w")  # header line fh.write("a\tb\td\tc\n") # rest of file for i in map(lambda *row: [elem or "" for elem in row] *[abdc]):   fh.write("\t".join(map(stri))+"\n")  fh.close()  
from __future__ import with_statement import inspect  class button(object):   def __enter__(self):     # keep track of all that's already defined BEFORE the `with`     f = inspect.currentframe(1)     self.mustignore = dict(f.f_locals)    def __exit__(self exc_type exc_value traceback):     f = inspect.currentframe(1)     # see what's been bound anew in the body of the `with`     interesting = dict()     for n in f.f_locals:       newf = f.f_locals[n]       if n not in self.mustignore:         interesting[n] = newf         continue       anf = self.mustignore[n]       if id(newf) != id(anf):         interesting[n] = newf     if interesting:       print 'interesting new things: %s' % ' '.join(sorted(interesting))       for n v in interesting.items():         if isinstance(v type(lambda:None)):           print 'function %r' % n           print v()     else:       print 'nothing interesting'  def main():   for i in (1 2):     def ignorebefore():       pass     with button():       def testing(i=i):         return i     def ignoreafter():       pass  main()  __exit__ with with == is def testing def with inspect 
readUTF() s = "abc" out.write( struct.pack("&gt;H" len(s) )) out.write( struct.pack("&gt;%ds" % len(s) s ))  &gt;H 
field.widget = field.hidden_widget  field.widget = field.hidden_widget()  
login.py scriptpath class Family(family.Family):     def __init__(self):         family.Family.__init__(self)         self.name = 'mywiki'         self.langs = { 'en' : 'local.example.com'}      def scriptpath(self code):         return '/mywiki'      def version(self code):         return '1.13.5'      def isPublic(self):         return False      def hostname(self code):         return 'local.example.com'      def protocol(self code):         return 'https'  import wikipedia site = wikipedia.getSite('en' 'mywiki') print site.login_address()  login.py response = urllib2.urlopen(urllib2.Request(self.site.protocol() + '://' + self.site.hostname() + address data headers))  from ntlm import HTTPNtlmAuthHandler  user = 'DOMAIN\User' password = "Password" url = self.site.protocol() + '://' + self.site.hostname()  passman = urllib2.HTTPPasswordMgrWithDefaultRealm() passman.add_password(None url user password) # create the NTLM authentication handler auth_NTLM = HTTPNtlmAuthHandler.HTTPNtlmAuthHandler(passman)  # create and install the opener opener = urllib2.build_opener(auth_NTLM) urllib2.install_opener(opener)  response = urllib2.urlopen(urllib2.Request(self.site.protocol() + '://' + self.site.hostname() + address data headers))  
claimer = User.objects.get(name='test') claimed_opponents = User.objects.filter(gameclaim_opponent__me__user=claimer)  
subprocess popen2 if r.read(1): r 
def ntuples(lst n):     return zip(*[lst[i:]+lst[:i] for i in range(n)])  from itertools import * def ntuples(lst n):     return izip(*[chain(islice(lstiNone) islice(lstNonei)) for i in range(n)])  from itertools import * def ntuples(seq n):     iseq = iter(seq)     curr = head = tuple(islice(iseq n))     for x in chain(iseq head):         yield curr         curr = curr[1:] + (x)  
timeit() t.timeit(1)  count = 1000 print t.timeit(count) / count  
f = open("output.dat" "w") f.write(my_data)  f = open("output.dat" "wb") f.write(my_data)  
make_object_list=True archive_year object_list url(r'^(?P&lt;year&gt;\d{4})/$' 'archive_year' info_dict name="entry_archive_year")  info_dict queryset date_field url(r'^(?P&lt;year&gt;\d{4}/$' 'archive_year' dict(info_dictmake_object_list=True)         name="entry_archive_year")  archive_year make_object_list object_list make_object_list True object_list object_list object_list False entry_archive_year archive_year date_list date_list datetime.date date_list date_list entry_archive_year &lt;ul&gt;   {% for month in date_list %}      &lt;li&gt;&lt;a href="/blog/{{month|date:"Y"}}/{{month|date:"b"}}&gt;           {{month|date:"F"}}&lt;/a&gt;&lt;/li&gt;   {% endfor %} &lt;/ul&gt;  date_list 
import dateutil.parser date1 = dateutil.parser.parse("December 12th 2008") date2 = dateutil.parser.parse("January 1st 2009")  
class Foo(object):     @classmethod     def callRule(cls):         Bar.ruleOn(cls.RULE1)         Bar.ruleOn(cls.RULE2)      @classmethod     def check(cls):         print "I am check"   Foo.RULE1 = Foo.check  Foo.RULE2 = (Foo.check)  
subprocess.PIPE 
from __future__ import absolute_import  
inspect.ismethod import inspect  def foo(): pass  class Test(object):     def method(self): pass  print inspect.ismethod(foo) # False print inspect.ismethod(Test) # False print inspect.ismethod(Test.method) # True print inspect.ismethod(Test().method) # True  print callable(foo) # True print callable(Test) # True print callable(Test.method) # True print callable(Test().method) # True  callable lambda __call__ im_class im_self assert inspect.ismethod(Test().method)    
usage description= __doc__.split('\n\n')[:2]  optparse optparse "Usage: " usage 
__setitem__ dict.__setitem__(self key value class ImmutableDict(dict):     def __setitem__(self key value):         if key not in self:              raise KeyError("Immutable dict")         dict.__setitem__(self key value)  d = ImmutableDict(foo=1 bar=2) d['foo'] = 3 print(d) d['baz'] = 4 # Raises error  dict.update() setdefault() dict.__delitem__() dict.clear() dict.pop() dict.popitem() 
__init__.py  
-- url: /loadusers  script: myloader.py  login: admin  
matches = [s for s in mytext if 'foobar' in s]  matches = [s for s in mytext if s.startswith('foobar')]  
import py_streamhtmlparser parser = py_streamhtmlparser.HtmlParser() html = """&lt;html&gt;&lt;body&gt;&lt;a href='http://google.com' id=100&gt;         link&lt;/a&gt;&lt;p&gt;&lt;a href=heise.de/&gt;&lt;/body&gt;&lt;/html&gt;""" cur_attr = cur_value = None for index character in enumerate(html):    parser.Parse(character)    if parser.State() == py_streamhtmlparser.HTML_STATE_VALUE:       # we are in an attribute value. Record what we got so far       cur_tag = parser.Tag()       cur_attr = parser.Attribute()       cur_value = parser.Value()       continue    if cur_value:       # we are not in the value anymore but have seen one just before       print "%r %r %r" % (cur_tag cur_attr cur_value)       cur_value = None  'a' 'href' 'http://google.com' 'a' 'id' '100' 'a' 'href' 'heise.de/'  
Init = numpy.asarray [(10.0 200.0 500.0 10.0)]  Init = numpy.asarray ([10.0 200.0 500.0 10.0])  [ asarray x[17] 
kill taskkill Ctrl+C Ctrl+C raw_input(...) Ctrl+Z Ctrl+C 0x03 
ipython -pdb ipython 
operator operator.so /usr/local/lib/lib-dynload 
nonlocal x = 0 def outer():     x = 1     def inner():         x = 2         print("inner:" x)      inner()     print("outer:" x)  outer() print("global:" x)  # inner: 2 # outer: 1 # global: 0  nonlocal inner() x outer() x x = 0 def outer():     x = 1     def inner():         nonlocal x         x = 2         print("inner:" x)      inner()     print("outer:" x)  outer() print("global:" x)  # inner: 2 # outer: 2 # global: 0  global x x = 0 def outer():     x = 1     def inner():         global x         x = 2         print("inner:" x)      inner()     print("outer:" x)  outer() print("global:" x)  # inner: 2 # outer: 1 # global: 2  
random import random random.sample(set([1 2 3 4 5 6]) 2)  
class Test(object):     def _decorator(foo):         def magic( self ) :             print "start magic"             foo( self )             print "end magic"         return magic      @_decorator     def bar( self ) :         print "normal call"  test = Test()  test.bar()  &gt;&gt;&gt; import stackoverflow &gt;&gt;&gt; test = stackoverflow.Test() &gt;&gt;&gt; test.bar() start magic normal call end magic &gt;&gt;&gt;   class Test(object):     def _decorator(foo):         def magic( self ) :             print "start magic"             foo( self )             print "end magic"         return magic      @_decorator     def bar( self ) :         print "normal call"      _decorator = staticmethod( _decorator )  class TestB( Test ):     @Test._decorator     def bar( self ):         print "override bar in"         super( TestB self ).bar()         print "override bar out"  print "Normal:" test = Test() test.bar() print  print "Inherited:" b = TestB() b.bar() print  Normal: start magic normal call end magic  Inherited: start magic override bar in start magic normal call end magic override bar out end magic  
magic_reverse_mapping magic_reverse_mapping = {}  class MagicRegister(type):    def __new__(meta name bases dict):       cls = type.__new__(meta name bases dict)       magic_reverse_mapping[dict['_internal_attribute']] = cls       return cls  class A(object):     __metaclass__ = MagicRegister     _internal_attribute = 'A attribute'  afoo = magic_reverse_mapping['A attribute']()  magic_reverse_mapping = {}  def magic_register(cls):    magic_reverse_mapping[cls._internal_attribute] = cls    return cls  @magic_register class A(object):     _internal_attribute = 'A attribute'  afoo = magic_reverse_mapping['A attribute']()  reverse_mapping = {}  class A(object):     _internal_attribute = 'A attribute'  reverse_mapping[A._internal_attribute] = A  
writing all the if verbose and not silent is messy      try:         a_method()     except OSError e:         print "a_method(): %s" % e.strerror         sys.exit(-1)      docall(a_method)  def docall(acallable): 
multipart/form-data MultiPartForm 
class Wrapper(object):   def __init__(self it):     self.it = it     self.pushedback = []   def __iter__(self):     return self   def next(self):     if self.pushedback:       return self.pushedback.pop()     else:       return self.it.next()   def pushback(self val):     self.pushedback.append(val)  next(self.it) self.it.next() __next__ next import itertools    ... o peek = itertools.tee(o) if isneat(peek.next()): ...  o 
def Struct(*args **kwargs):     def init(self *iargs **ikwargs):         for kv in kwargs.items():             setattr(self k v)         for i in range(len(iargs)):             setattr(self args[i] iargs[i])         for kv in ikwargs.items():             setattr(self k v)      name = kwargs.pop("name" "MyStruct")     kwargs.update(dict((k None) for k in args))     return type(name (object) {'__init__': init '__slots__': kwargs.keys()})  __init__() &gt;&gt;&gt; Person = Struct('fname' 'age') &gt;&gt;&gt; person1 = Person('Kevin' 25) &gt;&gt;&gt; person2 = Person(age=42 fname='Terry') &gt;&gt;&gt; person1.age += 10 &gt;&gt;&gt; person2.age -= 10 &gt;&gt;&gt; person1.fname person1.age person2.fname person2.age ('Kevin' 35 'Terry' 32) &gt;&gt;&gt;   namedtuple() 
print time.strftime(some known struct_time) print repr(date) latest.GetCreatedAt() 
self.close() 
try/except def RepresentsInt(s):     try:          int(s)         return True     except ValueError:         return False  &gt;&gt;&gt; print RepresentsInt("+123") True &gt;&gt;&gt; print RepresentsInt("10.0") False  
myList = filter(lambda x: myDict.get(x[1] None) != x[0] myList)  None 
__str__ __repr__ t2.__repr_() __unicode__ __str__ 
__future__ &gt;&gt;&gt; from __future__ import division &gt;&gt;&gt; a = 4 &gt;&gt;&gt; b = 6 &gt;&gt;&gt; c = a / b &gt;&gt;&gt; c 0.66666666666666663  
settings.INSTALLED_APPS templates/contact/update_form.html {{ form.field.label }} ContactInfoForm __init__ * * 
&gt;&gt;&gt; FLAGS = ('User' 'Redo' 'Enqueue' 'Cache' 'OS' ...          'Real Application Clusters' 'SQL' 'Debug') &gt;&gt;&gt; def getFlags(value): ...   flags = [] ...   for i flag in enumerate(FLAGS): ...     if value &amp; (1 &lt;&lt; i): ...       flags.append(flag) ...   return flags ... &gt;&gt;&gt; print getFlags(22) ['Redo' 'Enqueue' 'OS']  &gt;&gt;&gt; def binaryDecomposition(value): ...   return [1 &lt;&lt; i for i in xrange(len(FLAGS)) if value &amp; (1 &lt;&lt; i)] ... &gt;&gt;&gt; print binaryDecomposition(22) [2 4 16]  
class SomeModelForm(forms.ModelForm):     def __init__(self *args **kwargs):         super(SomeModelForm self).__init__(*args **kwargs)         self.fields['some_field'].widget = forms.CheckboxSelectMultiple()  
x = BlogModel.BlogModel()  from billion.model import BlogModel  from billion.model.BlogModel import BlogModel  x = BlogModel()  
import urllib2 import re from BeautifulSoup import BeautifulSoup  url = "http://forums.epicgames.com/archive/index.php?f-356-p-164.html" page = urllib2.urlopen(url).read() soup = BeautifulSoup(page)  # Get all the links links = [str(match) for match in soup('a')]  s = r'&lt;a href="http://forums.epicgames.com/archive/index.php\?t-\d+.html"&gt;(.+?)&lt;/a&gt;'  r = re.compile(s) for link in links:     m = r.match(link)     if m:         print m.groups(1)[0]  
all_accepted_parts = acceptedFragment.objects.filter(fragment__in = fragment.objects.filter(categories = fragmentCategory.objects.get(id=1)))  all_accepted_parts = acceptedFragment.objects.filter(fragment__in = fragment.objects.filter(categories = 1))  
object super() super(Derived cls).do(a)  print cls a cls 
style "font" { font_name = "Corbel 8" } widget_class "*" style "font" gtk-font-name = "Corbel 8"  
Turn.game Game {{game.turn_set.all}} Turn Turn Class Meta:     ordering = ['-generated']  {{game.turn_set.all.0}} {{game.turn_set.all.0.generated}} datetime 
#include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;string&gt; #include &lt;ctime&gt; #include &lt;algorithm&gt; #include &lt;windows.h&gt;  using namespace std;  void calcMain(int upperBound vector&lt;int&gt;&amp; known);  int main() {     while(true)     {         vector&lt;int&gt; results;         int upperBound;         cout &lt;&lt; "Pick an upper bound: ";         cin &gt;&gt; upperBound;         long start end;         start = GetTickCount();         calcMain(upperBound results);         end = GetTickCount();         for (size_t i = 0; i &lt; results.size(); ++i) {             cout &lt;&lt; results[i] &lt;&lt; " ";         }         cout &lt;&lt; endl;         double seconds = (double)(end-start) / 1000.0;         cout &lt;&lt; seconds &lt;&lt; " seconds." &lt;&lt; endl &lt;&lt; endl;     }     return 0; }  void calcMain(int upperBound vector&lt;int&gt;&amp; known) {     vector&lt;int&gt; history;     for(int i = 0; i &lt;= upperBound; i++)     {         int current = i;         history.clear();         while(true)         {                 int temp = current;                 int sum = 0;                 while (temp &gt; 0) {                     sum += (temp % 10) * (temp % 10);                     temp /= 10;                 }                 current = sum;                 if(find(history.begin() history.end() current) != history.end())                 {                         if(current == 1)                         {                                 known.push_back(i);                         }                         break;                 }                 history.push_back(current);         }     } }  
&gt;&gt;&gt; import inspect &gt;&gt;&gt; import struct &gt;&gt;&gt; inspect.getabsfile(struct) 'c:\\python26\\lib\\struct.py'  
all if all(e is None for e in myList):     print('all empty or None')  False any if not any(myList):     print('all empty or evaluating to False')  
fn = os.path.join(os.path.dirname(__file__) 'my_file')  fn = pathlib.Path(__file__).parent / 'my_file'  
for line in lines:     line = line[2:]     # do something here  
itertools.tee() y = FunctionWithYield() y y_backup = tee(y) for x in y:     print(x) for x in y_backup:     print(x)  
c:\Python26\python.exe setup.py ...  C:\Users\rjh&gt;assoc .py .py=Python.File  C:\Users\rjh&gt;ftype Python.File Python.File="C:\Python26\python.exe" "%1" %*  
Enumerable.Range var mySequence = Enumerable.Range(0 12);  
Exception class MyException(Exception):     &quot;&quot;&quot;My documentation&quot;&quot;&quot;  try:     raise MyException('my detailed description') except MyException as my:     print my # outputs 'my detailed description'  str(my) my.args[0] class BaseException(object):      &quot;&quot;&quot;Superclass representing the base of the exception hierarchy.     Provides an 'args' attribute that contains all arguments passed     to the constructor.  Suggested practice though is that only a     single string argument be passed to the constructor.&quot;&quot;&quot;  __str__ __repr__ __str__ __init__ _get_message 
from subprocess import Popen       if __name__ == '__main__':           Popen('C:/the_programm.exe' close_fds=True)  
rsplit line = "hello world     1        2    3" parts = line.rsplit("" 3) print parts  # prints ['hello world    ' ' 1       ' ' 2   ' ' 3']  strip parts = [s.strip() for s in parts] print parts  # prints ['hello world' '1' '2' '3']  
del Files[5:]  del for file in Files[:5]:   #...  
aptitude install python-numpy  http://sourceforge.net/projects/numpy/files/NumPy/ http://sourceforge.net/projects/numpy/files/NumPy/ $ tar xfz numpy-n.m.tar.gz $ cd numpy-n.m $ python setup.py install  
-O $ python -Oc "assert False"  $ python -c "assert False" Traceback (most recent call last):   File "&lt;string&gt;" line 1 in &lt;module&gt; AssertionError  $ python -Oc "assert 1/0"  $ python -c "assert 1/0" Traceback (most recent call last):   File "&lt;string&gt;" line 1 in &lt;module&gt; ZeroDivisionError: integer division or modulo by zero  C:\&gt;python -c "assert False" Traceback (most recent call last):   File "&lt;string&gt;" line 1 in &lt;module&gt; AssertionError C:\&gt;SET PYTHONOPTIMIZE=TRUE  C:\&gt;python -c "assert False"  C:\&gt;SET PYTHONOPTIMIZE=  C:\&gt;python -c "assert False" Traceback (most recent call last):   File "&lt;string&gt;" line 1 in &lt;module&gt; AssertionError  if False:     assert False "we know this fails but we don't get here"  try:     assert False "this code runs fails and the exception is caught" except AssertionError as e:     print(repr(e))  AssertionError('this code runs fails and the exception is caught')  AssertionError assert assert expression # optional_message  if __debug__:     if not expression: raise AssertionError #(optional_message)  __debug__ True False -O __debug__ -O -O 
destination = open('fyi.xml' 'wb+')  upload_dir = settings.MEDIA_ROOT # or wherever destination = open(os.path.join(upload_dir 'fyi.xml') 'wb+')  
xticks plot 
Album title1 song1 title song1 url song2 title song2 url  Album title2 song1 title song1 url song2 title song2 url  from django.utils import simplejson  def gen_groups(lines):    """ Returns contiguous groups of lines in a file """     group = []     for line in lines:       line = line.strip()       if not line and group:          yield group          group = []       elif line:          group.append(line)   def gen_albums(groups):    """ Given groups of lines in an album file returns albums  """     for group in groups:       title    = group.pop(0)       songinfo = zip(*[iter(group)]*2)       songs    = [dict(title=titleurl=url) for titleurl in songinfo]       album    = dict(title=title songs=songs)        yield album   input = open('albums.txt') groups = gen_groups(input) albums = gen_albums(groups)  print simplejson.dumps(list(albums))  [{"songs": [{"url": "song1 url" "title": "song1 title"} {"url": "song2 url" "title": "song2 title"}] "title": "song2 title"} {"songs": [{"url": "song1 url" "title": "song1 title"} {"url": "song2 url" "title": "song2 title"}] "title": "song2 title"}]  var url = albums[1].songs[0].url;  
self.assertRaises(AttributeError getattr branch[0] "childrennodes")  @raises(AttributeError) def test_1(self)     branch[0].childrennodes  
newpath = r'C:\Program Files\arbitrary'  if not os.path.exists(newpath):     os.makedirs(newpath)  
$n &lt;&lt;= 1; 
import os  asps = [] for root dirs files in os.walk(r'C:\web'):     for file in files:         if file.endswith('.asp'):             asps.append(file)  
firstsecond = foo(True) or (NoneNone) firstsecond = foo(False) or (NoneNone)  
rex = re.compile(r'\W+') result = rex.sub(' ' strarg).upper()  strarg 
class AssignmentFilterForm(forms.Form): def __init__(self pg request = None):     super(forms.Form self).__init__(request)     self.filters = []      self.filters.append(PatientFilter('All'))     self.filters.append(PatientFilter('Assigned' 'service__isnull' False))     self.filters.append(PatientFilter('Unassigned' 'service__isnull' True))     self.addPhysicians(pg)      self.fields['filter'] = forms.ChoiceField()     for i f in enumerate(self.filters):         self.fields['filter'].choices.append((i f.name))  
'''Very simple enforcer of type annotations.  This toy super-decorator can decorate all functions in a given module that have  annotations so that the type of input and output is enforced; an AssertionError is raised on mismatch.  This module also has a test function func() which should fail and logging facility  log which defaults to print.   Since this is a test module I cut corners by only checking *keyword* arguments.  '''  import sys  log = print   def func(x:'int' = 0) -&gt; 'str':     '''An example function that fails type checking.'''     return x   # For simplicity I only do keyword args. def check_type(*args):     param value assert_type = args     log('Checking {0} = {1} of {2}.'.format(*args))     if not isinstance(value assert_type):         raise AssertionError(             'Check failed - parameter {0} = {1} not {2}.'             .format(*args))     return value  def decorate_func(func):         def newf(*args **kwargs):         for k v in kwargs.items():             check_type(k v ann[k])         return check_type('&lt;return_value&gt;' func(*args **kwargs) ann['return'])      ann = {k: eval(v) for k v in func.__annotations__.items()}     newf.__doc__ = func.__doc__     newf.__type_checked = True     return newf  def decorate_module(module = '__main__'):     '''Enforces type from annotation for all functions in module.'''     d = sys.modules[module].__dict__     for k f in d.items():         if getattr(f '__annotations__' {}) and not getattr(f '__type_checked' False):             log('Decorated {0!r}.'.format(f.__name__))             d[k] = decorate_func(f)   if __name__ == '__main__':     decorate_module()      # This will raise AssertionError.     func(x = 5)  height = 1.75 # Bob's height in meters. length = len(sys.modules) # Number of modules imported by program. area = height * length # What's that supposed to mean???  height length int float width * height -&gt; area 
&lt;font size="3" face="Trebuchet MS"&gt;Speak Your Mind:&amp;nbsp;&amp;nbsp;&lt;/font&gt;&lt;input type="text"      size="60" id="entry"/&gt; &lt;img valign="bottom" src='/assets/cognifyup.png'  onMouseOver="over()" onMouseOut="out()" onMouseDown="out(); evaluate();"  onMouseUp="over()"&gt;&lt;br&gt;&lt;br&gt;  over() out() get() getJSON() str() self.request.get('entry') self.response.out.write({'evalresult': self.request.get('entry')}) self.response.out.write({'evalresult': str(self.request.get('entry'))}) getJSON() 
class Choice(models.Model):     text = models.CharField(max_length=200)      def calculateVotes(self):         return Vote.objects.filter(choice=self).count()      votes = property(calculateVotes)  {% for choice in choices %}     {{choice.choice}} - {{choice.votes}} &lt;br /&gt; {% endfor %}  
itertools.zip_longest &gt;&gt;&gt; list(itertools.zip_longest(a b c)) [('a1' 'b1' 'c1') (None 'b2' 'c2') (None 'b3' None)]  None fillvalue &gt;&gt;&gt; list(itertools.zip_longest(a b c fillvalue='foo')) [('a1' 'b1' 'c1') ('foo' 'b2' 'c2') ('foo' 'b3' 'foo')]  itertools.izip_longest map None map map &gt;&gt;&gt; map(None a b c) [('a1' 'b1' 'c1') (None 'b2' 'c2') (None 'b3' None)]  
def lv1(d):   locals().update(d)   print zap  zap lv1 d exec exec def lv1(d):   exec ""   locals().update(d)   print zap  lv1({'zap': 23})  23 print zap print locals()['zap'] exec 
data_stream = Popen(mycmd stdin=PIPE stdout=PIPE) data_stream.stdin.write("do something\n") for line in data_stream:   ...  # BAD!  data_stream = Popen(mycmd stdout=PIPE) for line in data_stream.stdout:    ...  # Fine  
&gt;&gt;&gt; import collections &gt;&gt;&gt; isinstance({}collections.Mapping) True  
import operator filter(operator.isNumberType list_1)  import numbers [x for x in list_1 if isinstance(x numbers.Number)]  
import sys os  try:     raise NotImplementedError("No error") except Exception as e:     exc_type exc_obj exc_tb = sys.exc_info()     fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]     print(exc_type fname exc_tb.tb_lineno)  
if any(row[key] in (None "") for key in row):     # raise error  if any(val in (None "") for val in row.itervalues()):     # raise error  
django-tagging tests.py tests 
os.system() subprocess 
re.sub('\.(?!(\S[^. ])|\d)' '' s)  
ordering Meta ordering class Department(models.Model):     name = models.CharField(max_length=100)     abbreviation = models.CharField(max_length=4)      class Meta:         ordering = ["name"]  Department ModelForm widget 
curses/__init__.py ACS_* _curses initscr() initscr() initscr() _curses from curses   import * ACS_* &gt;&gt;&gt; import curses &gt;&gt;&gt; curses.ACS_ULCORNER exception &gt;&gt;&gt; curses.initscr() &gt;&gt;&gt; curses.ACS_ULCORNER &gt;&gt;&gt; 4194412  
max_versions = session.query(Cls.name func.max(Cls.version).label('max_version'))\                       .group_by(Cls.name).subquery() objs = session.query(Cls).join((max_versions            and_(Cls.name == max_versions.c.name                 Cls.version == max_versions.c.max_version)        )).all()  SELECT tbl.id AS tbl_id tbl.name AS tbl_name tbl.version AS tbl_version FROM tbl JOIN (SELECT tbl.name AS name max(tbl.version) AS max_version FROM tbl GROUP BY tbl.name) AS anon_1 ON tbl.name = anon_1.name AND tbl.version = anon_1.max_version  
query = session.query(Zipcode).options(eagerload('zipcode')).filter(Zipcode.state.in_(['NH' 'ME'])).all()  
import itertools import pprint  L = [{"value1": "fssd" "value2": "dsfds" "value3": "abcd" "value4": "gk"}     {"value1": "asdasd" "value2": "asdas" "value3": "dafdd" "value4": "sdfsdf"}     {"value1": "sdfsf" "value2": "sdfsdf" "value3": "abcd" "value4": "gk"}     {"value1": "asddas" "value2": "asdsa" "value3": "abcd" "value4": "gk"}     {"value1": "asdasd" "value2": "dskksks" "value3": "ldlsld" "value4": "sdlsld"}]  getvals = operator.itemgetter('value3' 'value4')  L.sort(key=getvals)  result = [] for k g in itertools.groupby(L getvals):     result.append(g.next())  L[:] = result pprint.pprint(L)  
exec &gt;&gt;&gt; bytecode = compile('value += 5' '&lt;string&gt;' 'exec') &gt;&gt;&gt; mydict = {'value': 23} &gt;&gt;&gt; exec(bytecode mydict) &gt;&gt;&gt; mydict['value'] 28  &gt;&gt;&gt; import dis &gt;&gt;&gt; dis.dis(bytecode)   1           0 LOAD_NAME                0 (value)               3 LOAD_CONST               0 (5)               6 INPLACE_ADD                        7 STORE_NAME               0 (value)              10 LOAD_CONST               1 (None)              13 RETURN_VALUE          compile &gt;&gt;&gt; def f(): value += 5 ...  &gt;&gt;&gt; dis.dis(f.func_code)   1           0 LOAD_FAST                0 (value)               3 LOAD_CONST               1 (5)               6 INPLACE_ADD                        7 STORE_FAST               0 (value)              10 LOAD_CONST               0 (None)              13 RETURN_VALUE          exec 
CountryNameCode 
from datetime import datetime  def copyright_dates(start_year = datetime.now().year):     return " - ".join(str(y) for y in sorted(set([start_year datetime.now().year])))  
sizer = wx.BoxSizer(wx.VERTICAL) sizer.Add(widget1 0 wx.EXPAND) sizer.Add(widget2 1)  
from itertools import product for y x in product(range(3) repeat=2):   do_something()   for y1 x1 in product(range(3) repeat=2):     do_something_else()  
Dir['**/*'].each { |f| print f }  
global def foo():     global G     if G is None:         G = 1  global nonlocal global def foo():     x = 5     def bar():         nonlocal x         x = x * 2     bar()     return x  
--selftest 
for i x in enumerate(SomeArray):     print i x  enumerate 
pg_connection_status 
d = {} for line in open("file"):     line=line.strip()     if line.endswith("\\"):         directory = line.split(":")[-1].strip().replace("\\""")         d.setdefault(directory[])     if line.startswith("-&gt;"):         song=line.split(" ")[-1]         d[directory].append(song) print d  # python python.py {'Images': ['01-some_image1.jpg' '02-some_image2.jpg'] 'Music': ['01-some_song1.mp3' '02-some_song2.mp3' '03-some_song3.mp3']}  
#!/Python26/ # -*- coding: utf-8 -*-  import sys  def main(argv):     if len(argv) &lt; 2:         sys.stderr.write("Usage: %s &lt;file.txt&gt;" % (argv[0]))         return 1      f = open(sys.argv[1])     lines = f.readlines()     f.close()      for line in lines:         line = line.strip()         etc...  if __name__ == "__main__":     sys.exit(main(sys.argv))  
super class MyConnectionPlugin(object):   def __init__(self *args **kw):     super(MyConnectionPlugin self).__init__(*args **kw)     # etc etc -- rest of initiatizations other methods  class SecureConnection(MyConnectionPlugin                        httplib.HTTPSConnection object):   pass  class PlainConnection(MyConnectionPlugin                       httplib.HTTPConnection object):   pass  def ConnectionClass(secure):   if secure:     return SecureConnection   else:     return PlainConnection  conn = ConnectionClass(whatever_expression())()  __class__ object &gt;&gt;&gt; import httplib &gt;&gt;&gt; class Z(object): pass ...  &gt;&gt;&gt; class Y(Z httplib.HTTPConnection): pass ...  &gt;&gt;&gt; Y.mro() [&lt;class '__main__.Y'&gt; &lt;class '__main__.Z'&gt; &lt;type 'object'&gt; &lt;class httplib.HTTPConnection at 0x264ae0&gt;] &gt;&gt;&gt; class X(Z httplib.HTTPConnection object): pass ...  &gt;&gt;&gt; X.mro() [&lt;class '__main__.X'&gt; &lt;class '__main__.Z'&gt; &lt;class httplib.HTTPConnection at 0x264ae0&gt; &lt;type 'object'&gt;] &gt;&gt;&gt;   object super 
as aap 
print 
from django.contrib import admin  import mysite.poll.urls ... (r'^polls/' include(mysite.poll.urls)) ...  
import re re.sub(pattern '' s)  
save daterange from datetime import timedelta  def daterange(start_date end_date):     for n in range((end_date - start_date).days):         yield start_date + timedelta(n)   class StatusEntry(models.Model):     name = models.TextField()     date = models.DateField()     status = models.BooleanField()      def __unicode__(self):         return "%s - %s - %s" % (self.name unicode(self.status) unicode(self.date))      def save(self fill=True):         if fill and not self.id: # autofill on insert not on update             newest = StatusEntry.objects.all().order_by("-date")[:1]             if newest and newest[0].date &lt; self.date:                 for date in daterange(newest[0].date + timedelta(1) self.date):                     entry = StatusEntry(name=self.name date=date status=False)                     entry.save(fill=False)         super(StatusEntry self).save()  
raw=True 
object __dict__ &gt;&gt;&gt; dir(object()) ['__class__' '__delattr__' '__doc__' '__getattribute__' '__hash__' '__init__' '__new__' '__reduce__' '__reduce_ex__' '__repr__' '__setattr__' '__str__']  &gt;&gt;&gt; class Foo(object): ...     __slots__ = {} ... &gt;&gt;&gt; f = Foo() &gt;&gt;&gt; f.bar = 42 Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; AttributeError: 'Foo' object has no attribute 'bar'  slots __slots__ __dict__ &gt;&gt;&gt; class test: pass ... &gt;&gt;&gt; getattr(test() '__dict__') {} &gt;&gt;&gt; getattr(object() '__dict__') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; AttributeError: 'object' object has no attribute '__dict__'  __dict__ __slots__ __dict__ 
'color': {     '()': 'colorlog.ColoredFormatter'     'format': '%(log_color)s%(levelname)-8s %(message)s'     'log_colors': {         'DEBUG':    'bold_black'         'INFO':     'white'         'WARNING':  'yellow'         'ERROR':    'red'         'CRITICAL': 'bold_red'     } }  
xitem = ClientForm.Item(browser.form.find_control(name="field1")          {'contents':'E' 'value':'E' 'label':'E'})  xitem = ClientForm.Item(browser.form.find_control(name="field2")         {'type':'radio' 'name':'field2' 'value':'X'})  
&gt;&gt;&gt; if all (k in foo for k in ("foo""bar")): ...     print "They're there!" ... They're there!  
self.gen_groups(...) self.gen_albums(...) TypeError gen_groups() def get_groups(self lines):     ...  
nltk nltk/__init__.py nltk/internals.py nltk nltk from nltk import __file__ 
struct array array array 
__get__ class _MethodDecoratorAdaptor(object):     def __init__(self decorator func):         self.decorator = decorator         self.func = func     def __call__(self *args **kwargs):         return self.decorator(self.func)(*args **kwargs)     def __get__(self instance owner):         return self.decorator(self.func.__get__(instance owner))  def auto_adapt_to_methods(decorator):     """Allows you to use the same decorator on methods and functions     hiding the self argument from the decorator."""     def adapt(func):         return _MethodDecoratorAdaptor(decorator func)     return adapt  def allowed(*allowed_methods):     @auto_adapt_to_methods     def wrapper(func):         def wrapped(request):             if request not in allowed_methods:                 raise ValueError("Invalid method %s" % request)             return func(request)         return wrapped     return wrapper  class Foo(object):     @allowed('GET' 'POST')     def do(self request):         print "Request %s on %s" % (request self)  @allowed('GET') def do(request):     print "Plain request %s" % request  Foo().do('GET')  # Works Foo().do('POST') # Raises  
&gt;&gt;&gt; open_name = '%s.open' % __name__ &gt;&gt;&gt; with patch(open_name create=True) as mock_open: ...     mock_open.return_value = MagicMock(spec=file) ... ...     with open('/some/path' 'w') as f: ...         f.write('something') ... &lt;mock.Mock object at 0x...&gt; &gt;&gt;&gt; file_handle = mock_open.return_value.__enter__.return_value &gt;&gt;&gt; file_handle.write.assert_called_with('something')  
#!/usr/bin/env python # -*- coding: utf8 -*- def main():     print 'hello'     print 3/0 if __name__ == "__main__":     main()  In [5]: out = !egg.py Traceback (most recent call last):   File "D:\python\note\egg.py" line 7 in &lt;module&gt;     main()   File "D:\python\note\egg.py" line 5 in main     print 3/0 ZeroDivisionError: integer division or modulo by zero  In [6]: out Out[6]: SList (.p .n .l .s .grep() .fields() sort() available): 0: hello  In [7]: out = !egg.py 2&gt;&amp;1  In [8]: out Out[8]: SList (.p .n .l .s .grep() .fields() sort() available): 0: hello 1: Traceback (most recent call last): 2:   File "D:\python\note\egg.py" line 7 in &lt;module&gt; 3:     main() 4:   File "D:\python\note\egg.py" line 5 in main 5:     print 3/0 6: ZeroDivisionError: integer division or modulo by zero  
def material_path(instance filename):     return 'documents/%d' % instance.id_presentations.id  class Materials(models.Model):     id_presentations = models.ForeignKey(Presentations)     document = models.FileField(upload_to=material_path)     docname = models.CharField(max_length=40)  
python "DriveLetter:\path\to\sfood.py" "DriveLetter:\path\to\your\project"  
wx.StaticText TextCtrl StaticText 
class Counter:   def __init__(self):     self.c = 0    def count(self):     self.c += 1     print 'in count() value is '  self.c     return self.c  class Test:   counter = Counter() # A class variable counts its instantiations    print 'in class Test'   def __init__(self):     print 'in Testinit'     self.counter.count() # A method that prints the number of instances of Counter  test1 = Test() # Prints 1 test2 = Test()  
wget wget -O - wget -O - http://www.somesite.org/ &gt; /tmp/wget.out 2&gt; /tmp/wget.err  wget shell=True Popen() stderr=subprocess.PIPE Popen() wget pexpect 
for g in t[0].groups.all():     print g.title  
    tb = tb.tb_next  sys.exc_info 
server = request.META.get('wsgi.file_wrapper' None) if server is not None and server.__module__ == 'django.core.servers.basehttp':     print('inside dev')  wsgi.file_wrapper django.core.servers.basehttp Traceback Request information 
from settings import INSTALLED_APPS if 'appname' in INSTALLED_APPS:     print 'we have app'  load_app 
class JobCategory(models.Model):     title = models.CharField(_('title') max_length=50 help_text=_("Max 50 chars. Required."))     slug = models.SlugField(_('slug') help_text=_("Only letters numbers or hyphens. Required."))      class Meta:         verbose_name = _('job category')         verbose_name_plural = _('job categories')      def __unicode__(self):         return self.title      def get_absolute_url(self):         return reverse('djobs_category_jobs' args=[self.slug])      @property     def active_job_count(self):         return len(Job.active.filter(category=self))  class ActiveJobManager(models.Manager):     def get_query_set(self):         return super(ActiveJobManager self).get_query_set().filter(created_date__gte=datetime.datetime.now() - datetime.timedelta(days=30))  class Job(models.Model):     title = models.CharField(_('title') max_length=50 help_text=_("Max 50 chars. Required."))     description = models.TextField(_('description') help_text=_("Required."))     category = models.ForeignKey(JobCategory related_name='jobs')     employment_type = models.CharField(_('employment type') max_length=5 choices=EMPLOYMENT_TYPE_CHOICES help_text=_("Required."))     employment_level = models.CharField(_('employment level') max_length=5 choices=EMPLOYMENT_LEVEL_CHOICES help_text=_("Required."))     employer = models.ForeignKey(Employer)     location = models.ForeignKey(Location)     contact = models.ForeignKey(Contact)     allow_applications = models.BooleanField(_('allow applications'))     created_date = models.DateTimeField(auto_now_add=True)      objects = models.Manager()     active = ActiveJobManager()      class Meta:         verbose_name = _('job')         verbose_name_plural = _('jobs')      def __unicode__(self):         return '%s at %s' % (self.title self.employer.name)  def job_categories():     categories = JobCategory.objects.all()     return {'categories': categories}  
print max(open(your_filename 'r') key=len)  print(max(open(your_filename 'r') key=len))  
render_to_response locals() request.POST locals() locals() request request.POST 
import Queue  class IndexableQueue(Queue):   def __getitem__(self index):     with self.mutex:       return self.queue[index]  with try finally 
pyparsing mechanize BeautifulSoup Python API from twill.commands import go showforms formclear fv submit  go('http://issola.caltech.edu/~t/qwsgi/qwsgi-demo.cgi/') go('./widgets') showforms()  formclear('1') fv(&quot;1&quot; &quot;name&quot; &quot;test&quot;) fv(&quot;1&quot; &quot;password&quot; &quot;testpass&quot;) fv(&quot;1&quot; &quot;confirm&quot; &quot;yes&quot;) showforms()  submit('0')  
f = replacement_f  &gt;&gt;&gt; def rep(*args):     print(*args sep=' -- ')  &gt;&gt;&gt; def ori(*args):     print(args)  &gt;&gt;&gt; ori('dfef' 32) ('dfef' 32) &gt;&gt;&gt; ori = rep &gt;&gt;&gt; ori('dfef' 32) dfef -- 32  
%doctest_mode  In [1]: %doctest_mode *** Pasting of code with "&gt;&gt;&gt;" or "..." has been enabled. Exception reporting mode: Plain Doctest mode is: ON &gt;&gt;&gt;   
if 499999500000L % (2**32) == 1783293664L:     print "Overflowed a 32-bit integer"  a = numpy.arange(1000000 dtype=numpy.uint64) a.sum() -&gt; 499999500000  
self.__dict__ self __slots__ __dict__ __new__ 
__file__ sys.argv[0] __file__ sys.argv[0] C:\junk\so&gt;type \junk\so\scriptpath\script1.py import sys os print "script: sys.argv[0] is" repr(sys.argv[0]) print "script: __file__ is" repr(__file__) print "script: cwd is" repr(os.getcwd()) import whereutils whereutils.show_where()  C:\junk\so&gt;type \python26\lib\site-packages\whereutils.py import sys os def show_where():     print "show_where: sys.argv[0] is" repr(sys.argv[0])     print "show_where: __file__ is" repr(__file__)     print "show_where: cwd is" repr(os.getcwd())  C:\junk\so&gt;\python26\python scriptpath\script1.py script: sys.argv[0] is 'scriptpath\\script1.py' script: __file__ is 'scriptpath\\script1.py' script: cwd is 'C:\\junk\\so' show_where: sys.argv[0] is 'scriptpath\\script1.py' show_where: __file__ is 'C:\\python26\\lib\\site-packages\\whereutils.pyc' show_where: cwd is 'C:\\junk\\so'  
list list pop(0) insert(0 v) deque 
ata = b'UDP Test Data' &gt;&gt;&gt; data = 'UDP Test Data' &gt;&gt;&gt; udp.sendto(data (hostname port)) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: sendto() takes exactly 3 arguments (2 given) &gt;&gt;&gt; udp.sendto(data 0 (hostname port)) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: sendto() argument 1 must be bytes or buffer not str &gt;&gt;&gt; data = b'UDP Test Data' &gt;&gt;&gt; udp.sendto(data 0 (hostname port)) 13 &gt;&gt;&gt; udp.sendto(data (hostname port)) 13  
from config.TestClass import TestClass TestClass.add_key( "mykey" "newvalue" )  
from x import * _test __test 
import djng  def index(request):     return djng.Response('Hello world')  if __name__ == '__main__':     djng.serve(index '0.0.0.0' 8888)  
 d = {}  for i in xrange(4000000):      d[i] = None  # 722ms   d = dict(itertools.izip(xrange(4000000) itertools.repeat(None)))  # 634ms   dict.fromkeys(xrange(4000000))  # 558ms   s = set(xrange(4000000))  dict.fromkeys(s)  # Not including set construction 353ms  
datetime # German locale loc= locale.setlocale(locale.LC_TIME("de""de")) try:      date= datetime.date.strptime( input "%d. %b. %Y" ) except:      # English locale      loc= locale.setlocale(locale.LC_TIME("en""us"))      date= datetime.date.strptime( input "%d. %b. %Y" )  
unittest test unittest.TestCase imp src import sys sys.path.append('../src') # OnLinux  - use r'..\src' for Windows  PYTHONPATH SET PYTHONPATH=path\to\module; python test.py PYTHONPATH=path/to/module; python test.py unittest 
c:\python26\lib\site-packages\sqlobject-0.10.4-py2.6.egg 
br.form.add_file(open(filename) 'text/plain' filename)  
import re  places = {'#': 'what'           '@': 'who'           '!': 'why'          }  def replace(m):   all = m.group(0)   first rest = all[0] all[1:]   return '&lt;a href="/%s/%s"&gt;%s&lt;/a&gt;' % (     places[first] rest all)  markedup = re.sub(r'[#!@]\w+' replace text)  
hstore 
last_digit = str(number)[-1]  
0:5 
tasks = Tasks.objects.all()  {% for t in tasks %}     name: {{t.name}}     description: {{t.description}}     priority: **{{t.priority.name}}** {% endfor %}  
 image_data = get_image_data_from_blob()  qimg = QtGui.QImage.fromData(image_data)  pixmap = QtGui.QPixmap.fromImage(qimg)  
A B B B B A\d+.*?(B\d+)?  A\d+[^B]*(B\d+)?  B A\d+(.*?B\d+)? a\d+([^B]*B\d+)?  
var newlist = oldlist.Skip(1).Concat(oldlist.Take(1));  
:map &lt;F2&gt; :w\|!python %&lt;CR&gt;  &lt;F2&gt; 
&gt;&gt;&gt; import os time &gt;&gt;&gt; time.strftime('%X %x %Z') '12:45:20 08/19/09 CDT' &gt;&gt;&gt; os.environ['TZ'] = 'Europe/London' &gt;&gt;&gt; time.tzset() &gt;&gt;&gt; time.strftime('%X %x %Z') '18:45:39 08/19/09 BST'  &gt;&gt;&gt; year = time.strftime('%Y') &gt;&gt;&gt; month = time.strftime('%m') &gt;&gt;&gt; day = time.strftime('%d') &gt;&gt;&gt; hour = time.strftime('%H') &gt;&gt;&gt; minute = time.strftime('%M')  
def counted(fn):     def wrapper(*args **kwargs):         wrapper.called += 1         return fn(*args **kwargs)     wrapper.called = 0     wrapper.__name__ = fn.__name__     return wrapper  @counted def foo():     return  &gt;&gt;&gt; foo() &gt;&gt;&gt; foo.called 1  def counting(other):     def decorator(fn):         def wrapper(*args **kwargs):             other.called = 0             try:                 return fn(*args **kwargs)             finally:                 print '%s was called %i times' % (other.__name__ other.called)         wrapper.__name__ = fn.__name__         return wrapper     return decorator  @counting(foo) def bar():     foo()     foo()  &gt;&gt;&gt; bar() foo was called 2 times  foo bar 
gmt_offset_str = time_string[-3:] gmt_offset_seconds = int(gmt_offset_str)*60*60 timestamp = time.strptime(time_string[:-4] '%Y-%m-%d %H:%M:%S') return time.localtime(time.mktime(timestamp)-gmt_offset_seconds)  
long_string = ("Line 1 "                "Line 2 "                "Line 3 ")   &gt;&gt;&gt; long_string 'Line 1 Line 2 Line 3 '  
def combineflatten(seq):     items= tuple(item for item in seq if not isinstance(item tuple))     yield items     for item in seq:         if isinstance(item tuple):             for yielded in combineflatten(item):                 yield items+yielded  &gt;&gt;&gt; tuple(combineflatten((1 2 (3 4) (5 6) (7 8 (9 0))))) ((1 2) (1 2 3 4) (1 2 5 6) (1 2 7 8) (1 2 7 8 9 0))  
urlparse from urlparse import urlparse parse_qsl  url = 'http://somesite.com/?foo=bar&amp;key=val' print parse_qsl(urlparse(url)[4])  [('foo' 'bar') ('key' 'val')]  urlparse parse_qsl urlparse 
&gt;&gt;&gt; for t in time.tzname: ...     print t ... Eastern Standard Time Eastern Daylight Time &gt;&gt;&gt; datetime.strptime('2009-08-19 14:20:36 Eastern Standard Time' "%Y-%m-%d %H:%M:%S %Z") datetime.datetime(2009 8 19 14 20 36) &gt;&gt;&gt; datetime.strptime('2009-08-19 14:20:36 UTC' "%Y-%m-%d %H:%M:%S %Z") datetime.datetime(2009 8 19 14 20 36) &gt;&gt;&gt; datetime.strptime('2009-08-19 14:20:36 GMT' "%Y-%m-%d %H:%M:%S %Z") datetime.datetime(2009 8 19 14 20 36)  
counts = MyModel.objects.values('datettimefield').annotate(Count('datettimefield'))  [{'datetimefield':&lt;date1&gt; 'datettimefield__count':&lt;count1&gt;}  {'datetimefield':&lt;date2&gt; 'datettimefield__count':&lt;count2&gt;} ...]  cursor = connection.cursor() cursor.execute(      "SELECT COUNT(0) FROM `mymodel_table` "      "GROUP BY `mydatetimefield`;" ) counts = cursor.fetchall()  
2**16 2**32 base64 struct % 
from subprocess import * p = Popen('ssh servername who' shell=True stdout=PIPE) p.wait() print p.stdout.readlines()  ['usr      pts/0        2009-08-19 16:03 (kakapo)\n'  'usr      pts/1        2009-08-17 15:51 (kakapo)\n'  'usr      pts/5        2009-08-17 17:00 (kakapo)\n']  p = Popen('ssh servername cat /proc/cpuinfo' shell=True stdout=PIPE)  
list(map(chr[6653094]))  map # Prints "ABCD" for ch in map(chr[65666768]):     print(ch)  
shutil.py /usr/lib/python2.6 C:\Python26\lib XXX Consider this example code rather than the ultimate tool. 
mystr = "path: %s curr: %s prev: %s" % (mydict[path] curr prev)  
import SOAPpy test = 42 server = SOAPpy.SOAPProxy("http://localhost:8888") server = server._sa ("urn:soapinterop")  hd = SOAPpy.Header() hd.InteropTestHeader ='This should fault as you don\'t understand the header.' hd._setMustUnderstand ('InteropTestHeader' 0) hd._setActor ('InteropTestHeader''http://schemas.xmlsoap.org/soap/actor/next') server = server._hd (hd)  print server.echoInteger (test)  import SOAPpy test = 42 server = SOAPpy.SOAPProxy("http://localhost:8888") server = server._sa ("urn:soapinterop") #Header hd = SOAPpy.Header() hd.InteropTestHeader = 'This should faultas you don\'t understand the header.' hd._setMustUnderstand ('InteropTestHeader' 1) hd._setActor ('InteropTestHeader''http://schemas.xmlsoap.org/soap/actor/next') server = server._hd (hd)  print server.echoInteger (test)  
i fuc i fuc pytest i a pytest a pytest a.j a pytest j j a a 
row[2] == day 
def delete_if_not(predicate_key some_dict):     for key subdict in some_dict.items():         if not subdict.get(predicate_key True):             del some_dict[key]  mydict = {         'test1': {                 'turned_on': True                 'other_data': 'foo'             }         'test2': {             'turned_on': False             'other_data': 'bar'             }         } delete_if_not('turned_on' mydict) print mydict  
namedtuple &gt;&gt;&gt; from collections import namedtuple &gt;&gt;&gt; MyStruct = namedtuple('MyStruct' 'a b d') &gt;&gt;&gt; s = MyStruct(a=1 b={'c': 2} d=['hi']) &gt;&gt;&gt; s MyStruct(a=1 b={'c': 2} d=['hi']) &gt;&gt;&gt; s.a 1 &gt;&gt;&gt; s.b {'c': 2} &gt;&gt;&gt; s.c Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; AttributeError: 'MyStruct' object has no attribute 'c' &gt;&gt;&gt; s.d ['hi']  class Struct:     def __init__(self **entries):         self.__dict__.update(entries)  &gt;&gt;&gt; args = {'a': 1 'b': 2} &gt;&gt;&gt; s = Struct(**args) &gt;&gt;&gt; s &lt;__main__.Struct instance at 0x01D6A738&gt; &gt;&gt;&gt; s.a 1 &gt;&gt;&gt; s.b 2  
""" This module implements Obj-C-style categories for classes for Python  Copyright 2009 Ulrik Sverdrup &lt;ulrik.sverdrup@gmail.com&gt; License: Public domain """  def Category(toclass clobber=False):     """Return a class decorator that implements the decorated class'     methods as a Category on the class @toclass      if @clobber is not allowed AttributeError will be raised when     the decorated class already contains the same attribute.     """     def decorator(cls):         skip = set(("__dict__" "__module__" "__weakref__" "__doc__"))         for attr in cls.__dict__:             if attr in toclass.__dict__:                 if attr in skip:                     continue                 if not clobber:                     raise AttributeError("Category cannot override %s" % attr)             setattr(toclass attr cls.__dict__[attr])         return cls     return decorator  
import hmac import hashlib import base64 dig = hmac.new(b'1234567890' msg=your_bytes_string digestmod=hashlib.sha256).digest() base64.b64encode(dig).decode()      # py3k-mode 'Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg='  
&gt;&gt;&gt; a.add(('f' 'g')) &gt;&gt;&gt; print a set(['a' 'c' 'b' 'e' 'd' ('f' 'g')])  set __hash__ list tuple set frozenset dict 
nested_list = [[s.upper() for s in xs] for xs in nested_list]  map 
__str__() __unicode__() __unicode__() __str__() def __str__(self):     return unicode(self).encode('utf-8')  str __bytes__() __str__() 
def doit(nam filters):     alldims = []     for dimname in getDimNames(nam):       filt = filters.get(dimname ())       howmany = len(filt)       if howmany == 0:         sliciflt = slice()       elif howmany == 1:         sliciflt = filt[0]       elif howmany in (2 3):         sliciflt = slice(*filt)       else:         raise RuntimeError("%d items in slice for dim %r (%r)!"                            % (howmany dimname nam))       alldims.append(sliciflt)   return readFrom.variables[nam][tuple(alldims)]  
wait=True while wait:    url=urllib.urlopen('http://'+username+':'+password+'@localhost/httpAuth/action.html?add2Queue='+btid+'&amp;system.name=&lt;btid&gt;&amp;system.value=&lt;'+btid+'&gt;&amp;system.name=&lt;buildNumber&gt;&amp;system.value=&lt;'+buildNumber+'&gt;')    if url.getcode()!=404:      wait=False    else:      time.sleep(60)  
cursor.execute ("""    UPDATE tblTableName    SET Year=%s Month=%s Day=%s Hour=%s Minute=%s    WHERE Server=%s """ (Year Month Day Hour Minute ServerID))  cursor.execute ("UPDATE tblTableName SET Year=%s Month=%s Day=%s Hour=%s Minute=%s WHERE Server='%s' " % (Year Month Day Hour Minute ServerID))  
class MyGroup(models.Model):     name = models.CharField(max_length=100)  class Membership(models.Model):     group = models.ForeignKey(MyGroup)     member = models.ForeignKey(User)      invited_by = models.ForeignKey(User related_name='invited_set')  group.members.all() group.membership_set.all() 
{% regroup notices by year as year_list %}   {% for year in year_list %}   &lt;h2&gt;{{ year.grouper }}&lt;h2&gt;    &lt;ul&gt;   {% for notice in year.list %}      &lt;li&gt;{{ notice.text }}&lt;/li&gt;   {% endfor %}   &lt;/ul&gt; {% endfor %}  {% ifchanged %} 
from django.core.files import File  # you need this somewhere import urllib   # The following actually resides in a method of my model  result = urllib.urlretrieve(image_url) # image_url is a URL to an image  # self.photo is the ImageField self.photo.save(     os.path.basename(self.url)     File(open(result[0] 'rb'))     )  self.save()  class CachedImage(models.Model):     url = models.CharField(max_length=255 unique=True)     photo = models.ImageField(upload_to=photo_path blank=True)      def cache(self):         """Store image locally if we have a URL"""          if self.url and not self.photo:             result = urllib.urlretrieve(self.url)             self.photo.save(                     os.path.basename(self.url)                     File(open(result[0] 'rb'))                     )             self.save()  
def detectit(response):    # try headers &amp;c then worst case...:    content = response.read()    response.read = lambda: content    # now detect based on content  response.read() lambda 
static PyObject *fastint_int(PyObject *self PyObject *args) {     char *s; unsigned r = 0;     if (!PyArg_ParseTuple(args "s" &amp;s)) return NULL;     for (r = 0; *s; r = r * 10 + *s++ - '0');     return Py_BuildValue("i" r); }  
list_filter = ['group']  list_filter = ['group_set']  
def load_module_attr (path):     modname attr = path.rsplit ('.' 1)     mod = __import__ (modname {} {} [attr])     return getattr (mod attr)  def my_view (request):     model_name = "myapp.models.Song" # Get from command line user wherever     model = load_module_attr (model_name)     print model.objects.all()  
tftpd  Unfortunately on multi-homed systems it is impossible for tftpd to  determine the address on which a packet was received. As a result tftpd  uses two different mechanisms to guess the best source address to use for  replies. If the socket that inetd(8) passed to tftpd is bound to a par?  ticular address tftpd uses that address for replies. Otherwise tftpd  uses ‘‘UDP connect’’ to let the kernel choose the reply address based on  the destination of the replies and the routing tables. This means that  most setups will work transparently while in cases where the reply  address must be fixed the virtual hosting feature of inetd(8) can be  used to ensure that replies go out from the correct address.  These con?  siderations are important because most tftp clients will reject reply  packets that appear to come from an unexpected address.  
% * print('%d' % 2 * 4)  print( ('%d' % 2) * 4)  
? &gt;&gt;&gt; result_set = c.execute('SELECT * FROM distro WHERE id IN (%s)' %                            ''.join('?'*len(desired_ids)) desired_ids) &gt;&gt;&gt; print result_set.fetchall() [(1 u'Ubuntu') (2 u'Fedora') (5 u'SuSE')]  
import socket socket.setdefaulttimeout(120)  
exec in &gt;&gt;&gt; class X(object): pass ...  &gt;&gt;&gt; x=X() &gt;&gt;&gt; exec 'a=23' in vars(x) &gt;&gt;&gt; x.a 23  exec x exec 
&gt;&gt;&gt; import time &gt;&gt;&gt; time.gmtime(0) (1970 1 1 0 0 0 3 1 0)  
{% if %} {% for %} 
a = global_dict["foo"]  global_dict["bar"] = "hello"  global_dict["baz"] = "world"  if "foo" not in global_dict:    global_dict["foo"] = 1  global_dict["foo"] = 2  from threading import RLock  lock = RLock()  def thread_A():     with lock:         if "foo" not in global_dict:             global_dict["foo"] = 1  def thread_B():     with lock:         global_dict["foo"] = 2  
ProgressBar.render() 
currentIndexChanged def __init__(self):     ...     QObject.connect(self.cbLayer SIGNAL("currentIndexChanged(int)") self.warn)  def warn(index):     QMessageBox.warning(self "items: " do_stuff(cbLayer.itemData(index)) )  def do_stuff(self item):     QMessageBox.warning(self str(item))  
a() __init__ num def __init__(selfnum):     if callable(num):         raise TypeError('Printer decorator takes an argument')     self.__num=num  
foo = latestpdf(d) 
zipfile.ZipFile StringIO BytesIO try:   from cStringIO import StringIO except:   from StringIO import StringIO import zipfile  fp = StringIO('PK\x03\x04\x14') zfp = zipfile.ZipFile(fp "r")  
str.isalpha my_list = ['foo''bar''baz''&gt;=''5.2']  # With only_words = [token for token in my_list if token.isalpha()]  # Without only_words = filter(str.isalpha my_list)  map filter 
if value is not None and not value.has_key():  value db.Model has_key db.Model db.Model db.Model 
from google.appengine.dist import use_library use_library('django' '1.0')  
class Foo(object):     def __init__(selfnameweight):         self.name = name         self.weight = weight  &gt;&gt;&gt; D = {} &gt;&gt;&gt; D['1L'] = Foo("James"67) &gt;&gt;&gt; D['2L'] = Foo("Jack"83) &gt;&gt;&gt; D {'2L': &lt;__main__.Foo object at 0x013EB330&gt;  '1L': &lt;__main__.Foo object at 0x00C402D0&gt;}  &gt;&gt;&gt; D['1L'].name 'James'  DictName[KEY].attritbute 
found_f = False try:     opts args = getopt.getopt(sys.argv[1:] "ho:v" ["help" "output="]) except getopt.GetoptError err:     print str(err)     usage()     sys.exit(2) for o a in opts:     if o == '-f':       process_f()       found_f = True     elif ... if not found_f:     print "-f was not given"     usage()     sys.exit(2)  
f f f def f(self=self): def g(req self=self): self 
$ python -m timeit -s 'text="foo"' 'text.startswith("a")' 1000000 loops best of 3: 0.537 usec per loop  $ python -m timeit -s 'text="foo"' 'text[0]=="a"' 1000000 loops best of 3: 0.22 usec per loop  text[0] 
try:     some_code_that_can_cause_an_exception()     code_that_needs_to_run_when_there_are_no_exceptions() except:     some_code_to_handle_exceptions()  else else code_that_needs_to_run_when_there_are_no_exceptions 
import itertools  for x y z in itertools.product(*map(xrange (x_dim y_dim z_dim)):     ...  cube = numpy.array(list(itertools.product((01) (01) (01)))) print cube array([[0 0 0]        [0 0 1]        [0 1 0]        [0 1 1]        [1 0 0]        [1 0 1]        [1 1 0]        [1 1 1]])  print cube + (101001000) array([[  10  100 1000]        [  10  100 1001]        [  10  101 1000]        [  10  101 1001]        [  11  100 1000]        [  11  100 1001]        [  11  101 1000]        [  11  101 1001]])  cube + (xyz) import itertools numpy  cube = numpy.array(list(itertools.product((01) (01) (01))))  x_dim = y_dim = z_dim = 10  for offset in itertools.product(*map(xrange (x_dim y_dim z_dim))):     work_with_cube(cube+offset)  itertools.product itertools.product(abc) map(xrange ...) *map(...) 
# pylint: disable-msg=E0611 email 
 #...  (r'^$' index)  #...  
''.join string.joinfields array ''.join timeit 
f.id flush() commit() 
import MySQLdb  conn = MySQLdb.connect(host="localhost" user="root" passwd="nobodyknow" db="amit") cursor = conn.cursor()  stmt = "SELECT * FROM overflows" cursor.execute(stmt)  # Fetch and output result = cursor.fetchall() print result  # get the number of rows numrows = int(cursor.rowcount)  # Close connection conn.close()  
intersection myRDP = { 'Actinobacter': 'GATCGA...TCA' 'subtilus sp.': 'ATCGATT...ACT' } myNames = { 'Actinobacter': '8924342' }  rdpSet = set(myRDP) namesSet = set(myNames)  for name in rdpSet.intersection(namesSet):     print name myNames[name]  # Prints: Actinobacter 8924342  
class HotelController(Controller):     """ Controller to handle requests to Hotels """      def index(self):         """ Handle the index page here """         pass      def addNewHotel(self):         """ Register a new hotel here """         pass      def lookup(self state_name *remainder):         """ Read the state create a new StateController and dispatch """         state_dispatch = StateController(state_name)         return state_dispatch remainder  class StateController(object):     """ Controller used to dispatch """      def __init__(self state_name):         # do your work on the state here         pass      def create(self state_name):         """ Create a new state here """      def lookup(self city_name *remainder):         """ keep on dispatching to other controllers """         city_dispatch = CityController(city_name)         return city_dispatch remainder  
&gt;&gt;&gt; .1 0.10000000000000001  repr &gt;&gt;&gt; repr(.1) '0.10000000000000001'  &gt;&gt;&gt; str(.1) '0.1'  &gt;&gt;&gt; '%.5f' % .1 '0.10000' &gt;&gt;&gt; '%.5f' % .12345678 '0.12346'  
sed import foo foo foo from __future__ import absolute_import 
f(1 *(234) **{'keyword':13})  
import pdb  def Pdb_reset_list(self arg):     self.lineno = None     print &gt;&gt;self.stdout "Reset list position." pdb.Pdb.do_reset = Pdb_reset_list pdb.Pdb.do_rl = Pdb_reset_list  a = 1 b = 2  pdb.set_trace()  print a b  list import pdb Pdb = pdb.Pdb  Pdb._do_list = Pdb.do_list def pdb_list_wrapper(self arg):     if arg.strip().lower() in ('r' 'reset' 'c' 'current'):         self.lineno = None         arg = ''     self._do_list(arg) Pdb.do_list = Pdb.do_l = pdb_list_wrapper  a = 1 b = 2  pdb.set_trace()  print a b  
def is_sublist_of_any_list(cand lists):     # Compare candidate to a single list     def is_sublist_of_list(cand target):         try:             i = 0                         try:                 start = target.index(cand[0])             except:                 return False              while start &lt; (len(target) + len(cand)) - start:                 if cand == target[start:len(cand)]:                     return True                 else:                     start = target.index(cand[0] start + 1)         except ValueError:             return False      # See if candidate matches any other list     return any(is_sublist_of_list(cand target) for target in lists if len(cand) &lt;= len(target))  # Compare candidates to all other lists def super_lists(lists):     a = [cand for i cand in enumerate(lists) if not is_sublist_of_any_list(cand lists[:i] + lists[i+1:])]     return a  lists = [[2 16 17] [1 2 3 4 5 6 7] [1] [1 2 3 4] [1 2] [17 18 19 22 41 48] [2 3] [1 2 3] [50 69] [1 2 3] [2 3 21] [1 2 3] [1 2 4 8] [1 2 4 5 6]] expect = [[2 16 17] [1 2 3 4 5 6 7] [17 18 19 22 41 48] [50 69]  [2 3 21] [1 2 4 8] [1 2 4 5 6]]  def test():     out = super_lists(list(lists))      print "In  : " lists     print "Out : " out      assert (out == expect)  In  :  [[2 16 17] [1 2 3 4 5 6 7] [1] [1 2 3 4] [1 2] [17 18 19 22 41 48] [2 3] [1 2 3] [50 69] [1 2 3] [2 3 21] [1 2 3] [1 2 4 8] [1 2 4 5 6]] Out :  [[2 16 17] [1 2 3 4 5 6 7] [17 18 19 22 41 48] [50 69] [2 3 21] [1 2 4 8] [1 2 4 5 6]]  
class StatusCodeException(Exception):   def __init__(self code):     self.status_code = code  class RedirectException(StatusCodeException):   def __init__(self location status=302):     super(RedirectException self).__init__(status)     self.location = location  class ForbiddenException(StatusCodeException):   def __init__(self):     super(ForbiddenException self).__init__(403)  class ExtendedHandler(webapp.RequestHandler):   def handle_exception(self exception debug_mode):     if isinstance(exception RedirectException):       self.redirect(exception.location)     else:       self.error(exception.status_code)  
bc = 'on' if c.page=='blog' else 'off'  
def point_to_index(point):     try:         return points_dict.get(point points.index(point))     except:         if len(points) &gt;= max_cache:             del points_dict[points[len(points)-max_cache]]         points.append(point)         points_dict[points] = len(points)-1         return len(points)-1  
first_list = [1 2 2 5] second_list = [2 5 7 9]  in_first = set(first_list) in_second = set(second_list)  in_second_but_not_in_first = in_second - in_first  result = first_list + list(in_second_but_not_in_first) print(result)  # Prints [1 2 2 5 9 7]  print(first_list + list(set(second_list) - set(first_list)))  
element element = ET.parse(fp).getroot()  element = ET.parse(fp)  &lt;?xml version="1.0"?&gt; &lt;ItemSearchResponse&gt;   &lt;Items&gt;     &lt;Item&gt;       &lt;ItemAttributes&gt;         &lt;ListPrice&gt;           &lt;Amount&gt;2260&lt;/Amount&gt;         &lt;/ListPrice&gt;       &lt;/ItemAttributes&gt;       &lt;Offers&gt;         &lt;Offer&gt;           &lt;OfferListing&gt;             &lt;Price&gt;               &lt;Amount&gt;1853&lt;/Amount&gt;             &lt;/Price&gt;           &lt;/OfferListing&gt;         &lt;/Offer&gt;       &lt;/Offers&gt;     &lt;/Item&gt;   &lt;/Items&gt; &lt;/ItemSearchResponse&gt;  e = element.findall('Items/Item/ItemAttributes/ListPrice/Amount')  from elementtree import ElementTree as ET fp = open("output.xml""r") element = ET.parse(fp) e = element.findall('Items/Item/ItemAttributes/ListPrice/Amount') for i in e:   print i.text  from elementtree import ElementTree as ET fp = open("output.xml""r") element = ET.parse(fp)  namespace = "{http://webservices.amazon.com/AWSECommerceService/2008-08-19}" e = element.findall('{0}Items/{0}Item/{0}ItemAttributes/{0}ListPrice/{0}Amount'.format(namespace)) for i in e:     print i.text  
class MyException(Exception):     pass  class ValidationError(Exception):     def __init__(self message errors):          # Call the base class constructor with the parameters it needs         super(ValidationError self).__init__(message)          # Now for your custom code...         self.errors = errors  e.errors super() class ValidationError(Exception):     def __init__(self message errors):          # Call the base class constructor with the parameters it needs         super().__init__(message)          # Now for your custom code...         self.errors = errors  
# This code will work fine note we are assigning the result  # of the BeautifulSoup object to prevent it from printing immediately. from BeautifulSoup import BeautifulSoup soup = BeautifulSoup(u'\xa0')  # This will probably show the error you saw print soup  # And this would probably be fine print soup.encode('utf-8')  
glob import glob tifCounter = len(glob.glob1(myPath"*.tif"))  
def make_image_from_file(fname):   im = gtk.Image()   im.set_from_file(fname)   return im  self.out_button.set_image(make_image_from_file(..))  gtk.image_new_from_file(filename)  
primitiveTypes if isinstance(myvar primitiveTypes): ...  types 
&gt;&gt;&gt; l = range(10) &gt;&gt;&gt; l [0 1 2 3 4 5 6 7 8 9] &gt;&gt;&gt; import numpy &gt;&gt;&gt; a = numpy.array(l) &gt;&gt;&gt; a array([0 1 2 3 4 5 6 7 8 9])  &gt;&gt;&gt; l * 2 [0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9] &gt;&gt;&gt; a * 2 array([ 0  2  4  6  8 10 12 14 16 18])  &gt;&gt;&gt; l + 2 Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: can only concatenate list (not "int") to list &gt;&gt;&gt; a + 2 array([ 2  3  4  5  6  7  8  9 10 11]) &gt;&gt;&gt; l / 2.0 Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: unsupported operand type(s) for /: 'list' and 'float' &gt;&gt;&gt; a / 2.0 array([ 0.   0.5  1.   1.5  2.   2.5  3.   3.5  4.   4.5])  &gt;&gt;&gt; a + a array([ 0  2  4  6  8 10 12 14 16 18]) &gt;&gt;&gt; a + l array([ 0  2  4  6  8 10 12 14 16 18])  
--quiet --verbose 
import bisect  def closest(haystack needle):     if len(haystack) == 0: return None None      index = bisect.bisect_left(haystack needle)     if index == 0:         return None haystack[0]     if index == len(haystack):         return haystack[index] None     if haystack[index] == needle:         return haystack[index] haystack[index]             return haystack[index-1] haystack[index]  
&gt;&gt;&gt; import re &gt;&gt;&gt; def special_match(strg search=re.compile(r'[^a-z0-9.]').search): ...     return not bool(search(strg)) ... &gt;&gt;&gt; special_match("") True &gt;&gt;&gt; special_match("az09.") True &gt;&gt;&gt; special_match("az09.\n") False # The above test case is to catch out any attempt to use re.match() # with a `$` instead of `\Z` -- see point (6) below. &gt;&gt;&gt; special_match("az09.#") False &gt;&gt;&gt; special_match("az09.X") False &gt;&gt;&gt;  ==== Earlier text ====  reg=re.compile('^[a-z0-9\.]+$') &gt;&gt;&gt;reg.match('jsdlfjdsf12324..3432jsdflsdf') True  True ^ ^ prompt&gt;rem OP's version -- NOTE: OP used raw string!  prompt&gt;\python26\python -mtimeit -s"t='jsdlfjdsf12324..3432jsdflsdf';import re;reg=re.compile(r'[^a-z0-9\.]')" "not bool(reg.search(t))" 1000000 loops best of 3: 1.43 usec per loop  prompt&gt;rem OP's version w/o backslash  prompt&gt;\python26\python -mtimeit -s"t='jsdlfjdsf12324..3432jsdflsdf';import re;reg=re.compile(r'[^a-z0-9.]')" "not bool(reg.search(t))" 1000000 loops best of 3: 1.44 usec per loop  prompt&gt;rem cleaned-up version of accepted answer  prompt&gt;\python26\python -mtimeit -s"t='jsdlfjdsf12324..3432jsdflsdf';import re;reg=re.compile(r'[a-z0-9.]+\Z')" "bool(reg.match(t))" 100000 loops best of 3: 2.07 usec per loop  prompt&gt;rem accepted answer  prompt&gt;\python26\python -mtimeit -s"t='jsdlfjdsf12324..3432jsdflsdf';import re;reg=re.compile('^[a-z0-9\.]+$')" "bool(reg.match(t))" 100000 loops best of 3: 2.08 usec per loop  &gt;&gt;&gt; import re &gt;&gt;&gt; bool(re.compile('^[a-z0-9\.]+$').match('1234\n')) True # uh-oh &gt;&gt;&gt; bool(re.compile('^[a-z0-9\.]+\Z').match('1234\n')) False  
in has_key() 
import unittest  class CommonTests(object):     def testCommon(self):         print 'Calling BaseTest:testCommon'         value = 5         self.assertEquals(value 5)  class SubTest1(unittest.TestCase CommonTests):      def testSub1(self):         print 'Calling SubTest1:testSub1'         sub = 3         self.assertEquals(sub 3)   class SubTest2(unittest.TestCase CommonTests):      def testSub2(self):         print 'Calling SubTest2:testSub2'         sub = 4         self.assertEquals(sub 4)  if __name__ == '__main__':     unittest.main()  
ord None def translate_non_alphanumerics(to_translate translate_to=u'_'):     not_letters_or_digits = u'!"#%\'()*+-./:;&lt;=&gt;?@[\]^_`{|}~'     translate_table = dict((ord(char) translate_to) for char in not_letters_or_digits)     return to_translate.translate(translate_table)  &gt;&gt;&gt; translate_non_alphanumerics(u'&lt;foo&gt;!') u'_foo__'  ord translate_to &gt;&gt;&gt; translate_non_alphanumerics(u'&lt;foo&gt;!' u'bad') u'badfoobadbad'  
ordering Meta class Article(models.Model):     ....      class Meta:         ordering = ['surname' 'name']  
&gt;&gt;&gt; a = (c_byte * 4)() &gt;&gt;&gt; a &lt;__main__.c_byte_Array_4 object at 0xb7da2df4&gt; &gt;&gt;&gt; cast(a POINTER(c_int)) &lt;ctypes.LP_c_long object at ...&gt; &gt;&gt;&gt;  
os.name os.name import os  if os.name == 'nt':      ...  os.name sys.platform os.uname() 
&gt;&gt;&gt; class Foo(object): ...     pass ...  &gt;&gt;&gt; foo = Foo() &gt;&gt;&gt; foo.a = 3 &gt;&gt;&gt; Foo.b = property(lambda self: self.a + 1) &gt;&gt;&gt; foo.b 4  property if __getattribute__ foo.b b __get__ __set__ __delete__ Foo.b.__get__(foo Foo) property fget fset fdel property property &gt;&gt;&gt; class Foo(object): ...     def bar(self): ...         pass ...  &gt;&gt;&gt; Foo().bar &lt;bound method Foo.bar of &lt;__main__.Foo object at 0x7f2a439d5dd0&gt;&gt; &gt;&gt;&gt; Foo().bar.__get__ &lt;method-wrapper '__get__' of instancemethod object at 0x7f2a43a8a5a0&gt;  __get__ def __get__(self instance owner):     return functools.partial(self.function instance)  type Foo.b property.__get__ 
fileinput import fileinput  processing_foo1s = False  for line in fileinput.input('1.txt' inplace=1):   if line.startswith('foo1'):     processing_foo1s = True   else:     if processing_foo1s:       print 'foo bar'     processing_foo1s = False   print line  .bak "foo bar" foo1 
import shelve  a = 'trxns.xml' b = 'foobar.xml' c = 'profile.xml'  urls = [a b c] cache = shelve.open('my.cache' 'c')  try:     cache[a] = a*1000     cache[b] = b*10000 finally:     cache.close()   cache = shelve.open('my.cache' 'c')  try:     print cache.keys()     print [url for url in urls if cache.has_key(url)]     print cache.keys() finally:     cache.close()  [] ['trxns.xml' 'foobar.xml'] ['foobar.xml' 'trxns.xml']  
.. module:: SegLib  
from django.db import models  class Person(models.Model):     first_name = models.CharField(max_length=30)     last_name = models.CharField(max_length=30)      def _get_full_name(self):         return "%s %s" % (self.first_name self.last_name)      def _set_full_name(self combined_name):         self.first_name self.last_name = combined_name.split(' ' 1)      full_name = property(_get_full_name)      full_name_2 = property(_get_full_name _set_full_name)  
def fn(*args):     fn2(['foo' 'bar'] + list(args))  
import functools  ...  fooA = functools.partial(call_one _fooA) fooB = functools.partial(call_one _fooB)  def refactorMe(func):     def wrapper(parm1 parm2):         if parm1:             code_chunk_1          func(parm1)          if parm2[-1]:             code_chunk_2      return wrapper  def _refactorMe(func):         @functools.wraps(func) #the wraps decorator propagates name/docsting         def wrapper(parm1 parm2):             if parm1:                 code_chunk_1              func(parm1 parm2)              if parm2:                 code_chunk_2          return wrapper  @_refactorMe def fooB(param1 param2):     fooB_code  #uses only param1   @_refactorMe def fooB(param1 param2):     fooB_code  #uses only param1  
( ) group(1) re.search None group() title_search = re.search('&lt;title&gt;(.*)&lt;/title&gt;' html re.IGNORECASE)  if title_search:     title = title_search.group(1)  
new_image= image.point(lambda value: value&lt;&lt;4 | value&gt;&gt;8)  argument * scale + offset I point new_image= image.point(lambda argument: argument*16)  itertools import itertools as it # for brevity import operator  def scale_12to16(image):     new_image= image.copy()     new_image.putdata(         it.imap(operator.or_             it.imap(operator.lshift image.getdata() it.repeat(4))             it.imap(operator.rshift image.getdata() it.repeat(8))         )     )     return new_image  point 
.. automodule:: module    :members:  
imp = Import('http://schemas.xmlsoap.org/soap/encoding/') # Below is your targetNamespace presented in WSDL. Remember # that you can add more namespaces by appending more imp.filter.add imp.filter.add('http://someURL.asmx')  doctor = ImportDoctor(imp)  client = Client(url doctor=doctor)  
SAVEPOINT a; INSERT INTO ....; -- on error: ROLLBACK TO SAVEPOINT a; UPDATE ...; -- on success: RELEASE SAVEPOINT a;  
x = struct.pack(4*'B' + 'HB'[ALPHA&lt;256] + 4*'B' *data)  
&gt;&gt;&gt; import sys &gt;&gt;&gt; x = 2 &gt;&gt;&gt; sys.getsizeof(x) 14 &gt;&gt;&gt; sys.getsizeof(sys.getsizeof) 32 &gt;&gt;&gt; sys.getsizeof('this') 38 &gt;&gt;&gt; sys.getsizeof('this also') 48  &gt;&gt;&gt; import sys &gt;&gt;&gt; import decimal &gt;&gt;&gt;  &gt;&gt;&gt; d = { ...     "int": 0 ...     "float": 0.0 ...     "dict": dict() ...     "set": set() ...     "tuple": tuple() ...     "list": list() ...     "str": "a" ...     "unicode": u"a" ...     "decimal": decimal.Decimal(0) ...     "object": object() ... } &gt;&gt;&gt; for k v in sorted(d.iteritems()): ...     print k sys.getsizeof(v) ... decimal 40 dict 140 float 16 int 12 list 36 object 8 set 116 str 25 tuple 28 unicode 28  decimal 36 dict 136 float 16 int 12 list 32 object 8 set 112 str 22 tuple 24 unicode 32  decimal 52 dict 144 float 16 int 14 list 32 object 8 set 112 str 26 tuple 24 unicode 26  decimal 80 dict 280 float 24 int 24 list 72 object 16 set 232 str 38 tuple 56 unicode 52  
[0] heapy_Use.html#heapykinds.Use.pb  class ProfileBrowser(Resource):     def render_GET(self request):         h.pb()         return "You saw it right?"  ... root = RootResource(mq) root.putChild("profile-browser" ProfileBrowser()) ...  
GEOSGeometry &gt;&gt;&gt; from django.contrib.gis.geos import * &gt;&gt;&gt; pnt = GEOSGeometry('SRID=2029;POINT(630084 4833438)') &gt;&gt;&gt; (pnt.x pnt.y) (630084.0 4833438.0) &gt;&gt;&gt; pnt.srid 2029  &gt;&gt;&gt; pnt.transform(4326)   # Transform to WGS84 &gt;&gt;&gt; (pnt.x pnt.y) (-79.387137066054038 43.644504290860461) &gt;&gt;&gt; pnt.srid 4326  
assertEqual = assertEquals = failUnlessEqual  
ssh hudson@test "python/runtest.py \"$XAS_SVN\""  
done = set() while len(queue) &gt; 0 :    item = queue.pop()    h = hash(item)    if h not in done :       process(item)       done.add(h)  
result = default.copy() result.update((k v) for k v in user.iteritems() if v is not None)  
isLinux debug = getUserInput(isLinux=True)  
 class ClassA(Base):      ...      b_id = Column(None ForeignKey('b.id'))      b = relation(ClassB)   my_object = ClassA()  my_object.b = "foo"   my_object.b_id = "foo"  # or  my_object.b = session.query(ClassB).get("foo")  
def completefactory(baseclass):     class AutoComplete(baseclass):         pass     return AutoComplete  TextAutoComplete = completefactory(TextCtrl) PriceAutoComplete = completefactory(PriceCtrl)  TextAutoComplete class TextAutocomplete(TextCtrl AutoComplete):     pass  
__new__ __init__ __init__ self.host = host self.userid = userid etc.  GetDataStore conn = _mssql.connect(server=self.host user=self.userid etc.)  
class Chunker(object):     """Split `iterable` on evenly sized chunks.      Leftovers are remembered and yielded at the next call.     """     def __init__(self chunksize):         assert chunksize &gt; 0         self.chunksize = chunksize                 self.chunk = []      def __call__(self iterable):         """Yield items from `iterable` `self.chunksize` at the time."""         assert len(self.chunk) &lt; self.chunksize         for item in iterable:             self.chunk.append(item)             if len(self.chunk) == self.chunksize:                 # yield collected full chunk                 yield self.chunk                 self.chunk = []   chunker = Chunker(3) for s in "abcd" "efgh":     for chunk in chunker(s):         print ''.join(chunk)  if chunker.chunk: # is there anything left?     print ''.join(chunker.chunk)  abc def gh  
import signal TIMEOUT = 5 # number of seconds your want for timeout  def interrupted(signum frame):     "called when read times out"     print 'interrupted!' signal.signal(signal.SIGALRM interrupted)  def input():     try:             print 'You have 5 seconds to type in your stuff...'             foo = raw_input()             return foo     except:             # timeout             return  # set alarm signal.alarm(TIMEOUT) s = input() # disable the alarm after success signal.alarm(0) print 'You typed' s  
__hash__() __cmp__() __hash__() x.__hash__() id(x) id 
re.sub(r'\r\n|\r|\n' '\r\n' msg) msg.replace('\r\n''\n').replace('\r''\n').replace('\n''\r\n') 
fmin_cobyla() b9 b10 fmin_cobyla() fmin_cobyla() b9 = lambda x: x[2] - x[3]  b10 fmin_cobyla() 
__slots__ __slots__ __slots__ __dict__ class Obj(object):   __slots__ = ('i' 'l')   def __init__(self i):     self.i = i     self.l = [] all = {} for i in range(1000000):   all[i] = Obj(i)  class Obj(object):   def __init__(self i):     self.i = i     self.l = [] all = {} for i in range(1000000):   all[i] = Obj(i)  all = {} for i in range(1000000):   o = {}   o['i'] = i   o['l'] = []   all[i] = o  import collections  Obj = collections.namedtuple('Obj' 'i l')  all = {} for i in range(1000000):   all[i] = Obj(i [])  $ lshw | grep product | head -n 1           product: Intel(R) Pentium(R) M processor 1.60GHz $ python --version Python 2.5 $ time python test_obj.py &amp;&amp; time python test_dict.py &amp;&amp; time python test_slots.py   real    0m27.398s (using 'normal' object) real    0m16.747s (using __dict__) real    0m11.777s (using __slots__)  $ python --version Python 2.6.2 $ time python test_obj.py &amp;&amp; time python test_dict.py &amp;&amp; time python test_slots.py &amp;&amp; time python test_namedtuple.py   real    0m27.197s (using 'normal' object) real    0m17.657s (using __dict__) real    0m12.249s (using __slots__) real    0m12.262s (using namedtuple)  __slots__ __slots__ 
$ ipython ... In [1]: %run file.py  Trying:     3+2 Expecting:     5 ok 1 items had no tests:     __main__ 1 items passed all tests:    1 tests in __main__.Foo 1 tests in 2 items. 1 passed and 0 failed. Test passed.  In [2]:   ipython file.py doctest.testmod() __main__ __main__ __main__ if __name__ == '__main__':     import doctest     import the_current_module     doctest.testmod(the_current_module)  ipython_doctest #! /usr/bin/env bash  echo "__IP.magic_run(\"$1\")" &gt; __ipython_run.py ipython __ipython_run.py  %run argname $ ./ipython_doctest file.py Trying:     3+2 Expecting:     5 ok 1 items had no tests:     __main__ 1 items passed all tests:    1 tests in __main__.Foo 1 tests in 2 items. 1 passed and 0 failed. Test passed. Python 2.5 (r25:51908 Mar  7 2008 03:27:42)  Type "copyright" "credits" or "license" for more information.  IPython 0.9.1 -- An enhanced Interactive Python. ?         -&gt; Introduction and overview of IPython's features. %quickref -&gt; Quick reference. help      -&gt; Python's own help system. object?   -&gt; Details about 'object'. ?object also works ?? prints more.  In [1]:  
class Building(Base):     __tablename__ = 'building'     id = Column(Integer primary_key=True)     building_type = Column(String(32) nullable=False)     x = Column(Float nullable=False)     y = Column(Float nullable=False)     __mapper_args__ = {'polymorphic_on': building_type}  class Commercial(Building):     __mapper_args__ = {'polymorphic_identity': 'commercial'}     business = Column(String(50))  class Residential(Building):     __mapper_args__ = {'polymorphic_identity': 'residential'}     num_residents = Column(Integer)  __tablename__ = 'commercial' id = Column(None ForeignKey('building.id') primary_key=True)  # buildings that are within x&gt;5 and y&gt;3 session.query(Building).filter((Building.x &gt; 5) &amp; (Building.y &gt; 3)) # Residential buildings that have only 1 resident session.query(Residential).filter(Residential.num_residents == 1)  query.with_polymorphic() 
property @property object class Point:  class Point(object):  setter 
a = line_parts[0] or "0"  def fn(arg1 arg2=None):     arg2 = arg2 or ["weird default value"]  
thescript.foo Some_Object some_function some_function.func_globals import new f=new.function(some_function.func_code {})  f() NameError: global name 'foo' is not defined some_function def noglobal(f):     return new.function(f.func_code {}) ... @noglobal def some_function(): ...  some_function 
logging.info("NEW_SCORE: %s" score)  % logging %s logging %s logging.info str + logging % format 
 "...WHERE rand1 &gt; :rand2 ORDER BY rand LIMIT 1")    "...WHERE rand1 &gt; :rand2 ORDER BY rand LIMIT 1" rand2=rand2)    "...WHERE rand1 &gt; :1 ORDER BY rand LIMIT 1" rand2)  
Bunch Bunch class Bunch(object):   def __init__(self adict):     self.__dict__.update(adict)  config config.account_receivable config Bunch cb = Bunch(config)  cb.config_account Bunch dict config cb.foo = 23 config['foo'] = 23 Bunch class RwBunch(object):   def __init__(self adict):     self.__dict__ = adict  Bunch Bunch dict RwBunch dict dict 
loadTestsFromTestCase Boy.BoyTest BoyTest Boy BoyTest 
__str__ class efloat(float):     def __repr__(self):         return "here's my number: %s" % self  self+0 self*1 float.__add__(self 0) 
def Game(x):     # x str(x) position     stack = [(xstr(x)0)]     # return value     res = None      while stack:         if res is not None:             # we have a return value             if not res:                 stack.pop()                 res = True                 continue             # res is True continue to search             res = None         x s pos = stack.pop()         if x == 0:             res = True             continue         if pos == len(s):             # end of loop return False             res = False             continue         stack.append((xspos+1))         digit = s[pos]         if digit == '0':             continue         x -= int(digit)         # recurse starting with position 0         stack.append((xstr(x)0))      return res  
db.reset_queries() reset_queries() 
# models:  make sure the naming convention matches what ManyToManyField would create class Report_LocationGroups(models.Model):     locationgroup = models.ForeignKey(LocationGroup)     report = models.ForeignKey(Report)  # admin class ReportInline(admin.TabularInline):     model = models.Report_LocationGroups  class LocationGroupAdmin(admin.ModelAdmin):     inlines = ReportInline  
&gt;&gt;&gt; re.match(r"\\t" r"\t") &lt;_sre.SRE_Match object at 0xb7ce5d78&gt;  &gt;&gt;&gt; re.match(r"\\" r"\\") &lt;_sre.SRE_Match object at ...&gt; &gt;&gt;&gt; re.match("\\\\" r"\\") &lt;_sre.SRE_Match object at ...&gt;  
tests/ models.py tests.py tests/ tests/ 
CustomDocumentProperties Saved msoPropertyTypeBoolean = 0 msoPropertyTypeDate = 1 msoPropertyTypeFloat = 2 msoPropertyTypeNumber = 3 msoPropertyTypeString = 4  import win32com.client  MSWord = win32com.client.Dispatch("Word.Application") MSWord.Visible = False  doc = MSWord.Documents.Open(file) csp = doc.CustomDocumentProperties csp.Add('Some Property' False msoPropertyTypeString 'Some New Value') doc.Saved = False doc.Save() doc.Close()  MSWord.Quit()  
hits = dict.fromkeys(param_sets [])  hits = dict() onelist = [] for k in param_sets:     hits[k] = onelist  hits hits = dict() for k in param_sets:     hits[k] = []  hits = dict((k []) for k in param_sets)  newdict = dict(olddict) newlist = list(oldlist) newset = set(oldset)  newlist = list(oldset) 
ascii utf-8 # -*- coding: utf-8 -*-  # coding: utf-8  u s.replace(u"Â " u"") from __future__ import unicode_literals s.replace(u"Â " u"") s string.replace 
mod = __import__('foo.bar' fromlist = ['some_module'])  some_module mod.some_module the_module = getattr(mod 'some_module')  
import pdb;pdb.set_trace()  init_model() where w(here) Print a stack trace with the most recent frame at the bottom. An arrow indicates the "current frame" which determines the context of most commands.  'bt' is an alias for this command.  
import xlwt wb = xlwt.Workbook() ws = wb.add_sheet('Test Sheet') lte = u'\u2264' gte = u'\u2265' ws.write(00lte+gte) wb.save('foo.xls')  #-*- coding: utf-8 -*-  import xlwt wb = xlwt.Workbook() ws = wb.add_sheet('Test Sheet') lte = u'?' gte = u'?' ws.write(00lte+gte) wb.save('foo.xls')  
{@csm r'\{@csm((?:\.\w+)+)\}'  
if any(t &lt; 0 for t in x):     # do something  if True in (t &lt; 0 for t in x):  
property class MyModel(models.Model):     _first_name = models.CharField(max_length=100 db_column='first_name')      @property     def first_name(self):         return self._first_name or self.user.first_name      @first_name.setter     def first_name(self value):        self._first_name = value  myinstance.first_name = 'daniel' save() def save(self *args **kwargs):     if not self.first_name:         self.first_name = self.user.first_name     # now call the default save() method     super(MyModel self).save(*args **kwargs)  
void foo(const int *num) {     num = new int(*num * 2); }  const int *a = new int(4); foo(a);  print(a);  
eulerproject/     euler/         __init__.py         euler1.py         ...         tests/             ...     setup.py  PYTHONPATH=/path/to/eulerproject/:$PYTHONPATH from euler import euler1  nose eulerproject/     runtests.py     euler/         __init__.py         euler1.py         ...         tests/             __init__.py            testeulern.py  runtests.py from euler.tests.testeulern import TestCase testeulern.py from .. import euler1 
Formatter class MyFormatter(logging.Formatter):     def format(self record):         #compute s according to record.levelno         #for example by setting self._fmt         #according to the levelno then calling         #the superclass to do the actual formatting         return s  MyFormatter 
except raise expected_exceptions = KeyError AttributeError TypeError  except expected_exceptions: except: try:     foo1() except expected_exceptions:     try:         if condition:             foobetter()         else:             raise     except expected_exceptions:         handleError()  def may_raise(expected_exceptions somefunction *a **k):   try:     return False somefunction(*a **k)   except expected_exceptions:     return True None  failed _ = may_raise(expected_exceptions foo1) if failed and condition:   failed _ = may_raise(expected_exceptions foobetter) if failed:   handleError()  may_raise 
get_all_data 
mapping = {X1: Y1 X2: Y2 X3: Y3} mapping[X4] = Y4 mapping[X5] = Y5  for XY in mapping.items():     if Y is not None:         obj[X][0] = Y  
[1 2 3]  
class Command( object ):     name= "name"     def setup_opts( self parser ):         """Add any options to the parser that this command needs."""         pass     def execute( self context options args ):         """Execute the command in some application context with some options and args."""         raise NotImplemented  Install Remove commands = [      Install()     Remove() ] def main():     parser= optparse.OptionParser()     for c in commands:         c.setup_opts( parser )     options args = parser.parse()     command= None     for c in commands:         if c.name.startswith(args[0].lower()):             command= c             break     if command:         status= command.execute( context options args[1:] )     else:         logger.error( "Command %r is unknown" args[0] )         status= 2     sys.exit( status )  
&gt;&gt;&gt; import datetime &gt;&gt;&gt; first_time = datetime.datetime.now() &gt;&gt;&gt; later_time = datetime.datetime.now() &gt;&gt;&gt; difference = later_time - first_time &gt;&gt;&gt; seconds_in_day = 24 * 60 * 60 datetime.timedelta(0 8 562000) &gt;&gt;&gt; divmod(difference.days * seconds_in_day + difference.seconds 60) (0 8)      # 0 minutes 8 seconds  difference = later_time - first_time 
&gt;&gt;&gt; import sys &gt;&gt;&gt; sys.byteorder 'little'  'big' 
src[0:i-1].append(src[-1])  src[0:i-1] + src[-1:] #note the trailing ":" we want a list not an element  
$ paste c1 c2 | awk '{print $1 + $2}'  $ paste c1 c2 | while read i j; do echo $(($i+$j)); done  
"C:\Users\Eric\Desktop\beeline.txt"  \U "C:\Users \U00014321 "C:\\Users\\Eric\\Desktop\\beeline.txt"  r r"C:\Users\Eric\Desktop\beeline.txt"  
for od in clist:      o = Offer()     o.network_id = od['network_id']     o.external_id = od['external_id']     o.title = od['title']     o.updated = datetime.datetime.now()     payout = od['payout']     countrylist = od['countries']      for country in countrylist:         opayout = OfferPayout()         opayout.payout = od['payout']         country_obj = Country()         country_obj.name = country         opayout.country = country_obj          o.offerpayout.append(opayout)       session.merge(o)      session.flush()  
ctypes.cdll.msvcrt ctypes.cdll.anything anything.dll ctypes.cdll.msvcrt msvcrt.dll msvcrt ctypes.cdll.msvcr90 find_msvcrt() ctypes.CDLL 
from timeit import timeit  noc = 100 tocat = "a" def f_call():     pass  def loop_only():     for i in range(noc):         pass  def concat_method():     s = ''     for i in range(noc):         s = s + tocat  def list_append():     s=[]     for i in range(noc):         s.append(tocat)     ''.join(s)  def list_append_opt():     s = []     zap = s.append     for i in range(noc):         zap(tocat)     ''.join(s)  def list_comp():     ''.join(tocat for i in range(noc))  def concat_method_buildup():     s=''  def list_append_buildup():     s=[]  def list_append_opt_buildup():     s=[]     zap = s.append  def function_time(f):     return timeit(fnumber=1000)*1000  f_callt = function_time(f_call)  def measure(ftuplentc):     global noctocat     noc = n     tocat = tc     loopt = function_time(loop_only) - f_callt     buildup_time = function_time(ftuple[1]) -f_callt if ftuple[1] else 0     total_time = function_time(ftuple[0])     return total_time total_time - f_callt - buildup_time - loopt*ftuple[2]  functions ={'Concat Method\t\t':(concat_methodconcat_method_buildupTrue)             'List append\t\t\t':(list_appendlist_append_buildupTrue)             'Optimized list append':(list_append_optlist_append_opt_buildupTrue)             'List comp\t\t\t':(list_comp0False)}  for i in range(5):     print("\n\n%d concatenation\t\t\t\t10'a'\t\t\t\t 100'a'\t\t\t1000'a'"%10**i)     print('-'*80)     for (fft) in functions.items():         print(f"\t|"end="\t")         for j in range(3):             t = measure(ft10**i'a'*10**j)             print("%.3f %.3f |" % tend="\t")         print()  1 concatenation                 1'a'                  10'a'               100'a' -------------------     ----------------------  -------------------  ---------------- List comp               |   2.310 2.168       |  2.298 2.156       |  2.304 2.162 Optimized list append   |   1.069 0.439       |  1.098 0.456       |  1.071 0.413 Concat Method           |   0.552 0.034       |  0.541 0.025       |  0.565 0.048 List append             |   1.099 0.557       |  1.099 0.552       |  1.094 0.552   10 concatenations                1'a'                  10'a'               100'a' -------------------     ----------------------  -------------------  ---------------- List comp               |   3.366 3.224       |  3.473 3.331       |  4.058 3.916 Optimized list append   |   2.778 2.003       |  2.956 2.186       |  3.417 2.639 Concat Method           |   1.602 0.943       |  1.910 1.259       |  3.381 2.724 List append             |   3.290 2.612       |  3.378 2.699       |  3.959 3.282   100 concatenations               1'a'                  10'a'               100'a' -------------------     ----------------------  -------------------  ---------------- List comp               |   15.900 15.758     |  17.086 16.944     |  20.260 20.118 Optimized list append   |   15.178 12.585     |  16.203 13.527     |  19.336 16.703 Concat Method           |   10.937 8.482      |  25.731 23.263     |  29.390 26.934 List append             |   20.515 18.031     |  21.599 19.115     |  24.487 22.003   1000 concatenations               1'a'                  10'a'               100'a' -------------------     ----------------------  -------------------  ---------------- List comp               |   134.507 134.365   |  143.913 143.771   |  201.062 200.920 Optimized list append   |   112.018 77.525    |  121.487 87.419    |  151.063 117.059 Concat Method           |   214.329 180.093   |  290.380 256.515   |  324.572 290.720 List append             |   167.625 133.619   |  176.241 142.267   |  205.259 171.313   10000 concatenations              1'a'                  10'a'               100'a' -------------------     ----------------------  -------------------  ---------------- List comp               |   1309.702 1309.560 |  1404.191 1404.049 |  2912.483 2912.341 Optimized list append   |   1042.271 668.696  |  1134.404 761.036  |  2628.882 2255.804 Concat Method           |   2310.204 1941.096 |  2923.805 2550.803 |  STUCK    STUCK List append             |   1624.795 1251.589 |  1717.501 1345.137 |  3182.347 2809.233  
import re reg=re.compile('(\w+)[:=] ?"?(\w+)"?')  &gt;&gt;&gt;dict(reg.findall(headers))  {'username': 'Foobear' 'realm': 'testrealm' 'qop': 'chap' 'cnonce': '5ccc069c403ebaf9f0171e9517f40e41' 'response': '6629fae49393a05397450978507c4ef1' 'Authorization': 'Digest'}  
from numpy import * a = arange(4).reshape((22)) print a**2  [[0 1]  [4 9]]  
import sys class MyException(Exception): pass  try:     raise TypeError("test") except TypeError e:     raise MyException() None sys.exc_info()[2]  
class a:     @classmethod     def spam(cls):         # not really pass but you get the idea         pass      lut = [1            3            17            [1234]            5            spam]   assert a().lut[-1] == a.spam assert a.spam() is None  
 webbrowser.get('firefox').open(url)  
$ python -mtimeit -s'lst=[123012]*1000' 'for i in xrange(len(lst)): elem=lst[i]' 1000 loops best of 3: 480 usec per loop $ python -mtimeit -s'lst=[123012]*1000' 'for i elem in enumerate(lst): pass' 1000 loops best of 3: 473 usec per loop  timeit for v elem elem elem i 
url(r'^so/(?P&lt;required&gt;\d+)/$' 'myapp.so' name='something') url(r'^so/(?P&lt;required&gt;\d+)/(?P&lt;optional&gt;.*)/$' 'myapp.so' name='something_else')  
for c in colors[:]:     if c == 'green':         colors.remove(c)  
ScopedSession.add add ScopedSession.remove() query_property ScopedSession.mapper __init__(**kwargs) save_on_init ScopedSession.mapper ScopedSession.mapper 
import signal signal.signal(signal.SIGINT signal.SIG_DFL)  a.main() 
&gt;&gt;&gt; s = your_string &gt;&gt;&gt; s.split() ['MiamiPete:' "today's" '"Last' 'Call"' 'is' 'now' 'up' 'http://bit.ly/MGDzu' '#stocks' '#stockmarket' '#finance' '#money'] &gt;&gt;&gt; url = [i for i in s.split() if i.startswith('http://')] &gt;&gt;&gt; url ['http://bit.ly/MGDzu'] &gt;&gt;&gt; tags = [i for i in s.split() if i.startswith('#')] &gt;&gt;&gt; tags ['#stocks' '#stockmarket' '#finance' '#money'] &gt;&gt;&gt; ' '.join(i for i in s.split() if i not in url+tags) 'MiamiPete: today\'s "Last Call" is now up'  
super(Alpha self).__init__()  
def DELETEMIN( A ):         if A.leftchild is None:                 return A.element A.rightchild         else:                 return DELETEMIN( A.leftchild )  foo = DELETEMIN( bar ) foo bar = DELETEMIN( bar )  
example.py import from libcloud.drivers import EC2 Slicehost Rackspace  EC2 libcloud.drivers libcloud.drivers EC2 __init__.py libcloud/drivers/ example.py libcloud/drivers/__init__.py EC2 
eval &lt;iostream&gt; #include &lt;iostream&gt; &lt;iostream&gt; &lt;iostream&gt; cout &lt;iostream&gt; std using namespace std; from std import * #include import std using namespace std; std using namespace using std::cout; using namespace main __main__ std::cout cout using namespace std; using std::cout import std from std import * from std import cout &lt;&lt; cout &lt;&lt; value cout value print main return 0; main exit exit 
__class__ __new__ super 
print "Name: %-20s Price: %10d" % (i.name i.price)  . 
def onelevelok(parent thislevel):   for fn in os.listdir(parent):     if fn.lower() == thislevel.lower():       return fn == thislevel   raise ValueError('No %r in dir %r!' % (       thislevel parent))  def allpathok(path):   levels = os.path.split(path)   if os.path.isabs(path):     top = ['/']   else:     top = ['.']   return all(onelevelok(p t)              for p t in zip(top+levels levels))  foo/bar foo zip levels zip all False 
tz = timezone('US/Pacific') def toUTC(d):     return tz.normalize(tz.localize(d)).astimezone(pytz.utc)  print "Test: " datetime.datetime.utcnow() " = " toUTC(datetime.datetime.now())  
dict1 = {'a': [(1 2) (3 4)] 'b': [(1 2) (5 6)]} dict2 = {'a': [(1 2) (5 6)] 'b': [(1 2) (7 8)]}  &gt;&gt;&gt; dict( (key[tuple(v) for v in dict1[key]]) for key in dict1 ) {'a': [(1 2) (3 4)] 'b': [(1 2) (5 6)]}  &gt;&gt;&gt; dict1t= dict( (key[tuple(v) for v in dict1[key]]) for key in dict1 ) &gt;&gt;&gt; dict2t= dict( (key[tuple(v) for v in dict2[key]]) for key in dict2 ) &gt;&gt;&gt; set(dict1t['a'])-set(dict2t['a']) set([(3 4)])  
__setattr__ class const(object):   def __init__(self val): self.val = val   def __get__(self *_): return self.val   def __set__(self *_): raise TypeError("Can't reset const!")  class mcl(type):   def __init__(cls *a **k):     mkl = cls.__class__     class spec(mkl): pass     for n v in vars(cls).items():       if isinstance(v const):         setattr(spec n v)     spec.__name__ = mkl.__name__     cls.__class__ = spec  class with_const:   __metaclass__ = mcl  class foo(with_const):   CLASS_CONSTANT = const('this is a constant')  print foo().CLASS_CONSTANT print foo.CLASS_CONSTANT foo.CLASS_CONSTANT = 'Oops!' print foo.CLASS_CONSTANT  __setattr__ const __setattr__ 
plt.figure(i) plt.subplot(44i+1) 
aprime bprime = zip(*[(a1b1) for a1b1c1 in zip(abc) if c1==0])  
SIGCLD subprocess python-daemon SIGCLD 
startupinfo = subprocess.STARTUPINFO() startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW p = subprocess.Popen(args = "demo.exe" stdout=subprocess.PIPE startupinfo=startupinfo)  
[pair[1] for pairlist in dict1.values() for pair in pairlist]  dict1.values() for pairlist in dict1.values() for pair in pairlist pair[1] &gt;&gt;&gt; dict1 = {} &gt;&gt;&gt; dict1['a'] = [[12] [34]] &gt;&gt;&gt; dict1['b'] = [[5 6] [42 69] [220 284]] &gt;&gt;&gt;  &gt;&gt;&gt; dict1.values() [[[1 2] [3 4]] [[5 6] [42 69] [220 284]]] &gt;&gt;&gt;  &gt;&gt;&gt; [pairlist for pairlist in dict1.values()] [[[1 2] [3 4]] [[5 6] [42 69] [220 284]]] &gt;&gt;&gt; # No real difference here but we can refer to each list now. &gt;&gt;&gt;  &gt;&gt;&gt; [pair for pairlist in dict1.values() for pair in pairlist] [[1 2] [3 4] [5 6] [42 69] [220 284]] &gt;&gt;&gt;  &gt;&gt;&gt; # Finally... &gt;&gt;&gt; [pair[1] for pairlist in dict1.values() for pair in pairlist] [2 4 6 69 284]  
def func():     a = 10     print a  co = func.func_code modified_consts = list(co.co_consts) for idx val in enumerate(modified_consts):     if modified_consts[idx] == 10: modified_consts[idx] = 15  modified_consts = tuple(modified_consts)  import types modified_code = types.CodeType(co.co_argcount co.co_nlocals co.co_stacksize co.co_flags co.co_code modified_consts co.co_names co.co_varnames co.co_filename co.co_name co.co_firstlineno co.co_lnotab) modified_func = types.FunctionType(modified_code func.func_globals) # 15: modified_func()  
&gt;&gt;&gt; a = 'abubakarrooney0178222123student abubakarrooneyzzz0178222164' &gt;&gt;&gt; b = a.split('') &gt;&gt;&gt; print b ['abubakar' 'rooney' '0178222123' 'student abubakar' 'rooneyzzz' '0178222164']  
import re reg4 = re.compile(r'^(?:PMID- (?P&lt;pmid&gt;[0-9]+)|TI  - (?P&lt;title&gt;.*?)^PG|AB  - (?P&lt;abstract&gt;.*?)^AD)' re.MULTILINE | re.DOTALL) for i in reg4.finditer(data):     print i.groupdict()  {'pmid': '19587274' 'abstract': None 'title': None} {'pmid': None 'abstract': None 'title': 'Domain general mechanisms of perceptual decision making in human cortex.\n'} {'pmid': None 'abstract': 'To successfully interact with objects in the environment sensory evidence must\n      be continuously acquired interpreted and used to guide appropriate motor\n      responses. For example when driving a red \n' 'title': None} {'pmid': '19583148' 'abstract': None 'title': None} {'pmid': None 'abstract': None 'title': 'Ursodeoxycholic acid for treatment of cholestasis in patients with hepatic\n      amyloidosis.\n'} {'pmid': None 'abstract': 'BACKGROUND: Amyloidosis represents a group of different diseases characterized by\n      extracellular accumulation of pathologic fibrillar proteins in various tissues\n' 'title': None}  #!/usr/bin/python import re reg4 = re.compile(r'''         ^                     # Start of a line (due to re.MULTILINE this may match at the start of any line)         (?:                   # Non capturing group with multiple options first option:             PMID-\s           # Literal "PMID-" followed by a space             (?P&lt;pmid&gt;[0-9]+)  # Then a string of one or more digits group as 'pmid'         |                     # Next option:             TI\s{2}-\s        # "TI" two spaces a hyphen and a space             (?P&lt;title&gt;.*?)    # The title a non greedy match that will capture everything up to...             ^PG               # The characters PG at the start of a line         |                     # Next option             AB\s{2}-\s        # "AB  - "             (?P&lt;abstract&gt;.*?) # The abstract a non greedy match that will capture everything up to...             ^AD               # "AD" at the start of a line         )         ''' re.MULTILINE | re.DOTALL | re.VERBOSE) for i in reg4.finditer(data):     print i.groupdict()  ^PG ^AD ^\S (?: ) | .*? #!/usr/bin/python import re reg4 = re.compile(r'''         ^                 # Start of a line (due to re.MULTILINE this may match at the start of any line)         PMID-\s           # Literal "PMID-" followed by a space         (?P&lt;pmid&gt;[0-9]+)  # Then a string of one or more digits group as 'pmid'         .*?               # Next part:         TI\s{2}-\s        # "TI" two spaces a hyphen and a space         (?P&lt;title&gt;.*?)    # The title a non greedy match that will capture everything up to...         ^PG               # The characters PG at the start of a line         .*?               # Next option         AB\s{2}-\s        # "AB  - "         (?P&lt;abstract&gt;.*?) # The abstract a non greedy match that will capture everything up to...         ^AD               # "AD" at the start of a line         ''' re.MULTILINE | re.DOTALL | re.VERBOSE) for i in reg4.finditer(data):     print i.groupdict()  {'pmid': '19587274' 'abstract': 'To successfully interact with objects in the environment sensory evidence must\n      be continuously acquired interpreted and used to guide appropriate motor\n      responses. For example when driving a red \n' 'title': 'Domain general mechanisms of perceptual decision making in human cortex.\n'} {'pmid': '19583148' 'abstract': 'BACKGROUND: Amyloidosis represents a group of different diseases characterized by\n      extracellular accumulation of pathologic fibrillar proteins in various tissues\n' 'title': 'Ursodeoxycholic acid for treatment of cholestasis in patients with hepatic\n      amyloidosis.\n'}  
-math.pow(3 float(1)/3)  if x &gt; 0:     return math.pow(x float(1)/3) elif x &lt; 0:     return -math.pow(abs(x) float(1)/3) else:     return 0  
AppDomain AppDomain AppDomain AppDomain AppDomain 
object_detail object = MyModel.objects.get(slug=slug)  
cast &gt;&gt;&gt; import ctypes &gt;&gt;&gt; x = (ctypes.c_ulong*5)() &gt;&gt;&gt; x &lt;__main__.c_ulong_Array_5 object at 0x00C2DB20&gt; &gt;&gt;&gt; ctypes.cast(x ctypes.POINTER(ctypes.c_ulong)) &lt;__main__.LP_c_ulong object at 0x0119FD00&gt; &gt;&gt;&gt;   
NeedIndexError var1 
self = whatever __new__ class Singleton(object):      __instance = None      def __new__(cls):         if cls.__instance == None:             cls.__instance = object.__new__(cls)             cls.__instance.name = "The one"         return cls.__instance  
PyObject* obj = .... PyObject *ret = PyObject_CallMethod(obj "foo" "(s)" "An arg"); if (!ret) {    // check error... }  PyObject* PyObject_CallMethod(PyObject *o char *method char *format ...)  Py_BuildValue() NULL NULL o.method(args) PyObject * args PyObject_CallMethodObjArgs() PyObject* PyObject_CallMethodObjArgs(PyObject *o PyObject *name ... NULL)  o PyObject* NULL NULL 
__floordiv__ __truediv__ __idiv__ __truediv__ __floordiv__(self y): self.__truediv__(y) 
{{something}} 
class ClipboardMonitor(object):     [...]      def __init__(self):         self.clip = gtk.clipboard_get(gtk.gdk.SELECTION_CLIPBOARD)         self.signal_id = self.clip.connect("owner-change" self._clipboard_changed)      def close(self):         self.clip.disconnect(self.signal_id)  import weakref  class CallbackWrapper(object):     def __init__(self sender callback):         self.weak_obj = weakref.ref(callback.im_self)         self.weak_fun = weakref.ref(callback.im_func)         self.sender = sender         self.handle = None      def __call__(self *things):         obj = self.weak_obj()         fun = self.weak_fun()         if obj is not None and fun is not None:             return fun(obj *things)         elif self.handle is not None:             self.sender.disconnect(self.handle)             self.handle = None             self.sender = None  def weak_connect(sender signal callback):     wrapper = CallbackWrapper(sender callback)     wrapper.handle = sender.connect(signal wrapper)     return wrapper  weakref.ref(obj.method) 
ulimit $ ulimit -n 1200 $ python sockets .... Creating socket 1197 Creating socket 1198 Traceback (most recent call last):   File "sockets" line 7 in &lt;module&gt;   File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/socket.py" line 182 in __init__ socket.error: [Errno 24] Too many open files  
def pre_save(sender **kwargs):     pk = kwargs['instance'].pk     instance = sender.objects.get(pk=pk)     tracking[sender] = instance  for field in sender._meta.local_many:     values = field.value_from_object(instance).objects.all()     # Now values is a list of related objects which you can diff  
import random chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789" def gen():     return ''.join([random.choice(chars) for x in range(32)])  test = [gen() for i in range(100000)] print len(test) len(set(test)) # 100000 100000  import os hashlib def gen():     return hashlib.sha1(os.urandom(512)).hexdigest()  test = [gen() for i in range(100000)] print len(test) len(set(test))  
SESSION_SAVE_EVERY_REQUEST 
Gallery.objects.filter(photos__is_public=True).annotate(Count('photos'))  Gallery.objects.filter(photos__is_public=True).extra(select={   "photo_count": """   SELECT COUNT(`gallery_photos.id`)       FROM `gallery_photos`   WHERE `gallery_photos.gallery_id` `gallery.id AND         `gallery_photos.is_public = True   """})  
self def formatHeader(fn):     def wrapped(self=None):         return '&lt;div class="page_header"&gt;'+fn(self)+'&lt;/div&gt;'     return wrapped  
import itertools  num = [1 2 3 4 5] combinations = [] for combination in itertools.combinations(num 3):     combinations.append(int("".join(str(i) for i in combination))) # =&gt; [123 124 125 134 135 145 234 235 245 345] print len(combinations) # =&gt; 10  
_make_object class Composite(Parent):     def __init__(self x list_of_classes list_of_args):         Parent.__init__(self x)         self._objs = [             the_class(self.x *the_args)             for the_class the_args             in zip(list_of_classes list_of_args)             if isinstance(the_class Parent.__class__)         ]      def do(self):         for o in self._objs: o.do()  
props class a(object):     def __init__(self props=None):         if props is None:             props = {}         self.props = props  
numpy if analysis_type == 1 or analysis_type == 2 or analsis_type == 4:  if analysis_type in (1 2 4):  if x &lt; high_income and x &gt;= medium_income:  if medium_income &lt;= x &lt; high_income:  analysis_type trip_rates trip_rates data_model = compute_table(low_income ...) return data_model[analysis_type][population_stratification]  
String str = "i am a string"; System.out.println(new HashSet&lt;String&gt;(Arrays.asList(str.split(""))));  String str = "i am a string"; Set&lt;String&gt; set = new HashSet&lt;String&gt;(Arrays.asList(str.split(""))); set.remove(""); System.out.println(set);  
StringIO cStringIO cStringIO io.StringIO StringIO io.BytesIO cStringIO 
address netstat -ant netstat -anptcp 
from PIL import Image trial_image = Image.open(file) trial_image.verify()  
Objects/floatobject.c PyUnicode_EncodeDecimal() if (PyUnicode_EncodeDecimal(PyUnicode_AS_UNICODE(v)                             PyUnicode_GET_SIZE(v)                             s_buffer                             NULL))         return NULL;  unicodeobject.c PyOS_snprintf(buffer sizeof(buffer)               "invalid literal for float(): %.200s" s);  s PyOS_snprintf() s 
import setup.configs import sys import os sys.path.insert(0 os.path.join(os.path.dirname(__file__) os.path.pardir))  sys.path /usr/local/lib/python2.X/site-packages/ 
YYYY-MM-DD $str = &lt;&lt;&lt;STR datetesttimeavail 2009-09-01JS0.11999.90 2009-09-02JS0.15499.89 2009-09-03SWF0.17799.90 2009-09-04SWF0.17799.90 2009-09-05SWF0.17799.90 2009-09-06SWF0.17799.90 2009-09-07SWF0.17799.90 2009-09-08SWF0.17799.90 2009-09-09SWF0.17799.90 2009-09-10SWF0.17799.90 STR; $lines = explode(PHP_EOL $str); unset($lines[0]); // first line is useless  array_filter $new_lines = array_filter($lines 'my_filter'); var_dump($new_lines);  function my_filter($line) {     $min = '2009-09-04';     $max = '2009-09-09';     if ($line &gt;= $min &amp;&amp; $line &lt;= $max) {         return true;     } else {         return false;     } }  array   4 =&gt; string '2009-09-04SWF0.17799.90' (length=26)   5 =&gt; string '2009-09-05SWF0.17799.90' (length=26)   6 =&gt; string '2009-09-06SWF0.17799.90' (length=26)   7 =&gt; string '2009-09-07SWF0.17799.90' (length=26)   8 =&gt; string '2009-09-08SWF0.17799.90' (length=26)  YYYY-MM-DD explode strtotime 
adr = " ".join(adr.tolower().split())  adr = re.sub("1st(\b|$)" r'1' adr) adr = re.sub("([2-9])\s?nd(\b|$)" r'\1' adr)  adrlist = [word if word.isdigit() else soundex(word) for word in adr.split()]  
with using try/finally with try...finally with with expression [as variable]:     with-block  __enter__() __exit__() with using 
dispatch = {0: level0 1: level1 2:level2} dispatch[offset].calc_algorithm  offset 
&gt;&gt;&gt; def a(lines):     for line in lines:         numbers.append(eval(line.strip().split()[0]))  &gt;&gt;&gt; def b(lines):     for line in lines:         a = line.strip()         b = a.split()         c = b[0]         d = eval(c)         numbers.append(d)  &gt;&gt;&gt; import dis &gt;&gt;&gt; dis.dis(a)   2           0 SETUP_LOOP              49 (to 52)               3 LOAD_FAST                0 (lines)               6 GET_ITER                     &gt;&gt;    7 FOR_ITER                41 (to 51)              10 STORE_FAST               1 (line)    3          13 LOAD_GLOBAL              0 (numbers)              16 LOAD_ATTR                1 (append)              19 LOAD_GLOBAL              2 (eval)              22 LOAD_FAST                1 (line)              25 LOAD_ATTR                3 (strip)              28 CALL_FUNCTION            0              31 LOAD_ATTR                4 (split)              34 CALL_FUNCTION            0              37 LOAD_CONST               1 (0)              40 BINARY_SUBSCR                     41 CALL_FUNCTION            1              44 CALL_FUNCTION            1              47 POP_TOP                           48 JUMP_ABSOLUTE            7         &gt;&gt;   51 POP_BLOCK                    &gt;&gt;   52 LOAD_CONST               0 (None)              55 RETURN_VALUE         &gt;&gt;&gt; dis.dis(b)   2           0 SETUP_LOOP              73 (to 76)               3 LOAD_FAST                0 (lines)               6 GET_ITER                     &gt;&gt;    7 FOR_ITER                65 (to 75)              10 STORE_FAST               1 (line)    3          13 LOAD_FAST                1 (line)              16 LOAD_ATTR                0 (strip)              19 CALL_FUNCTION            0              22 STORE_FAST               2 (a)    4          25 LOAD_FAST                2 (a)              28 LOAD_ATTR                1 (split)              31 CALL_FUNCTION            0              34 STORE_FAST               3 (b)    5          37 LOAD_FAST                3 (b)              40 LOAD_CONST               1 (0)              43 BINARY_SUBSCR                     44 STORE_FAST               4 (c)    6          47 LOAD_GLOBAL              2 (eval)              50 LOAD_FAST                4 (c)              53 CALL_FUNCTION            1              56 STORE_FAST               5 (d)    7          59 LOAD_GLOBAL              3 (numbers)              62 LOAD_ATTR                4 (append)              65 LOAD_FAST                5 (d)              68 CALL_FUNCTION            1              71 POP_TOP                           72 JUMP_ABSOLUTE            7         &gt;&gt;   75 POP_BLOCK                    &gt;&gt;   76 LOAD_CONST               0 (None)              79 RETURN_VALUE          STORE_FAST LOAD_FAST 
/usr/lib/python2.6/dist-packages 
from sphinx.ext import autodoc  class DocsonlyMethodDocumenter(autodoc.MethodDocumenter):   def format_args(self):     return None  autodoc.add_documenter(DocsonlyMethodDocumenter)  add_documenter format_args autodoc sphinx autodoc.MethodDocumenter.format_args=lambda _:None sphinx 
x y = x + 3 * y 4 * x + 1 * y  x = x + 3 * y y = 4 * x + 1 * y  xy = ab  xyz = abc  wxyz = abc  
MONTH() import sqlalchemy as sa DBSession.query(Article).group_by( sa.func.year(Article.created) sa.func.month(Article.created)).all()  from itertools import groupby  def grouper( item ):      return item.created.year item.created.month for ( (year month) items ) in groupby( query_result grouper ):     for item in items:         # do stuff  
def index(request):     def do_work():         step_1()         yield "step 1 complete"         step_2()         yield "step 2 complete"         step_3()         yield "step 3 complete"     return HttpResponse(do_work())  
from datetime import date timedelta # http://www.ianlewis.org/en/python-date-range-iterator def datetimeRange(from_date to_date=None):     while to_date is None or from_date &lt;= to_date:         yield from_date         from_date = from_date + timedelta(days = 1)  start = date(2009 8 20) end = date(2009 8 23) objects = Obj.objects.filter(date__gte=start) objects = objects.filter(date__lte=end)  results = {} for o in objects:     results[o.date] = o.value  return [results.get(day 0) for day in datetimeRange(start end)]  
string dir = Path.GetDirectoryName(scriptPath);                        ICollection&lt;string&gt; paths = engine.GetSearchPaths();  if (!String.IsNullOrWhitespace(dir)) {     paths.Add(dir); } else {     paths.Add(Environment.CurrentDirectory); } engine.SetSearchPaths(paths);  
id = Column(Integer default = sqlexpression)  coalesce(select max(order.id) from order0) + 1 id = Column(Integer default = text("coalesce(select max(order.id) from order0) + 1"))  
from models import MyModel try:     max_length = MyModel._meta.get_field('source_url').max_length except:     max_length = None  
PS C:\Users\jaraco\Desktop&gt; python Python 3.1.1 (r311:74483 Aug 17 2009 17:02:12) [MSC v.1500 32 bit (Intel)] on win32 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; from graphics import * &gt;&gt;&gt; dir() ['BAD_OPTION' 'Circle' 'DEAD_THREAD' 'DEFAULT_CONFIG' 'Entry' 'GraphWin' 'GraphicsError' 'GraphicsObject' 'Image' 'Line' 'OBJ_ALREADY_DRAWN' 'Oval' 'Pixmap' 'Point' 'Polygon' 'Queue' 'Rectangle' 'Text' 'Transform' 'UNSUPPORTED_METHOD' '\_\_builtins\_\_' '\_\_doc\_\_' '\_\_name\_\_' '\_\_package\_\_' 'atexit' 'color_rgb' 'copy' 'os' 'sys' 'test' 'time' 'tk'] &gt;&gt;&gt; error in background error handler: out of stack space (infinite loop?)     while executing "::tcl::Bgerror {out of stack space (infinite loop?)} {-code 1 -level 0 -errorcode NONE -errorinfo {out of stack space (infinite loop?)     while execu..."  &gt;&gt;&gt; import graphics &gt;&gt;&gt; dir(graphics)  import graphics  def main():     print("This program plots the growth of a 10-year investment.")      principal = eval(input("Enter the initial principal: "))     apr = eval(input("Enter the annualized interest rate: "))      win = graphics.GraphWin("Investment Grown Chart" 320 420)     win.setBackground("white")     graphics.Text(graphics.Point(20 230) ' 0.0K').draw(win)     graphics.Text(graphics.Point(20 180) ' 2.5K').draw(win)     graphics.Text(graphics.Point(20 130) ' 5.0K').draw(win)     graphics.Text(graphics.Point(20 80) ' 7.5K').draw(win)     graphics.Text(graphics.Point(20 30) '10.0K').draw(win)      # Rest of code is here but I've commented it out to isolate the problem.  main()  
try:     pr.update() except ConfigurationException e:     returnString=e.line+' '+e.errormsg  
from __future__ import with_statement  with open(filename "r") as f:     data = f.read()  
py26-psycopg2 $ sudo port install py26-psycopg2  py-* py25-* py26-* 
xmlns:adlcp="http://xxx/yy/zzz" {http://xxx/yy/zzz}scormtype 
findall sum(1 for m in re.finditer(thepattern thestring)) subn def countnonoverlappingrematches(pattern thestring):   return re.subn(pattern '' thestring)[1]  re.subn(pattern '' thestring 100)[1] 'a+' 'aa' a def countoverlappingdistinct(pattern thestring):   total = 0   start = 0   there = re.compile(pattern)   while True:     mo = there.search(thestring start)     if mo is None: return total     total += 1     start = 1 + mo.start()  re.search start search 
'r' f = os.popen (strpath 'r') for line in f:     print line f.close()  os.popen() subprocess 
.h .c cdef extern from "some.h":   ctypedef struct b   ctypedef struct a:     b * b_pointer   ctypedef struct b:     a a_obj  
elementtree python manage.py shell  python_ver import sys python_ver = sys.version  settings.py import sys sys.path.append('path to where elementtree resides')  
&gt;&gt;&gt; hash({}) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: dict objects are unhashable  hashabe: str (Immutable) buffer (Warning immutable slice of (possibly) mutable object!) unhashable: list array.array  
subprocess.Popen a Popen.communicate() p.communicate(a)  communicate() 
__iter__() def multigen(gen_func):     class _multigen(object):         def __init__(self *args **kwargs):             self.__args = args             self.__kwargs = kwargs         def __iter__(self):             return gen_func(*self.__args **self.__kwargs)     return _multigen  @multigen def myxrange(n):    i = 0    while i &lt; n:      yield i      i += 1 m = myxrange(5) print list(m) print list(m)  
import re r = re.compile('Master(.*?)thon') m = r.search(str1) if m:     lyrics = m.group(1)  
myVal = Word(alphas+nums+'_')      myExpr = Forward() mySubExpr = (     (Suppress('(') + Group(myExpr) + Suppress(')'))     | myVal + Suppress('(') + Group(delimitedList(myExpr)) + Suppress(')')     | myVal     ) myExpr &lt;&lt; mySubExpr + ZeroOrMore( oneOf('+ - / * =') + mySubExpr )   print(myExpr.parseString('blah(foo+bar)'))  ['blah' ['foo' '+' 'bar']] 
(?&lt;first&gt;group)(?'second'group) var match = Regex.Match("subject" "regex");<br> var matchedText = match.Groups("first") Record Record.Parse(namedValueCollection) 
while print " ".join(str(i) for i in xrange(10))  $ python -mtimeit "i=0" "while i &lt; 1000: i+=1" 1000 loops best of 3: 303 usec per loop $ python -mtimeit "for i in xrange(1000): pass" 10000 loops best of 3: 120 usec per loop  
    etype value tb = sys.exc_info()     return ''.join(format_exception(etype value tb limit))  format_exception     list = ['Traceback (most recent call last):\n']     list = list + format_tb(tb limit)  
localize replace normalize 
def names_for(product_id):     return [row.namestring for row in ProductName.objects.filter(product_id=product_id)]  
import itertools  def partlst(lst n):     """Partition @lst in @n balanced parts in given order"""     parts rest = divmod(len(lst) n)     lstiter = iter(lst)     for j in xrange(n):         plen = len(lst)/n + (1 if rest &gt; 0 else 0)         rest -= 1         yield list(itertools.islice(lstiter plen))  parts =  list(partlst(range(1 15) 5)) print len(parts) print parts  
class JonProperty(object):     def __init__(self name):         self.name = name      def __get__(self obj objtype):         return getattr(obj self.name)      def __set__(self obj val):         setattr(obj self.name float(val))  class Vector(object):     def __init__(self x=0 y=0 z=0):         self.x = x         self.y = y         self.z = z     x = JonProperty('_x')     y = JonProperty('_y')     z = JonProperty('_z')  
n arr7 = ctypes.c_double * `n`  x = arr7()  x double* x x = arr7(i*0.1 for i in xrange(7))  x 
DYLD_LIBRARY_PATH ~/opt/qt/... ~/.profile DYLD_LIBRARY_PATH dyld DYLD_LIBRARY_PATH man dyld 
import datetime now = datetime.datetime.now() delay = float (raw_input ("enter delay (s): ")) dt = datetime.timedelta (seconds=delay) then = now + dt print now print then  
mydict["bc"] public class PythonDictionary {     public string this[string index] {         get { ... }         set { ... }     }     public static implicit operator PythonDictionary(string value) {         ...     } }  public void Example() {     Dictionary&lt;string PythonDictionary&gt; map = new Dictionary&lt;string PythonDictionary&gt;();     map["42"]["de"] = "foo";     map["42"] = "bar"; }  
job(...) return jreg jreg None NULL T `mycursor.execute('INSERT INTO sometable VALUES(? ? ? ? ? ?)' T)  T sometable ? mycursor myconnection.cursor myconnection connect 
case isinstance 
session.save(new_obj) 
 apt-cache rdepends python-support  Architecture: all apt-get source &lt;package&gt;  cd &lt;packagesrc&gt; dpkg-buildpackage -rfakeroot  debian 
# define the range of xyz x_range = numpy.linspace(x_minx_maxx_num) y_range = numpy.linspace(y_miny_maxy_num) z_range = numpy.linspace(z_minz_maxz_num)  # create arrays xyz in the correct dimensions # so that they create the grid xyz = numpy.ix_(x_rangey_rangez_range)  # calculate the function of x y and z sinxyz = numpy.sin(x+y+z)  
class SuperDuperWrapper(object):     def __init__(self origobj):         self.myobj = origobj     def __str__(self):         return "SUPER DUPER " + str(self.myobj)     def __getattr__(selfattr):         return getattr(self.myobj attr)  __getattr__ s = "hey ho!" sds = SuperDuperWrapper(s) print sds  i = 100 sdi = SuperDuperWrapper(i) print sdi  SUPER DUPER hey ho! SUPER DUPER 100  print sds.split() ['hey' 'ho!']  
# -*- coding: utf-8 -*- import codecs import unicodedata  x = u"Wikipédia le projet d’encyclopédie"  xtd = {ord(u'’'): u"'" ord(u'é'): u'e' }  def asciify(error):     return xtd[ord(error.object[error.start])] error.end  codecs.register_error('asciify' asciify)  def ae():   return x.encode('ascii' 'asciify')  def ud():   return unicodedata.normalize('NFKD' x).encode('ASCII' 'ignore')  def tr():   return x.translate(xtd)  if __name__ == '__main__':   print 'or:' x   print 'ae:' ae()   print 'ud:' ud()   print 'tr:' tr()  or: Wikipédia le projet d’encyclopédie ae: Wikipedia le projet d'encyclopedie ud: Wikipedia le projet dencyclopedie tr: Wikipedia le projet d'encyclopedie  xtd $ python -mtimeit -s'import a' 'a.ae()' 100000 loops best of 3: 7.5 usec per loop $ python -mtimeit -s'import a' 'a.ud()' 100000 loops best of 3: 3.66 usec per loop $ python -mtimeit -s'import a' 'a.tr()' 10000 loops best of 3: 21.4 usec per loop  translate translate asciify specstd = {ord(u'’'): u"'" } def specials(error):   return specstd.get(ord(error.object[error.start]) u'') error.end codecs.register_error('specials' specials)  def bu():   return unicodedata.normalize('NFKD' x).encode('ASCII' 'specials')  $ python -mtimeit -s'import a' 'a.bu()' 100000 loops best of 3: 10.7 usec per loop  xtd asciify bu 
psycopg2 $ python &gt;&gt;&gt; import psycopg2  ImportError sys.path $ python &gt;&gt;&gt; import sys &gt;&gt;&gt; print sys.path  sys.path import import sys sys.path.append("my-path")  # ... import psycopg2  
__init__.py mypackage/__init__.py MY_CONSTANT = 42  mypackage/mymodule.py from mypackage import MY_CONSTANT print "my constant is" MY_CONSTANT  &gt;&gt;&gt; from mypackage import mymodule my constant is 42  mypackage/__init__.py from mypackage.constants import *  mypackage mypackage.constants 
index.py ls -l index.py 
.key .key weakref.ref dict def enregister(d obj):   obj.ds.append(d)   d[obj.key] = obj  class Item(object):     def __init__(self uniq_key title=None):         self._key = uniq_key         self.title = title         self.ds = []      def adjust_key(self newkey):         newds = [d for d in self.ds if self._key in d]         for d in newds:           del d[self._key]           d[newkey] = self         self.ds = newds         self._key = newkey      def get_key(self):         return self._key      key = property(get_key adjust_key)  class Item(object):      all = weakref.WeakValueDictionary()      def __init__(self uniq_key title=None):         self._key = uniq_key         self.title = title         # here if needed you could check that the key         # is not ALREADY present in self.all         self.all[self._key] = self      def adjust_key(self newkey):         # "key non-uniqueness" could be checked here too         del self.all[self._key]         self.all[newkey] = self         self._key = newkey      def get_key(self):         return self._key      key = property(get_key adjust_key)  Item.all['akey'] Item.all.get('akey') for akey in Item.all: 
TYPE_DICT TYPE_DICT_DICT = dict(TYPE_DICT)  TYPE_DICT_DICT 
elif ch=='2': self.adnewcar(reg)  class serv_db:         def __init__(self db):                 self.db = db                 self.dbc = self.db.cursor()          def menudisp (self):                 print"Welcome to Tata Motors"                 print"Please select one of the options to continue:"                 print"1. Insert Car Info"                 print"2. Display Car Info"                 print"3. Update Car Info"                 print"4. Exit"                 menu_choice = raw_input("Enter what you want to do: ")                 if menu_choice=='1': self.additem()                 elif menu_choice=='2': self.getitem()                 elif menu_choice=='3': self.edititem()                 elif menu_choice=='4': sys.exit()          def additem (self):                 reg = raw_input("\n\nTo continue please enter the Registration # of car: ")                 print"There are 3 books in our database:"                 print"1. Job Card"                 print"2. Car"                 print"3. Customer"                 ch = raw_input("\nEnter your choice: ")                 if ch=='1': self.adnewjob()                 elif ch=='2': self.adnewcar(reg)                 elif ch=='3': self.adnewcust()          def adnewcar ( self reg ):             print "adding info to database: car"             carreg = reg  #error here             mftr = raw_input("Enter the Manufacturer of your car: ")             model = raw_input("Enter the Model of your car: ")             car_tb = (carregmftrmodel)             #writing to DB             self.dbc.execute("insert into car(reg mftr model) values(%s%s%s)" car_tb)  def main():         db = MySQLdb.connect(user="root" passwd="" db="tatamotors")         service = serv_db(db)         service.menudisp()  if __name__ == '__main__':      main()  
sys.stdout.write(open(filepath"rb").read()) sys.stdout.flush()  chunk_size = 4096 handle = open(filepath "rb")  while True:     buffer = handle.read(chunk_size)     if buffer:         sys.stdout.write(buffer)     else:         break  
(select(soup) or [None])[0] #!/usr/bin/python import lxml.html import lxml.cssselect soup = lxml.html.fromstring("""         &lt;html&gt;         &lt;a href="foo" class="yyy zzz" /&gt;         &lt;a href="bar" class="yyy" /&gt;         &lt;a href="baz" class="zzz" /&gt;         &lt;a href="quux" class="zzz yyy" /&gt;         &lt;a href="warble" class="qqq" /&gt;         &lt;p class="yyy zzz"&gt;Hello&lt;/p&gt;         &lt;/html&gt;""")  select = lxml.cssselect.CSSSelector("a.yyy.zzz a.yyy") print [lxml.html.tostring(s).strip() for s in select(soup)] print (select(soup) or [None])[0]  soup.find('a') 
object.__str__() class A:    def __str__(self):       return "Something useless"  class B(A):    def __str__(self):       return object.__str__(self)  B &gt;&gt;&gt; b = B() &gt;&gt;&gt; str(b) '&lt;__main__.B instance at 0x7fb34c4f09e0&gt;'  
models.py def admin_thumbnail(self):     return u'&lt;img src="%s" /&gt;' % (self.image.url) admin_thumbnail.short_description = 'Thumbnail' admin_thumbnail.allow_tags = True  list_display image_img models.py def image_img(self): def image_img(self):     if self.image:         return u'&lt;img src="%s" /&gt;' % self.image.url_125x125     else:         return '(Sin imagen)' image_img.short_description = 'Thumb' image_img.allow_tags = True  
from lib2to3.fixes.fix_imports import MAPPING  REVERSE_MAPPING={} for keyval in MAPPING.items():     REVERSE_MAPPING[val]=key  class Python_3_Unpickler(pickle.Unpickler):     """Class for pickling objects from Python 3"""     def find_class(selfmodulename):         if module in REVERSE_MAPPING:             module=REVERSE_MAPPING[module]         __import__(module)         mod = sys.modules[module]         klass = getattr(mod name)         return klass  def loads(str):     file = pickle.StringIO(str)     return Python_3_Unpickler(file).load()    
__init__ super object.__init__(self)  __del__ __new__ 
import tkinter as tk  root = tk.Tk() e1 = tk.Entry(root) e2 = tk.Entry(root) e1.pack() e2.pack()  def handleReturn(event):     print(&quot;return: event.widget is&quot;event.widget)     print(&quot;focus is:&quot; root.focus_get())  e1.bind(&quot;&lt;Return&gt;&quot; handleReturn)  root.mainloop()  import tkinter as tk  root = tk.Tk() e1 = tk.Entry(root) e2 = tk.Entry(root) e1.pack() e2.pack()  def handleReturn(event):     print(&quot;return: event.widget is&quot;event.widget)     print(&quot;focus is:&quot;root.focus_get())  root.bind(&quot;&lt;Return&gt;&quot; handleReturn)  root.mainloop()  
CREATE TABLE Table1 (jd isotime);  CREATE TRIGGER trigger_name_1 AFTER INSERT ON Table1 BEGIN     UPDATE Table1 SET jd = julianday(isotime) WHERE rowid = last_insert_rowid(); END;  CREATE TRIGGER trigger_name_2 AFTER UPDATE OF isotime ON Table1 BEGIN     UPDATE Table1 SET jd = julianday(isotime) WHERE rowid = old.rowid; END;  
    Note 3: Avoid using properties for computationally expensive     operations; the attribute notation makes the caller believe     that access is (relatively) cheap.  
from PIL import Image size = (36 36) image = Image.open(data) image.thumbnail(size Image.ANTIALIAS) background = Image.new('RGBA' size (255 255 255 0)) background.paste(     image (int((size[0] - image.size[0]) / 2) int((size[1] - image.size[1]) / 2)) ) background.save("output.png")  
import Image im=Image.open("beta-icon.gif") im = im.convert("RGB") im=im.resize((3636) Image.ANTIALIAS) im.save("q5.png")  
s = "110101001" numbers = [int(s[i:i+3] 2) for i in range(0 len(s) 3)] print numbers  [6 5 1]  &gt;&gt;&gt; range(0 len(s) 3) [0 3 6]  range() len(s) &gt;&gt;&gt; [s[i:i+3] for i in range(0 len(s) 3)] ["110" "101" "001"]  s[i:i+3] i s[i:i+3] &gt;&gt;&gt; [int(s[i:i+3] 2) for i in range(0 len(s) 3)] [6 5 1]  int(... 2) 
prefetch_related prefetch_related select_related 
&gt;&gt;&gt; import platform &gt;&gt;&gt; platform.system() 'Windows'  
for n in dir(self):   if getattr(self n) is None:     setattr(self n '')  is None __unicode__ def b(atr): return atr or u''  def __unicode__(self):   if self.use_flourit == u'D':     return '%s %s %s (%s - %s)' % (         b(self.surname) b(self.first_name) b(self.middle_names)         b(self.birth_year) b(self.death_year)     )   else:     return '%s %s %s (fl. %s)' % (         b(self.surname) b(self.first_name) b(self.middle_names)         b(self.flourit_year)     )  self __unicode__ __str__ __repr__ dir setattr getattr 
conn = MySQLdb.connect (host = "localhost"                         user = "testuser"                         passwd = "testpass"                         db = "test") cursor = conn.cursor()  cursor.execute(...) conn.commit()  
from pyparsing import *  integer = Regex(r"-?\d+").setName("integer") integer.setParseAction(lambda tokens: int(tokens[0])) floatnum = Regex(r"-?\d+\.\d*").setName("float") floatnum.setParseAction(lambda tokens: float(tokens[0])) dblQuotedString.setParseAction(removeQuotes) COMMA = Suppress('') validLine = dblQuotedString + COMMA + dblQuotedString + COMMA + \         integer + COMMA + floatnum + LineEnd()  tests = """\ "good data""good2"1003.14 "good data"  "good2" 100 3.14 bad "good""good2"1003.14 "bad""good2"1003 "bad""good2"100.53 """.splitlines()  for t in tests:     print t     try:         print validLine.parseString(t).asList()     except ParseException pe:         print pe.markInputline('?')         print pe.msg     print  "good data""good2"1003.14 ['good data' 'good2' 100 3.1400000000000001]  "good data"  "good2" 100 3.14 ['good data' 'good2' 100 3.1400000000000001]  bad "good""good2"1003.14 ?bad "good""good2"1003.14 Expected string enclosed in double quotes  "bad""good2"1003 "bad""good2"100?3 Expected float  "bad""good2"100.53 "bad""good2"100?.53 Expected ""  dblQuotedString.setParseAction(removeQuotes)  comment = '#' + restOfline validLine.ignore(comment)  validLine = dblQuotedString("key") + COMMA + dblQuotedString("title") + COMMA + \         integer("qty") + COMMA + floatnum("price") + LineEnd()  data = validLine.parseString(t) print "%(key)s: %(title)s %(qty)d in stock at $%(price).2f" % data print data.qty*data.price  
import os resourcesdir = os.path.join(os.path.dirname(__file__) 'Resources')  
if !( extra_placeholders  is  None) :   if extra_placeholders  is  not None :  
&gt;&gt;&gt; a = [1 2 3 4 5] &gt;&gt;&gt; b = [9 8 7 6 5] &gt;&gt;&gt; set(a) &amp; set(b) {5}  &gt;&gt;&gt; [i for i j in zip(a b) if i == j] [5]  
/([A-Z]+(?=$|[A-Z][a-z])|[A-Z]?[a-z]+)/g  $ \b /([A-Z]+(?=\b|[A-Z][a-z])|[A-Z]?[a-z]+)/g  
inet_pton inet_ntop %eth0 getaddrinfo inet_pton getaddrinfo inet_ntop getaddrinfo inet_pton inet_ntop ::127.0.0.1 ::IPv4 ::ffff:IPv4 inet_pton inet_ntop inet_pton inet_ntop AI_NUMERICHOST getaddrinfo NI_NUMERCHOST getnameinfo 
 pip install simplejson  
from functools import wraps import inspect  def initializer(func):     """     Automatically assigns the parameters.      &gt;&gt;&gt; class process:     ...     @initializer     ...     def __init__(self cmd reachable=False user='root'):     ...         pass     &gt;&gt;&gt; p = process('halt' True)     &gt;&gt;&gt; p.cmd p.reachable p.user     ('halt' True 'root')     """     names varargs keywords defaults = inspect.getargspec(func)      @wraps(func)     def wrapper(self *args **kargs):         for name arg in list(zip(names[1:] args)) + list(kargs.items()):             setattr(self name arg)          for name default in zip(reversed(names) reversed(defaults)):             if not hasattr(self name):                 setattr(self name default)          func(self *args **kargs)      return wrapper  __init__ class process:     @initializer     def __init__(self PID PPID cmd FDs reachable user):         pass  &gt;&gt;&gt; c = process(1 2 3 4 5 6) &gt;&gt;&gt; c.PID 1 &gt;&gt;&gt; dir(c) ['FDs' 'PID' 'PPID' '__doc__' '__init__' '__module__' 'cmd' 'reachable' 'user'  
token.termText() Analyzer Term 
s = "12423343.93" f = float(s.replace("" ""))  
class population(list):     # custom methods here  self.data self 
self.request.get('var_name')  self.request.get_all()  
class FileBrowser(QMainWindow):     def __init__(self):         QMainWindow.__init__(self)          self.setGeometry(0 0 920 780)         self.initClasses()         # changes         layout = QVBoxLayout(self) # create layout out         layout.addWidget(self.groupBox1) # add widget         layout.addWidget(self.labelGroup1_ShotInfo) # add widget         # set my layout to make sure contents are correctly rendered         self.setLayout(layout)       def initClasses(self):         # GroupBox         self.groupBox1 = GroupBox(self QRect(20 10 191 131)  'Shot Info')          # Label         self.labelGroup1_ShotInfo = Label(self QRect(10 26 52 15)  'Film')  
div soup = BeautifulSoup(html) thetd = soup.find('td' attrs={'class': 'author'}) print thetd.string  ####I want whatever is located here ###  td author thetds = soup.findAll('td' attrs={'class': 'author'}) for thetd in thetds:     print thetd.string  
gtk.main import pygtk pygtk.require("2.0") import gtk  class Display(object):      def __init__(self):         self.fail = "This will fail to display"         window = gtk.Window(gtk.WINDOW_TOPLEVEL)         window.connect("destroy" lambda w: gtk.main_quit())         window.show()               class Test(object):      def __init__(self display):         print display.fail  d = Display() t = Test(d)  gtk.main()  
UserDict.UserDict dict collections UserDict.DictMixin __getitem__ keys __setitem__ __delitem__ dict update get DictMixin collections.MutableMapping collections.Mapping 
"hell" + "o" is "hello" True 
&lt;select name="movie"&gt;     {% for movie in movies %}         {% ifequal movie.id selected_movie.id %}             &lt;option value="{{movie.key}}" selected="selected"&gt;Movie {{movie.id}}: {{movie.name}}&lt;/option&gt;         {% else %}             &lt;option value="{{movie.key}}"&gt;Movie {{movie.id}}: {{movie.name}}&lt;/option&gt;         {% endifequal %}     {% endfor %} &lt;/select&gt;  
def flatten(obj):     if obj is None:         return None     elif hasattr(obj '__dict__') and obj.__dict__:         return dict([(k flatten(v)) for (k v) in obj.__dict__.items()])     elif isinstance(obj (dict)):         return dict([(k flatten(v)) for (k v) in obj.items()])     elif isinstance(obj (list)):         return [flatten(x) for x in obj]     elif isinstance(obj (tuple)):         return tuple([flatten(x) for x in obj])     else:         return obj  class spam(object):     eggs = []  x = spam() x.eggs.add(...)  class spam(object):     eggs = None #// if you need this line at all though  x = spam() x.eggs = [] x.eggs.add(...)  spam eggs 
set iskeyword+=: 
import urllib2  # the lib that handles the url stuff  data = urllib2.urlopen(target_url) # it's a file like object and works just like a file for line in data: # files are iterable     print line  import urllib2  for line in urllib2.urlopen(target_url):     print line  import urllib2  data = urllib2.urlopen("http://www.google.com").read(20000) # read only 20 000 chars data = data.split("\n") # then split it into lines  for line in data:     print line  import urllib.request  # the lib that handles the url stuff  for line in urllib.request.urlopen(target_url):     print(line.decode('utf-8')) #utf-8 or iso8859-1 or whatever the page encoding scheme is  
import subprocess logfile = open("/dev/log" "w") output error = subprocess.Popen(                     ["ls"] stdout=subprocess.PIPE                     stderr=subprocess.PIPE).communicate() logfile.write(output) logfile.close()  output error = subprocess.Popen(                     ["ls" "-l"] stdout=subprocess.PIPE                     stderr=subprocess.PIPE).communicate()  command = "ls -la" output error = subprocess.Popen(                     command.split(' ') stdout=subprocess.PIPE                     stderr=subprocess.PIPE).communicate()  import subprocess logfile = open("/dev/log" "w") output error = subprocess.Popen(                     ["ls"] stdout=logfile                     stderr=subprocess.PIPE).communicate()  
lambda def combiner(itemkey methodname *a **k):   def keyextractor(container):     item = container[itemkey]     method = getattr(item methodname)     return method(*a **k)   return keyextractor  listofdicts.sort(key=combiner('name' 'lower')) 
import urllib2 img = urllib2.urlopen("http://example.com/image.jpg").read()  import StringIO from PIL import Image try:     im = Image.open(StringIO.StringIO(img))     im.verify() except Exception e:     # The image is not valid  import imghdr imghdr.what('ignore' img)  
from math import sqrt  def IsPrime(n):     if n==2: return True     if n % 2 == 0: return False      maxFactor = long(sqrt(n))     i = 3     while i &lt;= maxFactor:         if n % i == 0: return False         i += 2     return True  n = 600851475143 factor = long(sqrt(n)) while factor &gt; 2:     if n % factor == 0:         if IsPrime(factor):             print factor             factor = 0     factor -= 1  
raw_input input('Enter a number: ') and python will do the type conversion for you. p>  <p>The final code would look like this: p>  <pre>< pre>  <p>However as a number of folks have pointed out using input() may lead to an error because it actually interprets the python objects passed in. p>  <p>A safer way to handle this can be to cast raw_input with the desired type as in: p>  <pre>a = int( raw_input('Enter a number: '))  
csv.reader() data = csv.reader(f)  csv.reader() 
c_s = c_char_p() c_s = s  ctypes c_s c_char_p s c_char_p .value c_s = c_char_p() c_s.value = s  
__copy__ copy.copy __deepcopy__ copy.deepcopy __getstate__ __setstate__ 
browser.set_debug_redirects(True) browser.set_debug_responses(True) browser.set_debug_http(True)  def login(browser):     browser.open(config.login_url)     browser.select_form(nr=0)     browser[config.username_field] = config.username     browser[config.password_field] = config.password     browser.submit()     return browser  
curses.wrapper(lambda _: curses.tigetnum('cols'))  import sys  def colprint(totwidth table):   numcols = max(len(row) for row in table)   # ensure all rows have &gt;= numcols columns maybe empty   padded = [row+numcols*('') for row in table]   # compute col widths including separating space (except for last one)   widths = [ 1 + max(len(x) for x in column) for column in zip(*padded)]   widths[-1] -= 1   # drop or truncate columns from the right in order to fit   while sum(widths) &gt; totwidth:     mustlose = sum(widths) - totwidth     if widths[-1] &lt;= mustlose:       del widths[-1]     else:       widths[-1] -= mustlose       break   # and finally the output phase!   for row in padded:     for w i in zip(widths row):       sys.stdout.write('%*s' % (-w i[:w]))     sys.stdout.write('\n')  
profiles = [r.profile for r in thingie.relation_set.all()]  relation_values = thingie.relation_set.all().values_list('pk' flat=True) profiles = Profile.objects.filter(relation__in=relation_values)  set(profiles) distinct() 
for entity in Entity.objects.all()   print unicode(entity) # Calls the Entity class unicode which is not what you want.  InheritanceCastModel class Entity(InheritanceCastModel):   # your model definition. You can get rid of the entity_type_list and type as the   # real_type provided by InheritanceCastModel provides this info  class Athlete(Entity):   # unchanged  class Team(Entity):   # unchanged  for entity in Entity.objects.all():   actual_entity = entity.cast()   print unicode(actual_entity) # actual entity is a a Team or Athlete  
raw_input() input() # Python 2.5.4 &gt;&gt;&gt; a = raw_input() 3 4 5 &gt;&gt;&gt; a '3 4 5' &gt;&gt;&gt; b = a.split(' ') &gt;&gt;&gt; b ['3' '4' '5'] &gt;&gt;&gt; [s.strip() for s in raw_input().split("")] # one liner 3 4 5 ['3' '4' '5']  input a input import string &gt;&gt;&gt; l = (12345) &gt;&gt;&gt; abcde = l &gt;&gt;&gt; e 5  
from google.appengine.ext import db from google.appengine.ext import webapp from google.appengine.ext.webapp import run_wsgi_app  class QueueItem(db.Model):   created = db.DateTimeProperty(required=True auto_now_add=True)   data = db.BlobProperty(required=True)    @staticmethod   def push(data):     """Add a new queue item."""     return QueueItem(data=data).put()    @staticmethod   def pop():     """Pop the oldest item off the queue."""     def _tx_pop(candidate_key):       # Try and grab the candidate key for ourselves. This will fail if       # another task beat us to it.       task = QueueItem.get(candidate_key)       if task:         task.delete()       return task     # Grab some tasks and try getting them until we find one that hasn't been     # taken by someone else ahead of us     while True:       candidate_keys = QueueItem.all(keys_only=True).order('created').fetch(10)       if not candidate_keys:         # No tasks in queue         return None       for candidate_key in candidate_keys:         task = db.run_in_transaction(_tx_pop candidate_key)         if task:           return task  class QueueHandler(webapp.RequestHandler):   def get(self):     """Pop a request off the queue and return it."""     self.response.headers['Content-Type'] = 'application/x-www-form-urlencoded'     task = QueueItem.pop()     if not task:       self.error(404)     else:       self.response.out.write(task.data)    def post(self):     """Add a request to the queue."""     QueueItem.push(self.request.body)  
dir(obj)  class Example(object):     bool143 = True     bool2 = True     blah = False     foo = True     foobar2000 = False  example = Example() members = [attr for attr in dir(example) if not callable(getattr(example attr)) and not attr.startswith("__")] print members     ['blah' 'bool143' 'bool2' 'foo' 'foobar2000']  
&gt;&gt;&gt; x = None &gt;&gt;&gt; print type(x) &lt;type 'NoneType'&gt; &gt;&gt;&gt; x = "text" &gt;&gt;&gt; print type(x) &lt;type 'str'&gt; &gt;&gt;&gt; x = 42 &gt;&gt;&gt; print type(x) &lt;type 'int'&gt;  
get_services def get_services(self):     return "\n".join([s.servicename for s in self.services.all()])  \n &lt;br/&gt; 
&gt;&gt;&gt; from datetime import datetime &gt;&gt;&gt; import pytz &gt;&gt;&gt; utc = pytz.utc &gt;&gt;&gt; utc.zone 'UTC' &gt;&gt;&gt; eastern = pytz.timezone('US/Eastern') &gt;&gt;&gt; eastern.zone 'US/Eastern' &gt;&gt;&gt; amsterdam = pytz.timezone('Europe/Amsterdam') &gt;&gt;&gt; fmt = '%Y-%m-%d %H:%M:%S %Z%z'  &gt;&gt;&gt; loc_dt = eastern.localize(datetime(2002 10 27 6 0 0)) &gt;&gt;&gt; print loc_dt.strftime(fmt) 2002-10-27 06:00:00 EST-0500  &gt;&gt;&gt; ams_dt = loc_dt.astimezone(amsterdam) &gt;&gt;&gt; ams_dt.strftime(fmt) '2002-10-27 12:00:00 CET+0100'  
import time import threading import win32ui win32gui win32com pythoncom win32con from win32com.client import Dispatch  class IeThread(threading.Thread):     def run(self):         pythoncom.CoInitialize()         ie = Dispatch("InternetExplorer.Application")         ie.Visible = 0         ie.Navigate('http://website/file.xml')  def PushButton(handle label):     if win32gui.GetWindowText(handle) == label:         win32gui.SendMessage(handle win32con.BM_CLICK None None)         return True  IeThread().start() time.sleep(3)  # wait until IE is started wnd = win32ui.GetForegroundWindow() if wnd.GetWindowText() == "File Download - Security Warning":     win32gui.EnumChildWindows(wnd.GetSafeHwnd() PushButton "&amp;Save");     time.sleep(1)     wnd = win32ui.GetForegroundWindow() if wnd.GetWindowText() == "Save As":     win32gui.EnumChildWindows(wnd.GetSafeHwnd() PushButton "&amp;Save");  
from some.other.pkg import twitter  
./manage.py syncdb south 
google google.appengine 
from sqlalchemy import Column Integer String Table create_engine from sqlalchemy import orm MetaData Column ForeignKey from sqlalchemy.orm import relation mapper sessionmaker from sqlalchemy.orm.collections import column_mapped_collection from sqlalchemy.ext.associationproxy import association_proxy from sqlalchemy.ext.declarative import declarative_base  engine = create_engine('sqlite:///:memory:' echo=True) Base = declarative_base(bind=engine)  class Note(Base):     __tablename__ = 'notes'      id_item = Column(Integer ForeignKey('items.id') primary_key=True)     name = Column(String(20) primary_key=True)     value = Column(String(100))      def __init__(self name value):         self.name = name         self.value = value          class Item(Base):     __tablename__ = 'items'     id = Column(Integer primary_key=True)     name = Column(String(20))     description = Column(String(100))     _notesdict = relation(Note                            collection_class=column_mapped_collection(Note.name))     notes = association_proxy('_notesdict' 'value' creator=Note)      def __init__(self name description=''):         self.name = name         self.description = description  Base.metadata.create_all()  Session = sessionmaker(bind=engine) s = Session()  i = Item('ball' 'A round full ball') i.notes['color'] = 'orange' i.notes['size'] = 'big' i.notes['data'] = 'none'  s.add(i) s.commit() print i.notes  {u'color': u'orange' u'data': u'none' u'size': u'big'}  for note in s.query(Note):     print note.id_item note.name note.value  1 color orange 1 data none 1 size big  
del lst[:]  lst1 = [1 2 3] lst2 = lst1 del lst1[:] print(lst2)  lst[:] = []  lst = [] lst 
In [1]: from PyQt4 import QtCore In [2]: s = QtCore.QString('foo') In [3]: s Out[3]: PyQt4.QtCore.QString(u'foo')  
default item_unit_of_measure = models.ForeignKey(UnitOfMeasure default=0)  null=True blank=True 
from PIL import Image  v_image = Image.open(file) v_image.verify()  
py&gt; g = (i for i in [123]) py&gt; type(g)() Traceback (most recent call last):    File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: cannot create 'generator' instances py&gt; g.gi_code = code Traceback (most recent call last):    File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: readonly attribute py&gt; import copy py&gt; copy.copy(g) Traceback (most recent call last): ... TypeError: object.__new__(generator) is not safe use generator.__new__() py&gt; type(g).__new__ &lt;built-in method __new__ of type object at 0x1E1CA560&gt;  py&gt; import ctypes py&gt; PyGen_New = ctypes.pythonapi.PyGen_New py&gt; PyGen_New.argtypes = [ctypes.py_object] py&gt; PyGen_New.restype = ctypes.py_object py&gt; g = (i for i in [123]) py&gt; g2 = PyGen_New(g.gi_frame) py&gt; g2.gi_code is g.gi_code True py&gt; g2.gi_frame is g.gi_frame True py&gt; g.next() 1 py&gt; g2.next() 2  py&gt; type(g.gi_frame)() Traceback (most recent call last):    File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: cannot create 'frame' instances  
inspect.getmro(cls) NewClass.mro() &gt;&gt;&gt; class A(object): &gt;&gt;&gt;     pass &gt;&gt;&gt; &gt;&gt;&gt; class B(A): &gt;&gt;&gt;     pass &gt;&gt;&gt; &gt;&gt;&gt; import inspect &gt;&gt;&gt; inspect.getmro(B) (&lt;class '__main__.B'&gt; &lt;class '__main__.A'&gt; &lt;type 'object'&gt;)  
numpy.linalg.norm dist = numpy.linalg.norm(a-b)  
defaultdict itertools.count().next from itertools import count from collections import defaultdict  def create_lookup_list(data domains):     domain_keys = defaultdict(lambda:defaultdict(count().next))     out = []     for row in data:         out.append(tuple(domain_keys[dom][val] for val dom in zip(row domains)))     lookup_table = dict((k sorted(d key=d.get)) for k d in domain_keys.items())     return out lookup_table  count().next count().__next__ lambda: next(count()) 
.clear() 
width = 10 str_number = str(ord('a')) print 'a%s' % (str_number.rjust(width))  
 result = conn.execute(RSSEntries.insert() {'feed_id': id 'short_url': tinyurl         'content': content 'hashtags': hashtags 'date': date})  entry_id = result.last_insert_ids()[0]  tags = tag_table tag_id_query = select([tags.c.tagname tags.c.id] tags.c.tagname.in_(hashtags)) tag_ids = dict(conn.execute(tag_id_query).fetchall()) for tag in hashtags:     if tag not in tag_ids:         result = conn.execute(tags.insert() {'tagname': tag})         tag_ids[tag] = result.last_inserted_ids()[0]  feedtag_table conn.execute(feedtag_table.insert()     [{'feedid': entry_id 'tagid': tag_ids[tag]} for tag in hashtags])  
doctest import doctest doctest.__file__ sys.stdout.flush() doctest example.py 
def backup_to_csv(request):      output = StringIO.StringIO() ## temp output file     writer = csv.writer(output dialect='excel')      #code for writing csv file go here...      response = HttpResponse(mimetype='application/zip')     response['Content-Disposition'] = 'attachment; filename=backup.csv.zip'      z = zipfile.ZipFile(response'w')   ## write zip to response     z.writestr("filename.csv" output.getvalue())  ## write csv file to zip      return response  
cgi.assign = ( ".py" =&gt; "/usr/bin/python" )  
&gt;&gt;&gt; lst = list(range(165)) &gt;&gt;&gt; lst[0::10] [0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160]  $ python -m timeit -s "lst = list(range(1000))" "lst1 = [x for x in lst if x % 10 == 0]" 1000 loops best of 3: 525 usec per loop $ python -m timeit -s "lst = list(range(1000))" "lst1 = lst[0::10]" 100000 loops best of 3: 4.02 usec per loop  
shell=True subprocess subprocess.Popen("wmctrl -lp | sed /gedit/ '{print $1}'" shell=True ...  
os.sep 
resize image = image.resize((x y) Image.ANTIALIAS)  # LANCZOS as of Pillow 2.7  quality_val = 90 image.save(filename 'JPEG' quality=quality_val)  models.py 
# If secondList not initialized... secondList = [] for x in firstList:     firstFunc(x)     secondFunc(x)     process(x)     if not x.discard:         secondList.append(x)  for x in firstList:     firstFunc(x)     secondFunc(x) secondList = [ x for x in firstList if not process(x).discard ]  interimList = [ process(x) for x in firstList ] secondList = [ x for x in interimList if not x.discard ]  
import Tkinter as tk root = tk.Tk() root.withdraw()  root.deiconify()  root.destroy()  
self.canvas.coords(name)  map object map coords temp_ids = self.canvas.find_overlapping(*tuple(self.canvas.coords(name)))  
from textwrap import wrap '\n'.join(['\n'.join(wrap(block width=50)) for block in text.splitlines()])  &gt;&gt;&gt; print '\n'.join(['\n'.join(wrap(block width=50)) for block in text.splitlines()])  Within eight hours of Wilson's outburst his Democratic opponent former-Marine Rob Miller had received nearly 3000 individual contributions raising approximately $100000 the Democratic Congressional Campaign Committee said.  Wilson a conservative Republican who promotes a strong national defense and reining in the size of government won a special election to the House in 2001 succeeding the late Rep. Floyd Spence R-S.C. Wilson had worked on Spence's staff on Capitol Hill and also had served as an intern for Sen. Strom Thurmond  
split() s = "VALUE 100 234 568 9233 119" a = s.split() if a[0] == "VALUE":     print [int(x) for x in a[1:]]  "VALUE" int(x) 
def rule(x):     return bin(x)[2:].zfill(8)  None return 
import urllib from xml.dom import minidom  sock = urllib.urlopen('http://www.google.com/ig/api?weather=MunichGermany&amp;hl=de') s = sock.read() encoding = sock.headers['Content-type'].split('charset=')[1] # iso-8859-1 doc = minidom.parseString(s.decode(encoding).encode('utf-8'))  
Popen("/home/user/foo" + " arg")  &gt;&gt;&gt; Popen("foo arg" shell=False) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "/usr/lib/python2.6/subprocess.py" line 595 in __init__     errread errwrite)   File "/usr/lib/python2.6/subprocess.py" line 1092 in _execute_child     raise child_exception OSError: [Errno 2] No such file or directory  
self.connect(self.horizontalHeader() SIGNAL('sectionClicked(int)') self.onClick)  
NoneType None branch None t2 return None 
numpy.newaxis newaxis 
p = subprocess.Popen(args = "myprog.exe" + " " +                      str(input1) + " " +                      str(input2) + " " +                      str(input3) + " " +                      " ".join(strpoints) stdout = subprocess.PIPE)  
import threading cond = threading.Condition(threading.Lock()) cond.acquire() cond.wait(None) print "done"      results = pool.map(slowly_square range(40))      results = pool.map_async(slowly_square range(40)).get(9999999)  
#include &lt;stdio.h&gt; setvbuf(stdout NULL _IOLBF 0);  #include &lt;stdio.h&gt; setlinebuf(stdout);  setvbuf fflush(stdout) 
def actual_kwargs():     """     Decorator that provides the wrapped function with an attribute 'actual_kwargs'     containing just those keyword arguments actually passed in to the function.     """     def decorator(function):         def inner(*args **kwargs):             inner.actual_kwargs = kwargs             return function(*args **kwargs)         return inner     return decorator   if __name__ == "__main__":      @actual_kwargs()     def func(msg a=None b=False c='' d=0):         print msg         for arg val in sorted(func.actual_kwargs.iteritems()):             print '  %s: %s' % (arg val)      func("I'm only passing a" a='a')     func("Here's b and c" b=True c='c')     func("All defaults" a=None b=False c='' d=0)     func("Nothin'")     try:         func("Invalid kwarg" e="bogon")     except TypeError err:         print 'Invalid kwarg\n  %s' % err  
TO_HIDE_ATTRS = {'class': 'hidden'} class GalleryAdminForm(forms.ModelForm):     auto_id=False     order = forms.CharField(widget=forms.TextInput(attrs=TO_HIDE_ATTRS))  $(document).ready(function(){     $('tr:has(.hidden)').hide(); });  $(document).ready(function(){     $('{{ form_field_container }}:has(.hidden)').hide(); });  form_field_container     &lt;form&gt;         &lt;span&gt;{{ field.label_tag }} {{ field }}&lt;/span&gt;     &lt;/form&gt;  'form_field_container': 'span'  
argstr = " ".join(arglist) fakefunc = "def func(%s):\n    return real_func(%s)\n" % (argstr argstr) fakefunc_code = compile(fakefunc "fakesource" "exec") fakeglobals = {} eval(fakefunc_code {"real_func": f} fakeglobals) f_with_good_sig = fakeglobals["func"]  help(f)               # f(*args **kwargs) help(f_with_good_sig) # func(foo bar baz)  
import borg import borg2  if __name__ == "__main__":     borg.fct_ab()     borg2.fct_c()  borg.Borg 10438672 borg.Borg 10438672 Bjorn borg.Borg 10438672 Bjorn  
defaultdict collections defaultdict dict2 from collections import defaultdict dict1 = dict({'a':[123] 'b':[1234] 'c':[12]}) dict2 = defaultdict(list) for key values in dict1.items():     for value in values:         # The list for dict2[value] is created automatically         dict2[value].append(key)  KeyError dict2 = dict(dict2) 
strip_accents def strip_accents(s):    return ''.join((c for c in unicodedata.normalize('NFD' unicode(s)) if unicodedata.category(c) != 'Mn'))  &gt;&gt;&gt; strip_accents(u'Östblocket') 'Ostblocket'  
for x in xrange(W):     for y in xrange(H):         p = img_src.getpixel(x y)         img_dest.setpixel(H-y-1 W-x-1)  
A class A(object):   class B(object): pass   def __init__(self): self.b = self.B()  copy1 copy2 copy3   File "./c.py" line 20 in copy3     return cPickle.loads(cPickle.dumps(d -1)) PicklingError: Can't pickle &lt;class 'c.B'&gt;: attribute lookup c.B failed  deepcopy 
sck = socket.socket(socket.AF_INET socket.SOCK_STREAM) sck.connect((adr prt) for i in range(nb):     sck.send('question %i'%i)     answer=sck.recv(4096)     print 'answer %i : %s' % (%i answer) sck.close()  for i in range(nb):     sck = socket.socket(socket.AF_INET socket.SOCK_STREAM)     sck.connect((adr prt)      while sck.error() == NO_SOCKETS_AVAIL:         sleep 250 milliseconds         sck.connect((adr prt)      sck.send('question %i'%i)     sck.shutdown(SHUT_WR)     answer=sck.recv(4096)     print 'answer %i : %s' % (%i answer)     sck.close()  
-u -u     : unbuffered binary stdout and stderr (also PYTHONUNBUFFERED=x)          see man page for details on internal buffering relating to '-u'  -u pty 
output = os.popen('cat /tmp/baz').read()  
from filename import Test Test test.py from test import Test t = Test()  
pass def connect():    _host = "example.com"    _user = "username"    _pass = "password"    _base = "database"    return MySQLdb.connect(_host _user _pass _base)  
ord("\x01") 
key = random.choice([key for key subtree in tree.thedict.items()                          if subtree.parent and not subtree.isRoot])  
authortext ELEMENT_NODE TEXT_NODE a.childNodes[0].nodeValue  
class TypeSoortDelegate(QStyledItemDelegate):  def paint(self painter option index):     get value...     if value:         option.font.setWeight(QFont.Bold)      QStyledItemDelegate.paint(self painter option index)  
def makeSomeNicelyDecoratedSubclass(someclass):   return type('MyNiceName' (someclass) {'new_attribute':'something'})  type type def makeSomeNicelyDecoratedSubclass(someclass):   mcl = type(someclass)   return mcl('MyNiceName' (someclass) {'new_attribute':'something'})  type(someclass) is type 
track_converted = win32com.client.CastTo(tracks[1] "IITFileOrCDTrack")  
self.dbc.execute("select * from car where reg='%s'") %(reg)  self.dbc.execute("select * from car where reg='%s'" % reg)  self.dbc.execute("select * from car where reg='%s'" reg)  
&gt;&gt;&gt; from PIL import Image                                                                                 &gt;&gt;&gt; img = Image.open('test.png') &gt;&gt;&gt; img.show()   
print MIMEText" takes a string -- a plain string NOT a Unicode object.  So use as the argument if what you start with is a Unicode object 
pygame from ... import * * import pygame.locals as pygl QUIT pygl.QUIT pygl time_passed if elif dispatch = {pygl.QUIT: exit_game # whatever else            }  if elif else f = dispatch.get(event.type) if f is None:  # the "else" case"    ... else: f()  
def outer():     a = 0     def inner():         print a     inner() outer()  
def prime_factorize(xli=None):     if li is None: li = []  &gt;&gt;&gt; prime_factorize(10) [2 5] &gt;&gt;&gt; prime_factorize(4) [2 5 2 2] &gt;&gt;&gt; prime_factorize(19) [2 5 2 2 19]  
def square_wrapper(i):     result = [None]     cProfile.runctx("result[0] = square(i)" globals() locals() "file_%d" % i)     return result[0]  
import itertools  def readloop(DBFILE):   txtdb=open(DBFILE 'r')   tag = "customernum:  "   BIGBLOCK = 1024 * 1024   # locate first occurrence of tag at line-start   # (assumes the VERY FIRST line doesn't start that way   # else you need a special-case and slight refactoring)   blob = ''   while True:     blob = blob + txtdb.read(BIGBLOCK)     if not blob:       # tag not present at all -- warn about that then       return     where = blob.find('\n' + tag)     if where != -1:  # found it!       blob = blob[where+1:] + txtdb.readline()       break     blob = blob[-len(tag):]   # now make a by-line iterator over the part of interest   thelines = itertools.chain(blob.splitlines(1) txtdb)   sline = next(thelines '')   while sline.startswith(tag):     data = []     data.append(sline)     sline = next(thelines '')     while not sline.startswith(tag):       data.append(sline)       sline = next(thelines '')       if not sline:         break     customernum = getitem(data "customernum:  ")     street = getitem(data "street:  ")     country = getitem(data "country:  ")     zip = getitem(data "zip:  ")  
itunes.__class__ itunes lib.__class__ lib __name__ type(...) 
#!/usr/bin/python # -*- coding: utf-8 -*-  import wx from wx.lib import buttons  def onWindow(event):     print "window event:" event.m_x event.m_y  def onMotion(event):     print "motion event:" event.m_x event.m_y  app = wx.App()  imageA = wx.Image("b.gif" wx.BITMAP_TYPE_ANY).ConvertToBitmap() imageB = wx.Image("a.gif" wx.BITMAP_TYPE_ANY).ConvertToBitmap()  frame = wx.Frame(None wx.ID_ANY title="Hover effect" size=(100+imageA.GetWidth() 100+imageA.GetHeight()))  w = wx.Window(frame) #bmp = wx.StaticBitmap(w -1 imageA (50 50) (imageA.GetWidth() imageA.GetHeight())) bmp = buttons.GenBitmapButton(w -1 imageA style=wx.BORDER_NONE) #bmp.Bind(wx.EVT_MOTION onMotion) bmp.Bind(wx.EVT_ENTER_WINDOW onWindow) bmp.Bind(wx.EVT_LEAVE_WINDOW onWindow)  frame.Show() app.MainLoop()  
p.pattern  
hasattr(var'__iter__') &gt;&gt;&gt; hasattr("abc""__iter__") False &gt;&gt;&gt; hasattr((0)"__iter__") True &gt;&gt;&gt; hasattr({}"__iter__") True &gt;&gt;&gt; hasattr(set()"__iter__") True  str __iter__ &gt;&gt;&gt; hasattr("abc" "__iter__") True  
(custom-set-variables  '(py-shell-switch-buffers-on-execute nil))  
through class A(models.Model):     name = models.CharField(max_length=200)  class B(models.Model):     a = models.ManyToManyField(A through='C')     ...  class C(models.Model):     a = models.ForeignKey(A)     b = models.ForeignKey(B)  through add create remove =  &gt;&gt;&gt; C.objects.create(a=a1 b=b)  ManyToManyField  &gt;&gt;&gt; b.a.filter(a=a1)  &gt;&gt;&gt; B.objects.filter(a__name='Test')  unique C 
parts = urlparse.urlparse("qqqq://base/id#hint") fake_url = "http:" + parts[2] parts2 = urlparse.urlparse(fake_url)  
PyObject *ptype *pvalue *ptraceback; PyErr_Fetch(&amp;ptype &amp;pvalue &amp;ptraceback); //pvalue contains error message //ptraceback contains stack snapshot and many other information //(see python traceback structure)  //Get error message char *pStrErrorMessage = PyString_AsString(pvalue);  try{ //some code that throws an error }catch(error_already_set &amp;){      PyObject *ptype *pvalue *ptraceback;     PyErr_Fetch(&amp;ptype &amp;pvalue &amp;ptraceback);      handle&lt;&gt; hType(ptype);     object extype(hType);     handle&lt;&gt; hTraceback(ptraceback);     object traceback(hTraceback);      //Extract error message     string strErrorMessage = extract&lt;string&gt;(pvalue);      //Extract line number (top entry of call stack)     // if you want to extract another levels of call stack     // also process traceback.attr("tb_next") recurently     long lineno = extract&lt;long&gt; (traceback.attr("tb_lineno"));     string filename = extract&lt;string&gt;(traceback.attr("tb_frame").attr("f_code").attr("co_filename"));     string funcname = extract&lt;string&gt;(traceback.attr("tb_frame").attr("f_code").attr("co_name")); ... //cleanup here  
&gt;&gt;&gt; # Python 2 &gt;&gt;&gt; [x**2 for x in range(10)] == map(lambda x: x**2 range(10)) True &gt;&gt;&gt; [2**i for i in range(13)] == map(lambda x: 2**x range(13)) True &gt;&gt;&gt; S = [x**2 for x in range(10)] &gt;&gt;&gt; [x for x in S if x % 2 == 0] == filter(lambda x: x % 2 == 0 S) True  list &gt;&gt;&gt; # Python 3 &gt;&gt;&gt; [x**2 for x in range(10)] == list(map(lambda x: x**2 range(10))) True &gt;&gt;&gt; [2**i for i in range(13)] == list(map(lambda x: 2**x range(13))) True &gt;&gt;&gt; S = [x**2 for x in range(10)] &gt;&gt;&gt; [x for x in S if x % 2 == 0] == list(filter(lambda x: x % 2 == 0 S)) True  
 data_file  settings_file  results_file  .... etc  
def my_function(arg1 arg2 **kwargs)  kwargs def my_function(**kwargs):     print str(kwargs)  my_function(a=12 b="abc")  {'a': 12 'b': 'abc'}  
Python uses its own small-object allocation scheme on top of malloc called PyMalloc.  Valgrind may show some unexpected results when PyMalloc is used. Starting with Python 2.3 PyMalloc is used by default.  You can disable PyMalloc when configuring python by adding the --without-pymalloc option. If you disable PyMalloc most of the information in this document and the supplied suppressions file will not be useful.  As discussed above disabling PyMalloc can catch more problems.  If you use valgrind on a default build of Python  you will see many errors like:          ==6399== Use of uninitialised value of size 4         ==6399== at 0x4A9BDE7E: PyObject_Free (obmalloc.c:711)         ==6399== by 0x4A9B8198: dictresize (dictobject.c:477)  These are expected and not a problem.   
count _  = get_count_and_price()  
from X import * from X import Wowie import * try:   from blah import bluh except ImportError e:   import sys   print 'Import error:' e   print 'sys.path:' sys.path   blah = __import__('blah')   print 'blah is %r' % blah   try:     print 'blah is at %s (%s)' % (blah.__file__ blah.__path__)   except Exception e:     print 'Cannot give details on blah (%s)' % e  
def __init__(self):     self.__dict__.update(locals())  class test(object):     def __init__(self a b foo bar=5)...  a = test(123) dir(a)  ['__class__' '__delattr__' '__dict__' '__doc__' '__format__' '__getattribute__' '__hash__' '__init__' '__module__' '__new__' '__reduce__' '__reduce_ex__' '__repr__' '__setattr__' '__sizeof__' '__str__' '__subclasshook__' '__weakref__' 'a' 'b' 'foo' 'bar' 'self']  
hosts = [eval('modulename.' + x) for x in dir(local_variables) if '_ip' in x]  
apt-get install python-qt4-gl  
data = """\ . 55 MORILLO ZONE VIII BARANGAY ZONE VIII (POB.) LUISIANA LAGROS F 01/16/1952 ALOMO TERESITA CABALLES 3412-00000-A1652TCA2 12 . 22 FABRICANTE ST. ZONE VIII LUISIANA LAGROS BARANGAY ZONE VIII (POB.) LUISIANA LAGROS M 10/14/1967 AMURAO CALIXTO MANALO13 """  from pyparsing import LineEnd oneOf Word nums Combine restOfLine \     alphanums Suppress empty originalTextFor OneOrMore alphas \     Group ZeroOrMore  NL = LineEnd().suppress() gender = oneOf("M F") integer = Word(nums) date = Combine(integer + '/' + integer + '/' + integer)  # define the simple line definitions gender_line = gender("sex") + NL dob_line = date("DOB") + NL name_line = restOfLine("name") + NL id_line = Word(alphanums+"-")("ID") + NL recnum_line = integer("recnum") + NL  # define forms of address lines first_addr_line = Suppress('.') + empty + restOfLine + NL # a subsequent address line is any line that is not a gender definition subsq_addr_line = ~(gender_line) + restOfLine + NL  # a line with a name and a recnum combined if there is no ID name_recnum_line = originalTextFor(OneOrMore(Word(alphas+'')))("name") + \     integer("recnum") + NL  # defining the form of an overall record either with or without an ID record = Group((first_addr_line + ZeroOrMore(subsq_addr_line))("address") +      gender_line +      dob_line +     ((name_line +         id_line +          recnum_line) |       name_recnum_line))  # parse data records = OneOrMore(record).parseString(data)  # output the desired results (note that address is actually a list of lines) for rec in records:     if rec.ID:         print "%(name)s %(ID)s %(address)s %(sex)s %(DOB)s" % rec     else:         print "%(name)s  %(address)s %(sex)s %(DOB)s" % rec print  # how to access the individual fields of the parsed record for rec in records:     print rec.dump()     print rec.name 'is' rec.sex     print  ALOMO TERESITA CABALLES 3412-00000-A1652TCA2 ['55 MORILLO ZONE VIII' 'BARANGAY ZONE VIII' '(POB.) LUISIANA LAGROS'] F 01/16/1952 AMURAO CALIXTO MANALO  ['22 FABRICANTE ST. ZONE' 'VIII LUISIANA LAGROS' 'BARANGAY ZONE VIII' '(POB.) LUISIANA LAGROS'] M 10/14/1967  ['55 MORILLO ZONE VIII' 'BARANGAY ZONE VIII' '(POB.) LUISIANA LAGROS' 'F' '01/16/1952' 'ALOMO TERESITA CABALLES' '3412-00000-A1652TCA2' '12'] - DOB: 01/16/1952 - ID: 3412-00000-A1652TCA2 - address: ['55 MORILLO ZONE VIII' 'BARANGAY ZONE VIII' '(POB.) LUISIANA LAGROS'] - name: ALOMO TERESITA CABALLES - recnum: 12 - sex: F ALOMO TERESITA CABALLES is F  ['22 FABRICANTE ST. ZONE' 'VIII LUISIANA LAGROS' 'BARANGAY ZONE VIII' '(POB.) LUISIANA LAGROS' 'M' '10/14/1967' 'AMURAO CALIXTO MANALO' '13'] - DOB: 10/14/1967 - address: ['22 FABRICANTE ST. ZONE' 'VIII LUISIANA LAGROS' 'BARANGAY ZONE VIII' '(POB.) LUISIANA LAGROS'] - name: AMURAO CALIXTO MANALO - recnum: 13 - sex: M AMURAO CALIXTO MANALO is M  
hist = dict((keyval) for key val in enumerate(numpy.bincount(data)) if val)  bins = numpy.unique(data) bincounts = numpy.bincount(numpy.digitize(data bins) - 1) hist = dict(zip(bins bincounts))  
class X(object):     def m(selfx):         print x  print X.m           #&gt;&gt;&gt; &lt;unbound method X.m&gt; print vars(X)['m']  #&gt;&gt;&gt; &lt;function m at 0x9e17e64&gt;  def increase_decorator(function):     return lambda selfx: function(selfx+1)  x = X() x.m(1)         #&gt;&gt;&gt; 1 X.m = increase_decorator( vars(X)['m'] ) x.m(1)         #&gt;&gt;&gt; 2  
&gt;&gt;&gt; for i u in enumerate(users[1:]):     print(users[i] u)           # or do something else   1 2 2 3 3 4 4 5  itertools.combinations &gt;&gt;&gt; import itertools &gt;&gt;&gt; for i in itertools.combinations(users 2):     print(*i)  1 2 1 3 1 4 1 5 2 3 2 4 2 5 3 4 3 5 4 5  
Py_AddPendingCall() sys.setcheckinterval() Py_Exit() Py_Finalize() PyErr_Set*() int quit(void *) {     Py_Exit(0); }   PyGILState_STATE state = PyGILState_Ensure(); Py_AddPendingCall(&amp;quit NULL); PyGILState_Release(state);  
Popen.communicate(input=my_input)  p = subprocess.Popen(["head" "-n" "1"] stdin=subprocess.PIPE) p.communicate('first\nsecond')  first  
try:     try:         retval = func(*args **kwargs)         session.commit()         return retval     except:         session.rollback()         raise finally:     session.remove()  with try:     with session.registry().transaction:         return func(*args **kwargs) finally:     session.remove()  .with_lockmode('update') 
class JSONLoader(bulkloader.Loader):     def generate_records(self filename):         for item in json.load(open(filename)):             yield item['fields']  [     {         "fields": [             "a"              "b"              "c"              "d"         ]     }      {         "fields": [             "e"              "f"              "g"              "h"         ]     } ]  generate_records generate_records AlbumLoader.__init__ __init__ JSONLoader kind bulkloader.Loader 
fcntl win32api fcntl fcntl win32api fcntl fcntl 
from configobj import ConfigObj config = ConfigObj(filename)  value = config['entry'] config['entry'] = newvalue config.write()  
\n(?&lt;!-\n)(?!-)  \n - 
1.0 num=pSum-(1.0*sum1*sum2/n) den=sqrt((sum1Sq-1.0*pow(sum12)/n)*(sum2Sq-1.0*pow(sum22)/n))  from __future__ import division  
if not value.time():     # do stuff  
from urllib import quote_plus as urlquote from sqlalchemy.engine import create_engine engine = create_engine('postgres://user:%s@host/database' % urlquote('badpass'))  sqlalchemy/engine/url.py urllib.unquote_plus 
try:     import module except ImportError:      # Do something else.  try:     from hashlib import md5 except ImportError:    from md5 import md5  
local::lib virtualenv @INC PERL5LIB MakeMaker Module::Build PATH eval $(perl -Mlocal::lib) .profile 
string_val = "x" * 10  # gives you "xxxxxxxxxx"  n n from random import choice from string import ascii_lowercase n = 10  string_val = "".join(choice(ascii_lowercase) for i in range(n))  
IDLE.app open(1) ~/Documents idlemain.py /Applications/MacPython 2.x/IDLE.app/Contents/Resources /Applications/MacPython 2.x/IDLE.app/Contents/Resources /Applications/MacPorts/Python 2.x/IDLE.app/Contents/Resources /Applications/Python 2.x/IDLE.app/Contents/Resources /Applications/Python 3.x/IDLE.app/Contents/Resources  os.chdir(os.path.expanduser('~/Documents'))  $ cd /some/directory     $ /usr/local/bin/idle  
import types  class container():     def __init__(self):         self.info = "undefiend info attribute"      def use(self):         print self.info   class tree():     def __init__(self):          # create container instance         b = container()          # change b's info attribute         b.info = "b's info attribute"          # bound method test is set as use of b and in this case unbound i think         b.use = types.MethodType(self.test.im_func b b.__class__)          # should read b's info attribute and print it         # should output: test: b's info attribute but test is bound in some way to the tree object         print b.use()      # bound method test     def test(self):         return "test: "+self.info   if __name__ == "__main__":     b = tree()  
a b = [] [] with open('myfile' 'r') as f:     for num line in enumerate(f.readlines()):         if num &gt;= 10:              b.push(line)         else:             a.push(line)  
PyThreadState *mainstate;  void initPython(){     PyEval_InitThreads();     Py_Initialize();     mainstate = PyThreadState_Swap(NULL);     PyEval_ReleaseLock(); }  void exitPython(){     PyEval_AcquireLock();     PyThreadState_Swap(mainstate);     Py_Finalize(); }  
import xml.etree.cElementTree as etree elem = etree.Element('tag') elem.text = u"Würth Elektronik Midcom" xml = etree.tostring(elem encoding='UTF-8')  
s="abcdefgh" print "".join(b+a for ab in zip(s[::2]s[1::2]))  
*? +? ?? &lt;bla&gt;&lt;blabla&gt;87765.*?&lt;/blabla&gt;&lt;bla&gt;  &lt; &lt;bla&gt;&lt;blabla&gt;87765[^&lt;]*&lt;/blabla&gt;&lt;bla&gt;  &lt;blabla&gt; &lt;/blabla&gt; 
class email.mime.text.MIMEText(_text _subtype='plain' _charset='us-ascii')  msg = MIMEText('€10') msg = MIMEText('€10'.encode('utf-8') _charset='utf-8')  msg.as_string() 
if x == 1:     pass elif x == 5:     pass elif x == 10:     pass  
definitions = {'a': 1 'b': 2 'c': 123.4} for name value in definitions.items():     globals()[name] = value  
os.mkfifo() OSError: [Errno 17] File exists tempfile.mktemp() os.mkfifo() mktemp() tempfile.mkdtemp() import os tempfile  tmpdir = tempfile.mkdtemp() filename = os.path.join(tmpdir 'myfifo') print filename try:     os.mkfifo(filename) except OSError e:     print "Failed to create FIFO: %s" % e else:     fifo = open(filename 'w')     # write stuff to fifo     print &gt;&gt; fifo "hello"     fifo.close()     os.remove(filename)     os.rmdir(tmpdir)  mktemp() 
def rule(x):     rule = bin(x)[2:].zfill(8)     ruleDict = {} # create an empty dictionary     for ic in enumerate(rule): # i = index c = character at index for each character in rule         # Leftmost bit of rule is key 0 increasing as you move right         ruleDict[i] = 'OFF' if c == '0' else 'ON'          # could have been written as:         # if c == '0':         #    ruleDict[i] = 'OFF'         # else:         #    ruleDict[i] = 'ON'          # To make it so ruleDict[0] is the LSB of the number:         #ruleDict[len(rule)-1-i] = 'OFF' if c == '0' else 'ON'      return ruleDict  print rule(30)  $ python rule.py {0: 'OFF' 1: 'ON' 2: 'ON' 3: 'ON' 4: 'ON' 5: 'OFF' 6: 'OFF' 7: 'OFF'}  ruleDict len(rule)-1-i 
class xmldict(dict):     def __getattr__(self attr):         try:             return object.__getattribute__(self attr)         except AttributeError:             if attr in self:                 return self[attr]             else:                 raise  dict_ = {'a':'some text'}  &gt;&gt; print xmldict(dict_).a some text &gt;&gt; print xmldict(dict_).NonExistent Traceback (most recent call last):   ... AttributeError: 'xmldict' object has no attribute 'NonExistent'  
field = forms.ChoiceField(choices=[[0 '----------']] + [[r.id r.name] for r in Model.objects.all()])  __init__ ModelChoiceField 
&gt;&gt;&gt; import glob &gt;&gt;&gt; glob.glob('./[0-9].*') ['./1.gif' './2.txt'] &gt;&gt;&gt; glob.glob('*.gif') ['1.gif' 'card.gif'] &gt;&gt;&gt; glob.glob('?.gif') ['1.gif']  
backslash &gt;&gt;&gt; os.remove('D:\\new.docx')  forward slash &gt;&gt;&gt; os.remove('D:/new.docx')  &gt;&gt;&gt; os.remove(r'D:\new.docx')  
open file def file_get_contents(filename):     with open(filename) as f:         return f.read()  __exit__ 
return args  
from proj.models import *   from django import forms  from proj.models import Font  print forms.__package__  
import os os.chdir("/home/udi/foo")  os.path import os  abspath = os.path.abspath(__file__) dname = os.path.dirname(abspath) os.chdir(dname)  
dom = parseString('&lt;something&gt;&lt;data&gt;I WANT THIS&lt;/data&gt;&lt;/something&gt;') data = dom.getElementsByTagName('data')[0].childNodes[0].data  
print (time.ctime())  
Queue.Queue 
car_classes = { 'car'     : Car 'truck'   : Truck 'compact' : Compact }  if __name__ == '__main__':     option = sys.argv[1]     mCar = car_classes[option]()     print 'I am a' mCar.__class__.__name__  
result = [] pizzas = Pizza.objects.select_related().filter(name='deluxe') for pizza in pizzas:     for toppings in pizza.toppings.all():         result.append((pizza.pk topping.name))  [     (1 topping_1)     (1 topping_2)     (2 topping_3)     (2 topping_4) ]  
scatter print type(ax.scatter(...))  scatter markerscale fc p1 = Rectangle((0 0) 1 1 fc="b") p2 = Rectangle((0 0) 1 1 fc="g") p3 = Rectangle((0 0) 1 1 fc="r") legend((p1 p2 p3) ('proj1''proj2''proj3'))  pl1 = plot(x1 y1 '.' alpha=0.1 label='plot1') pl2 = plot(x2 y2 '.' alpha=0.1 label='plot2') p1 = Rectangle((0 0) 1 1 fc=pl1.get_color()) p2 = Rectangle((0 0) 1 1 fc=pl2.get_color()) legend((p1 p2) (pl1.get_label() pl2.get_label()) loc='best')  
def flush(self include_footers=False):     """Flushes the current output buffer to the nextwork."""     if self.application._wsgi:         raise Exception("WSGI applications do not support flush()") #line 404     if not self._headers_written:         self._headers_written = True         headers = self._generate_headers()     else:         headers = ""  
class TestSpeedRetrieval(webapp.RequestHandler):   """   Test retrieval times of various important records in the BigTable database    """   def __init__(self cls):       self.cls = cls    def get(self):       commandValidated = True        beginTime = time()       itemList = self.cls.all().fetch(1000)         for item in itemList:            pass        endTime = time()       self.response.out.write("&lt;br/&gt;%s count=%d Duration=%s" % (self.cls.__name__ len(itemList) duration(beginTimeendTime))  TestRetrievalOfClass(Subscriber)    
random.sample import random import string  def generate_pins(length count):   return [''.join(random.choice(string.digits) for x in xrange(length))           for x in xrange(count)]  def generate_pins(length count alphabet=string.digits):   alphabet = ''.join(set(alphabet))   if count &gt; len(alphabet)**length:     raise ValueError("Can't generate more than %s &gt; %s pins of length %d out of %r" %                       count len(alphabet)**length length alphabet)   def onepin(length):     return ''.join(random.choice(alphabet) for x in xrange(length))   result = set(onepin(length) for x in xrange(count))   while len(result) &lt; count:     result.add(onepin(length))   return list(result)  string.ascii_lowercase + string.digits onepin generate_pins None generate_pins string.digits 
__repr__ __str__ __str__ __repr__ __repr__ return "%s(%r)" % (self.__class__ self.__dict__)  __repr__ __str__ __str__=__repr__ __repr__ __str__ __repr__ log(INFO "I am in the weird function and a is" a "and b is" b "but I got a null C — using default" default_c)  eval(repr(c))==c c c "MyClass(this=%rthat=%r)" % (self.thisself.that) %r %s repr() %r __repr__ MyClass(3) MyClass("3") __str__ str(3)==str("3") __str__ __repr__ __str__ [moshe is 3 hello world this is a list oh I don't know containing just 4 elements]  print "[" + " ".join(l) + "]"  __repr__ __str__ 
test_list1.sort() timeit timeit $ python -mtimeit -s'import random; x=range(1000); random.shuffle(x)' ' y=list(x); y.sort()' 1000 loops best of 3: 452 usec per loop $ python -mtimeit -s'import random; x=range(1000); random.shuffle(x)' ' x.sort()' 10000 loops best of 3: 37.4 usec per loop $ python -mtimeit -s'import random; x=range(1000); random.shuffle(x)' ' sorted(x)' 1000 loops best of 3: 462 usec per loop  y.sort() sorted(x) x.sort() sort sorted 
decode 
export CC=/usr/bin/gcc-4.0  
sql = "insert into job_runners (hostname) values ('localhost') returning id" rv = dbconn.query(sql) id = rv.dictresult()[0]['id']  
bisect bisect key= sort bisect import bisect  listofdicts = [   {'dt': '2009-%2.2d-%2.2dT12:00:00' % (md) }   for m in range(49) for d in range(130)   ]  class Indexer(object):   def __init__(self lod key):     self.lod = lod     self.key = key   def __len__(self):     return len(self.lod)   def __getitem__(self idx):     return self.lod[idx][self.key]   lookfor = listofdicts[len(listofdicts)//2]['dt']  def mid(res=listofdicts target=lookfor):     keys = [r['dt'] for r in res]     return res[bisect.bisect_left(keys target)]  def midi(res=listofdicts target=lookfor):     wrap = Indexer(res 'dt')     return res[bisect.bisect_left(wrap target)]  if __name__ == '__main__':   print '%d dicts on the list' % len(listofdicts)   print 'Looking for' lookfor   print mid() midi() assert mid() == midi()  indexer.py timeit $ python indexer.py  145 dicts on the list Looking for 2009-06-15T12:00:00 {'dt': '2009-06-15T12:00:00'} {'dt': '2009-06-15T12:00:00'} $ python -mtimeit -s'import indexer' 'indexer.mid()' 10000 loops best of 3: 27.2 usec per loop $ python -mtimeit -s'import indexer' 'indexer.midi()' 100000 loops best of 3: 9.43 usec per loop  import time  adt = '2009-09-10T12:00:00'  def dttosecs(dt=adt):     # string to seconds since the beginning     datetim = dt.split('T')     ymd = date.split('-')     hmns = tim.split(':')     y = int(y)     m = int(m)     d = int(d)     h = int(h)     mn = int(mn)     s = min(59int(float(s)+0.5)) # round to neatest second     s = int(s)     secs = time.mktime((ymdhmns00-1))     return secs  def simpler(dt=adt):   return time.mktime(time.strptime(dt '%Y-%m-%dT%H:%M:%S'))  if __name__ == '__main__':   print adt dttosecs() simpler() assert dttosecs() == simpler()  dttosecs simpler dttosecs simpler 
types.FunctionType def function 
" ".join('"{0}"'.format(i) for i in tup)  " ".join('"%s"' % i for i in tup)  
from recaptcha.client import captcha  if req.method == 'POST':     response = captcha.submit(         req.args['recaptcha_challenge_field']         req.args['recaptcha_response_field']         self.private_key         req.remote_addr         )     if not response.is_valid:         say_captcha_is_invalid()     else:         do_something_useful() else:     data['recaptcha_javascript'] = captcha.displayhtml(self.public_key)     data['recaptcha_theme'] = self.theme     return 'recaptchaticket.html' data n  
os.environ 'wsgi.input' def application(environ start_response):      try:         f = cgi.FieldStorage(fp=os.environ['wsgi.input'] environ=os.environ)  os.environ environ 
wx.TE_NO_VSCROLL 
.*(Togo.*?)(ACTIVE.*)  .* Togo Togo ^[Togo]*? ^ [Togo] T o g [^Togo] T o g 
#Python v2.6.2  import csv  import urllib2 import re  urls = csv.reader(open('list.csv')) for url in urls:     response = urllib2.urlopen(url[0])     html = response.read()     print re.findall('td7.*?td'html)  http://www.cnn.com http://www.fark.com http://www.cbc.ca  
 p>  <pre>< pre>  <p> 
seq def zigzag(seq):   return seq[::2] seq[1::2]  seq def zigzag(seq):   results = [] []   for i e in enumerate(seq):     results[i%2].append(e)   return results  
__init__ foo __path__ secret secret bar.py __init__.py foo __path__.insert(0'secret')  secret bar.py foo.bar secret secret __path__ bar.py foo    private     ??? trunk/         ??? secret/             ??? bar.py     public     ??? trunk/         ??? __init__.py         ??? foo/             ??? __init__.py             ??? bar.py             ??? baz.py             ??? quux.py  
iterator() for alias in models.Alias.objects.iterator() :     alias.update_points()  
re1 = '''^interface ([^#]*?$)[^#]*?BTO.*?^#$'''  
category = models.CharField("Category"max_length=1primary_key=True)  car = models.ForeignKey(Car)  rents = Rent.objects.filter(car=self.category)  
len() len(s) == s.__len__()  s def call_special(receiver *args **keys):     return receiver.__call_special__(*args **keys)  from peak.rules import abstract when  @abstract def serialize_object(object target):     pass  @when(serialize_object (MyStuff BinaryStream)) def serialize_object(object target):     target.writeUInt32(object.identifier)     target.writeString(object.payload)  @when(serialize_object (MyStuff XMLStream)) def serialize_object(object target):     target.openElement("my-stuff")     target.writeAttribute("id" str(object.identifier))     target.writeText(object.payload)     target.closeElement()  serialize_object(MyStuff(10 "hello world") XMLStream())  peak.security RuleDispatch 
a = 'something' def boo():     a = a boo()  global nonlocal def make_class(_a):     class A(object):         a = _a     return A  
wait communicate wait 
complex type self.type Python 2.6.2 (release26-maint Apr 19 2009 01:58:18)  [GCC 4.3.3] on linux2 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; class Foo(object): ...     type = 'abc' ...  &gt;&gt;&gt; f = Foo() &gt;&gt;&gt; f.type 'abc' &gt;&gt;&gt; class Bar(object): ...     complex = 123+4j ...  &gt;&gt;&gt; bar = Bar() &gt;&gt;&gt; bar.complex (123+4j) &gt;&gt;&gt;   
&gt;&gt;&gt; from multiprocessing import Pipe reduction &gt;&gt;&gt; i o = Pipe() &gt;&gt;&gt; reduced = reduction.reduce_connection(i) &gt;&gt;&gt; newi = reduced[0](*reduced[1]) &gt;&gt;&gt; newi.send("hi") &gt;&gt;&gt; o.recv() 'hi'  
&gt;&gt;&gt; import sys &gt;&gt;&gt; print sys.maxunicode 1114111  &gt;&gt;&gt; import sys &gt;&gt;&gt; print sys.maxunicode 65535  
class Base(object):     def __init__(name=Nonesurname=Noneage=None):         #some code  class Child(Base):     def __init__(test=None**kwargs):         Base.__init__(self**kwargs)  kwargs Child test c = Child('red herring') f kwargs 
/hello?name=joe /hello name 
json import json from json import encoder encoder.FLOAT_REPR = lambda o: format(o '.2f')      print(json.dumps(23.67)) print(json.dumps([23.67 23.97 23.87]))  23.67 [23.67 23.97 23.87]  FLOAT_REPR json 
    req.send_response(200)     req.send_header('Content-Type' 'application/zip')     req.send_header('Content-Disposition' 'attachment;'                     'filename=%s' % filename)  
r = FH(file('classfhtry.csv' 'r')) for line in r:     print line  
socket.SOCK_STREAM socket.SOCK_DGRAM 
IDLE.app bash_profile ~/.MacOSX/environment.plist IDLE $ export PYTHONPATH= ... $ /usr/local/bin/idle2.6  open(1) open Run Shell Script export PYTHONPATH= ... open -a "/Applications/Python 2.6/IDLE.app"  Application 
def foo(*args):     pass foo = deco(foo)  @deco def foo(*args):     pass  bar foo foo = deco(bar) bar foo bar deco __call__ 
telnet telnet 127.0.0.1 3000  telnet 
pylab $ ipython -pylab  In [1]: from pylab import*  In [2]: subplot(111projection="hammer") Out[2]: &lt;matplotlib.axes.HammerAxesSubplot object at 0x2241050&gt;  In [3]:  
p = Popen(['gcc' '-o' 'hello' 'hello.c'] stdout=subprocess.PIPE stderr=stderr=subprocess.STDOUT)  
$ cat /etc/*-release DISTRIB_CODENAME=hardy DISTRIB_DESCRIPTION="Ubuntu 8.04.2" DISTRIB_ID=Ubuntu DISTRIB_RELEASE=8.04 ...etc etc...  /etc/lsb-release *-release cat 
print "%*s blah" % (max_title_widthcolumn)  max_title_width &gt;&gt;&gt; text = "abcdef" &gt;&gt;&gt; print "&lt;%*s&gt;" % (len(text)+2text) &lt;  abcdef&gt; &gt;&gt;&gt; print "&lt;%-*s&gt;" % (len(text)+2text) &lt;abcdef  &gt; &gt;&gt;&gt;  &gt;&gt;&gt; print "&lt;%*s&gt;" % (len(text)-2text) &lt;abcdef&gt;  &gt;&gt;&gt; print "&lt;%.*s&gt;" % (len(text)-2text) &lt;abcd&gt;  % - if left justified * or integer - min width (if '*' insert variable length in data tuple) .* or .integer - max width (if '*' insert variable length in data tuple)  
setuptools setuptools setup Extension distutils setup_*.py PYTHONPATH 
L[:] = [ item for iitem in enumerate(L) if i not in I ]  I isValid L[:] = [ item for item in L if item.isValid() ]  I = set() for i in range(len(L)):     if not L[i].isValid():         I.add(i)  for i in sorted(I reverse=True):     del L[i]  
proxy = urllib2.ProxyHandler({'http': '127.0.0.1'}) opener = urllib2.build_opener(proxy) urllib2.install_opener(opener) urllib2.urlopen('http://www.google.com')  
&gt;&gt;&gt; def test(): ...     exec "a = 5" ...     print a ... &gt;&gt;&gt; test() 5  
__hash__ $foo{1} $foo{1.0} and $foo{"1"} %foo try: ... except: ... 
set.issubset &gt;&gt;&gt; set(['spam' 'eggs']).issubset('/home/user/spam/eggs'.split('/')) True  
db.commit() 
from xml.etree import cElementTree as ET import urllib  def get_bass_fishing_URLs():   results = []   data = urllib.urlopen(       'http://gdata.youtube.com/feeds/api/videos/-/bass/fishing/')   tree = ET.parse(data)   ns = '{http://www.w3.org/2005/Atom}'   for entry in tree.findall(ns + 'entry'):     for link in entry.findall(ns + 'link'):       if link.get('rel') == 'alternate':         results.append(link.get('href'))  
namespace bhn = big_honkin_name;  using big_honkin_name::fn; int a = fn(27);  
None pop dict(a **award_dict) .update a dict(name=name description=desc % count points=points parent_award=parent      **award_dict)  a.update(award_dict) award_dict award_dict ** dict(award_dict name=name 
archive_index GenericRelation dates 
class MyForm(forms.Form):     myfield = forms.CharField(widget=forms.TextInput(attrs={'class' : 'myfieldclass'}))  class MyForm(forms.ModelForm):     class Meta:         model = MyModel         widgets = {             'myfield': forms.TextInput(attrs={'class': 'myfieldclass'})         }  class MyForm(forms.ModelForm):     class Meta:         model = MyModel      def __init__(self *args **kwargs):         super(MyForm self).__init__(*args **kwargs)         self.fields['myfield'].widget.attrs.update({'class' : 'myfieldclass'})  
sqlalchemy.extract('year' model.MyRecord.dfield) == selected_year  
Basket.objects.annotate(num_fruits=Count('fruits')).filter(num_fruits=len(Fruit.objects.all()))  
MyPoint MyPoint allocate_point() mylib.so free_point(p) mylib.so 
math decimal datetime time re glob fnmatch os os.path tempfile shutil sqlite json random urllib2 logging wsgiref 
foo = property(..) foo = models.. _foo foo QuerySet 
Thread.start() Thread run target start run t.run() 
self.__class__ self class Basket(object):    def __init__(self):     # add all the properties     setattr(self.__class__ 'Apple' property(lambda s : 'Apple') )     setattr(self.__class__ 'Pear' property(lambda s : 'Pear') )    # normal property   Air = property(lambda s : "Air")  if __name__ == "__main__":   b = Basket()   print b.Air # outputs: "Air"   print b.Apple # outputs: "Apple"   print b.Pear # outputs: "Pear"  p p p 
#! /usr/bin/env python  import re  token_re = re.compile(r'use\s+([a-z0-9]+)\s+code' re.IGNORECASE) def find_token(s):     m = token_re.search(s)     if m is not None:         token = m.group(1)         if token.isupper():             return token  if __name__ == '__main__':     for s in ['Use HELLO1 code'               'USE hello1 CODE'               'this does not match'              ]:         print s '-&gt;'         print find_token(s)  Use HELLO1 code -&gt; HELLO1 USE hello1 CODE -&gt; None this does not match -&gt; None  
subprocess pexpect wexpect 
&gt;&gt;&gt; thetuple = (1 2 3) &gt;&gt;&gt; print "this is a tuple: %s" % (thetuple) this is a tuple: (1 2 3)  (thetuple) 
def create_object(type_name):     return type_name()  
import random  words = [line.strip() for line in open('/etc/dictionaries-common/words')] print(random.choice(words))  
#!/usr/bin/env python import fileinput sys  pred = eval('lambda line: ' + sys.argv[1]) print sum(1 for line in fileinput.input(sys.argv[2:]) if pred(line))  pywc.py predicate [FILE]... predicate FILE FILE 
Find: ^([a-z]+) \d Replace with: \1  ^([a-z]+) \d \1 
import traceback  
os.system os.system os.system subprocess mkdir echo subprocess.Popen() os.system('''ssh -q %(REMOTEHOST)s "mkdir ~/.ssh 2&gt;/dev/null; chmod 700 ~/.ssh; echo '%(KEYCODE)s' &gt;&gt; ~/.ssh/authorized_keys; chmod 644 ~/.ssh/authorized_keys"''' % {   'REMOTEHOST':'user@remote'   'KEYCODE':open(os.path.join(os.environ['HOME'] '.ssh/id_rsa.pub')'r').read() })  
print '%.3f' % float(1.0000)  decimal from decimal import Decimal d = Decimal('1.0000')  decimal float Decimal 
static string Hex2Binary(string hexvalue) {     StringBuilder binaryval = new StringBuilder();     for(int i=0; i &lt; hexvalue.Length; i++)     {         string byteString = hexvalue.Substring(i 1);         byte b = Convert.ToByte(byteString 16);         binaryval.Append(Convert.ToString(b 2).PadLeft(4 '0'));     }     return binaryval.ToString(); }  static string Hex2Base64(string hexvalue) {     if (hexvalue.Length % 2 != 0)         hexvalue = "0" + hexvalue;     int len = hexvalue.Length / 2;     byte[] bytes = new byte[len];     for(int i = 0; i &lt; len; i++)     {         string byteString = hexvalue.Substring(2 * i 2);         bytes[i] = Convert.ToByte(byteString 16);     }     return Convert.ToBase64String(bytes); }  
def add(x):     from mypackage import mymodule     print "mypackage.mymodule path" mymodule     mymodule.l.append(x)     print "updated list"mymodule.l  def get():     import mymodule     print "mymodule path" mymodule     return mymodule.l  add(1) print "lets check"get()  add(1) print "lets check again"get()   $ export PYTHONPATH=. $ python  mypackage/main.py   mypackage.mymodule path &lt;module 'mypackage.mymodule' from '/tmp/mypackage/mymodule.pyc'&gt; mymodule path &lt;module 'mymodule' from '/tmp/mypackage/mymodule.pyc'&gt;  realmain.py: from mypackage import main  mypackage.mymodule path &lt;module 'mypackage.mymodule' from '/tmp/mypackage/mymodule.pyc'&gt; mymodule path &lt;module 'mypackage.mymodule' from '/tmp/mypackage/mymodule.pyc'&gt;  
import xml.etree.ElementTree as etree  parser = etree.XMLTreeBuilder()  def end_tag_event(tag):     node = self.parser._end(tag)     print node  parser._parser.EndElementHandler = end_tag_event  def data_received(data):     parser.feed(data)  
  fs.serial_number.validators.remove(formalchemy.validators.required)   fs.mac.validators.remove(formalchemy.validators.required)  None None validators.required 
from frontend.stars.models import Star  Star isinstance &gt;&gt;&gt; user.__class__ &lt;class 'frontend.stars.models.User'&gt; &gt;&gt;&gt; Picture.user.reference_class &lt;class 'stars.models.User'&gt;  
&gt;&gt;&gt; filter(lambda i: i &lt; limit a) [0 1 2 3 4 5 6 7 8]  
min(points_list key=lambda x: distance(x point_a))  lambda key point_a distance &gt;&gt;&gt; point_a = point([1 2 3] 5) &gt;&gt;&gt; def distance(x):     return numpy.linalg.norm(x.coord - point_a.coord)  distance lambda &gt;&gt;&gt; min(points_list key=distance)  
#!/usr/bin/env python # -*- encoding: utf-8 -*-  
import wx class TextDropTarget(wx.TextDropTarget):     def __init__(self obj callback):         wx.TextDropTarget.__init__(self)         self.obj = obj         self._callback = callback      def OnDropText(self x y data):         self.obj.WriteText(data + '\n\n')         wx.MessageBox("Error" "Error" style = wx.ICON_ERROR)      def OnDragOver(self *args):         wx.CallAfter(self._callback)         return wx.TextDropTarget.OnDragOver(self *args)  class DropFrame(wx.Frame):     def __init__(self):         wx.Frame.__init__(self None)         text = wx.TextCtrl(self wx.ID_ANY)         text.SetDropTarget(TextDropTarget(text self._callback))      def _callback(self):         self.Raise()         self.SetFocus()  app = wx.PySimpleApp() frame = DropFrame() app.SetTopWindow(frame) frame.Show() app.MainLoop()  
python setup.py install --user 
if len(var): 
endif endfilter if filter 
optparse argparse easy_install argparse sys.path #!/usr/bin/env python from argparse import ArgumentParser  if __name__ == "__main__":     parser = ArgumentParser(prog='script.py')     parser.add_argument('--foo' nargs='?' metavar='bar' default='baz')      parser.print_usage()         for args in ([] ['--foo'] ['--foo' 'bar']):         print "$ %s %s -&gt; foo=%s" % (             parser.prog ' '.join(args).ljust(9) parser.parse_args(args).foo)  
django.contrib.admin.widgets.AdminSplitDateTime 
def application(environ start_response):     status = '200 OK'     output = 'Hello World!'      response_headers = [('Content-type' 'text/plain')]     start_response(status response_headers)      file = open('/usr/share/dict/words' 'rb')     return environ['wsgi.file_wrapper'](file)  
&gt;&gt;&gt; mock('foo'returns=5) &gt;&gt;&gt; bar.func_globals['foo'] = foo  &gt;&gt;&gt; mock('foo' nsdicts=(bar.func_globals) returns=5)  
s = "1.2" a = float(s)  
DECLARE foo CURSOR FETCH FROM CURSOR WHERE CURRENT OF CURSOR 
range Fact.objects.filter(fecha_fact__range=(yesterday today))  
itun.py import sys  class _Sneaky(object):   def __init__(self):     self.download = None    @property   def DOWNLOAD_PATH(self):     if not self.download:       self.download = heavyComputations()     return self.download    def __getattr__(self name):     return globals()[name]  # other parts of itun that you WANT to code in # module-ish ways  sys.modules[__name__] = _Sneaky()  import itun itun._Sneaky() __getattr__ itun.py _Sneaky 
email.message.Message.get_payload() import email msg = email.message_from_string(raw_message) for part in msg.walk():     # each part is a either non-multipart or another multipart message     # that contains further parts... Message is organized like a tree     if part.get_content_type() == 'text/plain':         print part.get_payload() # prints the raw text  msg = email.message_from_string(raw_message) msg.get_payload()  None get_payload() msg = email.message_from_string(raw_message) for part in msg.walk():     if part.get_content_type() == 'application/msword':         name = part.get_param('name') or 'MyDoc.doc'         f = open(name 'wb')         f.write(part.get_payload(None True)) # You need None as the first param                                               # because part.is_multipart()                                                # is False         f.close()  
def foo():     ldict = {}     exec("a=3"globals()ldict)     a = ldict['a']     print(a)  exec locals() exec global Python 2.6.2 (release26-maint Apr 19 2009 01:56:41)  [GCC 4.3.3] on linux2 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; def f(): ...     a = 1 ...     exec "a=3" ...     print a ...  &gt;&gt;&gt; f() 3  
operator&gt;&gt; 
with_default_value newfunc with_default_value func newfunc func int newfunc newfunc func default for i in range(len(buttons)):   buttons[i].onclick(lambda: mainwin.settitle("button %d click!" % i))  i lambda i def makeOnclick(message):   return lambda: mainwin.settitle(message)  for i in range(len(buttons)):   buttons[i].onclick(makeOnClick("button %d click!" % i))  
GoodReplyCtr = 0 for i in range(0 10):  # or 100 or 1000 if you feel ambitious...    cc = OneProblem()    if cc &lt; 0:         break    GoodReplyCtr += cc  print(GoodReplyCtr)  import random X = random.choice((2 3 4 6 7 8 9 7 9))  # see no 0 1or 5 but more chance to get 7 or 9  
onFilmSet receiver = lambda film=film: self.onFilmSet(self film) self.connect(menuItem_Film SIGNAL('triggered()') receiver)  
#!/usr/bin/python 
&gt;&gt;&gt; import time &gt;&gt;&gt; tic = time.clock() &gt;&gt;&gt; toc = time.clock() &gt;&gt;&gt; toc - tic  timeit 
foo &gt;&gt;&gt; re.search('(foo)(=(bar))?' 'foo=bar').groups() ('foo' '=bar' 'bar')  
&lt;span&gt;You have {{products|length}} products&lt;/span&gt;  {% if products|length &gt; 1 %}  length count {{products|count}} {{products|length}} 
User.objects.filter(is_active=True).order_by("-date_joined")[:10]  
fopen() fopen  The argument mode points to a string beginning with one of the following  sequences (Additional characters may follow these sequences.):   ``r''   Open text file for reading.  The stream is positioned at the          beginning of the file.   ``r+''  Open for reading and writing.  The stream is positioned at the          beginning of the file.   ``w''   Truncate file to zero length or create text file for writing.          The stream is positioned at the beginning of the file.   ``w+''  Open for reading and writing.  The file is created if it does not          exist otherwise it is truncated.  The stream is positioned at          the beginning of the file.   ``a''   Open for writing.  The file is created if it does not exist.  The          stream is positioned at the end of the file.  Subsequent writes          to the file will always end up at the then current end of file          irrespective of any intervening fseek(3) or similar.   ``a+''  Open for reading and writing.  The file is created if it does not          exist.  The stream is positioned at the end of the file.  Subse-          quent writes to the file will always end up at the then current          end of file irrespective of any intervening fseek(3) or similar.  
import wx import textwrap  class MultilineRadioButton(wx.RadioButton):         def __init__(self parent id=-1 label=wx.EmptyString wrap=10 pos=wx.DefaultPosition size=wx.DefaultSize style=0 validator=wx.DefaultValidator name=wx.RadioButtonNameStr):             wx.RadioButton.__init__(selfparentid''possizestylevalidatorname)             self._label = label             self._wrap = wrap             lines = self._label.split('\n')             self._wrappedLabel = []             for line in lines:                 self._wrappedLabel.extend(textwrap.wrap(lineself._wrap))              self._textHOffset = 20             dc = wx.ClientDC(self)             font = wx.SystemSettings.GetFont(wx.SYS_DEFAULT_GUI_FONT)             dc.SetFont(font)             maxWidth = 0             totalHeight = 0             lineHeight = 0             for line in self._wrappedLabel:                 width height = dc.GetTextExtent(line)                 maxWidth = max(maxWidthwidth)                 lineHeight = height                 totalHeight += lineHeight               self._textHeight = totalHeight              self.SetInitialSize(wx.Size(self._textHOffset + maxWidthtotalHeight))             self.Bind(wx.EVT_PAINT self.OnPaint)          def OnPaint(self event):             dc = wx.PaintDC(self)             self.Draw(dc)             self.RefreshRect(wx.Rect(00self._textHOffsetself.GetSize().height))             event.Skip()          def Draw(self dc):             dc.Clear()             font = wx.SystemSettings.GetFont(wx.SYS_DEFAULT_GUI_FONT)             dc.SetFont(font)             height = self.GetSize().height             if height &gt; self._textHeight:                 offset = height / 2 - self._textHeight / 2             else:                 offset = 0             for line in self._wrappedLabel:                 width height = dc.GetTextExtent(line)                 dc.DrawText(lineself._textHOffsetoffset)                 offset += height   class HFrame(wx.Frame):    def __init__(selfpos=wx.DefaultPosition):        wx.Frame.__init__(selfNonetitle="Hello World"size=wx.Size(600400)pos=pos)         self.panel = wx.Panel(self-1)        sizer = wx.BoxSizer(wx.HORIZONTAL)         cb = RadioButton(self.panel-1label="This is a very very long label for the control!"wrap=10)        sizer.Add(cb1)         cb = RadioButton(self.panel-1label="This is a very very long label for the control!"wrap=10)        sizer.Add(cb1)         cb = RadioButton(self.panel-1label="This is a very very long label for the control!"wrap=10)        sizer.Add(cb1)         self.panel.SetSizer(sizer)        sizer.Layout()   class VFrame(wx.Frame):    def __init__(selfpos=wx.DefaultPosition):        wx.Frame.__init__(selfNonetitle="Hello World"size=wx.Size(600400)pos=pos)         self.panel = wx.Panel(self-1)        sizer = wx.BoxSizer(wx.VERTICAL)         cb = RadioButton(self.panel-1label="This is a very very long label for the control!"wrap=10)        sizer.Add(cb1)         cb = RadioButton(self.panel-1label="This is a very very long label for the control!"wrap=10)        sizer.Add(cb1)         cb = RadioButton(self.panel-1label="This is a very very long label for the control!"wrap=10)        sizer.Add(cb1)         self.panel.SetSizer(sizer)        sizer.Layout()   app = wx.App(redirect=False) htop = HFrame(pos=wx.Point(050)) htop.Show() vtop = VFrame(pos=wx.Point(65050)) vtop.Show() app.MainLoop()  
def make_b( a seed ):     yield seed     for ab in zip( a[:-1] a[1:] ):         seed= someFunction( seed a b )         yield seed  a = xrange(10) b= list(make_b(asomething))  b = make_b(a)  b b list a list yield 
GzipFile import gzip content = "Lots of content here" real_f = open('/home/joe/file.txt.gz' 'wb') f = gzip.GZipFile('file.txt.gz' fileobj=real_f) f.write(content) f.close() real_f.close()  open fileobj 
__getattr__ class Wrapper(object):     def __init__(selfwrapped_class):         self.wrapped_class = wrapped_class()      def __getattr__(selfattr):         orig_attr = self.wrapped_class.__getattribute__(attr)         if callable(orig_attr):             def hooked(*args **kwargs):                 self.pre()                 result = orig_attr(*args **kwargs)                 # prevent wrapped_class from becoming unwrapped                 if result == self.wrapped_class:                     return self                 self.post()                 return result             return hooked         else:             return orig_attr      def pre(self):         print "&gt;&gt; pre"      def post(self):         print "&lt;&lt; post"  number = Wrapper(Simple)  print "\nCalling wrapped 'one':" number.one()  print "\nCalling wrapped 'two':" number.two("2")  Calling wrapped 'one': &gt;&gt; pre one &lt;&lt; post  Calling wrapped 'two': &gt;&gt; pre two2 &lt;&lt; post  
request.COOKIES request.COOKIES.get('key' 'default')  
if i==0:   converters = [mybool]*len(row)  
projfiles['buildasm'] = ['#build/'+os.path.splitext(x)[0]+'.asm' for x in projfiles['a'] if x != 'baz.a']  ignored_files = ['baz.a'                  'foo.a'                  'xyzzy.a'                  ] projfiles['buildasm'] = ['#build/'+os.path.splitext(x)[0]+'.asm' for x in projfiles['a'] if x not in ignored_files]  
random from math import log... math 
ssh localhost  ssh: connect to host localhost: Connection refused  
import django print django.VERSION  (1 1 0 'final' 0) 
Y = Y[random.choice(Y.keys())]  
$HOME/.pystartup PYTHONPATH PYTHONPATH pyqt 4.5.4 pydev 1.4.8 "eclipse preferences -&gt; pydev -&gt; editor -&gt; code analysis -&gt; do code analysis?" 
p.contents def copy(dst src):     """Copies the contents of src to dst"""     pointer(dst)[0] = src  # alternately def new_copy(src):     """Returns a new ctypes object which is a bitwise copy of an existing one"""     dst = type(src)()     pointer(dst)[0] = src     return dst  # or if using pointers def ptr_copy(dst_ptr src_ptr):     dst_ptr[0] = src_ptr[0]  ctypes &gt;&gt;&gt; o1 = Point(1 1) &gt;&gt;&gt; o2 = Point(2 2) &gt;&gt;&gt; print (o1.x o1.y addressof(o1)) (o2.x o2.y addressof(o2)) (1 1 6474004) (2 2 6473524) &gt;&gt;&gt; copy(o2 o1) &gt;&gt;&gt; pprint (o1.x o1.y addressof(o1)) (o2.x o2.y addressof(o2)) (1 1 6474004) (1 1 6473524)  &gt;&gt;&gt; o1 = Point(1 1) o2 = Point(2 2) &gt;&gt;&gt; print (o1.x o1.y addressof(o1)) (o2.x o2.y addressof(o2)) (1 1 6473844) (2 2 6473684) &gt;&gt;&gt; p1 p2 = pointer(o1) pointer(o2) &gt;&gt;&gt; addressof(p1.contents) addressof(p2.contents) (6473844 6473684) &gt;&gt;&gt; ptr_copy(p1 p2) &gt;&gt;&gt; print (o1.x o1.y addressof(o1)) (o2.x o2.y addressof(o2)) (2 2 6473844) (2 2 6473684) &gt;&gt;&gt; addressof(p1.contents) addressof(p2.contents) (6473844 6473684)  
mkstemp &gt;&gt;&gt; __ filename = tempfile.mkstemp() &gt;&gt;&gt; fptr= os.fdopen(__)  
class Greeting(db.Model):     content = db.StringProperty(multiline=True)  Greeting StringProperty content Greeting content greeting = Greeting() greeting.content = self.request.get('content')  
.order_by('-date')  
can_delete = True GenericStackedInline InlineModelAdmin class MyInlineFormset(generic.generic_inlineformset_factory(MyModel)):     def __init__(self *args **kwargs):         super(MyInlineFormset self).__init__(*args **kwargs)         self.can_delete = False  class MyModelStackedInline(generic.GenericStackedInline):     model = MyModel     formset = MyInlineFormset     extra = 0  
from twisted.application.service import Service  class MultiprocessingService(Service):     def startService(self):         self.pool = multiprocessing.Pool(processes=processes)  MultiprocessingService().setServiceParent(application)  
type(connection) inspect.getmodule() inspect 
mkdir tmp cd tmp wget http://svn.zope.org/*checkout*/zc.buildout/trunk/bootstrap/bootstrap.py python bootstrap.py init vim buildout.cfg  [buildout] parts = sqlite   [sqlite] recipe = zc.recipe.egg eggs = pysqlite interpreter = mypython  ./bin/buildout ./bin/mypython &gt;&gt;&gt; import sqlite3  
&lt;Location /python/app1/&gt;    Order allowdeny    Allow from all &lt;/Location&gt;  &lt;Location /python/app2/&gt;    Order allowdeny    Allow from all    AuthType             basic    AuthName             "Protected Intranet Area"    AuthUserFile         /etc/apache2/htpasswd    Require              valid-user &lt;/Location&gt;  
setup.py $ pip install .   pip setup.py 
--export-dynamic g++ g++ -Wl--export-dynamic ...  
server.bind(('' 2727))  
from decimal import Decimal object.fieldName = Decimal("0.85")  f = 0.85 object.fieldName = Decimal(str(f))  
ModelForm clean() 
manager from django import forms  class TeamForm(forms.ModelForm):     manager = forms.ModelChoiceField(queryset=User.objects.order_by('username'))      class Meta:         model = Team  class TeamAdmin(admin.ModelAdmin):     list_display = ('name' 'manager')     form = TeamForm  
itertools __iter__() for-in &gt;&gt;&gt; sequence = [1 2 3 4 5] &gt;&gt;&gt; iterator = sequence.__iter__() &gt;&gt;&gt; iterator.next() 1 &gt;&gt;&gt; iterator.next() 2 &gt;&gt;&gt; for number in iterator:     print number  3 4 5  itertools def consume(iterator n):     '''Advance the iterator n-steps ahead. If n is none consume entirely.'''     collections.deque(itertools.islice(iterator n) maxlen=0)  &gt;&gt;&gt; import itertools collections &gt;&gt;&gt; def consume(iterator n):     collections.deque(itertools.islice(iterator n)) &gt;&gt;&gt; iterator = range(1 16).__iter__() &gt;&gt;&gt; for number in iterator:     if (number == 5):         # Disregard 6 7 8 9 (5 doesn't get printed just as well)         consume(iterator 4)     else:         print number  1 2 3 4 10 11 12 13 14 15  
PolyModel db import wsgiref.handlers from google.appengine.ext import webapp from google.appengine.ext.db import polymodel  class Father(polymodel.PolyModel):     def hello(self):         return "Father says hi"  class Son(Father):     def hello(self):         return "Spawn says hi"  class MainHandler(webapp.RequestHandler):    def get(self):     s = Son()     s.put()     son_from_father = Father.get_by_id(s.key().id())     x = son_from_father.hello()     self.response.out.write(x)  def main():   application = webapp.WSGIApplication([('/' MainHandler)]                                        debug=True)   wsgiref.handlers.CGIHandler().run(application)   if __name__ == '__main__':   main()  
def row_major(alist sublen):         return [alist[i:i+sublen] for i in range(0 len(alist) sublen)]  def col_major(alist sublen):   numrows = (len(alist)+sublen-1) // sublen    return [alist[i::sublen] for i in range(numrows)]  L = ['one''two''three''four''five''six''seven''eight''nine'] for r in row_major(L 3): print r print for r in col_major(L 3): print r for r in row_major(L 4): print r  def html_table(lol):   print '&lt;table&gt;'   for sublist in lol:     print '  &lt;tr&gt;&lt;td&gt;'     print '    &lt;/td&gt;&lt;td&gt;'.join(sublist)     print '  &lt;/td&gt;&lt;/tr&gt;'   print '&lt;/table&gt;'  print yield '\n'.join(html_table(lol)) yield html_table def list_to_html_table(alist sublength column_major=False):   if column_major:     lol = col_major(alist sublength)   else:     lol = row_major(alist sublength)   return ''.join(html_table(lol))  
connect def connect():     try:         c = MyClient(9989)         # On the second iteration do_stuff() tries to send data and         # hangs indefinitely.         print c.do_stuff()     finally:         c.sock.close()         c.sockfile.close()  __enter__ __exit__ MyClient def connect():     with MyClient(9989) as c:         print c.do_stuff()  
row:     Else row.FRML_FUNC_OPTN is : Elsedecrementing indent row.FRML_FUNC_OPTN is : Elseincrementing indent  rowtext = rowtext.strip()  
$ /usr/bin/python -V Python 2.3.4 $ /usr/bin/python2.4 -V Python 2.4.4 $ /opt/local/bin/python2.7 -V Python 2.7a0 $ python -V Python 2.5.2 $ which python /usr/bin/python  $ alias python2.4=/usr/bin/python2.4 $ alias python2.5=/usr/bin/python2.5 $ python2.4 -V Python 2.4.4 $ python2.5 -V Python 2.5.2  
@staticmethod def mystaticmethod(params)     ...     return  @staticmethod mystaticmethod = staticmethod(mystaticmethod) 
multiprocessing 
re.match(u'Élisa™\\s+' unicodestring)  [group] (?u) \s 
import threading import gc  mydata = threading.local()  class x:     def __del__(self):         print "x got deleted!"  def run():     mydata.foo = x()  t = threading.Thread(target=run) print "t created" gc.collect() t.start() print "t started" gc.collect() del mydata print "mydata deleted" gc.collect() t.join() print "t joined" gc.collect() print "Done!"  t created t started x got deleted! mydata deleted t joined Done!  import threading  mydata = threading.local()  class x:     def __init__(self):         print "x got created!"     def __del__(self):         print "x got deleted!"  def run():     mydata.foo = x()  t = threading.Thread(target=run) print "t created" t.start() print "t started" del mydata print "mydata deleted" t.join() print "t joined" print "Done!"  t created x got created! t started x got deleted! mydata deleted t joined Done!  
port installed &gt; myports.txt  sudo port clean installed sudo port -f uninstall installed  sudo port install portname +variant1 +variant2 ...  sudo port install py25-gtk  
_sqlite3.pyd C:\Python26\DLLs /usr/lib/python2.6/lib-dynload/_sqlite3.so PYTHONPATH _sqlite3.so import sys sys.path.append("/path/to/my/libs")  PYTHONPATH .bashrc 
filename with close input.close()  try finally 
if the_string = '1-2-3-4'  [int(x) for x in the_string.split('-') if x != '']  
&gt;&gt;&gt; from pprint import pprint &gt;&gt;&gt; mydict = {'a':1 'b':2 'c':3} &gt;&gt;&gt; pprint(mydict) {'a': 1 'b': 2 'c': 3} &gt;&gt;&gt; mydict = {'a':1 'b':2 'c':3 'd':4 'e':5} &gt;&gt;&gt; pprint(mydict) {'a': 1 'b': 2 'c': 3 'd': 4 'e': 5} &gt;&gt;&gt; d = dict(zip("kjihgfedcba"range(11))) &gt;&gt;&gt; pprint(d) {'a': 10  'b': 9  'c': 8  'd': 7  'e': 6  'f': 5  'g': 4  'h': 3  'i': 2  'j': 1  'k': 0}  &gt;&gt;&gt; from pprint import pprint &gt;&gt;&gt; mydict = {'a':1 'b':2 'c':3 'd':4 'e':5} &gt;&gt;&gt; pprint(mydict) {'a': 1 'c': 3 'b': 2 'e': 5 'd': 4} &gt;&gt;&gt; d = dict(zip("kjihgfedcba"range(11))) &gt;&gt;&gt; pprint(d) {'a': 10  'b': 9  'c': 8  'd': 7  'e': 6  'f': 5  'g': 4  'h': 3  'i': 2  'j': 1  'k': 0} &gt;&gt;&gt;   items = object.items() items.sort()  for k v in sorted(object.items()):  for key value in sorted(dict_example.items() key=lambda x: x[0]):      print("{} : {}".format(key value))  for key value in sorted(dict_example.items() key=lambda x: x[1]):      print("{} : {}".format(key value))  
setStringValue_ 
def returnATupleWithThreeValues():     return (123) abc = returnATupleWithThreeValues() print a print b print c  def returnATupleWithThreeValues():     return (123) ab = returnATupleWithThreeValues() print a print b  Traceback (most recent call last):   File "c.py" line 3 in ?     ab = returnATupleWithThreeValues() ValueError: too many values to unpack  
def intersection(iterableA iterableB key=lambda x: x):     """Return the intersection of two iterables with respect to `key` function.      """     def unify(iterable):         d = {}         for item in iterable:             d.setdefault(key(item) []).append(item)         return d      A B = unify(iterableA) unify(iterableB)      return [(A[k] B[k]) for k in A if k in B]  print intersection('Today I am fine'.split()                    'Hello How a re you TODAY'.split()                    key=str.lower) # -&gt; [(['Today'] ['TODAY'])]  
import unittest from common_methods import *  class TestPayments(unittest.TestCase):     def test_0(self):         common_method1(self "foo")  def common_method1( self stuff ):     blah=stuff     self.failUnless(len(blah) &gt; 5)  
def location(xydim_xdim_y):     index = 1*(y==0) + 2*(y==dim_y-1) + 3*(x==0) + 6*(x==dim_x-1)     return ["interior""top""bottom""left""top-left"             "bottom-left""right""top-right""bottom-right"][index]  
sendto sendto 
import xml.dom.minidom xml.dom.minidom.parseString("&lt;xml&gt;&lt;item/&gt;&lt;/xml&gt;")  
urllib print c.getcode() urllib print c.read() urllib2 urllib 
ast 
  def __init__(selfdbname):     tmp = sqlite.connect(dbname)     self.con = tmp.cursor()    def __del__(self):     self.con.close()  tmp __init__ self.con tmp __del__ .close   def __init__(selfdbname):     self.con = sqlite.connect(dbname)     self.cur = self.con.cursor()    def __del__(self):     self.cur.close()     self.con.close()  
cursor self.con close close 
itertools powerset from itertools import chain combinations  def powerset(iterable):     "powerset([123]) --&gt; () (1) (2) (3) (12) (13) (23) (123)"     s = list(iterable)     return chain.from_iterable(combinations(s r) for r in range(len(s)+1))  &gt;&gt;&gt; list(powerset("abcd")) [() ('a') ('b') ('c') ('d') ('a' 'b') ('a' 'c') ('a' 'd') ('b' 'c') ('b' 'd') ('c' 'd') ('a' 'b' 'c') ('a' 'b' 'd') ('a' 'c' 'd') ('b' 'c' 'd') ('a' 'b' 'c' 'd')]  range range(1 len(s)+1) 
&gt;&gt;&gt; precision=4 &gt;&gt;&gt; '%%1.%df'%precision '%1.4f'  
class MyXRange(object):     def __init__(self a1 a2=None step=1):         if step == 0:             raise ValueError("arg 3 must not be 0")         if a2 is None:             a1 a2 = 0 a1         if (a2 - a1) % step != 0:             a2 += step - (a2 - a1) % step         if cmp(a1 a2) != cmp(0 step):             a2 = a1         self.start self.stop self.step = a1 a2 step      def __iter__(self):         n = self.start         while cmp(n self.stop) == cmp(0 self.step):             yield n             n += self.step      def __repr__(self):         return "MyXRange(%d%d%d)" % (self.start self.stop self.step)      # NB: len(self) will convert this to an int and may fail     def __len__(self):         return (self.stop - self.start)//(self.step)      def __getitem__(self key):         if key &lt; 0:             key = self.__len__() + key             if key &lt; 0:                 raise IndexError("list index out of range")             return self[key]         n = self.start + self.step*key         if cmp(n self.stop) != cmp(0 self.step):             raise IndexError("list index out of range")         return n      def __reversed__(self):         return MyXRange(self.stop-self.step self.start-self.step -self.step)      def __contains__(self val):         if val == self.start: return cmp(0 self.step) == cmp(self.start self.stop)         if cmp(self.start val) != cmp(0 self.step): return False         if cmp(val self.stop) != cmp(0 self.step): return False         return (val - self.start) % self.step == 0  def testMyXRange(testsize=10):     def normexcept(fargs):         try:             r = [f(args)]         except Exception e:             r = type(e)         return r      for i in range(-testsizetestsize+1):         for j in range(-testsizetestsize+1):             print i j             for k in range(-9 10 2):                 r mr = range(ijk) MyXRange(ijk)                  if r != list(mr):                     print "iter fail: %d %d %d" % (ijk)                  if list(reversed(r)) != list(reversed(mr)):                     print "reversed fail: %d %d %d" % (ijk)                  if len(r) != len(mr):                     print "len fail: %d %d %d" % (ijk)                  z = [m for m in range(-testsize*2testsize*2+1)                       if (m in r) != (m in mr)]                 if z != []:                     print "contains fail: %d %d %d %s" % (ijk(z+["..."])[:10])                  z = [m for m in range(-testsize*2 testsize*2+1)                        if normexcept(r.__getitem__ m) != normexcept(mr.__getitem__ m)]                 if z != []:                     print "getitem fail: %d %d %d %s" % (ijk(z+["..."])[:10])  
 gtk.Window.set_keep_above  
&gt;&gt;&gt; 1 # just a number so no quotes 1 &gt;&gt;&gt; "hi" # just a string displayed with quotes 'hi' &gt;&gt;&gt; print("hi") # being *printed* to the screen so do not show quotes hi &gt;&gt;&gt; "'hello'" # string with embedded single quotes "'hello'" &gt;&gt;&gt; print("'hello'") # *printing* a string with embedded single quotes 'hello'  .strip &gt;&gt;&gt; print("""'"hello"'""") '"hello"' &gt;&gt;&gt; print("""'"hello"'""".strip('"\'')) hello  
def foo(n):   lol = [ [] ]   i = 1   for x in range(n):     if len(lol[-1]) &gt;= i:       i += 1       lol.append([])     lol[-1].append(x)   return lol  
result = [{'Letter': chr(i+97)} for i in range(26)]  result[1]['Letter'] 'b' 
__init__ 
import struct header = struct.pack('!II' packetNo totalPackets)  struct 
datetime(2009 '12a' 31)  SyntaxError TypeError month = '12' try:     month = int(month) except ValueError:     print('bad argument for month')     raise else:     if not 1&lt;= month &lt;= 12:         raise ValueError('month should be between 1 to 12')  
Trinity:~ kelvin$ python Python 2.5.2 (r252:60911 Feb 22 2008 07:57:53)  [GCC 4.0.1 (Apple Computer Inc. build 5363)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; from PIL import Image &gt;&gt;&gt; f = open("happy.jpg") &gt;&gt;&gt; im = Image.open(f) &gt;&gt;&gt; box = (00100100) &gt;&gt;&gt; kay = im.crop(box) &gt;&gt;&gt; kay &lt;PIL.Image._ImageCrop instance at 0xb1ea80&gt; &gt;&gt;&gt; bad_box = ("0""0""100""100") &gt;&gt;&gt; nkay = im.crop(bad_box) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/PIL/Image.py" line 742 in crop     return _ImageCrop(self box)   File "/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/PIL/Image.py" line 1657 in __init__     self.size = x1-x0 y1-y0 TypeError: unsupported operand type(s) for -: 'str' and 'str' &gt;&gt;&gt;   
except Exception as e: print(e)  except Exceptione: print str(e)  
os.path.abspath(__file__) 
import collections files_by_str = collections.defaultdict(list)  thestrings = [] with open('Strings.txt') as f:   for line in f:     text = line.split('=' 1)[1]     text = text.strip().replace('"' '')     thestrings.append(text)  import os  for root dirs files in os.walk('/top/dir/of/interest'):   for name in files:     path = os.path.join(root name)     with open(path) as f:       data = f.read()       for text in thestrings:         if text in data:           files_by_str[text].append(path)           break  
class MarketIndexer( djapian.Indexer ):      fields = [ 'name' 'description' 'tags_string' 'state']     tags = [('state' 'state')]  objects = model.indexer.search(q_wc).flags(djapian.resultset.xapian.QueryParser.FLAG_WILDCARD).prefetch() objects = objects.filter(state=1)  Market 
states = [gtk.STATE_NORMAL gtk.STATE_ACTIVE gtk.STATE_PRELIGHT           gtk.STATE_SELECTED gtk.STATE_INSENSITIVE]  for state in states:     button.modify_bg(state gtk.gdk.color_parse("Green"))  
self.fmt format.fmt 
charset content-type 
result = cbook.to_filehandle(fname 'w' return_opened=True)  result type(result) result[0] result[1] to_filehandle return thefile thebool fh opened = result  result 
class Member(models.Model):   name = models.CharField(max_length=256)   unit = models.ManyToManyField(Unit through='Membership')   unit_denorm = models.ForeignKey(Unit)  class Membership(models.Model):   member = models.ForeignKey(Member)   unit = models.ForeignKey(Unit)   start = models.DateField(default=date.today)   stop = models.DateField(blank=True null=True)    def save(self *args **kwargs):     if not self.stop:       self.member.unit_denorm = self.unit       self.member.save()     super(Membership self).save(*args **kwargs)  class Unit(models.Model):   name = models.CharField(max_length=256)  list_filter = ('unit_denorm') stop__isnull=True 
resize original = parser.close() ...  thumb1 = original.copy() size = (7575) thumb1.thumbnail(size Image.ANTIALIAS) ...  thumb2 = original.copy() thumbnail2 = original.resize(size2 Image.ANTIALIAS) ...  
data = [     {'name':'John' 'color':'red'}     {'name':'Bob' 'color':'green'}     {'name':'Tom' 'color':'blue'} ] colors = ['blue' 'red' 'green'] result = []  for c in colors:     result.extend([d for d in data if d['color'] == c])  print result  
++ + + + - ++ ++count  +(+count)  count  += count += 1  ++ -- ++count + + count + ++ count ++ ++ += 1 a += 1 inc ++ 
cat &gt;&gt; ~/.pydistutils.cfg &lt;&lt; EOF [build_ext] include_dirs=/usr/include/openssl EOF easy_install-2.5 --install-dir=$HOME/lib/python2.5 --script-dir=$HOME/bin m2crypto  
python setup.py build --force python setup.py install  
daemon.run()  daemon.start()  
for arg in arguments:     lst = equal if '=' in arg else plain     lst.append(arg)  for arg in arguments:     (equal if '=' in arg else plain).append(arg)  append() 
return args;  return PyCObject_FromVoidPtr((void *) ruleHandler NULL);  
leastsq func return eqn return [eqn 0.] optimized parameters:  (array([10. 10.]) 2)  fmin optimize.fmin(func Init) leastsq fmin 
auto_ptr int function blah(arg1 arg2)     allocate resource      if early failure detection         return failure_status      ... much later...      release resource // oh rats! resource didn't release     return success_status  auto_ptr auto_ptr int function blah(arg1 arg2)     allocate resource     try:          if early failure detection             return failure_status          ... much later...         return success_status      finally:         release resource // always releases no matter what  int function blah(arg1 arg2)     allocate resource     with context_manager(resource): // releases on exit from 'with'          if early failure detection             return failure_status          ... much later...         return success_status  
sys.path PYTHONPATH import os try:     user_paths = os.environ['PYTHONPATH'].split(os.pathsep) except KeyError:     user_paths = []  
KeyboardInterrupt os._exit kill -9 try/finally with atexit 
WM_INPUT WM_GESTURE WM_TOUCH 
[NSSpeechSynthesizer availableVoices] from AppKit import NSSpeechSynthesizer  NSSpeechSynthesizer.availableVoices()  (     "com.apple.speech.synthesis.voice.Agnes"     "com.apple.speech.synthesis.voice.Albert"     "com.apple.speech.synthesis.voice.Alex"     "com.apple.speech.synthesis.voice.BadNews"     "com.apple.speech.synthesis.voice.Bahh"     "com.apple.speech.synthesis.voice.Bells"     "com.apple.speech.synthesis.voice.Boing"     "com.apple.speech.synthesis.voice.Bruce"     "com.apple.speech.synthesis.voice.Bubbles"     "com.apple.speech.synthesis.voice.Cellos"     "com.apple.speech.synthesis.voice.Deranged"     "com.apple.speech.synthesis.voice.Fred"     "com.apple.speech.synthesis.voice.GoodNews"     "com.apple.speech.synthesis.voice.Hysterical"     "com.apple.speech.synthesis.voice.Junior"     "com.apple.speech.synthesis.voice.Kathy"     "com.apple.speech.synthesis.voice.Organ"     "com.apple.speech.synthesis.voice.Princess"     "com.apple.speech.synthesis.voice.Ralph"     "com.apple.speech.synthesis.voice.Trinoids"     "com.apple.speech.synthesis.voice.Vicki"     "com.apple.speech.synthesis.voice.Victoria"     "com.apple.speech.synthesis.voice.Whisper"     "com.apple.speech.synthesis.voice.Zarvox" )  
urla = re.search(pattern2 match) if urla is not None:     print filename urla.group(1)  
else def my_func(choice_pattern input):     # Search in input for some things to choose from.     choice_iterator = choice_pattern.finditer(input re.M)     if not choice_iterator:         print "No choices. Exiting..."         sys.exit()      # Show choices to the user. For each one ask user for a yes/no response. If     # choice accepted return a result. Otherwise show user next choice. If no     # choices accepted by user quit.     for choice in choice_iterator:         print choice         # get_yes_no_answer() returns True or False depending on user response.         if get_yes_no_answer():             return choice     # Loop exited without matches.     print "No matches. Exiting..."     sys.exit()  def my_func(choice_pattern input):     choice_iterator = choice_pattern.finditer(input re.M)     if choice_iterator:         for choice in choice_iterator:             print choice             if get_yes_no_answer():                 return choice     # If there is no choices or no matches you end up here:     print "No matches. Exiting..."     sys.exit()  
repr() data action data action 
post def post(self):     task = Task()                # not ToDo()     task.description = self.request.get('description')     task.put()     self.redirect('/')  put webapp.RequestHandler 
r'\D(\d{9}[\dXx])($|\D)'  | [] [] | [] | | (?: ) r'\D(\d{9}[\dXx])(?:$|\D)'  
__getitem__ 
def greet(who):     print "Hello %s" % who  greet_command = lambda: greet("World") # pass the callable around and invoke it later greet_command()  class MoveFileCommand(object):     def __init__(self src dest):         self.src = src         self.dest = dest         os.rename(self.src self.dest)     def undo(self):         os.rename(self.dest self.src)  undo_stack = [] undo_stack.append(MoveFileCommand('foo.txt' 'bar.txt')) undo_stack.append(MoveFileCommand('bar.txt' 'baz.txt')) # foo.txt is now renamed to baz.txt undo_stack.pop().undo() # Now it's bar.txt undo_stack.pop().undo() # and back to foo.txt  
User django.contrib.auth.views django.contrib.auth.views.login (r'^/login/$' 'django.contrib.auth.views.login' {'template_name': 'myapp/login.html'})  login template_name django.contrib.auth login logout password_change 
import math def format_percentage(x precision=3):     return ("%%.%df%%%%" % (precision - min(0math.log10(100-x)))) % x  
itertools.groupby defaultdict import itertools import operator  def lot_to_dict(lot):   key = operator.itemgetter(0)   # if lot's not sorted you also need...:   # lot = sorted(lot key=key)   # NOT in-place lot.sort to avoid changing it!   grob = itertools.groupby(lot key)   return dict((k [v[1] for v in itr]) for k itr in grob)  def merge_dols(dol1 dol2):   keys = set(dol1).union(dol2)   no = []   return dict((k dol1.get(k no) + dol2.get(k no)) for k in keys)  [] no def merge_dols(dol1 dol2):   result = dict(dol1 **dol2)   result.update((k dol1[k] + dol2[k])                 for k in set(dol1).intersection(dol2))   return result  
class Team:   def __init__(self):     self.name = None     self.logo = None     self.members = 0  
__import__ __subclasses__ __bases__ __mro__ 
def method(**kwargs):   print kwargs  keywords = {'keyword1': 'foo' 'keyword2': 'bar'} method(keyword1='foo' keyword2='bar') method(**keywords)  {'keyword2': 'bar' 'keyword1': 'foo'} {'keyword2': 'bar' 'keyword1': 'foo'}  
processHeader(f.readline()) for line in f:     processBody(line)  
from ZSI.ServiceProxy import ServiceProxy service = ServiceProxy('test.wsdl') service.NewOperation(NewOperationRequest='test')  
def reverse(viewname urlconf=None args=None kwargs=None                        prefix=None current_app=None):  **kwargs kwargs={"year":2009"month":9} reverse("name"**kwargs)  reverse("name" year=2009 month=9)  reverse("name"kwargs={"year":2009"month":9})  **kwargs **kwargs def reverse(viewname urlconf=None prefix=None                        current_app=None *args **kwargs):  
self class Reciever:     def themethod(self):         frame = sys._getframe(1)         arguments = frame.f_code.co_argcount         if arguments == 0:             print "Not called from a method"             return         caller_calls_self = frame.f_code.co_varnames[0]         thecaller = frame.f_locals[caller_calls_self]         print "Called from a" thecaller.__class__.__name__ "instance"  
def __init__(self *args **kwargs):     super(self.__class__ self).__init__(*args **kwargs)     CHOICES = []     for notice in NoticeType.objects.all():         CHOICES.append( (notice.label notice.display) )     self.fields['notifications'].choices = CHOICES  
os.pathsep 
SCRIPT_NAME language= environ['SCRIPT_NAME'][1:].split('/' 1)[0] if language not in ('english' 'italiano'):     language= 'english'  
%inline %{     double * GetReference(char* name Publisher* publisher)     {          double* ptr = new double;          publisher-&gt;GetFieldReference(name ptr);          return ptr;     } %}  value = ptrDouble.frompointer(GetFieldReference("value" publisher)  
MacPorts py- py25- sudo port install py26-mysql  
svnversion svnversion import subprocess  def svnversion():     p = subprocess.Popen("svnversion" stdout=subprocess.PIPE stderr=subprocess.PIPE)     (stdout stderr) = p.communicate()     return stdout  
class MYREALM_securepage(webapp.RequestHandler):   def get(self):       if not 'Authorization' in self.request.headers:           self.response.headers['WWW-Authenticate'] = 'Basic realm="MYREALM"'           self.response.set_status(401)           self.response.out.write("Authorization required")       else:           auth = self.request.headers['Authorization']           (username password) = base64.b64decode(auth.split(' ')[1]).split(':')           # Check the username and password and proceed ...  
if 'nose' in sys.modules:     print "Nose is running or at least has been imported!"     #or whatever you need to do if nose is running  
__copy__() __deepcopy__() __deepcopy__() deepcopy() __copy__ __deepcopy__ __copy__ def __copy__(self):   newone = type(self)()   newone.__dict__.update(self.__dict__)   return newone  __deepcopy__ memo self.foo = deepcopy(self.foo memo) self.foo __dict__ 
if len(x) == len(set(x)):     print "all elements are unique" else:     print "elements are not unique"  
class xyz:     def __init__ (self a='1' b='2'):         print ab  xyz(b=3a=4) xyz(a=5b=6)  &gt;&gt;4 3 &gt;&gt;5 6  
part0 _ part2 = str.partition(' ')  part0 part2 = str.partition(' ')[::2]  from operator import itemgetter part0 part2 = itemgetter(0 2)(str.partition(' '))  
date_format users SELECT to_char((SELECT date_format FROM users WHERE users.id=123) column) FROM table;  
is == &gt;&gt;&gt; a = 'pub' &gt;&gt;&gt; b = ''.join(['p' 'u' 'b']) &gt;&gt;&gt; a == b True &gt;&gt;&gt; a is b False  is id(a) == id(b) 
post-checkout man githooks 
r'{"FileExists": true "Version": "4.3.2.1" "Path": "\\\\host\\dir\\file.exe"}'  r \ &gt;&gt;&gt; import json &gt;&gt;&gt; d = json.loads(s) &gt;&gt;&gt; d.keys() [u'FileExists' u'Path' u'Version'] &gt;&gt;&gt; d.values() [True u'\\\\host\\dir\\file.exe' u'4.3.2.1']  &gt;&gt;&gt; repr(d[u'Path']) "u'\\\\\\\\host\\\\dir\\\\file.exe'" &gt;&gt;&gt; str(d[u'Path']) '\\\\host\\dir\\file.exe' &gt;&gt;&gt; print d[u'Path'] \\host\dir\file.exe  repr(obj) obj &gt;&gt;&gt; class A: ...   __str__ = lambda self: "str" ...   __repr__  = lambda self: "repr" ...  &gt;&gt;&gt; A() repr &gt;&gt;&gt; print A() str  s '\d' '\f' print s '\\d' 
class myClass extends anotherClass { }  
import os os.environ["MY_DATA"] = "my_export"  
&lt;/sc'+'ript&gt;' &lt;'+'/sc'+'ript&gt;' + &lt; &amp;lt; &gt; &amp;gt; 
export set os.system 
r'^(?P&lt;status&gt;in|out)/$' \w+ '^(?P&lt;status&gt;\w+(in|out))/$' helloin good_byeout | 
ScriptScope.SetVariable("injected_method" myMethod);  ScriptRuntime.Globals.SetVariable("injected_method" myMethod);  import injected_method  
__init__() ValueError 
import multiprocessing  def query_with_timeout(dbc timeout query *a **k):   conn1 conn2 = multiprocessing.Pipe(False)   subproc = multiprocessing.Process(target=do_query                                     args=(dbc query conn2)+a                                      kwargs=k)   subproc.start()   subproc.join(timeout)   if conn1.poll():     return conn1.recv()   subproc.terminate()   raise TimeoutError("Query %r ran for &gt;%r" % (query timeout))  def do_query(dbc query conn *a **k):   cu = dbc.cursor()   cu.execute(query *a **k)   return cu.fetchall()  
self.children = {}  self.children = weakref.WeakValueDictionary()  children weakref __del__ gc 
Image.open() 
mod_python mod_python mod_php mod_python mod_wsgi mod_wsgi mywebapp.py def application(environ start_response):     start_response('200 OK' [('content-type' 'text/plain')])     return ['Hello World']  WSGIScriptAlias /myapp /usr/local/www/wsgi-scripts/mywebapp.py &lt;Directory /usr/local/www/wsgi-scripts&gt;   Order allowdeny   Allow from all &lt;/Directory&gt;  http://localhost/myapp http://localhost/myapp/stuff/here 
timeit += reduce O(N**2) write cStringIO.StringIO O(N) str str .decode('utf-8') .encode str array.array append insert O(N**2) array.array('u') append insert join re cStringIO 
logging.exception except: import logging LOG_FILENAME = '/tmp/logging_example.out' logging.basicConfig(filename=LOG_FILENAME level=logging.DEBUG)  logging.debug('This message should go to the log file')  try:     run_my_stuff() except:     logging.exception('Got exception on main handler')     raise  /tmp/logging_example.out DEBUG:root:This message should go to the log file ERROR:root:Got exception on main handler Traceback (most recent call last):   File "/tmp/teste.py" line 9 in &lt;module&gt;     run_my_stuff() NameError: name 'run_my_stuff' is not defined  
xml.sax.parse read parse read import xml.sax import xml.sax.handler  class PseudoStream(object):     def read_iterator(self):         yield '&lt;foo&gt;'         yield '&lt;bar&gt;'         for line in open('test.xml'):             yield line         yield '&lt;/bar&gt;'         yield '&lt;/foo&gt;'      def __init__(self):         self.ri = self.read_iterator()      def read(self *foo):         try:             return self.ri.next()         except StopIteration:             return ''  class SAXHandler(xml.sax.handler.ContentHandler):     def startElement(self name attrs):         print name attrs  d = xml.sax.parse(PseudoStream() SAXHandler())  
fromkeys __iter__ dict def __iter__(self):     return iter(self.d)  
result = query.get() if result is None:   #do the following  if result is not None:   #do the following  
open() seek() tell() f.readline().decode('utf-8') f.read() readline() 
for thing in things:     for otherthing in things:         add_edge(thing otherthing)  permutations def pairs(l):     for i in range(len(l)-1):         for j in range(i+1 len(l)):             yield l[i] l[j]  for conference in dom.getElementsByTagName('conference'):     var conf_name= node.getAttribute('name')     for paper in conference.getElementsByTagName('paper'):         authors= paper.getElementsByTagName('author')         auth_names= [author.firstChild.data.split('(')[0] for author in authors]          # Note author's conference attendance         #         for auth_name in auth_names:             G.add_edge(auth_name conf_name)          # Note combinations of authors working on same paper         #         for auth_name other_name in pairs(auth_names):             G.add_edge(auth_name otherauth_name)  
: pass 
GET POST 
 BarManager(models.Manager):       use_for_related_fields = True  class BarManager(models.Manager):     use_for_related_fields = True      def bar(self foo=None):         if foo == None:             qs = Foo.objects.all()             for field_name field_val in self.core_filters.items():                 field_name = field_name.split('__')[1]                 qs = qs.filter(**{ field_name: field_val })             foo = qs.get()         # do k00l stuff with foo  
b1 = lambda x: x[4]-x[0] if x[4]&lt;1.2*x[0] else 1.4*x[0]-x[4] b2 = lambda x: x[5]-x[1] if x[5]&lt;1.2*x[1] else 1.4*x[1]-x[5] b3 = lambda x: x[2]-x[3]  a&lt;=e&lt;=1.4*a 1.2*a a 1.4*a e&lt;1.2*a e-a e&lt;a e==a e&gt;a e&gt;1.2*a 1.4*a-e e&gt;1.4*a e==1.4*a e&lt;1.4*a e==1.2*a ieqcons b1 = lambda x: (1.4*x[0]-x[4] x[4]-x[0])[x[4]&lt;1.2*x[0]] 
sys.path.append(".." + os.path.sep + "images") open("ok.png" "rb") 
libmysqlclient-dev python setup.py build python setup.py install 
shutil.copytree ignore 
s="""dcenter: code=d1 loc=San Jose x=100 y=100 ctype=ct1 dcenter: code=d2 loc=San Ramon x=300 y=200 ctype=ct2 storage: code=s1 locFrom=d1 x=50 y=50 rtype=rt1 storage: code=s2 locFrom=d1 x=-50y=100 rtype=rt1"""  print '&lt;?xml version="1.0"?&gt;' print "&lt;dcenters&gt;" for line in s.splitlines():     type fields = line.split(":")     params = fields.split("")     code = params[0].split("=")[1].strip()     print '&lt;%s code="%s"&gt;' % (type code)     for p in params[1:]:         ptype pvalue = p.strip().split("=")         print '&lt;%s&gt; %s &lt;/%s&gt;' % (ptype pvalue ptype)     print '&lt;/%s&gt;' % type print "&lt;/dcenters&gt;"  
request = urllib2.Request(file_remote_path) opener = urllib2.build_opener()  retry = 3 # 3 tries while retry :     try :         datastream = opener.open(request)     except urllib2.URLError ue:         if ue.reason.find('10048') &gt; -1 :             if retry :                 retry -= 1             else :                 raise urllib2.URLError("Address already in use / retries exhausted")         else :             retry = 0     if datastream :         retry = 0  outfileobj = open(temp_file_path 'wb') try:     while True:         chunk = datastream.read(CHUNK_SIZE)         if chunk == '':             break         else:             outfileobj.write(chunk) finally:     outfileobj = outfileobj.close()     datastream.close()  
first() p = Article.objects.order_by('title' 'pub_date').first()  
create get_or_create get_or_create source src_object_id src_content_type scr_object_id u.id src_content_type u.content_type try/except create 
import inspect from optparse import OptionParser import sys  def do_stuff(opt0 opt1="a" opt2="b" opt3="c"):     print opt0 opt1 opt2 opt3  if __name__ == "__main__":     parser = OptionParser()     args varargs varkw defaults = inspect.getargspec(do_stuff)     if varargs or varkw:       sys.exit("Sorry can't make opts from a function with *a and/or **k!")     lend = len(defaults)     nodef = args[:-lend]     for a in nodef:       parser.add_option("--%s" % a)     for a d in zip(args[-lend:] defaults):       parser.add_option("--%s" % a default=d)      options args = parser.parse_args()     d = vars(options)     for n v in zip(nodef args):       d[n] = v      do_stuff(**d)  
WSGIApplication (?i) urlpatterns 
__repr__() &gt;&gt;&gt; OPTIONS=('ON' 'OFF' ) &gt;&gt;&gt; "OPTIONS="+repr(OPTIONS) "OPTIONS=('ON' 'OFF')"  
class DataHolder(object):     def set(self value): self.value = value; return value  if elif dh = DataHolder() if dh.set(something()):   # do something with dh.value elif dh.set(somethingelse()):   # ...  DataHolder 
'101101' &lt; '10201' '1' &lt; '2' list.append(reversed) list.append(int(reversed)) 
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(self.br._ua_handlers["_cookies"].cookiejar)) opener.open(imgurl)  
Queue.Queue pool pool.get() pool.put Queue.Queue 
Seat roomId room roomIdId 
setdefault(key[ default]) public static V SetDefault&lt;KV&gt;(this IDictionary&lt;KV&gt; dict K key V @default) {     V value;     if (!dict.TryGetValue(key out value))     {         dict.Add(key @default);         return @default;     }     else     {         return value;     } }  string key; Dictionary&lt;string int&gt; dict;  dict[key] = dict.SetDefault(key 0) + 1;  
from pygments import highlight from pygments.lexers import PythonLexer from pygments.formatters import HtmlFormatter  highlighted = highlight('# Some Python code' PythonLexer() HtmlFormatter())  
def swap(ary idx1 idx2):     ary[idx1] ary[idx2] = [ary[i] for i in (idx2 idx1)]  def permutations(ordered movements):     size = len(ordered)     for i in range(1 len(ordered)):         for j in range(movements[i]):             swap(ordered i-j i-j-1)     return ordered  numberofcases = input() for i in range(numberofcases):     sizeofcase = input()     movements = [int(s) for s in raw_input().split()]     ordered = [str(i) for i in range(1 sizeofcase+1)]     ordered = permutations(ordered movements)     output = " ".join(ordered)     print output  
def multiplyItemsByFour(argsList):     output = type(argsList[0])()     for arg in argsList:         output += arg * 4     return output  [1 2 3 4] [1.0 2.0 3.0 4.0] "abcdef" 
(?i) r'...' urlpatterns = patterns('' (r'^(?i)admin/(.*)' admin.site.root) (r'^(?i)static/(?P&lt;path&gt;.*)$' 'django.views.static.serve'     {'document_root': settings.STATIC_DOC_ROOT 'show_indexes': True}) (r'^(?i)login/$' 'django.contrib.auth.views.login') (r'^(?i)logout/$' do_logout) )  
w.tag_raise("sel")  
operator[] 
def mixed_order( a ):     return ( a.attribute1 -a.attribute2 )  someList.sort( key=mixed_order )  .sort() def key1( a ): return a.attribute1 def key2( a ): return a.attribute2  someList.sort( key=key2 reverse=True ) someList.sort( key=key1 )  __eq__ __lt__ 
&gt;&gt;&gt; Task.objects.exclude(prerequisites__status__in=['A''P''F'])  &gt;&gt;&gt; a = Task.objects.create(status='C') &gt;&gt;&gt; b = Task.objects.create(status='A') &gt;&gt;&gt; b.prerequisites.add(a) &gt;&gt;&gt; c = Task.objects.create(status='P') &gt;&gt;&gt; c.prerequisites.add(b) &gt;&gt;&gt; prerequisites_complete = Task.objects.exclude(prerequisites__status__in=['A''P''F']) &gt;&gt;&gt; set([t.id for t in prerequisites_complete]) == set([a.id b.id]) True  
None print numbers print clean numbers clean = list(numbers) clean.insert(3 'four')  numbers clean 
islt 
try-finally try:     open socket     do stuff with socket finally:     close socket  with from __future__ import with_statement with open_the_socket() as s:     use s  __exit__() __exit__() 
# from urllib2 import urlopen # Python 2 from urllib.request import urlopen # Python 3  response = urlopen(url) CHUNK = 16 * 1024 with open(file 'wb') as f:     while True:         chunk = response.read(CHUNK)         if not chunk:             break         f.write(chunk)  
pen 
class Lookahead:     def __init__(self iter):         self.iter = iter         self.buffer = []      def __iter__(self):         return self      def next(self):         if self.buffer:             return self.buffer.pop(0)         else:             return self.iter.next()      def lookahead(self n):         """Return an item n entries ahead in the iteration."""         while n &gt;= len(self.buffer):             try:                 self.buffer.append(self.iter.next())             except StopIteration:                 return None         return self.buffer[n]  
request.FILES['file']  request.POST['file']  
currentPage = paginate.Page(products page items_per_page=50)  currentPage.kwargs['q'] = q  return dict(currentPage=currentPage      title=u'Products List' item=u'product' items=u'products'     data=currentPage.items      grid=product_grid     page=u'Search %s results' % q     q=q     hits=len(products))  
LOGIN_URL LOGIN_REDIRECT_URL LOGIN_URL = 'login'  # name of url pattern  LOGIN_URL = 'django.contrib.auth.views.login' # path to view function  reverse_lazy LOGIN_URL = reverse_lazy('login')  reverse_lazy from django.conf import settings  urlpatterns=(''     ...     url('^%s$' %settings.LOGIN_URL[1:] 'django.contrib.auth.views.login'          name="login")     ... )  LOGIN_URL &gt;&gt;&gt;from django.core.urlresolvers import reverse &gt;&gt;&gt;reverse('login') '/accounts/login/'  
itertools.groupby itertools import itertools import operator  def most_common(L):   # get an iterable of (item iterable) pairs   SL = sorted((x i) for i x in enumerate(L))   # print 'SL:' SL   groups = itertools.groupby(SL key=operator.itemgetter(0))   # auxiliary function to get "quality" for an item   def _auxfun(g):     item iterable = g     count = 0     min_index = len(L)     for _ where in iterable:       count += 1       min_index = min(min_index where)     # print 'item %r count %r minind %r' % (item count min_index)     return count -min_index   # pick the highest-count/earliest item   return max(groups key=_auxfun)[0]  print print most_common(['goose' 'duck' 'duck' 'goose'])  SL: [('duck' 1) ('duck' 2) ('goose' 0) ('goose' 3)] item 'duck' count 2 minind 1 item 'goose' count 2 minind 0 goose  SL groupby operator.itemgetter max (item iterable) (item original index) SL max def most_common(L):   groups = itertools.groupby(sorted(L))   def _auxfun((item iterable)):     return len(list(iterable)) -L.index(item)   return max(groups key=_auxfun)[0]  L.index from itertools import groupby as g def most_common_oneliner(L):   return max(g(sorted(L)) key=lambda(x v):(len(list(v))-L.index(x)))[0]  
file /opt/local/lib/libjpeg.dylib +universal 
def main():     blah blah  if __name__ == "__main__":     main()  __name__ __name__ __main__ 
numpy nympy 
counter = dict(     (a[0] (a[1] a[2]))     for a in listX )  for key v1 v2 in listY:     if key not in counter:         counter[key] = (0 0)     counter[key][0] += v1     counter[key][1] += v2  result = [(key value[0] value[1]) for key value in counter.items()]  
int[] A B C D E  A D E B  
def add_docs_for(other_func):       def dec(func):           func.__doc__ = other_func.__doc__ + "\n\n" + func.__doc__         return func     return dec  def foo():     """documentation for foo"""     pass  @add_docs_for(foo) def bar():     """additional notes for bar"""     pass  help(bar) # --&gt; "documentation for foo // additional notes for bar"  
$ easy_install -H None -f http://server/vdir TheEggToInstall  $ easy_install -H None -f /path/to/directory TheEggToInstall  -H None -f 
import os from mercurial import commandsui os.mkdir("/repos/foo") commands.init(ui.ui()"/repos/foo")  
temp_fd os.close(temp_fd) temp_fd fobj = os.fdopen(temp_fd "w+") numpy.memmap(fobj ...  
class POC(Entity):   # ...   #declare the one-to-many relationships   csas = OneToMany('SSP')   actions = OneToMany('SSP')   # ...  class SSP(Entity):   # ...   #Tell Elixir how to disambiguate POC/SSP relationships by specifying   #the inverse explicitly.   csa = ManyToOne('POC' colname = 'idPOCCSA' inverse='csas')   action = ManyToOne('POC' colname = 'idPOCAction' inverse='actions')   # ...      
import subprocess bufsize =1024 initial_data = get_initial_data_from_db() p = subprocess.Popen("application -parameter1" shell=True bufsize=bufsize           stdin=subprocess.PIPE   close_fds=True)  p.stdin.write(initial_data) print p.communicate()  import subprocess  initial_data = """ import sys print sys.path """  for test in [123] :     p = subprocess.Popen("C:/python26/python" shell=True bufsize=512           stdin=subprocess.PIPE  stdout=subprocess.PIPE stderr=subprocess.PIPE close_fds=True)      p.stdin.write(initial_data)     print p.communicate()  ("['' 'C:\\\\dev\\\\ide\\\\eclipse\\\\plugins\\\\org.python.pydev_1.5.0.1251989166\\\\PySrc\\\\pydev_sitecustomize' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar' 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar' 'C:\\\\usr\\\\local\\\\machine' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar' 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar' 'C:\\\\usr\\\\local\\\\machine' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar' 'C:\\\\jython\\\\jython2.5.0\\\\Lib' 'C:\\\\jython\\\\jython2.5.0\\\\Lib\\\\site-packages' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\rt.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jsse.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jce.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\charsets.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\dnsns.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\localedata.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunjce_provider.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunpkcs11.jar' 'C:\\\\WINDOWS\\\\system32\\\\python26.zip' 'C:\\\\python26\\\\DLLs' 'C:\\\\python26\\\\lib' 'C:\\\\python26\\\\lib\\\\plat-win' 'C:\\\\python26\\\\lib\\\\lib-tk' 'C:\\\\python26']\r\n" "'import site' failed; use -v for traceback\r\n") ("['' 'C:\\\\dev\\\\ide\\\\eclipse\\\\plugins\\\\org.python.pydev_1.5.0.1251989166\\\\PySrc\\\\pydev_sitecustomize' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar' 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar' 'C:\\\\usr\\\\local\\\\machine' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar' 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar' 'C:\\\\usr\\\\local\\\\machine' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar' 'C:\\\\jython\\\\jython2.5.0\\\\Lib' 'C:\\\\jython\\\\jython2.5.0\\\\Lib\\\\site-packages' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\rt.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jsse.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jce.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\charsets.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\dnsns.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\localedata.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunjce_provider.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunpkcs11.jar' 'C:\\\\WINDOWS\\\\system32\\\\python26.zip' 'C:\\\\python26\\\\DLLs' 'C:\\\\python26\\\\lib' 'C:\\\\python26\\\\lib\\\\plat-win' 'C:\\\\python26\\\\lib\\\\lib-tk' 'C:\\\\python26']\r\n" "'import site' failed; use -v for traceback\r\n") ("['' 'C:\\\\dev\\\\ide\\\\eclipse\\\\plugins\\\\org.python.pydev_1.5.0.1251989166\\\\PySrc\\\\pydev_sitecustomize' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar' 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar' 'C:\\\\usr\\\\local\\\\machine' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar' 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar' 'C:\\\\usr\\\\local\\\\machine' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin' 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar' 'C:\\\\jython\\\\jython2.5.0\\\\Lib' 'C:\\\\jython\\\\jython2.5.0\\\\Lib\\\\site-packages' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\rt.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jsse.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jce.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\charsets.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\dnsns.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\localedata.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunjce_provider.jar' 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunpkcs11.jar' 'C:\\\\WINDOWS\\\\system32\\\\python26.zip' 'C:\\\\python26\\\\DLLs' 'C:\\\\python26\\\\lib' 'C:\\\\python26\\\\lib\\\\plat-win' 'C:\\\\python26\\\\lib\\\\lib-tk' 'C:\\\\python26']\r\n" "'import site' failed; use -v for traceback\r\n")  
def f():     s = ('123'          '456')     return s  
struct input_binary_string = "110010111111111111101010" ## must be a multiple of 8 out = [] while len(input_binary_string) &gt;= 8:     byte = input_binary_string[:8]     input_binary_string = input_binary_string[8:]     b = int(byte2)     c = chr(b)     out.append(c) ## Better not have a bits left over assert len(input_binary_string) == 0 outString = "".join(out)  print [ ord(c) for c in out ]  
GuiMaker TextEditor TextEditor TextEditor GuiMaker.start TextEditor.start 
class CakeFactory:     @staticmethod     def create(name):         if name == 'banana':             return BananaCake()         # call the constructor         elif name == 'chocolate':             return ChocolateCake()      # call the constructor         else:             return None  isinstance() class ChocolateCake(object):     pass  
logging filemode 'w' 'a' 
&gt;&gt;&gt; import datetime # 05/10/09 18:00 &gt;&gt;&gt; d = datetime.datetime(2009 10 5 18 00) &gt;&gt;&gt; print d.year d.month d.day d.hour d.second 2009 10 5 18 0 &gt;&gt;&gt; print d.isoformat(' ') 2009-10-05 18:00:00 &gt;&gt;&gt;   
http://wow.zet/forum/index.php?showtopic=1197&amp;pid=30419&amp;st=0&amp;#entry30419  
lineno = s.count("\n"0m.start())+1  
close urllib.urlopen urllib urllib.close x = urllib.urlopen(u) import contextlib  with contextlib.closing(urllib.urlopen(u)) as x:    ...use x at will here...  with closing 
sys.modules mod = sys.modules[__module__]  
str string Tries += 1  the_number = random.randrange(12001) tries = 1  guessed_number = int(input("Take a guess at the magic number!: "))  while True:     if guessed_number &lt; the_number:         print("Your guess is a bit too low.")      if guessed_number &gt; the_number:         print("Your guess is a bit too high!")      if guessed_number == the_number:         break     else:         guessed_number = int(input("Take another guess at the magic number!: "))         tries += 1  print("You've guessed the number and it only took you %d tries!" % tries)  
for for url in urls:   try:     ...the body you have now...   except Exception e:     print&gt;&gt;sys.stderr "Url %r not processed: error (%s) % (url e)  logging.error print&gt;&gt; logging 
[[1 if j &lt;= 1 else 2 for i in range(3)] for j in range(3)]  x if C else y [[1 if j &lt;= 1 else 2]*3 for j in range(3)]  
thefunctions = [ getStuff getData ] for f in thefunctions:     print f('shazam')  def 
fileinput for line in fileinput.input(["file.dat"]):   if not fileinput.isfirstline():     data = proces_line(line);     output(data)  
Foobar docstring #!/usr/bin/env python obj.__doc__ __author__ = &quot;Rob Knight Gavin Huttley and Peter Maxwell&quot; __copyright__ = &quot;Copyright 2007 The Cogent Project&quot; __credits__ = [&quot;Rob Knight&quot; &quot;Peter Maxwell&quot; &quot;Gavin Huttley&quot;                     &quot;Matthew Wakefield&quot;] __license__ = &quot;GPL&quot; __version__ = &quot;1.0.1&quot; __maintainer__ = &quot;Rob Knight&quot; __email__ = &quot;rob@spot.colorado.edu&quot; __status__ = &quot;Production&quot;  __maintainer__ __credits__ __author__ __credits__ __author__ __authors__ __contact__ __copyright__ __license__ __deprecated__ __date__ __version__ 
 au BufEnterBufRead *.py setlocal smartindent cinwords=ifelifelseforwhiletryexceptfinallydefclass  set setlocal filetype indent on :help filetype-indent-on 
foo foo/__init__.py foo foo/bar/__init__.py foo/__init__.py foo.bar .pth __path__ __init__.py import foo foo foo/__init__.py -v import pdb; pdb.set_trace()  imp 
/view development.ini level = DEBUG [logger_routes] /view 
from pprint import pprint pprint(the_list)  
def flatten(l):   if isinstance(l list):      return sum(map(flattenl)[])   else:      return [l]  
scipy.sign x scipy.sign(x) 
l = ['exiv2-devel' 'mingw-libs' 'tcltk-demos' 'fcgi' 'netcdf'      'pdcurses-devel'     'msvcrt' 'gdal-grass' 'iconv' 'qgis-devel'      'qgis1.1' 'php_mapscript']  if len(l) % 2 != 0:     l.append(" ")  split = len(l)/2 l1 = l[0:split] l2 = l[split:] for key value in zip(l1l2):     print '%-20s %s' % (key value)         #python &lt;2.6     print "{0:&lt;20s} {1}".format(key value) #python 2.6+  
&gt;&gt;&gt; import random &gt;&gt;&gt; thelist = ['a' 'b' 'c' 'd'] &gt;&gt;&gt; random.shuffle(thelist) &gt;&gt;&gt; thelist ['d' 'a' 'c' 'b']  
.get() l = dict.get('link') t = dict.get('title') d = dict.get('description') k = dict.get('keyword')  t None dict.get('title' '') KeyError 
s = u"\u00fc" print str(s) UnicodeEncodeError: 'ascii' codec can't encode character u'\xfc' in position 0: ordinal not in range(128)  str() s = u"%s..." repr() 
QAction.setData self.sender() action.data() 
br._factory.encoding = enc br._factory._forms_factory.encoding = enc br._factory._links_factory._encoding = enc  
Principal = start - end  pay_a = (interest / 12) / (1 - (1+interest/12) ^ (-months))) * Principal  pay_b = interest / 12 * end  payment = (interest / 12) * (1 / (1 - (1+interest/12) ^ (-months))) * Principal + end)  Start: 100000 End:  50000 Months: 70 Interest: 8%  pay_a = 896.20 pay_b = 333.33 Payment = 1229.54  
msbuild.exe msbuild.exe C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\msbuild.exe C:\WINDOWS\Microsoft.NET\Framework\v3.5\msbuild.exe msbuild.exe /build devenv.exe 
django.utils.functional.memoize 
import urllib data = urllib.urlencode({"mode_login":"Agree""redirect":"http://stackoverflow.com"}) result = urllib.urlopen("http://192.168.100.1:5280/"data).read() print result  
__ class foo(object):     def __init__(self bar):         self.__bar = bar      @property     def bar(self):         return self.__bar  f = foo('bar') f.bar         # =&gt; bar f.bar = 'baz' # AttributeError; would have to use f._foo__bar  
struct.pack('&gt;I' some_integer) + struct.pack('b'*len(long_array) *long_array)  
$.getJSON("/abc/?x="+3     function(data){       if (data["HTTPRESPONSE"] == 1)       {           alert("success")       }     });  #you might need to easy_install this import json   def your_view(request):     # You can dump a lot of structured data into a json object such as      # lists and touples     json_data = json.dumps({"HTTPRESPONSE":1})     # json data is just a JSON string now.      return HttpResponse(json_data mimetype="application/json")  def updates_after_t(request id):      response = HttpResponse()      response['Content-Type'] = "text/javascript"      response.write(serializers.serialize("json"                     TSearch.objects.filter(pk__gt=id)))      return response             
&gt;&gt;&gt; import sys &gt;&gt;&gt; class Quitter(object): ...     def __repr__(self): ...         sys.exit() ...  &gt;&gt;&gt; exit = Quitter()  &gt;&gt;&gt; exit  ipython sys.exit In [1]: type(exit).__repr__ = lambda s: setattr(s.shell 'exit_now' True) or ''  In [2]: exit  
&gt;&gt;&gt; re.findall(' {{(\w+)\|(\w+)(?:\|(\w+))?}} ' s) [('bla' '123' '456') ('bli' '789' '123') ('blu' '789' '')]  int 
python -m py_compile script_to_check.py  script_to_check.pyc 
thechan = Score.objects.filter(content=44)[0:1] thechan[0].custom_score = 2  thechan = Score.objects.filter(content=44)[0:1] thechan[0].save() # saves an unmodified object back to the DB no effective change  thechan = Score.objects.filter(content=44)[0] thechan.custom_score = 2 thechan.save()  
import itertools  with open(fn) as f:   for line line2 in itertools.izip_longest(f f fillvalue=''):     print line line2  izip_longest izip f def natatime(itr fillvalue=None n=2):   return itertools.izip_longest(*(iter(itr))*n fillvalue=fillvalue)  itertools def natatime_no_itertools(itr fillvalue=None n=2):   x = iter(itr)   for item in x:     yield (item) + tuple(next(x fillvalue) for _ in xrange(n-1))  def natatime_25(itr fillvalue=None n=2):   x = itertools.chain(iter(itr) (fillvalue) * (n-1))   return itertools.izip(*(x)*n)  next izip_longest 
obj = type('obj' (object) {'propertyName' : 'propertyValue'})  type 
__dict__ object __dict__ dict object pympler &gt;&gt;&gt; from pympler import asizeof &gt;&gt;&gt; asizeof.asizeof({}) 144 &gt;&gt;&gt; asizeof.asizeof(23) 16  int &gt;&gt;&gt; class dint(int): pass ...  &gt;&gt;&gt; asizeof.asizeof(dint(23)) 184  __dict__ dint int foobar &gt;&gt;&gt; class fint(int): ...   __slots__ = 'foobar' ...   def __init__(self x): self.foobar=x+100 ...  &gt;&gt;&gt; asizeof.asizeof(fint(23)) 80  int int self self.foobar dint __slots__ class type __dict__ 
author_A = [['book_x'110]['book_y'220]['book_z'330]] author_B = [['book_s'510]['book_t'220]['book_z'330]]  def present(A B):   Aset = set(tuple(x) for x in A)   Bset = set(tuple(x) for x in B)   both = Aset &amp; Bset   justA = Aset - both   justB = Bset - both   totals = [0 0]   print "%-12s %-12s %12s" % ('author' 'quantity' 'Amount($)')   for subset name in zip((both justA justB) ('A*B' 'A' 'B')):     tq = sum(x[1] for x in subset)     ta = sum(x[2] for x in subset)     totals[0] += tq     totals[1] += ta     print ' %-11s  %-11d    %-11d' % (name tq ta)   print ' %-11s  %-11d    %-11d' % ('total' totals[0] totals[1])  present(author_A author_B)  
<a href="http://www.ruby-doc.org/docs/ProgrammingRuby/html/ref_c_array.html#Array.include_qm" rel="noreferrer">include?() a> (1..10).include?(5) #=&gt;true (1..10).include?(16) #=&gt;false  (1..10) (1..10).to_a #=&gt; [12345678910]  
random.shuffle biglist random.shuffle random 
numpy.sin math from uncertainties import sin  from uncertainties import *  # sin cos etc.  from uncertainties.math_ops import *  # Work on scalars and scalars with uncertainty  from uncertainties.numpy_ops import *  # Work on everything (scalars arrays numbers with uncertainties arrays with uncertainties)  
/path/to/install/python setup.py build -e "/the/path/you/want/python" install  
import pyme.core import pyme.pygpgme  plaintext = pyme.core.Data('this is a test message') ciphertext = pyme.core.Data() ctx = pyme.core.Context() ctx.set_armor(1) name = 'me@office.com' ctx.op_keylist_start(name 0) key = ctx.op_keylist_next() # first argument is message to sign second argument is buffer where to write # the signature third argument is signing mode see # http://www.gnupg.org/documentation/manuals/gpgme/Creating-a-Signature.html#Creating-a-Signature for more details. ctx.op_sign(plaintext ciphertext pyme.pygpgme.GPGME_SIG_MODE_CLEAR) ciphertext.seek(0 0) print ciphertext.read()  
class TaskForm(forms.ModelForm):    class Meta:       model = Task     def __init__(self *args **kwargs):       super(TaskForm self).__init__(*args **kwargs)       self.fields['prerequisites'].queryset = Task.objects.filter(job=self.instance.job)  
def do_something(x):   return x**2  list = [] result = [do_something(x) for x in list if list] print result        # []  list = [1 2 3] result = [do_something(x) for x in list if list] print result       # [1 4 9]  
simplejson import datetime import time  SIMPLE_TYPES = (int long float bool dict basestring list)  def to_dict(model):     output = {}      for key prop in model.properties().iteritems():         value = getattr(model key)          if value is None or isinstance(value SIMPLE_TYPES):             output[key] = value         elif isinstance(value datetime.date):             # Convert date/datetime to MILLISECONDS-since-epoch (JS "new Date()").             ms = time.mktime(value.utctimetuple()) * 1000             ms += getattr(value 'microseconds' 0) / 1000             output[key] = int(ms)         elif isinstance(value db.GeoPt):             output[key] = {'lat': value.lat 'lon': value.lon}         elif isinstance(value db.Model):             output[key] = to_dict(value)         else:             raise ValueError('cannot encode ' + repr(prop))      return output  
y} 
getopt $ ./testopt.py --verbose=  argparse 
arr = [line.split('') for line in open('./urls-eu.csv')]  'r' 
import webbrowser  ie = webbrowser.get(webbrowser.iexplore) ie.open('google.com')  
locals 
def __init__(self resources=[]):     self._resources = resources  def __init__(self resources=None):     if resources is None:         resources = []     self._resources = resources  
eval() get_indentifier_name_missing_function()  random_function(argument_data)  argument_data random_function() &lt;argument_data object at 0xb1ce10&gt; &lt;function random_function at 0xafff78&gt; &lt;function random_function at 0xafff78&gt;(&lt;argument_data object at 0xb1ce10&gt;)  &lt;function at 0xafff78&gt;(&lt;object at 0xb1ce10&gt;)  random_function() random_function('argument_data')  def random_function(first_argument):  'argument_data' eval() print("Currently working on" first_argument) some_internal_var = eval(first_argument) print("here comes the data: " + str(some_internal_var))  random_function() 'argument_data' argument_data random_function() # main1.py import some_module1  argument_data = 'my data'  some_module1.random_function('argument_data')   # some_module1.py def random_function(first_argument):     print("Currently working on" first_argument)     some_internal_var = eval(first_argument)     print("here comes the data: " + str(some_internal_var)) ######  Currently working on: argument_data here comes the data: my data  argument_data random_function() Currently working on argument_data Traceback (most recent call last):   File "~/main1.py" line 6 in &lt;module&gt;     some_module1.random_function('argument_data')   File "~/some_module1.py" line 4 in random_function     some_internal_var = eval(first_argument)   File "&lt;string&gt;" line 1 in &lt;module&gt; NameError: name 'argument_data' is not defined  get_indentifier_name_missing_function() # main2.py import some_module2 some_dictionary_1       = { 'definition_1':'text_1'                             'definition_2':'text_2'                             'etc':'etc.' } some_other_dictionary_2 = { 'key_3':'value_3'                             'key_4':'value_4'                              'etc':'etc.' } # # more such stuff # some_other_dictionary_n = { 'random_n':'random_n'                             'etc':'etc.' }  for each_one_of_my_dictionaries in ( some_dictionary_1                                      some_other_dictionary_2                                      ...                                      some_other_dictionary_n ):     some_module2.some_function(each_one_of_my_dictionaries)   # some_module2.py def some_function(a_dictionary_object):     for _key _value in a_dictionary_object.items():         print( get_indentifier_name_missing_function(a_dictionary_object)    +                "    " +                str(_key) +                "  =  " +                str(_value) ) ######  some_dictionary_1    definition_1  =  text_1 some_dictionary_1    definition_2  =  text_2 some_dictionary_1    etc  =  etc. some_other_dictionary_2    key_3  =  value_3 some_other_dictionary_2    key_4  =  value_4 some_other_dictionary_2    etc  =  etc. ...... ...... ...... some_other_dictionary_n    random_n  =  random_n some_other_dictionary_n    etc  =  etc.  get_indentifier_name_missing_function() some_dictionary_ some_other_dictionary_2 some_other_dictionary_n a_dictionary_object a_dictionary_object    definition_1  =  text_1 a_dictionary_object    definition_2  =  text_2 a_dictionary_object    etc  =  etc. a_dictionary_object    key_3  =  value_3 a_dictionary_object    key_4  =  value_4 a_dictionary_object    etc  =  etc. ...... ...... ...... a_dictionary_object    random_n  =  random_n a_dictionary_object    etc  =  etc.  eval() # main2.py same as above except:      for each_one_of_my_dictionaries_names in ( 'some_dictionary_1'                                                'some_other_dictionary_2'                                                '...'                                                'some_other_dictionary_n' ):         some_module2.some_function( { each_one_of_my_dictionaries_names :                                      eval(each_one_of_my_dictionaries_names) } )       # some_module2.py     def some_function(a_dictionary_name_object_container):         for _dictionary_name _dictionary_object in a_dictionary_name_object_container.items():             for _key _value in _dictionary_object.items():                 print( str(_dictionary_name) +                        "    " +                        str(_key) +                        "  =  " +                        str(_value) )     ######  eval() eval() 'string' eval('string') eval() eval() 
sorted(mydict.keys() key=lambda a:map(inta.split('.')))  ['0'  '1'  '2.0'  '2.1'  '3'  '4.0.0'  '4.0.1'  '5'  '10'  '11.0'  '11.1'  '12.0'  '12.1.0'  '12.1.1']  sorted(mydict.items() key=lambda a:map(inta[0].split('.')))  [('0' 10)  ('1' 23)  ('2.0' 321)  ('2.1' 3231)  ('3' 3)  # ...  ('12.1.1' 2)]  
link # sort the list using the 'link' item as the sort key biglist.sort(key=lambda elt: elt['link'])  newbiglist = [] for item in biglist:     if newbiglist == [] or item['link'] != newbiglist[-1]['link']:         newbiglist.append(item)  biglist .sort() link 
select.select() 
[:5] &gt;&gt;&gt; [12345678][:5] [1 2 3 4 5] &gt;&gt;&gt; [123][:5] [1 2 3] &gt;&gt;&gt; x = [6789101112] &gt;&gt;&gt; x[:5] [6 7 8 9 10]  &gt;&gt;&gt; x[5:] [11 12]  
def delete(self):     files = WidgetFile.objects.filter(widget=self)     if files:         for file in files:             file.delete()     super(Widget self).delete()  
&gt;&gt;&gt; class Test: ...     def __repr__(self): ...         return "Test()" ...     def __str__(self): ...         return "member of Test" ...  &gt;&gt;&gt; t = Test() &gt;&gt;&gt; t Test() &gt;&gt;&gt; print(t) member of Test  __str__ __repr__ repr() __str__ __repr__ __str__ __repr__ __repr__ __str__ 
os os.WIFCONTINUED os.WIFSTOPPED os.WTERMSIG os.WCOREDUMP os.WIFEXITED os.WEXITSTATUS os.WIFSIGNALED os.WSTOPSIG os.WEXITSTATUS(status) subprocess 
List del List[len(List)-1]  del del List[-1]  
-arch driverdriver.c lipo 
__init__ __init__ self. 
&gt;&gt;&gt; cPickle.dumps(aCursor) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "/usr/lib64/python2.5/copy_reg.py" line 69 in _reduce_ex     raise TypeError "can't pickle %s objects" % base.__name__ TypeError: can't pickle Cursor objects &gt;&gt;&gt; cPickle.dumps(dbHandle) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "/usr/lib64/python2.5/copy_reg.py" line 69 in _reduce_ex     raise TypeError "can't pickle %s objects" % base.__name__ TypeError: can't pickle Connection objects  
__name__ __name__ dict([(t.__name__ t) for t in fun_list])  
import sys sys.path  
_ len(_) _ 'abc' &gt;&gt;&gt; 10 10 &gt;&gt;&gt; _ 10 &gt;&gt;&gt; _ + 5 15 &gt;&gt;&gt; _ + 5 20  sys.displayhook _ builtins int sum globals() _ _ &gt;&gt;&gt; _ = "underscore" &gt;&gt;&gt; 10 10 &gt;&gt;&gt; _ + 5  Traceback (most recent call last):   File "&lt;pyshell#6&gt;" line 1 in &lt;module&gt;     _ + 5 TypeError: cannot concatenate 'str' and 'int' objects  _ _ &gt;&gt;&gt; del _  builtins._ 
xdocument.createElement('name') 
.toprettyxml() Document.toprettyxml(self indent='\t' newl='\n' encoding=None)  
def populateMethod(self method):     print "method:" method  for method in ["one""two""three"]:     button = Button(self.methodFrame text=method          command=lambda m=method: self.populateMethod(m))     button.pack({'fill': 'x' 'expand': 1 'padx': 5 'pady': 3})  
new_items = [x if x % 2 else None for x in items]  items = [0 1 2 3 4 5 6 7 8 9 10] for index item in enumerate(items):     if not (item % 2):         items[index] = None  In [1]: %%timeit    ...: items = [0 1 2 3 4 5 6 7 8 9 10]    ...: for index item in enumerate(items):    ...:     if not (item % 2):    ...:         items[index] = None    ...: 1.06 µs ± 33.7 ns per loop (mean ± std. dev. of 7 runs 1000000 loops each)  In [2]: %%timeit    ...: items = [0 1 2 3 4 5 6 7 8 9 10]    ...: new_items = [x if x % 2 else None for x in items]    ...: 891 ns ± 13.6 ns per loop (mean ± std. dev. of 7 runs 1000000 loops each)  In [1]: %%timeit    ...: items = [0 1 2 3 4 5 6 7 8 9 10]    ...: for index item in enumerate(items):    ...:     if not (item % 2):    ...:         items[index] = None    ...:  1000000 loops best of 3: 1.27 µs per loop In [2]: %%timeit    ...: items = [0 1 2 3 4 5 6 7 8 9 10]    ...: new_items = [x if x % 2 else None for x in items]    ...:  1000000 loops best of 3: 1.14 µs per loop  
import sys  def applejuice(q):     func_name = sys._getframe().f_code.co_name     print func_name  
sys.argv sys.argv[0] - -- getopt getopt - -- args 
def a(n):   if n == 0: return 1   return 1 - 1 / float(a(n-1) + 3)  # limit is sqrt(3) - 1 limit = 3.0 ** 0.5 - 1.0  # get 9 digits' precision i = 0 while abs(a(i) - limit) &gt; 1.0e-9:   i += 1  print i  8 # get a function's limit numerically def limit(f eps=1.0e-11):   previous_value = f(0)   next_value = f(1)   i = 2   while abs(next_value - previous_value) &gt; eps:     previous_value = next_value     next_value = f(i)     i += 1   return next_value  def next_prev(f):   previous_value = f(0)   i = 1   while True:     next_value = f(i)     yield next_value previous_value     i += 1     previous_value = next_value  limit def limit(f eps=1.0e-11):   for next_value previous_value in next_prev(f):     if abs(next_value - previous_value) &lt; eps:       return next_value  next_prev limit import itertools  def next_prev(f):   values = itertools.imap(f itertools.count())   prv nxt = itertools.tee(values)   nxt.next()   return itertools.izip(prv nxt)  
/* Supported address families. */ #define AF_UNSPEC       0 #define AF_INET         2       /* Internet IP Protocol         */ #define AF_INET6        10      /* IP version 6                 */  
object class A(object):     pass  class A:     pass  
subprocess.Popen cmd &amp; run() Popen Popen.wait()   Wait for child process to terminate. Set and return returncode attribute.  subprocess subprocess.call communicate Popen ### START MAIN # copy some rows from a source table to a destination table # note that the destination table is empty when this script is run cmd = 'mysql -u ve --skip-column-names --batch --execute="insert into destination (select * from source limit 100000)" test' subprocess.call(cmd)  # check to see how many rows exist in the destination table cmd = 'mysql -u ve --skip-column-names --batch --execute="select count(*) from destination" test' process = subprocess.Popen(cmd shell=True stdout=subprocess.PIPE) try: count = (int(process.communicate()[0][:-1])) except: count = 0  prog = ["mysql" "-u" "ve" "--execute" 'insert into foo values ("snargle" 2)'] subprocess.call(prog)  prog = ["printf" "%s" "&lt;" "/etc/passwd"] subprocess.call(prog)  
Content.objects.filter(...).order_by('score__counter')  relationshipName__fieldName 
set() &gt;&gt;&gt; your_list = ['one' 'two' 'one'] &gt;&gt;&gt; len(your_list) != len(set(your_list)) True  
data = [123] output = ((lambda x: x + x)           (data[2]))  data = [1 2 3] output = (lambda x=data[2] : x +x)()  output = data[2] + data[2]  import whatever  def some_func(args):     code_here  def some_other_func(args)     code_here  def main(args):     parse_args     some_func(something)     some_other_func(something_else)     return some_exit_code  if __name__ == '__main__'     import sys     sys.exit(main(sys.argv))           def main():     data = [1 2 3]     def foo():        x = data[2]        return x + x     print foo()     data = [4 5 6]     print foo()     # if you want the nested function to close over its arguments:     def bar(data=data):        x = data[2]        return x + x     print bar()     data = [7 8 9]     print bar()  
class Friendship(models.Model):   from_friend = models.ForeignKey(     User related_name='friend_set'   )   to_friend = models.ForeignKey(     User related_name='to_friend_set'   )   def __unicode__(self):     return u'%s %s' % (       self.from_friend.username       self.to_friend.username     )   class Meta:     unique_together = (('to_friend' 'from_friend') )  
print sys.getdefaultencoding() sys.stdout.encoding LANG=C ANSI_X3.4-1968 sys.stdout sys.getdefaultencoding() str(u'La Pe\xf1a') unicode str 
&gt;&gt;&gt; from django.contrib.auth.models import User &gt;&gt;&gt; User.objects.filter(username='does-not-exist') []  &gt;&gt;&gt; User.objects.get(username='does-exist') &lt;User: does-exist&gt; &gt;&gt;&gt; User.objects.get(username='does-not-exist') Traceback (most recent call last):   File "&lt;console&gt;" line 1 in &lt;module&gt;   File "/usr/lib/python2.5/django/db/models/manager.py" line 120 in get   File "/usr/lib/python2.5/django/db/models/query.py" line 305 in get DoesNotExist: User matching query does not exist.  try:    to_friend = User.objects.get(username=friend_q) except User.DoesNotExist:    # do something raise error ...  
return HttpResponseRedirect(     'https://www.google.com/a/thedomain.com/o8/ud?be=o8'     + '?'     + urllib.urlencode(parameters) )  
zip [(11 'one') ...] [y for (x y) in zip(a msg) if x &lt; 0]  msg "one" [m for m in msg if "one" not in m]  
gzip.open gzip.GzipFile open(filename mode='rb' compresslevel=9)     #Shorthand for GzipFile(filename mode compresslevel).  class GzipFile    __init__(self filename=None mode=None compresslevel=9 fileobj=None)    #    At least one of fileobj and filename must be given a non-trivial value.  gzip_file_handle = gzip.GzipFile(fileobj=url_file_handle)  
if result = some_function(arg1 arg2):     return result  if a = b if a == b x = some_function() if x:     print "Function returned True"  result = re.match("a" "b") if result:    print result.groups()  if result is not None: #!/usr/bin/env python2.6 def some_function(arg1 arg2):     if arg1 + arg2 &gt; 5:         return "some data for you"     else:         raise ValueError("Could not complete arg1+arg2 was too small")  return some_function(3 2)  def main():     try:         result = some_function(3 5)     except ValueError errormsg:         print errormsg         sys.exit(1)     else:         print "Everything is perfect the result was {0}".format(result)  if foo == 'blah':     do_blah_thing() do_one() do_two() do_three()  if foo == 'blah': do_blah_thing() do_one(); do_two(); do_three()  
class Params(object):     atoms =['1.0''2.0''3.0''4.0''5.0''6.0''7.0''8.0''9.0''x''x''x''x']     operators = {'+': 2 '-': 2 '*': 2 '/': 2'+': 2 '-': 2 '*': 2 '/': 2 '**': 2 '%': 2}     depth = 1     ratio = .4     method = ''     riddle = '1 + np.sin(x)'  # This works fine: Params.riddle  Params.riddle Params['riddle'] Params 
unittest.main() 
z = np.array(zip([12345] ['a''b''c''d''e']) dtype=[('int' int) ('str' '|S1')]) np.savetxt('test.txt' z fmt='%i %s')  savetext asarray(sequence) |S4 
&gt;&gt;&gt; x = [1 2 3 4 5] &gt;&gt;&gt; y = [2*a for a in x if a % 2 == 1] &gt;&gt;&gt; print(y) [2 6 10]  
queryset def get_queryset(self request):     # use our manager rather than the default one     qs = self.model.objects.get_queryset()      # we need this from the superclass method     ordering = self.ordering or () # otherwise we might try to *None which is bad ;)     if ordering:         qs = qs.order_by(*ordering)     return qs  
def decorator(f):     @functools.wraps(f)     def wrapper():         ....  
#Python 2.6 from selenium import selenium import unittest time re csv logging  class Untitled(unittest.TestCase):     def setUp(self):         self.verificationErrors = []         self.selenium = selenium("localhost" 4444 "*firefox" "http://www.SourceDomain.com")         self.selenium.start()      def test_untitled(self):         sel = self.selenium         spamReader = csv.reader(open('your_file.csv'))         for row in spamReader:             sel.open(row[0])             sel.wait_for_page_to_load("30000")             print sel.get_html_source()      def tearDown(self):         self.selenium.stop()         self.assertEqual([] self.verificationErrors)  if __name__ == "__main__":     unittest.main()  import urllib2 csv  def fetchsource(url):     page = urllib2.urlopen(url)     source = page.read()     return source  fooReader = csv.reader(open('your_file.csv')) for url in fooReader:     print fetchsource(url)  
import re  &gt;&gt;&gt; s = "Business  -- way's" &gt;&gt;&gt; s = re.sub(r'[^\w\s]' '' s) &gt;&gt;&gt; s "Business  ways"  
disabled=disabled disabled disabled=disabled 
replace str.replace(old new[ count]) replace("-" "") replace("\"" "") 
item items_by_pid = dict([(item.product.pid item) for item in cart.items]) item = items_by_pid.get(pid None) if item is None:     item = model.CartItem(cart product 0 product.normalPrice)     cart.items.append(item) item.quantity += 1  
&gt;&gt;&gt; import re &gt;&gt;&gt; re.sub(' +' ' ' 'The     quick brown    fox') 'The quick brown fox'  
enum signed unsigned long long int enum c_uint enum batch_op {     OP1 = 2     OP2 = 3     OP3 = -1 };  struct attrl {     char *name;     struct attrl *next;     enum batch_op op; };  void f(struct attrl *x) {     x-&gt;op = OP3; }  from ctypes import (Structure c_char_p c_uint c_int     POINTER CDLL)  class AttrList(Structure): pass AttrList._fields_ = [     ('name' c_char_p)     ('next' POINTER(AttrList))     ('op' c_int) ]  (OP1 OP2 OP3) = (2 3 -1)  enum = CDLL('./libenum.so') enum.f.argtypes = [POINTER(AttrList)] enum.f.restype = None  a = AttrList(name=None next=None op=OP2) assert a.op == OP2 enum.f(a) assert a.op == OP3  
job = jobServer.submit( doRun (param))  import os pp  def doRun(param):     print "your name is %s!" % os.getlogin()  jobServer = pp.Server() jobServer.submit( doRun (param))  os module submit import os pickle submit main submit submit 
from xml.dom.minidom import Text Element  t = Text() e = Element('p')  t.data = '&lt;bar&gt;&lt;a/&gt;&lt;baz spam="eggs"&gt; &amp; blabla &amp;entity;&lt;/&gt;' e.appendChild(t)  &gt;&gt;&gt; e.toxml() '&lt;p&gt;&amp;lt;bar&amp;gt;&amp;lt;a/&amp;gt;&amp;lt;baz spam=&amp;quot;eggs&amp;quot;&amp;gt; &amp;amp; blabla &amp;amp;entity;&amp;lt;/&amp;gt;&lt;/p&gt;'  
@register.filter def is_favourite_of(object user):     return Favourite.objects.is_favourite(user object)  {% if restaurant|is_favourite_of:user %}  
79 [7 9] 10 79 7 * 10**1 + 9 * 10**0 &gt;&gt;&gt; str(79) '79'  # Another way to say this is [int(c) for c in str(79)] &gt;&gt;&gt; map(int str(79)) [7 9]  &gt;&gt;&gt; sum(map(int str(79))) 16  
#define private public #include .h 
while ans*ans &lt; x def sqrt(x):     ans = 0     if x &gt;= 0:         while ans*ans &lt; x:             ans = ans + 1          if ans*ans != x:  # this if statement was nested inside the while             print x 'is not a perfect square.'             return None         else:             print x ' is a perfect square.'             return ans     else:         print x ' is not a positive number.'         return None  y = 16           print sqrt(y)  
def d(f):     if getattr(f '_decorated_with_d' False):         raise SomeException('Already decorated')     @wraps(f)     def wrapper(*args**kwargs):         print 'Calling func'         return f(*args**kwargs)     wrapper._decorated_with_d = True     return wrapper  def d(f):     decorated_with = getattr(f '_decorated_with' set())     if d in decorated_with:         raise SomeException('Already decorated')     @wraps(f)     def wrapper(*args**kwargs):         print 'Calling func'         return f(*args**kwargs)     decorated_with.add(d)     wrapper._decorated_with = decorated_with     return wrapper  _decorated_with 
/usr/local/lib /usr/local 
required=False     file = forms.FileField(required=False)  
from types import ModuleType  isinstance(obj ModuleType)  
friendships = Friendship.objects.filter(from_friend=some_user)  second_select = Whatever.objects.filter(friend__in=friendships)  
'3' '1' max(data key=int) 
indentedBlock suite indentstack = [1] suite = indentedBlock(stmt indentstack True)  indentedGrammarExample.py indentedBlock 
&gt;&gt;&gt; a = 0123 &gt;&gt;&gt; a 83 &gt;&gt;&gt; a = 010 &gt;&gt;&gt; a 8  &gt;&gt;&gt; map(int '08978789787') [0 8 9 7 8 7 8 9 7 8 7]  
class print DIV('bar' Class="title")  ==&gt;  &lt;DIV class="title"&gt;bar&lt;/DIV&gt;  
import os re  def purge(dir pattern):     for f in os.listdir(dir):         if re.search(pattern f):             os.remove(os.path.join(dir f))  
from string import ascii_uppercase  one_hot = {} for i l in enumerate(ascii_uppercase):     bits = ['0']*26; bits[i] = '1'     one_hot[l] = ' '.join(bits)  ['0']*26 ['0']*len(alphabet) 
fixup br.form.new_control('text''unexistent'{'value':''}) br.form.fixup() br['unexistent'] = 'hello'  fixup() This method should only be called once after all controls have been added to the form.  
inlineformset_factory NotesFormSet = inlineformset_factory(NoteBook Note extra=10 form=NoteForm)  
import types  class obj(object):     def __init__(self arg):         self.name = arg  def extract_name(obj):     if type(obj) is types.DictType:         return obj['name']     else:         return obj.__dict__['name']  d = { 'name': 'Jill'}     print sorted([obj('Jack') d] key=extract_name)  def extract_elem_v2(elem_name):     def key_extractor(obj):         dct = obj if isinstance(obj dict) else obj.__dict__         return dct[elem_name]     return key_extractor  print sorted(list_of_stuff key=extract_elem_v2('name'))  
2.* exec '' def A():   exec ''   B(locals())   print x  def B(d):   d['x'] = 1  A()  1 3.* exec 
itertools.groupby import itertools import operator  def split_series(points interval):     start = points[0][0]      return [[v for k v in grouper] for group grouper in             itertools.groupby((((n - start) // interval val)                                for n val in points) operator.itemgetter(0))]  &gt;&gt;&gt; split_series([(1 'a') (2 'b') (6 'a') (6 'd') (11 'c')] 3) [['a' 'b'] ['a' 'd'] ['c']]  [['a' 'b'] ['a' 'd'] [] ['c']]  from collections import defaultdict  def split_series(points interval):     offset = points[0][0]     maxval = (points[-1][0] - offset) // interval     vals = defaultdict(list)     for key value in points:         vals[(key - offset) // interval].append(value)     return [vals[i] for i in xrange(maxval + 1)]  
lst = [[5 44 73]  [7 21 99] [1 32 100]] list(reduce(lambda l r: l + r zip(*lst)))  lst = [[5 44 73 23]  [7 21 99] [1 32 100]] list(filter(lambda p: p is not None reduce(lambda x y: x + y map(None *lst))))  
biglist = [      {'title':'U2 Band''link':'u2.com'}      {'title':'ABC Station''link':'abc.com'}      {'title':'Live Concert by U2''link':'u2.com'}  ]  known_links = set() newlist = []  for d in biglist:   link = d['link']   if link in known_links: continue   newlist.append(d)   known_links.add(link)  biglist[:] = newlist  
.title() &gt;&gt;&gt; &quot;hello world&quot;.title() 'Hello World' &gt;&gt;&gt; u&quot;hello world&quot;.title() u'Hello World'  &gt;&gt;&gt; &quot;they're bill's friends from the UK&quot;.title() &quot;They'Re Bill'S Friends From The Uk&quot;  
(?&lt;name&gt;...) (?P&lt;name&gt;...) (?...) r"I am a raw string" \n \s 
class a:    def __init__(self):        self.val=1  class a(object): 1 class a:    val=1    def __init__(self):        pass  1 int self.val = 2 a self.val a.val = 3 self.val self.val self.val del self.val 
solve() def solve(numLegs numHeads):     for numChicks in range(0 numHeads + 1):         numPigs = numHeads - numChicks         totLegs = 4*numPigs + 2*numChicks         if totLegs == numLegs:                 return [numPigs numChicks]     return [None None]  
isinstance type isinstance type isinstance try except except basestring isinstance str unicode basestring basestring isinstance if isinstance(x basestring)   return treatasscalar(x) try:   return treatasiter(iter(x)) except TypeError:   return treatasscalar(x)  basestring isinstance isinstance issubclass isinstance issubclass 
solve for numChicks in range(0 numHeads + 1): range numChicks numPigs = numHeads - numChicks totLegs = 4*numPigs + 2*numChicks totLegs for None barnYard solve solve solve [None None] 
&gt;&gt;&gt; array([[123]]*3) array([[1 2 3]        [1 2 3]        [1 2 3]])  &gt;&gt;&gt; array([[123]]*3).transpose() array([[1 1 1]        [2 2 2]        [3 3 3]])  [16] &gt;&gt;&gt; x = array([123]) &gt;&gt;&gt; x array([1 2 3]) &gt;&gt;&gt; x.transpose() array([1 2 3]) &gt;&gt;&gt; matrix([123]) matrix([[1 2 3]]) &gt;&gt;&gt; matrix([123]).transpose() matrix([[1]         [2]         [3]])  
break if judge 
class Holder(object):    def set(self value):      self.value = value      return value    def get(self):      return self.value  h = Holder()  ...  if h.set(isBig(y)): return h.get()  if while hundreds = isBig isSmall isJuicy isBlah ...  for predicate in hundreds:   result = predicate(y)   if result: return result  return next(x for x in (f(y) for f in hundreds) if x)  return next((x for x in (f(y) for f in hundreds) if x)) None)  None Holder Holder 
python setup.py install pip install . --record python setup.py install --record files.txt  xargs rm -rf &lt; files.txt  Get-Content files.txt | ForEach-Object {Remove-Item $_ -Recurse -Force}  /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/my_module-0.1.egg/ macOS &gt;&gt;&gt; import my_module &gt;&gt;&gt; my_module.__file__ None  &gt;&gt;&gt; import my_module Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; ModuleNotFoundError: No module named 'my_module'  
html_code = A('&lt;click&gt;' rows.xml() _href='http://mylink') html_code = B('Results:' rows.xml() _class='results' _id=1) html_page = HTML(BODY(B('Results:' rows.xml() _class='results' _id=1)))  table = SQLTABLE(rows orderby=True _width="100%")  response.view = 'template.html' index def index():     # ... code to extract the rows     return HTML(BODY(B('Results:' rows.xml() _class='results' _id=1))).xml()  response.view=... &lt;html&gt;&lt;head&gt;&lt;/head&gt;   &lt;body&gt;     {{=message}}   &lt;/body&gt; &lt;/html&gt;  def index():     # ... code to extract the rows     html = B('Results:' rows.xml() _class='results' _id=1)     return dict(message=html)  
; &gt;&gt;&gt; import this  The Zen of Python by Tim Peters  ... Readability counts. ...  
vars .format _('Hello {name}.') _ formatstring.format(**locals())  locals() locals() lint if ...: nmae = ... nmae blah.format(**locals()) blah % locals() nmae locals() blah.format(name=name)  locals() locals() import * eval exec 
/usr/project/models/__init__.py from myModel import * __init__.py 
sys.path import sys sys.path.insert(0 directory_of_modules) # do imports here.  
make_file FieldStorage write 
basket = dict(basket_one **basket_two)  basket_two basket_one dict ** x = mungesomedict(dict(adict **anotherdict))  anotherdict 
import re  def doitall(number):   # get 9 or 10 digits or None:   mo = re.search(r'\d{910}' number)   if mo is None: return None   # add a leading 0 if they were just 9   digits = ('0' + mo.group())[-10:]   # now put a dot after each 2 digits   # and discard the resulting trailing dot   return re.sub(r'(\d\d)' r'\1.' digits)[:-1]  number = "+33.300000000" print doitall(number)  03.00.00.00.00 
Container __contains__ item in container if item in container: for for item in container: __iter__ Hashable __hash__ Sized __len__ Sequence Mapping __getitem__ Sequence Mapping __contains__ __getitem__ Container collections &lt;&lt; &gt;&gt; 2.* 3.* % 
try:   bs = a["key"][0][0] # Note: the syntax for catching exceptions is different in old versions # of Python. Use whichever one of these lines is appropriate to your version. except KeyError IndexError TypeError:   # Python 3 except (KeyError IndexError TypeError): # Python 2   bs = [] for b in bs:  def maybe_list(f):   try:     return f()   except KeyError IndexError TypeError:     return []  for b in maybe_list(lambda: a["key"][0][0]):  
list # use range() in Python 3 l = [{'open': False 'serve': False} for i in xrange(150)]  
Python 2.5.1 &gt;&gt;&gt; import sqlite3 &gt;&gt;&gt; sqlite3.version '2.3.2' &gt;&gt;&gt; sqlite3.sqlite_version '3.3.4'  
Listen 80  &lt;VirtualHost *:80&gt; ServerName www.example.com WSGIScriptAlias / /opt/django/site1/apache/django.wsgi Alias /media /opt/django/site1/media/statics Alias /admin_media  /home/myuser/Django-1.1/django/contrib/admin/media  &lt;Directory opt/django/site1/apache&gt; Order allowdeny Allow from all &lt;/Directory&gt;  &lt;Directory /home/myuser/Django-1.1/django/contrib/admin/media&gt; Order allowdeny Allow from all &lt;/Directory&gt; &lt;/VirtualHost&gt;  Listen 8080  &lt;VirtualHost *:8080&gt; ServerName www.example.com WSGIScriptAlias / /opt/django/site2/apache/django.wsgi Alias /media /opt/django/site2/media/statics Alias /admin_media  /home/myuser/Django-1.1/django/contrib/admin/media  &lt;Directory opt/django/site2/apache&gt; Order allowdeny Allow from all &lt;/Directory&gt;  &lt;Directory /home/myuser/Django-1.1/django/contrib/admin/media&gt; Order allowdeny Allow from all &lt;/Directory&gt; &lt;/VirtualHost&gt;  Listen 8090  &lt;VirtualHost *:8090&gt; ServerName www.example.com WSGIScriptAlias / /opt/django/site3/apache/django.wsgi Alias /media /opt/django/site3/media/statics Alias /admin_media  /home/myuser/Django-1.1/django/contrib/admin/media  &lt;Directory opt/django/site3/apache&gt; Order allowdeny Allow from all &lt;/Directory&gt;  &lt;Directory /home/myuser/Django-1.1/django/contrib/admin/media&gt; Order allowdeny Allow from all &lt;/Directory&gt; &lt;/VirtualHost&gt;  &lt;VirtualHost *:80&gt; WSGIDaemonProcess site1 display-name=%{GROUP} WSGIProcessGroup site1 ... existing stuff &lt;/VirtualHost&gt;  &lt;VirtualHost *:8080&gt; WSGIDaemonProcess site2 display-name=%{GROUP} WSGIProcessGroup site2 ... existing stuff &lt;/VirtualHost&gt;  &lt;VirtualHost *:8090&gt; WSGIDaemonProcess site3 display-name=%{GROUP} WSGIProcessGroup site3 ... existing stuff &lt;/VirtualHost&gt;  
def cluster(dicts key):     current_value = None     current_span = 0     result = []      for d in dicts:         value = d[key]         if current_value is None:             current_value = value         elif current_value != value:             result.append({'colspan': current_span key: current_value})             current_value = value             current_span = 0         current_span += 1      result.append({'colspan': current_span key: current_value})     return result  by_open = cluster(data 'open') by_serve = cluster(data 'serve')  itertools.groupby import itertools import operator  def make_spans(data key):     groups = itertools.groupby(data operator.itemgetter(key))     return [{'colspan': len(list(items)) key: value} for value items in groups]  
str_len send_data % 
collections.defaultdict list &gt;&gt;&gt; import collections &gt;&gt;&gt; mydict = collections.defaultdict(list)  .append(...) append defaultdict likes &gt;&gt;&gt; mydict = collections.defaultdict(list likes)  list default_factory defaultdict 
escape() 
x.getB() b x.setB(2) x.getB() 2 get set x.b x.b = 2 x.setB(x.getB() + 1)  x.b += 1  b x getThis setThat 
def handler(req):    return app.run(apacheapp.Request(req))    &lt;Directory "/var/www/auction-in-europe.com/aie"&gt;    Order allowdeny    Allow from all    SetHandler python-program .py    PythonHandler index ## or what ever the above file is called without the .py    PythonDebug On      &lt;/Directory&gt;  
LaunchServices open launch open % open -b org.mozilla.firefox http://www.stackoverflow.com/  subprocess 
&amp;amp; &amp;amp; &amp;copy; template.generate().render('html' doctype= 'html' encoding= 'us-ascii')  &amp;copy; &amp;#169; 
ctypes.cast &gt;&gt;&gt; import ctypes &gt;&gt;&gt; c_long_p = ctypes.POINTER(ctypes.c_long) &gt;&gt;&gt; some_long = ctypes.c_long(42) &gt;&gt;&gt; ctypes.addressof(some_long) 4300833936 &gt;&gt;&gt; ctypes.cast(4300833936 c_long_p) &lt;__main__.LP_c_long object at 0x1005983b0&gt; &gt;&gt;&gt; ctypes.cast(4300833936 c_long_p).contents c_long(42)  
import subprocess import time import sys  class Timeout(Exception):     pass  def run(command timeout=10):     proc = subprocess.Popen(command bufsize=0 stdout=subprocess.PIPE stderr=subprocess.PIPE)     poll_seconds = .250     deadline = time.time()+timeout     while time.time() &lt; deadline and proc.poll() == None:         time.sleep(poll_seconds)      if proc.poll() == None:         if float(sys.version[:3]) &gt;= 2.6:             proc.terminate()         raise Timeout()      stdout stderr = proc.communicate()     return stdout stderr proc.returncode  if __name__=="__main__":     print run(["ls" "-l"])     print run(["find" "/"] timeout=3) #should timeout  
some_class_instance SomeClass SomeClass 
.read(amount) amount urlopen 
import time start_time = time.time() main() print("--- %s seconds ---" % (time.time() - start_time))  --- 0.764891862869 seconds ---  
asobj.properties() 
In [2]: unhexlify('dead').decode('latin1') Out[2]: u'\xde\xad'  
p = multiprocessing.Process(target=write args=('hello'))  
func(**some_dict) dict some_dict is not kwargs 
cs.collections[0].get_paths()  Path.vertices p1 = cs.collections[0].get_paths()[0]  # grab the 1st path coor_p1 = p1.vertices  
def reversed_iterator(iter):     return reversed(list(iter))  
mainfunc KeySeq def mainfunc(ks=KeySeq()):    key = ks.next()  ks mainfunc KeySeq func_defaults func_defaults mainfunc ks KeySeq() func_defaults mainfunc KeySeq mainfunc submit g &gt;&gt;&gt; def f():         def g(x=[]):             return x         return g &gt;&gt;&gt; g1 = f() &gt;&gt;&gt; g2 = f() &gt;&gt;&gt; g1().append('a') &gt;&gt;&gt; g2().append('b') &gt;&gt;&gt; g1() ['a'] &gt;&gt;&gt; g2() ['b']  g() func_defaults g1 g2 g x callback.py Sum 
OpBasedDocument.InsertInlineBlip()  412 -  def InsertInlineBlip(self position):   413      """Inserts an inline blip into this blip at a specific position.   414     415      Args:   416        position: Position to insert the blip at.   417     418      Returns:   419        The JSON data of the blip that was created.   420      """   421      blip_data = self.__context.builder.DocumentInlineBlipInsert(   422          self._blip.waveId   423          self._blip.waveletId   424          self._blip.blipId   425          position)   426      # TODO(davidbyttow): Add local blip element.   427      return self.__context.AddBlip(blip_data)   InsertInlineBlip() AddBlip()  543 -  def AddBlip(self blip_data):   544      """Adds a transient blip based on the data supplied.   545     546      Args:   547        blip_data: JSON data describing this blip.   548     549      Returns:   550        An OpBasedBlip that may have operations applied to it.   551      """   552      blip = OpBasedBlip(blip_data self)   553      self.blips[blip.GetId()] = blip   554      return blip   InsertInlineBlip(self position) InsertElement(self position element) InsertInlineBlip() InsertInlineBlip() Blip.CreateChild() 
import tempfile import win32api import win32con import win32security  f = tempfile.NamedTemporaryFile () FILENAME = f.name try:   sd = win32security.GetFileSecurity (FILENAMEwin32security.OWNER_SECURITY_INFORMATION)   owner_sid = sd.GetSecurityDescriptorOwner ()   name domain type = win32security.LookupAccountSid (None owner_sid)    print "I am" win32api.GetUserNameEx (win32con.NameSamCompatible)   print "File owned by %s\\%s" % (domain name) finally:   f.close ()  
unicode_csv_reader(open(familynamelist)) def encoded_csv_reader_to_unicode(encoded_csv_data                                   coding='utf-8'                                   dialect=csv.excel                                   **kwargs):   csv_reader = csv.reader(encoded_csv_data                           dialect=dialect                           **kwargs)   for row in csv_reader:       yield [unicode(cell coding) for cell in row]  encoded_csv_reader_to_unicode(open(familynamelist)) 
UserFavorite.get_by_name(user_id parent=a_story)  
None return None def t():     if True:         return 'ham'  return None 42 'spam' list.sort __init__ return None __init__ 
category set category loop() __iter__() self.items.iteritems() &lt;saved_data&gt; {% for key item in category recursive %}         {% if item.children %}                 &lt;category name="{{key}}"&gt;                         {{ loop(item) }}                 &lt;/category&gt;         {% else %}                 &lt;item name="{{ key }}" value="{{ item }}" /&gt;         {% endif %} {% endfor %} &lt;/saved_data&gt;  
len(table) sum(column) column.sum() c column 
np.rec.fromrecords(tab)  rec.array([('a' 1) ('b' 2)]            dtype=[('f0' '|S1') ('f1' '&lt;i4')])  
set_target_properties(foo PROPERTIES PREFIX "")  
__new__ object.__new__(cls[ ...]) cls __new__() __new__() cls __new__() super(currentclass cls).__new__(cls[ ...]) __new__() cls __init__() __init__(self[ ...]) __new__() __new__() cls __init__() __new__() int str tuple 
In [1]: import syscsv  In [2]: csv.writer(sys.stdout).writerow(['one" f"' 'two' 'three'])   "one"" f"""twothree  In [3]: csv.reader(['"one"" f"""twothree']).next()   Out[3]: ['one" f"' 'two' 'three']  
In [1]: import numpy as np  In [2]: np.float(7.0/8) Out[2]: 0.875  In [3]: np.float96(7.0/8) Out[3]: 0.875  In [2]: np.float96(7.0/8) Out[2]: -2.6815615859885194e+154  In [2]: np.float96(7.0/8) Out[2]: 0.875  
def myfunc(param1 param2 param3):     dict_param = locals()  
numpy import numpy as np np.set_printoptions(precision=2)  %g np.set_printoptions(formatter={"float_kind": lambda x: "%g" % x})  np.array2string 
BeautifulStoneSoup BeautifulStoneSoup selfClosingTags 
import sys sys.path[0:0] = [      '/some/thing1.egg'      # and other things      ]  sys.path 
&gt;&gt;&gt; a = 'asdfghjklmn' &gt;&gt;&gt; a[:len(a)//3*3] 'asdfghjkl'    &gt;&gt;&gt; len(a) 11 &gt;&gt;&gt; len(a[:len(a)//3*3]) 9  n//k*k 
def __init__(self *args **kwargs):     super(Fruit self).__init__(*args **kwargs)      # The attribute name was changed in Python 3; pick whichever line matches     # your Python version.     callback = self.print_callback.im_func  # Python 2     callback = self.print_callback.__func__ # Python 3      callback("Message from Fruit: ")  
&gt;&gt;&gt; root = etree.XML('&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;')  &gt;&gt;&gt; etree.tostring(root) b'&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;'  &gt;&gt;&gt; print(etree.tostring(root xml_declaration=True)) &lt;?xml version='1.0' encoding='ASCII'?&gt; &lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;  &gt;&gt;&gt; print(etree.tostring(root encoding='iso-8859-1')) &lt;?xml version='1.0' encoding='iso-8859-1'?&gt; &lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;  &gt;&gt;&gt; print(etree.tostring(root pretty_print=True)) &lt;root&gt;   &lt;a&gt;     &lt;b/&gt;   &lt;/a&gt; &lt;/root&gt;  
datepicker.Navigate() datepicker.GetValue() 
sys.modules[MyCls.__module__].__file__  inspect.getsourcefile(MyCls)  __xxx__ 
 In [1]: import rfc822     # This only works for python 2 series  In [2]: rfc822.parsedate_tz('Sun 09 Mar 1997 13:45:00 -0500') Out[2]: (1997 3 9 13 45 0 0 1 0 -18000)   >>> import email.utils   # this works on Python2.5 and up >>> email.utils.parsedate_tz('Sun 09 Mar 1997 13:45:00 -0500') (1997 3 9 13 45 0 0 1 -1 -18000)  
try:     assert False "A Message" except AssertionError e:     raise Exception( e.args )  if not someAssertion: raise Exception( "Some Message" )  assert AssertionError def myAssert( condition action ):     if not condition: raise action  myAssert( {{ the original condition }} MyException( {{ the original message }} ) )  
str unicode xml_doc = libxml2.parseDoc(DOC.encode("UTF-8"))  site.setencoding unicode locale 
not(user) user = s.query(User).filter("...some filter here...").first()  
urllib2 import urllib2 cookielib jar = cookielib.CookieJar() opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(jar))  content = opener.open(urllib2.Request(     "http://social.netwo.rk/login"     "user=foo&amp;pass=bar") ).read()  .add_header 
[pypi] username:dcramer password:*******  [server-login] username:dcramer password:********  .pypirc 
using python ; lib libboost_python : : &lt;name&gt;boost_python ; project : requirements &lt;library&gt;libboost_python ;  
__init__.py from project.utils.tools import get_related  def get_preview():      # ...  tools.py def get_related():     from project.utils import get_preview     # ...     get_preview()  
(?P&lt;name_slug&gt;\w+)  [\w-]+ 
web81:~/webapps/dominicrodger2/dominicrodger$ python2.5 manage.py shell Python 2.5.4 (r254:67916 Aug  5 2009 12:42:40) [GCC 4.1.2 20080704 (Red Hat 4.1.2-44)] on linux2 Type "help" "copyright" "credits" or "license" for more information. (InteractiveConsole) &gt;&gt;&gt; import settings &gt;&gt;&gt; settings.TIME_ZONE 'Europe/London' &gt;&gt;&gt; from datetime import datetime &gt;&gt;&gt; datetime.now() datetime.datetime(2009 10 15 6 29 58 85662) &gt;&gt;&gt; exit() web81:~/webapps/dominicrodger2/dominicrodger$ date Thu Oct 15 00:31:10 CDT 2009  TIME_ZONE auto_now_add TIME_ZONE TIME_ZONE if hasattr(time 'tzset'):     # Move the time zone info into os.environ. See ticket #2315 for why     # we don't do this unconditionally (breaks Windows).     os.environ['TZ'] = self.TIME_ZONE     time.tzset()  C:\Documents and Settings\drodger&gt;python ActivePython 2.6.1.1 (ActiveState Software Inc.) based on Python 2.6.1 (r261:67515 Dec  5 2008 13:58:38) [MSC v.1500 32 bit (Intel)] on win32 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import time &gt;&gt;&gt; hasattr(time 'tzset') False  web81:~$ python2.5 Python 2.5.4 (r254:67916 Aug  5 2009 12:42:40) [GCC 4.1.2 20080704 (Red Hat 4.1.2-44)] on linux2 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import time &gt;&gt;&gt; hasattr(time 'tzset') True  
apt-get install libpng-dev 
#!/System/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python import sys sys.argv[0] = sys.argv[0].replace('-2.6' '') # EASY-INSTALL-ENTRY-SCRIPT: 'setuptools==0.6c9''console_scripts''easy_install' __requires__ = 'setuptools==0.6c9' import sys from pkg_resources import load_entry_point  sys.exit(    load_entry_point('setuptools==0.6c9' 'console_scripts' 'easy_install')() )  #!/sw/bin/python23  sys.argv[0] = sys.argv[0].replace('-2.3' '')  $ python23 /some/path/easy_install networkx-0.36-py2.5.egg  
boost::python void Foo_set_x(Foo&amp; self float value) {     self.get() = value; }  class_&lt;Foo&gt;("Foo" init&lt;float&gt;())     ...     .def("set" &amp;Foo_set_x); ;  
title body MyModel # create instance of model m = MyModel(**data_dict) # don't forget to save to database! m.save()  extra extra2 m2 =MyModel(extra='hello' extra2='world' **data_dict) m2.save()  
class ApplicationError(Fault):      def __init__(self exc_info):         Fault.__init__(self xmlrpclib.APPLICATION_ERROR                        u'Application internal error')   class NotWellformedError(Fault):      def __init__(self exc):         Fault.__init__(self xmlrpclib.NOT_WELLFORMED_ERROR str(exc))   class UnsupportedEncoding(Fault):      def __init__(self exc):         Fault.__init__(self xmlrpclib.UNSUPPORTED_ENCODING str(exc))   # XXX INVALID_ENCODING_CHAR is masked by xmlrpclib so the error code will be # INVALID_XMLRPC. class InvalidRequest(Fault):      def __init__(self message):         ault.__init__(self xmlrpclib.INVALID_XMLRPC message)   class MethodNotFound(Fault):      def __init__(self name):         Fault.__init__(self xmlrpclib.METHOD_NOT_FOUND                        u'Method %r is not supported' % name)   class WrongMethodUsage(Fault):      def __init__(self message):         Fault.__init__(self xmlrpclib.INVALID_METHOD_PARAMS message)   class WrongType(Fault):      def __init__(self arg_name type_name):         Fault.__init__(self xmlrpclib.INVALID_METHOD_PARAMS                        u'Parameter %s must be %s' % (arg_name type_name))   class XMLRPCDispatcher(SimpleXMLRPCDispatcher XMLRPCDocGenerator):      server_name = server_title = 'Personalization center RPC interface'     server_documentation = 'Available methods'      def __init__(self methods):         SimpleXMLRPCDispatcher.__init__(self allow_none=True encoding=None)         self.register_instance(methods)         self.register_multicall_functions()         #self.register_introspection_functions()      def _dispatch(self method_name args):         if self.funcs.has_key(method_name):             method = self.funcs[method_name]         else:             method = self.instance._getMethod(method_name)         arg_names args_name kwargs_name defaults = \                                                 inspect.getargspec(method)         assert arg_names[0]=='self'         arg_names = arg_names[1:]         n_args = len(args)         if not (args_name or defaults):             if n_args!=len(arg_names):                 raise WrongMethodUsage(                     u'Method %s takes exactly %d parameters (%d given)' % \                                 (method_name len(arg_names) n_args))         else:             min_args = len(arg_names)-len(defaults)             if len(args)&lt;min_args:                 raise WrongMethodUsage(                     u'Method %s requires at least %d parameters (%d given)' % \                                 (method_name min_args n_args))             if not args_name and n_args&gt;len(arg_names):                 raise WrongMethodUsage(                     u'Method %s requires at most %d parameters (%d given)' % \                                 (method_name len(arg_names) n_args))         try:             return method(*args)         except Fault:             raise         except:             logger.exception('Application internal error for %s%r'                              method_name args)             raise ApplicationError(sys.exc_info())      def dispatch(self data):         try:             try:                 args method_name = xmlrpclib.loads(data)             except ExpatError exc:                 raise NotWellformedError(exc)             except LookupError exc:                 raise UnsupportedEncoding(exc)             except xmlrpclib.ResponseError:                 raise InvalidRequest('Request structure is invalid')             method_name = method_name.encode('ascii' 'replace')             result = self._dispatch(method_name args)         except Fault exc:             logger.warning('Fault %s: %s' exc.faultCode exc.faultString)             return xmlrpclib.dumps(exc)         else:             try:                 return xmlrpclib.dumps((result) methodresponse=1)             except:                 logger.exception('Application internal error when marshalling'\                                  ' result for %s%r' method_name args)                 return xmlrpclib.dumps(ApplicationError(sys.exc_info()))   class InterfaceMethods:      def _getMethod(self name):         if name.startswith('_'):             raise MethodNotFound(name)         try:             method = getattr(self name)         except AttributeError:             raise MethodNotFound(name)         if not inspect.ismethod(method):             raise MethodNotFound(name)         return method  
';'.join(encode(i) for i in message.split('.'))  ';'.join(encode(i) for i in result)  split16 
find node = p.find('div' text="Content I Want")  xml = """&lt;div id="top"&gt;&lt;div&gt;Content&lt;/div&gt;&lt;div&gt;&lt;div&gt;Content I Want&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;""" from BeautifulSoup import BeautifulSoup p = BeautifulSoup(xml)  # returns a list of texts print p.div.div.findNextSibling().div.contents # returns a list of texts print p.div.div.findNextSibling().div(text=True) # join (and strip) the values print ''.join(s.strip() for s in p.div.div.findNextSibling().div(text=True))  
import os subprocess myenv = {} myenv.update(os.environ) myenv['TEST1'] = "" myenv['TEST2'] = "karthik" subprocess.Popen(('cmd' '/c' 'test.bat') stdout=file("test.bat.output.python" 'w')                  env=myenv).wait()  
for numChicks 0 solve return yield solve def solve(numLegs numHeads):      for numBees in range(0 numHeads + 1):              for numChicks in range(0 numHeads - numBees + 1):                      numPigs = numHeads - numChicks - numBees                      totLegs = 4*numPigs + 2*numChicks + 6*numBees                       if totLegs == numLegs:                              yield [numPigs numChicks numBees]  def barnYard(heads legs):     for pigs chickens bees in solve(legs heads):              print 'Number of pigs: ' pigs              print 'Number of chickens: ' chickens              print 'Number of bees: ' bees  barnYard(2056)  Number of pigs:  8 Number of chickens:  12 Number of bees:  0  Number of pigs:  6 Number of chickens:  13 Number of bees:  1  Number of pigs:  4 Number of chickens:  14 Number of bees:  2  Number of pigs:  2 Number of chickens:  15 Number of bees:  3  Number of pigs:  0 Number of chickens:  16 Number of bees:  4  
site-packages jebootstrap.py import os sys  def relative_dir(apath):   return os.path.realpath(       os.path.join(os.path.dirname(apath)       '../../../Path/To/Shared/Code'))  def addpack(apath):   relative = relative_dir(apath)   if relative not in sys.path:     sys.path.append(relative)  import jebootstrap jebootsrap.addpack(__file__)  
def f():     pass # first line     pass # second line pass # &lt;-- less indentation not part of function f.  def f(): pass  def f(): pass; pass  return yield return return None return None None def f():     pass  def f():     42  
SELECT theTable.* FROM theTable INNER JOIN (   SELECT link size   FROM theTable    GROUP BY link size   HAVING count(ID) &gt; 1 ) dups ON theTable.link = dups.link AND theTable.size = dups.size  SELECT theTable.* FROM theTable INNER JOIN (   SELECT link size max(ID) as maxID   FROM theTable    GROUP BY link size   HAVING count(ID) &gt; 1 ) dups ON theTable.link = dups.link            AND theTable.size = dups.size            AND theTable.ID &lt;&gt; dups.maxID  
WeakKeyDictionary Monitor from weakref import WeakKeyDictionary from cPickle import dumps  class Monitor():     def __init__(self):         self.objects = WeakKeyDictionary()     def is_changed(self obj):         current_pickle = dumps(obj -1)         changed = False         if obj in self.objects:             changed = current_pickle != self.objects[obj]         self.objects[obj] = current_pickle         return changed  class MyObject():     def __init__(self):         self.i = 1     def change_somehow(self):         self.i += 1  object1 = MyObject() monitor = Monitor() print monitor.is_changed(object1) object1.change_somehow() print monitor.is_changed(object1) print monitor.is_changed(object1)  False True False  
if if print from __future__ import print_function  &gt;&gt;&gt; print 'test' test &gt;&gt;&gt; from __future__ import print_function &gt;&gt;&gt; print 'test'   File "&lt;stdin&gt;" line 1     print 'test'                ^ SyntaxError: invalid syntax &gt;&gt;&gt; print('test') test  __future__ 
test = '8743-12083-15' lst_int = [int(x) for x in test.split("-")]  def v1():  return [int(x) for x in '8743-12083-15'.split('-')]  def v2():  return map(int '8743-12083-15'.split('-'))  import timeit print "v1" timeit.Timer('v1()' 'from __main__ import v1').timeit(500000) print "v2" timeit.Timer('v2()' 'from __main__ import v2').timeit(500000)  &gt; output v1 3.73336911201  &gt; output v2 3.44717001915  
__del__ __del__ 
timedelta.seconds seconds days milliseconds delta = datetime.datetime(200811710514)-datetime.datetime(200811693016) delta.seconds + delta.days*86400  
T doCallback shared_ptr&lt;T&gt; T shared_ptr&lt;T&gt; doCallback data swigData = SWIG_NewPointerObj((void*)(data.get()) SWIGType_Whatever 0);  shared_ptr data shared_ptr pythonData = new shared_ptr&lt;Whatever&gt;(data); swigData = SWIG_NewPointerObj(pythonData SWIGType_shared_ptr_to_Whatever 1);  Py_BuildValue() 
if condition:    do_something() IF THE PREVIOUS CONDITION WAS FALSE:    do_something_else()  try:    do_something() IF THERE WAS AN EXCEPTION:    pass: IF THE PREVIOUS CONDITION WAS FALSE:    do_something_else() finally:    cleanup()  IF some_iterator IS NOT EMPTY:    i = next(some_iterator)    print(i) IF THE PREVIOUS CONDITION WAS FALSE:    print("Iterator is empty!")  try:    do_something() except someException:    pass: IF NO EXCEPTION:    do_something_else() finally:    cleanup()  for i in some_iterator:    print(i) IF NO MORE ITERATING:    print("Iterator is empty!")  if condition:    do_something() elif otherconditaion:    do_anotherthing() IF NO CONDITION WAS TRUE:    do_something_else()  
from PyObjCTools import AppHelper AppHelper.runEventLoop()  AppHelper NSApplicationMain setup.py py2app from distutils.core import setup import py2app plist = dict(     NSPrincipalClass='SillyBalls' ) setup(     plugin=['SillyBalls.py']     data_files=['English.lproj']     options=dict(py2app=dict(         extension='.saver'         plist=plist     )) )  
sudo port install python_select sudo python_select python26  
? {01} ?: (?:X) .(.).(.) .(?:.).(.) (?:.) import re m = re.search('.(.).(.)' '1234') print m.group(1) print m.group(2) # output: # 2 # 4  m = re.search('.(?:.).(.)' '1234') print m.group(1) # output: # 4  www\.google\.com|www\.yahoo\.com www\.(google|yahoo)\.com www\.(?:google|yahoo)\.com 
def fun1(a):     for i in range(len(a)):         a[i] = a[i] * a[i]     return a  test1 = [12345] print 'Original list' test1 test2 = fun1(test1) print 'Result' test2 print 'Original list' test1  Original list [1 2 3 4 5] Result [1 4 9 16 25] Original list [1 4 9 16 25]  
getpath from lxml import etree  root = etree.fromstring('&lt;foo&gt;&lt;bar&gt;Data&lt;/bar&gt;&lt;bar&gt;&lt;baz&gt;data&lt;/baz&gt;'                         '&lt;baz&gt;data&lt;/baz&gt;&lt;/bar&gt;&lt;/foo&gt;')  tree = etree.ElementTree(root) for e in root.iter():     print tree.getpath(e)  /foo /foo/bar[1] /foo/bar[2] /foo/bar[2]/baz[1] /foo/bar[2]/baz[2]  
&gt;&gt;&gt; def weekdays_between(s e): ...     return [n % 7 for n in range(s e + (1 if e &gt; s else 8))] ...  &gt;&gt;&gt; weekdays_between(2 4) [2 3 4] &gt;&gt;&gt; weekdays_between(5 1) [5 6 0 1]  &gt;&gt;&gt; days = 'Mon Tue Wed Thu Fri Sat Sun'.split() &gt;&gt;&gt; days_1 = {d: n for n d in enumerate(days)} &gt;&gt;&gt; def weekdays_between(s e):  ...     s e = days_1[s] days_1[e] ...     return [days[n % 7] for n in range(s e + (1 if e &gt; s else 8))] ...  &gt;&gt;&gt; weekdays_between('Wed' 'Fri') ['Wed' 'Thu' 'Fri'] &gt;&gt;&gt; weekdays_between('Sat' 'Tue') ['Sat' 'Sun' 'Mon' 'Tue']  
import lxml.etree  html = '&lt;div&gt;&lt;br /&gt;Hello text&lt;/div&gt;' doc = lxml.etree.fromstring(html) text = doc.xpath('//text()')[0] print lxml.etree.tostring(text.getparent())  &lt;br/&gt;Hello text  lxml tail &gt;&gt;&gt; print text.text None &gt;&gt;&gt; print text.tail Hello text  
settings.py 
./manage.py syncdb 
_validate_b(self b) 
tearDown class Singleton:    ...    def _drop(self):    "Drop the instance (for testing purposes)."    Singleton.__instance = None    del self._Singleton__instance  _drop 
class ThreadedTCPServer(SocketServer.ThreadingMixIn SocketServer.TCPServer):     pass  ss.py SERVER localhost 8001  ss.py localhost 8001      while 1:         if recver.getStatus():             sender.setStatus(True)             self.server.shutdown()             break  
from BeautifulSoup import BeautifulSoup from os.path import basename splitext soup = BeautifulSoup(my_html_string) for img in soup.findAll('img'):     img['src'] = 'cid:' + splitext(basename(img['src']))[0] my_html_string = str(soup)  
#!/usr/bin/env python import numpy as np import datetime r=np.array([(datetime.date(200011)01)             (datetime.date(200011)11)             (datetime.date(200011)10)             (datetime.date(200011)00)                                     ]) r=r[r[:1:].any(axis=1)] print(r) # [[2000-01-01 0 1] #  [2000-01-01 1 1] #  [2000-01-01 1 0]  
#!/usr/bin/env python import unittest import sys import os  unit_dir = sys.argv[1] if len(sys.argv) &gt; 1 else '.' os.chdir(unit_dir) suite = unittest.TestSuite() for filename in os.listdir('.'):     if filename.endswith('.py') and filename.startswith('test_'):         modname = filename[:-2]         module = __import__(modname)         suite.addTest(unittest.TestLoader().loadTestsFromModule(module))  unittest.TextTestRunner(verbosity=2).run(suite)  testsuite.py UnitTests  
raw_input() input() import random a=0 final=0 working=0  rolls = int(raw_input("How many dice do you want to roll? ")) sides = int(raw_input("How many sides? "))  while a&lt;rolls:     a=a+1     working=random.randint(1 sides)     final=final+working  print "Your total is:" final  
def time_offsets(files offset):     files = sorted(files key=lambda x:x.timestamp)     group = []       timestamp = 0     for f in files:       if f.timestamp &lt; timestamp + offset:          group.append(f)       else:          yield group          timestamp = f.timestamp          group = [timestamp]    else:       yield group  # Now you can do this... for group in time_offsets(files 86400):    print group  class File:    def __init__(self timestamp):       self.timestamp = timestamp     def __repr__(self):       return &quot;File: &lt;%d&gt;&quot; % self.timestamp  def gen_files(num=100):    import random    files = []    for i in range(num):       timestamp = random.randint(01000000)       files.append(File(timestamp))     return files         def time_offsets(files offset):     files = sorted(files key=lambda x:x.timestamp)     group = []       timestamp = 0     for f in files:       if f.timestamp &lt; timestamp + offset:          group.append(f)       else:          yield group          timestamp = f.timestamp          group = [timestamp]    else:       yield group  # Now you can do this to group files by day (assuming timestamp in seconds) files = gen_files() for group in time_offsets(files 86400):    print group  
any(d['site'] == 'Superuser' for d in data)  
file = open('system.keys''r') lines = [] for i in file:     lines.append(i.partition('='))  dic = {} for k_v in lines:     dic[k] = v  myfile = open('system.keys''r') dic = dict(i.split("="1) for i in myfile)  dict() (keyvalue) 
return ('NULL') return ('NULL\n') RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-f RewriteCond (${remap:$1}) !NULL RewriteRule (.*_.*) /%1 [R=301]  
class Aclass(object):     p = None     @classmethod     def init_p(cls value):         p = value     @classmethod     def meth1(cls):         # some code         res = cls.meth2()         # some more code w/ res     @classmethod     def meth2(cls):         # do something with p         pass  from a import Aclass as ac  ac.init_p(some_command_line_argument_value)  ac.meth1() ac.meth2()  
ROOT BOTTOM HANDLER TOP HANDLER ROOT  top.propagation = False  
__all__ from project.foo import * __all__ from project.foo.first import WonderfulThing from .first import WonderfulThing from project import foo foo.WonderfulThing import * WonderfulThing __init__ from . import WonderfulThing  from . import *  
_cp_dispatch _q_lookup _q_resolve 
max(a key=len) len(max(a key=len)) max 
asyncore.loop a.send python -m trace -t ast.py  print 
import org.python.core.PyObject; import org.python.core.PyString; import org.python.util.PythonInterpreter; public class Main {      public static B create()      {         PythonInterpreter interpreter = new PythonInterpreter();         interpreter.exec("from D import D");         PyObject DClass = interpreter.get("D");          PyObject DObject = DClass.__call__();         return (B)DObject.__tojava__(B.class);     }      public static void main(String[] args)      {         B b = create();         System.out.println(b.FooBar("Wall-"));     } }  
/foo/bar / r = re.compile(r'/foo/bar(?!/)')  r.search 
[XmlRpcUrl("http://188.40.xxx.xxx:8000/RPC2")]  SimpleXMLRPCRequestHandler.rpc_paths 
for numbers in x:  sum(numbers)  def numcheck(x):     s=0     for number in x:         if number%3==0 and number%5==0:             s+=number     print(s) numcheck(range(1000))  
%module test %{  typedef struct {   int (*my_func)(int); } test_struct;  int add1(int n) { return n+1; }  test_struct *init_test() {     test_struct *t = (test_struct*) malloc(sizeof(test_struct));     t-&gt;my_func = add1;     return t; }  %}  typedef struct {     int my_func(int); } test_struct;  extern test_struct *init_test();  $ python Python 2.6.2 (release26-maint Apr 19 2009 01:56:41)  [GCC 4.3.3] on linux2 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import test &gt;&gt;&gt; t = test.init_test() &gt;&gt;&gt; t.my_func(1) 2  
sum(map(predicate seq)) == 1  
class Revision (db.Model):   name = db.StringProperty(required=True)   created = db.DateTimeProperty(required=True)   modified = db.DateTimeProperty(auto_now_add=True)   content = db.TextProperty(required=True)   user = db.UserProperty()  r = Revision(name = self.name              content = self.content              created = self.created              modified = self.modified              user = self.user) r.put()  page = models.Page.load(title)  if request.GET.get('rev'):   query = db.Query(models.Revision)   query.filter('name =' title).order('created')   rev = request.GET.get('rev')   rev_page = query.fetch(1 int(rev))   page.content = rev_page.content  
def view(req url):     req.content_type = 'text/plain'     ns = {u'f' : u'http://www.w3.org/2005/Atom'         u't' : u'http://purl.org/syndication/thread/1.0'}     doc = amara.parse(urlopen(url) prefixes=ns)     req.write(str(doc.xml_xpath(u'f:title')))  
def _validate_item(item):     if item &lt;= 0:         raise ValueError("item should be positive.")  class Positive(object):     def __init__(self item):         self._validate_item(item)         self.item = item      @staticmethod     def _validate_item(item):         if item &lt;= 0:             raise ValueError("item should be positive.")  
prof = cProfile.Profile() retval = prof.runcall(self.method_actual *args **kwargs) prof.dump_stats(datafn)  
class MyParser(object):     def __init__(self value):         self.lst = value.split('|')     def id(self):         return self.lst[0]     def level(self):         return self.lst[2].strip()     def message(self):         return self.lst[1].strip(' "')  
a True is False == False if __bool__ __nonzero__ True True True False 1 0 bool int 
/~/bin/python ~/bin/python --prefix=path configure ~ / ~ ./configure --prefix=/~/bin/python  ./configure --prefix=~/bin/python  ./configure --prefix=$HOME/bin/python  echo $HOME $HOME --prefix=/home/mscharley/bin/python 
def enumerate_recursive(iter base=()):     for index item in enumerate(iter):         if isinstance(item basestring):             yield (base + (index)) item         else:             for pair in enumerate_recursive(item (base + (index))):                 yield pair  def grep_index(filt iter):     return (index for index text in iter if filt in text)  l = list(grep_index('opt1' enumerate(sys.argv)))   # non-recursive r = list(grep_index('diff' enumerate_recursive(your_data)))  # recursive  
IS_IN_DB(dbset field label) db.member.year.requires = IS_IN_DB(db 'All_years.id' '%(fromY)d')  db.member.year.requires = IS_IN_DB(db 'All_years.id' '%(fromY)d to %(toY)d')  
easy_install -i http://eggs.sadphaeton.com identity.model python -c "from SimpleHTTPServer import test; test()" easy_install -f http://localhost:8080/ &lt;modulename&gt; 
ast.literal_eval In [110]: import ast  In [111]: astr="{'key1':'value1''key2':'value2'}"  In [113]: ast.literal_eval(astr) Out[113]: {'key1': 'value1' 'key2': 'value2'}  
lambda x: True if x % 2 == 0 else False  print raise 
DEFAULT_CHARSET HttpRequest.encoding 
import sys  d = {} for line in sys.stdin:     parts = line.split("="2)     if len(parts) &lt; 2:         continue     k = parts[0].strip()     v = parts[1].strip()     d[k] = v  print d['CENTRAL_BODY']  
./manage.py None if not MyModel.objects.filter(content=mytext).count():  
os.makedirs(path exist_ok=True) FileExistsError: [Errno 17] path import os  parent = os.path.dirname(__file__)  target = os.path.join(parent 'target')  os.makedirs(target exist_ok=True) os.makedirs(target exist_ok=True)  os.rmdir(target)  with open(target 'w'):     pass  os.makedirs(target exist_ok=True)  
 def process_all(pf):    print "PID: " os.getpid()    print "Script Dir: " pf[0]    print "Script: " pf[1]    os.chdir(pf[0])    call(['postprocessing_saudi' pf[1]])   if __name__ == '__main__':    pool = Pool(processes=2)    files paths = find_sea_files()    pathfile = [[paths[i]files[i]] for i in range(len(files))]    pool.map(process_all pathfile 1) # Ensure the chunk size is 1    pool.close()    pool.join()  
probsoln probsoln \loadrandomproblems[dataset]{n}{filename} n filename dataset loops.tex functions.tex exam.tex \newproblem{IPOpattern}{Which of the following is not a part of the IPO pattern?     \\ a) Input \quad b) Program \quad c) Process \quad d) Output}{The correct     answer goes here.}  \newproblem{input}{In Python getting user input is done with a special expression     called: \\ a) for \quad b) read \quad c) simultaneous assignment \quad     d) input}{The correct answer goes here.}  \documentclass{report} \usepackage{probsoln} \begin{document} \hideanswers \chapter{Loops} % randomly select 2 problems from loops.tex and add to % the data set called 'loops' \loadrandomproblems[loops]{2}{loops}  % Display the problems \renewcommand{\theenumi}{\thechapter.\arabic{enumi}} \begin{enumerate} \foreachproblem[loops]{\item\label{prob:\thisproblemlabel}\thisproblem} \end{enumerate} % You may need to change \theenumi back here  \chapter{Functions} % randomly select 2 problems from functions.tex and add to % the data set called 'functions' \loadrandomproblems[functions]{2}{functions}  % Display the problems \renewcommand{\theenumi}{\thechapter.\arabic{enumi}} \begin{enumerate} \foreachproblem[functions]{\item\label{prob:\thisproblemlabel}\thisproblem} \end{enumerate} % You may need to change \theenumi back here  \appendix  \chapter{Solutions} \showanswers \begin{itemize} \foreachdataset{\thisdataset}{% \foreachproblem[\thisdataset]{\item[\ref{prob:\thisproblemlabel}]\thisproblem} } \end{itemize}  \end{document}  
from django.core.management.base import BaseCommand from mailing.msystem.models import Alarm  class Command(BaseCommand):     help = "Displays data"     def handle(self *args **options):         x = Alarm.objects.all()         for i in x:             print i.name  
(def fibs    (map first         (iterate             (fn [[ a b       ]]                   [ b (+ a b) ])             [0 1])))       
0b1111000 v = ord(data[17]) major = (v &amp; 0xF0) &gt;&gt; 4 minor = (v &amp; 0x0F)  
utf8 utf8_bin VARCHAR VARBINARY to_python return hexlify(value) 
ctypes from ctypes import *  buf = create_unicode_buffer(260) GetLongPathName = windll.kernel32.GetLongPathNameW rv = GetLongPathName(path buf 260) print buf.value  
raw_input().split() map(int raw_input().split()) input() import os;os.system('do something bad') 
#!/usr/bin/env python import numpy as np from datetime import date x=np.array([(date(200011)01)               (date(200011)11)               (date(200011)10)               (date(200011)00)               ])  y=np.rec.fromrecords( x )  z=np.empty((len(y)len(y.dtype))dtype='object') for idxfield in enumerate(y.dtype.names):    z[:idx]=y[field] assert (x==z).all()  
POSTAL_CODE_IDPostalCodeCityProvinceProvinceCodeCityTypePoint 1A0E 2Z0MonkstownNewfoundlandNLD"47.150300000000001-55.299500000000002"  import datetime from google.appengine.ext import db from google.appengine.tools import bulkloader   class PostalCode(db.Model):   id = db.IntegerProperty()   postal_code = db.PostalAddressProperty()   city = db.StringProperty()   province = db.StringProperty()   province_code = db.StringProperty()   city_type = db.StringProperty()   geo_pt = db.GeoPtProperty()  class PostalCodeLoader(bulkloader.Loader):   def __init__(self):     bulkloader.Loader.__init__(self 'PostalCode'                                [('id' int)                                 ('postal_code' str)                                 ('city' str)                                 ('province' str)                                 ('province_code' str)                                 ('city_type' str)                                 ('geo_pt' str)                                ])  loaders = [PostalCodeLoader]  
def make_adder(x):     def add(y):         return x + y     return add  plus5 = make_adder(5) print(plus5(12))  # prints 17  x 
SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST  
for i in range(c.shape[-1]):     print c[::i]  for i in range(c.shape[-1]):     print c[...i]  swapaxes() python -m timeit -s 'import numpy; c = numpy.arange(24).reshape(234)' \     'for r in c.swapaxes(20).swapaxes(12): u = r' 100000 loops best of 3: 3.69 usec per loop  python -m timeit -s 'import numpy; c = numpy.arange(24).reshape(234)' \     'for i in range(c.shape[-1]): u = c[::i]' 100000 loops best of 3: 6.08 usec per loop  python -m timeit -s 'import numpy; c = numpy.arange(24).reshape(234)' \     'for r in numpy.rollaxis(c 2): u = r' 100000 loops best of 3: 6.46 usec per loop  swapaxes() c[::i] : c[...i] python -m timeit -s 'import numpy; c = numpy.arange(24).reshape(234)' \     'for i in range(c.shape[-1]): u = c[...i]' 100000 loops best of 3: 4.74 usec per loop  
global var  var=0 def f():     global var     var=1 f() print(var) # 1  &lt;---- the var outside the "def f" block is affected by calling f()  var=0 def f():     var=1 f() print(var) # 0  &lt;---- the var outside the "def f" block is unaffected  globals().update(var)  #!/usr/bin/env python  # Here is the original globals() dict print(globals()) # {'__builtins__': &lt;module '__builtin__' (built-in)&gt; '__name__': '__main__' '__file__': '/home/unutbu/pybin/test.py' '__doc__': None}  var={'x':'Howdy'} globals().update(var)  # Now the globals() dict contains both var and 'x' print(globals()) # {'var': {'x': 'Howdy'} 'x': 'Howdy' '__builtins__': &lt;module '__builtin__' (built-in)&gt; '__name__': '__main__' '__file__': '/home/unutbu/pybin/test.py' '__doc__': None}  # Lo and behold you've defined x without saying x='Howdy' ! print(x) Howdy  
import time import sys while True:     for char in 'abcdefx':         sys.stdout.write(char)         sys.stdout.flush()         time.sleep(0.1)  import sys while True:     char = sys.stdin.read(1)     if not char:         break     if char != 'x':         sys.stdout.write(char)         sys.stdout.flush()  python so_gen.py | python so_filter.py 
class UrlBuilder:     def __init__(selfdomainpath="blah"params="foo=bar"):         self.domain = domain         self.path = path         self.params = params      def withPath(selfpath):         self.path = path         return self      def withParams(selfparams):         self.params = params         return self      def __str__(self):         return 'http://' + self.domain + '/' + self.path + '?' + self.params         # or return urlparse.urlunparse( ( "http" self.domain self.path self.params "" "" )      def build(self):         return self.__str__()  if __name__ == '__main__':     u = UrlBuilder('www.example.com')     print u.withPath('bobloblaw')     print u.withParams('lawyer=yes')     print u.withPath('elvis').withParams('theking=true')  
from django.core.cache import cache  def get_user(request):     user_id = request.GET.get("user_id")     user = cache.get("user_id_%s"%user_id)     if user is None:         user = User.objects.get(pk=user_id)         cache.set("user_id_%s"%user_id user 10*60) # 10 minutes     ...     ..     .  
def foo():     bar()  def bar():     foo()  foo() foo foo bar 
(def prime-gen      (let [primes (atom [])]        (for [n (iterate inc 2)              :when (not-any? #(zero? (rem n %))                              (filter #(&lt;= % (Math/sqrt n))                                       @primes))]          (do (swap! primes conj n)              n))))  (take 10 prime-gen)  ; =&gt; (2 3 5 7 11 13 17 19 23 29)  clojure.contrib.lazy-seqs 
readlines() open() readlines() writelines() my_file = open(filename "r") lines_of_file = my_file.readlines() lines_of_file.insert(-1 "This line is added one before the last line") my_file.writelines(lines_of_file)  xml.dom.minidom 
&gt;&gt;&gt; data '\x00\x00\x00\x01\x00\x04AMTD\x00\x00\x00\x00\x02A\x9733A\x99\\)A\x90=qA\x91\xd7\nG\x0f\xc6\x14\x00\x00\x01\x16j\xe0h\x80A\x93\xb4\x05A\x97\x1e\xb8A\x90z\xe1A\x96\x8fWF\xe6.\x80\x00\x00\x01\x16zS|\x80\xff\xff' &gt;&gt;&gt; from struct import unpack calcsize &gt;&gt;&gt; scount slength = unpack("!IH" data[:6]) &gt;&gt;&gt; assert scount == 1 &gt;&gt;&gt; symbol error_code = unpack("!%dsb" % slength data[6:6+slength+1]) &gt;&gt;&gt; assert error_code == 0 &gt;&gt;&gt; symbol 'AMTD' &gt;&gt;&gt; bar_count = unpack("!I" data[6+slength+1:6+slength+1+4]) &gt;&gt;&gt; bar_count (2) &gt;&gt;&gt; bar_format = "!5fQ"                                                          &gt;&gt;&gt; from collections import namedtuple &gt;&gt;&gt; Bar = namedtuple("Bar" "Close High Low Open Volume Timestamp")              &gt;&gt;&gt; b = Bar(*unpack(bar_format data[6+slength+1+4:6+slength+1+4+calcsize(bar_format)])) &gt;&gt;&gt; b Bar(Close=18.899999618530273 High=19.170000076293945 Low=18.030000686645508 Open=18.229999542236328 Volume=36806.078125 Timestamp=1195794000000L) &gt;&gt;&gt; import time &gt;&gt;&gt; time.ctime(b.Timestamp//1000) 'Fri Nov 23 08:00:00 2007' &gt;&gt;&gt; int(b.Volume*100 + 0.5) 3680608  
__subclasses__ __subclasses__ __subclasses__ 
&gt;&gt;&gt; import struct &gt;&gt;&gt; struct.unpack('!f' '41973333'.decode('hex'))[0] 18.899999618530273 &gt;&gt;&gt; struct.unpack('!f' '41995C29'.decode('hex'))[0] 19.170000076293945 &gt;&gt;&gt; struct.unpack('!f' '470FC614'.decode('hex'))[0] 36806.078125  
nonlocal 
try:     thevariable except NameError:     print("well it WASN'T defined after all!") else:     print("sure it was defined.")  
&gt;&gt;&gt; 'foo'.decode('mac-turkish') u'foo'  $pylib/encodings/mac_*.py 
nikicc def test():     """Stupid test function"""     lst = []     for i in range(100):         lst.append(i)  if __name__ == '__main__':     import timeit     print(timeit.timeit("test()" setup="from __main__ import test"))  timeit.timeit(stmt='pass' setup='pass' timer=&lt;default timer&gt;   number=1000000) Timer timeit Timer.timeit(number=1000000) timeit garbage       collection timeit.Timer('for i in xrange(10): oct(i)' 'gc.enable()').timeit() import cProfile import re cProfile.run('re.compile("foo|bar")')        197 function calls (192 primitive calls) in 0.002 seconds  Ordered by: standard name  ncalls  tottime  percall  cumtime  percall filename:lineno(function)      1    0.000    0.000    0.001    0.001 &lt;string&gt;:1(&lt;module&gt;)      1    0.000    0.000    0.001    0.001 re.py:212(compile)      1    0.000    0.000    0.001    0.001 re.py:268(_compile)      1    0.000    0.000    0.000    0.000 sre_compile.py:172(_compile_charset)      1    0.000    0.000    0.000    0.000 sre_compile.py:201(_optimize_charset)      4    0.000    0.000    0.000    0.000 sre_compile.py:25(_identityfunction)    3/1    0.000    0.000    0.000    0.000 sre_compile.py:33(_compile)  profile pycallgraph graphviz -- ./mypythonscript.py  
-d sys.flags.debug 
queue.get() queue.task_done() queue.join() 
def group_required(func):     def _decorator(request *args **kwargs):         hostname = request.META.get('HTTP_HOST')         lang = hostname.split(".")[0]         if not lang in request.user.groups:             return HttpResponse("Access denied")         return func(*args **kwargs)     return _decorator  
isinstance() all(map()) all([]) True TypeError def isListEmpty(inList):     if isinstance(inList list): # Is a list         return all( map(isListEmpty inList) )     return False # Not a list  
exec func = "def f():\n" if config_f1:     func += " f1()\n" if config_f2:     func += " f2()\n" exec func in globals()  f() 
import osmmap f=os.open("afile"os.O_RDWR) m=mmap.mmap(f0) m[4:9]="01234" os.close(f)  
class Class1(object):     def __init__(self *args **kw):         self.x = Class2("Woo!" self)  class Class2(object):     def __init__(self word creator *args **kw):         self._creator = creator         print word  
&gt;&gt;&gt; ptext = doc.createTextNode("This is a test!") &gt;&gt;&gt; x509cert.appendChild(ptext)  "&lt;ds:X509Certificate&gt;" 
from PIL import Image &gt;&gt;&gt; im1 = Image.open('img1.jpg') &gt;&gt;&gt; im2 = Image.open('img2.jpg').resize(im1.size)  &gt;&gt;&gt; im1 = Image.open('img1.jpg') &gt;&gt;&gt; im2 = Image.new(im1.mode im1.size)  
set_pos up_key down_key _key self.sel_row += increment sel_row if self.top_item &lt;= self.sel_row &lt; self.top_item + self.screen_rows sel_row self.top_item 
distutils.dir_util.remove_tree 
def getDateAndTime(seconds=None):  """   Converts seconds since the Epoch to a time tuple expressing UTC.   When 'seconds' is not passed in convert the current time instead.   :Parameters:       - `seconds`: time in seconds from the epoch.   :Return:       Time in UTC format. """ return time.strftime("%Y-%m-%dT%H:%M:%SZ" time.gmtime(seconds))`  time.mktime(time.localtime(calendar.timegm(utc_time)))  
grep a b b cut sdtin Popen close_fds=False cut a grep a cut cut from subprocess import Popen PIPE  p1 = Popen(["grep" "-v" "not"] stdin=PIPE stdout=PIPE) p2 = Popen(["cut" "-c" "1-10"] stdin=p1.stdout stdout=PIPE close_fds=True) p1.stdin.write('Hello World\n') p1.stdin.close() result = p2.stdout.read()  assert result == "Hello Worl\n"  close_fds=True p1.stdin select.select() close_fds=True fd preexec_fn p2 = Popen(cmd2 stdin=p1.stdout stdout=PIPE stderr=devnull preexec_fn=p1.stdin.close)  
self.fields['whatever'].initial None from django import forms  _choices = ['to be' 'not to be'] class SomeForm(forms.Form):     field = forms.ChoiceField(choices=[(item item) for item in _choices]                    widget=forms.HiddenInput()) # the real field      mock_field = forms.ChoiceField(required=False # doesn't get submitted                         choices=[(item item) for item in _choices]                         label="The question"                         widget=forms.Select(attrs={'disabled':'disabled'}))      def __init__(self *args **kwargs):         super(SomeForm self).__init__(*args **kwargs)         mock_initial = kwargs['initial']['field']         self.fields['mock_field'].choices = [(mock_initial mock_initial)]  field 
APPEND_SLASH 
SFTPClient SSHClient sftp_client = ssh_client.open_sftp() remote_file = sftp_client.open('remote_filename') try:     for line in remote_file:         # process line finally:     remote_file.close()  
for line in f:     tokens = line.split(" ")     current_state input_val next_state = int(tokens[0]) tokens[1] int(tokens[2])  for line in f:     current_state input_val next_state = parseline(line)  def parseline(line):     tokens = line.split(" ")     return (int(tokens[0]) tokens[1] int(tokens[2]))  
mass_replace chmod +x mass_replace python mass_replace #!/usr/bin/python  import os import re import sys  # list of extensions to replace DEFAULT_REPLACE_EXTENSIONS = None # example: uncomment next line to only replace *.c *.h and/or *.txt # DEFAULT_REPLACE_EXTENSIONS = (".c" ".h" ".txt")  def try_to_replace(fname replace_extensions=DEFAULT_REPLACE_EXTENSIONS):     if replace_extensions:         return fname.lower().endswith(replace_extensions)     return True   def file_replace(fname pat s_after):     # first see if the pattern is even in the file.     with open(fname) as f:         if not any(re.search(pat line) for line in f):             return # pattern does not occur in file so we are done.      # pattern is in the file so perform replace operation.     with open(fname) as f:         out_fname = fname + ".tmp"         out = open(out_fname "w")         for line in f:             out.write(re.sub(pat s_after line))         out.close()         os.rename(out_fname fname)   def mass_replace(dir_name s_before s_after replace_extensions=DEFAULT_REPLACE_EXTENSIONS):     pat = re.compile(s_before)     for dirpath dirnames filenames in os.walk(dir_name):         for fname in filenames:             if try_to_replace(fname replace_extensions):                 fullname = os.path.join(dirpath fname)                 file_replace(fullname pat s_after)  if len(sys.argv) != 4:     u = "Usage: mass_replace &lt;dir_name&gt; &lt;string_before&gt; &lt;string_after&gt;\n"     sys.stderr.write(u)     sys.exit(1)  mass_replace(sys.argv[1] sys.argv[2] sys.argv[3])  mass_replace() re.compile() .endswith() .endswith() with file_replace() str.endswith() 
adDict[adId] = set(userId)  userId userId aleax set(['a' 'l' 'e' 'x']) .add(userId) userId aleax 'aleax' .add set([userId]) defaultdict setdefault csv 
len(sys.argv) != 1 len(sys.argv) &gt;&gt;&gt; len(sys.argv) 2 &gt;&gt;&gt; sys.argv ['/tmp/basename.py' '/path/to/home/Desktop/pgCodes/']  import sys os  def iflatten(xss):     'Iterable(Iterable(a)) -&gt; Iterable(a)'     return (x for xs in xss for x in xs)  def allfiles(dir):     'str -&gt; Iterable(str)'     return iflatten(files for path dirs files in os.walk(dir))  def ext(path):     'str -&gt; str'     (root ext) = os.path.splitext(path)     return ext[1:]  def main():     assert len(sys.argv) == 2 'usage: progname DIR'     dir = sys.argv[1]      exts = (ext(f) for f in allfiles(dir))     for e in exts:         print e  if __name__ == '__main__':     main()  
class myclass(object):     def __init__(self):         self.__age=None     @property     def age(self):         if self.__age is None:             self.__age=21  #This can be a long computation         return self.__age  __getattr__ class myclass(object):     def __getattr__(self attr):         if attr=="age":             self.age=21   #This can be a long computation         return super(myclass self).__getattribute__(attr)  __getattr__() age age __getattr__ 
&gt;&gt;&gt; n = 4 &gt;&gt;&gt; p = math.pi &gt;&gt;&gt; '{0:.{1}f}'.format(p n) '3.1416'  {1} {0:.4f} 4 &gt;&gt;&gt; '{number:.{digits}f}'.format(number=p digits=n) '3.1416'  format 
logger = logging.getLogger(__name__)  #someutils.py  class NullHandler(logging.Handler):     def emit(self record):         pass  null_handler = NullHandler()  logger = logging.getLogger(__name__) logger.addHandler(someutils.null_handler)  getLogger(__name__) settings.py 
Counter.objects.get_or_create(name = name) Counter.objects.filter(name = name).update(count = F('count')+1)  counter _ = Counter.objects.get_or_create(name = name) counter.count = F('count') +1 counter.save( update_fields=["count"] )  
&gt;&gt;&gt; import ntplibdatetime &gt;&gt;&gt; x = ntplib.NTPClient() &gt;&gt;&gt; datetime.datetime.utcfromtimestamp(x.request('europe.pool.ntp.org').tx_time) datetime.datetime(2009 10 21 7 1 54 716657)  
""" extrapolate ymd data with scipy UnivariateSpline """ import numpy as np from scipy.interpolate import UnivariateSpline     # pydoc scipy.interpolate.UnivariateSpline -- fitpack unclear from datetime import date from pylab import *  # ipython -pylab  __version__ = "denis 23oct"   def daynumber( ymd ):     """ 200511 -&gt; 0  200611 -&gt; 365 ... """     return date( ymd ).toordinal() - date( 200511 ).toordinal()  days values = np.array([     (daynumber(200511) 1.2 )     (daynumber(200541) 1.8 )     (daynumber(200591) 5.3 )     (daynumber(2005101) 5.3 )     ]).T dayswanted = np.array([ daynumber( year month 1 )         for year in range( 2005 2006+1 )         for month in range( 1 12+1 )])  np.set_printoptions( 1 )  # .1f print "days:" days print "values:" values print "dayswanted:" dayswanted  title( "extrapolation with scipy.interpolate.UnivariateSpline" ) plot( days values "o" ) for k in (123):  # line parabola cubicspline     extrapolator = UnivariateSpline( days values k=k )     y = extrapolator( dayswanted )     label = "k=%d" % k     print label y     plot( dayswanted y label=label  )  # pylab  legend( loc="lower left" ) grid(True) savefig( "extrapolate-UnivariateSpline.png" dpi=50 ) show()  
django-admin.py startproject southtest manage.py startapp movies manage.py startapp tv manage.py syncdb manage.py startmigration movies --initial manage.py startmigration tv --initial manage.py migrate manage.py shell          # added some fake data... manage.py startapp media manage.py startmigration media --initial manage.py migrate # edited code wrote new models but left old ones intact manage.py startmigration movies unified-videofile --auto # create a new (blank) migration to hand-write data migration manage.py startmigration movies videofile-to-movievideofile-data  manage.py migrate # edited code wrote new models but left old ones intact manage.py startmigration tv unified-videofile --auto # create a new (blank) migration to hand-write data migration manage.py startmigration tv videofile-to-movievideofile-data manage.py migrate # removed old VideoFile model from apps manage.py startmigration movies removed-videofile --auto manage.py startmigration tv removed-videofile --auto manage.py migrate  from django.db import models from media.models import VideoFile as BaseVideoFile  # This model remains until the last migration which deletes  # it from the schema.  Note the name conflict with media.models class VideoFile(models.Model):     movie = models.ForeignKey(Movie blank=True null=True)     name = models.CharField(max_length=1024 blank=True)     size = models.IntegerField(blank=True null=True)     ctime = models.DateTimeField(blank=True null=True)  class MovieVideoFile(BaseVideoFile):     movie = models.ForeignKey(Movie blank=True null=True related_name='shows')  from south.db import db from django.db import models from movies.models import *  class Migration:      def forwards(self orm):          # Adding model 'MovieVideoFile'         db.create_table('movies_movievideofile' (             ('videofile_ptr' orm['movies.movievideofile:videofile_ptr'])             ('movie' orm['movies.movievideofile:movie'])         ))         db.send_create_signal('movies' ['MovieVideoFile'])      def backwards(self orm):          # Deleting model 'MovieVideoFile'         db.delete_table('movies_movievideofile')  from south.db import db from django.db import models from movies.models import *  class Migration:      def forwards(self orm):         for movie in orm['movies.videofile'].objects.all():             new_movie = orm.MovieVideoFile.objects.create(movie = movie.movie)             new_movie.videofile_ptr = orm['media.VideoFile'].objects.create()              # videofile_ptr must be created first before values can be assigned             new_movie.videofile_ptr.name = movie.name             new_movie.videofile_ptr.size = movie.size             new_movie.videofile_ptr.ctime = movie.ctime             new_movie.videofile_ptr.save()      def backwards(self orm):         print 'No Backwards'  --db-dry-run manage.py startmigration manage.py schemamigration 
atexit 
deepcopy def unshared_copy(inList):     if isinstance(inList list):         return list( map(unshared_copy inList) )     return inList  alist = unshared_copy(your_function_returning_lists())  
pre_save pre_save post_save through 
def outline(im):     ''' Input binary 2D (NxM) image. Ouput array (2xK) of K (yx) coordinates         where 0 &lt;= K &lt;= 2*M.     '''     topbottom = np.empty((12*im.shape[1]) dtype=np.uint16)     topbottom[00:im.shape[1]] = np.argmax(im axis=0)     topbottom[0im.shape[1]:] = (im.shape[0]-1)-np.argmax(np.flipud(im) axis=0)     mask      = np.tile(np.any(im axis=0) (2))     xvalues   = np.tile(np.arange(im.shape[1]) (12))     return np.vstack([topbottomxvalues])[:mask].T  
fac(5) return 5 * fac(4)            return 4 * fac(3)                       return 3 * fac(2)                                  return 2 * fac(1)                                             return 1 * fac(0)                                                        1  1 fac(1) fac(1) fac(2) 
from Tkinter import *  master = Tk()  w = Text(master height=1 borderwidth=0) w.insert(1.0 "Hello world!") w.pack()  w.configure(state="disabled")  # if tkinter is 8.5 or above you'll want the selection background # to appear like it does when the widget is activated # comment this out for older versions of Tkinter w.configure(inactiveselectbackground=w.cget("selectbackground"))  mainloop()  
stderr 
#!/usr/bin/env python  class Make:     def __getattr__(self name):         self.__dict__[name] = Make()         return self.__dict__[name]  make = Make()  make.a.dot.separated.name = 666 make.anything.i.want = 777  print make.a.dot.separated.name print make.anything.i.want  __getattr__ make.anything.i.want m1 = make.anything    # calls make.__getattr__(&quot;anything&quot;) m2 = m1.i             # calls m1.__getattr__(&quot;i&quot;) m2.want = 777  __getattr__ Make object.__getattr__(self name) self name AttributeError __getattr__() __getattr__() __setattr__() __getattr__() __getattribute__() object.__setattr__(self name value) name value __setattr__() self.name = value self.__dict__[name] = value object.__setattr__(self name value) 
PATH /usr/bin:/bin 
in dict d = {"key1": 10 "key2": 23}  if "key1" in d:     print("this will execute")  if "nonexistent key" in d:     print("this will not")  dict.get() d = dict()  for i in range(100):     key = i % 10     d[key] = d.get(key 0) + 1  dict.setdefault() defaultdict collections from collections import defaultdict  d = defaultdict(int)  for i in range(100):     d[i % 10] += 1  in 
attempts = [     { 'database'='postgres' 'user'='pgsql' ...}     { 'database'='postgres' 'user'='postgres' 'host'='localhost' 'password'=getpass()}     ... ] conn = None for attempt in attempts:     try:         conn = psycopg2.connect(**attempt)         break     except psycopg2.OperationalError:         pass if conn is None:     raise a ruckus CURSOR = conn.cursor()  getpass() if 'password' in attempt: attempt['password'] = getpass() class MyCursor:     def __init__(self):         self.CURSOR = None     def __call__(self):         if self.CURSOR is None:             &lt;insert logic here&gt;         return self.CURSOR  get_cursor = MyCursor()  class MyCursor:     def __init__(self):         self.CURSOR = None     def __call__(self):         if self.CURSOR is None:             attempts = [                 {'database'='postgres' 'user'='postgres'}                 {'database'='postgres' 'user'='pgsql'}                 {'database'='postgres' 'user'='postgres' 'host'='localhost' 'password'=True}                 {'database'='postgres' 'user'='pgsql' 'host'='localhost' 'password'=True}             ]             conn = None             for attempt in attempts:                 if 'password' in attempt:                     attempt['password'] = getpass()                 try:                     conn = psycopg2.connect(**attempt)                     break # that didn't throw an exception we're done                 except psycopg2.OperationalError:                     pass             if conn is None:                 raise a ruckus # nothin' worked             self.CURSOR = conn.cursor()         return self.CURSOR get_cursor = MyCursor()  
fig.savefig('img/test.png') # note:  *no* forward slash before "img"  return '&lt;img src="/img/test.png" /&gt;' # note:  forward slash before "img"  if __name__ == '__main__':     import os.path     currdir = os.path.dirname(os.path.abspath(__file__))     conf = {'/css/style.css':{'tools.staticfile.on':True         'tools.staticfile.filename':os.path.join(currdir'css''style.css')}         '/img':{'tools.staticdir.on':True         'tools.staticdir.dir':os.path.join(currdir'img')}}     cherrypy.quickstart(root "/" config=conf)  
b = B() b.__class__ b.__class__.__base__ b.__class__.__bases__ b.__class__.__base__.__subclasses__()  
import copy  class Crazy(object):   def __init__(self body weird=copy.copy):     self.gomez = body     self.cousinitt = weird   def __mul__(self n):     return [self.cousinitt(x) for x in (self.gomez * n)]  a = Crazy([[]]) * 3  * __mul__ 
os.stat() import fileinput import os  # save original file ownership details stat = os.stat('permission.txt') uid gid = stat[4] stat[5]  for line in fileinput.FileInput("permission.txt"inplace=1):     line = line.strip()     if not 'def' in line:         print line     else:         line=line.replace(line'zzz')         print line   fileinput.close()  # restore original file ownership os.chown("permission.txt" uid gid)  
import gtk.gdk import sys  def PixelAt(x y):     w = gtk.gdk.get_default_root_window()     sz = w.get_size()     pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGBFalse8sz[0]sz[1])     pb = pb.get_from_drawable(ww.get_colormap()0000sz[0]sz[1])     pixel_array = pb.get_pixels_array()     return pixel_array[y][x]  print PixelAt(int(sys.argv[1]) int(sys.argv[2]))  get_pixels_array 
subprocess.Popen(["python" "test.py"]) subprocess.Popen(["nohup" "python" "test.py"]) 
import django.utils.translation.trans_real as trans from django.utils.thread_support import currentThread  def isactive():   return currentThread() in trans._active  
#!/usr/bin/env python # -*- coding= UTF-8 -*-  import UserDict  class DefaultDict(UserDict.UserDict) :      default_value = 'RESERVED'      def __getitem__(self key) :         return self.data.get(key DefaultDict.default_value)   d = DefaultDict() d["yes"] = True; print d["yes"] print d["no"]  
p print '%2d' % tot + ': %(nick)-15s \t (%(x)d|%(y)d) \t was: %(oldnick)15s' % p  
doodahs = (     (0 "FOO")     (257 "BAR")     (258 "FISH")     (279 "MOOSE")     (280 "Darth Vader")     (65535 "Death to all newbies") )  
from optparse import OptionParser  parser = OptionParser() parser.add_option("-u" "--user" dest="user"                   help="Database username") parser.add_option("-p" "--password" dest="password"                   help="Database password") parser.add_option("-D" "--database" dest="database" default="myDatabase"                   help="Database name") parser.add_option("-e" "--engine" dest="engine" default="mysql"                   help="Database engine") parser.add_option("-H" "--host" dest="host" default="localhost"                   help="Database host")  (options args) = parser.parse_args()  def opt_hash(name):     global options     return getattr(options name)  options.__getitem__ = opt_hash  metadata.bind = '%(engine)s://%(user)s:%(password)s@%(host)s/%(database)s' % options  
namedtuple nt.py from collections import namedtuple  Point_ = namedtuple("Point" ["x" "y"])  class Point(Point_):     """ A point in 2d space """     pass  &gt;&gt;&gt; print nt.Point.__doc__  A point in 2d space   &gt;&gt;&gt; help(nt.Point)  # which outputs...  def NamedTupleWithDocstring(docstring *ntargs):     nt = namedtuple(*ntargs)     class NT(nt):         __doc__ = docstring     return NT  Point3D = NamedTupleWithDocstring("A point in 3d space" "Point3d" ["x" "y" "z"])  p3 = Point3D(123)  print p3.__doc__  A point in 3d space  
#!/usr/bin/python # -*- coding: utf-8 -*- # Copyright (C) 2008-2009 Rémy HUBSCHER &lt;natim@users.sf.net&gt; - http://www.trunat.fr/portfolio/python.html  # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License or # (at your option) any later version.  # This program is distributed in the hope that it will be useful # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details.  # You should have received a copy of the GNU General Public License along # with this program; if not write to the Free Software Foundation Inc. # 51 Franklin Street Fifth Floor Boston MA 02110-1301 USA.  # Using : #   - Python Imaging Library PIL    http://www.pythonware.com/products/pil/index.htm #   - pyexiv2                       http://tilloy.net/dev/pyexiv2/  ### # What is doing this script ? # #  1. Take a directory of picture from a Reflex Camera (Nikon D90 for example) #  2. Use the EXIF Orientation information to turn the image #  3. Remove the thumbnail from the EXIF Information #  4. Create 2 image one maxi map in 600x600 one mini map in 200x200 #  5. Add a comment with the name of the Author and his Website #  6. Copy the EXIF information to the maxi and mini image #  7. Name the image files with a meanful name (Date of picture)  import os sys try:     import Image except:     print "To use this program you need to install Python Imaging Library - http://www.pythonware.com/products/pil/"     sys.exit(1)  try:     import pyexiv2 except:     print "To use this program you need to install pyexiv2 - http://tilloy.net/dev/pyexiv2/"     sys.exit(1)  ############# Configuration ############## size_mini = 200 200 size_maxi = 1024 1024  # Information about the Photograph should be in ASCII COPYRIGHT="Remy Hubscher - http://www.trunat.fr/" ARTIST="Remy Hubscher" ##########################################  def listJPEG(directory):     "Retourn a list of the JPEG files in the directory"     fileList = [os.path.normcase(f) for f in os.listdir(directory)]     fileList = [f for f in fileList if os.path.splitext(f)[1]  in ('.jpg' '.JPG')]     fileList.sort()     return fileList  def _mkdir(newdir):     """     works the way a good mkdir should :)       - already exists silently complete       - regular file in the way raise an exception       - parent directory(ies) does not exist make them as well     """     if os.path.isdir(newdir):         pass     elif os.path.isfile(newdir):         raise OSError("a file with the same name as the desired " \                       "dir '%s' already exists." % newdir)     else:         head tail = os.path.split(newdir)         if head and not os.path.isdir(head):             _mkdir(head)         if tail:             os.mkdir(newdir)  if len(sys.argv) &lt; 3:     print "USAGE : python %s indir outdir [comment]" % sys.argv[0]     exit  indir  = sys.argv[1] outdir = sys.argv[2]  if len(sys.argv) == 4:     comment = sys.argv[1] else:     comment = COPYRIGHT  agrandie = os.path.join(outdir 'agrandie') miniature = os.path.join(outdir 'miniature')  print agrandie miniature  _mkdir(agrandie) _mkdir(miniature)  for infile in listJPEG(indir):     mini  = os.path.join(miniature infile)     grand = os.path.join(agrandie infile)     file_path = os.path.join(indir infile)      image = pyexiv2.Image(file_path)     image.readMetadata()      # We clean the file and add some information     image.deleteThumbnail()      image['Exif.Image.Artist'] = ARTIST     image['Exif.Image.Copyright'] = COPYRIGHT      image.setComment(comment)      # I prefer not to modify the input file     # image.writeMetadata()      # We look for a meanful name     if 'Exif.Image.DateTime' in image.exifKeys():         filename = image['Exif.Image.DateTime'].strftime('%Y-%m-%d_%H-%M-%S.jpg')         mini  = os.path.join(miniature filename)         grand = os.path.join(agrandie filename)     else:         # If no exif information leave the old name         mini  = os.path.join(miniature infile)         grand = os.path.join(agrandie infile)      # We create the thumbnail     #try:     im = Image.open(file_path)     im.thumbnail(size_maxi Image.ANTIALIAS)      # We rotate regarding to the EXIF orientation information     if 'Exif.Image.Orientation' in image.exifKeys():         orientation = image['Exif.Image.Orientation']         if orientation == 1:             # Nothing             mirror = im.copy()         elif orientation == 2:             # Vertical Mirror             mirror = im.transpose(Image.FLIP_LEFT_RIGHT)         elif orientation == 3:             # Rotation 180°             mirror = im.transpose(Image.ROTATE_180)         elif orientation == 4:             # Horizontal Mirror             mirror = im.transpose(Image.FLIP_TOP_BOTTOM)         elif orientation == 5:             # Horizontal Mirror + Rotation 90° CCW             mirror = im.transpose(Image.FLIP_TOP_BOTTOM).transpose(Image.ROTATE_90)         elif orientation == 6:             # Rotation 270°             mirror = im.transpose(Image.ROTATE_270)         elif orientation == 7:             # Horizontal Mirror + Rotation 270°             mirror = im.transpose(Image.FLIP_TOP_BOTTOM).transpose(Image.ROTATE_270)         elif orientation == 8:             # Rotation 90°             mirror = im.transpose(Image.ROTATE_90)          # No more Orientation information         image['Exif.Image.Orientation'] = 1     else:         # No EXIF information the user has to do it         mirror = im.copy()      mirror.save(grand "JPEG" quality=85)     img_grand = pyexiv2.Image(grand)     img_grand.readMetadata()     image.copyMetadataTo(img_grand)     img_grand.writeMetadata()     print grand      mirror.thumbnail(size_mini Image.ANTIALIAS)     mirror.save(mini "JPEG" quality=85)     img_mini = pyexiv2.Image(mini)     img_mini.readMetadata()     image.copyMetadataTo(img_mini)     img_mini.writeMetadata()     print mini      print  
set(i['id'] for i in items)  
if platform == 'facebook':     from pyfacebook import FaceBook as Platform elif platform == 'myspace':     from pymyspace import Myspace as Platform else:     raise RuntimeError "not a valid platform"  Platform os name  = __import__ ('module') 
foo = AnEntity(...) foo.put() presence = PresenceEntity(key_name='x' parent=foo) presence.put() ... def exists(keys):   test_keys = [db.Key.from_path('PresenceEntity' 'x' parent=x) for x in keys)   return [x is not None for x in db.get(test_keys)]  
new_content = pygments.highlight(code.contents[0] lexer formatter)  new_content = pygments.highlight(code.decodeContents() lexer formatter)  
num_true = sum(1 for condition in d.values() if condition)  num_true = sum(d.values())  
$ r'(^|\D)\d{4}$' \D \d [0-9] [^0-9] os.walk def ListadorPastas(pasta):     resultado = []     for root dirs files in os.walk(pasta):         for d in dirs:           if (len(d)==4 or len(d)&gt;4 and not d[-5].isdigit()              ) and d[-4:].isdigit():               resultado.append(d)     return resultado  
__eq__ __hash__ __hash__ __eq__ 
admin_objects class UserAdminManager(models.AdminManager): """ Custom manager for the User model. """ def get_query_set(self):     """     Overwrites the get_query_set to only return Users in the queue.     """     return super(UserAdminManager self).get_query_set().filter(userprofile__queue=True)  get_query_set admin_objects User admin_objects = UserAdminManager()  
&lt;table&gt;     &lt;caption&gt;{% trans "Notices" %}&lt;/caption&gt;      &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;{% trans "Type" %}&lt;/th&gt;             &lt;th&gt;{% trans "Message" %}&lt;/th&gt;             &lt;th&gt;{% trans "Date of the Notice" %}&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt;         {% for notice in notices %}             {% if notice.is_unseen %}                 &lt;tr class="unseen_notice"&gt;             {% else %}                 &lt;tr class="notice"&gt;             {% endif %}                 &lt;td class="notice_type"&gt;[{% trans notice.notice_type.display %}]&lt;/td&gt;                 &lt;td class="notice_message"&gt;{{ notice.message|safe }}&lt;/td&gt;                 &lt;td class="notice_time"&gt;{{ notice.added|timesince }} {% trans "ago" %}&lt;/td&gt;             &lt;/tr&gt;         {% endfor %}     &lt;/tbody&gt; &lt;/table&gt;  django-notification 
thread.interrupt_main thread threading 
__iter__() __next__() next() __next__() next() for in 
pkill 
BufferingSMTPHandler 
return '''     &lt;html&gt;     &lt;body&gt;     &lt;table width="400" border="1"&gt;     &lt;tr&gt;     &lt;td&gt;%(numberofapplicants)s&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;     &lt;td width="400" height="400"&gt;&lt;img src="img/atest.png" width="400" height="400" /&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;/table&gt;     &lt;/body&gt;     &lt;/html&gt;     ''' % {"numberofapplicants": numberofapplicants}  
class Static(object):     def __init__(self **kwargs):         self.kwargs = kwargs      def __call__(self f):         def wrapped_f():             try:                 new_kwargs = {}                 for key in self.kwargs:                     i = getattr(f key)                     new_kwargs[key] = i                 self.kwargs = new_kwargs             except:                 pass             for key value in f(**self.kwargs).items():                 setattr(f key value)         return wrapped_f  @Static(x=0 y=5 z='...') def f(x y z):     x += 1     y += 5     print x y z     return locals()  &gt;&gt;&gt; f() 1 10 ... &gt;&gt;&gt; f() 2 15 ... &gt;&gt;&gt; f() 3 20 ...  def static(**kwargs):     def wrap_f(function):         def probeFunc(frame event arg):             if event == 'call':                 frame.f_locals.update(kwargs)                 frame.f_globals.update(kwargs)             elif event == 'return':                 for key in kwargs:                     kwargs[key] = frame.f_locals[key]                 sys.settrace(None)             return probeFunc         def traced():             sys.settrace(probeFunc)             function()         return traced     return wrap_f  @static(x=1) def f():     x += 1  global_x = 1 def test_non_static():     global global_x     global_x += 1   print 'Timeit static function: %s' % timeit.timeit(f) print 'Timeit global variable: %s' % timeit.timeit(test_non_static)  Timeit static function: 5.10412869535 Timeit global variable: 0.242917510783  
entities = Model.get_by_key_name(key_names) content_keys = [db.Key.from_path('Model' name 'ContentModel' name)                  for name in key_names] content_entities = ContentModel.get(content_keys)  
HEADER CODE attempts = 5 for attempt in xrange(attempts):     urllib2.initialization()     try:         while True:             urllib2.read(somebytes)             urllib2.read(somebytes)             urllib2.read(somebytes)             ...     except Exception e:         print e     else:         break FOOTER CODE  
urlopen len read() urlopen request('HEAD' url) getresponse getheader 
sys.executable 
finally sys.exc_info try:   whatever except:   here sys.exc_info is valid   to re-raise the exception use a bare `raise` else:   here you know there was no exception finally:   and here you can do exception-independent finalization  
sets sets import sets  DeprecationWarning a = { 1 2 3 }  
import collections  def make_hashable(obj):     """WARNING: This function only works on a limited subset of objects     Make a range of objects hashable.      Accepts embedded dictionaries lists or tuples (including namedtuples)"""     if isinstance(obj collections.Hashable):         #Fine to be hashed without any changes         return obj     elif isinstance(obj collections.Mapping):         #Convert into a frozenset instead         items=list(obj.items())         for i item in enumerate(items):                 items[i]=make_hashable(item)         return frozenset(items)     elif isinstance(obj collections.Iterable):         #Convert into a tuple instead         ret=[type(obj)]         for i item in enumerate(obj):                 ret.append(make_hashable(item))         return tuple(ret)     #Use the id of the object     return id(obj)  
import ConfigParser os def get_config():     config = ConfigParser.ConfigParser()     config.optionxform=str     try:         config.read(os.path.expanduser('~/.myrc'))         return config     except Exception e:         log.error(e)  c = get_config()   print c.options('rules')  
setuptools package_data setuptools distribute distutils from setuptools import setup find_packages  setup(     name='your_project_name'     version='0.1'     description='A description.'     packages=find_packages(exclude=['ez_setup' 'tests' 'tests.*'])     package_data={'': ['license.txt']}     include_package_data=True     install_requires=[] )  package_data={'': ['license.txt']} include_package_data=True  package_data dict package_data={'yourpackage': ['*.txt' 'path/to/resources/*.txt']}  py .py sdist MANIFEST.in MANIFEST.in tar.gz requirements.txt include requirements.txt recursive-include data *  include_package_data=True setup() 
#!/usr/bin/env python class O(object):     def __repr__(self):         return '&lt;%s.%s object at 0x%x&gt;'%(self.__module__self.__class__.__name__id(self)) o=O() print(repr(o))  # &lt;__main__.O object at 0xb7e7d0cc&gt;  
import numpy as np  a = array([123456]) b = array([145])  c = np.in1d(ab)  array([ True False False  True  True False] dtype=bool)  
if 'session_key' in request.session and 'uid' in request.session:     fb.session_key = request.session['session_key']     fb.uid = request.session['uid'] else:      try:         fb.auth_token = request.GET['auth_token']     except KeyError:         # Send user to the Facebook to login         return HttpResponseRedirect(fb.get_login_url())      # getSession sets the session_key and uid     # Store these in the cookie so we don't have to get them again     fb.auth.getSession()     request.session['session_key'] = fb.session_key     request.session['uid'] = fb.uid  import facebook  API_KEY     =   'your_api_key' SECRET_KEY  =   'your_secret_key'  fb = odb.facebook.Facebook(API_KEY SECRET_KEY)  fb_uid = self.request[API_KEY+'_user'] fb_session_key = self.request[API_KEY+'_session_key'] fb_ss = self.request[API_KEY+'_ss'] fb_signature = self.request[API_KEY] #no suffix for signature  fb.session_key = fb_session_key fb.uid = fb_uid  fb.friends.get() # Results in list of friends  
[float(i) for i in lst]  map 
row b row for f s t in W:     print b[f] b[s] b[t]  
export PYTHONPATH="/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/PyObjC/"  ./project-tool.py &gt;&gt;&gt; import objc  
for key value in post.iteritems():     setattr(my_model key value)  
# set values in current namespace for name in vars(messages):     v = getattr(messages name)     globals()[name] = v  
class TextFormatter:     def __init__(selflynx='/usr/bin/lynx'):         self.lynx = lynx      def html2text(self unicode_html_source):         "Expects unicode; returns unicode"         return Popen([self.lynx                        '-assume-charset=UTF-8'                        '-display-charset=UTF-8'                        '-dump'                        '-stdin']                        stdin=PIPE                        stdout=PIPE).communicate(input=unicode_html_source.encode('utf-8'))[0].decode('utf-8')  
Thread.__init__()   Thread.__init__(self)   super() 
zip &gt;&gt;&gt; x = ['this' 'is' 'the' 'first' 'list'] &gt;&gt;&gt; y = [1 2 3 4 5] &gt;&gt;&gt; z = [0.01 0.2 0.3 0.04 0.05] &gt;&gt;&gt; zip(xyz) [('this' 1 0.01) ('is' 2 0.20000000000000001) ('the' 3 0.29999999999999999) ('first' 4 0.040000000000000001) ('list' 5 0.050000000000000003)] &gt;&gt;&gt; for (abc) in zip(xyz): ...     print a b c ...  this 1 0.01 is 2 0.2 the 3 0.3 first 4 0.04 list 5 0.05  
cmds = '''  ''' a = 1 b = 2 c = 3 '''  exec(cmds) exec('''  ''') a = 1 b = 2 c = 3 ''')  
dict() myList = [] myList.append(["mykey1" "myvalue1"]) myList.append(["mykey2" "myvalue2"]) myDict = dict(myList)  &gt;&gt;&gt; myDict {'mykey2': 'myvalue2' 'mykey1': 'myvalue1'}  myDict = dict([['prop1' 'prop2']]) {'prop1': 'prop2'}  dict for key value in myList:     print key "=" value  
ElementTree pickle etree user_list 
ctypes 
QPixmap HBITMAP HICON HBITMAP GetIconInfo icons = win32gui.ExtractIconEx('C:/Program Files/Internet Explorer/iexplore.exe' 0 10) info = win32gui.GetIconInfo(icons[0][0]) pixmap = QtGui.QPixmap.fromWinHBITMAP(info[4]) info[3].close() info[4].close() # call win32gui.DestroyIcon on all the icons returned by ExtractIconEx  self.pixmap = QtGui.QPixmap.fromWinHBITMAP(self.bitmapFromHIcon(large[0]))  self.pixmap = QtGui.QPixmap.fromWinHBITMAP(self.bitmapFromHIcon(large[0]) 2)  2 QtGui.QPixmap.Alpha 
subplot(121)  # 1 row 2 columns Plot 1 ... subplot(122)  # 1 row 2 columns Plot 2  
conn.autocommit(True)  
import os time  allfiles = [] now = time.time()  # walk will return triples (current dir list of subdirs list of regular files) # file names are relative to dir at first for dir subdirs files in os.walk("/storage/disk-1/Media/Video/TV"):     for f in files:         if not f.endswith(".avi"):             continue         # compute full path name         f = os.path.join(dir f)         st = os.stat(f)         if st.st_mtime &lt; now - 3600*24*7:             # too old             continue         allfiles.append((f st))  
my_package\     my_subpackage\         __init__.py         deep_module.py     __init__.py     module.py     setup.py  my_package_source\     setup.py     README.txt     my_package\         my_subpackage\             __init__.py             deep_module.py         __init__.py         module.py  my_package_source\     setup.py     README.txt     MANIFEST     PKG-INFO     dist\         my_package_0.X.tar.gz (or .zip on windows I believe)     my_package\         my_subpackage\             __init__.py             deep_module.py         __init__.py         module.py  
class LogEntryAdmin(ModelAdmin):     actions = None     list_display = (         'action_time' 'user'         'content_type' 'object_repr'          'change_message')      search_fields = ['=user__username' ]     fieldsets = [         (None {'fields':()})          ]      def __init__(self *args **kwargs):         super(LogEntryAdmin self).__init__(*args **kwargs)         self.list_display_links = (None )  self.list_display_links = () template-tag 
import operator  [a for a b in groupby(thelist operator.attrgetter('equation')]  list file list(sometuple) list list 
0000000 # ! / u s r / b i n / p y t h o n \r \n                                           ^^  svn:eol-style native 
import urllib f = urllib.urlopen('http://www.cnn.com') page = f.read() f.close()  
(element) = myset  myset.get() element = next(iter(myset)) ¹  iter(myset).next() 
(?P&lt;name&gt;regex) ?P&lt;name&gt;regex &gt;&gt;&gt; import re &gt;&gt;&gt; re.match(r'^org/?P&lt;company_name&gt;\w+/$' 'org/companyA') &gt;&gt;&gt; re.match(r'^org/(?P&lt;company_name&gt;\w+)/?$' 'org/companyA') &lt;_sre.SRE_Match object at 0x10049c378&gt; &gt;&gt;&gt; re.match(r'^org/(?P&lt;company_name&gt;\w+)/?$' 'org/companyA').groupdict() {'company_name': 'companyA'}  
&lt;body&gt;...&lt;/body&gt; #!/usr/bin/env python import re  # Here we have a string with a multiline &lt;body&gt;...&lt;/body&gt; fileString='''baz&lt;body&gt;foo baby foo baby foo baby foo &lt;/body&gt;&lt;body&gt;bar&lt;/body&gt;'''  # re.DOTALL tells re that '.' should match any character including newlines. x = re.search('(&lt;body&gt;.*?&lt;/body&gt;)' fileString re.DOTALL) for match in x.groups():     print(match) # &lt;body&gt;foo # baby foo # baby foo # baby foo # &lt;/body&gt;  print(re.findall('(&lt;body&gt;.*?&lt;/body&gt;)' fileString re.DOTALL)) # ['&lt;body&gt;foo\nbaby foo\nbaby foo\nbaby foo\n&lt;/body&gt;' '&lt;body&gt;bar&lt;/body&gt;']  pat=re.compile('(&lt;body&gt;.*?&lt;/body&gt;)' re.DOTALL) print(pat.findall(fileString)) # ['&lt;body&gt;foo\nbaby foo\nbaby foo\nbaby foo\n&lt;/body&gt;' '&lt;body&gt;bar&lt;/body&gt;']  #!/usr/bin/env python from BeautifulSoup import BeautifulSoup  fileString='''baz&lt;body&gt;foo baby foo baby foo baby foo &lt;/body&gt;&lt;body&gt;bar&lt;/body&gt;''' soup = BeautifulSoup(fileString) print(soup.body) # &lt;body&gt;foo # baby foo # baby foo # baby foo # &lt;/body&gt;  print(soup.findAll('body')) # [&lt;body&gt;foo # baby foo # baby foo # baby foo # &lt;/body&gt; &lt;body&gt;bar&lt;/body&gt;]  
enter code here x = 'j f m a m j j a s o n d j f m a m j j a s o n d'.split() y = abs(randn(24)) x[6] = 'j\n2008' # replace "j" (January) with ('j' and the appropriate year x[18] = 'j\n2009' bar(xrange(len(x)) y width=0.1) bar(xrange(len(x)) y width=0.1) xticks(xrange(len(x)) x ha='center')  
# Size of "board" X = 10 Y = 10  neighbors = lambda x y : [(x2 y2) for x2 in range(x-1 x+2)                                for y2 in range(y-1 y+2)                                if (-1 &lt; x &lt;= X and                                    -1 &lt; y &lt;= Y and                                    (x != x2 or y != y2) and                                    (0 &lt;= x2 &lt;= X) and                                    (0 &lt;= y2 &lt;= Y))]  &gt;&gt;&gt; print(neighbors(5 5)) [(4 4) (4 5) (4 6) (5 4) (5 6) (6 4) (6 5) (6 6)]  
for e in l &gt;&gt;&gt; list(itertools.chain((e n) for n l in (('a' [12])('b'[34])) for e in l )) [(1 'a') (2 'a') (3 'b') (4 'b')]  &gt;&gt;&gt; X=itertools.chain(*(itertools.product(*i[::-1]) for i in (('a' [12])('b'[34])))) &gt;&gt;&gt; print list(X) [(1 'a') (2 'a') (3 'b') (4 'b')]  &gt;&gt;&gt; X=itertools.chain(*(itertools.product(*i) for i in (([12]'a')([34]'b')))) &gt;&gt;&gt; print list(X) [(1 'a') (2 'a') (3 'b') (4 'b')]  
current_module.new_name = func  setattr(current_module new_name func)  
from selenium import selenium import unittest time re csv logging  class Untitled(unittest.TestCase):     def setUp(self):         self.verificationErrors = []         self.selenium = selenium("localhost" 4444 "*firefox" "http://example.com")         self.selenium.start()         self.selenium.set_timeout("60000")      def test_untitled(self):         sel = self.selenium         spamReader = csv.reader(open('SubDomainList.csv' 'rb'))         for row in spamReader:             try:                 sel.open(row[0])             except Exception e:                 ofile = open('outputTest.csv' 'ab')                 ofile.write("error on %s: %s" % (row[0]e))             else:                 time.sleep(5)                 html = sel.get_html_source()                 ofile = open('output4001-5000.csv' 'ab')                 ofile.write(html.encode('utf-8') + '\n')             ofile.close()      def tearDown(self):         self.selenium.stop()         self.assertEqual([] self.verificationErrors)  if __name__ == "__main__":      unittest.main()  
require "rest_client" require "json"  r = RestClient.post "http://username:password@twitter.com/friendships/create.json"         :screen_name =&gt; "user_to_follow" j = JSON.parse(r)  
&gt;&gt;&gt; import datetime &gt;&gt;&gt; today = datetime.date.today() &gt;&gt;&gt; today + datetime.timedelta(days=-today.weekday() weeks=1) datetime.date(2009 10 26)  today - datetime.timedelta(days=today.weekday())  
def f(s n):     return ' '.join(s.split()[:n])  
class FooBarProtocol(protocol.DatagramProtocol):     def startProtocol(self):         self.transport.getHost().host   # =&gt; 0.0.0.0         self.transport.connect(self.dstHost self.dstPort)         self.transport.getHost().host   # =&gt; 192.168.1.102  
collections update __le__ __lt__ __eq__ __ne__ __gt__ __ge__ __and__ __or__ __sub__ __xor__ and isdisjoint collections.Set clear pop remove __ior__ __iand__ __ixor__ and __isub__ collections.MutableSet set collections.Set set sets.Set isinstance import collections  class LowercasingSet(collections.MutableSet):   def __init__(self initvalue=()):     self._theset = set()     for x in initvalue: self.add(x)   def add(self item):     self._theset.add(item.lower())   def discard(self item):     self._theset.discard(item.lower())   def __iter__(self):     return iter(self._theset)   def __len__(self):     return len(self._theset)   def __contains__(self item):     try:       return item.lower() in self._theset     except AttributeError:       return False  
func_list=[locals()[key] for key in locals().keys()             if callable(locals()[key]) and key.startswith('time')]  alist=range(1000000) times=[] for f in func_list:     n = 10     times.append( min(  t for t__ in (f(alist31) for i in range(n))))   for (timefunc_name) in zip(times func_list):     print '%s took %0.3fms.' % (func_name time*1000.)  &lt;function wrapper at 0x01FCB5F0&gt; took 39.000ms. &lt;function wrapper at 0x01FCB670&gt; took 41.000ms.  
.pid childid = [] for cmdline in cmdlines:   p = subprocess.Popen(cmdline.split())   childid[p.pid] = cmdline  childid while mustcontinue:   pid exitstat = os.wait()   cmdline = childid.pop(pid)   p = subprocess.Popen(cmdline.split())   childid[p.pid] = cmdline  mustcontinue 
from xml.dom.minidom import Document doc = Document() e = doc.createElement("abc") eh = doc.createElement("hello") s1 = 'bhaskar' text = doc.createTextNode(s1)  eh.appendChild(text) e.appendChild(eh)  e.toxml()  e.innerXml = s1 appendChild Python 2.6.2 (release26-maint Apr 19 2009 01:56:41)  [GCC 4.3.3] on linux2 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; from xml.dom.minidom import Document &gt;&gt;&gt; cert = "---- START CERTIFICATE ----\n   Hello world\n---- END CERTIFICATE ---" &gt;&gt;&gt; doc = Document() &gt;&gt;&gt; e = doc.createElement("cert") &gt;&gt;&gt; certEl = doc.createTextNode(cert) &gt;&gt;&gt; e.appendChild(certEl) &lt;DOM Text node "'---- START'..."&gt; &gt;&gt;&gt; print e.toxml() &lt;cert&gt;---- START CERTIFICATE ----    Hello world ---- END CERTIFICATE ---&lt;/cert&gt; &gt;&gt;&gt;   writexml doc.writexml(fobj) # or doc.writexml(fobj "" "  " "")  newline minidom 
array_np = numpy.asarray(array) low_values_flags = array_np &lt; lowValY  # Where values are low array_np[low_values_flags] = 0  # All low values set to 0  array_np = numpy.asarray(array) print numpy.sort(array_np[array_np &gt;= lowValY])[-highCountX:]  
import os import signal import subprocess import time from threading import Thread  process = None  def executeCommand(command runCommand):     Thread(target=runCommand args=(command)).start()  def runCommand(command):     global process     args = command.strip().split()     process = subprocess.Popen(         args shell=False stdout=subprocess.PIPE preexec_fn=os.setsid)      for line in process.communicate():         if line:             print "process:" line  if __name__ == '__main__':     executeCommand("./ascript.sh" runCommand)     time.sleep(1)     os.killpg(process.pid signal.SIGKILL)  $ time python poc.py  process: sleeping five  real    0m1.051s user    0m0.032s sys 0m0.020s  
def catch_io_errors(fn):     def decorator(*args **kwargs):         try:             return fn(*args **kwargs)         except IOError:             quit('whatever error text')     return decorator  @catch_io_errors def read_file():     with open(myfile 'r') as f:         for i in f:             print i  def read_file():     f = open(myfile 'r')     for i in f:         print i     f.close()  read_file = catch_io_errors(read_file)  
full_clean save ValidationError queryset.update() queryset.update() ModelForm ValidationError 
itertools.izip_longest def grouper(n iterable fillvalue=None):     "grouper(3 'ABCDEFG' 'x') --&gt; ABC DEF Gxx"     args = [iter(iterable)] * n     return itertools.zip_longest(*args fillvalue=fillvalue)  &gt;&gt;&gt; list(grouper(3 range(9))) [(0 1 2) (3 4 5) (6 7 8)] &gt;&gt;&gt; list(grouper(3 range(10))) [(0 1 2) (3 4 5) (6 7 8) (9 None None)]  fillvalue &gt;&gt;&gt; def mygrouper(n iterable): ...     args = [iter(iterable)] * n ...     return ([e for e in t if e != None] for t in itertools.zip_longest(*args)) ...  &gt;&gt;&gt; list(mygrouper(3 range(9))) [[0 1 2] [3 4 5] [6 7 8]] &gt;&gt;&gt; list(mygrouper(3 range(10))) [[0 1 2] [3 4 5] [6 7 8] [9]]  
Parent* p(new Parent); p-&gt;initialize();  boost::shared_ptr&lt;Parent&gt; p(new Parent); p-&gt;initialize();  Parent* parent = boost::python::extract&lt;Parent*&gt;(instance);  
else if &gt;&gt;&gt; for n in range(2 10): ...     for x in range(2 n): ...         if n % x == 0: ...             print n 'equals' x '*' n/x  ...             break ...         else: ...             # loop fell through without finding a factor ...             print n 'is a prime number' ...  3 is a prime number 4 equals 2 * 2 5 is a prime number 5 is a prime number 5 is a prime number 6 equals 2 * 3 7 is a prime number 7 is a prime number 7 is a prime number 7 is a prime number 7 is a prime number 8 equals 2 * 4 9 is a prime number 9 equals 3 * 3  
hashed_emails = facebook.hash_email('foo@bar.com')  # Wrong: accounts = [hashed_emails] accounts = [{"email_hash": hashed_emails}]   facebook.connect.registerUsers(accounts)  
itertools.chain() def flatten(*seq):     for item in seq:         if isinstance(item basestring):             yield item         else:             try:                 it = iter(item)             except TypeError:                 yield item                 it = None             if it is not None:                 for obj in flatten(it):                     yield obj  list(flatten(seq)) str.join() yield foo yield str(foo) "\t".join(str(o) for o in flatten(seq))  
class MyModel(models.Model):     CONSTANT = 1234     id = models.AutoField(primary_key=True) # not really needed but hey      @property     def big_id(self):         return self.pk * MyModel.CONSTANT  
return def testGeodatabase(self):     return self.outputGeodatabase in self.gp.ListWorkspaces("*""ALL")  
settings.py try:     from local_settings import * except ImportError as e:     pass  local_settings.py 
easy_install install http://pypi.python.org/packages/source/C/Cheetah/Cheetah-2.4.0.tar.gz#md5=873f5440676355512f176fc4ac01011e  
class Log:     BAT_STATS = ['AB' 'R' 'H' 'HR']      def __init__(self type):         for cat in Log.BAT_STATS:             setattr(self cat 0)  locals() 
os.chmod 000 111 111 000     rwx rwx rwx  rwx os.chmod os.chmod('myfile'0o666)  # read/write by everyone os.chmod('myfile'0o644)  # read/write by me readable for everone else  os.chmod('mydir'0o777)  # read/write by everyone os.chmod('mydir'0o755)  # read/write by me readable for everone else  0o777 0777 
struct.pack 
label() from sqlalchemy import select  def alias_dups(join):     dups = set(col.key for col in join.left.columns) &amp; \                 set(col.key for col in join.right.columns)     columns = []     for col in join.columns:         if col.key in dups:             col = col.label('%s_%s' % (col.table.name col.key))         columns.append(col)     return select(columns from_obj=[join]).alias()  class ST2(Base):     __table__ = alias_dups(t1.join(t2))  
event.GetId() event.GetEventObject()         self.entry.Bind(wx.EVT_KEY_UP functools.partial(self.Handle ob=self.entry))         self.entry2.Bind(wx.EVT_KEY_UP functools.partial(self.Handle ob=self.entry2))      def Handle(self event ob=None):             print ob  entry entry2 
inf &gt;&gt;&gt; 0 * float("inf") nan  inf &gt;&gt;&gt; 2.0**2 4.0 &gt;&gt;&gt; _**2 16.0 &gt;&gt;&gt; _**2 256.0 &gt;&gt;&gt; _**2 65536.0 &gt;&gt;&gt; _**2 4294967296.0 &gt;&gt;&gt; _**2 1.8446744073709552e+19 &gt;&gt;&gt; _**2 3.4028236692093846e+38 &gt;&gt;&gt; _**2 1.157920892373162e+77 &gt;&gt;&gt; _**2 1.3407807929942597e+154 &gt;&gt;&gt; _**2 Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in ? OverflowError: (34 'Numerical result out of range')  inf OverflowError inf 
from foo.bar.baz import bruf  
sys.path.append('/etc/django/domains/mydomain.com/myproject/')  
class FixedValueProperty(object):     def __init__(self value):         self.value = value     def __get__(self inst cls):         if inst is None:             return self         return self.value  &gt;&gt;&gt; class C(object): ...     prop = FixedValueProperty('abc') ...  &gt;&gt;&gt; o = C() &gt;&gt;&gt; o.prop 'abc' &gt;&gt;&gt; C.prop &lt;__main__.FixedValueProperty object at 0xb7eb290c&gt; &gt;&gt;&gt; C.prop.value 'abc' &gt;&gt;&gt; type(o).prop.value 'abc'  &gt;&gt;&gt; class C(object): ...     @property ...     def prop(self): ...         return 'abc' ...  &gt;&gt;&gt; C.prop &lt;property object at 0xb7eb0b6c&gt; &gt;&gt;&gt; C.prop.fget &lt;function prop at 0xb7ea36f4&gt;  
django.contrib.auth.models.User from django.utils.itercompat import groupby avatars = Avatar.objects.select_related("user").filter(valid=True).order_by("-user__date_joined")[:32] grouped_users = groupby(avatars lambda x: x.user) user_list = [] for user avatar_list in grouped_users:     user.avatar = list(avatar_list)[0]     user_list.append(user) # user_list is now what you asked for in the first_place:  # a list of users with their avatars  list avatar_list user.avatar for avatar in avatars:     user = avatar.user  
if 'file' in form.changed_data:      """      File is changed      """      raise forms.ValidationError("No don't change the file because blah blah") else:      """      File is not changed      """  
import urllib2 urllib2.install_opener(urllib2.build_opener())  
def addF(y):     def f(self x):         return "Hello" x "and" y      def decorate(cls):         cls.f = f         return cls      return decorate   @addF(1) class X(object):     pass  @addF(2) class Y(object):     pass  print X().f("X") print Y().f("Y")  &gt;&gt;&gt;  Hello X and 1 Hello Y and 2  
$ python Python 2.6.1 (r261:67515 Jul  7 2009 23:51:51)  [GCC 4.2.1 (Apple Inc. build 5646)] on darwin Type &quot;help&quot; &quot;copyright&quot; &quot;credits&quot; or &quot;license&quot; for more information.   &gt;&gt;&gt; import locale &gt;&gt;&gt; locale.getlocale() (None None) &gt;&gt;&gt; locale.setlocale(locale.LC_ALL '') 'en_GB.UTF-8' &gt;&gt;&gt; locale.getlocale() ('en_GB' 'UTF8')  
l = ("xxxxxxxxx" "yyyy""zz") print(max(l key=len))  max key l 
&gt;&gt;&gt; example = "%{test}%".format(test="name") &gt;&gt;&gt; print example %name%  
first = True for data in data_list:     if first:         first = False     else:         between_items()      item()  len() file = open('/path/to/file') for line in file:     process_line(line)      # No way of telling if this is the last line!  str.join() for for i line in enumerate(data_list):     if i &gt; 0:         between_items()     item()  len() def lookahead(iterable):     """Pass through all values from the given iterable augmented by the     information if there are more values to come after the current one     (True) or if it is the last value (False).     """     # Get an iterator and pull the first value.     it = iter(iterable)     last = next(it)     # Run the iterator to exhaustion (starting from the second value).     for val in it:         # Report the *previous* value (more to come).         yield last True         last = val     # Report the last value.     yield last False  &gt;&gt;&gt; for i has_more in lookahead(range(3)): ...     print(i has_more) 0 True 1 True 2 False  
&gt;&gt;&gt; b = [] &gt;&gt;&gt; a = set() &gt;&gt;&gt; a.intersection(b) set([])  &gt;&gt;&gt; b = [1 2] &gt;&gt;&gt; a = set([1 3]) &gt;&gt;&gt; a.intersection(b) set([1])  &gt;&gt;&gt; b = 1 &gt;&gt;&gt; a.intersection(b) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: 'int' object is not iterable  
sortedDigits 
class IRegistrationMessage { public: ...     virtual int _cdecl GetLength() const = 0;     virtual void _cdecl SetLength(int value) = 0; ... };  
# Now call the 'brother' method that does the real work. return self._do_something(arg1 arg2 arg3 arg3)  
with open('x.txt') as x: f = x.read()  with open('x.txt') as x: f = x.readlines()  from __future__ import with_statement f = open('x.txt').read()  f = open('x.txt').readlines()  
class Individualistic(object_or_whatever_bases):   def __init__(self whatever_args):     self.__class__ = type('GottaBeMe' (self.__class__ object) {})     # keep rocking...!-)  object 2.* self.__class__.__dict__ GottaBeMe __dict__ class WidthVariable:     def __init__(self object)         object.width = property(self.get_width)  object class WidthVariable(object):     def __init__(self obj)         obj.__class__.width = property(self.get_width)  
from collections import namedtuple  # use namedtuple to define some simple classes (requires Py2.6 or later) FooA = namedtuple('FooA' 'id name type foo') FooB = namedtuple('FooB' 'idfoo namefoo spam')  # create a wrapper class for FooB's to look like a FooA class FooAMimic(object):     attrMap = dict(zip(FooA._fields FooB._fields))     # or if the fields aren't nicely ordered declare this mapping explicitly     #~ attrMap = { 'id' : 'idfoo' 'name' : 'namefoo' 'foo' : 'spam' }     def __init__(self obj):         self.obj = obj     def __getattr__(self aname):         ob = self.obj         if aname in self.attrMap:             return getattr(ob self.attrMap[aname])         elif  hasattr(ob aname):             return getattr(ob aname)         else:             raise AttributeError("no such attribute " + aname)     def __dir__(self):         return sorted(set(dir(super(FooAMimicself))                            + dir(self.obj)                            + list(FooA._fields)))  # make some objects some FooA some FooB fa = FooA('a' 'b' 'c''d') fb = FooB('xx' 'yy' 'zz') fc = FooA('e' 'f' 'g''h')  # create list of items that are FooA's or FooA lookalikes coll = [fa FooAMimic(fb) fc]  # access objects like FooA's but notice that the wrapped FooB # attributes are still available too for f in sorted(coll key=lambda k : k.id):     print f.id '='      try:         print f.namefoo "(really a namefoo)"     except AttributeError:         print f.name  a = b e = f xx = yy (really a namefoo)  
with open(fileName "rb") as f:   arrayName = numpy.fromfile(f numpy.float32) arrayName.byteswap(True)  True if struct.pack('=f' 2.3) == struct.pack('&lt;f' 2.3):   arrayName.byteswap(True)  
[x for x in S for y in T if x==y]= 54.875  filter(lambda x:x in ST)= 0.391000032425  [val for val in S if val in T]= 12.6089999676  list(set(S) &amp; set(T))= 0.125  lambda 
basestring str unicode types.StringType str basestring str types 
send_mail() send_mail() django.core.mail.EmailMessage send() EmailMessage django.core.mail.EmailMultiAlternatives send_mail EmailMessage from django.core.mail import EmailMessage from email.mime.image import MIMEImage from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText  # Load the image you want to send as bytes img_data = open('logo.jpg' 'rb').read()  # Create a &quot;related&quot; message container that will hold the HTML  # message and the image. These are &quot;related&quot; (not &quot;alternative&quot;) # because they are different unique parts of the HTML message # not alternative (html vs. plain text) views of the same content. html_part = MIMEMultipart(_subtype='related')  # Create the body with HTML. Note that the image since it is inline is  # referenced with the URL cid:myimage... you should take care to make # &quot;myimage&quot; unique body = MIMEText('&lt;p&gt;Hello &lt;img src=&quot;cid:myimage&quot; /&gt;&lt;/p&gt;' _subtype='html') html_part.attach(body)  # Now create the MIME container for the image img = MIMEImage(img_data 'jpeg') img.add_header('Content-Id' '&lt;myimage&gt;')  # angle brackets are important img.add_header(&quot;Content-Disposition&quot; &quot;inline&quot; filename=&quot;myimage&quot;) # David Hess recommended this edit html_part.attach(img)  # Configure and send an EmailMessage # Note we are passing None for the body (the 2nd parameter). You could pass plain text # to create an alternative part for this message msg = EmailMessage('Subject Line' None 'foo@bar.com' ['bar@foo.com']) msg.attach(html_part) # Attach the raw MIMEBase descendant. This is a public method on EmailMessage msg.send()  from email.mime.image import MIMEImage from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText  # Load the image you want to send at bytes img_data = open('logo.jpg' 'rb').read()  # Create a &quot;related&quot; message container that will hold the HTML  # message and the image msg = MIMEMultipart(_subtype='related')  # Create the body with HTML. Note that the image since it is inline is  # referenced with the URL cid:myimage... you should take care to make # &quot;myimage&quot; unique body = MIMEText('&lt;p&gt;Hello &lt;img src=&quot;cid:myimage&quot; /&gt;&lt;/p&gt;' _subtype='html') msg.attach(body)  # Now create the MIME container for the image img = MIMEImage(img_data 'jpeg') img.add_header('Content-Id' '&lt;myimage&gt;')  # angle brackets are important msg.attach(img)  send_mail(subject msg.as_string() from [to] priority=&quot;high&quot;)  
[ ] [ ] 
Definition: cursor.execute(self query args=None)      query -- string query to execute on server     args -- optional sequence or mapping parameters to use with query.  sql_and_params = "INSERT INTO table VALUES (%s %s %s)" var1 var2 var3 cursor.execute(*sql_and_params)  cursor.execute(*sql_and_params)  sql_and_params = "INSERT INTO table VALUES (%s %s %s)" var1 var2 var3  cursor.execute cursor.execute(sql_and_params[0]sql_and_params[1:])  sql = "INSERT INTO table VALUES (%s %s %s)" args= var1 var2 var3 cursor.execute(sql args)  
FooPayment.amount has() 
string.split(pattern 1)[0]  string pattern 1 [0] &gt;&gt;&gt; s = "a descriptor 23 fd" &gt;&gt;&gt; s.split("23" 1)[0] 'a descriptor ' &gt;&gt;&gt; s.split("fdasfdsafdsa" 1)[0] 'a descriptor 23 fd'  reduce &gt;&gt;&gt; string = "a descriptor dps foo 23 bar fd quux" &gt;&gt;&gt; patterns = ["dps" "23" "fd"] &gt;&gt;&gt; reduce(lambda s pat: s.split(pat 1)[0] patterns string) 'a descriptor ' &gt;&gt;&gt; reduce(lambda s pat: s.split(pat 1)[0] patterns "uiopuiopuiopuipouiop") 'uiopuiopuiopuipouiop'  pat patterns string string.split(pat 1)[0] string.find &gt;&gt;&gt; s = "a descriptor 23 fd" &gt;&gt;&gt; s[:s.find("fd")] 'a descriptor 23 ' &gt;&gt;&gt; s[:s.find("23")]   'a descriptor ' &gt;&gt;&gt; s[:s.find("gggfdf")] # &lt;-- look out! last character got cut off 'a descriptor 23 f'  s.find &gt;&gt;&gt; def cutoff(string pattern): ...     idx = string.find(pattern) ...     return string[:idx if idx != -1 else len(string)] ...  &gt;&gt;&gt; cutoff(s "23") 'a descriptor ' &gt;&gt;&gt; cutoff(s "asdfdsafdsa") 'a descriptor 23 fd'  [:s.find(x)] s.find 
def parse(expr):     if re.match(r'\A(("[\w\s]+"|\w+)\s+)*\Z' expr):         return re.findall(r'("[\w\s]+"|\w+)' expr)  &gt;&gt;&gt; parse('foo "bar baz" "bob" ') ['foo' '"bar baz"' '"bob"'] &gt;&gt;&gt; parse('foo "bar b-&amp;&amp;az" "bob" ') &gt;&gt;&gt; parse('foo "bar" ') ['foo' '"bar"'] &gt;&gt;&gt; parse('"foo" bar ') ['"foo"' 'bar'] &gt;&gt;&gt; parse('foo"bar baz" "bob" ') &gt;&gt;&gt; parse('&amp;&amp;')  
foreach min def foreach(self f):     for d in self._data:         f(d)  def __iter__(self):     for d in self._data:         yield d  min min(myobj) 
json.loads dict obj = json.loads('{"name": "joe"}') person = obj['name']  
is a b a = 100.5 a is 100.5  # =&gt; False a == 100.5  # =&gt; True  a = [123] b = [123] a == b  # =&gt; True a is b  # =&gt; False a = b a == b  # =&gt; True a is b  # =&gt; True because if we change a b changes too.  == is == __eq__ is 
class MyClass:     def __int__(self a b c=None):         self.a = a         self.b = b         self.c = c  one = MyClass(12) one.c # None two = MyClass(123) two.c # 3  
from datetime import datetime  start = twf.CalendarDatePicker('StartDate' date_format = "%d/%m/%Y") start.default = datetime.now() # or any valid datetime object  end = twf.CalendarDatePicker('EndDate' date_format = "%d/%m/%Y" ) start.default = datetime.now() # or any valid datetime object  form = twf.TableForm('dateSel' action='changeDate' children=[start end])  
t.daemon = True t.setDaemon(True) t join join for i in range(0 thread_count):     threads[i].join()  while threading.active_count() &gt; 0:     time.sleep(0.1)  
def formfield(self **kwargs):     # This is a fairly standard way to set up some defaults     # while letting the caller override them.     defaults = {'form_class': MyFormField}     defaults.update(kwargs)     return super(HandField self).formfield(**defaults)  forms.CharField models.CharField 
struct typedef struct s_generator {     int current;     int (*func)(int); } generator;  int next(generator* gen) {     int result = gen-&gt;current;     gen-&gt;current = (gen-&gt;func)(gen-&gt;current);     return result; }  int next_multiple(int current) { return 2 + current; } generator multiples_of_2 = {0 next_multiple};  next(&amp;multiples_of_2);  
os.chown SUDO_* os.chown (some_path int(os.getenv('SUDO_UID')) int(os.getenv('SUDO_GID')))  
&gt;&gt;&gt; import urllib2 &gt;&gt;&gt; f = urllib2.urlopen("http://dalkescientific.com") &gt;&gt;&gt; f.headers.items() [('content-length' '7535') ('accept-ranges' 'bytes') ('server' 'Apache/2.2.14')  ('last-modified' 'Sun 09 Mar 2008 00:27:43 GMT') ('connection' 'close')  ('etag' '"19fa87-1d6f-447f627da7dc0"') ('date' 'Wed 28 Oct 2009 19:59:10 GMT')  ('content-type' 'text/html')] &gt;&gt;&gt; f.headers["Content-Length"] '7535' &gt;&gt;&gt;   
pdf = pisa.pisaDocument(StringIO.StringIO(html.encode("UTF-8")) result encoding='UTF-8')  
unescape import HTMLParser s= HTMLParser.HTMLParser().unescape(s)  s.decode(encoding) 
# -*- coding: utf-8 -*- c = u'€' print type(c) for b in c.encode('utf-8'):     print ord(b)  c = '€' print type(c) for b in c:     print ord(b)  IDLE 1.2.2       &gt;&gt;&gt; c = u'€' &gt;&gt;&gt; ord(c) 128 &gt;&gt;&gt; c.encode('utf-8') '\xc2\x80' &gt;&gt;&gt; c u'\x80' &gt;&gt;&gt; print c [the box thingy]   &gt;&gt;&gt; c = u'\u20ac' &gt;&gt;&gt; ord(c) 8364 &gt;&gt;&gt; c.encode('utf-8') '\xe2\x82\xac' &gt;&gt;&gt; c u'\u20ac' &gt;&gt;&gt; print c €  
mylist[::3] mylist = [i for i in range(100)] for i in mylist[::3]:     print(i)  
Load the word list (dictionary) Input the words to unscramble For each word:   Find every permutation of letters in that word (permutation)   For each permutation:     Add this permutation to the solution list if it exists in the dictionary Print the solutions that were found.  for an in permutation(s[1:]):  for pos in range(len(an)+1):  ans.append(an[:pos]+s[0]+an[pos:])  
__new__ __init__ class Foo(int):     def __new__(cls some_argument=None value=0):         i = int.__new__(cls value)         i._some_argument = some_argument         return i      def print_some_argument(self):         print self._some_argument  &gt;&gt;&gt; f = Foo(some_argument="I am a customized int" value=10) &gt;&gt;&gt; f 10 &gt;&gt;&gt; f + 8 18 &gt;&gt;&gt; f * 0.25 2.5 &gt;&gt;&gt; f.print_some_argument() I am a customized int  new 
&gt;&gt;&gt; class A: pass  &gt;&gt;&gt; isinstance(A type) True &gt;&gt;&gt; isinstance(A() type) False  
and_(photo_content_table.c.photoId == photo_table.c.id photo_content_table.c.locale == get_lang)  
setattr &gt;&gt;&gt; class AllMyFields: ...     def __init__(self dictionary): ...         for k v in dictionary.items(): ...             setattr(self k v) ...  &gt;&gt;&gt; o = AllMyFields({'a': 1 'b': 2}) &gt;&gt;&gt; o.a 1  
jython.jar jython.jar LIB jython.jar jython.jar LIB jython.jar python.cachedir python.path python.home  jython-complete.jar jython.jar 
yourloggingmodule.handler.newLogMessage(...)  handler 
import IPython.Shell ipshell = IPython.Shell.IPShell(argv=[] user_ns={'root':root}) ipshell.mainloop()  
itertools def twobytwo(t):   it = iter(t)   for x in it:     yield x next(it)  d = dict(twobytwo(t))  def twobytwo(t):   a b = itertools.tee(iter(t))   next(b)   return itertools.izip(a b)  d = dict(twobytwo(t))  d = dict((x next(it)) for it in (iter(t)) for x in it)  dict O(1) O(N) pairwise iterutils.py 
iProduct = 1 for iFactor in xrange(1 i+1):     iProduct *= iFactor  
s = ")"  # EOF in multi-line statement s = "("  # EOF in multi-line statement s = "]"  # EOF in multi-line statement s = "["  # EOF in multi-line statement s = "}"  # EOF in multi-line statement s = "{"  # EOF in multi-line statement  s = "$" s = "'"  
Queue Queue append pop with Queue 
%%%s%% %%s% % % % s % % %%%s%% % %s % 
f = opener.open(req) simplejson.load(f)  simplejson.load(f) 
class Test(models.Model):     title = models.CharField('title' max_length=200)     blah = models.CharField('blah' max_length=200)      def save(self force_insert=False force_update=False):         if not self.blah:             self.blah = 'hello'         super(Test self).save(force_insert force_update)  
__ __foo _ __foo _bar 
sys.path.append('/home/myuser/svn-repos') import myproject svn-repos myproject settings import settings sys.path.insert(0 'yourpath') settings 
gc.get_referrers(thatobject) gc.collect() thatobject .remove dict __dict__ 
import re pat = re.compile("^(.*class\s+\w+)(:.*)$") out_file = open("edited_file.py" "w") for line in open("generated_file.py"):     m = pat.match(line)     if m:         line = m.group(1) + "(object)" + m.group(2) + "\n"     out_file.write(line)  out_file.close()  object 
if re.search('[A-Za-z0-9]+' i):     print i  
updated_min = raw_input('Enter updated min (example: 2007-03-16T00:00:00): ') query = gdata.contacts.service.ContactsQuery() query.updated_min = updated_min  updated_min datetime 
delete import numpy as np  A = np.delete(A 1 0)  # delete second row of A B = np.delete(B 2 0)  # delete third row of B C = np.delete(C 1 1)  # delete second column of C  numpy.delete numpy.delete(arr obj axis=None) arr obj axis axis = 1 axis = 0 
PYTHONPATH=... export PYTHONPATH  
link /dump /exports 
print text print text.encode('utf-8') 
commit=False result = form.save(commit=False) result.host = calculate_the_host_from(result) result.save()  
import django.dispatch your_signal = django.dispatch.Signal(providing_args=["send_email"])  def your_callback(sender **kwargs):     print send_email  your_signal.connect(your_callback)  class YourModel(models.Model):     ...     def delete(self send_email=True):         super(YourModel self).delete()         your_signal.send(sender=self send_email=send_email)     ...  
import datetime from itertools import groupby from pprint import pprint  required_data={} for kg in groupby(mydatakey=lambda x: x.get('year')):     partial={}     for datum in g:         partial[datum.get('date').month]=datum         required_data[k]=[partial.get(m{}) for m in range(113)] pprint(required_data)  partial partial.get(m{}) 
sys.argv[1:] for grp in sys.argv[1:]:   for i in range(len(sh.col_values(8))):    if sh.cell(i 1).value == grp:       hlo.append(sh.cell(i 8).value)  
re / - [+-/] + / 
datetime &gt;&gt;&gt; import datetime &gt;&gt;&gt; x=datetime.datetime(1865 7 2 9 30 21) &gt;&gt;&gt; x.isoformat() '1865-07-02T09:30:21'  isoformat YYYY-MM-DDTHH:MM:SS.mmmmmm 
import re decimal r= re.compile('([^ =]+) *= *("[^"]*"|[^ ]*)')  d= {} for k v in r.findall(line):     if v[:1]=='"':         d[k]= v[1:-1]     else:         d[k]= decimal.Decimal(v)  &gt;&gt;&gt; d {'account': 'TEST1' 'subject': 'some value' 'values': '3=this 4=that' 'price': Decimal('20.11') 'Qty': Decimal('100.0')}  
if int(test[0]) is not len(test[1:]):  is is not = != len(cars) is 0 error error False 
print '''Status:501 Content-type: text/html  '''  print '''HTTP/1.1 501 Not Implemented Content-type: text/html  '''  
yourstring = receivedbytes.decode("utf-8")   utf-8 outbytes = yourstring.encode("utf-8")  
 1     import sys  2  3     def trace(frame event arg_unused):  4         print event frame.f_lineno frame.f_locals  5         return trace  6  7     sys.settrace(trace)  8  9     def foo(): 10         a = 1 11         b = 2 12 13         a = a + b 14 15     foo()  call 9 {} line 10 {} line 11 {'a': 1} line 13 {'a': 1 'b': 2} return 13 {'a': 3 'b': 2}  
manage.py syndcb manage.py reset yourapp 
fileobj = file.open(path mode) fileobj = fcn(fileobj) fileobj.writelines(fileobj.readlines())  fcn with open(filename "r") as f:     s = f.read() for transform_function in transforms:     s = transform_function(s) with open(filename "w") as f:     f.write(s)  
this. TestClass(string value) // Constructor {     this.testOne = value; }  L_0000: ldarg.0 // ... other initialization stuff  L_0004: ldarg.1 L_0005: stfld string TestProject.TestClass::testOne  class Test {     void TestMethod(Test instance) {         // Do something     }     void CallTestMethod() {         TestMethod(this);     }  .method public hidebysig instance void CallTestMethod() cil managed {     .maxstack 8     L_0000: nop      L_0001: ldarg.0      L_0002: ldarg.0      L_0003: call instance void CSharpConsoleApplication.Test::TestMethod(class CSharpConsoleApplication.Test)     L_0008: nop      L_0009: ret  }  ldarg.0 ldarg.1 
&gt;&gt;&gt; from itertools import izip &gt;&gt;&gt; t = [123456789101112] &gt;&gt;&gt; for a b in izip(*[iter(t)]*2): ...     print a b ... 1 2 3 4 5 6 7 8 9 10 11 12 &gt;&gt;&gt; for a b c in izip(*[iter(t)]*3): ...     print a b c ... 1 2 3 4 5 6 7 8 9 10 11 12 &gt;&gt;&gt; for a b c d in izip(*[iter(t)]*4): ...     print a b c d ... 1 2 3 4 5 6 7 8 9 10 11 12 &gt;&gt;&gt; for a b c d e f in izip(*[iter(t)]*6): ...     print a b c d e f ... 1 2 3 4 5 6 7 8 9 10 11 12 &gt;&gt;&gt;  
archives [datetime bool] datetime bool True archives from datetime import date  def archive(request):     arch = Post.objects.dates('date' 'month' order='DESC')      archives = {}      for i in arch:         year = i.year         month = i.month         try:             archives[year][month-1][1]=True         except KeyError:             # catch the KeyError and set up list for that year             archives[year]=[[date(ym1)False] for m in xrange(113)]             archives[year][month-1][1]=True      return render_to_response('blog/arhiva.html'                {'archives':sorted(archives.items()reverse=True)})  {% for year month_list in archives %}   {{ year }} archives:    {% for month has_link in month_list %}     {% if has_link %}&lt;a href=&quot;/{{ month.year }}/{{ month.month }}/&quot;&gt;{% endif %}       {{ month|date:&quot;M&quot; }}     {% if has_link %}&lt;/a&gt;{% endif %}   {% endfor %} {% endfor %}  rom_months = ['Ian' 'Feb' 'Mar' 'Apr' 'Mai' 'Iun'                'Iul' 'Aug' 'Sept' 'Oct' 'Noi' 'Dec']  archives[year]=[[date(yk+11)Falserom] for k rom in enumerate(rom_months)]  ... {% for month has_link rom_month in month_list %}   {% if has_link %}&lt;a href=&quot;/{{ month.year }}/{{ month.month }}/&quot;&gt;{% endif %}   {{ rom_month }} ...  
&gt;&gt;&gt; import dis &gt;&gt;&gt; dis.opname[54] 'STORE_MAP'  
except: logging basicConfig() **kwargs basicConfig() logging except: 
def in_list(small big):     l_sml = len(small)     l_big = len(big)     return any((big[i:i+l_sml]==small for i in xrange(l_big-l_sml+1)))  print in_list([421] [12342105]) # True print in_list([123] [124])           # False  
for i in range(01):     buffer_shp = newpath + "buff" + str(i) + ".shp"     gp.Buffer_analysis(center_services buffer_shp etc etc)  blahblah\buff0.shp blahblah\buff1.shp gp.Buffer_analysis() #Loop through a range of buffers (1 -&gt;100)     os.mkdir( path + results )           newpath = path + results      newpath = path + results # using os.path.join() is even better     os.mkdir(newpath)        os.mkdir()     buffered_analysis_count_shp = newpath + "buffered_analysis_count.shp"     count_txt = newpath + "count.txt"  
{{ stuff.0.a }}  
employees = Employee.objects.filter(id=your_id).select_related() if employees.count() == 1:     phone_numbers = employees[0].phonenumber_set.all()  
types MethodType from types import MethodType  class A(object):     def m(self):         print 'aaa'  a = A()  def new_m(self):     print 'bbb'  a.m = MethodType(new_m a)  __str__() 
QtGui.QCheckBox('%s' % item self.chk_People)  QListWidget QListWidgetItem addItem 
ConfigParser.readfp() cfg.readfp(codecs.open("myconfig" "r" "utf8"))  readfp() read_file() 
findall &gt;&gt;&gt; s = "Wilbur Smith (Billy son of John) Eddie Murphy (John) Elvis Presley Jane Doe (Jane Doe)" &gt;&gt;&gt; r = re.compile(r'(?:[^(]|\([^)]*\))+') &gt;&gt;&gt; r.findall(s) ['Wilbur Smith (Billy son of John)' ' Eddie Murphy (John)' ' Elvis Presley' ' Jane Doe (Jane Doe)']  "Wilbur Smith (son of John (Johnny son of James) aka Billy) Eddie Murphy (John)"  
IO_OUT poll() POLLOUT poll() EAGAIN EWOULDBLOCK POLLOUT WaitForMultipleObjects() poll() 
 initialisers = [foo bar baz]  if initialisers.count(None) &lt; len(initialisers) - 1:      raise Ex()  None None 
sys.path.append(os.path.join(os.path.dirname(__file__) 'lib')  
 &gt;&gt;&gt; pi = robjects.r['pi']  &gt;&gt;&gt; pi[0]  3.14159265358979  
func(**kwargs) kwargs frequency frequencies if frequency in frequency class geoProcessClass():     def __init__(self geoTaskHandler startDate frequency frequencyMultiple=1 *args):         self.interval = self.determineTimeDelta(frequency frequencyMultiple)      def determineTimeDelta(self frequency frequencyMultiple):         frequencies = ["hours" "days" "weeks"]          if frequency in frequencies:             kwargs = {frequency: frequencyMultiple}         else:             kwargs = {"days": 1}          return datetime.timedelta(**kwargs)  if 
&gt;&gt;&gt; validate_latitude(-91) -90      - -90 0 
&gt;&gt;&gt; x = re.search('\((.*)\s*(.*)\)' " {'result':(Boolean MessageString)} ") &gt;&gt;&gt; x.group(1) 'Boolean' &gt;&gt;&gt; x.group(2) 'MessageString'  
import __builtin__ getattr(__builtin__'int')  
&lt;root&gt;/ &lt;root&gt;/base sys.path import other_stuff.BarCode as bc other_stuff base import base.other_stuff.BarCode as bc BarCode other_stuff.BarCode base.other_stuff.BarCode &lt;root&gt;/base sys.path from ..other_stuff import BarCode as bc 
do_your_job() os.listdir() os.makedirs() os.chown() do_your_job() 
def ack(m n _memo={}):   key = m n   if key not in _memo:     if m==0: v = n + 1     elif n==0: v = ack(m-1 1)     else: v = ack(m-1 ack(m n-1))     _memo[key] = v   return _memo[key]  for i in range(len(buttons)):   buttons[i].onclick(lambda i=i: say('button %s' i))  i=i 
&gt;&gt;&gt; words ['The' 'Quick' 'Brown' 'Fox' 'Jumps' 'Over' 'The' 'Lazy' 'Dog'] &gt;&gt;&gt; [words[i:i+3] for i in range(len(words) - 2)] [['The' 'Quick' 'Brown'] ['Quick' 'Brown' 'Fox'] ['Brown' 'Fox' 'Jumps'] ['Fox' 'Jumps' 'Over'] ['Jumps' 'Over' 'The'] ['Over' 'The' 'Lazy'] ['The' 'Lazy' 'Dog']]  
For each string in the array:     Find the first '{'. If there is none leave that string alone.     Init a counter to 0.      For each character in the string:           If you see a '{' increment the counter.         If you see a '}' decrement the counter.         If the counter reaches 0 break.     Here if your counter is not 0 you have invalid input (unbalanced brackets)     If it is then take the string from the first '{' up to the '}' that put the      counter at 0 and that is a new element in your array.  
from twisted.internet import reactor from twisted.web import client  def processResult(page):     print "I got some data" repr(page)     reactor.callLater(0.1 reactor.stop) def dealWithError(err):     print err.getErrorMessage()     reactor.callLater(0.1 reactor.stop)  class ProxyClientFactory(client.HTTPClientFactory):     def setURL(self url):         client.HTTPClientFactory.setURL(self url)         self.path = url  factory = ProxyClientFactory('http://url_you_want') factory.deferred.addCallbacks(processResult dealWithError)  reactor.connectTCP('proxy_address' 3142 factory) reactor.run()  
def fabricateAnotherObject(self **kwargs):     return testClass(**kwargs)  class Factory(object):    def __init__(self theClass):        self.theClass = theClass    def create(self **kwargs):        self.theClass(**kwargs)  myFactory = Factory(testClass)  
import re  x = re.compile(r'^([^\|]*?)\s*\|[^\n]*\n\s*(.*?)\s*$')  s = """NETHERLANDS MUSIC EPA | 36 before Michael Buble performs in Amsterdam Canadian singer Michael Buble performs during a concert in Amsterdam The Netherlands 30 October 2009. Buble released his new album entitled 'Crazy Love'. EPA/OLAF KRAAK"""  mo = x.match(s)  subject content = mo.groups()  print 'SUBJECT =' repr(subject) print 'CONTENT =' repr(content)  SUBJECT = 'NETHERLANDS MUSIC EPA' CONTENT = "Michael Buble performs in Amsterdam Canadian singer Michael Buble performs during a concert in Amsterdam The Netherlands 30 October 2009. Buble released his new album entitled 'Crazy Love'. EPA/OLAF KRAAK"  y = re.compile(r'^.*SUBJECT\s*=\s*\'([^\']*)\'.*CONTENT\s*=\s*"([^"]*)"'                re.DOTANY)  
from twisted.internet import reactor protocol from twisted.protocols.basic import LineReceiver  __author__="smota" __date__ ="$30/10/2009 17:17:50$"  class SquitterClient(LineReceiver):     def connectionMade(self):         self.messageCount = 0         # The factory provides a reference to itself we'll use it to enumerate the clients         self.factory.n += 1         self.name = "Client %d" %self.factory.n          # Send initial message and more messages a bit later         self.sendLine("Client %s starting!" % self.name);         reactor.callLater(0.5 self.sendMessage "Message %d" %self.messageCount)      def connectionLost(self reason):         print "connection lost"      def sendMessage(self msg):         for m in [ "a" "b" "c" "d" "e"]:             self.sendLine("Copy %s of message %s from client %s!" % (m msg self.name))         if self.factory.stop:             self.sendLine("Client %s disconnecting!" % self.name)             self.transport.loseConnection()         else:             self.messageCount += 1             reactor.callLater(0.5 self.sendMessage "Message %d" %self.messageCount)  class SquitterClientFactory(protocol.ClientFactory):     protocol = SquitterClient      def __init__(self):         self.n = 0         self.stop = False      def stopTest():         self.stop = True      def clientConnectionFailed(self connector reason):         print "Connection failed - goodbye!"      def clientConnectionLost(self connector reason):         print "Connection lost - goodbye!"  # this connects the protocol to a server running on port 8000 def main():     # Create 10 clients      f = SquitterClientFactory()     for i in range(10):         reactor.connectTCP("localhost" 8000 f)      # Schedule end of test in 10 seconds     reactor.callLater(10 f.stopTest)      # And let loose the dogs of war     reactor.run()  # this only runs if the module was *not* imported if __name__ == '__main__':     main()  
shell=True import subprocess subprocess.Popen("sleep 4s &amp;&amp; echo right thar right thar"shell=True); print 'i like it when you put it'   I like it when you put it  [4 seconds later]  right thar right thar  
def findpath(target start=os.path.curdir):     sdrive start = os.path.splitdrive(start)     tdrive target = os.path.splitdrive(target)     rdrive = tdrive or sdrive     return os.path.normpath(os.path.join(rdrive os.path.join(start target)))  
sys.stderr = sys.stdout = logFile = open( tmpLogFileName 'a' )  sys.stderr = sys.stdout = logFile = open( tmpLogFileName 'a' 0 )  
def __init__(self arr=None):     if arr is None:         self.array = []     else:         self.array = arr  
locals() globals() def get_dynamic_settings(context_dict):     context_dict['DEFAULT_FROM_EMAIL'] = '%s &lt;noreply@otakupride.com&gt;' % context_dict['SITE_NAME']     context_dict['ROOT_URLCONF'] = 'mysite.urls.%s' % context_dict['SITE_SLUG']     context_dict['TEMPLATE_DIRS'] += (os.path.join(PROJECT_ROOT "templates" context_dict['SITE_SLUG']))  
str(li) &lt;?php  $li = implode('' range(1 776));  function countFigure($li $n) {     return substr_count($li $n); }  // counting figures  foreach (range(1 9) as $substr)     echo $substr " " countFigure($li $substr) "\n";  
^/api/0.6/([^/]+)/([^/]+)/?([^/]*)$  &gt;&gt;&gt; regex = re.compile(r"^/api/0.6/([^/]+)/([^/]+)/?([^/]*)$") &gt;&gt;&gt; regex.match("/api/0.6/changeset") is None True &gt;&gt;&gt; regex.match("/api/0.6/changeset/723").groups() ('changeset' '723' '') &gt;&gt;&gt; regex.match("/api/0.6/changeset/723/close").groups() ('changeset' '723' 'close') &gt;&gt;&gt; regex.match("/api/0.6/changeset/723/close/extragroup") is None True  
sys.path __init__.py $PYTHONPATH sys.path __init__.py find find . -type d tr '\n' : 
class mystr(str):     def __init__(self value):         self.value = value         self._decoded = None     @property     def decoded(self):         if self._decoded == None:             self._decoded = self.value.decode("hex")             return self._decoded     def __repr__(self):         return self.decoded     def __len__(self):         return len(self.decoded)     def __getitem__(self i):         return self.decoded.__getitem__(i)     def __getslice__(self i j):         return self.decoded.__getslice__(i j)  str &gt;&gt;&gt; s = mystr('a0a1a2') &gt;&gt;&gt; s  ¡¢ &gt;&gt;&gt; len(s) 3 &gt;&gt;&gt; s.capitalize() 'A0a1a2'  
results = [] res = { "next_page": "magic_token_to_get_first_page" } while "next_page" in res:     fp = urllib2.urlopen("http://search.twitter.com/search.json" + res["next_page"])     res = simplejson.load(fp)     fp.close()     results.extend(res["results"])  
2.* sort sorted cmp= key= 3.* key= min max itertools.groupby cmp= class Reverser(object):   def __init__(self s): self.s = s   def __lt__(self other): return other.s &lt; self.s   def __eq__(self other): return other.s == self.s  __lt__ __eq__ &lt; == sort def getkey(tup):     a b = tup[0].split('_')     return Reverser(a) b  my_list.sort(key=getkey)  sort sorted # my_list as in the Q my_cmp as per top A getkey as here  def bycmp():   return sorted(my_list*10 cmp=my_cmp)  def bykey():   return sorted(my_list*10 key=getkey)  ...  $ python -mtimeit -s'import so' 'so.bykey()' 1000 loops best of 3: 548 usec per loop $ python -mtimeit -s'import so' 'so.bycmp()' 1000 loops best of 3: 995 usec per loop  key= 
while True:     line1 = f.readline()     line2 = f.readline()     if not line2: break  # EOF     ...  
{{=family_members}}  
exc_info() exctype value = sys.exc_info()[:2]  exc_info() try:     ... except Exception as e:  # or "Exception e" in old Pythons     ... do with with e ...  sys a = [123] a.append(a)  a = [123] b = [45a] a.append(b)  exc_info() t = sys.exc_info()[2] t 
next(subl for subl in l if 'sq' in subl)  StopIteration next [] None def gimmethesublist(thelist anitem adef=None):     return next((subl for subl in thelist if anitem in subl) adef)  its = set(['blah' 'bluh']) next(subl for subl in l if its.intersection(subl))  next(subl for subl in l if its.issubset(subl))  
That information is available via numpy.finfo() and numpy.iinfo():  In [12]: finfo('d').max Out[12]: 1.7976931348623157e+308  In [13]: iinfo('i').max Out[13]: 2147483647  In [14]: iinfo('uint8').max Out[14]: 255  
def import fit fit.fitnesscompare somelist.sort(cmp=fit.fitnesscompare)  somelist.sort(key=fit.fitnessextract)  def fitnessextract(x):    return x.fitness  import operator somelist.sort(key=operator.attrgetter('fitness'))  
class Meta:      unique_together = ( ('name' 'active'))  
W3_fill_func return set(self.set_dim_1_based) 
gtk.main gobject.timeout_add Linup.py # Enter the main loop where we check to see if there's a shot to upload # every 1 second path = cfg.get("paths""watch_path") def check_for_new():      if(os.path.exists(path)):         linup.uploadImage(path)         url = linup.getURL()         linup.toClipboard(url)         linup.json = ""          print "Screenshot uploaded!"         os.remove(path)     # Return True to keep calling this function False to stop.       return True  if __name__ == "__main__":      gobject.timeout_add(1000 check_for_new)      gtk.main()  import gobject pycurl linup_control.py # Wait 3 seconds time.sleep(3) # Set the icon to idle self.statusIcon.set_from_file("img/lin_idle.png")  gobject.timeout_add(3000 self.statusIcon.set_from_file "img/lin_idle.png")  
haiku_table haiku_table = Table('haiku' metadata            schema.Column('title' types.Text() primary_key=True)            .... etc            )  Table 
all def search(self **args):   ret = []   for playerID player in self.iteritems():     for key value in args.iteritems():       if getattr(player key) != value: break     else:        ret.append(player.playerID)    return ret  iteritems player.playerID playerID def search(self **args):   def vals(p):     return dict((k getattr(p k None)) for k in args)   return [p.playerID for p in self.itervalues() if vals(p) == args]  def search(self **args):   return [p.playerID for p in self.itervalues()           if all(getattr(p k None)==args[k] for k in args)]  
range # use xrange for i in xrange(0 count):     # UNPACK FIXED LENGTH OF BINARY DATA HERE     yield (field1 field2 field3)  # use writelines f = open(filename 'w') f.writelines((datum + os.linesep) for datum in data) f.close()      items = GetData(url)     f = open(filename 'w')     for item in items:         f.write(';'.join(item) + os.linesep)     f.close()  
BaseHTTPServer SimpleHTTPServer BaseHTTPServer BaseHTTPServer 
#!/usr/bin/python import os.path path = '/dir1/dir2/dir3/file.exe' name = os.path.basename(path) print name  
def outer(f):          # any name: function class any callable     return f()         # class will be instantiated within the scope of the function  
import sys  class test_something(object):     def setUp(self):         sys.argv[1] = 'arg'         del sys.argv[2] # remember that -s is in sys.argv[2] see below     def test_method(self):         print sys.argv  [~] nosetests test_something.py -s ['/usr/local/bin/nosetests' 'arg'] . ---------------------------------------------------------------------- Ran 1 test in 0.001s  OK  argv sys.argv 
p = models.UserDetails.gql('WHERE user_name = :uname' uname = user_name).fetch(1)  
CPs = CPs + urllib.urlopen(url).read()  
.click() 
if not hasattr(fp 'read') fp.read() 
import logging logging.getLogger('boto').setLevel(logging.CRITICAL)  /etc/boto.cfg ~/.boto set_file_logger 
mmap() mmap() mmap() 
 while True:      do_something()      if condition():         break  
try:     shutil.copy(src dest) except IOError e:     print "Unable to copy file. %s" % e  
toprettyxml() newl 
def subclassfilter(x baseclass):     return x is not baseclass and isinstance(x type) and issubclass(x baseclass)  subclasses = [c for c in locals().values() if subclassfilter(c ImageSpec)]  __name__ subclasses 
# let (#%) = Printf.sprintf;; val ( #% ) : ('a unit string) format -&gt; 'a = &lt;fun&gt; "Hello %s! Today's number is %d." #% "Pat" 42;; - : string = "Hello Pat! Today's number is 42."  
def mainpage(request):     f=open('gui/pages/index.html''r').readlines()     return HttpResponse(f)  
s = "Grüß Gott"  # coding: UTF-8 s = u"Grüß Gott"  # coding: UTF-8 
help inspect.getargspec import functools import inspect  realgas = inspect.getargspec  lookaside = dict()  def fakegas(f):     if f in lookaside:         return lookaside[f]     return realgas(f)  inspect.getargspec = fakegas  def deco(fn):     @functools.wraps(fn)     def x(*args **kwargs):         return fn(*args **kwargs)     lookaside[x] = realgas(fn)     return x  @deco def x(a b=23):   """Some doc for x."""   return a + b  help(x)  Help on function x in module __main__:  x(a b=23)     Some doc for x. (END)  
power.write("volt k") power.write("volt " + str(k))                  ^           observe space here!  power.write("volt %0.2f" % k)  k 4.85866 %0.2f volt 4.86 %0.4f volt 4.8587 
for f b in zip(foo bar):     print(f b)  zip foo bar zip itertools.izip list(zip(foo bar)) zip foo bar zip(foobar) itertools.izip itertools.izip_longest import itertools for fb in itertools.izip(foobar):     print(fb) for fb in itertools.izip_longest(foobar):     print(fb)  izip foo bar izip_longest foo bar izip_longest None fillvalue None zip zip for num cheese color in zip([123] ['manchego' 'stilton' 'brie']                                ['red' 'blue' 'green']):     print('{} {} {}'.format(num color cheese))  1 red manchego 2 blue stilton 3 green brie  
q = request.GET.get('q') if q:     print q  
unix C signal signal siginterrupt siginterrupt(1) def sigquitHandler(signum frame):     print("SIGQUIT Handler")     siginterrupt(SIGQUIT False)  siginterrupt(SIGQUIT False) 
y &gt;&gt;&gt; def five(): ...    print 'returning 5' ...    return 5 ...  &gt;&gt;&gt; 1 &lt; five() &lt;= 5 returning 5 True  &gt;&gt;&gt; 1 &lt; five() and five() &lt;= 5 returning 5 returning 5 True  
from django.db.models import Q  datafilter = Q() for i in xrange(1 now.day+1):     datafilter = datafilter | Q(publish_date__day=i) datafilter = datafilter &amp; Q(publish_date__month=now.month) posts = TodaysObject.objects.filter(datafilter)  def query_dicts(query_string *query_args):     from django.db import connection     cursor = connection.cursor()     cursor.execute(query_string query_args)     col_names = [desc[0] for desc in cursor.description]     while True:         row = cursor.fetchone()         if row is None:             break         row_dict = dict(izip(col_names row))         yield row_dict     return posts = query_dicts('SELECT * FROM tablename WHERE DAY(publish_date)&lt;=%s AND MONTH(publish_date)=%s' now.day now.month)  posts = TodaysObject.objects.extra([where='DAY(publish_date)&lt;=%d AND MONTH(publish_date)=%d' % (now.day now.month)])  
Extension extra_objects setup.py example_module = Extension('_example'     extra_compile_args = ['-Wall' '-g' '-std=c++11']     sources=['something.cpp']     extra_objects=['asm_amd64.s'])  nm -D example.so extra_objects 
PyString_FromStringAndSize 
seek &gt;&gt;&gt; buff = StringIO.StringIO() &gt;&gt;&gt; buff.write(open('map.png' 'rb').read()) &gt;&gt;&gt;  &gt;&gt;&gt; #seek back to the beginning so the whole thing will be read by PIL &gt;&gt;&gt; buff.seek(0) &gt;&gt;&gt; &gt;&gt;&gt; Image.open(buff) &lt;PngImagePlugin.PngImageFile instance at 0x00BD7DC8&gt; &gt;&gt;&gt;  &gt;&gt;&gt; #that worked.. but if we try again: &gt;&gt;&gt; Image.open(buff) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "c:\python25\lib\site-packages\pil-1.1.6-py2.5-win32.egg\Image.py" line 1916 in open     raise IOError("cannot identify image file") IOError: cannot identify image file  buff.seek(0) 
if len(thelist) != len(set(id(x) for x in thelist)): ...  None int 17 immutyps = int long float tuple frozenset str unicode mutables = [x for x in thelist if not isinstance(x immutyps)] if len(mutables) != len(set(id(x) for x in mutables)):   cryhavocandletloosethedogsofwar()  
&gt;&gt;&gt; import re &gt;&gt;&gt; p = re.compile(r'[^\d-]*(-?[\d]+(\.[\d]*)?([eE][+-]?[\d]+)?)') &gt;&gt;&gt; def test(seq):         for s in seq:             m = p.match(s)             if m:                 result = m.groups()[0]                 if "." in result or "e" in result or "E" in result:                     print "{0} -&gt; {1}".format(s float(result))                 else:                     print '"{0}" -&gt; {1}'.format(s int(result))             else:                 print s "no match"  &gt;&gt;&gt; test(s) "1 0" -&gt; 1 "3 of 12" -&gt; 3 "3 1/2" -&gt; 3 "3/12" -&gt; 3 3.15 seconds -&gt; 3.15 3.0E+102 -&gt; 3e+102 "what about 2?" -&gt; 2 "what about -2?" -&gt; -2 2.10a -&gt; 2.1  
In [5]: versions = [m.group(1) for m in [regex.match(lib) for lib in libs] if m]  In [6]: versions Out[6]: ['3.3.1' '3.2.0']  
self.__sub__ &gt;&gt;&gt; foo = MyInt(8) &gt;&gt;&gt; print foo.difference(7) 1  class MyInt(int):     def difference(self i):         return self - i  class MyInt(int):     difference = int.__sub__  class MyInt(int):     difference=lambda self i: self - i  class MyInt(int):     difference=lambda self: self.__sub__  &gt;&gt;&gt; foo = MyInt(8) &gt;&gt;&gt; print foo.difference()(7) 1  class MyInt(int):     difference=property(lambda self: self.__sub__)  &gt;&gt;&gt; foo = 8 &gt;&gt;&gt; print foo - 7 1  
foo = 1 bar = foo baz = foo  print(bar is foo) # prints True print(baz is foo) # prints True  locals() foo bar baz 
class Foo():     pass  class Bar(Foo):     pass  class Bar2():     pass  print issubclass(Bar Foo)  # True print issubclass(Bar2 Foo) # False  bar_instance = Bar() print issubclass(bar_instance.__class__ Foo)  
protocol=2 
from Bio import SeqIO handle = open("ls_orchid.fasta") for seq_record in SeqIO.parse(handle "fasta") :     print seq_record.id     print repr(seq_record.seq)     print len(seq_record) handle.close()  f = open('sequence.fsa')  first_line = False for line in f.xreadlines():     if line[0] == "&gt;":         first_line=True         print line     else:         if first_line:              print line[17:]         else:              print line         first_line = False  
request.get_all() 
&gt;&gt;&gt; import math psyco &gt;&gt;&gt; a = 4**23  def delete_module(modname paranoid=None):     from sys import modules     try:         thismod = modules[modname]     except KeyError:         raise ValueError(modname)     these_symbols = dir(thismod)     if paranoid:         try:             paranoid[:]  # sequence support         except:             raise ValueError('must supply a finite list for paranoid')         else:             these_symbols = paranoid[:]     del modules[modname]     for mod in modules.values():         try:             delattr(mod modname)         except AttributeError:             pass         if paranoid:             for symbol in these_symbols:                 if symbol[:2] == '__':  # ignore special symbols                     continue                 try:                     delattr(mod symbol)                 except AttributeError:                     pass  delete_module('psyco')  delete_module('psyco' ['Psycho' 'KillerError']) # only delete these symbols from every other module # (for "from psyco import Psycho KillerError" statements)  
&gt;&gt;&gt; sum(len(set(x - i for i x in enumerate(t))) for t in nums) 7  set itertools.groupby set len() 
python /home/bartek/ f = open("file1.txt" "r") f = open("some_other_file.txt" "r") f = open("/home/media/a_real_file.txt" "r") 
def import_something():     # decide what to import     # ...     mod = __import__( something )     return mod my_module = import_something() my_module.do_stuff()  __init__.py import os  # make a list of all .py files in the same dir that dont start with _ __all__ = installed = [ name for (nameext) in ( os.path.splitext(fn) for fn in os.listdir(os.path.dirname(__file__))) if ext=='.py' and not name.startswith('_') ] for name in installed:     # import them all     __import__( name globals() locals())  import crunchers crunchers.installed # all names crunchers.cruncherA # actual module object but you can't use it since you don't know the name when you write the code # turns out the be pretty much the same as the first solution :p mycruncher = getattr(crunchers crunchers.installed[0])    
rprim=infile.readlines()  rprim[0] rprim[1] rprim[2] rprim[3] rprim[4] rprim[5] rprim[6]  len(rprim)  
show matplotlib.pyplot.show()  import matplotlib.pyplot as plt  
post_multipart() 
from .. import misc from ..misc import tools as _  print misc.tools.__file__  misc.tools print _ del _ misc.tools misc __init__.py tools.py misc misc.tools 
import feedparser d = feedparser.parse('http://news.google.com/news?pz=1&amp;cf=all&amp;ned=ca&amp;hl=en&amp;topic=w&amp;output=rss')  print [field for field in d]  entries import pprint pprint.pprint(entry for entry in d['entries'])  titles = [entry.title for entry in d['entries']  
import csv import sys  writer = csv.csvwriter(sys.stdout) writer.writerow(iterable_containing_my_strings)  
def decorate_method(f):   def wrapper(self name value attrs):     self.attrs = attrs     return f(self name value attrs)   return wrapper  def decorate_class(c):   for n in dir(c):     f = getattr(c n)     if hasattr(f 'im_func'):       setattr(c n decorate_method(f.im_func))  decorate_class(whatever) whatever 
str(gs.GetSessionIdleTime()) 
#!/usr/bin/env python import csv csvobj=csv.reader(open('file.txt''r')) for datum in csvobj:     datum=[float(val) for val in datum[1:]]      print(datum)     maximum=max(datum)     minimum=min(datum)     print(maximum/minimum)  # [151.0 263.0 88.0 484.0 118.0 270.0 458.0 872.0 62.0 194.0] # 14.064516129 # [72.0 21.0 20.0 61.0 20.0 85.0 20.0 25.0 20.0 65.0] # 4.25 # [281.0 250.0 358.0 118.0 197.0 71.0 168.0 296.0 198.0 113.0] # 5.04225352113  
import gzip os urllib.parse  archive_relpath = os.sep.join(map(str Newest_Date[:4])) + ' village.gz'   archive_path = os.path.join(Root 'data' archive_relpath)  with gzip.open(archive_path) as Village:     Village_Parsed = ''.join(urllib.parse.unquote_plus(line.decode('ascii'))                              for line in Village)     print(Village_Parsed)  'ascii' line.decode('ascii') 
python -h python -h |less 
import MySQLdb  db = MySQLdb.connect(host=your_host db=your_db                      user=your_user passwd=your_password)  cur = db.cursor() cur.execute("""SELECT * FROM account WHERE email = %s AND pass = %s """             (self.mail self.pw)) result = cur.fetchall() print "exists:" result  
# combine the lists zipped = zip(alist blist)  # write to a file (in append mode) file = open("filename" 'a')  for item in zipped:     file.write("%d %d\n" % item)  file.close()   12  23  34  55  
repr() repr(num) num.__repr__() repr __repr__ dis def f1(a):     return repr(a)  def f2(a):     return a.__repr__()  def f3(a):     return `a`  &gt;&gt;&gt; import dis &gt;&gt;&gt; dis.dis(f1)   3           0 LOAD_GLOBAL              0 (repr)               3 LOAD_FAST                0 (a)               6 CALL_FUNCTION            1               9 RETURN_VALUE &gt;&gt;&gt; dis.dis(f2)   6           0 LOAD_FAST                0 (a)               3 LOAD_ATTR                0 (__repr__)               6 CALL_FUNCTION            0               9 RETURN_VALUE         &gt;&gt;&gt; dis.dis(f3)   9           0 LOAD_FAST                0 (a)               3 UNARY_CONVERT                      4 RETURN_VALUE     f1 repr f2 __repr__ LOAD_GLOBAL LOAD_ATTR CALL_FUNCTION repr() repr() 
class WeakCallback (object):     """A Weak Callback object that will keep a reference to     the connecting object with weakref semantics.      This allows object A to pass a callback method to object S     without object S keeping A alive.     """     def __init__(self mcallback):         """Create a new Weak Callback calling the method @mcallback"""         obj = mcallback.im_self         attr = mcallback.im_func.__name__         self.wref = weakref.ref(obj self.object_deleted)         self.callback_attr = attr         self.token = None      def __call__(self *args **kwargs):         obj = self.wref()         if obj:             attr = getattr(obj self.callback_attr)             attr(*args **kwargs)         else:             self.default_callback(*args **kwargs)      def default_callback(self *args **kwargs):         """Called instead of callback when expired"""         pass      def object_deleted(self wref):         """Called when callback expires"""         pass  # illustration how I typically use it weak_call = WeakCallback(self._something_changed) long_lived_object.connect("on_change" weak_call)  WeakCallback.token 
os.popen('ps aux') 
class Main(object):     def do_stuff(self):         ...     def save_work(self):         ...     def __init__(self):         try:             self.do_stuff()         except KeyboardInterrupt:             pass # Or print helpful info         self.save_work()  
&gt;&gt;&gt; long_list = [ [2 3 6] [3 7 9] ] &gt;&gt;&gt; import itertools &gt;&gt;&gt; for i in itertools.izip_longest(*long_list):      # called zip_longest in py3k     print(i)   (2 3) (3 7) (6 9)  zip 
i 
self 
def string_to_c(s max_length = 140 unicode=False):     ret = []      # Try to split on whitespace not in the middle of a word.     split_at_space_pos = max_length - 10     if split_at_space_pos &lt; 10:         split_at_space_pos = None      position = 0     if unicode:         position += 1         ret.append('L')      ret.append('"')     position += 1     for c in s:         newline = False         if c == "\n":             to_add = "\\\n"             newline = True         elif ord(c) &lt; 32 or 0x80 &lt;= ord(c) &lt;= 0xff:             to_add = "\\x%02x" % ord(c)         elif ord(c) &gt; 0xff:             if not unicode:                 raise ValueError "string contains unicode character but unicode=False"             to_add = "\\u%04x" % ord(c)         elif "\\\"".find(c) != -1:             to_add = "\\%c" % c         else:             to_add = c          ret.append(to_add)         position += len(to_add)         if newline:             position = 0          if split_at_space_pos is not None and position &gt;= split_at_space_pos and " \t".find(c) != -1:             ret.append("\\\n")             position = 0         elif position &gt;= max_length:             ret.append("\\\n")             position = 0      ret.append('"')      return "".join(ret)  print string_to_c("testing testing testing testing testing testing testing testing testing testing testing testing testing testing testing testing testing" max_length = 20) print string_to_c("Escapes: \"quote\" \\backslash\\ \x00 \x1f testing \x80 \xff") print string_to_c(u"Unicode: \u1234" unicode=True) print string_to_c("""New lines""")  
__init__.py pkgutil.extend_path() pkg_resources.declare_namespace() import foo foo.py foo __init__.py foo __init__.py sys.path __file__ .py __path__ import foo.bar foo bar foo.__path__ sys.path foo.bar foo foo.bar pkgutil __init__.py from pkgutil import extend_path __path__ = extend_path(__path__ __name__)  __path__ ??? path1 ?   ??? package ?       ??? __init__.py ?       ??? foo.py ??? path2 ?   ??? package ?       ??? bar.py ??? path3     ??? package         ??? __init__.py         ??? baz.py  __init__.py extend_path path1 path2 path3 sys.path import package.foo import package.bar import package.baz pkg_resources.declare_namespace(__name__) 
for c in toShare[i]: from sys import stdin from multiprocessing import Pool Array Process  def count_it( key ):   count = 0   for c in toShare:     if c == key:       count += 1   return count  if __name__ == '__main__':   # allocate shared array - want lock=False in this case since we    # aren't writing to it and want to allow multiple processes to access   # at the same time - I think with lock=True there would be little or    # no speedup   maxLength = 50   toShare = Array('c' maxLength lock=False)    # fork   pool = Pool()    # can set data after fork   testData = "abcabcs bsdfsdf gdfg dffdgdfg sdfsdfsd sdfdsfsdf"   if len(testData) &gt; maxLength:       raise ValueError "Shared array too small to hold data"   toShare[:len(testData)] = testData    print pool.map( count_it ["a" "b" "s" "d"] )  from sys import stdin from multiprocessing import Pool Array Process import mymodule  def count_it( key ):   count = 0   for c in mymodule.toShare:     if c == key:       count += 1   return count  def initProcess(share):   mymodule.toShare = share  if __name__ == '__main__':   # allocate shared array - want lock=False in this case since we    # aren't writing to it and want to allow multiple processes to access   # at the same time - I think with lock=True there would be little or    # no speedup   maxLength = 50   toShare = Array('c' maxLength lock=False)    # fork   pool = Pool(initializer=initProcessinitargs=(toShare))    # can set data after fork   testData = "abcabcs bsdfsdf gdfg dffdgdfg sdfsdfsd sdfdsfsdf"   if len(testData) &gt; maxLength:       raise ValueError "Shared array too small to hold data"   toShare[:len(testData)] = testData    print pool.map( count_it ["a" "b" "s" "d"] )  
data = "2|15|14|4|12|6|7|9|8|10|11|5|13|3|2|16" arra = map(intdata.split("|")) summat = [sum(arra[i:i+4]) for i in range(0len(arra)4)] print summat print len(set(summat))==1  
from textwrap import wrap  def getAbstract(text lines=5 screenwidth=100):     width = len(' '.join([                line for block in text.splitlines()                for line in wrap(block width=screenwidth)             ][:lines]))     return text[:width] + '...'  print getAbstract(text lines=7)  import textwrap  abstract = textwrap.wrap(text 100)[0]  
subprocess 
extra_link_args extra_compile_args extra_link_args 
/usr/bin/python /usr/local/bin/ /usr/local/bin/python2.6 python2.6 json #!/usr/bin/env python2.6  $PATH python python2.6 .bash_profile .profile .bash_profile.pysave .profile.pysave 
forms.DateField input_formats class MyForm(forms.Form):     start_date = forms.DateField(input_formats=['%d/%m/%Y'])  
def output(*items end="\n" file=sys.stdout):     pass  print 
classmethod __get__ self instance instance type A __get__ A class Foo(object):      def bar(self arg1 arg2):          print arg1 arg2  foo = Foo() # this: foo.bar(12)  # prints '1 2' # does about the same thing as this: Foo.__dict__['bar'].__get__(foo type(foo))(12)  # prints '1 2'  classmethod __get__ __get__ instance instance_type __get__ In [14]: def foo(cls):    ....:     print cls    ....:      In [15]: classmethod(foo) Out[15]: &lt;classmethod object at 0x756e50&gt; In [16]: cm = classmethod(foo) In [17]: cm.__get__(None dict) Out[17]: &lt;bound method type.foo of &lt;type 'dict'&gt;&gt; In [18]: cm.__get__(None dict)() &lt;type 'dict'&gt; In [19]: cm.__get__({} dict) Out[19]: &lt;bound method type.foo of &lt;type 'dict'&gt;&gt; In [20]: cm.__get__({} dict)() &lt;type 'dict'&gt; In [21]: cm.__get__("Some bogus unused string" dict)() &lt;type 'dict'&gt;  classmethod In [29]: cm.__get__(None dict).im_func.__name__ Out[29]: 'foo'  
is == # work for == as well as is class START(object): pass def START(): pass class Whatever(object): pass START = Whatever()  # if you don't care for "accidental" == and only check with `is` START = [] START = {} START = set()  == is def 
WrapperClass __get__ __set__ 
$sum = array(); foreach(range(0 count($a) 4) as $i)    $sum []= array_sum(array_slice($a $i 4));  $sum = array_map('array_sum' array_chunk($a 4));  
assert isinstance(b A) if 0: b=A()  
key value aKey "key" key temp for key value in dict.iteritems():     temp = [keyvalue]     dictlist.append(temp)  key value dictlist.append([keyvalue]) dict.items() 
&gt;&gt;&gt; import sys &gt;&gt;&gt; a=list() &gt;&gt;&gt; type(a) &lt;type 'list'&gt; &gt;&gt;&gt; sys.getsizeof(a) 36 &gt;&gt;&gt; b=1 &gt;&gt;&gt; type(b) &lt;type 'int'&gt; &gt;&gt;&gt; sys.getsizeof(b) 12  &gt;&gt;&gt; help(sys.getsizeof) Help on built-in function getsizeof in module sys:  getsizeof(...)     getsizeof(object default) -&gt; int      Return the size of object in bytes.  
class a:     def __init__(self):         self.list = []  __init__ 
main main __main__ MyException 
&gt;&gt;&gt; import datetime &gt;&gt;&gt; today = datetime.datetime.now() &gt;&gt;&gt; insummer = datetime.datetime(20098151000) &gt;&gt;&gt; from pytz import reference &gt;&gt;&gt; localtime = reference.LocalTimezone() &gt;&gt;&gt; localtime.tzname(today) 'PST' &gt;&gt;&gt; localtime.tzname(insummer) 'PDT' &gt;&gt;&gt;   
os.environ os.pathsep os.environ["PATH"] += os.pathsep + path  os.environ["PATH"] += os.pathsep + os.pathsep.join(pathlist)  os.path.join 
itertools.product def product(*args **kwds):     # product('ABCD' 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy     # product(range(2) repeat=3) --&gt; 000 001 010 011 100 101 110 111     pools = map(tuple args) * kwds.get('repeat' 1)     result = [[]]     for pool in pools:         result = [x+[y] for x in result for y in pool]     for prod in result:         yield tuple(prod)  
__init__ __init__ _init __init__.py from _init import * from ... import * 
def append_non_form_error(self message):     errors = super(FeedFormSet self).non_form_errors()     errors.append(message)     raise forms.ValidationError(errors)  def clean(self):     """Checks that only a required number of Feed subscriptions are present"""     count = 0     for form in self.forms:         if form.is_bound:             if form['subscribe'].data:                 count += 1     if count &gt; 0 and count != self.required:         self.append_non_form_error("not enough subs")  {% extends "base.html" %} {% load i18n %}  {% block content %} &lt;form action="." method="post"&gt;  {{ formset.management_form }}  {{ formset.non_form_errors }}     &lt;ol&gt;          {% for form in formset.forms %}         &lt;li&gt;&lt;p&gt;{{ form.title }}&lt;/p&gt;    &lt;p&gt;{{ form.description }}&lt;/p&gt;         {{ form.as_p }}         &lt;/li&gt;         {% endfor %}     &lt;/ol&gt;     &lt;input type="submit"&gt; &lt;/form&gt;  {% endblock %}  
try:     import win32     def kill(param):         # the code from S.Lotts link except ImportError:     def kill(param):         # the unix way  
setUp def fake_command(cls host cmd sh=None):   pass  # whatever you want in here self.save_remote_command = somemodule.RemoteCommand.remote_command somemodule.RemoteCommand.remote_command = classmethod(fake_command)  tearDown setUp somemodule.RemoteCommand.remote_command = self.save_remote_command   def __init__(self ...):    ...    self.remote_command = RemoteCommand.remote_command    ...  def set_remote_command_function(self thefunction):    self.remote_command = thefunction  def get_interface_params_by_mac(self host mac_unified):         lines = self.remote_command(host cls.IFCONFIG)  set_remote_command_function 
import collections  data = '''name: john jane car: db9 m5 food: pizza lasagne '''  personal_list = collections.defaultdict(dict)  for line in data.splitlines():   key _ info = line.partition(':')   infos = info.split('')   key = key.strip().title()   for i item in enumerate(infos):     item = item.strip().title()     personal_list[i][key] = item  for i in personal_list:   print personal_list[i]  B DB9 
None pop append 
import httplib2 http = httplib2.Http()  f = open('Tea.rdf') body = f.read() url = 'http://localhost:8080/openrdf-sesame/repositories/rep/statements' headers = {'Content-type': 'application/rdf+xml;charset=utf-8'} resp content = http.request(url 'PUT' body=body headers=headers) # resp will contain headers and status content the response body  
USE_ETAGS = True condition 
height_field=80 width_field=80 
import operator: def sortByColumn(bigList *args)     bigList.sort(key=operator.itemgetter(*args)) # sorts the list in place  
dir(obj) == sorted(obj.__dict__.keys() + dir(obj.__class__))  class Wizard(object):     def __init__(self):         self.mana = 0      def __dir__(self):         natdir = set(self.__dict__.keys() + dir(self.__class__))         if self.mana &lt;= 0:             natdir.remove("domagic")         return list(natdir)      def addmana(self):         self.mana += 1      def domagic(self):         if self.mana &lt;= 0:             raise NotEnoughMana()         print "Abracadabra!"         self.mana -= 1  &gt;&gt;&gt; wiz = Wizard()  &gt;&gt;&gt; [x for x in dir(wiz) if not x.startswith("_")] ['addmana' 'mana']  &gt;&gt;&gt; wiz.addmana()  &gt;&gt;&gt; [x for x in dir(wiz) if not x.startswith("_")] ['addmana' 'domagic' 'mana']  &gt;&gt;&gt; wiz.domagic() Abracadabra!  &gt;&gt;&gt; [x for x in dir(wiz) if not x.startswith("_")] ['addmana' 'mana']  &gt;&gt;&gt; wiz.domagic() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;stdin&gt;" line 13 in domagic __main__.NotEnoughMana  
f = open("myfile.txt" "w") # Use "a" instead of "w" to append to file  print &gt;&gt; f '&gt;' alignment.title print &gt;&gt; f hsp.sbjct   f.write('&gt; %s\n' % (alignment.title)) f.write('%s\n' % (hsp.sbjct))  f.close()  
for blast_record in blast_records  from Bio.Blast import NCBIXM blast_records = NCBIXML.parse(result_handle)  save_file = open("/Users/jonbra/Desktop/my_fasta_seq.fasta" 'w')  for blast_record in blast_records:   for alignment in blast_record.alignments:       for hsp in alignment.hsps:             save_file.write('&gt;%s\n' % (alignment.title))   #here possibly to output something to file between each blast_record save_file.close()  
class C(object):     def __init__(self):         self._x = None      @property     def x(self):         """I'm the 'x' property."""         return self._x      @x.setter     def x(self value):         self._x = value  
fflush(stdout) printf("Starting the server.\n") 
subprocess.Popen cwd 'd:\\test\\local' r'd:\test\local' \t subprocess.Popen(r'c:\mytool\tool.exe' cwd=r'd:\test\local')  import os os.path.dirname(os.path.realpath(__file__))   
repr eval exec eval cPickle -1 $ python -c 'import cPickle; d=dict.fromkeys(range(99) "banana"); print len(repr(d))' 1376 $ python -c 'import cPickle; d=dict.fromkeys(range(99) "banana"); print len(cPickle.dumps(d-1))' 412  $ python -mtimeit -s'import cPickle; d=dict.fromkeys(range(99) "chocolate")' 'eval(repr(d))' 1000 loops best of 3: 706 usec per loop $ python -mtimeit -s'import cPickle; d=dict.fromkeys(range(99) "chocolate")' 'cPickle.loads(cPickle.dumps(d -1))' 10000 loops best of 3: 70.2 usec per loop  $ python -c'def f(): pass d={23:f} print d == eval(repr(d))' Traceback (most recent call last):   File "&lt;string&gt;" line 3 in &lt;module&gt;   File "&lt;string&gt;" line 1     {23: &lt;function f at 0x241970&gt;}          ^ SyntaxError: invalid syntax  $ python -c'import cPickle def f(): pass d={"x":f} print d == cPickle.loads(cPickle.dumps(d -1))' True  
__getitem__ self class matrix:     def __getitem__(self pos):         xy = pos         return "fetching %s %s" % (x y)  m = matrix() print m[12]  fetching 1 2  object.__getitem__ 
a = '123' if b else '456'  
from cProfile import Profile from django.core.management.base import BaseCommand   class Command(BaseCommand):     ...      def _handle(self *args **options):         # Actual code I want to profile         pass      def handle(self *args **options):         if options['profile']:             profiler = Profile()             profiler.runcall(self._handle *args **options)             profiler.print_stats()         else:             self._handle(*args **options)  _handle python -m cProfile manage.py testrender  python manage.py testrender --profile  
lstrip "/Volumes/Users".lstrip("semuloV/")  if s.startsWith("/Volumes"):     s = s[8:]  
IntegrityError for i in range(MAX_ATTEMPTS):     sid = os.urandom(8).decode('hex')     db.execute('SELECT COUNT(*) FROM sessions WHERE sid=?' (sid))     if not db.fetchone()[0]:         # You can catch IntegrityError here and continue but there are reasons         # to avoid this.         db.execute('INSERT INTO sessions (sid) VALUES (?)' (sid))         break else:     raise RuntimeError('Failed to generate unique session ID')  base64.urlsafe_b64encode() 
a[numpy.where(a==1)[0][1:]] = 3  
sys.path __init__.py try:     import myapp except ImportError:     import sys     from os.path import abspath dirname split     parent_dir = split(dirname(abspath(__file__)))[0]     sys.path.append(parent_dir)  __init__.py sys.path if __name__ eq '__main__' import _setup  _setup.py package/     __init__.py     _setup.py     mod1/         __init__.py         _setup.py         somemodule.py  import _setup somemodule.py sys.path somemodule.py 
import psyco psyco.full()  
itertools.product(*A)  
timedelta datetime import datetime now = datetime.datetime.now() past = now - datetime.timedelta(hours=10)  
perl -pi -e 's/^(.*)$/\"$1\"/g' /path/to/your/file  ^(.*)$ (.*) ^ $ $1 
def coins(num):     lst = [random.randrange(2) for i in range(num)]     lst = [(i len(list(j))) for i j in itertools.groupby(lst)]     tails = max(j for i j in lst if i)     heads = max(j for i j in lst if not i)     return {1: tails 0: heads}  
length_of_spoke = length_of_side/(2*sin(pi/180*angle/2))  
sums += sum(arra[1::5])  array 
arra = sum(a for ia in enumerate(arra) if i %3==1 and i != 16)  
main.pyc main top.pyw # top.pyw file import main if __name__ == "__main__":     import sys     main.main(*sys.argv[1:])  # main.py file """ Main module documentation (optional) """ # import modules  # function and class definitions  def main(*argv):     # Parses the options (optional)     import optparse     parser = optparse.OptionParser(usage="%prog [&lt;options&gt;]\n" + __doc__)     parser.add_option(...)     parser.add_option(...)     opt args = parser.parse_args(list(argv))     # Calls the appropriate function:     my_function(...)  -w 
ThisObject SomeObject def __init__(self name):     self.name = name  
opener = poster.streaminghttp.register_openers() opener.add_handler(urllib2.HTTPCookieProcessor(cookielib.CookieJar())) # Add cookie handler params = {'file': open("test.txt" "rb") 'name': 'upload test'} datagen headers = poster.encode.multipart_encode(params) request = urllib2.Request(upload_url datagen headers) result = urllib2.urlopen(request)  opener = poster.streaminghttp.register_openers() params = {'file': open("test.txt" "rb") 'name': 'upload test'} datagen headers = poster.encode.multipart_encode(params) request = urllib2.Request(upload_url datagen headers) auth = base64.encodestring('%s:%s' % ('username' 'password'))[:-1] # This is just standard un/pw encoding   request.add_header('Authorization' 'Basic %s' % auth ) # Add Auth header to request result = urllib2.urlopen(request)  
toctree toctree index library/zipfile reference/datamodel/types * 
os.system activate easy_install os.system subprocess 
class Author(models.Model):     name = models.CharField(max_length=200 unique=True)     latest_pub_date = models.DateTimeField(null=True blank=True)      def update_pub_date(self):         try:             self.latest_pub_date = self.book_set.order_by('-pub_date')[0]             self.save()         except IndexError:             pass # no books yet!  class Book(models.Model):     pub_date = models.DateTimeField()     author = models.ForeignKey(Author)      def save(self **kwargs):         super(Book self).save(**kwargs)         self.author.update_pub_date()      def delete(self):         super(Book self).delete()         self.author.update_pub_date()  update_pub_date 
# This example should work in any version of Python. # urls_d will contain URL keys with counts as values like: {'http://www.google.fr/' : 1 } urls_d = {} for url in list_of_urls:     if not url in urls_d:         urls_d[url] = 1     else:         urls_d[url] += 1  defaultdict from collections import defaultdict  # available in Python 2.5 and newer  urls_d = defaultdict(int) for url in list_of_urls:     urls_d[url] += 1  defaultdict defaultdict defaultdict int int() containers.Counter Counter from collections import Counter  # available in Python 2.7 and newer  urls_d = Counter(list_of_urls)  from collections import defaultdict  # available in Python 2.5 and newer  urls_d = defaultdict(int) for url in list_of_urls:     urls_d[url] += 1  urls = [{"url": key "nbr": value} for key value in urls_d.items()]  from collections import Counter  urls = [{"url": key "nbr": value} for key value in Counter(list_of_urls).items()]  
import urllib2 import cookielib  cp = urllib2.HTTPCookieProcessor() cj = cp.cookiejar  # see cookielib.Cookie documentation for options description cj.set_cookie(cookielib.Cookie(0 'a_cookie' 'a_value'                                '80' False 'domain' True False '/path'                                True False None False None None None)) opener = urllib2.build_opener(urllib2.HTTPHandler()                               cp) opener.addheaders.append(('User-agent' 'Mozilla/5.0 (compatible)')) opener.open('http://website.com').read()  
# Method decorator example from peak.util.decorators import decorate  class Demo1(object):     decorate(classmethod)   # equivalent to @classmethod     def example(cls):         print "hello from" cls  
def foo(x):     assert x in huge_global_computation_to_check_all_possible_x_values()     # ok go ahead and use x...  
for ( $i = 0; $i &lt; count( $sum ); $i++ ) {  for ( $i = 0; $i &lt; count( $array ); $i++ ) {  
&gt;&gt;&gt; d = app('Numbers').documents.first()  # reference to current top document  &gt;&gt;&gt; nu = app('Numbers') &gt;&gt;&gt; for sheet in nu.documents.first.sheets(): ...   for table in sheet.tables(): ...     if table.selection_range(): ...        print table.name()  
.keys() Graph.neighbors() unweighted_random_walk() while True: while current_point != ending_point:     ...  return hitting_time  
&gt;&gt;&gt; current_table.selection_range.set(to=current_table.ranges[u'B3:C10'])  Number's AppleScript Editor ASDictionary selection_range range range 
def xor32bit(a b):     m = (a ^ b) % (2**32)     if m &gt; (2**16):         m -= 2**32     return m  
import simplejson as sj print sj.dumps('What\'s your name?') # =&gt; '"What\'s your name?"'  
urllib.quote(string[ safe])  &gt;&gt;&gt; urllib.quote('/test') '/test' &gt;&gt;&gt; urllib.quote('/test' safe='') '%2Ftest'  &gt;&gt;&gt; query = urllib.quote(u"Müller".encode('utf8')) &gt;&gt;&gt; print urllib.unquote(query).decode('utf8') Müller  urllib.quote urllib.parse.quote 
x[::-1] python -mtimeit $ python -mtimeit '"".join(reversed("hello there!"))' 100000 loops best of 3: 4.06 usec per loop $ python -mtimeit '"hello there!"[::-1]' 1000000 loops best of 3: 0.392 usec per loop  
Sentence ::= NounPhrase VerbPhrase NounPhrase ::= ["The"] [Adjective] Noun Adjective ::= "big" | "small" | "red" | "green" Noun ::= "cat" | "man" | "house" VerbPhrase ::= "fell over"  
yield from threading import Thread import hashlib  def async(gen):     def func(*args **kwargs):         it = gen(*args **kwargs)         result = it.next()         Thread(target=lambda: list(it)).start()         return result     return func  @async def test(text):     # synchronous part (empty in this example)     yield # Use "yield value" if you need to return meaningful value     # asynchronous part[s]     digest = hashlib.md5(text).hexdigest()     print digest  
error (104 'Connection reset by peer try:     risky_code() except:     logger.debug(...)     raise  exception.__module__ 
class SomeClass:   x=6  # class variable    def __init__(self):     self.y = 666  # instance variable  
class A:   class_var = object()  # two objects a b = A() A()  # same var everywhere assert a.class_var is b.class_var is A.class_var  int object class Stats:     twitter_count = 0  Stats.twitter_count +=1 Stats.twitter_count +=1 assert Stats.twitter_count == 2  
class BackupForm(ModelForm):     """Form for adding and editing backups."""      def __init__(self *args **kwargs):         systemid = kwargs.pop('systemid')         super(BackupForm self).__init__(*args **kwargs)         self.fields['units'] = forms.ModelMultipleChoiceField(                 required=False                 queryset=Unit.objects.filter(system__id=systemid)                 widget=forms.SelectMultiple(attrs={'title': _("Add unit")}))      class Meta:         model = Backup         exclude = ('system')  form_backup = BackupForm(request.POST                          instance=Backup                          systemid=system.id) form_backup = BackupForm(initial=form_backup_defaults                          systemid=system.id)  
optparse argv[1:] parser = optparse.OptionParser() # Set up your OptionParser  inp = raw_input("Enter some crap: ")  try: (options args) = parser.parse_args(shlex.split(inp)) except:     # Error handling.  parse_args shlex.split parse_args 
"&lt;[^&gt;]*&gt;" "&lt;[^&gt;*&gt;" ] 
from datetime import datetime from time import mktime  dt = datetime.fromtimestamp(mktime(struct))  
struct &gt;&gt;&gt; import struct &gt;&gt;&gt; struct.unpack("&lt;h" "\x00\x05") (1280) &gt;&gt;&gt; struct.unpack("&lt;h" "\x00\x06") (1536) &gt;&gt;&gt; struct.unpack("&lt;h" "\x01\x06") (1537)  
import re  instidre = re.compile(r'NEW\((\d+)\)')  class Afile(object):    def __init__(self filename):     self.filename = filename     self.geninput = dict()     self.instances = dict()    def feed_data(self listoftuples):     it = iter(listoftuples)     assert next(it) == ('$$$$' 'General Inputs')     for name value in it:       if name == '$$$$': break       self.geninput[name] = value     else:  # no instances at all!       return     currinst = dict()     for name value in it:       if name == '$$$$':         self.finish_inst(currinst)         currinst = dict()         continue       mo = instidre.match(name)       if mo:         assert value == '.TRUE.'         name = '$$$INSTID$$$'         value = mo.group(1)       currinst[name] = value     self.finish_inst(currinst)    def finish_inst(self adict):     instid = dict.pop('$$$INSTID$$$')     assert instid not in self.instances     self.instances[instid] = adict  foo.instances[instid] = bar.instances[instid] instid foo Afile bar sorted(foo.instances) $ this and that '$$$INSTID$$$' 
from BeautifulSoup import BeautifulSoup url = "hhttp://0.0.0.0:3000/authenticate/login" page = urlli2b.urlopen(page) soup = BeautifulSoup(page) token = soup.find("input" { 'name': 'authenticity_token'})  
sys.stdout open('CONOUT$' 'wt') print sys.stderr sys.stdin import sys sys.stdout PyObject* sys = PyImport_ImportModule("sys"); PyObject* pystdout = PyFile_FromString("CONOUT$" "wt"); if (-1 == PyObject_SetAttrString(sys "stdout" pystdout)) {   /* raise errors and wail very loud */ } Py_DECREF(sys); Py_DECREF(pystdout);  sys.stdout = open('CONOUT$' 'wt')  
Google App Engine/1.4.2 Python 2.5.2 (r252:60911 May 12 2010 14:18:27)  [GCC 4.3.1]  &gt;&gt;&gt; from google.appengine.api import urlfetch &gt;&gt;&gt; result = urlfetch.fetch('http://bit.ly/4ovTZw')  &gt;&gt;&gt; print result.headers['content-type'] audio/mpeg  
import os for root dirs files in os.walk(path):     for name in files:         print os.path.join(root name)  
print soup.prettify() " &lt;tag style="background-image:url("something")"&gt;   # Fix background-image:url("some URI") # to replace the quotes with &amp;quote; background_image = re.compile(r'background-image:url\("([^"]+)"\)') def fix_background_image( match ):     return 'background-image:url(&amp;quote;%s&amp;quote;)' % ( match.group(1) ) # Fix &lt;img src="some URI name="someString""&gt;  -- note the out-of-place quotes bad_img = re.compile( r'src="([^ ]+) name="([^"]+)""' ) def fix_bad_img( match ):     return 'src="%s" name="%s"' % ( match.group(1) match.group(2) ) fix_style_quotes = [     (background_image fix_background_image)     (bad_img fix_bad_img) ]  
years = collections.defaultdict( list ) players = collections.defaultdict( list ) teams = collections.defaultdict( list )  collections.namedtuple class ScoreFact( object ):     def __init__( self year player team score ):         self.year= year         self.player= player         self.team= team         self.score= score         years[self.year].append( self )         players[self.player].append( self )         teams[self.team].append( self )  years['2001'] are all scores for the given year.  players['SEA'] are all scores for the given player.  sum() [ x for x in players['SEA'] if x.year == '2001' ]  
import import foo  foo = __import__('foo' globals() locals() [] -1)  __import__() __import__() 'foo' sys.modules __import__() 'foo' __import__('foo') import sys sys.modules['boop'] = (1 2 3) import boop print boop  import 
from django.utils.encoding import smart_unicode def view(request):     body = u""       for filename f in request.FILES.items():         body = body + 'Filename: ' + filename + '\n' + smart_unicode(f.read()) + '\n'  
table[r] [pos+i] foo = table[r] if foo[pos+i] != word[i]:  
from os import listdir from os.path import join  DATA_ROOT = "testdata"  def folder_items_no_regex(month_name):     # dict holding the items (assuming ordering is irrelevant)    items = {}     # 1. Loop through all filenames in said folder    for file in listdir( join( DATA_ROOT month_name ) ):       date name = file.split( "_" 1 )        # skip files that were not possible to split on "_"       if not date or not name:          continue        # ignore non-.xml files       if not name.endswith(".xml"):          continue        # cut off the ".xml" extension       name = name[0:-4]        # keep a list of filenames       items.setdefault( name set() ).add( file )     return items  def folder_items_regex(month_name):     import re     # The pattern:    # 1. match the beginnning of line "^"    # 2. capture 1 or more digits ( \d+ )    # 3. match the "_"    # 4. capture any character (as few as possible ): (.*?)    # 5. match ".xml"    # 6. match the end of line "$"    pattern = re.compile( r"^(\d+)_(.*?)\.xml$" )     # dict holding the items (assuming ordering is irrelevant)    items = {}     # 1. Loop through all filenames in said folder    for file in listdir( join( DATA_ROOT month_name ) ):        match = pattern.match( file )       if not match:          continue        date name = match.groups()        # keep a list of filenames       items.setdefault( name set() ).add( file )     return items if __name__ == "__main__":    from pprint import pprint     data = folder_items_no_regex( "02" )     print "--- The dict ---------------"    pprint( data )     print "--- The items --------------"    pprint( sorted( data.keys() ) )     print "--- The files for item1 ---- "    pprint( sorted( data["item1"] ) )      data = folder_items_regex( "02" )     print "--- The dict ---------------"    pprint( data )     print "--- The items --------------"    pprint( sorted( data.keys() ) )     print "--- The files for item1 ---- "    pprint( sorted( data["item1"] ) )  
os shutil System.IO System.IO.File System.IO.Directory os.walk GetDirectories GetFiles Directory.GetDirectories(String) System.Environment.UserName &gt;&gt;&gt; import clr &gt;&gt;&gt; from System import Environment &gt;&gt;&gt; Environment.UserName 'gimel' &gt;&gt;&gt; from System import IO &gt;&gt;&gt; IO.Directory.GetCreationTimeUtc('c:/') &lt;System.DateTime object at 0x000000000000002B [02/07/2006 12:53:25]&gt; &gt;&gt;&gt; IO.Directory.GetLastWriteTimeUtc('c:/') &lt;System.DateTime object at 0x000000000000002C [09/11/2009 08:15:32]&gt; &gt;&gt;&gt; IO.Directory.GetDirectories('C:/').Count 24 &gt;&gt;&gt; help(IO.File.Copy) Help on built-in function Copy:  Copy(...)     Copy(str sourceFileName str destFileName bool overwrite)          Copies an existing file to a new file.          Overwriting a file of the same name is allowed. ...  
__init__ __init__ __init__ required=False 
all = [x for t in tests for x in t[1]]  
def __init__(self *args **kwargs):     super(TagForm self).__init__(*args **kwargs)     if 'instance' in kwargs:         self.fields['projects'].initial = self.instance.project_set.all()  def save(self *args **kwargs):     super(TagForm self).save(*args **kwargs)     self.instance.project_set.clear()     for project in self.cleaned_data['projects']:         self.instance.project_set.add(project)  
backtonormal = urllib.unquote(thestring)  
from threading import Thread from Queue import Queue from win32com.client import Dispatch import pythoncom import time  class IEThread(Thread):     def __init__(self):         Thread.__init__(self)         self.queue = Queue()      def run(self):         ie = None         # as IE Com object will be used in thread do CoInitialize         pythoncom.CoInitialize()         try:             ie = Dispatch("InternetExplorer.Application")             ie.Visible = 1             while 1:                 url = self.queue.get()                 print "Visiting..."url                 ie.Navigate(url)                 while ie.Busy:                     time.sleep(0.1)         except Exceptione:             print "Error in IEThread:"e          if ie is not None:             ie.Quit()   ieThread = IEThread() ieThread.start() while 1:     url = raw_input("enter url to visit:")     if url == 'q':         break     ieThread.queue.put(url)  
django.core.urlresolvers.reverse = ur_reverse  django.core.urlresolvers.reverse = ur_reverse_decorator(django.core.urlresolvers.reverse )  
-undefined dynamic_lookup -bundle  
gnome-terminal --working-directory=/path/to/wd --tab-with-profile=profile1 --title=title1 -e 'bash --rcfile /path/to/rcfile1.sh' --tab-with-profile=profile2 --title=title2 -e 'bash --rcfile /path/to/rcfile2.sh' 
next(i for iv in enumerate(l) if is_odd(v))  y = (i for iv in enumerate(l) if is_odd(v)) x1 = next(y) x2 = next(y)  
Discount appliesTo(cart) apply(cart) apply() 
paster serve --reload ... subprocess fork() paster serve --reload paster serve --reload pkg_resources 
#@UnresolvedImport #@UnusedVariable  import com.work.project.component.client.Interface.ISubInterface as ISubInterface #@UnresolvedImport  
UserDict object dir() __class__ dir() PyDev &gt;&gt;&gt; class OldStyle: pass ...  &gt;&gt;&gt; os = OldStyle(); os.__class__; dir(os) &lt;class __main__.OldStyle at 0x100412cb0&gt; ['__doc__' '__module__'] &gt;&gt;&gt; class NewStyle(object): pass ...  &gt;&gt;&gt; ns = NewStyle(); ns.__class__; dir(ns) &lt;class '__main__.NewStyle'&gt; ['__class__' '__delattr__' '__dict__' '__doc__' '__format__' '__getattribute__' '__hash__' '__init__' '__module__' '__new__' '__reduce__' '__reduce_ex__' '__repr__' '__setattr__' '__sizeof__' '__str__' '__subclasshook__' '__weakref__']  UserDict dict UserDict Person dict 
string.join() lines = open(file_in).readlines()  out_list = "['" + "''".join(lines) + "']"  join() out_list = "['" + "''".join(open(file_in)) + "']"  
import time  def watch(fn words):     fp = open(fn 'r')     while True:         new = fp.readline()         # Once all lines are read this just returns ''         # until the file changes and a new line appears          if new:             for word in words:                 if word in new:                     yield (word new)         else:             time.sleep(0.5)  fn = 'test.py' words = ['word'] for hit_word hit_sentence in watch(fn words):     print "Found %r in line: %r" % (hit_word hit_sentence)  readline word 
root.findall("/n:molpro/n:job"              namespaces=dict(n="http://www.molpro.net/schema/molpro2006"))  
__doc__ 
process() from foo import MyClass module.bar module.foo module.baz from x import y x y x def a():     print "a"  print "hi"  def b():     print "b"  print "bye"  from test import b  b()  python runme.py hi bye b  b 
Queue get put 
A parallel equivalent of the map() built-in function (it supports only one iterable argument though). It blocks till the result is ready.  This method chops the iterable into a number of chunks which it submits to the  process pool as separate tasks. The (approximate) size of these chunks can be  specified by setting chunksize to a positive integ  def f(x):     return x**2  map(f range(10))  import multiprocessing pool = multiprocessing.Pool() print pool.map(f range(10))  
yield return yield yield break return 
/* r is the 'request_rec' object from apache */ if (r-&gt;connection-&gt;aborted) {     /* stop processing and return */ }  
import StringIO data = StringIO.StringIO(data) import gzip gzipper = gzip.GzipFile(fileobj=data) html = gzipper.read()  html 
&gt;&gt;&gt; a = numpy.empty((33)) &gt;&gt;&gt; a[:] = numpy.nan &gt;&gt;&gt; a array([[ NaN  NaN  NaN]        [ NaN  NaN  NaN]        [ NaN  NaN  NaN]])  a[:] = numpy.nan a.fill(numpy.nan) $ python -mtimeit "import numpy as np; a = np.empty((100100));" "a.fill(np.nan)" 10000 loops best of 3: 54.3 usec per loop $ python -mtimeit "import numpy as np; a = np.empty((100100));" "a[:] = np.nan"  10000 loops best of 3: 88.8 usec per loop  ndarray.fill(..) ndarray.fill numpy.empty((33)).fill(numpy.nan) None 
sudo chown -R +r /opt/google_appengine/google_appengine_1.2.7 
__call__ __call__ class a(object):     def __init__(self):         self.__class__ = type(self.__class__.__name__ (self.__class__) {})         self.__class__.__call__ = lambda x:x  __call__ 
s.isdigit() s 0123456789 + - elif y &lt; 0: try:   thenum = float(y) except ValueError:   print "Not a valid number" else:   if thenum &gt;= 0:      x = int(sqrt(thenum))      print "Answer is" x   else:      print "Negative number" cmath.sqrt(thenum)  
c = sub1() c = sub2()  # This space where baseClass was defined intentionally left blank  # because it serves no purpose  class Sub1(object):   def x(self):      print "sub1"  class Sub2(object):   def x(self):     print "sub2"  c = Sub1() c = Sub2()  
for line in open("file"):     li=line.strip()     if not li.startswith("#"):         print line.rstrip()  
help(numpy.ndarray)   |  dump(...)  |      a.dump(file)  |        |      Dump a pickle of the array to the specified file.  |      The array can be read back with pickle.load or numpy.load.  |        |      Parameters  |      ----------  |      file : str  |          A string naming the dump file.  numpy.load 
# The Windows registry key for MySQL. # This has to be set for Windows builds to work. # Only change this if you have a different version. registry_key = SOFTWARE\MySQL AB\MySQL Server 5.0  
csv skipinitialspace &gt;&gt;&gt; import csv  &gt;&gt;&gt; with open(name 'rb') as f: ...     for row in csv.reader(f delimiter=' ' skipinitialspace=True): ...             print '|'.join(row)  5.6|4.5|6.8|6.5 5.4|8.3|1.2|9.3  
_illegal_unichrs = [(0x00 0x08) (0x0B 0x0C) (0x0E 0x1F)                          (0x7F 0x84) (0x86 0x9F)                          (0xFDD0 0xFDDF) (0xFFFE 0xFFFF)]  if sys.maxunicode &gt;= 0x10000:  # not narrow build          _illegal_unichrs.extend([(0x1FFFE 0x1FFFF) (0x2FFFE 0x2FFFF)                                   (0x3FFFE 0x3FFFF) (0x4FFFE 0x4FFFF)                                   (0x5FFFE 0x5FFFF) (0x6FFFE 0x6FFFF)                                   (0x7FFFE 0x7FFFF) (0x8FFFE 0x8FFFF)                                   (0x9FFFE 0x9FFFF) (0xAFFFE 0xAFFFF)                                   (0xBFFFE 0xBFFFF) (0xCFFFE 0xCFFFF)                                   (0xDFFFE 0xDFFFF) (0xEFFFE 0xEFFFF)                                   (0xFFFFE 0xFFFFF) (0x10FFFE 0x10FFFF)])   _illegal_ranges = ["%s-%s" % (unichr(low) unichr(high))                     for (low high) in _illegal_unichrs]  _illegal_xml_chars_RE = re.compile(u'[%s]' % u''.join(_illegal_ranges))   0x0D 
for each item in prefs for person1:     if that is also an item in the prefs for person2:         find the difference between the number of prefs for that item for the two people         and square it (Math.pow(x2) is "x squared")  
d2 = values[s] ab=f() &gt;&gt;&gt; T=(1) &gt;&gt;&gt; a=T &gt;&gt;&gt; a (1) &gt;&gt;&gt; b=T &gt;&gt;&gt; b 1 &gt;&gt;&gt;   a b 
class BooleanDescriptor(object):     def __init__(self attr):         self.attr = attr      def __get__(self instance owner):       return getattr(instance self.attr)      def __set__(self instance value):       if value in (True False):         return setattr(instance self.attr value)       else:         raise TypeError   class Foo(object):     _bar = False     bar = BooleanDescriptor('_bar')  
a b &gt;&gt;&gt; u = Union(a b)  u a b class Base(object):      def union(self other):         return Union(self other)      def intersection(self other):         return Intersection(self other)  class RangeSet(Base):      def __init__(self low high):         self.low = low         self.high = high      def __contains__(self value):         return value &gt;= self.low and value &lt; self.high  class Union(Base):     def __init__(self *sets):         self.sets = sets      def __contains__(self value):         return any(value in x for x in self.sets)  class Intersection(Base):      def __init__(self *sets):         self.sets = sets      def __contains__(self value):         return all(value in x for x in self.sets)   a = RangeSet(0 10) b = RangeSet(5 15)  u = a.union(b) i = a.intersection(b)  print 3 in u print 7 in u print 12 in u  print 3 in i print 7 in i print 12 in i  True True True False True False  
struct 
class BuildInfo(object):     def __init__(self objectFiles = [] sourceFiles = []):         self.objectFiles = objectFiles         self.sourceFiles = sourceFiles      def append(self build_info):         self.objectFiles.extend(build_info.objectFiles)         self.sourceFiles.extend(build_info.sourceFiles)  a = BuildInfo() #uses default value of an empty list for object/sourceFiles b = BuildInfo(["hello.dat" "world.dat"] ["foo.txt" "bar.txt"]) a.append(b) #a now has the same info as b a.append(b) #a now has ["hello.dat" "world.dat" "hello.dat" "world.dat"] ["foo.txt" "bar.txt" "foo.txt" "bar.txt"]  a = [123] b = [456] a.append(b) #a is now [123[456]]  a = [123] b = [456] a.extend(b) #a is now [123456]  
socket.recv(x) socket.recv(1024) socket.recv() socket.recv() data = self.request.recv(1024)  data = self.request.recv()  recv() socket.ntohs() socket.ntohl() recv() length = None buffer = "" while True:   data += self.request.recv()   if not data:     break   buffer += data   while True:     if length is None:       if ':' not in buffer:         break       # remove the length bytes from the front of buffer       # leave any remaining bytes in the buffer!       length_str ignored buffer = buffer.partition(':')       length = int(length_str)      if len(buffer) &lt; length:       break     # split off the full message from the remaining bytes     # leave any remaining bytes in the buffer!     message = buffer[:length]     buffer = buffer[length:]     length = None     # PROCESS MESSAGE HERE  
getattr None __str__ __eq__ self.__dict__ vars(self) class person(object):      def __init__(self keys):         self.__dict__ = dict.fromkeys(keys)      def __str__(self):         return str(vars(self))      def __eq__(self other):         return isinstance(other person) and vars(self) == vars(other)  
r'' &gt;&gt;&gt; type(u'abc') &lt;type 'unicode'&gt; &gt;&gt;&gt; r'ab\c' 'ab\\c'  
&gt;&gt;&gt; import math &gt;&gt;&gt; mlat = sum(x['lat'] for x in l) / len(l) &gt;&gt;&gt; mlng = sum(x['lng'] for x in l) / len(l) &gt;&gt;&gt; def algo(x):     return (math.atan2(x['lat'] - mlat x['lng'] - mlng) + 2 * math.pi) % (2*math.pi)  &gt;&gt;&gt; l.sort(key=algo)  algo [0 2pi] 
from selenium import selenium import unittest import lxml.html  class TestMyDomain(unittest.TestCase):     def setUp(self):         self.selenium = selenium("localhost" \             4444 "*firefox" "http://www.MyDomain.com")         self.selenium.start()      def test_mydomain(self):          htmldoc = open('site-list.html').read()         url_list = [link for (element attributelinkpos) in lxml.html.iterlinks(htmldoc)]         for url in url_list:              try:                  sel = self.selenium                 sel.open(url)                         sel.select_window("null")                 js_code = '''                 myDomainWindow = this.browserbot.getUserWindow();                 for(obj in myDomainWindow) {                       /* This code grabs the OMNITURE tracking pixel img */                     if ((obj.substring(04) == 's_i_') &amp;&amp; (myDomainWindow[obj].src)) {                                       var ret = myDomainWindow[obj].src;                     }                  }                         ret;                 '''                 omniture_url = sel.get_eval(js_code) #parse&amp;process this however you want               except Exception e:                 print 'We ran into an error: %s' % (e)           self.assertEqual("expectedValue" observedValue)       def tearDown(self):         self.selenium.stop()  if __name__ == "__main__":     unittest.main()  
os.chdir try finally __del__ __del__ saved_path = os.getcwd() os.chdir(new_path) try:     # code that does stuff in new_path goes here finally:     os.chdir(saved_path)  
class Magic(type):     def __str__(self):         return 'Something crazy'     def __repr__(self):         return 'Another craziness'  class Foo(object):     __metaclass__ = Magic  &gt;&gt;&gt; print Foo Something crazy &gt;&gt;&gt; Foo Another craziness  
InstrumentedAttribute ColumnProperty t.colname == getattr(t Table.colname.property.key)  Column Column Column.key desc() ClauseElement sqlalchemy.sql.expression._UnaryExpression .modifier sqlalchemy.sql.operators.desc_op .element sqlalchemy.sql.visitors.ReplacingCloningVisitor 
img_buffer[1::4] = 255 
oraocci11.dll oraocci10.dll oraclient9.dll 
({   get * (property) {     // handle property gets here   } })  set * (property value) {...} 
datetime.timedelta() &gt;&gt;&gt; from datetime import date timedelta &gt;&gt;&gt; yesterday = date.today() - timedelta(days=1) &gt;&gt;&gt; yesterday.strftime('%m%d%y') '110909'  
len() &gt;&gt;&gt; len([123]) 3  len() len() 
raw_data _ _ = line.partition("#") data= raw_data.strip() if len(data) == 0:     continue # or whatever the data part of the line is empty # you have data   raw_data _ _ = line.partition("#") raw_data _ _ _ data _ _ = line.strip().partition("#")  
class B(object):  super() (object) classobj type TypeError: super() argument 1 must be type not classobj class OldStyle:     pass  class NewStyle(object):     pass  print type(OldStyle)  # prints: &lt;type 'classobj'&gt;  print type(NewStyle) # prints &lt;type 'type'&gt;  
TypeError: 'NoneType' object is not iterable self.accept() None EWOULDBLOCK None handle_accept() accept() None 
import sys from PyQt4 import QtGui from PIL import Image  def get_pil_image(w h):     clr = chr(0)+chr(255)+chr(0)     im = Image.fromstring("RGB" (wh) clr*(w*h))     return im  def pil2qpixmap(pil_image):     w h = pil_image.size     data = pil_image.tostring("raw" "BGRX")     qimage = QtGui.QImage(data w h QtGui.QImage.Format_RGB32)     qpixmap = QtGui.QPixmap(wh)     pix = QtGui.QPixmap.fromImage(qimage)     return pix  class ImageLabel(QtGui.QLabel):     def __init__(self parent=None):         QtGui.QLabel.__init__(self parent)          self.setGeometry(300 300 250 150)         self.setWindowTitle('Window')          self.pix = pil2qpixmap(get_pil_image(5050))         self.setPixmap(self.pix)  app = QtGui.QApplication(sys.argv) imageLabel = ImageLabel() imageLabel.show() sys.exit(app.exec_())  
strptime time datetime import datetime datetime.datetime.strptime("01-Jan-1995" "%d-%b-%Y")  
'Toy Stroy..(II) (1995)'.rstrip(')').rsplit('('1)  r'\s*[(]\d{4}[)]\s*$' s = '' l = [s] match = re.compile(r'\s*[(]\d+[)]\s*$').search(s) if match is not None:     l = [s[:len(match.group(0))] s[-len(match.group(0)):].trim]  
import re  def mycmp(version1 version2):     def normalize(v):         return [int(x) for x in re.sub(r'(\.0+)*$''' v).split(".")]     return cmp(normalize(version1) normalize(version2))  assert mycmp("1" "1") == 0 assert mycmp("2.1" "2.2") &lt; 0 assert mycmp("3.0.4.10" "3.0.4.2") &gt; 0 assert mycmp("4.08" "4.08.01") &lt; 0 assert mycmp("3.2.1.9.8144" "3.2") &gt; 0 assert mycmp("3.2" "3.2.1.9.8144") &lt; 0 assert mycmp("1.2" "2.1") &lt; 0 assert mycmp("2.1" "1.2") &gt; 0 assert mycmp("5.6.7" "5.6.7") == 0 assert mycmp("1.01.1" "1.1.1") == 0 assert mycmp("1.1.1" "1.01.1") == 0 assert mycmp("1" "1.0") == 0 assert mycmp("1.0" "1") == 0 assert mycmp("1.0" "1.0.1") &lt; 0 assert mycmp("1.0.1" "1.0") &gt; 0 assert mycmp("1.0.2.0" "1.0.2") == 0  
foo foo/__init__.py foo.bar foo.wiz AttributeError foo.bar foo.bar.a module foo foo.bar a b c foo/bar/__init__.py foo.bar 
; the below section must remain in the config file for RPC ; (supervisorctl/web interface) to work additional interfaces may be ; added by defining them in separate rpcinterface: sections [rpcinterface:supervisor] supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface  
setup = """ from Crypto.Cipher import AES import os newFile = [] fileData = open('filename').read() """ stmt = """ key = os.urandom(32) cipher = AES.new(key AES.MODE_CFB) for lines in fileData:     newFile = cipher.encrypt(lines)"""  tt = timeit.Timer(stmt setup) tt.repeat()  
&gt;&gt;&gt; re.search('^[-:0-9]+$' "12:24:-14") &lt;_sre.SRE_Match object at 0x01013758&gt; &gt;&gt;&gt; re.search('^[-:0-9]+$' "hello") &gt;&gt;&gt; re.search('^[-:0-9]+$' "hello2")  + ^ $ \A \Z s3 
wrap method = fn method open def wrap(method exceptions = (OSError IOError)):     def fn(*args **kwargs):         try:             return method(*args **kwargs)         except exceptions:             sys.exit('Can\'t open \'{0}\'. Error #{1[0]}: {1[1]}'.format(args[0] sys.exc_info()[1].args))      return fn  open = wrap(open) foo = wrap(foo)  
through class Product(models.Model):     ...  class ProductQuantity(models.Model):     product = models.ForeignKey('Product')     invoice = models.ForeignKey('Invoice')     quantity = models.IntegerField()  class Invoice(models.Model):     ...     products = models.ManyToManyField(Product through=ProductQuantity)  
pic = StringIO.StringIO(pic)  
import re  utf8_detector = re.compile(r"""^(?:      [\x09\x0A\x0D\x20-\x7E]            # ASCII    | [\xC2-\xDF][\x80-\xBF]             # non-overlong 2-byte    |  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs    | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte    |  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates    |  \xF0[\x90-\xBF][\x80-\xBF]{2}     # planes 1-3    | [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15    |  \xF4[\x80-\x8F][\x80-\xBF]{2}     # plane 16   )*$""" re.X)  
is not != not loja True objecto.loja True 
repr eval 
images.resize(data width=188) 
import time class something(object):     def __init__(selfc):         self.c=c     def inc(self):         new = self.c+1          # if the thread is interrupted by another inc() call its result is wrong         time.sleep(0.001) # sleep makes the os continue another thread         self.c = new   x = something(0) import threading  for _ in range(10000):     threading.Thread(target=x.inc).start()  print x.c # ~900 here instead of 10000  
{{ nhl_form.league }}  league 
~/.bash_profile export DYLD_FRAMEWORK_PATH=/opt/local/Library/Frameworks  
appendNextFib() appendNextFib 
csvfile csv.DictReader fieldnames restkey cvsfile dialect csv.DictReader(file('test.csv') dialect='excel_tab')  
jQuery.post(toLoad formInput   function(data textStatus) {     // now check if data is set and what the status is     alert(data);     alert(textStatus);     //alert(data.getElementsByTagName("building"));   }   'xml' );  Content-Length: 0 
range(1 times) range(times) for (int i=1; i &lt; times; i++) if (i &lt; times) True except def wait_p_long(times compID_name ppty_name ppty_value compID_cell=None):     from marathon.playback import *     """     Wrapper around wait_p which takes exactly the same parameters as wait_p     except that an extra first parameter is used to specify the number of times     wait_p is called.     """     for i in range(times):         try:             wait_p(compID_name ppty_name ppty_value compID_cell)         except:             if i == times - 1:                 raise             else:                 print "wait_p failed trying again"  
__get__ invalidate __get__ im_self 
sock connections[sock] accounts[account_id] connected = {} accounts = {}  def load_account(acct):     return db_magic(acct)                             # Grab a dictionary from the DB  def somebody_connected(sck acct):     global connected accounts     account = load_account(acct)     connected[sck] = account                          # Now we have it by socket     accounts[acct["accountid"]] = account             # Now we have it by account ID  account def update_username(acct_id new_username):     accounts[acct_id]["username"] = new_username  def what_is_my_username(sck):     sck.send(connected[sck]["username"])              # In response to GIMME_USERNAME  update_username sck.send 
&gt;&gt;&gt;from decimal import Decimal getcontext &gt;&gt;&gt;getcontext().prec = 50 &gt;&gt;&gt;x = Decimal(1)/Decimal(7) &gt;&gt;&gt;x Decimal('0.14285714285714285714285714285714285714285714285714') &gt;&gt;&gt;str(x) '0.14285714285714285714285714285714285714285714285714'  
Location: ${project_loc}/src/${project_name}/manage.py Working Directory: ${project_loc}/src/${project_name}/ Arguments: test ${string_prompt}  project_loc project_name 
sys.platform != 'win32' 
+ listone = [123] listtwo = [456]  joinedlist = listone + listtwo  &gt;&gt;&gt; joinedlist [123456]  
# This separates the first and last names name = name.partition(" ") firstName = name[0] # now figure out the first initial # we're assuming that if it has a dot it's an initialized name # but this may not hold in general if "." in firstName:     firstInitial = firstName else:     firstInitial = firstName[0] + "." lastName = name[2] return {"FirstName":firstName "FirstInitial":firstInitial "LastName": lastName}  
SSH_AUTH_SOCK SSH_AGENT_PID $HOME/.ssh/known_hosts eval $(ssh-agent) ssh-add path-to-your-private-key  path-to-your-private-key ssh-add 
System.out.println(java.util.Arrays.toString(getName)); toString() 
def inc(self):     v = self.c     time.sleep(random.random()) # Should probably limit it to a few hundred ms     self.c = v + 1  def dec(self):     v = self.c     time.sleep(random.random()) # Should probably limit it to a few hundred ms     self.c = v - 1  
#!/usr/bin/env python import numpy as np  a = np.fromfile(open('file' 'r') sep='\n') # [ 0.     0.005  0.124  0.     0.004  0.     0.111  0.112]  # You can set arbitrary bin edges: bins = [0 0.150] hist bin_edges = np.histogram(a bins=bins) # hist: [8] # bin_edges: [ 0.    0.15]  # Or if bin is an integer you can set the number of bins: bins = 4 hist bin_edges = np.histogram(a bins=bins) # hist: [5 0 0 3] # bin_edges: [ 0.     0.031  0.062  0.093  0.124]  
time you-prg-executable time 
subprocess.call 
foo def f(foo bar):     g(foo=foo)  
repmat(a m n) tile(a (m n)) &gt;&gt; repmat([1;1][111])  ans =      1      1  In [46]: a = np.array([[1][1]]) In [47]: np.tile(a [111]) Out[47]:  array([[[1]         [1]]])  
q.filter(start_date__gt=pay_period.start_date).order_by("start_date")  
reactor.stop root.quit() root.destroy() import Tkinter from twisted.internet import tksupport  root = Tkinter.Tk() tksupport.install(root)  from twisted.internet import reactor reactor.callLater(3 reactor.stop) reactor.run()  
path[0] 
common = set(x[0]) for l in x[1:]:     common &amp;= set(l) print list(common)  import operator print reduce(operator.iand map(set x))  
[x for x in list1 if x not in set(list2)]  list2_set = set([tuple(x) for x in list2]) diff = [x for x in list1 if tuple(x) not in list2_set]  list1 = [[x+1 x*2] for x in range(38000)] list2 = [[x+1 x*2] for x in range(10000 160000)]   #Original function  real    2m16.780s  user    2m16.744s  sys     0m0.017s   #My function  real    0m0.433s  user    0m0.423s  sys     0m0.007s  
channel_values = open(channel_output_file).read().split()  
class SomeClass(db.Model):   item = None  class AnotherClass(db.Model):   otherItem = db.ReferenceProperty(SomeClass)  SomeClass.item = db.ReferenceProperty(AnotherClass)  
Person.objects.exclude(id__in=Person.objects.filter(project=p status__is_red=True).values(id))  
# in the views.py: field = 'business'   {# in the template: #} {{ object.field }}  object.business 
dict set tuple dict tuple dict dict tuple tuple(sorted(map.items())) tuple dict def removeDups(list1 list2):     set1 = set(tuple(sorted(x.items())) for x in list1)     set2 = set(tuple(sorted(x.items())) for x in list2)      return set1 - set2  
def splitter( s points ):     c = 0     for xy in points:         yield s[c:x]         yield "(%s)" % s[x:y+1]         c=y+1     yield s[c:]  print list(splitter(str split_points)) # =&gt; ['M' '(SEP)' 'AGD' '(VRQN)' 'P' '(CG)' 'SKAC']  # if some start and endpoints are the same remove empty strings. print list(x for x in splitter(str split_points) if x != '')  
save class MyThing( models.Model )     color = models.CharField(...)     def save( self *args **kw ):         if self.color.startswith("#"):             self.color= self.color[1:]         super( MyThing self ).save( *args **kw )  
//input .//input 
setUp s 
""" my module test does x and y """ class myclass(object):     ...  import testmodule print testmodule.__doc__  __repr__ def __repr__(... import mymodule print mymodule.__repr__()   &gt;&gt;&gt; import sys                 # we import the module &gt;&gt;&gt; sys.__repr__()               # works as usual "&lt;module 'sys' (built-in)&gt;" &gt;&gt;&gt; sys.__dict__['__repr__']     # but it's not in the modules __dict__ ? Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; KeyError: '__repr__' &gt;&gt;&gt; sys.__class__.__dict__['__repr__'] # __repr__ is provided on the module type as a slot wrapper &lt;slot wrapper '__repr__' of 'module' objects&gt; &gt;&gt;&gt; sys.__class__.__dict__['__repr__'](sys) # which we should feed an instance of the module type "&lt;module 'sys' (built-in)&gt;"  
if not myList:   print "Nothing here"  
json.load {'abc': 'def'} dict mydict['abc'] myobj.abc mydict.keys() ['abc'] for k in mydict: k 
&gt;&gt;&gt; compile("cubic_fit(1 2 get_data())" '&lt;string&gt;' 'eval').co_names ('cubic_fit' 'get_data')  
Axis.set_axisbelow(True) 
p.stdin.close()  
{% for key value in hop.items %}     {% ifequal key 'boil time' %}         {{ value }}     {% endifequal %} {% endfor %}  {% for hop in hops %}     &lt;tr&gt;         &lt;td&gt;{{ hop.name }}&lt;/td&gt;         &lt;td&gt;{{ hop.mass }}&lt;/td&gt;         &lt;td&gt;             {% for item in hop.items %}                 {% ifequal item.0 'boil time' %}                     {{ item.1 }}                 {% endifequal %}             {% endfor %}         &lt;/td&gt;     &lt;/tr&gt; {% endfor %}  {% for hop in hops %}     &lt;tr&gt;         &lt;td&gt;{{ hop.name }}&lt;/td&gt;         &lt;td&gt;{{ hop.mass }}&lt;/td&gt;         &lt;td&gt;             {% for key value in hop.items %}                 {% ifequal key 'boil time' %}                     {{ value }}                 {% endifequal %}             {% endfor %}         &lt;/td&gt;     &lt;/tr&gt; {% endfor %}  {% for hop in hops %}     &lt;tr&gt;         &lt;td&gt;{{ hop.name }}&lt;/td&gt;         &lt;td&gt;{{ hop.mass }}&lt;/td&gt;         &lt;td&gt;             {% for item in hop.items %}                 {% ifequal item.0 'boil time' %}                     {{ item.1 }}                 {% endifequal %}             {% endfor %}         &lt;/td&gt;     &lt;/tr&gt; {% endfor %}  {% regroup hop.items by 'boil time' as bt %}     {% for item in bt %}         {% if forloop.first %}             {% for item2 in item.list %}                 {% for item3 in item2 %}                     {% if not forloop.first %}                         {{ item3 }}                     {% endif %}                 {% endfor %}             {% endfor %}         {% endif %} {% endfor %}  
__del__() __setattr__() __delattr__() del(object.x) x __setattr__() __delattr__() 
inputdata from itertools import groupby from operator import itemgetter  inputdata.sort(key=itemgetter(*inputdata[0])) # ensures order print [k for k g in groupby(inputdata) if len(list(g)) &gt; 1]  [{'line': u'line 666' 'file': u'/file.txt' 'rule': u'A DUPLICATE RULE'}]  
class UserProfileForm(forms.ModelForm):     first_name = forms.CharField(label=_(u'Prénom') max_length=30)     last_name = forms.CharField(label=_(u'Nom') max_length=30)      def __init__(self *args **kw):         super(UserProfileForm self).__init__(*args **kw)         self.fields['first_name'].initial = self.instance.user.first_name         self.fields['last_name'].initial = self.instance.user.last_name          self.fields.keyOrder = [             'first_name'             'last_name'             ...some_other...             ]      def save(self *args **kw):         super(UserProfileForm self).save(*args **kw)         self.instance.user.first_name = self.cleaned_data.get('first_name')         self.instance.user.last_name = self.cleaned_data.get('last_name')         self.instance.user.save()      class Meta:         model = UserProfile  
__init__ self.aos_config_prompt self.aos_config_prompt 
numpy.array([d1 d2]) d3 = numpy.vstack([ d1[newaxis...] d2[newaxis...] ])  # shape = (2 18 18)  d1[newaxis...].shape == (1 18 18) d3 
encodings.aliases.aliases.keys() aliases 1252 windows_1252 cp1252 aliases.keys() set(aliases.values()) aliases &gt;&gt;&gt; from encodings.aliases import aliases &gt;&gt;&gt; def find(q): ...     return [(kv) for k v in aliases.items() if q in k or q in v] ... &gt;&gt;&gt; find('1252') # multiple aliases [('1252' 'cp1252') ('windows_1252' 'cp1252')] &gt;&gt;&gt; find('856') # no codepage 856 in aliases [] &gt;&gt;&gt; find('koi8') # no koi8_u in aliases [('cskoi8r' 'koi8_r')] &gt;&gt;&gt; 'x'.decode('cp856') # but cp856 is a valid codec u'x' &gt;&gt;&gt; 'x'.decode('koi8_u') # but koi8_u is a valid codec u'x' &gt;&gt;&gt;  zlib quopri base64 
for lines in data encrypt 
if "exam" in "example": print "yes!"  if 
foo.__module__ bar sys.modules['bar'] __file__ __package__ 
def iscomment(s):    return s.startswith('#')  from itertools import dropwhile with open(filename 'r') as f:     for line in dropwhile(iscomment f):        # do something with line  # # from itertools import ifilterfalse with open(filename 'r') as f:     for line in ifilterfalse(iscomment f):        # do something with line  for line in ifilterfalse(iscomment f))  for line in (x for x in f if not x.startswith('#'))  
dict dict __dict__ &gt;&gt;&gt; class struct(dict): ...     def __getattribute__(self key): ...         return self[key] ...  &gt;&gt;&gt; s = struct(a=5 b=7) &gt;&gt;&gt; s.a 5  __getattribute__ __getattr__ get keys dict __getattribute__ &gt;&gt;&gt; def struct(**kwargs): ...     return type('Struct' (object) kwargs) ...  &gt;&gt;&gt; s = struct(a=5 b=7) &gt;&gt;&gt; s.a 5  
QItemSelectionModel selectedRows() myTableView-&gt;selectionModel()-&gt;selectedRows()  
import httplib c = httplib.HTTPConnection(&lt;hostname&gt;) c.request("HEAD" &lt;url&gt;) print c.getresponse().status  
HEAD urlparse &gt;&gt;&gt; import httplib &gt;&gt;&gt; import urlparse &gt;&gt;&gt; url = "http://www.google.com/index.html" &gt;&gt;&gt; (scheme netloc path params query fragment) = urlparse.urlparse(url) &gt;&gt;&gt; conn = httplib.HTTPConnection(netloc) &gt;&gt;&gt; conn.request("HEAD" urlparse.urlunparse(('' '' path params query fragment)) &gt;&gt;&gt; res = conn.getresponse() &gt;&gt;&gt; print res.status res.reason 302 Found  
threading.py 
__init__.py python -m unittest discover &lt;test_directory&gt; # or python -m unittest discover -s &lt;directory&gt; -p '*_test.py'  
include_package_data=True import os.path f = open(os.path.join(os.path.dirname(__file__)'templates''file1.txt')) print f.read() f.close()  zip_safe = False 
struct.pack ctypes.create_string_buffer 
text.encode('utf8') 
(sum(row) for row in M) sum(row) M next(G) M next(G) &gt;&gt;&gt; M = [[123] ...      [456] ...      [789]] &gt;&gt;&gt;  &gt;&gt;&gt; G = (sum(row) for row in M) # create a generator of row sums &gt;&gt;&gt; next(G) # Run the iteration protocol 6 &gt;&gt;&gt; next(G) 15 &gt;&gt;&gt; next(G) 24  
map = {} with open(r'c:\temp\input.csv' 'r') as fin:     reader = csv.reader(fin)     with open(r'c:\temp\output.csv' 'w') as fout:         writer = csv.writer(fout)         # omit this if the file has no header row         writer.writerow(next(reader))         for row in reader:             (id name phone ref discard) = row             if map.has_key(phone):                 ref = map[phone]                 discard = "YES"             else:                 map[phone] = id             writer.writerow((id name phone ref discard))  
u # -*- coding: utf-8 -*- def mylen(word):   u"""        &lt;----- SEE 'u' HERE   &gt;&gt;&gt; mylen(u"áéíóú")   5   """   return len(word)  print mylen(u"áéíóú")  if __name__ == "__main__":     import sys     reload(sys)     sys.setdefaultencoding("UTF-8")     import doctest     doctest.testmod()  
&gt;&gt;&gt; my_array = [123456] &gt;&gt;&gt; my_array[:3] = [123] &gt;&gt;&gt; my_array [123 4 5 6]  
python src\test\python\test_power_estimator.py sys.path test_power_estimator.py src src/test/python 
#!/usr/bin/env python from lxml import html  doc = html.fromstring('''     &lt;meta name="Description"&gt;     &lt;meta name="description"&gt;     &lt;META name="description"&gt;     &lt;meta NAME="description"&gt; ''') for meta in doc.xpath('//meta[re:test(@name "^description$" "i")]'                       namespaces={"re": "http://exslt.org/regular-expressions"}):     print html.tostring(meta pretty_print=True)  &lt;meta name="Description"&gt; &lt;meta name="description"&gt; &lt;meta name="description"&gt; &lt;meta name="description"&gt;  
from numpy import *  # set the start conditions etc. n_timesteps = 100 dt m k = .1 1. 2. # timestep mass spring-const (I'll write the equations correctly so the units make sense) t x v = 0. array([0.0.0.]) array([2. 0. 2.])  # initial values gravity = array([0. 0. -9.8])  # to make the problem a little more interesting result = zeros((4 n_timesteps))  # run the simulation looping through the timesteps for n in range(n_timesteps):     # do the calculation     f = -k*x + gravity     a = f/m     v += a*dt     x += v*dt     # store the results     t += dt  # just for easy record keeping     result[0n] = t     result[1:4 n] = x  force velocity 
% %s cursor.execute('... %s %s ...' (arg1 arg2)) %s cursor.execute(sql_function_above) % % %% % 
audio /= np.max(np.abs(audio)axis=0) image *= (255.0/image.max())  /= *= image *= 255.0/image.max()    # Uses 1 division and image.size multiplications  image /= image.max()/255.0    # Uses 1+image.size divisions  audio image astype image = image.astype('float64')  
/usr/local/bin /usr/local/bin/python2.6 python2.6 $PATH /usr/local/bin /usr/bin 
title_for_url = models.CharField(max_length=100 editable=False default=property(_get_title_for_url)  class Entry(models.Model):     def save(self *args **kwargs):        self.title_for_url = self.get_title_in_url_format()        super(Entry self).save(*args **kwargs)  
update_r vsve=update_v(nvsvemsmedtfsfe) update_v vs vs vs 
from pylab import * import time  data = []   # make the data for i in range(1000):     a = .01*pi*i+.0007     m = -1./tan(a)     x = arange(-3 3 .1)     y = m*x     data.append((clip(x+cos(a) -3 3)clip(y+sin(a) -3 3)))   for x y in data:  # make a dynamic plot from the data     try:         plotdata.set_data(x y)     except NameError:         ion()         fig = figure()         plot(cos(arange(0 2.21*pi .2)) sin(arange(0 2.21*pi .2)))         plotdata = plot(x y)[0]         xlim(-2 2)         ylim(-2 2)     draw()     time.sleep(.01)  time.sleep(.01) 
from random import shuffle L = ["Anne" "Beth" "Cath" "Dave" "Emma"] shuffle(L int=lambda n: int(n - 1)) print L  #For 100000 samples  (('Beth' 'Cath' 'Dave' 'Emma' 'Anne') 13417) (('Beth' 'Cath' 'Emma' 'Anne' 'Dave') 6572) (('Beth' 'Dave' 'Anne' 'Emma' 'Cath') 3417) (('Beth' 'Dave' 'Emma' 'Cath' 'Anne') 6581) (('Beth' 'Emma' 'Anne' 'Cath' 'Dave') 3364) (('Beth' 'Emma' 'Dave' 'Anne' 'Cath') 6635) (('Cath' 'Anne' 'Dave' 'Emma' 'Beth') 1703) (('Cath' 'Anne' 'Emma' 'Beth' 'Dave') 1705) (('Cath' 'Dave' 'Beth' 'Emma' 'Anne') 6583) (('Cath' 'Dave' 'Emma' 'Anne' 'Beth') 3286) (('Cath' 'Emma' 'Beth' 'Anne' 'Dave') 3325) (('Cath' 'Emma' 'Dave' 'Beth' 'Anne') 3421) (('Dave' 'Anne' 'Beth' 'Emma' 'Cath') 1653) (('Dave' 'Anne' 'Emma' 'Cath' 'Beth') 1664) (('Dave' 'Cath' 'Anne' 'Emma' 'Beth') 3349) (('Dave' 'Cath' 'Emma' 'Beth' 'Anne') 6727) (('Dave' 'Emma' 'Anne' 'Beth' 'Cath') 3319) (('Dave' 'Emma' 'Beth' 'Cath' 'Anne') 3323) (('Emma' 'Anne' 'Beth' 'Cath' 'Dave') 1682) (('Emma' 'Anne' 'Dave' 'Beth' 'Cath') 1656) (('Emma' 'Cath' 'Anne' 'Beth' 'Dave') 3276) (('Emma' 'Cath' 'Dave' 'Anne' 'Beth') 6638) (('Emma' 'Dave' 'Anne' 'Cath' 'Beth') 3358) (('Emma' 'Dave' 'Beth' 'Anne' 'Cath') 3346)  from random import shufflerandint L=["Anne" "Beth" "Cath" "Dave" "Emma"] shuffle(L random=lambda: 1 int=lambda n: randint(0 n - 2)) print L  # For 100000 samples  (('Beth' 'Cath' 'Dave' 'Emma' 'Anne') 4157) (('Beth' 'Cath' 'Emma' 'Anne' 'Dave') 4155) (('Beth' 'Dave' 'Anne' 'Emma' 'Cath') 4099) (('Beth' 'Dave' 'Emma' 'Cath' 'Anne') 4141) (('Beth' 'Emma' 'Anne' 'Cath' 'Dave') 4243) (('Beth' 'Emma' 'Dave' 'Anne' 'Cath') 4208) (('Cath' 'Anne' 'Dave' 'Emma' 'Beth') 4219) (('Cath' 'Anne' 'Emma' 'Beth' 'Dave') 4087) (('Cath' 'Dave' 'Beth' 'Emma' 'Anne') 4117) (('Cath' 'Dave' 'Emma' 'Anne' 'Beth') 4127) (('Cath' 'Emma' 'Beth' 'Anne' 'Dave') 4198) (('Cath' 'Emma' 'Dave' 'Beth' 'Anne') 4210) (('Dave' 'Anne' 'Beth' 'Emma' 'Cath') 4179) (('Dave' 'Anne' 'Emma' 'Cath' 'Beth') 4119) (('Dave' 'Cath' 'Anne' 'Emma' 'Beth') 4143) (('Dave' 'Cath' 'Emma' 'Beth' 'Anne') 4203) (('Dave' 'Emma' 'Anne' 'Beth' 'Cath') 4252) (('Dave' 'Emma' 'Beth' 'Cath' 'Anne') 4159) (('Emma' 'Anne' 'Beth' 'Cath' 'Dave') 4193) (('Emma' 'Anne' 'Dave' 'Beth' 'Cath') 4177) (('Emma' 'Cath' 'Anne' 'Beth' 'Dave') 4087) (('Emma' 'Cath' 'Dave' 'Anne' 'Beth') 4150) (('Emma' 'Dave' 'Anne' 'Cath' 'Beth') 4268) (('Emma' 'Dave' 'Beth' 'Anne' 'Cath') 4109)  random.shuffle() def shuffle(self x random=None int=int):     """x random=random.random -&gt; shuffle list x in place; return None.      Optional arg random is a 0-argument function returning a random     float in [0.0 1.0); by default the standard random.random.     """      if random is None:         random = self.random     for i in reversed(xrange(1 len(x))):         # pick an element in x[:i+1] with which to exchange x[i]         j = int(random() * (i+1))         x[i] x[j] = x[j] x[i]  j = int(random() * (i+1)) j = int(random() * (i + 1) - 1)  random() randint int j = randint(0 i - 1)  
multi_line_word = Forward() multi_line_word &lt;&lt; (word | (split_word + multi_line_word))  multi_line_word = ZeroOrMore(split_word) + word  ['super' 'cali' fragi' 'listic'] multi_line_word.setParseAction(lambda t: ''.join(t))  ['supercalifragilistic'] no_space = NotAny(White(' \t\r')) # make sure that the EOL immediately follows the escape backslash continued_ending = Literal('\\') + no_space + lineEnd word = Word(alphas) # make sure that the escape backslash immediately follows the word split_word = word + NotAny(White()) + Suppress(continued_ending) multi_line_word = OneOrMore(split_word + NotAny(White())) + Optional(word) multi_line_word.setParseAction(lambda t: ''.join(t))  
set_trace def debug_trace():   '''Set a tracepoint in the Python debugger that works with Qt'''   from PyQt4.QtCore import pyqtRemoveInputHook    # Or for Qt5   #from PyQt5.QtCore import pyqtRemoveInputHook    from pdb import set_trace   pyqtRemoveInputHook()   set_trace()  QtCore.pyqtRestoreInputHook() 
ImageFileField.save() FileField.save() save ImageFileField.save() save=False self.image.save save save=False save 
import re  #In python functions/methods usually are lowercase #and words are seperated by _ while classes use CamelCasing def eval_step_by_step(expression):     """Evaluates math expression. Doesn't do any error checking.         expression (string) - math expression"""      print expression     #For pretty formating.     expr_len = len(expression)     #While there's parentheses in the expression.     while True:         #re.match checks for a match only at the beginning of the string         #while re.search checks for a match anywhere in the string.          #Matches all numbers + - * / and whitespace within parentheses         #lazily (innermost first).         contents = re.search("\(([0-9|\*|/|\+|\-|\s]*?)\)" expression)          #If we didn't find anything print result and break out of loop.         if not contents:             #string.format() is the Python 3 way of formating strings             #(Also works in Python 2.6).              #Print eval(expression) aligned right in a "field" with width             #of expr_len characters.             print "{0:{1}}".format(eval(expression) expr_len)             break          #group(0) [match] is everything matching our search         #group(1) [parentheses_text] is just epression withing parentheses.         match parentheses_text = contents.group(0) contents.group(1)         expression = expression.replace(match str(eval(parentheses_text)))         #Aligns text to the right. Have to use "&gt;" here         #because expression is not a number.         print "{0:&gt;{1}}".format(expression expr_len)  #For example try: (4+3+(32-1)*3)*3 problem = raw_input("Input math problem: ")  eval_step_by_step(problem)  
auto_now editable=False auto_now auto_now_add save() auto_now auto_now_add save() created id modified save() from django.utils import timezone  class User(models.Model):     created     = models.DateTimeField(editable=False)     modified    = models.DateTimeField()      def save(self *args **kwargs):         ''' On save update timestamps '''         if not self.id:             self.created = timezone.now()         self.modified = timezone.now()         return super(User self).save(*args **kwargs)  save() django.utils.timezone.now() datetime.datetime.now() datetime.datetime settings.USE_TZ created auto_now_add=True auto_now auto_now_add 
&gt;&gt;&gt; schema.Table  &gt;&gt;&gt; from sqlalchemy import schema &gt;&gt;&gt; from sqlalchemy import Table &gt;&gt;&gt; Table is schema.Table True  
.encode('mbcs') .encode('cp949') sys.getfilesystemencoding utf-8 mbcs cp949 os.listdir sys.getfilesystemencoding open(unicode('??.txt' 'euc-kr'))  'cp949' 'mbcs' open(u'??')  
LOGGING_LOG_SQL = True 
nargin function c = testarg1(a b)       if (nargin == 1)          c = a .^ 2;       elseif (nargin == 2)          c = a + b;       end  
return len([x for x in myList if x in myDict]) &gt; 0  
&gt;&gt;&gt; az= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' &gt;&gt;&gt; az= az[:17]+'11'+az[19:] &gt;&gt;&gt; az 'ABCDEFGHIJKLMNOPQ11TUVWXYZ'  &gt;&gt;&gt; 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.replace('RS' '11' 1) 'ABCDEFGHIJKLMNOPQ11TUVWXYZ'  
for i in range(5):     print i  i = 0 print i i = 1 print i i = 2 print i i = 3 print i i = 4 print i  i for i in range(5):     a=i+1 print a  a=i+1 a 
memcached object = try_memcached() if not object:     object = real_query()     put_in_memcached(object)  memcached #!/usr/bin/python """ memcached objects for use with SQLAlchemy """ #    This program is free software: you can redistribute it and/or modify #    it under the terms of the GNU General Public License as published by #    the Free Software Foundation either version 3 of the License or #    (at your option) any later version. # #    This program is distributed in the hope that it will be useful #    but WITHOUT ANY WARRANTY; without even the implied warranty of #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the #    GNU General Public License for more details. # #    You should have received a copy of the GNU General Public License #    along with this program.  If not see &lt;http://www.gnu.org/licenses/&gt;.  import memcache import sqlalchemy import sqlalchemy.orm  SQLA_SESSION = sqlalchemy.orm.sessionmaker()  MEMCACHED_CLIENT = memcache.Client(['127.0.0.1:11211'])  class DetachedORMObject(object):     """     Session-detached object for use with ORM Mapping.  As the SQLAlchemy     documentation indicates creating and closing a session is not analogous     to creating and closing a database connection.  Connections are pooled by     the database engine by default.  Creating new sessions is of a minimal     cost.  Also objects using this wrapper will not likely interact in with     the database through the full power of SQLAlchemy queries.      """     @classmethod     def fetch_by_field(cls field value):         """Fetch a mapped orm object with the give field and value"""         session = SQLA_SESSION()         try:             class_object = session.query(cls).filter(field == value).one()         except sqlalchemy.orm.exc.NoResultFound:             class_object = None         finally:             session.close()         return class_object      def update(self):         """Update the database with the values of the object"""         session = SQLA_SESSION()         session.add(self)         session.commit()         session.refresh(self)         session.close()      def refresh(self):         """Refresh the object with the values of the database"""         session = SQLA_SESSION()         session.add(self)         session.refresh(self)         session.close()      def delete(self):         """Delete the object from the database"""         session = SQLA_SESSION()         session.add(self)         session.delete(self)         session.commit()         session.close()   class MemcachedObject(object):     """     Object Wrapper for serializing objects in memcached. Utilizes an abstract     method get_isntance_key to understand how to get and set objects that     impliment this class.     """     @classmethod     def get_cached_instance(cls instance_key):         """Retrieve and return the object matching the instance_key"""         key = str(cls.__module__ + '.' + cls.__name__ + ':' \            + str(instance_key))         print "Memcached Getting:" key         return MEMCACHED_CLIENT.get(key)      def set_cached_instance(self time=0 min_compress_len=0):         """Set the cached instance of an object"""         print "Memcached Setting:" self.get_cache_key()         return MEMCACHED_CLIENT.set(self.get_cache_key() self time \             min_compress_len)      def delete_cached_instance(self time=0):         """Wrapper for the memcached delete method"""         print "Memcached Deleting:" self.get_cache_key()         return MEMCACHED_CLIENT.delete(self.get_cache_key() time)      def get_cache_key(self):         """Prepends the full class path of the object to the instance key"""         return self.__class__.__module__ + '.' + \             self.__class__.__name__ + ':' + self.get_instance_key()      def get_instance_key(self):         """Get the instance key must be implemented by child objects"""         raise NotImplementedError \             ("'GetInstanceKey' method has not been defined.")   class MemcachedORMObject(DetachedORMObject MemcachedObject):     """     Putting it all together now.  Implements both of the above classes. Worth     noting is the method for checking to see if the fetch_by_field method is     invoked using a primary key of the class.  The same technique is used to     generate an instance key for an instance of the class.     """     @classmethod     def fetch_by_field(cls field value):         """Fetch the requested object from the cache and database"""         orm_object = None         matched_primary_key = True         for key in cls._sa_class_manager.mapper.primary_key:             if field.key != key.key:                 matched_primary_key = False         if matched_primary_key:             orm_object = cls.get_cached_instance('(' + str(value) + ')')         if orm_object is None:             orm_object = super(MemcachedORMObject cls). \                 fetch_by_field(field value)             if orm_object is not None:                 orm_object.set_cached_instance()         return orm_object      def update(self):         """Update the object in the database and memcached"""         DetachedORMObject.update(self)         self.set_cached_instance()      def refresh(self):         """Refresh the object from the database and memcached"""         DetachedORMObject.refresh(self)         self.set_cached_instance()      def delete(self):         """Delete the object from the database and memcached"""         DetachedORMObject.delete(self)         self.delete_cached_instance()      def get_instance_key(self):         """Get the instance key implimenting abstract method in base"""         key = []         for column in self._sa_instance_state.manager.mapper.primary_key:             key.append('(' + str(getattr(self column.key)) + ')')         return ''.join(key)  memcached     if matched_primary_key:         orm_object = cls.get_cached_instance('(' + str(value) + ')')     if orm_object is None:         orm_object = super(MemcachedORMObject cls). \             fetch_by_field(field value)  
from numpy import *  #vsfsrs are all m*n matrixsgot initial values ini.e vs[0]fs[0]rs[0] are known #want use this foor loop to update them vs=zeros((103)) vs[0]=([123]) fs=zeros((103)) fs[0]=([234]) rs=zeros((103)) rs[0]=([345])  for i in range(5):     #start looping..     vs[i+1]=vs[i]+fs[i]     fs[i+1]=rs[i]-re[i]     rs[i+1]=rs[i]+vs[i]     print vsfsrs  
for k v in dictionary.iteritems():     x = [k] * len(v)     y = v     pyplot.plot(x y)  
for base in 'ACGT':   print base thesequence.count(base) + thesequence.count(base.lower())  
dnalines = text.split('\n')[1:] dna = ''.join(dnalines)  text = open('yourfile').read() 
import string  def complementary_strand(self strand):     return strand.translate(string.maketrans('TAGCtagc' 'ATCGATCG'))  import string def __init__(self ...):     self.trans = string.maketrans('TAGCtagc' 'ATCGATCG')  def complementary_strand(self strand):     return strand.translate(self.trans)  
(func_name function) unpack_options = { 'unpack_pdb_line' : unpack_pdb_line                    'some_other' : some_other_function }  unpack_function = unpack_options[options.unpack_method]  
&amp;#x2026 three dots 
_ _s = min( (len( values[s]) s)              for s in squares              if len(values[s]) &gt; 1         )  s = min((s for s in squares if len(values[s])&gt;1)          key=lambda s: len(values[s]))  key= 
Body bodies = cellfun(@(tuple)Body(tuple{1}tuple{2}) coords);  bodies = cellfun(@(tuple)Body(tuple{1}tuple{2}) coords 'UniformOutput'false);  X1 = @(t) cos(t); Y1 = @(t) sin(t); X2 = @(t) cos(t) + 1; Y2 = @(t) sin(t) + 1;  coords = {{X1Y1} {X2Y2}};  %# function that returns a struct (like a constructor) Body = @(XY) struct('x'X 'y'Y);  %# tuples unpacking bodies = cellfun(@(tuple)Body(tuple{1}tuple{2}) coords);  %# bodies is an array of structs bodies(1) bodies(2)  
reload(Y) 
default PassiveDefault() 
camelCase CamelCase std::find_first_of std::replace_copy_if CamelCase 
import time  from twisted.web import server resource from twisted.internet import reactor  class Simple(resource.Resource):     isLeaf = True     def render_GET(self request):         return "&lt;html&gt;%s Iterations!&lt;/html&gt;"%n  def main():     global n     site = server.Site(Simple())     reactor.listenTCP(8080 site)     reactor.startRunning(False)     n=0     while True:         n+=1         if n%1000==0:             print n         time.sleep(0.001)         reactor.iterate()  if __name__=="__main__":     main()  
$ python3.1 test_thread.py  Hello Hello Hello Hello Hello Hello Hello $ python3.2 test_thread.py  Hello Hello Hello Hello Hello  
import operator ops = { "+": operator.add "-": operator.sub } # etc.  print ops["+"](11) # prints 2   
Array [items[i]] + cc [items[i]] + [cc] class Array   def combinations(n)     perms = []     a = (0...n).to_a     while perms.push a.dup       break if a.increment!(a.length - 1 self.length-1).nil?     end     perms.map {|p| p.map {|i| self[i]} }   end   def increment!(i max)     self[i] += 1     while self[i] &gt; max       return nil if i &lt;= 0       return nil if self.increment!(i - 1 max).nil?       self[i] = self[i - 1] + 1     end     self.dup   end end  [123].combinations 3 # =&gt; [[1 2 3]] [123].combinations 2 # =&gt; [[1 2] [1 3] [2 3]] [123].combinations 1 # =&gt; [[1] [2] [3]] [:foo:bar:baz:quux:wibble].combinations 3 # =&gt; [[:foo :bar :baz] #     [:foo :bar :quux] #     [:foo :bar :wibble] #     [:foo :baz :quux] #     [:foo :baz :wibble] #     [:foo :quux :wibble] #     [:bar :baz :quux] #     [:bar :baz :wibble] #     [:bar :quux :wibble] #     [:baz :quux :wibble]]  
render = web.template.render('templates/' globals={'sum': sum})  $def with (numbers)  &lt;h1&gt;Numbers add to $sum(numbers)&lt;/h1&gt;  
FancyURLopener.prompt_user_passwd class AuthorizationRequired(Exception):      pass   class MyURLOpener(urllib.FancyURLopener):      def prompt_user_passwd(self host realm):         raise AuthorizationRequired()   opener = MyURLOpener(proxies={'http': 'http://'+p}) fp = opener.open(url)  
db.collection.find({'res1': { $exists : true }}) db.collection.find({'res1': 10}) 
record.name import logging   class DispatchingFormatter:      def __init__(self formatters default_formatter):         self._formatters = formatters         self._default_formatter = default_formatter      def format(self record):         formatter = self._formatters.get(record.name self._default_formatter)         return formatter.format(record)   handler = logging.StreamHandler() handler.setFormatter(DispatchingFormatter({         'base.foo': logging.Formatter('FOO: %(message)s')         'base.bar': logging.Formatter('BAR: %(message)s')     }     logging.Formatter('%(message)s') )) logging.getLogger().addHandler(handler)  logging.getLogger('base.foo').error('Log from foo') logging.getLogger('base.bar').error('Log from bar') logging.getLogger('base.baz').error('Log from baz')  
from pyparsing import QuotedString Group delimitedList OneOrMore  # a row of headings or data is a list of quoted strings delimited by ';'s qs = QuotedString('"') datarow = Group(delimitedList(qs ';'))  # an entire data set is a single data row containing the headings followed by # one or more data rows containing the data dataset_parser = datarow("headings") + OneOrMore(datarow)("rows")  # parse the returned response data = dataset_parser.parseString(response)  # create dict by zipping headings with each row's data values datadict = [dict(zip(data.headings row)) for row in data.rows]  print datadict  [{'End Date': '16/11/2009' 'Description': '' 'All day event': 'false'    'Start Time': '10:00 PM' 'End Time': '11:00 PM' 'Start Date': '16/11/2009'    'Subject': 'Play football'}   {'End Date': '20/11/2009' 'Description': '' 'All day event': 'false'    'Start Time': '07:00 PM' 'End Time': '08:00 PM' 'Start Date': '20/11/2009'    'Subject': 'Watch 2012'}]  
import Name() from Example1.views import adder as otherAdder  otherAdder() Example1.views 
def coef(pot):     return (pot.movable + pot.convertible) / float(pot.total)  l.sort(key=lambda x: (coef(x) x.total) reverse=True)  
int main() {     time t; }  t.simpleDate;  t.perciseDate;  0x12345678;  struct Msg {    int msgType;    double Val1;    double Val2; }; // assuming packing on 32-bit boundary  union {    Msg msg;    unsigned char msgAsBinary[20]; };  
%f ('%.2f' % (value)).rstrip('0').rstrip('.')  round() str(round(value)).rstrip('0').rstrip('.')  
order_by qs = MyModel.objects.filter(title__icontains=query) qs.sort(key=lambda x: mydict[x])  
import sys; sys.path.insert(0 "cis") 
from original.satchmo.admin import ProductAdmin  class MyProductInline(admin.StackedInline):     model = MyProduct  class ExtendedProductAdmin(ProductAdmin):     inlines = ProductAdmin.inlines + (MyProductInline)  admin.site.unregister(Product) admin.site.register(Product ExtendedProductAdmin)  
as from some.package import mymodulewithalongname as mymod mymodulewithalongname somethingcompletelydifferent as random seed uniform seed uniform seed random random from datetime import datetime from time import time 
{{ mytable.0.pk }} {{ mytable.1.pk }} {{ mytable.0.pk }} {{ mytable.3.pk }}  91596 54774 156800 23593  SELECT `mytable`.`id` FROM `mytable` ORDER BY RAND() LIMIT 1 SELECT `mytable`.`id` FROM `mytable` ORDER BY RAND() LIMIT 1 OFFSET 1 SELECT `mytable`.`id` FROM `mytable` ORDER BY RAND() LIMIT 1 SELECT `mytable`.`id` FROM `mytable` ORDER BY RAND() LIMIT 1 OFFSET 3  def rate(request type):     photos = list(Photo.objects.order_by('?')[:2])     c = Context({"photos": photos "type": type})     return render_to_response("base_rate.html" c)  list() 
import sys # parse command line if file_name_given:     inf = open(file_name_given) else:     inf = sys.stdin  inf if inf is not sys.stdin:     inf.close()  sys.stdin 
import datetime date = datetime.datetime.strptime("111609" "%m%d%y") print date.strftime("%m/%d/%Y")  010199 01/01/1999 010109 01/01/2009 
itertools itertools.chain.from_iterable chain chain_from_iterable for x in blargh: yield x yield from blargh def corou_chaiters(initsend defiter val2itermap):   currentiter = iter([initsend])   while True:     val = yield next(currentiter)     currentiter = val2itermap(val defiter)  
cfg = """ {     "repositories": {         "repo1": "http://svn.example.com/repo1/"         "repo2": "http://svn.example.com/repo2/"         "repo3": "http://svn.example.com/repo3/"     }     "user_repository_mapping": {         "person_A": ["repo1" "repo3"]         "person_B": ["repo2"]         "person_C": ["repo1" "repo2"]     } } """  import simplejson as json config = json.loads(cfg) person = "person_A" repos = [config['repositories'][r] for r in config['user_repository_mapping'][person]] print repos  
&gt;&gt;&gt; import xml.etree.ElementTree as ET &gt;&gt;&gt; html = ET.XML('&lt;html&gt;&lt;head&gt;&lt;title&gt;Hi&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;') &gt;&gt;&gt; html.head = html.find('head') &gt;&gt;&gt; html.head.append(ET.XML('&lt;link type="text/css" href="main.css" rel="stylesheet" /&gt;')) &gt;&gt;&gt; html.head.title = html.head.find('title') &gt;&gt;&gt; html.head.title.text 'Hi'  &gt;&gt;&gt; html.body = html.find('body') &gt;&gt;&gt; my_h1 = ET.Element('h1' {'class': 'roflol'}) &gt;&gt;&gt; my_h1.text = 'BIG TITLE!12' &gt;&gt;&gt; html.body.append(my_h1) &gt;&gt;&gt; html.body.SOURCE = ET.tostring(html.body) &gt;&gt;&gt; html.body.SOURCE '&lt;body&gt;&lt;h1 class="roflol"&gt;BIG TITLE!12&lt;/h1&gt;&lt;/body&gt;'  stylesheet &gt;&gt;&gt; def stylesheet(href='' type='text/css' rel='stylesheet' **kwargs): ...     elem = ET.Element('link' href=href type=type rel=rel)  ...     return elem ...  &gt;&gt;&gt; html.head.append(stylesheet(href="main.css"))  &gt;&gt;&gt; ET.tostring(html) &lt;html&gt;&lt;head&gt;&lt;title&gt;Hi&lt;/title&gt;&lt;link href="main.css" rel="stylesheet" type="text/css" /&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 class="roflol"&gt;BIG TITLE!12&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;  
self.centralwidget.setSortingEnabled(__sortingEnabled)   self.colorTreeWidget.setSortingEnabled(__sortingEnabled)   AttributeError: 'NoneType' object has no attribute 'setText' self.treeWidget.topLevelItem(0) 
ScriptAlias /cgi-bin/ /usr/local/apache2/cgi-bin/ AddHandler cgi-script .cgi .pl 
choices COUNTRIES # ... initialize a lookup dictionary country_to_id_dict = dict((t[1] t[0]) for t in COUNTRIES)  # ... use the dictionary in the query i = MyModel.objects.filter(country__exact=country_to_id_dict[query])  
TABWIDTH=8 def my_len(s):     return len(s.expandtabs(TABWIDTH))  def pad_with_tabs(smaxlen):     return s+"\t"*((maxlen-len(s)-1)/TABWIDTH+1)  expandtabs() $ python -m timeit '"Bear\tnecessities\t".expandtabs()' 1000000 loops best of 3: 0.602 usec per loop $ python -m timeit 'for c in "Bear\tnecessities\t":pass' 100000 loops best of 3: 2.32 usec per loop $ python -m timeit '[c for c in "Bear\tnecessities\t"]' 100000 loops best of 3: 4.17 usec per loop $ python -m timeit 'map(None"Bear\tnecessities\t")' 100000 loops best of 3: 2.25 usec per loop  expandtabs $ python -m timeit '"Bear\tnecessities\t".split("\t")' 1000000 loops best of 3: 0.868 usec per loop  
# this: D:DD DD:DDam/pm 12/24 hr re = r':(?=..(?&lt;!\d:\d\d))|[^a-zA-Z0-9 ](?&lt;!:)'  :              // match a colon (?=..          // match but not capture two chars   (?&lt;!         // start a negative look-behind group (if it matches the whole fails)     \d:\d\d    // time stamp   )            // end neg. look behind )              // end non-capture two chars |              // or [^a-zA-Z0-9 ]  // match anything not digits or letters (?&lt;!:)         // that isn't a colon  Today 3:30pm - Group 123 Meeting to di4sc::uss3: 2:3:4 &quot;big idea&quot; on 03:33pm or 16:47 is also good  Today 3:30pm  Group 123 Meeting to di4scuss3 234 big idea on 03:33pm or 16:47 is also good  
&gt;&gt;&gt; reader = csv.DictReader(open(PathFile)skipinitialspace=True)  
AND OR XOR NOT AND | 0 1     OR | 0 1     XOR | 0 1    NOT | 0 1 ----+-----    ---+----     ----+----    ----+----  0  | 0 0      0 | 0 1       0 | 0 1        | 1 0  1  | 0 1      1 | 1 1       1 | 1 0      201: 1100 1001 AND  15: 0000 1111 ------------------  IS   9  0000 1001  &gt;&gt; &lt;&lt; 1001 0101 &gt;&gt; 2 gives 0010 0101 1111 1111 &lt;&lt; 4 gives 1111 0000  and bits8 = (bits8 &lt;&lt; 4) &amp; 255  left-shift and or packed_val = ((val1 &amp; 15) &lt;&lt; 4) | (val2 &amp; 15)  &amp; 15 &lt;&lt; 4 val1 | val1 val2                 val1            val2                 ====            ====  &amp; 15 (and)   xxxx-0111       xxxx-0100  &amp; 15  &lt;&lt; 4 (left)  0111-0000           |                   |               |                   +-------+-------+                           | | (or)                0111-0100  
os.execvp os.execvp subprocess.Popen subprocess subprocess.Popen xlogo import subprocess xvfb_args = ['xvfb-run' '--server-args=-screen 0 640x480x24' 'xlogo'] process = subprocess.Popen(xvfb_args)  xvfb-run Xvfb process.kill() Xvfb import os import signal import subprocess  SERVER_NUM = 99  # 99 is the default used by xvfb-run; you can leave this out.  xvfb_args = ['xvfb-run' '--server-num=%d' % SERVER_NUM              '--server-args=-screen 0 640x480x24' 'xlogo'] subprocess.Popen(xvfb_args)  # ... do whatever you want to do here...  pid = int(open('/tmp/.X%s-lock' % SERVER_NUM).read().strip()) os.kill(pid signal.SIGINT)  Xvfb /tmp/.X99-lock 
def sumdiv7(limit):     for i in range(limit):         result = sum(range(i*7)) / 7         print "For" i " sumdiv = " result  &gt;&gt;&gt; sumdiv7(4) For 0  sumdiv =  0 For 1  sumdiv =  3 For 2  sumdiv =  13 For 3  sumdiv =  30  i*7 range x sum 
#!/usr/bin/env python """ Display Information about a Google Calendar ... """  if __name__ == '__main__':     print __doc__  __doc__ 
make_test_server() make_dummy_test_server() 
r = (a % d) i = (a / d)  i r = divmod(ad)  
{key: value for (key value) in iterable}  dict dict((key func(key)) for key in keys)  dict 1) consumed from any iterable yielding pairs of keys/vals dict(pairs)  2) &quot;zip'ped&quot; from two separate iterables of keys/vals dict(zip(list_of_keys list_of_values))  
from multiprocessing import Queue Pool  q = Queue() ppool = Pool(processes=2)                                                        q.put([ppool]) ppool = q.get()  from multiprocessing import Pool Process cpu_count  def add(num):   return num+1  def add_wrap(num):   ppool = Pool(processes=cpu_count() )   new_num = ppool.apply_async(add [num])   print new_num.get(timeout=3)  test = Process(target=add_wrap args=(5)).start()  
samples = list(Weather.objects.filter().exclude(time__lt=commence).exclude(time__gt=cease)) for s10 in samples[::10]:     # do something with every tenth...  sample_count = 600 # Somehow determine how many samples are in your time window. samples = Weather.objects.filter().exclude(time__lt=commence).exclude(time__gt=cease) for s_num in range(0 sample_count 10):     s = samples[s_num]     # Now you have one sample in s.  range &gt;&gt;&gt; range(0 100 10) [0 10 20 30 40 50 60 70 80 90]  samples[s_num] 
checker = None   if some_decision:     checker = True  if checker:     # some stuff  1 True 
    win32file.WriteFile(CLIENT_PIPE"%d\r\n"%i None)     win32file.FlushFileBuffers(CLIENT_PIPE)     win32file.SetFilePointer(CLIENT_PIPE0win32file.FILE_BEGIN)     is = win32file.ReadFile(CLIENT_PIPE10None)  
import random  index = random.randint(0 len(yourstring)-1) yourstring = yourstring[:index] + yourstring[index+1:]  print yourstring[index]  
python PYTHONPATH 
f.writelines(videoDirectory) videoDirectory = os.listdir("videos") f = open("videos.html" "w") f.write('&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt;'     f.writelines(['&lt;li&gt;&lt;a href="videos/%s"&gt;%s&lt;/a&gt;&lt;/li&gt;' % (f f) for f in videoDirectory]) f.write('&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;')  
00 &gt;&gt;&gt; string = "4100360036000000570046004200410061006200730020003600" &gt;&gt;&gt; pieces = [string[i:i+2] for i in range(0 len(string) 2)] &gt;&gt;&gt; pieces ['41' '00' '36' '00' '36' '00' '00' '00' '57' '00' '46' '00' '42' '00' '41' '00' '61' '00' '62' '00' '73' '00' '20' '00' '36' '00'] &gt;&gt;&gt;   &gt;&gt;&gt; where0s = [i for i in range(len(pieces)) if pieces[i] == '00'] &gt;&gt;&gt; where0s [1 3 5 6 7 9 11 13 15 17 19 21 23 25]  &gt;&gt;&gt; import random &gt;&gt;&gt; pickone = random.choice(where0s) &gt;&gt;&gt; pickone 25 &gt;&gt;&gt; # if replacing: ...  &gt;&gt;&gt; pieces[pickone] = 'BA' &gt;&gt;&gt; ''.join(pieces) '41003600360000005700460042004100610062007300200036BA' &gt;&gt;&gt; # if removing: ...  &gt;&gt;&gt; del pieces[pickone] &gt;&gt;&gt; ''.join(pieces) '41003600360000005700460042004100610062007300200036' &gt;&gt;&gt;   
if __client != None:  if __client is not None:  __getattr__ AttributeError getattr __cmp__ __ne__ AttributeError AttributeError 
import random  def main():   def process(data):      return data + [0]   def process1(data):      return data + [9]   def process2(data):      return data + [7]   def run(data):      test = random.choice([processprocess1process2])      print test(data)   for i in range(7):     run([1 2 3])  main()  [1 2 3 7] [1 2 3 0] [1 2 3 0] [1 2 3 7] [1 2 3 0] [1 2 3 9] [1 2 3 9]  
13:40 jsmith@undertow% ping 97.107.138.15 PING 97.107.138.15 (97.107.138.15) 56(84) bytes of data. 64 bytes from 97.107.138.15: icmp_seq=1 ttl=64 time=1.25 ms ^C  13:40 jsmith@undertow% arp -n 97.107.138.15 Address                  HWtype  HWaddress           Flags Mask            Iface 97.107.138.15            ether   fe:fd:61:6b:8a:0f   C                     eth0  &gt;&gt;&gt; from subprocess import Popen PIPE &gt;&gt;&gt; import re &gt;&gt;&gt; IP = "1.2.3.4"  &gt;&gt;&gt; # do_ping(IP) &gt;&gt;&gt; # The time between ping and arp check must be small as ARP may not cache long  &gt;&gt;&gt; pid = Popen(["arp" "-n" IP] stdout=PIPE) &gt;&gt;&gt; s = pid.communicate()[0] &gt;&gt;&gt; mac = re.search(r"(([a-f\d]{12}\:){5}[a-f\d]{12})" s).groups()[0] &gt;&gt;&gt; mac "fe:fd:61:6b:8a:0f"  
heap[k] &lt;= heap[2*k+1] heap[k] &lt;=   heap[2*k+2] heap[0] peek 
fullname     fullnames = []     imageLabels = [self.imgOnePathLabel self.imgTwoPathLabel             self.imgThreePathLabel]     for imageLabel in imageLabels:         if imageLabel.text():             image = self.imgOnePathLabel.text()             fullnames.append('%s' % image)     try:         for fullname in fullnames:             # split end file from the file path             name = os.path.split(fullname)[1]             f = open(fullname "rb")             # store our selected file             ftp.storbinary('STOR ' + name f)             msg = "Sent &lt;font color=green&gt;" + name + "&lt;/font&gt;"             self.logBrowser.append(msg)             f.close()     finally:         msg = "&lt;font color=green&gt;" "Ok" "&lt;/font&gt;"         self.logBrowser.append(msg)  
def publishTraverse(self request name):     if name in self.context:         return MyMessageView(self.context[name] request)      # fall back to views such as index.html     view = queryMultiAdapter((self.context request) name=name)     if view is not None:         return view      # give up and return a 404 Not Found error page     raise NotFound(self.context name request)  class MyMessageView(BrowserPage):     __call__ = ViewPageTemplateFile('read.pt')  
for block in iter(lambda: file_obj.read(4) ""):   use(block)  
dir &gt;&gt;&gt; import httplib &gt;&gt;&gt; conn = httplib.HTTPConnection("www.google.nl") &gt;&gt;&gt; conn.request("HEAD" "/index.html") &gt;&gt;&gt; res = conn.getresponse() &gt;&gt;&gt; dir(res) ['__doc__' '__init__' '__module__' '_check_close' '_method' '_read_chunked' '_read_status' '_safe_read' 'begin' 'chunk_left' 'chunked' 'close' 'debuglevel' 'fp' 'getheader' 'getheaders' 'isclosed' 'length' 'msg' 'read' 'reason' 'status' 'strict' 'version' 'will_close']  help __doc__ res &gt;&gt;&gt; help(res)  getresponse HTTPResponse help(res) HTTPResponse HTTPResponse.read([amt]) HTTPResponse.getheader(name[ default]) HTTPResponse.getheaders() HTTPResponse.msg HTTPResponse.version HTTPResponse.status HTTPResponse.reason 
import urllib urllib.urlopen(url).geturl()  &gt;&gt;&gt; f = urllib2.urlopen("http://tinyurl.com/oex2e") &gt;&gt;&gt; f.geturl() 'http://www.amazon.com/All-Creatures-Great-Small-Collection/dp/B00006G8FI' &gt;&gt;&gt;   
def textOf(soup):     return u''.join(soup.findAll(text=True))  texts = [textOf(n) for n in soup.findAll('a' href=re.compile('^notizia.php\?idn=\d+'))]  
def total(category):     return sum(value.get(category 0) for value in game.home.lineup.values())  &gt;&gt;&gt; total('HR') 1104  def total(self category):     return sum(value.get(category 0) for value in self.lineup.values())  
SELECT 
options args = parser.parse_args() option_dict = vars(options)  
void toggled (bool)  
def timeseq(startstopinterval):     while start &lt;= stop:         yield start         start += interval  for t in timeseq(startstopinterval):     table.objects.filter(t)  data = [table.objects.filter(t) for t in timeseq(startstopinterval)]  
from distutils.command.install import install as DistutilsInstall  class MyInstall(DistutilsInstall):     def run(self):         do_pre_install_stuff()         DistutilsInstall.run(self)         do_post_install_stuff()  ...  setup(... cmdclass={'install': MyInstall} ...)  distutils cmdclass 
sys.path $PYTHONPATH httpd.conf python.conf # python setup.py install 
root.tk.eval(''' rename puts original_puts  proc puts {args} {     if {[llength $args] == 1} {         return "=&gt; [lindex $args 0]"     } else {         eval original_puts $args     } } ''')  foo = root.tk.eval('puts "hello world"') print foo =&gt; hello world  
pkg_resources Distribute setuptools Distribute setuptools curl -O https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py python ez_setup.py  pip setuptools /usr/local/lib $PATH python2.6 .bash_profile $PATH easy_install pkg_resources easy_install pip ipython easy_install ipython  pip install ipython  site-packages 
cordlist = [] while(1) 
unittest.main() result = unittest.TextTestRunner(verbosity=2).run(suite())  result = unittest.TextTestRunner(verbosity=2).run(suite)  
for line in file:   print line.rstrip("\n") "something"  line.rstrip() 
time.strftime %p %I %H %I 
s = s.replace('\r\n' '\n')  
import cgi print "&lt;span size='medium'&gt;&lt;b&gt;%s&lt;/b&gt;&lt;/span&gt;\n%s" %       (cgi.escape(site_title) cgi.escape(URL))  
mechanize spidermonkey Browser.reload() checkValid() 
.GetHtmlLink().href album_urls = [album.GetHtmlLink().href for album in albums.entry]  
class GameForm(forms.ModelForm):          name = forms.CharField(max_length=15 label='Name')          url = forms.URLField(label='URL' initial='http://')          cats = forms.ModelMultipleChoiceField(             queryset=Category.objects             widget=forms.CheckboxSelectMultiple             required=True)          class Meta:                  model = Game                  fields = ('name''url''cats')  
fib.cache fib def fib(n _memo={0:1 1:1}):     if n in _memo:         return _memo[n]     else:         _memo[n] = fib(n-1) + fib(n-2)         return _memo[n]  $ python -mtimeit -s'import mem' 'mem.fib1(20)' 1000000 loops best of 3: 0.754 usec per loop $ python -mtimeit -s'import mem' 'mem.fib2(20)' 1000000 loops best of 3: 0.507 usec per loop  _memo fib.cache 
{% include %} 
__import__ "functions.py" getattr(moduleobject functionname) 
from myproject.folder import file file file.function file as fi from fi.function from 
stream = cStringIO.StringIO(data) wxImage = wx.ImageFromStream(stream)  
&gt;&gt;&gt; import getpass &gt;&gt;&gt; pw = getpass.getpass()  
&gt;&gt;&gt; import urllib2 &gt;&gt;&gt; urllib2.quote('??') '%ED%95%9C%EA%B8%80'  
append temp itertools.chain &gt;&gt;&gt; from itertools import chain &gt;&gt;&gt; list(chain(*mayorPowers)) ['germany' 'italy' 'japan' 'russia' 'uk' 'us']  mayorPowers chain itertools.chain.from_iterable &gt;&gt;&gt; list(chain.from_iterable(mayorPowers)) ['germany' 'italy' 'japan' 'russia' 'uk' 'us']  extend &gt;&gt;&gt; ww2 = [] &gt;&gt;&gt; for mp in mayorPowers: ...     ww2.extend(mp) ... &gt;&gt;&gt; ww2 ['germany' 'italy' 'japan' 'russia' 'uk' 'us']  sum &gt;&gt;&gt; sum(mayorPowers []) ['germany' 'italy' 'japan' 'russia' 'uk' 'us']  functools.reduce operator.add &gt;&gt;&gt; from functools import reduce &gt;&gt;&gt; from operator import add &gt;&gt;&gt; reduce(add mayorPowers) ['germany' 'italy' 'japan' 'russia' 'uk' 'us']  
for index s in enumerate(stocks_list):     print index s  
UnicodeDecodeError UnicodeEncodeError s = s.decode('some_encoding').encode('ascii' 'replace')  'some_encoding' 
&gt;&gt;&gt; for fruit in thelist[1:]: &gt;&gt;&gt;    print fruit  
__repr__() __str__ print [str(x) for x in l]  print [x.encode() for x in l]  
perform_actions import time  def perform_actions():     print("Hello.. again")  try:     while True:         perform_actions()         try:             while True: time.sleep(3600)         except KeyboardInterrupt:             time.sleep(0.5) except KeyboardInterrupt:     pass  SIGINT kill -int &lt;pid&gt; 
hasattr __ collections if isinstance( arg collections.Sequence ):     self._some_var = list(arg) else:     self._some_var.append( arg )  
sum(x.b == 1 for x in L)  x.b == 1 int 0 False 1 True timeit $ py26 -mtimeit -s'L=[12131]*100' 'len([x for x in L if x==1])' 10000 loops best of 3: 56.6 usec per loop $ py26 -mtimeit -s'L=[12131]*100' 'sum(x==1 for x in L)' 10000 loops best of 3: 87.7 usec per loop  
f.writelines([os.getcwd %s % (f) for f in myDirectory])  myDirectory  f.writelines(os.path.join(os.getcwd() f) for f in myDirectory)  
#!/usr/bin/env python import itertools a=[12] b=['a''b'] c=[str(s)+str(t) for st in itertools.product(ab)] print(c) ['1a' '1b' '2a' '2b']  v=[1'a'] w=[1'b'] x=[1'c'] y=[1'd'] z=[1'e']  r=[''.join([str(elt) for elt in p]) for p in itertools.product(vwxyz)] print(r) # ['11111' '1111e' '111d1' '111de' '11c11' '11c1e' '11cd1' '11cde' '1b111' '1b11e' '1b1d1' '1b1de' '1bc11' '1bc1e' '1bcd1' '1bcde' 'a1111' 'a111e' 'a11d1' 'a11de' 'a1c11' 'a1c1e' 'a1cd1' 'a1cde' 'ab111' 'ab11e' 'ab1d1' 'ab1de' 'abc11' 'abc1e' 'abcd1' 'abcde']  def product(*args **kwds):         '''         Source: http://docs.python.org/library/itertools.html#itertools.product         '''         # product('ABCD' 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy         # product(range(2) repeat=3) --&gt; 000 001 010 011 100 101 110 111         pools = map(tuple args) * kwds.get('repeat' 1)         result = [[]]         for pool in pools:             result = [x+[y] for x in result for y in pool]         for prod in result:             yield tuple(prod)  a b v w x y z r=[''.join([str(elt) for elt in p]) for p in itertools.product(*(set(elt) for elt in (vwxyz)))]  
ctypes.c_longlong &gt;&gt;&gt; from ctypes import c_longlong as ll &gt;&gt;&gt; ll(2 ** 63 - 1) c_longlong(9223372036854775807L) &gt;&gt;&gt; ll(2 ** 63) c_longlong(-9223372036854775808L) &gt;&gt;&gt; ll(2 ** 63).value -9223372036854775808L  signed long long c_longlong from ctypes import c_longlong  class ll(int):     def __new__(cls n):         return int.__new__(cls c_longlong(n).value)      def __add__(self other):         return ll(super().__add__(other))      def __radd__(self other):         return ll(other.__add__(self))      def __sub__(self other):         return ll(super().__sub__(other))      def __rsub__(self other):         return ll(other.__sub__(self))      ...  ll(2 ** 63) - 1 9223372036854775807 timeit 
&gt;&gt;&gt; '%f %2.f %.*f' % (1/3.0 1.3 4 1/3.0) '0.333333  1 0.3333'  4 * &gt;&gt;&gt; '%f %2.f %.4f' % (1/3.0 1.3 1/3.0)  
from scipy import ndimage  stencil = numpy.array([[0 1 0][1 -4 1] [0 1 0]]) x = linspace(-10 10 100) y = linspace(-10 10 100) xx yy = meshgrid(x y) image = exp(-xx**2-yy**2)  # Standard deviation in x or y: 1/sqrt(2)  laplaced = ndimage.convolve(image stencil)/(x[1]-x[0])**2  # stencil from original post expected_result = -4*image + 8*(xx**2+yy**2)*image  # Very close to laplaced in most points!  
subprocess.Popen subprocess.call shell=True 
pgmasi.query("INSERT INTO files('binf''file_name') VALUES(filefile_name)"  
COMPETITION_TYPE_CHOICES = [      (1 'Olympic Games')      (2 'ISU Championships')      (3 'Grand Prix Series') ]  COMP_TYPE_CHOICES_AND_EMPTY = [('''All')] + COMPETITION_TYPE_CHOICES  class CompetitionSearchForm(forms.Form):     name = forms.CharField(required=False)     type = forms.ChoiceField(choices=COMP_TYPE_CHOICES_AND_EMPTY required=False)  
engine.get(module_name); //gets the class object of the module getConstructors[0].newInstance(null) on the class to get an object<br> //cast it to your interface! 
NavigableString NavigableString from BeautifulSoup import BeautifulSoup NavigableString  def strip_tags(html invalid_tags):     soup = BeautifulSoup(html)      for tag in soup.findAll(True):         if tag.name in invalid_tags:             s = ""              for c in tag.contents:                 if not isinstance(c NavigableString):                     c = strip_tags(unicode(c) invalid_tags)                 s += unicode(c)              tag.replaceWith(s)      return soup  html = "&lt;p&gt;Good &lt;b&gt;bad&lt;/b&gt; and &lt;i&gt;ug&lt;b&gt;l&lt;/b&gt;&lt;u&gt;y&lt;/u&gt;&lt;/i&gt;&lt;/p&gt;" invalid_tags = ['b' 'i' 'u'] print strip_tags(html invalid_tags)  &lt;p&gt;Good bad and ugly&lt;/p&gt;  
print "Error reading file %s"%u"%s/%s"%(folder f) print "Error reading file %s" % u"%s/%s" % (folder f) print ("Error reading file %s" % u"%s/%s") % (folder f) print u"Error reading file %s/%s" % (folder f) repr(foo) "%r" % foo print repr(folder) repr(f) u"%s/%s" % (folder filename) os.path.join(folder filename) try:     some_code() except ReasonForBaleOutError:     continue except:      # something's gone wrong so get diagnostic info     print repr(interesting_datum_1) repr(interesting_datum_2)     # ... and get traceback and error message     raise  for i in xrange(len(folders) -1 -1):     if '$' in folders[i]:         del folders[i]  content[0] for folder subfolders filenames in os.walk(unicoded_top_folder):  generator = os.walk(...); try: content = generator.next() generator.next() except StopIteration print repr(     "Error reading file %s" \     % u"%s/%s" % (         folder.decode('utf-8''ignore')         f.decode('utf-8''ignore')         )     )  print repr(folder) repr(f) print "Some meaningful text" # "error reading file" isn't print "folder:" repr(folder) print "f:" repr(f)  self.exploreRec(("%s/%s"%(folder f)).encode("utf-8") treshold) C:\junk\terabytest&gt;dir [snip]  Directory of C:\junk\terabytest  20/11/2009  01:28 PM    &lt;DIR&gt;          . 20/11/2009  01:28 PM    &lt;DIR&gt;          .. 20/11/2009  11:48 AM    &lt;DIR&gt;          empty 20/11/2009  01:26 PM                11 Hašek.txt 20/11/2009  01:31 PM             1419 tbyte1.py 29/12/2007  09:33 AM                 9 Ð.txt                3 File(s)          1439 bytes [snip]  C:\junk\terabytest&gt;\python26\python Python 2.6.4 (r264:75708 Oct 26 2009 08:23:19) [MSC v.1500 32 bit (Intel)] onwin32 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; from pprint import pprint as pp &gt;&gt;&gt; import os  &gt;&gt;&gt; pp(list(os.walk(ur"c:\junk\terabytest"))) [(u'c:\\junk\\terabytest'   [u'empty']   [u'Ha\u0161ek.txt' u'tbyte1.py' u'\xd0.txt'])  (u'c:\\junk\\terabytest\\empty' [] [])]  &gt;&gt;&gt; pp(list(os.walk(r"c:\junk\terabytest"))) [('c:\\junk\\terabytest'   ['empty']   ['Ha\x9aek.txt' 'tbyte1.py' '\xd0.txt'])  ('c:\\junk\\terabytest\\empty' [] [])]  &gt;&gt;&gt; u'\u0161'.encode('cp1252') '\x9a' &gt;&gt;&gt; 'Ha\x9aek'.decode('cp1252') u'Ha\u0161ek'  &gt;&gt;&gt; 'Ha\x9aek'.decode('utf8') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "C:\python26\lib\encodings\utf_8.py" line 16 in decode     return codecs.utf_8_decode(input errors True) UnicodeDecodeError: 'utf8' codec can't decode byte 0x9a in position 2: unexpected code byte  &gt;&gt;&gt; 'Ha\x9aek'.decode('latin1') u'Ha\x9aek'  &gt;&gt;&gt; unicodedata.name(u'\u0161') 'LATIN SMALL LETTER S WITH CARON' &gt;&gt;&gt;  IDLE 2.6.4       &gt;&gt;&gt; import os &gt;&gt;&gt; from pprint import pprint as pp  &gt;&gt;&gt; pp(list(os.walk(ur"c:\junk\terabytest\chinese"))) [(u'c:\\junk\\terabytest\\chinese' [] [u'nihao\u4f60\u597d.txt'])]  &gt;&gt;&gt; print list(os.walk(ur"c:\junk\terabytest\chinese"))[0][2][0] nihao??.txt  &gt;&gt;&gt; pp(list(os.walk(r"c:\junk\terabytest\chinese"))) [('c:\\junk\\terabytest\\chinese' [] ['nihao??.txt'])]  
class YourRSS2Item(PyRSS2Gen.RSSItem):     def publish_extensions(self handler):         handler.startElement("show_id")         handler.endElement("show_id")  item = RSSItem( .... enclosure = Enclosure("http://url.com" 10 "") ...)  
class optparse.OptionParser(...) parser = OptionParser(usage add_help_option=False) 
select total count(total) from faults GROUP BY total;  import MySQLdb  def DumpHistogramData(databaseHost databaseName databaseUsername databasePassword dataTableName binsTableName binSize histogramDataFilename):     #Open a file for writing into     output = open("./" + histogramDataFilename "w")      #Connect to the database     db = MySQLdb.connect(databaseHost databaseUsername databasePassword databaseName)     cursor = db.cursor()      #Form the query     sql = """select b.* count(*) as total              FROM """ + binsTableName + """ b              LEFT OUTER JOIN """ + dataTableName + """ a              ON a.total between b.min AND b.max              group by b.min;"""     cursor.execute(sql)      #Get the result and print it into a file for further processing     count = 0;     while True:         results = cursor.fetchmany(10000)         if not results:             break         for result in results:             #print &gt;&gt; output str(result[0]) + "-" + str(result[1]) + "\t" + str(result[2])     db.close()  def PrepareHistogramBins(databaseHost databaseName databaseUsername databasePassword binsTableName maxValue totalBins):      #Connect to the database         db = MySQLdb.connect(databaseHost databaseUsername databasePassword databaseName)     cursor = db.cursor()      #Check if the table was already created     sql = """DROP TABLE IF EXISTS """ + binsTableName     cursor.execute(sql)      #Create the table     sql = """CREATE TABLE """ + binsTableName + """(min int(11) max int(11));"""     cursor.execute(sql)      #Calculate the bin size     binSize = maxValue/totalBins      #Generate the bin sizes     for i in range(0 maxValue binSize):         if i is 0:             min = i             max = i+binSize         else:             min = i+1             max = i+binSize         sql = """INSERT INTO """ + binsTableName + """(min max) VALUES(""" + str(min) + """ """ + str(max) + """);"""         cursor.execute(sql)     db.close()     return binSize  binSize = PrepareHistogramBins("localhost" "testing" "root" "" "bins" 5000 100) DumpHistogramData("localhost" "testing" "root" "" "faults" "bins" binSize "histogram")  set terminal postscript eps color lw 2 "Helvetica" 20 set output "output.eps" set xlabel "XLABEL" set ylabel "YLABEL" set title "TITLE" set style data histogram set style histogram cluster gap 1 set style fill solid border -1 set boxwidth 0.9 set key autotitle columnheader set xtics rotate by -45 plot "input" using 1:2 with linespoints ls 1  gnuplot sample.script  
&lt;a&gt; &lt;embed&gt; embedTag = pyparsing.makeHTMLTags("embed")[0] aTag = pyparsing.makeHTMLTags("a")[0] target = embedTag + pyparsing.Optional(aTag) result = target.searchString(""".....        &lt;object....&gt;&lt;embed&gt;.....&lt;/embed&gt;&lt;/object&gt;&lt;br /&gt;&lt;a href="blah"&gt;blah&lt;/a&gt;     """)  print result.dump()  loc = pyparsing.Empty().setParseAction(lambda slocntoks: locn) target = loc("beforeEmbed") + embedTag + loc("afterEmbed") +                                                   pyparsing.Optional(aTag)  
&gt;&gt;&gt; a = 'ASL/60Styles_Timeless-3_\xb8 CaLe.asl' &gt;&gt;&gt; print a.decode('utf-8') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "/usr/lib/python2.5/encodings/utf_8.py" line 16 in decode     return codecs.utf_8_decode(input errors True) UnicodeDecodeError: 'utf8' codec can't decode byte 0xb8 in position 24: unexpected code byte &gt;&gt;&gt; a.decode('iso8859-2') u'ASL/60Styles_Timeless-3_\xb8 CaLe.asl' &gt;&gt;&gt; print a.decode('iso8859-2') ASL/60Styles_Timeless-3_¸ CaLe.asl  &gt;&gt;&gt; a.decode('raw_unicode_escape') u'ASL/60Styles_Timeless-3_\xb8 CaLe.asl'  
maxLen = reduce(lambda ab : max(a b.shape[0])                 dSets 0) all = N.ma.zeros((maxLen)+ dSets[0].shape[1:] + (len(dSets))                      dtype=float)      # set the dtype to whatever all.mask = True for i set in enumerate(dSets):     all.mask[:len(set)...i] = False     all[:len(set)...i] = set  mean = all.mean(axis=-1)  
httplib. BadStatusLine http.client. BadStatusLine HTTPException &gt;&gt;&gt; theurl = 'http://www.garageband.com/mp3cat/.UZCKbS6N4qk/01_Saraenglish.mp3' &gt;&gt;&gt; if theurl.startswith("http://"): ...     theurl = theurl[7:] ...     head = theurl[:theurl.find('/')] ...     tail = theurl[theurl.find('/'):] ...  &gt;&gt;&gt; head 'www.garageband.com' &gt;&gt;&gt; tail '/mp3cat/.UZCKbS6N4qk/01_Saraenglish.mp3' &gt;&gt;&gt; response_code = 0 &gt;&gt;&gt; import httplib &gt;&gt;&gt; conn = httplib.HTTPConnection(head) &gt;&gt;&gt; conn.request("HEAD" tail) &gt;&gt;&gt; res = conn.getresponse() &gt;&gt;&gt; res.status 302 &gt;&gt;&gt; response_code = int(res.status)  
from suds.client import Client  url = 'http://www.webservicex.net/WeatherForecast.asmx?WSDL' client = Client(url)  print client.service.GetWeatherByPlaceName('Dallas') print client.service.GetWeatherByZipCode ('33126')  
/opt/local/bin select_python /opt/local/bin/python /usr/bin python python2.x /opt/local/bin /usr/bin $PATH .bash_profile $ /usr/bin/python your-program.py  $ /opt/local/bin/python your-program.py  python_select $ /opt/local/bin/python2.5 your-program.py  .bash_profile export PATH=/opt/local/bin:/opt/local/sbin:$PATH  
pynotify 
""" Strip comments and docstrings from a file. """  import sys token tokenize  def do_file(fname):     """ Run on just one file.      """     source = open(fname)     mod = open(fname + "strip" "w")      prev_toktype = token.INDENT     first_line = None     last_lineno = -1     last_col = 0      tokgen = tokenize.generate_tokens(source.readline)     for toktype ttext (slineno scol) (elineno ecol) ltext in tokgen:         if 0:   # Change to if 1 to see the tokens fly by.             print("%10s %-14s %-20r %r" % (                 tokenize.tok_name.get(toktype toktype)                 "%d.%d-%d.%d" % (slineno scol elineno ecol)                 ttext ltext                 ))         if slineno &gt; last_lineno:             last_col = 0         if scol &gt; last_col:             mod.write(" " * (scol - last_col))         if toktype == token.STRING and prev_toktype == token.INDENT:             # Docstring             mod.write("#--")         elif toktype == tokenize.COMMENT:             # Comment             mod.write("##\n")         else:             mod.write(ttext)         prev_toktype = toktype         last_col = ecol         last_lineno = elineno  if __name__ == '__main__':     do_file(sys.argv[1])  
**kwargs &gt;&gt;&gt; def print_keyword_args(**kwargs): ...     # kwargs is a dict of the keyword args passed to the function ...     for key value in kwargs.iteritems(): ...         print "%s = %s" % (key value) ...  &gt;&gt;&gt; print_keyword_args(first_name="John" last_name="Doe") first_name = John last_name = Doe  **kwargs &gt;&gt;&gt; kwargs = {'first_name': 'Bobby' 'last_name': 'Smith'} &gt;&gt;&gt; print_keyword_args(**kwargs) first_name = Bobby last_name = Smith  
&gt;&gt;&gt; cgi.parse_qs(qs) {'second': ['4'] 'third': ['3'] 'first': ['1']}  &gt;&gt;&gt; cgi.parse_qsl(qs) [('first' '1') ('second' '4') ('third' '3')]  cgi.parse_qs() &gt;&gt;&gt; qs = 'tags=python&amp;tags=programming' &gt;&gt;&gt; cgi.parse_qs(qs) {'tags': ['python' 'programming']}  
str() __str__() __repr__() 
self this __init__ __init__ __init__ class StackOverflowUser:     def __init__(self name userid rep):          self.name = name         self.userid = userid         self.rep = rep  dave = StackOverflowUser(&quot;Dave Webb&quot;3171500)  &gt;&gt;&gt; dave.rep 500 &gt;&gt;&gt; dave.name 'Dave Webb'  __init__ self self self 
import os import pwd import subprocess import sys   def main(my_args=None):     if my_args is None: my_args = sys.argv[1:]     user_name cwd = my_args[:2]     args = my_args[2:]     pw_record = pwd.getpwnam(user_name)     user_name      = pw_record.pw_name     user_home_dir  = pw_record.pw_dir     user_uid       = pw_record.pw_uid     user_gid       = pw_record.pw_gid     env = os.environ.copy()     env[ 'HOME'     ]  = user_home_dir     env[ 'LOGNAME'  ]  = user_name     env[ 'PWD'      ]  = cwd     env[ 'USER'     ]  = user_name     report_ids('starting ' + str(args))     process = subprocess.Popen(         args preexec_fn=demote(user_uid user_gid) cwd=cwd env=env     )     result = process.wait()     report_ids('finished ' + str(args))     print 'result' result   def demote(user_uid user_gid):     def result():         report_ids('starting demotion')         os.setgid(user_gid)         os.setuid(user_uid)         report_ids('finished demotion')     return result   def report_ids(msg):     print 'uid gid = %d %d; %s' % (os.getuid() os.getgid() msg)   if __name__ == '__main__':     main()  (hale)/tmp/demo$ sudo bash --norc (root)/tmp/demo$ ls -l total 8 drwxr-xr-x  2 hale  wheel    68 May 17 16:26 inner -rw-r--r--  1 hale  staff  1836 May 17 15:25 test-child.py  (root)/tmp/demo$ python test-child.py hale inner /bin/bash --norc uid gid = 0 0; starting ['/bin/bash' '--norc'] uid gid = 0 0; starting demotion uid gid = 501 20; finished demotion (hale)/tmp/demo/inner$ pwd /tmp/demo/inner (hale)/tmp/demo/inner$ whoami hale  (hale)/tmp/demo/inner$ exit exit uid gid = 0 0; finished ['/bin/bash' '--norc'] result 0 (root)/tmp/demo$ pwd /tmp/demo (root)/tmp/demo$ whoami root  
&gt;&gt;&gt; first colon rest = "commence:2009-11-19T19:55:00".partition(':')  &gt;&gt;&gt; print (first colon rest) ('commence' ':' '2009-11-19T19:55:00')  
cls type Y Z __new__ return super(Z cls).__new__(cls name bases attrs)  cls super cls super  return type.__new__(cls name bases attrs)  cls Z __new__ type(name bases attrs) type cls self super 
bool foo(int x float* result);  boost::python::tuple foo_wrapper(int x) {     float v;     bool result = foo(x &amp;v);     return boost::python::make_tuple(result v); }  BOOST_PYTHON_MODULE(foomodule) {     def("foo" &amp;foo_wrapper); }  result v = foomodule.foo(x)  
(...) (file filename) ('binf' 'file_name') binf file_name pg query con1.query(     "INSERT INTO files (file file_name) VALUES ('%s' '%s')" %     (pg.escape_string(f.read()) pg.escape_string(f.name)) )  f file .read(binf) bytea escape_bytea escape_string pg con1.insert('files' file= f.read() file_name= f.name)  pgdb execute cursor.execute(     'INSERT INTO files (file file_name) VALUES (%(content)s %(name)s)'      {'content': f.read() 'name': f.name } )  
csv.reader def records(path):     with open(path) as f:         contents = f.read()         return (record for record in contents.split('^^'))  csv.reader(records('input.csv'))  
~/ import errno import os  def getfilepath(filename foldername='tempfoler' envar='MYAPPDIR'):   # check for environmental override   if envar is not None and envar in os.environ:     dirpath = os.environ[envar]   else:     dirpath = '~/%s' % foldername   # expand and ensure it's a directory   expanded = os.path.expanduser(dirpath)   if not os.path.isdir(expanded):     if os.path.lexists(expanded):       # we're in dire trouble: the path is a file not a directory!       # you could punt to some default value but I prefer to raise       # an exception and allow higher levels to deal with this       raise IOError(errno.EEXISTS "Path is a file not a dir" expanded)     # the following may also raise (permission issues &amp;c)     os.makedirs(expanded)   # now the directory exists the file may or may not (doesn't matter)   return os.path.join(expanded filename)  
pipelines.py import csv  class CsvWriterPipeline(object):      def __init__(self):         self.csvwriter = csv.writer(open('items.csv' 'wb'))      def process_item(self domain item):         self.csvwriter.writerow([item['title'][0] item['link'][0] item['desc'][0]])         return item  ITEM_PIPELINES = ['dmoz.pipelines.CsvWriterPipeline']  
(echo select volume %~d0 &amp;&amp; echo assign letter=Z) | diskpart  %~d0 RegisterDeviceNotification() WM_DEVICECHANGE 
for type_key type in TYPES.iteritems():     for sub_type_key sub_type in type.iteritems():         for sig in sub_type['signatures']:  for type_key type in TYPES.iteritems():         for sig in type['signatures']:  type['type'] providers = {     'hotmail':{         'type':'hotmail'         'lookup':'mixed'         'dkim': 'no'         'signatures':[             '|S|Return-Path: postmaster@hotmail.com'             '|R|^Return-Path:\s*[^@]+@(?:hot|msn)'             '^Received: from .*hotmail.com$']     }     'gmail':{         'type':'gmail'         'lookup':'mixed'         'dkim': 'yes'         'signatures':['|S|Subject: unsubscribe''''''']     } }  for provider provider_info in providers.iteritems():     for sig in provicer_info['signatures']:         if ("|S|" in sig):             #String based matching             clean_sig = sig[3:len(sig)]             if (clean_sig in file_contents):                 sig_match += 1         elif ("|R|" in sig):             clean_sig = sig[3:len(sig)]             #REGMATCH later     if (sig_match == sig.count):         return provider   return None  
#!/usr/bin/env python import traceback def asdf():     (filenameline_numberfunction_nametext)=traceback.extract_stack()[-1]     print function_name asdf()  
class HandsOffThatPie(Exception):     pass  def get_pie(please=False):     if not please:         raise HandsOffThatPie('Say please!')  
&gt;&gt;&gt; q = Book.objects.annotate(num_authors=Count('authors')) &gt;&gt;&gt; q[0].num_authors 2 &gt;&gt;&gt; q[1].num_authors 1  
class Brie(object):     base= 2     powers= map(lambda i: base**i xrange(5))  class Brie(object):     base= 2      def __generatePowers():         for i in xrange(5):             yield base**i      powers= list(__generatePowers())  base __generatePowers base class Brie(object):     base= 2     powers= map(lambda i base= base: base**i xrange(5))  
$ export test="/bin" $ python &gt;&gt;&gt; import os &gt;&gt;&gt; os.environ["test"] '/bin'  
config._sections $ cat test.ini [First Section] var = value key = item  [Second Section] othervar = othervalue otherkey = otheritem  &gt;&gt;&gt; from ConfigParser import ConfigParser &gt;&gt;&gt; config = ConfigParser() &gt;&gt;&gt; config.read('test.ini') &gt;&gt;&gt; config._sections {'First Section': {'var': 'value' '__name__': 'First Section' 'key': 'item'} 'Second Section': {'__name__': 'Second Section' 'otherkey': 'otheritem' 'othervar': 'othervalue'}} &gt;&gt;&gt; config._sections['First Section'] {'var': 'value' '__name__': 'First Section' 'key': 'item'}  dict() config._sections [db] dbname = testdb dbuser = test_user host   = localhost password = abc123 port   = 3306  &gt;&gt;&gt; config.read('test.ini') ['test.ini'] &gt;&gt;&gt; config._sections {'db': {'dbname': 'testdb' 'host': 'localhost' 'dbuser': 'test_user' '__name__': 'db' 'password': 'abc123' 'port': '3306'}} &gt;&gt;&gt; connection_string = "dbname='%(dbname)s' user='%(dbuser)s' host='%(host)s' password='%(password)s' port='%(port)s'" &gt;&gt;&gt; connection_string % config._sections['db'] "dbname='testdb' user='test_user' host='localhost' password='abc123' port='3306'"  
import dateutil.parser as dparser date=dparser.parse("Mon May 7 1883 10:36:28") print(date) # 1883-05-07 10:36:28  date=dparser.parse("1685-3-21") print(date) # 1685-03-21 00:00:00  date=dparser.parse("12/17/1770") print(date) # 1770-12-17 00:00:00  dayfirst yearfirst print(type(date)) # &lt;type 'datetime.datetime'&gt;  dates=[dparser.parse("Mon May 7 1883 10:36:28")dparser.parse("1685-3-21")dparser.parse("12/17/1770")] dates.sort() print(dates) # [datetime.date(1685 3 21) datetime.date(1770 12 17) datetime.date(1833 5 7)]  dates=[datetime.datetime.strptime(date_str'%Y-%m-%d') for date_str in        ('1883-5-7''1685-3-21''1770-12-17')] print([str(date) for date in dates]) # ['1883-05-07 00:00:00' '1685-03-21 00:00:00' '1770-12-17 00:00:00'] dates.sort() print([str(date) for date in dates]) # ['1685-03-21 00:00:00' '1770-12-17 00:00:00' '1883-05-07 00:00:00']  
entry_list = Entry.objects.order_by('pub_date')  {% for entry in entry_list %} {% ifchanged %}&lt;h3&gt;{{entry.pub_date|date:"Y"}}&lt;/h3&gt;{% endifchanged %} {% ifchanged %}&lt;h4&gt;{{entry.pub_date|date:"F"}}&lt;/h4&gt;{% endifchanged %} &lt;p&gt;{{entry.title}}&lt;/p&gt; {% endfor %}  entry_months = Entry.objects.dates('pub_date''month''DESC')  DateQuerySet datetime.datetime 
(add-hook 'c-mode-common-hook       '(lambda ()           (define-key c-mode-base-map (kbd "RET") 'newline-and-indent)))  
test.py ../  test.py  css/  
list.extend(['a3' 'a4'])  
&amp; 
as **{'as': 'total'} as='total' 
try:     yield safe_join(template_dir template_name) except UnicodeDecodeError:     # The template dir name was a bytestring that wasn't valid UTF-8.     raise except ValueError:     # The joined path was located outside of template_dir.     pass  UnicodeDecodeError ValueError UnicodeDecodeError UnicodeDecodeError ValueError UnicodeDecodeError 
def primes(upper):     n = 2; found = []     while n &lt; upper:         # If a number is not divisble through all preceding primes it's prime         if all(n % div != 0 for div in found):             yield n             found.append( n )         n += 1  for pr in primes(1000):     print pr  from math import sqrt from itertools import takewhile  def primes(upper):     n = 2; foundPrimes = []     while n &lt; upper:         sqrtN = int(sqrt(n))         # If a number n is not divisble through all preceding primes up to sqrt(n) it's prime         if all(n % div != 0 for div in takewhile(lambda div: div &lt;= sqrtN foundPrimes)):             yield n             foundPrimes.append(n)         n += 1  
#include &lt;Python.h&gt;  #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;chrono&gt; #include &lt;thread&gt;  int main() {     std::string script =         "import time threading                        \n"         ""          "def job():                                    \n"         "    while True:                               \n"         "         print('Python')                      \n"         "         time.sleep(1)                        \n"         ""         "t = threading.Thread(target=job args = ())   \n"         "t.daemon = True                               \n"         "t.start()                                     \n";      PyEval_InitThreads();     Py_Initialize();      PyRun_SimpleString(script.c_str());      Py_BEGIN_ALLOW_THREADS      while(true)     {         std::cout &lt;&lt; "C++" &lt;&lt; std::endl;         std::this_thread::sleep_for(std::chrono::milliseconds(1000));     }      Py_END_ALLOW_THREADS      Py_Finalize();      return 0; }  
time.sleep(5) self.pollServer()  wx.CallLater(5self.pollServer)  
from pyparsing import Word alphas  # define grammar greet = Word( alphas ) + "" + Word( alphas ) + "!"  # input string hello = "Hello World!"  # parse input string print hello "-&gt;" greet.parseString( hello )  
&gt;&gt;&gt; class BaseClass(object): ...     def foo(self): ...         return 'foo' ...     def bar(self): ...         return 'bar' ...     def methods_implemented(self): ...         """This does work.""" ...         overriden = [] ...         for method in ('foo' 'bar'): ...             this_method = getattr(self method) ...             base_method = getattr(BaseClass method) ...             if this_method.__func__ is not base_method.__func__: ...                 overriden.append(method) ...         return overriden ...  &gt;&gt;&gt; class SubClass(BaseClass): ...     def foo(self): ...         return 'override foo' ...  &gt;&gt;&gt; o = SubClass() &gt;&gt;&gt; o.methods_implemented() ['foo']  __func__ im_func 
import urllib2  def get_unread_msgs(user passwd):     auth_handler = urllib2.HTTPBasicAuthHandler()     auth_handler.add_password(         realm='New mail feed'         uri='https://mail.google.com'         user='%s@gmail.com' % user         passwd=passwd     )     opener = urllib2.build_opener(auth_handler)     urllib2.install_opener(opener)     feed = urllib2.urlopen('https://mail.google.com/mail/feed/atom')     return feed.read()  
&gt;&gt;&gt; import platform &gt;&gt;&gt; platform.mac_ver() ('10.5.8' ('' '' '') 'i386')  mac_ver 10.x.y &gt;&gt;&gt; v _ _ = platform.mac_ver() &gt;&gt;&gt; v = float('.'.join(v.split('.')[:2])) &gt;&gt;&gt; print v 10.5  platform.uname() 
class PhoneNumberField(USPhoneNumberField):     def clean(self value):         super(USPhoneNumberField self).clean(value)         if value in EMPTY_VALUES:             return u''         value = re.sub('(\(|\)|\s+)' '' smart_unicode(value))         m = phone_digits_re.search(value)         if m:             return u'%s%s%s' % (m.group(1) m.group(2) m.group(3))         raise ValidationError(self.error_messages['invalid'])  
f1.read() open(f1).read() 
extern "C" {...}  
User.name.property.columns[0].type.length  columns 
C:/TEST/ C:/TEST/ C:/TEST/css/ C:/TEST/uri/ ply C:/TEST/css/ C:/TEST/css/ply/ test.py C:/TEST/ from css.parse import parse print dir(parse)  C:\TEST&gt;test.py ['__call__' '__class__' '__closure__' '__code__' '__defaults__' '__delattr__' '__dict__' '__doc__' '__format__' '__get__' '__getattribute__' '__globals__' '__hash__' '__init__' '__module__' '__name__' '__new__' '__reduce__' '__reduce_ex__' '__repr__' '__setattr__' '__sizeof__' '__str__' '__subclasshook__' 'func_closure' 'func_code' 'func_defaults' 'func_dict' 'func_doc' 'func_globals' 'func_name'] 
fork() execv 
c.__str__() str(c) print "c is" c  c.__repr__() repr(c) &gt;&gt;&gt; c # In the Python shell  __str__ __repr__ print repr(c) # Or print "%r" % c # Or print "%.16f" % c  __repr__ 0.2 0.2000000000000001 
str(0.47000000000000003) '0.47' float('0.47') 0.46999999999999997 float(repr(0.47000000000000003)) eval(repr(0.47000000000000003)) 
den 
Foo mybase 
import random random.random = 9 # Very weird but legal assignment. random.random &lt; 10 # True random.random &gt; 10 # False  
about:cache-entry?client=HTTP&amp;sb=1&amp;key=http://your.server/image.png  file on disk: /home/fviktor/.mozilla/firefox/7jx6k3hx.default/Cache/CF7379D8d01  none 
INSERT INTO courses (course_nro)  
about:cache-entry?... file on disk: /home/fviktor/.mozilla/firefox/7jx6k3hx.default/Cache/CF7379D8d01  none 
# The first way I had of grabbing the module: mod = __import__(__name__ fromlist=['nonempty'])  # From Roger's suggestion: import sys mod = sys.modules[__name__]  for name in ['A' 'B' 'C']:     class_ = type(name (object ) {})     setattr(mod name class_)  print A B C  for name in ['A' 'B' 'C']:     class_ = type(name (object ) {})     globals()[name] = class_  print A B C  for name in ['A' 'B' 'C']:     class_ = type(name (object ) {})     exec "%s = class_" % name  print A B C  __name__ == "__main__" globals() __dict__ Python 2.6.4 (r264:75706 Nov  8 2009 17:35:59)  [GCC 4.2.1 (Apple Inc. build 5646)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import sys &gt;&gt;&gt; mod = sys.modules[__name__] &gt;&gt;&gt; mod.__dict__ is globals() True  
fetch cur 
subprocess 
o = Course(course_nro='abcd') session.add(o) session.commit()  print session.query(Course).all()  from sqlalchemy import * from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import session_maker  # create an engine and a base class engine = create_engine('postgre://naa:123@localhost/tk') DeclarativeBase = declarative_base(bind=engine) metadata = DeclarativeBase.metadata  # create a session Session = session_maker(engine) session = Session()  # declare the models class Cource(DelcarativeBase):     __tablename__ = 'courses'      course_nro = Column('course_nro' CHAR(12))  
val = 1 - val 
import locale locale.setlocale( locale.LC_ALL 'en_US.UTF-8' )  locale.atoi('1000000') # 1000000 locale.atof('1000000.53') # 1000000.53  
abstract NotImplementedError 
from storm.locals import *  class Courses(object):     __storm_table__ = 'courses'     pkey = Int(primary=True)     course_nro = Unicode()  course = Courses() course.course_nro = 'abcd' store.add(course) store.commit()  from storm.locals import * from pysistence import Expando  class Courses(Expando):     __storm_table__ = 'courses'     pkey = Int(primary=True)     course_nro = Unicode()  course = Courses(course_nro='abcd') store.add(course) store.commit()  
&gt;&gt;&gt; map(dict zip(*[[(k v) for v in value] for k value in d.items()])) [{'key2': 4 'key1': 1} {'key2': 5 'key1': 2} {'key2': 6 'key1': 3}]  d = {'key3': [7 8 9] 'key2': [4 5 6] 'key1': [1 2 3]}  &gt;&gt;&gt; map(dict zip(*[[(k v) for v in value] for k value in d.items()])) [{'key3': 7 'key2': 4 'key1': 1} {'key3': 8 'key2': 5 'key1': 2} {'key3': 9 'key2': 6 'key1': 3}]  &gt;&gt;&gt; from itertools import izip_longest &gt;&gt;&gt; d = {'key2': [3 4 5 6] 'key1': [1 2]} &gt;&gt;&gt; map(lambda a: dict(filter(None a)) izip_longest(*[[(k v) for v in value] for k value in d.items()])) [{'key2': 3 'key1': 1} {'key2': 4 'key1': 2} {'key2': 5} {'key2': 6}]  &gt;&gt;&gt; d = {'key2': [3 4 5 6] 'key1': [1 2]} &gt;&gt;&gt; map(lambda a: dict(filter(None a)) map(None *[[(k v) for v in value] for k value in d.items()])) [{'key2': 3 'key1': 1} {'key2': 4 'key1': 2} {'key2': 5} {'key2': 6}]  
  def correct(word: String) = {     val sets = List[String =&gt; Set[String]](       x =&gt; known(Set(x)) x =&gt; known(edits1(x)) known_edits2     ).elements.map(_(word))      sets find { !_.isEmpty } match {       case Some(candidates: Set[String]) =&gt; candidates.reduceLeft { (res n) =&gt; if (NWORDS(res) &gt; NWORDS(n)) res else n }       case None =&gt; word     }   }  
&gt;&gt;&gt; article = Article.objects.get(pk=1) &gt;&gt;&gt; form = ArticleForm(instance=article)  
def __iter__(self): return self.books.itervalues()  
a-b a:b &gt;&gt;&gt; class x(object): ...   def __getitem__(self x): return x ...  &gt;&gt;&gt; x()[2 3:6 4] (2 slice(3 6 None) 4)  [] 
list1 = [12345] list2 = [i for i in list1 if i%2 == 0] print list2 # =&gt; [2 4]  
UnicodeEncodeError UnicodeEncodeError __unicode__ __unicode__ __unicode__ &gt;&gt;&gt; u'\u2660'.encode('utf-8') '\xe2\x99\xa0' &gt;&gt;&gt; print '\xe2\x99\xa0' ?  
import sys  from PyQt4 import QtGui QtCore  app = QtGui.QApplication(sys.argv)  widget = QtGui.QWidget() widget_layout = QtGui.QHBoxLayout() widget.setLayout(widget_layout)  def add_group_box():     group_box = widget.group_box = QtGui.QGroupBox()     group_layout = QtGui.QVBoxLayout()     group_box.setLayout(group_layout)      for i in range(2):         group_layout.addWidget(QtGui.QRadioButton(str(i)))      widget_layout.insertWidget(0 group_box) add_group_box()  show_button = QtGui.QPushButton("show") hide_button = QtGui.QPushButton("hide") def on_show():     if not widget.group_box:         add_group_box() def on_hide():     if widget.group_box:         widget.group_box.deleteLater()         widget.group_box = None show_button.connect(show_button QtCore.SIGNAL("clicked()") on_show) hide_button.connect(hide_button QtCore.SIGNAL("clicked()") on_hide)     widget_layout.addWidget(show_button) widget_layout.addWidget(hide_button)  widget.show()  app.exec_()  
xml.etree.ElementTree 
^(?!mpeg).*  mpeg mpeg if not inputstring.startswith("mpeg"):  
$php = array(12345678910); for ($i = 0; $i &lt; 10 ; $i ++) echo $php[$i]."&lt;br&gt;";  lst = [12345678910] for item in lst:     print(str(item) + "&lt;br&gt;")  for ($i = 0; $i &lt; 10 ; $i ++) echo $php[$i] = $i +1 ;  lst = range(1 11) for item in lst:     print(item)  lst = [] for i in range(10):     lst.append(i + 1)     print(lst[-1])     # prints out last element  $php = array(12345678910); foreach ($php as $value) echo $value."&lt;br&gt;";  $arr = array(1 2 3 4); foreach ($arr as &amp;$value) {     $value = $value * 2; }  lst = [1 2 3 4] lst = [val * 2 for val in lst]  $arr = array("mot"=&gt;"one" "hai"=&gt;"two""ba"=&gt; "three"); foreach ($arr as $key =&gt; $value) {     echo "Key: $key; Value: $value&lt;br /&gt;\n"; }  {...} dct = {'mot': 'one' 'hai': 'two' 'ba': 'three'} for key value in dct.items():     print("Key: %s; Value: %s&lt;br /&gt;" % (key value))  $arr = array("one" "two""three"); while (list($key $value) = each($arr)) {     echo "Key: $key; Value: $value&lt;br /&gt;\n"; }  lst = ['one' 'two' 'three'] for key value in enumerate(lst):     print("Key: %d; Value: %s&lt;br /&gt;" % (key value))  $arr = array("one" "two""three"); while ($element = each($arr)) {     echo "Key: $element['key']; Value: $element['value']&lt;br /&gt;\n"; }  $products = array( array("ITL""INTEL""HARD")                         array("MIR" "MICROSOFT""SOFT")                         array("Py4C" "pythonkhmer.wordpress.com""TUTORIAL")                          ); for ($row = 0; $row &lt; 3; $row++) {     for ($col = 0; $col &lt;3; $col++)     {         echo "|".$products[$row][$col];     }     echo "&lt;br&gt;"; }  products = [['ITL' 'INTEL' 'HARD']     ['MIR' 'MICROSOFT' 'SOFT']     ['Py4C' 'pythonkhmer.wordpress.com' 'TUTORIAL']]  for product in products:     for item in product:         print('|' + item)     print('&lt;br&gt;')  for product in products:     print('|%s&lt;br&gt;' % ('|'.join(product)))  
export PATH=$PATH:/usr/local/mysql-5.1.39-osx10.5-x86_64/bin/  
 from __future__ import absolute_import  
server.socket.setsockopt(socket.IPPROTO_TCP socket.TCP_NODELAY 1)  
tuple([10*x for x in img.size])  
file1=set(open("file1").readlines()) file2=set(open("file2").readlines()) intersection = file1 &amp; file2 #common lines non_intersection = file2 - file1  #uncommon lines (in file2 but not file1) for items in intersection:     print items for nitems in non_intersection:     print nitems  # lines in file2 common with file1 data1=map(str.rstripopen("file1").readlines()) for line in open("file2"):     line=line.rstrip()     if line in data1:         print line  # lines in file2 not in file1 use "not" data1=map(str.rstripopen("file1").readlines()) for line in open("file2"):     line=line.rstrip()     if not line in data1:         print line  
maxdiff[the_diff &gt; maxdiff] = the_diff  replaceElements = the_diff &gt; maxdiff maxdiff[replaceElements] = the_diff[replaceElements]  maxdiff = maximum(maxdiff the_diff)  
&gt;&gt;&gt; a = [(u'we' 'PRP') (u'saw' 'VBD') (u'you' 'PRP') (u'bruh' 'VBP') (u'.' '.')] &gt;&gt;&gt; import operator &gt;&gt;&gt; a.sort(key = operator.itemgetter(1)) &gt;&gt;&gt; a [(u'.' '.') (u'we' 'PRP') (u'you' 'PRP') (u'saw' 'VBD') (u'bruh' 'VBP')]  
&gt;&gt;&gt; import datetime &gt;&gt;&gt; datetime.datetime.strptime(date + ' ' + hour + ':' + minutes + ':' + seconds '%m/%d/%Y %H:%M:%S') datetime.datetime(2009 11 28 23 59)  
functools.wraps() from functools import wraps  def decorator(f):     @wraps(f)     def _decorator():         print 'decorator active'         f()     return _decorator  @decorator def foo():     '''the magic foo function'''     print 'this is function foo'  help(foo)  functools 
virtualenv virtualenv 
import numpy as NP my_data = NP.random.random_integers(0 9 9).reshape(3 3) new_col = NP.array((5 5 5)).reshape(3 1) res = NP.append(my_data new_col axis=1)  my_data = NP.random.random_integers(0 9 16).reshape(4 4) # the line to add--does not depend on array dimensions new_col = NP.zeros_like(my_data[:-1]).reshape(-1 1) res = NP.hstack((my_data new_col))  hstack concatenate((my_data new_col) axis=1) &gt;&gt;&gt; # initialize your skeleton array using 'empty' for lowest-memory footprint  &gt;&gt;&gt; M = NP.empty(shape=(10 5) dtype=float)  &gt;&gt;&gt; # create a small function to mimic step-wise populating this empty 2D array: &gt;&gt;&gt; fnx = lambda v : NP.random.randint(0 10 v)  &gt;&gt;&gt; for index itm in enumerate(range(5)):             M[:index] = fnx(10)  &gt;&gt;&gt; M   array([[ 1.  7.  0.  8.  7.]          [ 9.  0.  6.  9.  4.]          [ 2.  3.  6.  3.  4.]          [ 3.  4.  1.  0.  5.]          [ 2.  3.  5.  3.  0.]          [ 4.  6.  5.  6.  2.]          [ 0.  6.  1.  6.  8.]          [ 3.  8.  0.  8.  0.]          [ 5.  2.  5.  0.  1.]          [ 0.  6.  5.  9.  1.]])  &gt;&gt;&gt; M[:3:3]   array([[ 9.  3.  1.]          [ 9.  6.  8.]          [ 9.  7.  5.]])  
&gt;&gt;&gt; import numpy as np &gt;&gt;&gt; a = np.array(['zero' 'one' 'two' 'three'] dtype=object) &gt;&gt;&gt; a[1] = 'thirteen' &gt;&gt;&gt; print a ['zero' 'thirteen' 'two' 'three'] &gt;&gt;&gt;  
itertools 
#!/usr/bin/env python # -*- coding= UTF-8 -*-  # Firstly modules can be documented using docstring so drop the comments """  Create the videos directory in the current directory  If the directory exists ignore it.   Moves all files with the .wmv extension to the  videos folder for file structure   Crawl the videos directory then change to videos directory  create the videos.csv file in the videos directory  create output.csv replace any drive letter A:-Y: with Z: """  # not useful to import os and os.path as the second is contain in the first one import os import shutil import csv # import glob it will be handy import glob import ntpath # this is to split the drive  # don't really need to use a function   # Here don't bother checking if the directory exists # and you don't need add any slash either directory = "videos" ext = "*.wmv" try :     os.mkdir(directory) except OSError :     pass  listDirectory = [] # creating a buffer so no need to list the dir twice  for file in glob.glob(ext): # much easier this way isn't it ?         shutil.move(file os.path.join(directory file)) # good catch for shutil :-)         listDirectory.append(file)  os.chdir(directory)  # you've smartly imported the csv module so let's use it ! f = open("videos.csv" "w") vid_csv = csv.writer(f) w = open('output.csv' 'w') out_csv = csv.writer(w)  # let's do everything in one loop for file in listDirectory :     file_path = os.path.abspath(file)     # Python includes functions to deal with drive letters :-D     # I use ntpath because I am under linux but you can use      # normal os.path functions on windows with the same names     file_path_with_new_letter = ntpath.join("Z:" ntpath.splitdrive(file_path)[1])     # let's write the csv using tuples     vid_csv.writerow((file_path ))     out_csv.writerow((file_path_with_new_letter ))  
&gt;&gt;&gt; import MyLibrary &gt;&gt;&gt; print MyLibrary  
sb = wx.StaticBox(self.pl -1 'BOX0') sat = wx.CheckBox(self.pl -1 'Satellite') gsm = wx.CheckBox(self.pl -1 'GSM') wlan = wx.CheckBox(self.pl -1 'WLAN')  box = wx.StaticBoxSizer(sb wx.VERTICAL) box.SetMinSize((180 150)) box.Add(sat 0 wx.ALL 5) box.Add(gsm 0 wx.ALL 5) box.Add(wlan 0 wx.ALL 5)  
def item(i v):   if i != 1: return v   return strangestuff(v)  for row in rows:   t = tuple(item(i c.InnerText)             for i c in enumerate(row.Descendants[TableCell]())            )  
instance.foo(1234 a b c d)  p = [a b c d] instance.foo(1234 *p)  
f = open('file.txt''rU')  \r 
QTextEdit's QTextEdit self.__qTextEdit.viewport().installEventFilter(self)  MyClassFrm::MyClassFrm() {     ...     // Get your TextEdit from the UI here  or create your TextEdit here....     // Install the filter     pMyTextEdit-&gt;viewport()-&gt;installEventFilter(this);     ... }  ...  bool MyClassFrm::eventFilter(QObject* pObject QEvent* pEvent) {     if (pEvent-&gt;type() == QEvent::MousePressEvent)      {         qDebug() &lt;&lt; "Mouse pressed !!";         // standard event processing         return QObject::eventFilter(pObject pEvent);     } }  
uuid1() uuid uuid4() 
SDL_Surface* PySurfaceObject *obj; SDL_Surface *surf; if (!PyArg_ParseTuple(args 'O!' &amp;PySurface_Type &amp;obj) {     return NULL; # or other action for error } surf = PySurface_AsSurface(obj);  
myenv(id) myenv(x) 
for function in functions:     function(x)  function(x) timeit &gt;&gt;&gt; timeit.Timer('[f(20) for f in functions]' 'functions = [lambda n: i * n for i in range(100)]').repeat() [44.727972984313965 44.752119779586792 44.577917814254761] &gt;&gt;&gt; timeit.Timer('for f in functions: f(20)' 'functions = [lambda n: i * n for i in range(100)]').repeat() [40.320928812026978 40.491761207580566 40.303879022598267]  for f in functions function functions 
PyTuple_Pack PyObject Py_BuildValue("(ii)" (*i).x (*i).y)  int 
import java.util.ArrayList; import java.util.HashMap; import java.util.List;  public class DefaultDict&lt;K V&gt; extends HashMap&lt;K V&gt; {      Class&lt;V&gt; klass;     public DefaultDict(Class klass) {         this.klass = klass;         }      @Override     public V get(Object key) {         V returnValue = super.get(key);         if (returnValue == null) {             try {                 returnValue = klass.newInstance();             } catch (Exception e) {                 throw new RuntimeException(e);             }             this.put((K) key returnValue);         }         return returnValue;     }     }  public static void main(String[] args) {     DefaultDict&lt;Integer List&lt;Integer&gt;&gt; dict =         new DefaultDict&lt;Integer List&lt;Integer&gt;&gt;(ArrayList.class);     dict.get(1).add(2);     dict.get(1).add(3);     System.out.println(dict); }  {1=[2 3]} 
import elementtree.ElementTree as ET  tree = ET.parse("test.xml") doc = tree.getroot() thingy = doc.find('timeSeries')  print thingy.attrib  {'name': 'NWIS Time Series Instantaneous Values'}  
import itertools as it import collections  L = ['a' 'ab' 'bba'] M = ['baa' 'aa' 'bb']  def cmbs(L=L M=M):   Ucans = collections.defaultdict(list)   Vcans = collections.defaultdict(list)   sides = (L Vcans Ucans) (M Ucans Vcans)   for i in it.count(1):     for k (G Ocans Tcans) in enumerate(sides):       for u in it.product(G repeat=i):         j = ''.join(u)         if j in Ocans:           for samp in Ocans[j]:             result = samp u             yield result[1-k] result[k]         Tcans[j].append(u)  if __name__ == '__main__':   for x y in it.islice(cmbs() 10):     print x y ''.join(x) ''.join(y)  ('a' 'a') ('aa') aa aa ('bba' 'a') ('bb' 'aa') bbaa bbaa ('a' 'a' 'a' 'a') ('aa' 'aa') aaaa aaaa ('a' 'a' 'bba' 'a') ('aa' 'bb' 'aa') aabbaa aabbaa ('a' 'ab' 'a' 'a') ('aa' 'baa') aabaa aabaa ('a' 'ab' 'bba' 'a') ('aa' 'bb' 'baa') aabbbaa aabbbaa ('bba' 'a' 'a' 'a') ('bb' 'aa' 'aa') bbaaaa bbaaaa ('bba' 'ab' 'a' 'a') ('bb' 'aa' 'baa') bbaabaa bbaabaa ('bba' 'ab' 'bba' 'a') ('bb' 'aa' 'bb' 'baa') bbaabbbaa bbaabbbaa ('bba' 'a' 'bba' 'a') ('bb' 'aa' 'bb' 'aa') bbaabbaa bbaabbaa  ['a' 'aa'] a 
django-debug-toolbar django-debug-toolbar django-debug-toolbar django-memcache-status memcache-top 
help pydoc inspect __doc__ __help__ help old_help = help def help(thing):     if hasattr(thing '__help__'):         print thing.__help__     else:         old_help(thing)  __help__ class myCallable:     def __init__(self doc):         self.__doc__ = doc         self.__help__ = doc  
&gt;&gt;&gt; n = 29 &gt;&gt;&gt; d = 1009 &gt;&gt;&gt; print str(float(n)/d) 0.0287413280476  &gt;&gt;&gt; from __future__ import division &gt;&gt;&gt; n/d 0.028741328047571853  
# Detach process pid = os.fork() if pid == 0:     # Ensure that process is detached from TTY     os.setsid()      # call ssh from here else:     print "Waiting for ssh (pid %d)" % pid     os.waitpid(pid 0)         print "Done"  env = {'SSH_ASKPASS':'/path/to/myprog' 'DISPLAY':':9999'} p = subprocess.Popen(['ssh' '-T' '-v' 'user@myhost.com']     stdin=subprocess.PIPE     stdout=subprocess.PIPE     stderr=subprocess.PIPE     env=env     preexec_fn=os.setsid )  
threadLimiter = threading.BoundedSemaphore(maximumNumberOfThreads)  class EncodeThread(threading.Thread):      def run(self):         threadLimiter.acquire()         try:             &lt;your code here&gt;         finally:             threadLimiter.release()  maximumNumberOfThreads threadLimiter.acquire() threadLimiter.release() 
#coding=utf-8 import codecs import sys # import imp # imp.reload(sys)  # sys.setdefaultencoding('utf8') dictFileName = 'abstract.dict' print(sys.getdefaultencoding())   print(sys.stdout.encoding)  def readDict():     print("start reading dict...")     #dictObject = codecs.open(dictFileName'rb' encoding = 'utf-8')# encoding = 'utf-8')     dictObject = open(dictFileName 'rb')     try:         print('open file success!')         #dictObject.seek(0x1852c)         chunk = dictObject.read(0x5f0) #0x5f0         print(len(chunk))         #chunk = dictObject.read(0x1)         print('read success')         #print(chunk.decode("utf-8"))         #print(chunk.encode('utf-8').decode('gb18030'))         #sys.stdout.buffer.write(chunk.encode('gb18030'))         sys.stdout.buffer.write(chunk.decode('utf-8').encode('gb18030'))     finally:         dictObject.close() readDict() input()  
Cursor.rowcount 
class Model(db.Model):    def clean_email(value):     if ...    email = db.EmailProperty(validator=clean_email)  
data from tarfile import TarFile TarError from StringIO import StringIO  sio = StringIO(data) try:     tf = TarFile(fileobj=sio)     # process the file.... except TarError:     print "Not a tar file"  
the_list = [(a b) for a b in the_list if a.isalpha()]  
*args __init__ args apply  QWizardPage.__init__(self *args)  super(DisplayPage self).__init__(*args)  super().__init__(*args)  apply QWizardPage super super 
if question.strip().endswith("?") and "://" not in question:     # do something ?  
rxvt-cygwin-native export TERM=rxvt-cygwin-native 
import shlex import StringIO # use in place of files  list(shlex.shlex(StringIO.StringIO('Some tokens. 123 45.67 "A string with whitespace"')))  
sys.getsizeof int import sys myint = 12 print sys.getsizeof(myint)  
.egg setup.py __version__ = "$Revision$"  setup.py 
and a_list all(a_list)  or a_list any(a_list)  import operator def my_all(a_list):   return reduce(operator.and_ a_list True)  def my_any(a_list):   return reduce(operator.or_ a_list False)  def my_all_v2(a_list):   return len(filter(Nonea_list)) == len(a_list)  def my_any_v2(a_list):   return len(filter(Nonea_list)) &gt; 0  def my_all_v3(a_list):   for i in a_list:     if not i:       return False   return True  def my_any_v3(a_list):   for i in a_list:     if i:       return True   return False  all any 
def running_average():   sum = 0   count = 0   while True:     sum += cauchy(31)     count += 1     yield sum/count  # Cauchy numbers generator def cauchy_numbers():   while True:     yield cauchy(31)  # running sum utility function def running_sum(iterable):   sum = 0   for x in iterable:     sum += x     yield sum  # Running averages generator expression (** the neat part **) running_avgs = (sum/(i+1) for (isum) in enumerate(running_sum(cauchy_numbers())))  # goes on forever for avg in running_avgs:   print avg  # alternatively take just the first 10 import itertools for avg in itertools.islice(running_avgs 10):   print avg  
email.utils parsedate() &gt;&gt;&gt; import email.utils &gt;&gt;&gt; import time &gt;&gt;&gt; import datetime &gt;&gt;&gt; email.utils.parsedate('Mon 16 Nov 2009 13:32:02 +0100') (2009 11 16 13 32 2 0 1 -1) &gt;&gt;&gt; time.mktime((2009 11 16 13 32 2 0 1 -1)) 1258378322.0 &gt;&gt;&gt; datetime.datetime.fromtimestamp(1258378322.0) datetime.datetime(2009 11 16 13 32 2)  parsedate time.mktime &gt;&gt;&gt; (time.mktime(email.utils.parsedate('Mon 16 Nov 2009 13:32:02 +0900')) == ... time.mktime(email.utils.parsedate('Mon 16 Nov 2009 13:32:02 +0100')) True  &gt;&gt;&gt; REMOTE_TIME_ZONE_OFFSET = +9 * 60 * 60 &gt;&gt;&gt; (time.mktime(email.utils.parsedate('Mon 16 Nov 2009 13:32:02 +0900')) + ... time.timezone - REMOTE_TIME_ZONE_OFFSET) 1258410122.0  
__init__ 
import re  x = '''LINE: 1 TOKENKIND: somedata TOKENKIND: somedata LINE: 2 TOKENKIND: somedata LINE: 3'''  junkre = re.compile(r'(\s*LINE:\s*\d*\s*)|(\s*TOKENKIND:)' re.DOTALL)  print junkre.sub('' x)  
&lt;table&gt; &lt;tr py:for="i in t"&gt;       &lt;td py:for="e in tp[i]"&gt; ${e}s &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;  
sexp &lt;&lt; ( alphaword | integer | ( LPAREN + ZeroOrMore(sexp) + RPAREN)  
nodes_list_nodes = Table(     'nodes_list_nodes' metadata     Column('parent_id' None ForeignKey('nodes_list.id') nullable=False)     Column('child_id' None ForeignKey(Node.id) nullable=False)     PrimaryKeyConstraint('parent_id' 'child_id') )  class ListNode(Node):     __mapper_args__ = {'polymorphic_identity': 'list'}     __tablename__ = 'nodes_list'     id = Column(None ForeignKey('nodes.id') primary_key=True)     items = relation(Node secondary=nodes_list_nodes)  association_proxy from sqlalchemy.orm.collections import InstrumentedList from sqlalchemy.ext.associationproxy import association_proxy   class ListNodeAssociation(Base):     __tablename__ = 'nodes_list_nodes'     parent_id = Column(None ForeignKey('nodes_list.id') primary_key=True)     child_id = Column(None ForeignKey(Node.id) primary_key=True)     order = Column(Integer nullable=False default=0)     child = relation(Node)     __table_args__ = (         PrimaryKeyConstraint('parent_id' 'child_id')         {}     )   class OrderedList(InstrumentedList):      def append(self item):         if self:             item.order = self[-1].order+1         else:             item.order = 1         InstrumentedList.append(self item)   class ListNode(Node):     __mapper_args__ = {'polymorphic_identity': 'list'}     __tablename__ = 'nodes_list'     id = Column(None ForeignKey('nodes.id') primary_key=True)     _items = relation(ListNodeAssociation                       order_by=ListNodeAssociation.order                       collection_class=OrderedList                       cascade='all delete-orphan')     items = association_proxy(                 '_items' 'child'                 creator=lambda item: ListNodeAssociation(child=item))  
numpy.hstack numpy.core.fromnumeric __array_wrap__ def hstack2(arrays) :   return arrays[0].__array_wrap__(numpy.hstack(arrays))  &gt;&gt;&gt; f = hstack2((ab)) &gt;&gt;&gt; type(f) &lt;class 'numpy.core.records.recarray'&gt; &gt;&gt;&gt; f.foo array([    140633760262784     111050731618561     140633760262800                    7536928 8391166428122670177]) &gt;&gt;&gt; x = numpy.random.rand(3) &gt;&gt;&gt; y = numpy.random.rand(2) &gt;&gt;&gt; z = hstack2((xy)) &gt;&gt;&gt; type(z) &lt;type 'numpy.ndarray'&gt;  
SESSION_COOKIE_NAME SESSION_COOKIE_NAME 
__ __attribute _CLS__attribute return type(name (cls ) { '__dict' : {} }) { '__dict' : {} } __dict D._C__dict D.__dict (Pdb) dir(D) ['_C__dict' '__class__' '__delattr__' '__dict' '__dict__' '__doc__' '__format__' '__getattribute__' '__hash__' '__init__' '__module__' '__new__' '__reduce__' '__reduce_ex__' '__repr__' '__setattr__' '__sizeof__' '__str__' '__subclasshook__' '__weakref__' 'addchild' 'getdict' 'setval']  D._C__dict C.setval(1 5) D._C__dict C._C__dict 
list 
def extractURL(selffileName):      wordsInLine = []     tempWord = []     urlList = []      #open up the file containing the email     file = open(fileName)     for line in file:         #create a list that contains each word in each line         wordsInLine = line.split(' ')         #For each word try to split it with :         for word in wordsInLine:             tempWord = word.split(":")             #Check to see if the word is a URL             if len(tempWord) == 2:                 if tempWord[0] == "http" or tempWord[0] == "https":                     urlList.append(word)      file.close()      return urlList  
open() 'rb+' 
x = '\xff\x00' y = ['%02x' % ord(c) for c in x] print y  ['ff' '00']  
xrange def xlongrange(start limit step):     n = start     while n &lt; limit:         yield n         n += step  
if A or B and ((C or D and E) or F) or G and H:  e = Evaluator() if e('A or B and ((C or D and E) or F) or G and H'):  __call__ compile eval dict locals and or X or Y or Z X and Y and Z Evaluator import inspect import random  class TracingDict(object):    def __init__(self loc glob):     self.loc = loc     self.glob = glob     self.vars = []    def __getitem__(self name):     try: v = self.loc[name]     except KeyError: v = self.glob[name]     self.vars.append((name v))     return v   class Evaluator(object):    def __init__(self):     f = inspect.currentframe()     f = inspect.getouterframes(f)[1][0]     self.d = TracingDict(f.f_locals f.f_globals)    def __call__(self expr):     return eval(expr {} self.d)   def f(A B C D E):   e = Evaluator()   res = e('A or B and ((C or D and E) or F) or G and H')   print 'R=%r from %s' % (res e.d.vars)  for x in range(20):   A B C D E F G H = [random.randrange(2) for x in range(8)]   f(A B C D E)  R=1 from [('A' 1)] R=1 from [('A' 1)] R=1 from [('A' 1)] R=1 from [('A' 0) ('B' 1) ('C' 1)] R=1 from [('A' 1)] R=1 from [('A' 0) ('B' 0) ('G' 1) ('H' 1)] R=1 from [('A' 1)] R=1 from [('A' 1)] R=1 from [('A' 0) ('B' 1) ('C' 1)] R=1 from [('A' 1)] R=1 from [('A' 0) ('B' 1) ('C' 1)] R=1 from [('A' 1)] R=1 from [('A' 1)] R=1 from [('A' 1)] R=0 from [('A' 0) ('B' 0) ('G' 0)] R=1 from [('A' 1)] R=1 from [('A' 1)] R=1 from [('A' 1)] R=0 from [('A' 0) ('B' 0) ('G' 0)] R=1 from [('A' 0) ('B' 1) ('C' 1)]  
html = #get html soup = BeautifulSoup(html) links = soup.findAll('a' attrs={'class': 'myclass'}) for link in links:     #process link  
class Rating(models.Model):     content = models.OneToOneField(Content primary_key=True)     ip =  models.CharField(max_length=200 blank=True)     rating = models.IntegerField(default=0)      class Meta:         unique_together= (('content' 'ip'))  
.execute() query = """      INSERT INTO credit          (bank number card int1 value type int2)      VALUES           (? ? ? ? ? ? ?)         """ data =  ['Citi' '5567' 'visa' 6000 9.99 '23' 9000]  cursor.execute(query data)  .execute(operation[parameters]) paramstyle paramstyle &gt;&gt;&gt; import sqlite3 &gt;&gt;&gt; print sqlite3.paramstyle qmark  qmark ? 
ctypes &gt;&gt;&gt; obj = xrange(1112) &gt;&gt;&gt; obj.__reduce__()[1] (1 11 2) &gt;&gt;&gt; len(obj) 5  __reduce__() ctypes from ctypes import *  PyObject_HEAD = [     ('ob_refcnt' c_size_t)     ('ob_type' c_void_p) ]  class XRangeType(Structure):     _fields_ = PyObject_HEAD + [         ('start' c_long)         ('step' c_long)         ('len' c_long)     ]  range_obj = xrange(1 11 2)  c_range_obj = cast(c_void_p(id(range_obj)) POINTER(XRangeType)).contents print c_range_obj.start c_range_obj.step c_range_obj.len  
State id Int Object Int id id id Object id Int Integer Int id id data Object a = Obj Int a  instance Eq (Object a) where   Obj i _ == Obj j _ = i == j  type InterpreterState a = State [Int] a  createObject :: a -&gt; InterpreterState (Object a) createObject a = do   (i:is) &lt;- get    put is   return $ Obj i a   destroyObject :: Object a -&gt; InterpreterState () destroyObject (Obj i a) = do   modify (i:)  InterpreterState createObject destroyObject 
import views  def app(environ start_response):     urls = url_map.bind_to_environ(environ)     request = Request(environ)     endpoint params = urls.match()     names = endpoint.split('.')     view = views     for name in names:         if not hasattr(view name):             __import__(view.__name__ None None [name])         view = getattr(view name)     try:         response = view(request)     except werkzeug.exceptions.HTTPException exc:         response = exc     return response(environ start_response)  
PATH PYTHONPATH 
&lt;input type="radio" name="music" value="Rock" checked="checked"&gt; Rock&lt;br&gt; &lt;input type="radio" name="music" value="Pop"&gt; Pop&lt;br&gt; &lt;input type="radio" name="music" value="Metal"&gt; Metal&lt;br&gt;  
import sys current_module = sys.modules[__name__]  import sys inspect def print_classes():     for name obj in inspect.getmembers(sys.modules[__name__]):         if inspect.isclass(obj):             print(obj)  clsmembers = inspect.getmembers(sys.modules[__name__] inspect.isclass)  inspect.getmembers() 
This module has been built with Oracle 9.2.0 10.2.0 11.1.0 on Linux  
ssh client.exec_command('ssh user@host2 "apt-get install sl -y --force-yes"')  
_frame frameobject.h traceback.c #include &lt;Python.h&gt; #include &lt;frameobject.h&gt;  PyTracebackObject* traceback = get_the_traceback();  int line = traceback-&gt;tb_lineno; const char* filename = PyString_AsString(traceback-&gt;tb_frame-&gt;f_code-&gt;co_filename);  
s.sprintf(    "import imp\n"    "imp.load_source('%s' r'%s')" modname script_path);  PyRun_SimpleString(s.c_str());   
easy_install # /path/to/python-2.5 easy_install Django  
foreach (range(0 12) as $number) {     echo $number; }  
def get_thread(msg):     messages = [] # empty message set      while msg.response_to:            messages.append(msg)          msg = msg.response_to      messages.append(msg) # will append the original message      return messages  
import webbrowser webbrowser.open('file://%s' % path)  
copy_reg.pickle import copy_reg import types  def reduce_method(m):     return (getattr (m.__self__ m.__func__.__name__))  copy_reg.pickle(types.MethodType reduce_method)  
foo = ''.join(foo.split())  foo = foo[:-3]  foo = foo.upper()  foo = ''.join(foo.split())[:-3].upper()  
lib/settings.py BASE = 'http://www.whatever.com'  from settings import *  game.py url = '%syear_%s/month_%s/day_%s/%s/' % (BASE year month day game_id)  
l l = [x for x in l if x != 0]  l if x True i &lt; len(l) len(l) i = 0 while i &lt; len(l):    if l[i] == 0:        l.pop(i)    else:        i += 1  
KeyboardInterupt KeyboardInterrupt 
numpy.true_divide(AC) from __future__ import division 
import numpy as np x=np.array([[np.NaN 1. 1. 1. 1. 1. 1.][1. np.NaN 1. 1. 1. 1. 1.][1. 1. np.NaN 1. 1. 1. 1.] [1. 1. 1. np.NaN 1. 1. 1.] [1. 1. 1. 1. np.NaN 1. 1.][1. 1. 1. 1. 1. np.NaN 1.] [1. 1. 1. 1. 1. 1. np.NaN]]) x[np.isnan(x)]=0  np.isnan(x) True x NaN x[ boolean_array ] = 0 True 
py : for 
LOAD DATA INFILE 'data.txt' INTO TABLE tbl_name   FIELDS TERMINATED BY '' OPTIONALLY ENCLOSED BY '"'   LINES TERMINATED BY '\n';  
filter = ''.join([['.' chr(x)][chr(x) in string.printable[:-5]] for x in xrange(256)])  
&gt;&gt;&gt; import re &gt;&gt;&gt; p = re.compile("lalala(I want this part)lalala") &gt;&gt;&gt; p.match("lalalaI want this partlalala").group(1) 'I want this part'  
(r'' 'pub.views.index') (r'^/$' 'pub.views.index')  pub.views.index url(r'' 'pub.views.index' name='pub_a') url(r'^/$' 'pub.views.index' name='pub_b')  {% url pub_a %} {% url pub_b %} 
url(r'^user/(?P&lt;user_id&gt;\d+)/profile/$' 'yourapp.views.view' name='user_url')  &lt;a href="{% url user_url user.id %}"&gt;  def myview(request):     user = request.user  
$ cat test.i  %module test %{ void test() { printf("Test.\n"); } %} void test(); $ swig -python test.i ; gcc -I/usr/include/python2.5 -shared -fPIC -o _test.so test_wrap.c -lpython2.5 `pkg-config --libs gtkglext-1.0` $ python -c 'import test; test.test()' Test. Segmentation fault $ python -c 'import gtk; import test; test.test()' Test.  
Array = dict() Array[0 0 0 0 0 0 0 0 0 0 1] = [1.0 0.0 0.0]  
__init__.py threading Thread 
paster serve paster create paster serve paster create 
self._v_scaleInfo: [(xy)(xy)...] for width height in self._v_scaleInfo: $scaleInfo = array(array(xy) array(xy)...);  for( $i = 0; $i &lt; count($scaleInfo); $i++ ) {   $width = $scaleInfo[$i][0];   $height = $scaleInfo[$i][1];   ... }  
inspect.isclass() &gt;&gt;&gt; import inspect &gt;&gt;&gt; inspect.isclass(inspect) False &gt;&gt;&gt; inspect.isclass(inspect.ArgInfo) True &gt;&gt;&gt;   
&gt;&gt;&gt; from distutils import util &gt;&gt;&gt; util.get_platform() 'linux-x86_64'  &gt;&gt;&gt; import sys &gt;&gt;&gt; '%s.%s' % sys.version_info[:2] 2.6  
self None def p(self b=None):     if b is None:         b = self.a     print b  
step = len(smallMatrix[0]) for y in xrange(0 len(bigMatrix[0] step)):     for x in xrange(0 len(bigMatrix) step):         if not any(bigMatrix[x: x+step y: y + step]):             continue         (...)   
easy_install pastescript # A one-time install paster create  paster create mypackage  paster create -t libtemplate mypackage paster create -t apptemplate mypackage  mkdir mypackage &amp;&amp; cd mypackage virtualenv --distribute env source env/bin/activate # 'Turns on / activates' the environment easy_install pastescript paster create mypackage  
bool(value)==True result = a or b or c or default  
getattr def __eq__(self other):     return all(getattr(self a Ellipsis) == getattr(other a Ellipsis)                for a in self.metainfo)  Ellipsis NotImplemented hasattr def __eq__(self other):     return all(hasattr(self a) == hasattr(other a) and                getattr(self a) == getattr(other a) for a in self.metainfo)  ... Ellipsis getattr(self a ...) 
cregexp regexp 
import numpy as NP A = NP.random.random_integers(0 9 16).reshape(4 4) dg = NP.r_[ [NP.nan] * 4 ]  # proper syntax is 'nan' not 'NaN' dg = NP.diag(dg) A += dg                     # a 4x4 array w/ NaNs down the main diagonal NP.sum(A axis=1)           # doesn't work gives: array([ NaN  NaN  NaN  NaN])   from numpy import ma as MA Am = **MA.masked_invalid**(A) NP.sum(Am axis=1)         # now it works (treats 'nan' as 0)  NP.nan_to_num(A) MA.masked_equal(A 0)  MA.fix_invalid(A)  
10*i for i in range(77): subprocess.Popen lpr lpr subprocess.Popen(['lpr' 'some_filename'])  lpr pdf2ps subprocess.Popen 
last_post 
from twisted.internet import reactor protocol from twisted.protocols.basic import LineReceiver   class MyHandler(LineReceiver):      def lineReceived(self line):         print "Got line:" line   f = protocol.ClientFactory() f.protocol = MyHandler reactor.connectTCP("127.0.0.1" 4711 f) reactor.run()  
SgmlLinkExtractor(allow=["hxs.select('//td[@class='altRow'] ...')"])  SgmlLinkExtractor(allow=[r"product\.php"])  
Decimal &gt;&gt;&gt; def doit(s): return decimal.Decimal(str(round(float(s) 2))) ...  &gt;&gt;&gt; json.loads(x parse_float=doit) {u'14': [Decimal('4.59') u'susan']} &gt;&gt;&gt;   
all = Picture.objects.all().iterator() for i in all:     i.image.generate_thumbnails()  
randon.uniform() random.seed() random.seed(42) # Set the random number generator to a fixed sequence. r = array([uniform(-RR) uniform(-RR) uniform(-RR)])  
text = """\ 12 items - Ironing Service    11 Mar 2009 to 10 Apr 2009 Washing service (3 Shirt)  23 Mar 2009"""  # using tok_period as defined in the OP  # parse each line separately for tx in text.splitlines():     print SkipTo(tok_period).parseString(tx)[0]  # or have pyparsing search through the whole input string using searchString for [[td_]] in SkipTo(tok_periodinclude=True).searchString(text):     print td  for 12 items - Ironing Service     Washing service (3 Shirt)   
def makedict(avector):   return dict((item i) for i item in enumerate(avector))  def comparedicts(d1 d2):   allitems = set(d1) | set(d2)         distances = [d1.get(x len(d1)) - d2.get(x len(d2)) for x in allitems]   return sum(d * d for d in distances)  
item = FirmItem() item = FirmItem 
type="button" mechanize mechanize spidermonkey spidermonkey 
def convert_to_float(frac_str):     try:         return float(frac_str)     except ValueError:         num denom = frac_str.split('/')         try:             leading num = num.split(' ')             whole = float(leading)         except ValueError:             whole = 0         frac = float(num) / float(denom)         return whole - frac if whole &lt; 0 else whole + frac   print convert_to_float('3') # 3.0 print convert_to_float('3/2') # 1.5 print convert_to_float('1 1/2') # 1.5 print convert_to_float('-1 1/2') # -1.5  
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;     &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;     &lt;head&gt;  &lt;title&gt;{% block title %}{% endblock %}&lt;/title&gt;   &lt;meta http-equiv="content-type" content="text/html;charset=utf-8" /&gt;   &lt;link rel="stylesheet" type="text/css" href="/media/css/base.css" /&gt;   &lt;link rel="stylesheet" type="text/css" href="/media/css/login.css" /&gt;   &lt;link rel="stylesheet" href="/site_media/css/style.css" type="text/css" /&gt;   &lt;!--[if lte IE 7]&gt;&lt;link rel="stylesheet" type="text/css" href="/media/css/ie.css" /&gt;&lt;![endif]--&gt;  &lt;/head&gt;   &lt;body class="{% block bodyclass %}{% endblock %}"&gt;   {% block content %}       &lt;div id="content"&gt;           {% block navigation %}              &lt;ul id="top"&gt;                 &lt;li&gt;&lt;a class="{% block home %}{% endblock %}" href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;                 &lt;li&gt;&lt;a class="{% block myaccount %}{% endblock %}" href="/profile/"&gt;My Account&lt;/a&gt;&lt;/li&gt;                 {% if perms.staffing.add_staffrequest %}                  &lt;li&gt;&lt;a class="{% block createsr %}{% endblock %}"                    href="/create/staffrequest/"&gt;Staff Request&lt;/a&gt;&lt;/li&gt;                 {% endif %}              &lt;/ul&gt;          {% endblock %}           {% block real_content %}          &lt;div id="intro"&gt;              &lt;p&gt;Hello {{ user.first_name }}.&lt;/p&gt;              &lt;p&gt;Please create a Staff Request here by filling out the form below.&lt;/p&gt;           &lt;/div&gt; &lt;!-- end intro --&gt;            &lt;div id="logout"&gt;            &lt;a href="/accounts/logout" alt="Sign Off" title="Sign Off"&gt;Sign Off&lt;/a&gt;           &lt;/div&gt;           {% endblock %}       &lt;/div&gt; &lt;!-- end content --&gt;     {% endblock %}    {% block footer %}{% endblock %}  &lt;/body&gt;   &lt;/html&gt;  {% extends "base.html" %} {% block title %}Home Portal{% endblock %}  {% block home %}current{% endblock %}   {% block real_content %}  &lt;div id="content"&gt;   &lt;div id="intro"&gt;   &lt;p&gt;Hello {{ user.first_name }}.&lt;/p&gt;   &lt;p&gt;Please create a Staff Request here by filling out the form   below.&lt;/p&gt;  &lt;/div&gt; &lt;!-- end intro --&gt;  &lt;div id="logout"&gt;   &lt;a href="/accounts/logout" alt="Sign Off" title="Sign Off"&gt;Sign Off&lt;/a&gt;  &lt;/div&gt; &lt;/div&gt; &lt;!-- end content --&gt;  {% endblock %}  
song_points = {} for response in survey_responses.find():     for song in response['favorite_songs_of_2009']:         title = song['title']         song_points[title] = song_points.get(title 0) + song['points']  song_points 
from urllib2 import ProxyHandlerbuild_openerinstall_opener  PROXY="http://USERNAME:PASSWD@ADDRESS:PORT"  opener = build_opener(ProxyHandler({"http" : PROXY}))  install_opener(opener)  
RX = re.compile(r'^.*?\(\d+\s0.*\s0\)\s*$')  outfile = open('destination.sql' 'w') for ln in open('source.sql' 'r').xreadlines():     replace1 = ln.replace("INSERT INTO `Tbl_ABC` VALUES (" "")     replace2 = replace1.replace(")" "")     list_replace = replace2.split('')     #print list_replace     #print '%s %s' % (list_replace[1] list_replace[6])     if list_replace[6]==0 and list_replace[1] == 0:         #start write line to destination.sql!!!!!!!! NEED HELP         #if RX.match(ln):         outfile.write(ln)  
import inspect  a = A.NestA  print a in [x[1] for x in inspect.getmembers(A inspect.isclass)] print a in [x[1] for x in inspect.getmembers(B inspect.isclass)]  True False  # for each class in a's module... for klass in inspect.getmembers(inspect.getmodule(a) inspect.isclass):     # see if a is in that class     if a in [x[1] for x in inspect.getmembers(klass[1] inspect.isclass)]:         print a "is a member of" klass[0]  __main__.NestA is a member of A  
target_product created_flag = Component.objects.get_or_create(name=product_name) article.product = target_product  get_or_create() null=True 
Object() null lst = [Object() for i in range(100)]  i _ lst = [Object() for _ in range(100)]  * lst = [None] * 100  
extract open shutil.copyfileobj 
class Main(QtGui.QMainWindow):     ''' some stuff '''     def on_Button_clicked(self checked=None):         if checked==None: return         dialog = QDialog()         dialog.ui = Ui_MyDialog()         dialog.ui.setupUi(dialog)         dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)         dialog.exec_()  
authbind 
newFrameImage = cv.QueryFrame(ps3eye)  newFrameImage32F = cv.CreateImage((320 240) cv.IPL_DEPTH_32F 3) cv.ConvertScale(newFrameImagenewFrameImage32F)  newFrameImageGS_32F = cv.CreateImage ((320240) cv.IPL_DEPTH_32F 1) cv.CvtColor(newFrameImage32FnewFrameImageGS_32Fcv.CV_RGB2GRAY)  newFrameImageGS = cv.CreateImage ((320240) cv.IPL_DEPTH_8U 1) cv.ConvertScale(newFrameImageGS_32FnewFrameImageGS)  
.filter('intake =') .filter('intake=') .filter('intake') 
import MySQLdb.cursors connection=MySQLdb.connect(     host="thehost"user="theuser"     passwd="thepassword"db="thedb"     cursorclass = MySQLdb.cursors.SSCursor) cursor=connection.cursor() cursor.execute(query) for row in cursor:     print(row)  
&gt;&gt;&gt; [hex(ord(x)) for x in unichr(0x80).encode('utf-8')] ['0xc2' '0x80']  
B.__module__= 'a'  from a._b import *  __init__ for value in globals().values():     if inspect.isclass(value) and value.__module__.startswith('a.'):         value.__module__= 'a'  isinstance(value type) inspect __main__ __name__ 'a' 
UTF-8 cp1252 cp1252 iso-8859-1 
utf-8 UnicodeDecodeError UnicodeEncodeError utf-8 utf8encoded = htmlSource.decode('some_encoding').encode('utf-8')  'some_encoding' 
if if a == True:     print 1  with conditional __enter__ with try a != True a == True if a a a = [1] if a 
&gt;&gt;&gt; ... """ &gt;&gt;&gt; from packagename import module &gt;&gt;&gt; module.show_real_world_usage() 'Hello world!' """  """ &gt;&gt; from packagename import module &gt;&gt; module.show_real_world_usage() 'Hello world!' """  
d mud mud = dict((p set(d[p]['contents'].split())) for p in d)  parent = dict((p [k for k in mud if p in mud[k]]) for p in mud)  parent path = [page] while parent[path[-1]]:   path.append(parent[path[-1]][0])  partial_paths = [ [page] ] while partial_paths:   path = partial_paths.pop()   if parent[path[-1]]:     # add as many partial paths as open from here     for p in parent[path[-1]]:       partial_paths.append(path + [p])   else:     # we've reached a root (parentless node)     print(path)  print yield partial_paths = [ ([page] set([page])) ] while partial_paths:   path pset = partial_paths.pop()   if parent[path[-1]]:     # add as many partial paths as open from here     for p in parent[path[-1]]:       if p in pset:         print('Cycle: %s (%s)' % (path p))         continue       partial_paths.append((path + [p] pset.union([p])))   else:     # we've reached a root (parentless node)     print('Path: %s' % (path))  
totalIncome = ((classACost * float(classASeatsSold)) +     (classBCost * float(classBSeatsSold)) +     (classCCost * float(classCSeatsSold)))  
import contextlib import sys  @contextlib.contextmanager def nostderr():     savestderr = sys.stderr     class Devnull(object):         def write(self _): pass         def flush(self): pass     sys.stderr = Devnull()     try:         yield     finally:         sys.stderr = savestderr  with nostderr(): 
&gt;&gt;&gt; import ast &gt;&gt;&gt; print ast.literal_eval("(8 12.25) (13 15) (16.75 18.5)") ((8 12.25) (13 15) (16.75 18.5))  
.URL [InternetShortcut] URL=http://www.example.com/ OtherStuff=irrelevant  .URL ConfigParser InternetShortcut urllib urllib2 from glob import glob from urllib2 import urlopen from ConfigParser import ConfigParser from re import search  # I use RE here you might consider BeautifulSoup because RE can be stupid TITLE = r"&lt;title&gt;([^&lt;]+)&lt;/title&gt;"  result = [] for file in glob("*.url"):     config = ConfigParser.ConfigParser()     config.read(file)     url = config.get("InternetShortcut" "URL")      # Get the title     page = urlopen(url).read()     try: title = search(TITLE page).groups()[0]     except: title = "Couldn't find title"      result.append((url title))  for url title in result:     print "'%s' &lt;%s&gt;" % (title url)  
   0 = not parsed at all    1 = parsed as a date (of type struct_time)    2 = parsed as a time (of type struct_time)    3 = parsed as a datetime (of type datetime.datetime)  import parsedatetime.parsedatetime as pdt  def datetimeFromString( s ):      c = pdt.Calendar()     result what = c.parse( s )      dt = None      # what was returned (see http://code-bear.com/code/parsedatetime/docs/)     # 0 = failed to parse     # 1 = date (with current time as a struct_time)     # 2 = time (with current date as a struct_time)     # 3 = datetime     if what in (12):         # result is struct_time         dt = datetime.datetime( *result[:6] )     elif what == 3:         # result is a datetime         dt = result      if dt is None:         # Failed to parse         raise ValueError ("Don't understand date '"+s+"'")      return dt  
.py Python Launcher.app .py Get Info py2app AppleScript /Applications/Utilities/AppleScript Editor.app /Applications/AppleScript/Script Editor.app do shell script "/path/to/python /path/to/script.py &amp;&gt; /dev/null &amp;"  Save As.. File Format -&gt; Application Automater.app py2app 
m m two c.one c.two two two TypeError: two() takes exactly 2 arguments (1 given)  class C(object): pass def one(a): return a def two(a b): return a+b def bracketit(t): return '(%s)' % t  c = C()  for m in (one two):     def build_method(m):         return (lambda self *args **kwargs:             bracketit(m(*args **kwargs)))     method = build_method(m)     setattr(C m.__name__ method)  print c.one  print c.two print c.two(1 2) print c.one(1)  
__getattr__ __getattribute__ __getattribute__ self.product __getattr__ 
import re from random import randint  def select(m):     choices = m.group(1).split('|')     return choices[randint(0 len(choices)-1)]  def spinner(s):     r = re.compile('{([^{}]*)}')     while True:         s n = r.subn(select s)         if n == 0: break     return s.strip()  subn select() random.choice() r.subn(select s re.U) s = u"{...}" &gt;&gt;&gt; s = "{{Hello|Hi|Hey} {world|earth} | {Goodbye|farewell} {noobs|n3wbz|n00blets}}" &gt;&gt;&gt; print spinner(s) 'farewell n3wbz'  sub subn {([^{}]+)} {([^{}]*)} def spin(s):     while True:         s n = re.subn('{([^{}]*)}'                        lambda m: random.choice(m.group(1).split("|"))                        s)         if n == 0: break     return s.strip()  
related_name class Group(models.Model):     myuser = models.ForeignKey(User related_name='groups')  form.fields['myuser'].queryset = User.objects.filter(     groups__name='foo') form.fields['myuser'].queryset = User.objects.filter(     groups__name__in=['foo'])  in form.fields['myuser'].queryset = User.objects.filter(     groups__name__in=['foo' 'bar'])  qs = User.objects.filter(groups__name='foo') print qs.query   
exp(-x) P(xy) = 1/(1 + exp(x-y))  
parse parse_item 
curl http://svn.python.org/view/*checkout*/python/trunk/Tools/scripts/redemo.py?content-type=text%2Fplain &gt; redemo.py /usr/bin/python redemo.py  
links_list = char.getLinks(words) for source_url in links_list:      ...  
500x&lt; 
os.chdir('C:/Documents\ and\ Settings/') os.system subprocess .exe 
some_class(*os.path.split(somefile))  
truncate table product  ALTER TABLE product AUTO_INCREMENT = 1  SET insert_id; INSERT INTO product ...;  
DNS_RECORD POINTER(DNS_RECORD)() ctypes.byref(rr) server_arr 0x00000001 AddrCount server_arr 
doc.replace(block hilited) block.text=hilited   body=body.replace(block.texthilited)  
def main(): tokenList if __name__ == '__main__':   main()  cleanedInput = [] += .append ''.join(cleanedInput) O(N) O(N squared) continue continue continue if diff if diff foobar.py site-packages sys.path def token_of(line):   return line.partition(':')[-1].strip()  class FileParser(object):   def __init__(self filename):     self.tokenList = open(filename 'r')    def cleaned_input(self):     cleanedInput = []     prevLine = 0      for line in self.tokenList:         if line.startswith('LINE:'):             lineNo = int(token_of(line))             diff = lineNo - prevLine - 1             cleanedInput.append('\n' * (diff if diff&gt;1 else diff+1))             prevLine = lineNo         else:             cleanedLine = token_of(line)             cleanedInput.append(cleanedLine + ' ')      return cleanedInput  import sys import foobar  def main():     thefile = foobar.FileParser(sys.argv[1])     print thefile.cleaned_input()  if __name__ == '__main__':   main()  
cfg_path os.path.dirname cfg_path execfile compile exec execfile import os  def makeascript(where):   f = open(where 'w')   f.write('import os\nprint "Dir in file:" os.getcwd()\n')   f.close()  def main():   where = '/tmp/bah.py'   makeascript(where)   execfile(where)   os.chdir('/tmp')   execfile(where)  if __name__ == '__main__':   main()  Dir in file: /Users/aleax/stko Dir in file: /private/tmp  execfile execfile execfile 
d[list[i]] = 1  def RemoveDuplicates(l):     return list(set(l))  
query = Q() for search in (prefs.address1 prefs.address2):     if search:         query |= Q(title__icontains=search) results = Stores.objects.filter(query)  
class Subthing(models.Model):     ...     thing = models.ForeignKey(Thing related_name='subthings')     ...  Q(subthings__main=True) &amp; Q(subthings__subproperty=filter['value'])  
import subprocess  def launchWithoutConsole(command args):     """Launches 'command' windowless and waits until finished"""     startupinfo = subprocess.STARTUPINFO()     startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW     return subprocess.Popen([command] + args startupinfo=startupinfo).wait()  if __name__ == "__main__":     # test with "pythonw.exe"     launchWithoutConsole("d:\\bin\\gzip.exe" ["-d" "myfile.gz"])  stdin 
import urllib html = urllib.urlopen(pageToLawyersBio)  htmlstr='' for line in html.readlines():     htmlstr += line.lower()  for school in listOfSchools:     if school.lower() in htmlstr:         print "This lawyer went to" school  
f1 :: IO () f1 = let x = 77          f2 = print x      in f2  main :: IO () main = f1  f1 :: Int f1 = let f2 = x          x = 77      in f2  main :: IO () main = print f1  
def listEventsSummary(request):     listEventsSummary = Event.objects.all().order_by('-id')[:20]     return render_to_response('stuff.html'{'events':listEventsSummary})  {% for event in events %}     &lt;p&gt;{{event.date}} and whatever else...&lt;/p&gt; {% endfor %}  
# get all the items matches = re.findall(r'\w+=".+?"' s) + re.findall(r'\w+=[\d.]+'s)  # partition each match at '=' matches = [m.group().split('=' 1) for m in matches]  # use results to make a dict d = dict(matches)  
## concurrence/database/mysql/client.py ##  client_caps = server_caps   #always turn off compression client_caps &amp;= ~CAPS.COMPRESS  CLIENT_NO_SCHEMA   16  /* Don't allow database.table.column */ client_caps &amp;= ~CAPS.NO_SCHEMA 
twisted.internet.fdesc.readFromFD IReactorFDSet addReader ITransport write tail -f IProtocol IProtocol.dataReceived ITransport reactor.connectWith addReader connectionLost IFileDescriptor 
rfile.close() 
days = set( Post.objects.filter(user=TARGET).values_list("log_date" flat=True) ) curr = min(days) while curr &lt;= date.today():     print curr     if curr not in days:         print "NO ENTRY"     print     curr += timedelta(days=1)  
from pyparsing import makeHTMLTags withAttribute SkipTo import urllib  # get the HTML from your URL url = "http://www.whitecase.com/Attorneys/List.aspx?LastName=&amp;FirstName=" page = urllib.urlopen(url) html = page.read() page.close()  # define opening and closing tag expressions for &lt;td&gt; and &lt;a&gt; tags # (makeHTMLTags also comprehends tag variations including attributes  # upper/lower case etc.) tdStarttdEnd = makeHTMLTags("td") aStartaEnd = makeHTMLTags("a")  # only interested in tdStarts if they have "class=altRow" attribute tdStart.setParseAction(withAttribute(("class""altRow")))  # compose total matching pattern (add trailing tdStart to filter out  # extraneous &lt;td&gt; matches) patt = tdStart + aStart("a") + SkipTo(aEnd)("text") + aEnd + tdEnd + tdStart  # scan input HTML source for matching refs and print out the text and  # href values for refse in patt.scanString(html):     print ref.text ref.a.href  Abel Christian /cabel Acevedo Linda Jeannine /jacevedo AcuÃ±a Jennifer /jacuna Adeyemi Ike /igbadegesin Adler Avraham /aadler ... Zhu Jie /jzhu ZÃ­dek AleÅ¡ /azidek ZiÃ³Å‚ek Agnieszka /aziolek Zitter Adam /azitter Zupikova Jana /jzupikova  
xpath() lxml &gt;&gt;&gt; from lxml import etree &gt;&gt;&gt; from StringIO import StringIO &gt;&gt;&gt; def node_text(n):         try:             return etree.tostring(n method='html' with_tail=False)         except TypeError:             return str(n)  &gt;&gt;&gt; f = StringIO('&lt;strings&gt;&lt;string&gt;This is &lt;b&gt;not&lt;/b&gt; how I plan to escape.&lt;/string&gt;&lt;/strings&gt;') &gt;&gt;&gt; x = etree.parse(f) &gt;&gt;&gt; ''.join(node_text(n) for n in x.xpath('/strings/string/node()')) 'This is &lt;b&gt;not&lt;/b&gt; how I plan to escape.'  
MMM = int(math.log(i 10)) + 1  &gt;&gt;&gt; int(math.log(1000000 10)) + 1 6 &gt;&gt;&gt; int(math.log(1000001 10)) + 1 7  &gt;&gt;&gt; len(str(1000000)) 7 &gt;&gt;&gt; len(str(1000001)) 7  &gt;&gt;&gt; int(math.log10(10000000)) 7 &gt;&gt;&gt; int(math.log10(10000001)) 7 &gt;&gt;&gt; int(math.log10(10**1000)) 1000 &gt;&gt;&gt; int(math.log10(10**10000)) 10000 &gt;&gt;&gt; int(math.log10(10**100000)) 100000  math.log10 math.log(x 10) 
&gt;&gt;&gt; L = [('ba'4) ('hh'5) ('gg' 25)] &gt;&gt;&gt; [ i for il in enumerate(L) if l[0] == 'hh' ][0] 1  IndexError &gt;&gt;&gt; L = [('ba'4) ('hh'5) ('gg' 25)] &gt;&gt;&gt; sorted(L key=lambda x: x[1]) [('ba' 4) ('hh' 5) ('gg' 25)]  
join &gt;&gt;&gt; e = ('ham' 5 1 'bird') &gt;&gt;&gt; ''.join(map(stre)) 'ham51bird'  &gt;&gt;&gt; ''.join(str(i) for i in e) 'ham51bird'  
subprocess.check_call os.system import subprocess  if __name__=="__main__":     cmd = 'convert -font somefont.ttf -size 50x50'.split()     #XXX command arguments are invalid      subprocess.check_call(cmd + ['-label' unichr(9635) 'output.png'])  
sorted new_list = sorted(statlist key=lambda x: int(x[1]))   
import inspect PROVIDER_CHOICES = inspect.getmembers(Foo lambda x: isinstance(x int))  PROVIDER_CHOICES.sort(key=...) getmembers sorted 
logging QUIET QUIET from __future__ import print_function print = logging.info logging.basicConfig(level=logging.WARNING if QUIET else logging.INFO                     format="%(message)s")  --quiet iprint iprint = logging.warning  
spam myiter(int) import spam for i in spam.myiter(10):     print i  __iter__() next() StopIteration __iter()__ typedef struct {   PyObject_HEAD   long int m;   long int i; } spam_MyIter;  __iter__() self for ... in ... PyObject* spam_MyIter_iter(PyObject *self) {   Py_INCREF(self);   return self; }  next() PyObject* spam_MyIter_iternext(PyObject *self) {   spam_MyIter *p = (spam_MyIter *)self;   if (p-&gt;i &lt; p-&gt;m) {     PyObject *tmp = Py_BuildValue("l" p-&gt;i);     (p-&gt;i)++;     return tmp;   } else {     /* Raising of standard StopIteration exception with empty value. */     PyErr_SetNone(PyExc_StopIteration);     return NULL;   } }  PyTypeObject __iter__() next() static PyTypeObject spam_MyIterType = {     PyObject_HEAD_INIT(NULL)     0                         /*ob_size*/     "spam._MyIter"            /*tp_name*/     sizeof(spam_MyIter)       /*tp_basicsize*/     0                         /*tp_itemsize*/     0                         /*tp_dealloc*/     0                         /*tp_print*/     0                         /*tp_getattr*/     0                         /*tp_setattr*/     0                         /*tp_compare*/     0                         /*tp_repr*/     0                         /*tp_as_number*/     0                         /*tp_as_sequence*/     0                         /*tp_as_mapping*/     0                         /*tp_hash */     0                         /*tp_call*/     0                         /*tp_str*/     0                         /*tp_getattro*/     0                         /*tp_setattro*/     0                         /*tp_as_buffer*/     Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_ITER       /* tp_flags: Py_TPFLAGS_HAVE_ITER tells python to          use tp_iter and tp_iternext fields. */     "Internal myiter iterator object."           /* tp_doc */     0  /* tp_traverse */     0  /* tp_clear */     0  /* tp_richcompare */     0  /* tp_weaklistoffset */     spam_MyIter_iter  /* tp_iter: __iter__() method */     spam_MyIter_iternext  /* tp_iternext: next() method */ };  myiter(int) static PyObject * spam_myiter(PyObject *self PyObject *args) {   long int m;   spam_MyIter *p;    if (!PyArg_ParseTuple(args "l" &amp;m))  return NULL;    /* I don't need python callable __init__() method for this iterator      so I'll simply allocate it as PyObject and initialize it by hand. */    p = PyObject_New(spam_MyIter &amp;spam_MyIterType);   if (!p) return NULL;    /* I'm not sure if it's strictly necessary. */   if (!PyObject_Init((PyObject *)p &amp;spam_MyIterType)) {     Py_DECREF(p);     return NULL;   }    p-&gt;m = m;   p-&gt;i = 0;   return (PyObject *)p; }  static PyMethodDef SpamMethods[] = {     {"myiter"  spam_myiter METH_VARARGS "Iterate from i=0 while i&lt;m."}     {NULL NULL 0 NULL}        /* Sentinel */ };  PyMODINIT_FUNC initspam(void) {   PyObject* m;    spam_MyIterType.tp_new = PyType_GenericNew;   if (PyType_Ready(&amp;spam_MyIterType) &lt; 0)  return;    m = Py_InitModule("spam" SpamMethods);    Py_INCREF(&amp;spam_MyIterType);   PyModule_AddObject(m "_MyIter" (PyObject *)&amp;spam_MyIterType); }  
2009-11-29T14:33:59-0600 2009-11-29T14:33:59-06:00 django/utils/dateformat.py   def O(self):     "Difference to Greenwich time in hours; e.g. '+0200'"     seconds = self.Z()     return u"%+03d%02d" % (seconds // 3600 (seconds // 60) % 60)  return u"%+03d:%02d" % (seconds // 3600 (seconds // 60) % 60) &gt;&gt;&gt; from django.utils import dateformat &gt;&gt;&gt; fmt = "Y-m-d\TH:i:sO" &gt;&gt;&gt; import datetime &gt;&gt;&gt; now = datetime.datetime.now() &gt;&gt;&gt; now datetime.datetime(2009 12 1 12 39 48 655867) &gt;&gt;&gt; str = dateformat.format(now fmt) &gt;&gt;&gt; print str 2009-12-01T12:39:48+0000 &gt;&gt;&gt;  &gt;&gt;&gt; s = str[:-2] + ':' + str[-2:] &gt;&gt;&gt; s u'2009-12-01T12:39:48+00:00' &gt;&gt;&gt;   
sel = selenium('localhost' 4444 browser my_url) html = sel.get_eval("this.browserbot.getCurrentWindow().document.getElementById('1').innerHTML")  
class Tab1(wx.Panel):   def __init__(self parent id textCtrl1):     wx.Panel.__init__(self parent id);     self.textCtrl1 = textCtrl1   ...   def Create_OnClick(self event):     text1 = self.textCtrl1  
def foo():     print('bar')  &gt;&gt;&gt; import test &gt;&gt;&gt; test.foo() bar  def foo():     print('baz')  &gt;&gt;&gt; reload(test) &lt;module 'test' from '/home/unutbu/pybin/test.py'&gt; &gt;&gt;&gt; test.foo() baz  
_pyAAC.pyd MemoryLoadLibrary 
__slots__ &gt;&gt;&gt; class NoSlots(object): pass ...  &gt;&gt;&gt; n = NoSlots() &gt;&gt;&gt; class WithSlots(object): __slots__ = 'a' 'b' 'c' ...  &gt;&gt;&gt; w = WithSlots() &gt;&gt;&gt; n.a = n.b = n.c = 23 &gt;&gt;&gt; w.a = w.b = w.c = 23 &gt;&gt;&gt; sys.getsizeof(n) 32 &gt;&gt;&gt; sys.getsizeof(w) 36  sys.getsizeof &gt;&gt;&gt; sys.getsizeof(n.__dict__) 140  n &gt;&gt;&gt; import pympler.asizeof &gt;&gt;&gt; pympler.asizeof.asizeof(w) 96 &gt;&gt;&gt; pympler.asizeof.asizeof(n) 288  __slots__ __slots__ __slots__ $ python -mtimeit -s'class S(object): __slots__="x""y"' -s's=S(); s.x=s.y=23' 's.x' 10000000 loops best of 3: 0.37 usec per loop $ python -mtimeit -s'class S(object): pass' -s's=S(); s.x=s.y=23' 's.x' 1000000 loops best of 3: 0.604 usec per loop $ python -mtimeit -s'class S(object): __slots__="x""y"' -s's=S(); s.x=s.y=23' 's.x=45' 1000000 loops best of 3: 0.28 usec per loop $ python -mtimeit -s'class S(object): pass' -s's=S(); s.x=s.y=23' 's.x=45' 1000000 loops best of 3: 0.332 usec per loop  __slots__ __slots__ &gt;&gt;&gt; class A(object): __slots__='a' ...  &gt;&gt;&gt; class AB(A): __slots__='b' ...  &gt;&gt;&gt; ab=AB() &gt;&gt;&gt; ab.a = ab.b = 23 &gt;&gt;&gt;   a AB AB b a A &gt;&gt;&gt; class ABRed(A): __slots__='a''b' ...  &gt;&gt;&gt; abr=ABRed() &gt;&gt;&gt; abr.a = abr.b = 23  &gt;&gt;&gt; pympler.asizeof.asizeof(ab) 88 &gt;&gt;&gt; pympler.asizeof.asizeof(abr) 96  
photos = Photo.gql('ORDER BY __key__')  photo = Photo(key_name="xzy123") photo.put()  photos = [ Photo(key_name="%s" % id) ]  http://host/b/img/ahByY... class ViewPage(webapp.RequestHandler):   def get(self id):     photos = [ db.get(id) ]     ...  
Farm.objects.filter(tree__in=TreeQuerySet)  
csvwriter.writerow([JD])  
copy_reg 
r 
x = 0 y = 0  def someFunc():   dosomethingwithconstants(xy)  from MyModWithConstants import x # and also we can do import MyModWithConstants as MMWC  def somOtherFunc():   dosomethingNew(x MMWC.y)     ## x and MMWC.y both refer to things in the other file  
do_your_stuff do_something do_your_stuff A.do_your_stuff class A(object):     @classmethod     def do_your_stuff(cls):         print 'This is A'  class B(A):     @classmethod     def do_your_stuff(cls):         super(B cls).do_your_stuff()  B.do_your_stuff()  super(B cls).do_your_stuff cls super() cls cls do_your_stuff() super(B cls).do_your_stuff() A do_your_stuff cls A do_your_stuff do_something = classmethod(do_something) super(B cls) super(cls cls) class A(object):     @classmethod     def do_your_stuff(cls):         print('This is A')  class B(A):     @classmethod     def do_your_stuff(cls):         print('This is B')         # super(B cls).do_your_stuff()  # CORRECT         super(cls cls).do_your_stuff()  # WRONG  class C(B):     @classmethod     def do_your_stuff(cls):         print('This is C')         # super(C cls).do_your_stuff()  # CORRECT         super(cls cls).do_your_stuff()  # WRONG  C.do_your_stuff()  RuntimeError: maximum recursion depth exceeded while calling a Python object cls C super(cls cls) C.mro() C In [161]: C.mro() Out[161]: [__main__.C __main__.B __main__.A object]  B cls C super(cls cls).do_your_stuff() B.do_your_stuff super(cls cls).do_your_stuff() B.do_your_stuff B.do_your_stuff super super(B cls) super() super() class B super(B cls) super(cls cls) super(type(self) self) 
tbody table tbody # locate the table containing a cell with the given text owner = re.compile('Owner Name') cell = soup.find(text=owner).parent while cell.name != 'table': cell = cell.parent # print all non-empty strings in the table (except for the given text) for x in cell.findAll(text=lambda x: x.strip() and not owner.match(x)):   print x  owner 
/admin/invite_user/ 
&gt;&gt;&gt; import datetime &gt;&gt;&gt; t0 = datetime.datetime(2009102715330) &gt;&gt;&gt; t1 = datetime.datetime(200910311050) &gt;&gt;&gt; t1-t0 datetime.timedelta(3 66720) &gt;&gt;&gt; secs = 3 * 24 * 60 * 60 + 66720 &gt;&gt;&gt; secs 325920  &gt;&gt;&gt; 12901417500 - 1290191580 325920  &gt;&gt;&gt; m1 = 12901417500 &gt;&gt;&gt; days seconds = divmod(m1 60*60*24) &gt;&gt;&gt; epoch = t1 - datetime.timedelta(days seconds) &gt;&gt;&gt; epoch datetime.datetime(1601 1 1 11 0)  VF_FILETIME (UTC) VT_FILETIME OleFileIO_PL     elif type == VT_FILETIME:         value = long(i32(s offset+4)) + (long(i32(s offset+8))&lt;&lt;32)         # FIXME: this is a 64-bit int: "number of 100ns periods         # since Jan 11601".  Should map this to Python time         value = value / 10000000L # seconds  
HTTPError for l in bios:     OpenThisLink = url + l     try:         response = urllib2.urlopen(OpenThisLink)     except urllib2.HTTPError:         pass  for l in bios:     OpenThisLink = url + l     try:         response = urllib2.urlopen(OpenThisLink)     except urllib2.HTTPError as e:         raise Exception('Error opening %s: %s' % (e.geturl() e))  
Iterate over each element in the list   Unpack the element (which is also a list) into its fields   Generate a SQL line from these fields  list = [     ['11' ' 0' " 'MMB'" " '2 MB INTERNATIONAL'" ' NULL' ' NULL' ' 0']      ['12' ' 0' " '3D STRUCTURES'" " '3D STRUCTURES'" ' NULL' ' NULL' ' 0']     ['13' ' 0' " '2 STRUCTURES'" " '2D STRUCTURES'" ' NULL' ' NULL' ' 0']]  for elem in list:     print 'INSERT INTO \'Tbl_ABS\' VALUES (%s %s %s %s %s %s %s)' % tuple(elem)  
cursor.nextset() SELECT ... FOR UPDATE UPDATE SET in_use=1 ... COMMIT execute() in_use 
__unicode__() __unicode__() unicode() __unicode__() 
None log_exception() process_exception class MyExceptionMiddleware:      def process_exception(self request exception):         #Do your logging here  exception() error() 
re.compile(pattern[ flags]) 
__import__() module.subname getattr(module subname) unittest AttributeError ImportError getattr(module subname) ImportError AttributeError unittest 
l1 = [123] l2 = [456]  newl = [] for item1 item2 in zip(reversed(l1) reversed(l2)):     newl.append(item1)     newl.append(item2)  print newl  
from subprocess import Popen p = Popen("batchfile.bat" cwd=r"c:\directory\containing\batchfile") stdout stderr = p.communicate()  p = Popen(r'"C:\Program Files\Systems\Emb Work 5.4\common\bin\run" "C:\Program Files\Systems\Emb Work 5.4\arm\bin\mpr.dll" ... ...' cwd=r"...")  p = Popen([r"C:\Program Files\Systems\Emb Work 5.4\common\bin\run" r"C:\Program Files\Systems\Emb Work 5.4\arm\bin\mpr.dll" ...] cwd=r"...") # ... notice how you don't need to quote the elements containing spaces  list2cmdline() subprocess.list2cmdline() testparams.py import subprocess params = [r"C:\Program Files\Systems\Emb Work 5.4\common\bin\run.exe" ...] print subprocess.list2cmdline(params)  python testparams.py 
*.pth 
&gt;&gt;&gt; def whatever(): ...     pass ... &gt;&gt;&gt; whatever &lt;function whatever at 0x00AF5F30&gt;  def &gt;&gt;&gt; whatever.func_name 'whatever'  whatever() file.py whatever file.py &gt;&gt;&gt; globals() {'__builtins__': &lt;module '__builtin__' (built-in)&gt; '__name__': '__main__' '__d oc__': None 'whatever': &lt;function whatever at 0x00AF5EB0&gt;}  whatever &gt;&gt;&gt; whatever &lt;function whatever at 0x00AF5F30&gt; &gt;&gt;&gt; whatever = "string" &gt;&gt;&gt; whatever 'string'  &gt;&gt;&gt; somelambda = lambda x: x * 2 &gt;&gt;&gt; somelambda &lt;function &lt;lambda&gt; at 0x00AF5F30&gt;  self SomeClass somemethod someobject &gt;&gt;&gt; class SomeClass: ...     def somemethod(one="Not Passed" two="Not passed"): ...         print "one = %s\ntwo = %s" % (onetwo) ... &gt;&gt;&gt; someobject = SomeClass()  somemethod &gt;&gt;&gt; SomeClass.somemethod &lt;unbound method SomeClass.somemethod&gt; &gt;&gt;&gt; someobject.somemethod &lt;bound method SomeClass.somemethod of &lt;__main__.SomeClass instance at 0x00AFE030  &gt;&gt;&gt; someobject.somemethod("Hello world") one = &lt;__main__.SomeClass instance at 0x00AFE030&gt; two = Hello world  somemethod &gt;&gt;&gt; SomeClass.somemethod("Hello world") Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: unbound method somemethod() must be called with SomeClass instance as first argument (got str instance instead)  &gt;&gt;&gt; SomeClass.somemethod(someobject"Hello world") one = &lt;__main__.SomeClass instance at 0x00AFE030&gt; two = Hello world  
In [9]: %prun c.f(3) C.f -- param          3 function calls in 0.066 CPU seconds     Ordered by: internal time     ncalls  tottime  percall  cumtime  percall filename:lineno(function)         1    0.066    0.066    0.066    0.066 &lt;string&gt;:6(f)         1    0.000    0.000    0.066    0.066 &lt;string&gt;:1(&lt;module&gt;)         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}  
pics = Picture.objects.filter(categories__in = [123]).filter(visible=True)  
self.assertEqual(selenium.GetEval("this.browserbot.getUserWindow().functionUnderTest().isNaN();")"false""There was a NaN detected")  
class callee:     def __init__(self name):         self.name = name      def __call__(self):         print self.name "has been called"   class A:     def __getattr__(self attr):         return callee(attr)  a = A()  a.DoSomething() &gt;&gt;&gt; DoSomething has been called  
import re splitter = re.compile(r'(\s+|\S+)') splitter.findall(s)  
csv BigList = [] for filename in glob.glob(deferredDir + '/*'):     PartList = csv.reader(open(filename))     BigList.extend(PartList)  
from django.http import HttpResponseRedirect  def myview(request):     if request.user.get_profile().is_store():         return HttpResponseRedirect("/path/")      # return regular view otherwise  @decorator 
self.account Account is_store() 
role created = UserToUserRole.objects.get_or_create(     from_user=current_user to_user=user role='follow')  
&gt;&gt;&gt; print calendar.month_abbr[6].decode("utf8") ???  repr() getlocale() &gt;&gt;&gt; locale.setlocale(locale.LC_ALL 'en_US') 'en_US' &gt;&gt;&gt; locale.getlocale() ('en_US' 'ISO8859-1')  locale PyICU locale 
&gt;&gt;&gt; a = [("one""two") ("bad""good")] &gt;&gt;&gt; print "\n".join(j for i in a for j in i) one two bad good    &gt;&gt;&gt; for i in a: ...  print "\n".join(i) ...  one two bad good  
relation() class B(Base):     __tablename__ = 'bs'     id = Column(Integer primary_key=True)     a_id = Column(Integer ForeignKey('as.id') name="a")     a = relation(A)  
xmlValidator = Builder(action='xmllint --noout --schema '+                                pwd+'/path/schema.xsd $SOURCE') Env.Append(BUILDERS = {'ValidateXML' : xmlValidator}) Env.ValidateXML(source='file.xml')  xmlValidator = Builder(action='xmllint --schema '+                        pwd+'/path/schema.xsd $SOURCE --output $TARGET') Env.ValidateXML(source='file.xml' target="out.txt")  
array matrix m[0 0 0] m[0 0] array m[0 0][0] m[i j k] rbonvall@andy:~$ ipython Python 2.5.4 (r254:67916 Sep 26 2009 08:19:36)  [...]  In [1]: import numpy.random  In [2]: m = numpy.random.random(size=(3 3 3))  In [3]: m Out[3]:  array([[[ 0.68853531  0.8815277   0.53613676]         [ 0.9985735   0.56409085  0.03887982]         [ 0.12083102  0.0301229   0.51331851]]         [[ 0.73868543  0.24904349  0.24035031]         [ 0.15458694  0.35570177  0.22097202]         [ 0.81639051  0.55742805  0.5866573 ]]         [[ 0.90302482  0.29878548  0.90705737]         [ 0.68582033  0.1988247   0.9308886 ]         [ 0.88956484  0.25112987  0.69732309]]])  In [4]: m[0 0] Out[4]: array([ 0.68853531  0.8815277   0.53613676])  In [5]: m[0 0][0] Out[5]: 0.6885353066709865  array 
&gt;&gt;&gt; from ctypes import * &gt;&gt;&gt; c = cdll.LoadLibrary("libc.so.6") &gt;&gt;&gt; c.sigqueue &lt;_FuncPtr object at 0xb7dbd77c&gt; &gt;&gt;&gt; c.sigqueue(100 10 0) -1 &gt;&gt;&gt;  
vim.command('redraw | echo "%s"' % colorschemes[position]) :help echo 
str 
'{:}'.format(value)  # For Python ?2.7 f'{value:}'  # For Python ?3.6  import locale locale.setlocale(locale.LC_ALL '')  # Use '' for auto or force e.g. to 'en_US.UTF-8'  '{:n}'.format(value)  # For Python ?2.7 f'{value:n}'  # For Python ?3.6  '' 'n' 
cosine spatial.distance from itertools import izip from math import sqrt  def cosine_distance(a b):     if len(a) != len(b):         raise ValueError "a and b must be same length"     numerator = sum(tup[0] * tup[1] for tup in izip(ab))     denoma = sum(avalue ** 2 for avalue in a)     denomb = sum(bvalue ** 2 for bvalue in b)     result = 1 - numerator / (sqrt(denoma)*sqrt(denomb))     return result  sum() for 
Literal("if") Keyword("if") Literal("void") "ifactor" nums alphas alphanums number = nums identifier = alphas + OneOrMore(alphanums)  number = Word(nums) identifier = Word(alphas alphanums)  Combine Group Combine Combine realnum = Combine(Word(nums) + "." + Word(nums))  Combine "3.14" ['3' '.' '14'] Combine '3.14' 3.14 Combine 'The answer is 3. 10 is too much.' "3. 10" "int x;" "int x ;" Word Literal Combine '' term = Forward() statement = Forward()  &lt;&lt; () term &lt;&lt; (... term definition ...) statement &lt;&lt; (... statement definition ...)  
functionList[functionListIndex] newThread = threading.Thread(target=lambda func=functionList[functionListIndex]: self._run_parallel_job(func))  args newThread = threading.Thread(target=self._run_parallel_job args=(functionList[functionListIndex]))  
@login_required def user_profile(request):     success = False     user = User.objects.get(pk=request.user.id)     if request.method == 'POST':         upform = UserProfileForm(request.POST instance=user.get_profile())         if upform.is_valid():             up = upform.save(commit=False)             up.user = request.user             up.save()             success = True     else:         upform = UserProfileForm(instance=user.get_profile())             return render_to_response('profile/index.html'         locals() context_instance=RequestContext(request))  
__contains__ 
class SomeClass(object):     def __init__(self):         def __(arg):             self.bar(arg)         self.foo = __     def foo(self arg):         print "foo" arg     def bar(self arg):         print "bar" arg  SomeClass().foo("thing") # prints "bar thing"  __new__ __init__ self new import functools  class SomeClass(object):     def __init__(self):         def __(self arg):             self.bar(arg)         self.foo = functools.partial(__ self)     def foo(self arg):         print "foo" arg     def bar(self arg):         print "bar" arg  SomeClass().foo("thing") # prints "bar thing"  
import b b b/__init__.py b.c b.c.d import b import os os.path.join import this 
soup errp = soup.find(attrs={'id': 'ErrorPanel'}) if errp is not None:   print 'Error:' errp.string  
fp = urllib2.urlopen("http://www.example.com/index.cfm")  response = "" while 1:     data = fp.read()     if not data:         # This might need to be    if data == "":   -- can't remember         break     response += data  print response  .read() urllib 
from Foundation import * NSProcessInfo.processInfo().systemUptime() * 1e9  from Quartz.QuartzCore import * CACurrentMediaTime() * 1e9  
() x if p else y 
__getattr__ __setattr__ class Foo(models.Model):     name = models.CharField(unique=True)     inherit = models.ForeignKey('self' related_name='children' null=True blank=True)      _attribute1 = models.FloatField(null=True blank=True)     _attribute2 = models.FloatField(null=True blank=True)     _attribute3 = models.BooleanField(null=True blank=True)     _attribute4 = models.CharField(null=True blank=True)      def __getattr__(self name):         if self.inherit and hasattr(self.inherit name):             return getattr(self.inherit name None)         elif hasattr(self '_'+name):             return getattr(self '_'+name None)         return super(Foo self).__getattr__(name)      def __setattr__(self name value):         if self.inherit and hasattr(self.inherit name):             return setattr(self.inherit name value)         elif hasattr(self '_'+name):             return self.__dict__[name] = value         return super(Foo self).__setattr__(name value)  
&gt;&gt;&gt; 1e308 1e+308 &gt;&gt;&gt; 1e309 inf  &gt;&gt;&gt; json.dumps(1e308allow_nan=False) '1e+308' &gt;&gt;&gt; json.dumps(1e309allow_nan=False) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "/usr/lib/python2.6/json/__init__.py" line 237 in dumps     **kw).encode(obj)   File "/usr/lib/python2.6/json/encoder.py" line 367 in encode     chunks = list(self.iterencode(o))   File "/usr/lib/python2.6/json/encoder.py" line 304 in _iterencode     yield floatstr(o self.allow_nan)   File "/usr/lib/python2.6/json/encoder.py" line 47 in floatstr     raise ValueError(msg) ValueError: Out of range float values are not JSON compliant: inf &gt;&gt;&gt;   &gt;&gt;&gt; from decimal import Decimal &gt;&gt;&gt; Decimal('1e900')/10 Decimal("1E+899")  &gt;&gt;&gt; a=1e308 &gt;&gt;&gt; a+a inf  
.findall() soup.findAll(lambda tag: tag.name in ['script' 'form'] or tag['id'] == "footer")  tags = soup.findAll(['script' 'form']) tags.extend(soup.findAll(id="footer"))  for tag in tags:     tag.extract()  id for tag in soup.findAll(lambda tag: tag.has_key('id') and                                     tag['id'] in ['footer' 'content' 'links']):     tag.extract()  id for tag in soup.findAll(id=lambda value: value in ['footer' 'content' 'links']):     tag.extract()  
def __html__(self):     return unicode(self)  
&gt;&gt;&gt; class A(object): ...   class B(object): ...     def __init__(self): ...       super(A.B self).__init__() ...   def getB(self): ...     return A.B() ...  &gt;&gt;&gt; A().getB() &lt;__main__.B object at 0x100496410&gt;  
urllib 
Enumeration TOKEN EnumerationType &gt;&gt;&gt; isinstance(Enumeration EnumerationType) True &gt;&gt;&gt; isinstance(TOKEN EnumerationType) True  repr(TOKEN) type(TOKEN).__repr__(TOKEN) EnumerationType.__repr__(TOKEN) 
def send(self):     return buffer(self)[:]  def receiveSome(self bytes):     fit = min(len(bytes) ctypes.sizeof(self))     ctypes.memmove(ctypes.addressof(self) bytes fit)  send pack receiveSome pack_into memmove(addressof(y) buffer(x)[:] sizeof(y)) x y x 
file.write() \n out.write("\n")     for docwc in wordcounts.items():          out.write(doc)             #this works fine no linebreak         for word in wordlist:              if word in wc: out.write("\t%d" % wc[word]) #linebreaks appear             else: out.write("\t0")                      #after each of these             out.write("\n") #&lt;--- NEWLINE ON EACH ITERATION!  out.write("\n") 
json def foo():     print 'I am foo!' def bar():     pass def baz():     pass  funcs = {'func_a':foo 'func_b':bar 'func_c':baz}  funcs['func_a']()  eval 
DELIMITER $$ CREATE PROCEDURE `proc_name`() BEGIN   DECLARE done INT DEFAULT 0;   DECLARE a_id BIGINT UNSIGNED;   DECLARE b_id BIGINT UNSIGNED;   DECLARE x_count INT;    -- something like the following   DECLARE cur1 CURSOR FOR SELECT t_a.id t_b.id FROM t_a t_b WHERE t_a.email = t_b.email;   DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;    SELECT COUNT(*) INTO x_count FROM t_a t_b WHERE t_a.email = t_b.email;    IF(x_count &gt; &lt;some_min_value&gt;) THEN      OPEN cur1;      REPEAT       FETCH cur1 INTO a_id b_id;       IF NOT done THEN          -- do something here like update rows remove rows etc.         -- a_id and b_id hold the two id values for the two tables which         -- I assume to be primary keys        END IF;     UNTIL done END REPEAT;      CLOSE cur1;    END IF; END $$  
y2Axis.labels.dx = 10  
os.kill ps $ ls /proc/8502/task/ 8502  8503  8504  8505  8506  8507  8511  8512  8514  8659  $ ps aux | grep [8]503 $  ps $ ps -eLf | grep [8]503 ncw       8502     1  8503  0   10 10:00 ?        00:00:00 /usr/lib/virtualbox/VBoxSVC --automate  [8]503 grep $ python Python 2.6.4 (r264:75706 Nov  2 2009 14:44:17) [GCC 4.4.1] on linux2 Type "help" "copyright" "credits" or "license" for more information. Loaded customisations from '/home/ncw/.pystartup' &gt;&gt;&gt; import os &gt;&gt;&gt; os.kill(8503 0) &gt;&gt;&gt;  ls /proc/*/task/5555  ps -eLf | grep [5]555  
somefield = models.CharField(     widget=forms.TextInput(attrs={'readonly': 'readonly'}) )  somefield = forms.CharField(     widget=forms.TextInput(attrs={'readonly': 'readonly'}) )  
imap.gmail.com imap4.gmail.com import imaplib M = imaplib.IMAP4_SSL("imap.gmail.com" 993)  
imp models.admin.py import imp with open('models.admin.py' 'rb') as fp:     models_admin = imp.load_module(         'models_admin' fp 'models.admin.py'         ('.py' 'rb' imp.PY_SOURCE)     )  imp.find_module imp.load_module 
urls urls.urlpatterns import urls urls.urlpatterns  urls.urlpatterns RegexURLPattern RegexURLResolver RegexURLPattern p p.regex.pattern  RegexURLResolver q q.regex.pattern  q.url_patterns  RegexURLResolver RegexURLPattern 
from numpy import dot def d4(v1 v2):      check(v1 v2)     return dot(v1 v2)  d0 elapsed:  12.1977242918 d1 elapsed:  13.885232341 d2 elapsed:  13.7929552499 d3 elapsed:  11.0952246724  d0 elapsed:  0.965477735299 d1 elapsed:  12.5354792299 d2 elapsed:  12.9748163524 d3 elapsed:  9.78255448667  from numpy import array v3 = [array(vec) for vec in v1] v4 = [array(vec) for vec in v2]  # then t4 = timeit.Timer("d4(v3v4)""from dot_product import d4v3v4")  check(v1 v2) v3 = array(v1) v4 = array(v2)  d4 elapsed:  3.22535741274  d4 elapsed:  2.09182619579  
descriptor_pb2.py protoc protoc descriptor.proto --python_out=gen/  gen/ sys.path.append('../gen') from descriptor_pb2 import FileDescriptorSet  ../gen/descriptor_pb2.py 
__chatty_for__ __metaclass__ __dict__ __metaclass__ # foo.py class Foo: pass  # bar.py class Bar: pass  # baaz.py class Baaz: pass  # chattyimport.py import imp import sys import types  class ChattyType(type):     def __init__(cls name bases dct):         print "Class init" name         super(ChattyType cls).__init__(name bases dct)  class ChattyImporter(object):      __chatty_for__ = []      def __init__(self path_entry):         pass      def find_module(self fullname path=None):         if fullname not in self.__chatty_for__:             return None         try:             if path is None:                 self.find_results = imp.find_module(fullname)             else:                 self.find_results = imp.find_module(fullname path)         except ImportError:             return None         (ffn(sufmodetyp)) = self.find_results         if typ == imp.PY_SOURCE:             return self         return None      def load_module(self fullname):         #print '%s loading module %s' % (type(self).__name__ fullname)         (ffn(sufmodetyp)) = self.find_results         data = f.read()         if fullname in sys.modules:             module = sys.modules[fullname]         else:             sys.modules[fullname] = module = types.ModuleType(fullname)          module.__metaclass__ = ChattyType         module.__file__ = fn         module.__name__ = fullname         codeobj = compile(data fn 'exec')         exec codeobj in module.__dict__         return module  class ChattyImportSomeModules(ChattyImporter):     __chatty_for__ = 'foo bar'.split()  sys.meta_path.append(ChattyImportSomeModules(''))  import foo # prints 'Class init Foo' import bar # prints 'Class init Bar' import baaz  
Person._meta.get_field('name').max_length _meta 
(rho^(1/3) theta/3) rho^(1/3) theta/3 rho^(1/3) * cos(theta/3) theta = arccos(r/rho) s_real = rho**(1./3.) * cos( theta/3) t_real = rho**(1./3.) * cos(-theta/3)  s_real = t_real cos 
import matplotlib.mlab  data=np.array(     [('Aaron''Digger'1)      ('Bill''Planter'2)      ('Carl''Waterer'3)      ('Darlene''Planter'3)      ('Earl''Digger'7)]     dtype=[('name' np.str_8) ('job' np.str_8) ('income' np.uint32)])  result=matplotlib.mlab.rec_groupby(data ('job') (('income'np.mean'avg_income')))  ('Digger' 4.0) ('Planter' 2.5) ('Waterer' 3.0)  matplotlib.mlab.rec_groupby print(result.dtype) # [('job' '|S7') ('avg_income' '&lt;f8')]  
import collections  data = [   [1 2 3 4 5]   [1 9 3 4 5]   [1 10 8 4 5]   [1 12 13 7 5]   [1 14 13 13 6] ]  def sorted_by_count(lists):   counts = collections.defaultdict(int)   for L in lists:     for n in L:       counts[n] += 1    return [num for num count in           sorted(counts.items()                  key=lambda k_v: (k_v[1] k_v[0])                  reverse=True)]  print sorted_by_count(data)  def freq_sorted(iterable key=None reverse=False include_freq=False):   """Return a list of items from iterable sorted by frequency.    If include_freq (item freq) is returned instead of item.    key(item) must be hashable but items need not be.    *Higher* frequencies are returned first.  Within the same frequency group   items are ordered according to key(item).   """   if key is None:     key = lambda x: x    key_counts = collections.defaultdict(int)   items = {}   for n in iterable:     k = key(n)     key_counts[k] += 1     items.setdefault(k n)    if include_freq:     def get_item(k c):       return items[k] c   else:     def get_item(k c):       return items[k]    return [get_item(k c) for k c in           sorted(key_counts.items()                  key=lambda kc: (-kc[1] kc[0])                  reverse=reverse)]  &gt;&gt;&gt; import itertools &gt;&gt;&gt; print freq_sorted(itertools.chain.from_iterable(data)) [1 5 4 13 3 2 6 7 8 9 10 12 14] &gt;&gt;&gt; print freq_sorted(itertools.chain.from_iterable(data) include_freq=True) # (slightly reformatted) [(1 5)  (5 4)  (4 3) (13 3)  (3 2)  (2 1) (6 1) (7 1) (8 1) (9 1) (10 1) (12 1) (14 1)]  
department job_classification class department(models.Model):     name = Models.CharField(max_length=100)     number = Models.IntegerField  department = ['HR' 'Finance'] department_number = [12 5] name nickname last_name ForeignKey Person 
br.find_control(name="E").value = ["0"]  form.find_control(name="E" kind="list").value = ["0"]      br["E"] = ["0"]  
waitpid() 
LANG LC_CTYPE LC_ALL UTF-8 /usr/bin/python $ unset LANG $ env | grep LC_ $ export LC_CTYPE="UTF-8" $ /usr/bin/python  # Apple-supplied python Python 2.6.1 (r261:67515 Jul  7 2009 23:51:51)  [GCC 4.2.1 (Apple Inc. build 5646)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import locale ; locale.getdefaultlocale() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/locale.py" line 459 in getdefaultlocale     return _parse_localename(localename)   File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/locale.py" line 391 in _parse_localename     raise ValueError 'unknown locale: %s' % localename ValueError: unknown locale: UTF-8 ^D $ /usr/local/bin/python2.6   # python.org python Python 2.6.4 (r264:75821M Oct 27 2009 19:48:32)  [GCC 4.0.1 (Apple Inc. build 5493)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import locale ; locale.getdefaultlocale() (None 'mac-roman') &gt;&gt;&gt;   bzr locale.getpreferredencoding() locale.Error _locale.so _locale.so lib/python2.5/lib-dynload 755 /opt/local/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-dynload/  
lines = open('wordprob.txt''r').readlines() words = open('StdWord.txt''r').readlines() for iline in enumerate(lines):         v = [eval(s) for s in line.split()]         if v[0] &gt; v[1]:                 print words[i].strip()  
from os import stat from pwd import getpwuid  def find_owner(filename):     return getpwuid(stat(filename).st_uid).pw_name  
byteArray.writeUTF( event.result.toString() ); byteArray.uncompress() bytes.uncompress(CompressionAlgorithm.DEFLATE); bytes.uncompress(CompressionAlgorithm.ZLIB); writeUTFBytes writeUTF inflate() writeUTF writeUTFBytes repr(xml_doc) repr(zlib_compress_output) repr() event.result event.result.toString() writeUTF*() 
init&lt;void*&gt; init&lt;void*&gt; #include &lt;iostream&gt; #include &lt;string&gt;  #include &lt;boost/python.hpp&gt;   struct A { #define BODY { std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; '\n'; }     A() BODY     A(long) BODY     A(std::string const&amp;) BODY     A(void* p) BODY #undef BODY };  BOOST_PYTHON_MODULE(ex) { using namespace boost::python; class_&lt;A&gt;("A")     .def(init&lt;long&gt;())     .def(init&lt;std::string const&amp;&gt;())     .def(init&lt;void*&gt;()) ; }  init&lt;void*&gt; 
["http://"+link if link[0:4]=='www.' else link for link in links]  [link[0:4]=='www.' and "http://"+link or link for link in links]  ("http://"+link if link[0:4]=='www.' else link) (link[0:4]=='www.' and "http://"+link or link) 
collections.namedtuple collections.namedtuple(typename field_names[ verbose]) __repr__() &gt;&gt;&gt; import collections &gt;&gt;&gt; mytup = collections.namedtuple('mytup' ['tag''name' 'values']) &gt;&gt;&gt; e1 = mytup('tag1''great'[1'two'3]) &gt;&gt;&gt; e1 mytup(tag='tag1' name='great' values=[1 'two' 3]) &gt;&gt;&gt; e1.values [1 'two' 3] &gt;&gt;&gt;   mytup &gt;&gt;&gt; tlist = [mytup(&quot;foo&quot; &quot;dog&quot; [1234])     mytup(&quot;bar&quot;&quot;cat&quot; [456789]) mytup(&quot;moo&quot;&quot;cow&quot; [4578913465])] &gt;&gt;&gt; tlist [mytup(tag='foo' name='dog' values=[1 2 3 4]) mytup(tag='bar' name='cat' values=[4 5 6 7 8 9]) mytup(tag='moo' name='cow' values=[4 5 7 8 9 1 3 4 65])] &gt;&gt;&gt; [t for t in tlist if t.tag == 'bar'] [mytup(tag='bar' name='cat' values=[4 5 6 7 8 9])] &gt;&gt;&gt;   Namedtuple dict 
.encode("utf-8") fileObj = codecs.open( "someFile" "r" "utf-8" )  data=fileOjb.read()  open("newfile""w").write(data.encode("utf-8"))  
&gt;&gt;&gt; import datetime &gt;&gt;&gt; now = datetime.datetime.now() &gt;&gt;&gt; today8am = now.replace(hour=8 minute=0 second=0 microsecond=0) &gt;&gt;&gt; now &lt; today8am True &gt;&gt;&gt; now == today8am False &gt;&gt;&gt; now &gt; today8am False  
Account Address for a in Account.objects.all():     a.default_address # this is the address that SQL brought in via a "join".  
global import sys  var = None  def set_var(v):     sys.modules[__name__].var = v  def get_var():     return var  
\p{Armenian} \p{Ll} \p{Zs} 
class Song:     """The class to store the details of each song"""     attsToStore=('Name' 'Artist' 'Album' 'Genre' 'Location')     def __init__(self):         for att in self.attsToStore:             setattr(self att.lower() None)     def setDetail(self key val):         if key in self.attsToStore:             setattr(self key.lower() val)  
*args **kwds __build_class__   class C(A B metaclass=M other=42 *more_bases *more_kwds):     ...    C = __build_class__(&lt;func&gt; 'C' A B metaclass=M other=42 *more_bases *more_kwds)  &lt;func&gt; 
cleaned_data if f.is_valid():     for group in f.cleaned_data['group']:         calentry.groups.add(group)  
import time socket  class ControllableSocket:     def __init__(self latency bandwidth):         self._latency = latency         self._bandwidth = bandwidth         self._bytesSent = 0         self._timeCreated = time.time()         self._socket = socket.socket()      def send(self bytes):         now = time.time()         connectionDuration = now - self._timeCreated         self._bytesSent += len(bytes)         # How long should it have taken to send how many bytes we've sent with our         # given bandwidth limitation?         requiredDuration = self._bytesSent / self._bandwidth         time.sleep(max(requiredDuration - connectionDuration self._latency))         return self._socket.send(bytes)  
import serial try:     from cStringIO import StringIO except:     from StringIO import StringIO from xmodem import XMODEM CRC from time import sleep  def readUntil(char = None):     def serialPortReader():         while True:             tmp = port.read(1)             if not tmp or (char and char == tmp):                 break             yield tmp     return ''.join(serialPortReader())  def getc(size timeout=1):     return port.read(size)  def putc(data timeout=1):     port.write(data)     sleep(0.001) # give device time to send ACK   port = serial.Serial(port='COM5'parity=serial.PARITY_NONEbytesize=serial.EIGHTBITSstopbits=serial.STOPBITS_ONEtimeout=0xonxoff=0rtscts=0dsrdtr=0baudrate=115200) port.write("command that loads data via xmodem\r\n") sleep(0.02) # give device time to handle command readUntil(CRC) buffer = StringIO('data to send') XMODEM(getc putc).send(buffer quiet = 1) buffer.close() readUntil()  
wProductType 
- url: /my_app/media/   static_dir: my_app/media  &lt;img src="/my_app/media/a.jpg" /&gt;  
import BeautifulSoup  soup = BeautifulSoup.BeautifulSoup('''&lt;table&gt;   &lt;tr&gt;     &lt;td&gt;Names&lt;/td&gt;     &lt;td&gt;Fred John Barry &lt;a href="http://www.example.com/"&gt;Roger&lt;/a&gt; James&lt;/td&gt;   &lt;/tr&gt; &lt;/table&gt;''')  result = [] for tag in soup.table.findAll('td')[1]:   if isinstance(tag BeautifulSoup.NavigableString):     for name in tag.string.split(''):       name = name.strip()       if name:         result.append({ 'name': name })   else:     result.append({ 'name': tag.string.strip() 'url': tag["href"] })  print result  
gboolean drawCallback (GLuint texture GLuint width GLuint height gpointer data)  
Thing Thyng from Thing import Thyng  .py import Thing # ... def fn():     Thing.Thyng()  fn() __init__.py __init__.py 
assert not isinstance(lst basestring)  list tuple 
row_key col_key (year week) import sys  class CrossTab(object):      def __init__(         self         missing=0 # what to return for an empty cell. Alternatives: '' 0.0 None 'NULL'         ):         self.missing = missing         self.col_key_set = set()         self.cell_dict = {}         self.headings_OK = False      def add_item(self row_key col_key value):         self.col_key_set.add(col_key)         try:             self.cell_dict[row_key][col_key] += value         except KeyError:             try:                 self.cell_dict[row_key][col_key] = value             except KeyError:                 self.cell_dict[row_key] = {col_key: value}      def _process_headings(self):         if self.headings_OK:             return         self.row_headings = list(sorted(self.cell_dict.iterkeys()))         self.col_headings = list(sorted(self.col_key_set))         self.headings_OK = True      def get_col_headings(self):         self._process_headings()         return self.col_headings      def generate_row_info(self):         self._process_headings()         for row_key in self.row_headings:             row_dict = self.cell_dict[row_key]             row_vals = [row_dict.get(col_key self.missing) for col_key in self.col_headings]             yield row_key row_vals      def dump(self f=None header=None footer='' ):         if f is None:             f = sys.stdout         alist = self.__dict__.items()         alist.sort()         if header is not None:             print &gt;&gt; f header         for attr value in alist:             print &gt;&gt; f "%s: %r" % (attr value)         if footer is not None:             print &gt;&gt; f footer  if __name__ == "__main__":      data = [         ['Rob' 'Morn' 240]         ['Rob' 'Aft'  300]         ['Joe' 'Morn'  70]         ['Joe' 'Aft'   80]         ['Jill' 'Morn' 100]         ['Jill' 'Aft'  150]         ['Rob' 'Aft'   40]         ['Rob' 'aft'    5]         ['Dozy' 'Aft'   1]         # Dozy doesn't show up till lunch-time         ['Nemo' 'never' -1]         ]     NAME TIME AMOUNT = range(3)     xlate_time = {'morn': "AM" "aft": "PM"}      print     ctab = CrossTab(missing=None )     # ctab.dump(header='=== after init ===')     for s in data:         ctab.add_item(             row_key=s[NAME]             col_key= xlate_time.get(s[TIME].lower() "XXXX")             value=s[AMOUNT])         # ctab.dump(header='=== after add_item ===')     print ctab.get_col_headings()     # ctab.dump(header='=== after get_col_headings ===')     for x in ctab.generate_row_info():         print x  ['AM' 'PM' 'XXXX'] ('Dozy' [None 1 None]) ('Jill' [100 150 None]) ('Joe' [70 80 None]) ('Nemo' [None None -1]) ('Rob' [240 345 None])  
&gt;&gt;&gt; b'\x80abc'.decode("utf-8" "strict") Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in ? UnicodeDecodeError: 'utf8' codec can't decode byte 0x80 in position 0:                     unexpected code byte &gt;&gt;&gt; b'\x80abc'.decode("utf-8" "replace") '\ufffdabc' &gt;&gt;&gt; b'\x80abc'.decode("utf-8" "ignore") 'abc'  &gt;&gt;&gt; u = chr(40960) + 'abcd' + chr(1972) &gt;&gt;&gt; u.encode('utf-8') b'\xea\x80\x80abcd\xde\xb4' &gt;&gt;&gt; u.encode('ascii') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in ? UnicodeEncodeError: 'ascii' codec can't encode character '\ua000' in                     position 0: ordinal not in range(128) &gt;&gt;&gt; u.encode('ascii' 'ignore') b'abcd' &gt;&gt;&gt; u.encode('ascii' 'replace') b'?abcd?' &gt;&gt;&gt; u.encode('ascii' 'xmlcharrefreplace') b'&amp;#40960;abcd&amp;#1972;'  
None result try/except result None if &gt;&gt;&gt; import timeit &gt;&gt;&gt; timeit.timeit(setup="a=1;b=1" stmt="a/b") # no error checking 0.06379691968322732 &gt;&gt;&gt; timeit.timeit(setup="a=1;b=1" stmt="try:\n a/b\nexcept ZeroDivisionError:\n pass") 0.0829463709378615 &gt;&gt;&gt; timeit.timeit(setup="a=1;b=0" stmt="try:\n a/b\nexcept ZeroDivisionError:\n pass") 0.5070195056614466 &gt;&gt;&gt; timeit.timeit(setup="a=1;b=1" stmt="if b!=0:\n a/b") 0.11940114974277094 &gt;&gt;&gt; timeit.timeit(setup="a=1;b=0" stmt="if b!=0:\n a/b") 0.051202772912802175  if try/except Exception try/except Exception try except 
HttpResponseRedirect('/accounts/login')  usergroup except except: except Exception: if if not request.user.is_authenticated():     return HttpResponseRedirect('/accounts/login')  [0] groups= request.user.groups.all() if len(groups)==0:     return HttpResponseRedirect('/accounts/login') usergroup= groups[0].name  
from_user from_user to_user from_user to_user 
pow(u1.song.score - u2.song.score 2) sum_of_powers 1 / 1 + (sqrt(sum_of_powers)) aSong 2 4 (24) A B y = Ax + B A B 
pdftotext file.pdf -  output = Popen(['pdftotext' '/home/aal/Desktop/lkn_pdf/appa.pdf' '-'] stdout=PIPE).communicate()[0]  
'^blog/0*(?P&lt;object_id&gt;\d+)/detail$'  RewriteRule ^blog-0*([0-9]+) http://example.com/blog/$1 [R=301]  
class Skill(models.Model):     name = models.CharField()     cost = models.PositiveIntegerField()     effects = models.ManyToManyField(Effect)  class Effect(models.Model):     description = models.CharField()     action = models.CharField()      # Each Django model has a ContentType.  So you could store the contenttypes of     # the Player Enemy and Breakable model for example     objects_usable_on = models.ManyToManyField(ContentType)      def do_effect(self **kwargs):         // self.action contains the python module to execute         // for example self.action = 'effects.spells.frost_damage'         // So when called it would look like this:         // Effect.do_effect(damage=50 target=target)         // 'damage=50' gets passed to actions.spells.frost_damage as         // a keyword argument              action = __import__(self.action)         action(**kwargs)  def frost_damage(**kwargs):     if 'damage' in kwargs:         target.life -= kwargs['damage']          if target.left &lt;= 0:             # etc. etc.  
arange range numpy.array arguments = (.1 6.3 .1) numpy.arange(*arguments)  
div.resttext p {     /* all the styling you want... */ }  &lt;div class='resttext'&gt; &lt;p&gt;Blah&lt;/p&gt; &lt;p&gt;Bloo&lt;/p&gt; &lt;/div&gt;  selectorfunction Hyphenator.config({     selectorfunction: function () {         /* Use jQuery to find all the REST p tags. */         return $('div.resttext p');         }     }); Hyphenator.run();  
pyreadlineconfig.ini PYTHONSTARTUPFILE pyreadlineconfig.ini set_mode(&quot;vi&quot;) history_filename(&quot;~/.pythonhistory&quot;) history_length(200)  ESC K 
0o10 
new_dict = {} for k d in old_dict.iteritems():     if d['check'] == 0 and d['status'] == 0:         new_dict[k] = d  
partition(' ') "Sico87 is an awful python developer".partition(' ') ["Sico87"" ""is an awful python developer"] "Sico87 is an awful python developer".partition(' ')[0] "Sico87" split(' '1) 
wget --tries=0 --retry-connrefused $URL -O - &gt;&gt; output.txt -O --output-document - command &gt; file command file command &gt;&gt; file command file 
F: D -&gt; R def x(foo):     if 'bar' in foo:         return (foo 'bar')      raise Exception( "oh dear me." )  
{{ }} class Product(models.Model):     ...     def get_first_name(self):         if self.name:            return self.name.partition(' ')[0]          return None  {{ product.get_first_name }} 
__new__ __init__ __new__ __init__ 
class User(object): ...  class User: ...  
PKI test_rsa.py .pem 
&gt;&gt;&gt; import urllib2 &gt;&gt;&gt; urllib2._opener.handlers[1].set_http_debuglevel(100) &gt;&gt;&gt; urllib2.urlopen('http://mit.edu').read()[:10] connect: (mit.edu 80) send: 'GET / HTTP/1.1  
i i i = 13 print b[3]()  makeFun i i 
#!/bin/bash if (($# != 1)) || ! [[ -d "$1" ]]; then     echo "Usage: $0 /path/to/directory"     exit 1 fi  is_hash() {  md5=${1##*.} # strip prefix  [[ "$md5" == *[^[:xdigit:]]* || ${#md5} -lt 32 ]] &amp;&amp; echo "$1" || echo "${1%.*}" }  while IFS= read -r -d $'\0' file; do     read hash junk &lt; &lt;(md5sum "$file")     basename="${file##*/}"     dirname="${file%/*}"     pre_ext="${basename%.*}"     ext="${basename:${#pre_ext}}"      # File already hashed?     pre_ext=$(is_hash "$pre_ext")     ext=$(is_hash "$ext")      mv "$file" "${dirname}/${pre_ext}.${hash}${ext}" 2&gt; /dev/null  done &lt; &lt;(find "$1" -path "*/.*" -prune -o \( -type f -print0 \))  
url  &gt;&gt;&gt; tup = (url first middle last rank words city school year) &gt;&gt;&gt; tup ('http://www.examplefirm.com/jang' 'Joe' 'E.' 'Ang' 'partner'  ['privatization mergers' 'media &amp;amp; technology'] 'New York'  'University of Chicago Law School' '1985')  
import unittest import helpspot  class TestHelpSpot(unittest.TestCase):     "A few simple tests for HelpSpot"      def __init__(self testname path user pword):         super(TestHelpSpot self).__init__(testname)         self.hs = helpspot.HelpSpot(path user pword)      def test_version(self):         a = self.hs.version()         b = self.hs.private_version()         self.assertEqual(a b)      def test_get_with_param(self):         a = self.hs.filter_get(xFilter=1)      def test_unknown_method(self):         self.assertRaises(helpspot.HelpSpotError self.hs.private_wuggienorple)  if __name__ == '__main__':     import sys     user = sys.argv[1]     pword = sys.argv[2]     path = sys.argv[3]      test_loader = unittest.TestLoader()     test_names = test_loader.getTestCaseNames(TestHelpSpot)      suite = unittest.TestSuite()     for test_name in test_names:         suite.addTest(TestHelpSpot(test_name path user pword))      result = unittest.TextTestRunner().run(suite)     sys.exit(not result.wasSuccessful())  
Paragraphs Paragraphs KeepTogether reportDocContent.append(KeepTogether(Paragraph(commentParagraph style=commentParagraphStyle)))  
django.core.urlresolvers.reverse &gt;&gt;&gt; from django.core.urlresolvers import reverse &gt;&gt;&gt; reverse('products.views.filter_by_led')  
string.maketrans string.translate string.maketrans utf-8 utf-8 å a string.maketrans len(str(argument)) # -*- coding: utf-8 -*-  intab =  u"ÀÁÂÃÄÅàáâãäåÒÓÔÕÖØòóôõöøÈÉÊËèéêëÇçÌÍÎÏìíîïÙÚÛÜùúûüÿÑñ" outtab = u"aaaaaaaaaaaaooooooooooooeeeeeeeecciiiiiiiiuuuuuuuuynn" trantab = dict((ord(a) b) for a b in zip(intab outtab)) translated = intab.translate(trantab) translated == outtab # True  
echo "hello - world" | ./mapper.py  | sort | ./reducer.py  if word =='': continue for c in string.punctuation:            word= word.replace(c'')  word 
prefix_with() t = Table(     't' metadata     Column('id' Integer primary_key=True)     # ...     prefixes=['TEMPORARY'] )  
#include &lt;iostream&gt; #include &lt;map&gt;  typedef std::map&lt;std::pair&lt;int int&gt; int&gt; Dict; typedef Dict::const_iterator It;  int main() {    Dict d;     d[std::make_pair(0 0)] = 0;    d[std::make_pair(1 2)] = 1;    d[std::make_pair(2 1)] = 2;    d[std::make_pair(2 3)] = 3;    d[std::make_pair(3 2)] = 4;     for (It it(d.begin()); it != d.end(); ++it)    {       int i(it-&gt;first.first);       int j(it-&gt;first.second);       std::cout &lt;&lt;it-&gt;second &lt;&lt;' '                 &lt;&lt;d[std::make_pair(j i)] &lt;&lt;'\n';    } }  
show() savefig('output.jpg') show()  savefig() show() 
urllib.request.urlopen('http://www.python.org/')  from six.moves import urllib urllib.request.urlopen('http://www.python.org')  
start_here from django.template import RequestContext  def start_here(request):     return render_to_response("profile.html" {}         context_instance=RequestContext(request))  user {% if auth %}  {% if user.is_authenticated %}  
continue break pass break continue 
row = OpenThisLink + titleTag + JD try:     row = OpenThisLink + titleTag + JD     csvwriter.writerow([row]) except (UnicodeEncodeError UnicodeDecodeError):     print "Caught unicode error"  row = OpenThisLink + titleTag + JD titleTag writerow() writerow() &gt;&gt;&gt; titleTag = "hello Gilici?ski" &gt;&gt;&gt; titleTag 'hello Gilici\xc5\x84ski' &gt;&gt;&gt; type(titleTag) &lt;type 'str'&gt; &gt;&gt;&gt; &gt;&gt;&gt; titleTag = titleTag.decode('utf8') &gt;&gt;&gt; titleTag u'hello Gilici\u0144ski' &gt;&gt;&gt; type(titleTag) &lt;type 'unicode'&gt; &gt;&gt;&gt; &gt;&gt;&gt; csvwriter.writerow([titleTag]) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in ? UnicodeEncodeError: 'ascii' codec can't encode character u'\u0144' in position 12: ordinal not in range(128) &gt;&gt;&gt; &gt;&gt;&gt; # but this will work... &gt;&gt;&gt; csvwriter.writerow([titleTag.encode('utf8')])  pyshell 
printf "$(python read_one.py)" | xvkbd -file -  
pylab.quiver(XY(111)(111) scale=2**.5 units='y')  
fn(*args)  
import urllib.request from tkinter import * from tkinter.tix import *  root = Tk() root.iconbitmap(default='icon.ico') root.wm_title('Got Skills\' Skill Tracker') frame = Frame(width="500"height="500") frame.pack() swin = ScrolledWindow(frame width=500 height=500) swin.pack() win = swin.window   def show():   name = "zezima"   page = urllib.request.urlopen('http://hiscore.runescape.com/index_lite.ws?player=' + name)   page = page.readlines()    skills = []   for line in page:     skills.append([line.decode("utf-8").replace("\n" "").split("")])    skills = skills[0:25]    for item in skills:     toPrint = item[0][0]"-"item[0][1]"-"item[0][1]     w = Message(win text=' '.join(toPrint) width=500)     w.pack()   menu = Menu(root) root.config(menu=menu)  filemenu = Menu(menu) menu.add_cascade(label="Commands" menu=filemenu) filemenu.add_command(label="Show Skills" command=show)   root.mainloop()  
from django.db import connection tables = connection.introspection.table_names() seen_models = connection.introspection.installed_models(tables)  from django.apps import apps  from django.contrib import admin  from django.contrib.admin.sites import AlreadyRegistered   app_models = apps.get_app_config('my_app').get_models()  [ m._meta.db_table for c in apps.get_app_configs() for m in c.get_models() ]  
source 
import nautilus  class ExampleMenuProvider(nautilus.MenuProvider):     def __init__(self):         pass      def get_file_items(self window files):         submenu = nautilus.Menu()          item = nautilus.MenuItem('Nautilus::sbi''Nau-T''image')         item.set_submenu(submenu)          item_two = nautilus.MenuItem('Nautilus::s''www''image')         submenu.append_item(item_two)          return item  
.read Browswer.response read response = br.response() response.read()  dir(obj) obj 
from django.utils.encoding import smart_str ...   response['Content-Disposition'] = 'attachment; filename=%s' % smart_str(filename)  
from __future__ import absolute_import x sys.modules['x'] $ cat a/foo.py print __file__; import sys; sys.path.insert(0 "b"); del sys.modules["foo"]; import foo $ cat b/foo.py print __file__ $ python2.5 -c'import sys; sys.path.insert(0 "a"); import foo' a/foo.py b/foo.py  sys.modules["foo"] sys.modules["foo"] 
from distutils.core import setup Extension import py2exe import matplotlib import os import numpy  setup(console=['cpa.py']       options={         'py2exe': {             'packages' : ['matplotlib' 'pytz' 'MySQLdb' 'pysqlite2']             'includes' : ['PILfix' 'version']             "excludes" : ['_gtkagg' '_tkagg'                           "Tkconstants""Tkinter""tcl"]             "dll_excludes": ['libgdk-win32-2.0-0.dll'                              'libgobject-2.0-0.dll'                               'libgdk_pixbuf-2.0-0.dll'                              'tcl84.dll' 'tk84.dll']             }         }       data_files=matplotlib.get_py2exe_datafiles()       ext_modules = [Extension('_classifier'                                sources = ['_classifier.c']                                include_dirs=[numpy.get_include()]                                libraries = ['sqlite3dll'])] )  
tre.write('temp.xml' encoding='utf-8')  lxml 
&gt;&gt;&gt; class A: x = 'a' ...  &gt;&gt;&gt; class B(A): pass ...  &gt;&gt;&gt; class C(A): x = 'c' ...  &gt;&gt;&gt; class D(B C): pass ...  &gt;&gt;&gt; D.x 'a'  &gt;&gt;&gt; class A(object): x = 'a' ...  &gt;&gt;&gt; class B(A): pass ...  &gt;&gt;&gt; class C(A): x = 'c' ...  &gt;&gt;&gt; class D(B C): pass ...  &gt;&gt;&gt; D.x 'c' &gt;&gt;&gt;   &gt;&gt;&gt; D.__mro__ (&lt;class '__main__.D'&gt; &lt;class '__main__.B'&gt; &lt;class '__main__.C'&gt;      &lt;class '__main__.A'&gt; &lt;type 'object'&gt;)  A x 
QScrollArea.setWidget     diff -u 1848547.py  tmp2.py --- 1848547.py  2009-12-04 11:19:09.000000000 -0800 +++ tmp2.py 2009-12-04 11:34:58.000000000 -0800 @@ -197 +196 @@      simfileInfoPane.setLayout(simfileInfoGrid)       simfileInfoScrollArea = QtGui.QScrollArea() -    simfileInfoScrollArea.setWidget(simfileInfoPane)      #if DEBUG:       simfileInfoScrollArea.setBackgroundRole(QtGui.QPalette.Dark)  @@ -336 +328 @@        simfileInfoGrid.addWidget(labels[i] i 0)        simfileInfoGrid.addWidget(textfields[i] i 1)  +    simfileInfoScrollArea.setWidget(simfileInfoPane) +      ## Put widgets in a grid layout.      mainvbox = QtGui.QVBoxLayout()      mainvbox.addWidget(simfileInfoScrollArea)  
# -*- coding: utf-8 -*-  def subpairs(s prefix suffix):     def sub(i sentinal=object()):         r = prefix.get(s[i:i+2] sentinal)         if r is not sentinal: return r          r = suffix.get(s[i-1:i+1] sentinal)         if r is not sentinal: return r         return s[i]      s = '\0'+s+'\0'     return ''.join(sub(i) for i in xrange(1len(s)))  vowels = [(v+v u':') for v in 'aeiou']  prefix = {} suffix = {'na':u'ö'} suffix.update(vowels) print subpairs('natarook' prefix suffix) # prints: nötaro:k  prefix = {'na':u'ö'} suffix = dict(vowels) print subpairs('natarook' prefix suffix) # prints: öataro:k  
from django.core.cache import cache from django.db.models.query import QuerySet try:     from cPickle import dumps except:     from pickle import dumps from hashlib import sha1  cache_miss = object()  class CantPickleAQuerySet(Exception): pass  def cache_function(cache_timeout func_type='generic'):     def wrapper(fn):         def decorator(*args **kwargs):             try:                 cache_indentifiers = "%s%s%s%s" % (                                          fn.__module__                                          fn.__name__                                          dumps(args)                                          dumps(kwargs)                                          )             except Exception e:                 print "Error: %s\nFailed to generate cache key: %s%s" % (e fn.__module__ fn.__name__)                 return fn(*args **kwargs)              cache_key = sha1(cache_indentifiers).hexdigest()              value = cache.get(cache_key cache_miss)              if value is cache_miss:                 value = fn(*args **kwargs)                  if isinstance(value QuerySet):                     raise CantPickleAQuerySet("You can't cache a queryset. But you CAN cache a list! just convert your Queryset (the value you were returning) to a list like so `return list(queryset)`")                  try:                     cache.set(cache_key value cache_timeout)                 except Exception e:                     print "Error: %s\nFailed to cache: %s\nvalue: %s" % (e cache_indentifiers value)              return value          no_arg2 = object()         def filter_decorator(arg1 arg2=no_arg2):             if arg2 is no_arg2:                 return decorator(arg1)             else:                 return decorator(arg1 arg2)          if func_type == 'generic':             return decorator          elif func_type == 'filter':             return filter_decorator      return wrapper  
session.execute('INSERT INTO t1 (SELECT * FROM t2)')  from sqlalchemy.ext import compiler from sqlalchemy.sql.expression import Executable ClauseElement  class InsertFromSelect(Executable ClauseElement):     def __init__(self table select):         self.table = table         self.select = select  @compiler.compiles(InsertFromSelect) def visit_insert_from_select(element compiler **kw):     return &quot;INSERT INTO %s (%s)&quot; % (         compiler.process(element.table asfrom=True)         compiler.process(element.select)     )  insert = InsertFromSelect(t1 select([t1]).where(t1.c.x&gt;5)) print insert  &quot;INSERT INTO mytable (SELECT mytable.x mytable.y mytable.z FROM mytable WHERE mytable.x &gt; :x_1)&quot;  select() from_select() Insert &gt;&gt;&gt; from sqlalchemy.sql import table column &gt;&gt;&gt; t1 = table('t1' column('a') column('b')) &gt;&gt;&gt; t2 = table('t2' column('x') column('y')) &gt;&gt;&gt; print(t1.insert().from_select(['a' 'b'] t2.select().where(t2.c.y == 5))) INSERT INTO t1 (a b) SELECT t2.x t2.y FROM t2 WHERE t2.y = :y_1  
import import xml.sax xml.sax.ContentHandler require 'xml' XML xml.sax.ContentHandler import xml.sax as X  X.ContentHandler machine interface process/__init__.py from process.interface import * from process.machine import Machine HelperMachine  process.machine.Machine process.Machine process.interface process import 
letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/.' salt = letters[rand letters.length].chr + letters[rand letters.length].chr  password = "bla"  puts password.crypt(salt)  
Button.Button import pyjamas.ui.Button  from pyjamas.ui import Button  pyjamas.ui.Button.Button import 
for item in (x.attr for x in some_list):     do_something_with(item)  
foo bob classobj bob # example using new-style classes which are recommended over old-style class bob(object):     pass  foo = bob() print type(foo).__name__ 'bob'  bob print bob.__name__ 'bob'  bob __name__ 
class no_share(object):     def __init__(self arg1):         self.arg1 = arg1      def __call__(self f):         """Don't let them in if it's shared"""          # Do something with the argument passed to the decorator.         print 'Decorator arguments:' self.arg1          def wrapped_f(request *args **kwargs):             if kwargs.get('shared' True):                 from django.http import Http404                 raise Http404('not availiable for sharing')             f(request *args **kwargs)                     return wrapped_f  @no_share('prefs') def prefs(request [...])  
chil.temp = 13  
notes = Notification.objects.filter(user=self.user)[:4] Notification.objects.exclude(pk__in=list(notes)).delete()  # list() forces a database hit.  list(notes) (1235 "This version of MySQL doesn't yet support 'LIMIT &amp; IN/ALL/ANY/SOME subquery'")  list(notes) notes notes = Notification.objects.filter(user=self.user)[:4].values_list("id" flat=True)  # only retrieve ids. Notification.objects.exclude(pk__in=list(notes)).delete()  
resample() 
#!/bin/bash if [ -f "pidfile" ]; then     kill `cat -- pidfile`     rm -f -- pidfile fi exec python manage.py runfcgi host=127.0.0.1 port=8081 pidfile=pidfile --settings=settings  
class UnitFloat(float):      def __new__(self value unit=None):        return float.__new__(self value)      def __init__(self value unit=None):         self.unit = unit   x = UnitFloat(35.5 "cm") y = UnitFloat(42.5)  print x print x.unit  print y print y.unit  print x + y  35.5 cm 42.5 None 78.0  
__init__ def __init__(self firstName lastName age studentID degree):     self.firstName = firstName     self.lastName = lastName     ...     self.grades = {}      while True:         module_name = raw_input("Please enter the student's module name: ")         if not module_name:             break         grade = raw_input("Please enter the grade for %s: " % module_name)         student.grades[module_name] = grade  
try:     self.result = self.do_something_dangerous() except Exception e:     import sys     self.exc_info = sys.exc_info()  if self.exc_info:     raise self.exc_info[1] None self.exc_info[2] return self.result  try:     self.result = self.do_something_dangerous() except Exception as e:     import sys     self.exc_info = sys.exc_info()  if self.exc_info:     raise self.exc_info[1].with_traceback(self.exc_info[2]) return self.result  
instance instance author commit=False from django.http import HttpResponseForbidden from django.shortcuts import get_object_or_404 redirect render reverse   @login_required def edit(request id=None template_name='article_edit_template.html'):     if id:         article = get_object_or_404(Article pk=id)         if article.author != request.user:             return HttpResponseForbidden()     else:         article = Article(author=request.user)      form = ArticleForm(request.POST or None instance=article)     if request.POST and form.is_valid():         form.save()          # Save was successful so redirect to another page         redirect_url = reverse(article_save_success)         return redirect(redirect_url)      return render(request template_name {         'form': form     })  urls.py (r'^article/new/$' views.edit {} 'article_new') (r'^article/edit/(?P&lt;id&gt;\d+)/$' views.edit {} 'article_edit')  edit author class ArticleForm(forms.ModelForm):     class Meta:         model = Article         exclude = ('author')  
app = QApplication proc = QProcess sys.stdout.flush() import os sys textwrap  from PyQt4 import QtGui QtCore  out_file = open("sleep_loop.py" 'w') out_file.write(textwrap.dedent("""     import time sys      while True:         print "sleeping..."         sys.stdout.flush()         time.sleep(1)""")) out_file.close()  def started():     print "started"  def on_error(error):     errors = ["Failed to start" "Crashed" "Timedout" "Read error"                "Write Error" "Unknown Error"]     print "error: " errors[error]                def on_state_change(new_state):     states = ["Not running" "Starting" "Running"]     print "new state: " states[new_state]  def on_out():     print "got out"  app = QtGui.QApplication(sys.argv) proc = QtCore.QProcess() sig = QtCore.SIGNAL proc.connect(proc sig("started()") started) proc.connect(proc sig("error(ProcessError)") on_error) proc.connect(proc sig("readyReadStandardOutput()") on_out) proc.connect(proc sig("stateChanged(ProcessState)")               on_state_change) proc.start("python sleep_loop.py")  widget = QtGui.QWidget() widget.show() app.exec_()  proc.close()  
import ftplib  def traverse(ftp depth=0):     """     return a recursive listing of an ftp server contents (starting     from the current directory)      listing is returned as a recursive dictionary where each key     contains a contents of the subdirectory or None if it corresponds     to a file.      @param ftp: ftplib.FTP object     """     if depth &gt; 10:         return ['depth &gt; 10']     level = {}     for entry in (path for path in ftp.nlst() if path not in ('.' '..')):         try:             ftp.cwd(entry)             level[entry] = traverse(ftp depth+1)             ftp.cwd('..')         except ftplib.error_perm:             level[entry] = None     return level  def main():     ftp = ftplib.FTP("localhost")     ftp.connect()     ftp.login()     ftp.set_pasv(True)      print traverse(ftp)  if __name__ == '__main__':     main()  
@register.simple_tag def url_with_changed_parameter(request param value):     params = request.GET     request[param] = value     return "%s?%s" % (request.path params.urlencode())  {% url_with_changed_parameter request "page" 2 %}  
from operator import itemgetter from itertools import groupby  lst = [(1 5)  (5 4) (13 3) (4 3) (3 2) (14 1)        (12 1) (10 1) (9 1) (8 1)  (7 1) (6 1) (2 1)]  result = [[x for x y in group]           for key group in groupby(lst key=itemgetter(1))]  groupby(lst key=itemgetter(1)) lst [x for x y in group] 
getattr(CallMe variable)()  
repr() req req.environ['HTTP_USER_AGENT'] req &lt;py:if test="'Gecko/' in req.environ['HTTP_USER_AGENT'] and [int(x.split('/')[1]) for x in req.environ['HTTP_USER_AGENT'].split() if x.startswith('Gecko')][0] &amp;gt; 20080101"&gt;   &lt;div py:match="div[@id='header']"&gt;     &lt;object type="image/svg+xml" id="svgLogo" data="${href.chrome('site/logo.svg')}" style="width=${chrome['logo']['width']}px; height=${chrome['logo']['height']}px;"&gt;&lt;/object&gt;   &lt;/div&gt; &lt;/py:if&gt;  
xxd /dev/diskwhatever .read() subprocess popen child = subprocess.Popen(whatever stdout=subprocess.PIPE) for line in child.stdout:   print "One more line:" line  
try/except eval try/except eval compile import exec execfile try/except 
from suds.client      import Client from suds.sax.element import Element  client = Client("http://example.com/example.wsdl")  # &lt;tns:h xmlns:tns="http://example2.com/example2/"&gt;v&lt;/tns:h&gt; tns = ("tns" "http://example2.com/example2/") h = Element('h' ns=tns).setText('v') client.set_options(soapheaders=h)  # s = client.service.Op(data)  
#!/bin/bash pytranslate "$(xsel -p)"  ~/bin 
parser = optparse.OptionParser(epilog="otherstuff")  format_epilog format_epilog def main():      class MyParser(optparse.OptionParser):         def format_epilog(self formatter):             return self.epilog      parser =MyParser(epilog= """Examples:  check_dell -c all check_dell -c fans memory voltage check_dell -s """) ...  optparse.py OptionParser format_epilog format_help def format_epilog(self formatter):     return formatter.format_epilog(self.epilog)  def format_help(self formatter=None):     if formatter is None:         formatter = self.formatter     result = []     if self.usage:         result.append(self.get_usage() + "\n")     if self.description:         result.append(self.format_description(formatter) + "\n")     result.append(self.format_option_help(formatter))     result.append(self.format_epilog(formatter))     return "".join(result)  formatter.format_epilog textwrap.fill OptionParser format_epilog 
views.py 
binds = {}  finance_engine = create_engine(url1) binds.update(dict.fromkeys(finance_metadata.sorted_tables finance_engine)) # The following line is required when mappings to joint tables are used (e.g. # in joint table inheritance) due to bug (or misfeature) in SQLAlchemy 0.5.4. # This issue might be fixed in newer versions. binds.update(dict.fromkeys([Employee Customer Invoice] finance_engine))  staff_engine = create_engine(url2) binds.update(dict.fromkeys(staff_metadata.sorted_tables staff_engine)) # See comment above. binds.update(dict.fromkeys([Project Hour] staff_engine))  session = sessionmaker(binds=binds)()  
print class SparseList(list):   def __setitem__(self index value):     missing = index - len(self) + 1     if missing &gt; 0:       self.extend([None] * missing)     list.__setitem__(self index value)   def __getitem__(self index):     try: return list.__getitem__(self index)     except IndexError: return None  __test__ = dict(allem=''' &gt;&gt;&gt; l = SparseList() &gt;&gt;&gt; l [] &gt;&gt;&gt; l[2] = "hello" &gt;&gt;&gt; l [None None 'hello'] &gt;&gt;&gt; print l[5] None &gt;&gt;&gt; l[4] = 22 &gt;&gt;&gt; l [None None 'hello' None 22] &gt;&gt;&gt; len(l) 5 &gt;&gt;&gt; for i in l: print i None None hello None 22 ''') import doctest doctest.testmod(verbose=1)  
print [y.replace('$' x)   for y in (v for y in DICTB.values() for v in y)   for x in (v for y in DICTA.values() for v in y) ]  
threading.local() socket_data = threading.local() socket_data = bind_ip = None  true_socket = socket.socket  def bound_socket(*a **k):     sock = true_socket(*a **k)     if socket_data.bind_ip is not None:         sock.bind((socket_data.bind_ip 0))     return sock  socket.socket = bound_socket  def thread_target(bind_ip):     socket_data.bind_ip = bind_ip     # the rest code  for bind_ip in [...]:     thread = Thread(target=thread_target args=(bind_ip))     # ...  connect() HTTPConnection http_open() HTTPHandler 
adds = map((lambda (j f a):   j.join([f.format(i) for i in parse.options[a]]) if parse.options[a] else '')   ((' ' ' -not -path "{0}" ' 'exclude')   (' -or ' '-path "{0}"' 'include')))  
for i in ...:     for j in ...:         for k in ...:             if something:                 # continue loop i  break def inner():     for j in ...:         for k in ...:             if something:                 return   for i in ...:     inner()  inner for i in ...:     def inner():         for j in ...:             for k in ...:                 if something:                     return     inner()  class ContinueI(Exception):     pass   continue_i = ContinueI()  for i in ...:     try:         for j in ...:             for k in ...:                 if something:                     raise continue_i     except ContinueI:         continue  
import types  class CallAll(type):     """ MetaClass that adds methods to call all superclass implementations """     def __new__(meta clsname bases attrs):         ## collect a list of functions defined on superclasses         funcs = {}         for base in bases:             for name val in vars(base).iteritems():                 if type(val) is types.FunctionType:                     if name in funcs:                         funcs[name].append( val )                     else:                         funcs[name] = [val]          ## now we have all methods so decorate each of them         for name in funcs:             def caller(self *args**kwargs):                 """ calls all baseclass implementations """                 for func in funcs[name]:                     func(self *args**kwargs)             attrs[name] = caller          return type.__new__(meta clsname bases attrs)  class B:     def fn(self):         print 'B'  class A:     def fn(self):         print 'A'  class C(AB object):     __metaclass__=CallAll  c=C() c.fn()  
import array array.array('i')  a = array.array('i'(0 for i in range(010)))  
class.method class SomeClass:   @classmethod   def some_class_method(cls):     pass    @staticmethod   def some_static_method():     pass  SomeClass.some_class_method() SomeClass.some_static_method()  
level level root  `-home     |- lyrae     |   |- ftp.py     |   `- http.py     `- badp  ftp root ftp(root) level ftp(root) (home) ftp(root) ftp(root) level[home] ftp ftp(home) level ftp(home) (lyrae badp) ftp(home) ftp(home) level[lyrae] ftp ftp(lyrae) level ftp(lyrae) () ftp(lyrae) level ftp(home) levels = {'lyrae': {}} ftp(home) ftp(home) level[badp] ftp ftp(badp) level ftp(badp) () ftp(badp) level ftp(home) levels = {'lyrae': {} 'badp': {}} ftp(home) level ftp(root) levels = {'home': {'lyrae': {} 'badp': {}}} ftp(root) level 
file.read() message.ParseFromString(...) 
try:   import exists except ImportError as exc:   if "exists" in str(exc):      pass   else:      raise  
self.rooms self.devs def __init__(self rooms = None):     if rooms is None:         rooms = []     self.rooms = rooms     print('house created')  
print print(recip) 
st_mode os.stat &amp; st_mode import os import stat  def isgroupreadable(filepath):   st = os.stat(filepath)   return bool(st.st_mode &amp; stat.S_IRGRP)  os.stat 
threading.local() Session.commit() sqlalchemy.org.attributes.instance_state(obj) state.committed_state state.get_history() sqlalchemy.org.attributes.get_history() has_changes() added deleted state.manager.keys() state.manager.attributes DeclarativeMeta 
CharField IPAddressField 
re.sub(r"([aeiou])(t|k|s|tk)([^aeiou]*)$" r"\1:\2\3" "orchestras") re.sub(r"([aeiou])(t|k|s|tk)$"            r"\1:\2"   "orchestras")  
codecs.open('foo.txt' 'r' 'utf-16')  
isalpha &gt;&gt;&gt; "Hello".isalpha() True &gt;&gt;&gt; "World!".isalpha() False  &gt;&gt;&gt; from curses.ascii import isalpha &gt;&gt;&gt; all(isalpha(x) for x in "Hello") True &gt;&gt;&gt; all(isalpha(x) for x in "World!") False  
list(bytestring)  &gt;&gt;&gt; bstring=b"Hello World" &gt;&gt;&gt; list( bstring) [72 101 108 108 111 32 87 111 114 108 100] &gt;&gt;&gt;   &gt;&gt;&gt; from functools import reduce &gt;&gt;&gt; reduce(lambda xy:(x&lt;&lt;8)+ylist(b"Hello World")) 87521618088882533792115812 &gt;&gt;&gt; bin(_) '0b100100001100101011011000110110001101111001000000101011101101111011100100110110001100100' &gt;&gt;&gt;   &gt;&gt;&gt; reduce(lambda xy:(x&lt;&lt;8)+ylist(b"Hello World"[::-1])) 121404708493354166158910792 &gt;&gt;&gt; bits=bin(_)[2:]  &gt;&gt;&gt; bits=bits.zfill(((len(bits)-1)//8+1)*8) &gt;&gt;&gt; bits '0110010001101100011100100110111101010111001000000110111101101100011011000110010101001000'  &gt;&gt;&gt; int(bits[:6]2) 25  &gt;&gt;&gt; int(bits[6:10]2) 1  
import csv reader = csv.reader(open('IN.csv' 'r')) writer = csv.writer(open('OUT.csv' 'w') for row in reader:  # do stuff to the row here  # row is just a list of items  writer.writerow(row)  
subprocess.call() #!/usr/bin/env python import os sys subprocess time while True:     p=subprocess.Popen(["xsel"]stdout=subprocess.PIPE)     print p.stdout.read()     time.sleep(1)  
__name__ class B(object):  B = ... __name__ class B(object):     pass A = B del B  
def display(request):   return render_to_response('template.tmpl' {'obj': models.Book.objects.all()})  class Book(models.Model):   author = models.CharField(max_length = 20)   title = models.CharField(max_length = 40)   publication_year = models.IntegerField()  &lt;table&gt; &lt;tr&gt;   &lt;th&gt;author&lt;/th&gt;   &lt;th&gt;title&lt;/th&gt;   &lt;th&gt;publication year&lt;/th&gt; &lt;/tr&gt; {% for b in obj %} &lt;tr&gt;   &lt;td&gt;{{ b.author }}&lt;/td&gt;   &lt;td&gt;{{ b.title }}&lt;/td&gt;   &lt;td&gt;{{ b.publication_year }}&lt;/td&gt; &lt;/tr&gt; {% endfor %} &lt;/table&gt;  
open("cache").close() else for def checkCache(cachedText):     cache = open( "cache" )     for line in cache:         if cachedText + ":" in line:             break     else:         requestDefinition(cachedText)     cache.close()  for break 
__get__() __set__() __get__() 
GridTableBase import wx wx.grid  class GridData(wx.grid.PyGridTableBase):     _cols = "a b c".split()     _data = [         "1 2 3".split()         "4 5 6".split()         "7 8 9".split()     ]     _highlighted = set()      def GetColLabelValue(self col):         return self._cols[col]      def GetNumberRows(self):         return len(self._data)      def GetNumberCols(self):         return len(self._cols)      def GetValue(self row col):         return self._data[row][col]      def SetValue(self row col val):         self._data[row][col] = val      def GetAttr(self row col kind):         attr = wx.grid.GridCellAttr()         attr.SetBackgroundColour(wx.GREEN if row in self._highlighted else wx.WHITE)         return attr      def set_value(self row col val):         self._highlighted.add(row)         self.SetValue(row col val)  class Test(wx.Frame):     def __init__(self):         wx.Frame.__init__(self None)          self.data = GridData()         self.grid = wx.grid.Grid(self)         self.grid.SetTable(self.data)          btn = wx.Button(self label="set a2 to x")         btn.Bind(wx.EVT_BUTTON self.OnTest)          self.Sizer = wx.BoxSizer(wx.VERTICAL)         self.Sizer.Add(self.grid 1 wx.EXPAND)         self.Sizer.Add(btn 0 wx.EXPAND)      def OnTest(self event):         self.data.set_value(1 0 "x")         self.grid.Refresh()   app = wx.PySimpleApp() app.TopWindow = Test() app.TopWindow.Show() app.MainLoop()  
SyntaxError &gt;&gt;&gt; s='''\ ... print 'ok' ... ''' &gt;&gt;&gt; s "print 'ok'\n" &gt;&gt;&gt; exec s ok &gt;&gt;&gt; exec s.replace('\n' '\r\n') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;string&gt;" line 1     print 'ok'               ^ SyntaxError: invalid syntax  lMapping = os.linesep.join(lMapping.splitlines())  
python-ntlm 
stocks t executemany c.executemany('insert into stocks (??????)' (t + ('Arb value') for t in stocks))  
menu_items Menu class Menu:     """Shows a menu with the defined items"""     characters = map(chr range(97 123))      def __init__(self menu_items):         self.menu_items = {}         self.init_menu(menu_items)      [...]  
class Red(object):     def x(self):         print '#F00'  class Blue(object):     def x(self):         print '#00F'  class Shape(object):     def __init__(selfcolor):         self._color=color     def x(self):         return self._color.x()  class Circle(Shape):     def __init__(self color):         Shape.__init__(selfcolor)         self.x()  class Square(Shape):     def __init__(self color):         Shape.__init__(selfcolor)         self.x()         self.sides = 4  red_circle = Circle(color=Red()) blue_circle = Circle(color=Blue()) blue_square = Square(color=Blue())  
hashAndSign 
for i in range(nIterations): y = f(y)  for _ in xrange(nIterations): y = f(y)  reduce(lambda y _: f(y) xrange(nIterations) initValue)  repeat xrange range 
/var/root 
myapp server ~/myapp$ git init  local ~/myapp$ git remote add origin user@server:~/myapp.git local ~/myapp$ git push origin master  git push git co last-known-good-commit 
re.sub(r'([aeiou])\1' r'\1:' str)  
result.content Content-Type text/html application/xhtml+xml self.response.out.write(result.content)  
self classInstance.method(parameter) method(self parameter) class MyClass(Object):      def my_method(self parameter):          print parameter  
shutil.copytree import os shutil def copytree(src dst symlinks=False ignore=None):     for item in os.listdir(src):         s = os.path.join(src item)         d = os.path.join(dst item)         if os.path.isdir(s):             shutil.copytree(s d symlinks ignore)         else:             shutil.copy2(s d)  copytree symlinks ignore src shutil.Error src shutil.Error shutil.Error 
line1 ="['a.b.c''b.c.a''c.d.e']" line2 ="['def''efg']" line3 ="['f']" line4 ="['g']" lines = [line1 line2 line3 line4]  print eval('+'.join(lines))  ast.literal_eval 
import sip # you'll need this import (no worries it ships with your pyqt install) sip.delete(self.sv_widgets[purchase.id])  sip.delete(obj) removeWidget del self.vl_seatView.removeWidget(self.sv_widgets[purchase.id]) self.sv_widgets[purchase.id].setParent(None) del self.sv_widgets[purchase.id]  
conn.commit()  
sha1("blob " + filesize + "\0" + data)  
&gt;&gt;&gt; import xml.etree.ElementTree &gt;&gt;&gt; myPacket = '&lt;PACKET&gt;&lt;HEAD&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;SEQ&gt;1&lt;/SEQ&gt;&lt;FILENAME&gt;Test99.txt&lt;/FILE NAME&gt;&lt;/HEAD&gt;&lt;DATA&gt;spam and cheese&lt;/DATA&gt;&lt;/PACKET&gt;' &gt;&gt;&gt; xt = xml.etree.ElementTree.fromstring(myPacket) &gt;&gt;&gt; wrk_ele = xt.find('HEAD/FILENAME') &gt;&gt;&gt; wrk_ele.text 'Test99.txt' &gt;&gt;&gt;  
twisted.internet.protocols.portforward loseConnection 
before_insert() default context context.compiled_parameters[0]['CategoryUniqueName'] context.connection FetchedValue() server_default CategoryID CategoryUniqueName 
for line in itertools.izip(     open(file1)     itertools.islice(open(file2) 1 None)     ):     # do something  
repr() f.write(stdout_value)  
#!/usr/bin/python  appendToFile = open("appendedFile" "r") sortToFile = open("sortedFile" "w")  for line in sorted(appendToFile key = str.lower):     sortToFile.write(line)  
from __future__ import absolute_import  import sys.path 
x="""Top Assembly Part Number        : 800-25858-06 Top Assembly Revision Number    : A0 Version ID                      : V08 CLEI Code Number                : COMDE10BRA Hardware Board Revision Number  : 0x01   Switch   Ports  Model              SW Version              SW Image ------   -----  -----              ----------              ---------- *    1   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M      2   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M      3   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M      4   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M   Switch 02 --------- Switch Uptime                   : 11 weeks 2 days 16 hours 27 minutes Base ethernet MAC Address       : 00:26:52:96:2A:80 Motherboard assembly number     : 73-9675-15"""  &gt;&gt;&gt; import re &gt;&gt;&gt; re.findall("^\*?\s*(\d)\s*\d+\s*([A-Z\d-]+)"xre.MULTILINE) [('1' 'WS-C3750-48P') ('2' 'WS-C3750-48P') ('3' 'WS-C3750-48P') ('4' 'WS-C3750-48P')]  &gt;&gt;&gt; re.findall("^(\*?)\s+(\d)\s+\d+\s+([A-Z\d-]+)"xre.MULTILINE) [('*' '1' 'WS-C3750-48P') ('' '2' 'WS-C3750-48P') ('' '3' 'WS-C3750-48P') ('' '4' 'WS-C3750-48P')] &gt;&gt;&gt;  
self self.mapping self self import copy  ...      self.mapping[self.Id] = copy.copy(self)  copy.deepcopy(self) self self.mapping copy.copy 
"bye" charP create_string_buffer 
scipy.spatial.distance.cdist( X Y ) # cdist example: (nxdim) (nydim) -&gt; (nxny)  from __future__ import division import sys import numpy as np from scipy.spatial.distance import cdist  #............................................................................... dim = 10 nx = 1000 ny = 100 metric = "euclidean" seed = 1      # change these params in sh or ipython: run this.py dim=3 ... for arg in sys.argv[1:]:     exec( arg ) np.random.seed(seed) np.set_printoptions( 2 threshold=100 edgeitems=10 suppress=True )  title = "%s  dim %d  nx %d  ny %d  metric %s" % (         __file__ dim nx ny metric ) print "\n" title  #............................................................................... X = np.random.uniform( 0 1 size=(nxdim) ) Y = np.random.uniform( 0 1 size=(nydim) ) dist = cdist( X Y metric=metric )  # -&gt; (nx ny) distances #...............................................................................  print "scipy.spatial.distance.cdist: X %s Y %s -&gt; %s" % (         X.shape Y.shape dist.shape ) print "dist average %.3g +- %.2g" % (dist.mean() dist.std()) print "check: dist[03] %.3g == cdist( [X[0]] [Y[3]] ) %.3g" % (         dist[03] cdist( [X[0]] [Y[3]] ))   # (trivia: how do pairwise distances between uniform-random points in the unit cube # depend on the metric ? With the right scaling not much at all: # L1 / dim      ~ .33 +- .2/sqrt dim # L2 / sqrt dim ~ .4 +- .2/sqrt dim # Lmax / 2      ~ .4 +- .2/sqrt dim  
&gt;&gt;&gt; import inspect &gt;&gt;&gt;  &gt;&gt;&gt; def foo(): ...   return 'foo' ...  &gt;&gt;&gt; def bar(): ...   yield 'bar' ...  &gt;&gt;&gt; print inspect.isgeneratorfunction(foo) False &gt;&gt;&gt; print inspect.isgeneratorfunction(bar) True  
&gt;&gt;&gt; from numpy import * &gt;&gt;&gt; count_total = array((00)) &gt;&gt;&gt; count_total += (12) &gt;&gt;&gt; count_total array([1 2])  
import re item_list = ['item1' 'item2'] regex = re.compile("^("+"|".join(item_list)+")\.") search_list = ['item1.exe' 'item2.pdf'] matches = [] for file in search_list:     match = regex.match(file)     if match:         matches.append((match.group(1) file))  
import math  def check_primality(y):   x = int(math.sqrt(y))   while x &gt; 1:     if y % x == 0:                                                       print y 'has factor' x       break     x -= 1   else:     print y 'is prime'  
&gt;&gt;&gt; from collections import OrderedDict &gt;&gt;&gt; d = OrderedDict([('first' 1) ('second' 2) ...                  ('third' 3)]) &gt;&gt;&gt; d.items() [('first' 1) ('second' 2) ('third' 3)]  
from win32con import PAGE_READWRITE MEM_COMMIT MEM_RESERVE MEM_RELEASE\     PROCESS_ALL_ACCESS from commctrl import LVM_GETITEMTEXT LVM_GETITEMCOUNT  import struct import ctypes import win32api import win32gui  GetWindowThreadProcessId = ctypes.windll.user32.GetWindowThreadProcessId VirtualAllocEx = ctypes.windll.kernel32.VirtualAllocEx VirtualFreeEx = ctypes.windll.kernel32.VirtualFreeEx OpenProcess = ctypes.windll.kernel32.OpenProcess WriteProcessMemory = ctypes.windll.kernel32.WriteProcessMemory ReadProcessMemory = ctypes.windll.kernel32.ReadProcessMemory memcpy = ctypes.cdll.msvcrt.memcpy   def readListViewItems(hwnd column_index=0):      # Allocate virtual memory inside target process     pid = ctypes.create_string_buffer(4)     p_pid = ctypes.addressof(pid)     GetWindowThreadProcessId(hwnd p_pid) # process owning the given hwnd     hProcHnd = OpenProcess(PROCESS_ALL_ACCESS False struct.unpack("i"pid)[0])     pLVI = VirtualAllocEx(hProcHnd 0 4096 MEM_RESERVE|MEM_COMMIT PAGE_READWRITE)     pBuffer = VirtualAllocEx(hProcHnd 0 4096 MEM_RESERVE|MEM_COMMIT PAGE_READWRITE)      # Prepare an LVITEM record and write it to target process memory     lvitem_str = struct.pack('iiiiiiiii' *[00column_index00pBuffer409600])     lvitem_buffer = ctypes.create_string_buffer(lvitem_str)     copied = ctypes.create_string_buffer(4)     p_copied = ctypes.addressof(copied)     WriteProcessMemory(hProcHnd pLVI ctypes.addressof(lvitem_buffer) ctypes.sizeof(lvitem_buffer) p_copied)      # iterate items in the SysListView32 control     num_items = win32gui.SendMessage(hwnd LVM_GETITEMCOUNT)     item_texts = []     for item_index in range(num_items):         win32gui.SendMessage(hwnd LVM_GETITEMTEXT item_index pLVI)         target_buff = ctypes.create_string_buffer(4096)         ReadProcessMemory(hProcHnd pBuffer ctypes.addressof(target_buff) 4096 p_copied)         item_texts.append(target_buff.value)      VirtualFreeEx(hProcHnd pBuffer 0 MEM_RELEASE)     VirtualFreeEx(hProcHnd pLVI 0 MEM_RELEASE)     win32api.CloseHandle(hProcHnd)     return item_texts  
__getattribute__ 
class AgencyManger(models.Manager):     def active(self):         return self.filter(show=True)  Agency.objects Agency.objects.active() Agency.active.all() .objects. 
if tmin is None: tmin = -INF if tmax is None: tmax = +INF  tval = float(-b - discriminant) / float (2*a) if tmin &lt;= tval &lt;= tmax:     return tval   tval = float(-b + discriminant) / float (2*a) if tmin &lt;= tval &lt;= tmax:     return tval  # Neither solution was within the acceptable range. return None  
(?:^|[^\\])(?:\\\\)*((?:\"|\\(?:[^\"\\nr]|$)))  " " \ n r 
{% load i18n %} &lt;h1&gt;{% trans "Header of my Collection" %}&lt;/h1&gt;  manage.py makemessages -l fr  
import sys time  sys.stdout.write('Content-Type: text/html;charset=utf-8\r\n\r\n')  print '&lt;html&gt;&lt;body&gt;' for i in range(10):     print '&lt;div&gt;%i&lt;/div&gt;'%i     sys.stdout.flush()     time.sleep(1)  import time wsgiref.handlers  class MyApplication(object):     def __call__(self environ start_response):         start_response('200 OK' [('Content-Type' 'text/html;charset=utf-8')])         return self.page()      def page(self):         yield '&lt;html&gt;&lt;body&gt;'         for i in range(10):             yield '&lt;div&gt;%i&lt;/div&gt;'%i             time.sleep(1)  application= MyApplication() if __name__=='__main__':     wsgiref.handlers.CGIHandler().run(application)  mod_deflate def page(self):     yield (         '&lt;html&gt;&lt;body&gt;&lt;div id="counter"&gt;-&lt;/div&gt;'         '&lt;script type="text/javascript"&gt;'         '    function update(n) {'         '        document.getElementById("counter").firstChild.data= n;'         '    }'         '&lt;/script&gt;'     )     for i in range(10):         yield '&lt;script type="text/javascript"&gt;update(%i);&lt;/script&gt;'%i         time.sleep(1)  
max(a_list key=operator.itemgetter(1))  
s = "this is my really really really really really really" \     " really long string that I'd like to shorten."  
num import matplotlib.pyplot  def test_matplotlib(request):     f = figure(figsize=(66))     ....     matplotlib.pyplot.close(f)  num f.clear() 
import os os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'  import site site.addsitedir('/path/to/virtualenv/lib/python2.6/site-packages')  from django.core.handlers.wsgi import WSGIHandler application = WSGIHandler()  site.addsitedir(...) *.pth sys.path easy-install.pth 
try:     import simplejson as json except ImportError:     import json  simplejson 
local('git rm fabfile.py' capture=False) local('git add settings.py' capture=False)  local 
django.contrib.auth.views.password_change_done post_change_redirect (r'^settings/users/change_password/$' 'django.contrib.auth.views.password_change' {'password_change_done': '/settings/users/password-changed'})  
i=i def make_property(i dict):     def fget(self):         return i      dict['f%d' % i] = property(fget)  class Test(object):     def __metaclass__(name bases dict):         for i in range(5):             make_property(i dict)          return type(name bases dict)  
&gt;&gt;&gt; pat= '^(w{{3}}\.)?([0-9A-Za-z-]+\.){{1}}{domainName}$'.format(domainName = 'delivery.com') &gt;&gt;&gt; pat '^(w{3}\\.)?([0-9A-Za-z-]+\\.){1}delivery.com$' &gt;&gt;&gt; re.match(pat str1)  re.match ^ re.match ^ re.search {1} 
metadata.bind = 'postgres://user:pw@host/db'  conn = metadata.bind.engine.connect()  old_lvl = conn.connection.isolation_level conn.connection.set_isolation_level(0) conn.execute('vacuum analyze table') conn.connection.set_isolation_level(old_lvl)  
del map(lambda d: d.pop('k1') list_of_d)  for d in list_of_d:     del d['k1']  
io.StringIO &gt;&gt;&gt; import io &gt;&gt;&gt; s = u"a\r\nb\nc\rd" &gt;&gt;&gt; sio = io.StringIO(s newline=None) &gt;&gt;&gt; sio.readlines() [u'a\n' u'b\n' u'c\n' u'd']  stream = io.StringIO(unicode(request.FILES['foo'].read()) newline=None)  
for word_index letter in enumerate(letter_list):     if letter == user_input:         correct_letters[word_index] = user_input  for letter in letter_list: enumerate() 
code       = models.CharField(max_length=80) # Mapped from name calendar_event = models.ForeignKey(CalendarEvent) name code code save() delete() 
5wlfgALGbXOahekxSs9wlfgALGbXOahekxSs5 ^                 ^                 ^  join() &gt;&gt;&gt; "".join(["a" "b" "c"]) 'abc'  + print array.array('c' random.sample(string.ascii_letters 20 - len(strid))) .tostring() + strid  
tmp_iter = iter(tmp) prev = tmp_iter.next()  for x in tmp_iter:     print 'seq: ' x[1] 'prev seq:' prev[1] 'variance: ' x[1]-prev[1]    prev = x  tmp_iter = iter(tmp) [_ prev] = tmp_iter.next()  for [_ x] in tmp_iter:     print 'seq: ' x 'prev seq:' prev 'variance: ' x-prev    prev = x  
collection &gt;&gt;&gt; for a in range(15): ...     b = object() ...     print b id(b) ...  &lt;object object at 0xb7db9470&gt; 3084620912 &lt;object object at 0xb7db9468&gt; 3084620904 &lt;object object at 0xb7db9470&gt; 3084620912 &lt;object object at 0xb7db9468&gt; 3084620904 &lt;object object at 0xb7db9470&gt; 3084620912  &gt;&gt;&gt; a = [] &gt;&gt;&gt; for b in range(15): ...     c = object() ...     a.append(c) ...     print c id(c) ...  &lt;object object at 0xb7db9470&gt; 3084620912 &lt;object object at 0xb7db9468&gt; 3084620904 &lt;object object at 0xb7db9478&gt; 3084620920 &lt;object object at 0xb7db9480&gt; 3084620928  
import Tkinter t = Tkinter.Tk() t.configure(cursor=('@/usr/include/X11/bitmaps/star' '/usr/include/X11/bitmaps/starMask' 'black' 'white')) t.mainloop()  
class MyException(Exception):     pass  try:     raise MyException() except MyException:     print "Doing something with MyException" except:     print "Some other error occurred... handling it differently"  __str__ __unicode__ class MyException(Exception):      def __init__(self msg):         self.msg = msg      def __str__(self):         return "MyException with %s" % self.msg  expr msg def do_something(expr):     if 'foo' in expr:         raise InvalidProgramStateException(expr "We don't allow foos here")     return 5  user_input = 'foo bar' try:     do_something(user_input) except InvalidProgramStateException e:     print "%s (using expression %s)" % (e.msg e.expr)  
def sim_distance(prefs person1 person2):    # Get the list of shared_items   p1 p2 = prefs[person1] prefs[person2]   si = set(p1).intersection(set(p2))    # Add up the squares of all the differences    matches = (p1[item] - p2[item] for item in si)   return sum(a * a for a in matches)   prefs[person1] prefs[person2] def sim_distance(prefs person1 person2):     p1 p2 = prefs[person1] prefs[person2]     s t = set(p1) set(p2)     return len(s.intersection(t)) / len(s.union(t))  
(r'^comments/$' include('django.contrib.comments.urls'))  (r'^comments/' include('django.contrib.comments.urls'))  
lines = file.readlines() lines = lines[:-1]  
&gt;&gt;&gt; from carrot.connection import DjangoBrokerConnection &gt;&gt;&gt; c = DjangoBrokerConnection() &gt;&gt;&gt; c.connection  &gt;&gt;&gt; from carrot.connection import DjangoBrokerConnection &gt;&gt;&gt; c = DjangoBrokerConnection() &gt;&gt;&gt; for n in ("host" "userid" "password" "virtual_host" "ssl"): ...     print("%s -&gt; %s" % (n repr(getattr(c n None))))  
result = [(x+dx y+dy) for xy in points for dxdy in offsets]  
b = lambda:0  lambda:0 object() 
cursor.next cursor.execute try:   ...whatever... except Exception e:   print "caught an exception defined in module" e.__class__.__module__  exceptions sys.modules 
thelines = ['hello:3.1 GB' 'world:1.2 MB' 'foo:956.2 KB']  mult = dict(KB=2**10 MB=2**20 GB=2**30)  def getsize(aline):   fn size = aline.split(':' 1)   value unit = size.split(' ')   multiplier = mult[unit]   return float(value) * multiplier  thelines.sort(key=getsize) print thelines  ['foo:956.2 KB' 'world:1.2 MB' 'hello:3.1 GB'] mult 
self.btn.Bind(wx.EVT_BUTTON self._onBtnClick)  import wx  app = wx.PySimpleApp() frame = wx.Frame(None) btn = wx.Button(frame -1 "anurag") btn.Bind(wx.EVT_BUTTON lambda e:wx.MessageBox("Wow it works")) frame.Show() app.SetTopWindow(frame) app.MainLoop()  
importText 
-x QMainWindow # Store this code in the file MyMainWindow.py from PyQt4.QtGui import *  class MyMainWindow(QMainWindow):     def __init__(self ui_layout):         QMainWindow.__init__(self)          self.ui = ui_layout         ui_layout.setupUi(self)  from PyQt4.QtGui import * from MyMainWindow import * from Form1 import *             # replace Form1 the name of your generated file import sys  app = QApplication(sys.argv)  window = MyMainWindow(Ui_Form1()) window.show()  sys.exit(app.exec_())  
difflib 
tuples = [(12) (34) (56)] [item for t in tuples for item in t]  [1 2 3 4 5 6]  sum(tuples ())  
mod_python mod_wsgi 
ipdb&gt; x = 1 ipdb&gt; p x 1 ipdb&gt; p x==True True ipdb&gt; p x==1 True  ipdb&gt; p p  
file = tkFileDialog.askopenfile(parent=rootmode='rb'filetypes=[('Subrip Subtitle File''*.srt')]title='Choose a subtitle file') abs_path = os.path.abspath(file.name)  
"http://www.graychase.com/aabbas""Gray &amp; Chase LLP""Amr A""Abbas""The George Washington University Law School""2005" "http://www.graychase.com/kadam""Gray &amp; Chase LLP""Karin""Adam""Ernst Moritz Arndt University Greifswald""2004"  from django.db import models  class School(models.Model):         name = models.CharField(max_length=300 unique=True)      def __unicode__(self):         return self.name  class Lawyer(models.Model):     firm_url = models.URLField('Bio' max_length=200 unique=True)     firm_name = models.CharField('Firm' max_length=100)     first = models.CharField('First Name' max_length=50)     last = models.CharField('Last Name' max_length=50)     year_graduated = models.IntegerField('Year graduated')     school = models.ForeignKey(School)      def __unicode__(self):         return self.first  sw2 wkw2 ############ All you need to modify is below ############ # Full path and name to your csv file csv_filepathname="C:/Users/A/Documents/Projects/Django/sw2/wkw2/fixtures/data.csv" # Full path to the directory immediately above your django project directory your_djangoproject_home="C:.../Documents/PROJECTS/Django/" ############ All you need to modify is above ############  import sysos sys.path.append(your_djangoproject_home) os.environ['DJANGO_SETTINGS_MODULE'] ='sw2.settings'  from sw2.wkw2.models import School Lawyer  import csv dataReader = csv.reader(open(csv_filepathname) delimiter='' quotechar='"')  old_school = None for row in dataReader:     if old_school != row[4]:         old_school = row[4]         school = School()         school.name = old_school         school.save()  dataReader = csv.reader(open(csv_filepathname) delimiter='' quotechar='"')  for row in dataReader:     lawyer=Lawyer()     lawyer.firm_url=row[0]     lawyer.firm_name=row[1]     lawyer.first=row[2]     lawyer.last=row[3]      lawyer_school=School.objects.get(name=row[4])     lawyer.school=lawyer_school      lawyer.year_graduated=row[5]     lawyer.save()  
from Queue import Queue import time import socket  #wraps system ping command def ping(i q):     """Pings address"""     while True:         subnet = q.get()         # each IP addresse in subnet          for ip in (subnet=str(x) for x in range(1254)):             #print "Thread %s: Pinging %s" % (i ip)             result = subprocess.call("ping -n 1 %s" % ip shell=True stdout=subprocess.PIPE stderr=subprocess.STDOUT)             #Avoid flooding the network with ping requests             time.sleep(3)             if result == 0:                  try:                     hostname=socket.gethostbyaddr(ip)                     print "%s (%s): alive" % (iphostname[0]                   except:                     print "%s: alive"%ip                 break         q.task_done()  num_threads = 100 queue = Queue()  #Put all possible subnets on wireless network into a queue for i in range(1255):     queue.put('128.119.%s.'%i)  #Spawn thread pool for i in range(num_threads):     worker = Thread(target=ping args=(i queue))     worker.setDaemon(True)     worker.start()  #Wait until worker threads are done to exit     queue.join()  
/usr/share/qtcreator/gdbmacros 
import gzip fp = gzip.open('foo.gz') contents = fp.read() # contents now has the uncompressed bytes of foo.gz fp.close() u_str = contents.decode('utf-8') # u_str is now a unicode string  Python2 Python3 rt gzip.open 
W:  1:spam: Dangerous default value [] as argument  
def findnth(haystack needle n):     parts= haystack.split(needle n+1)     if len(parts)&lt;=n+1:         return -1     return len(haystack)-len(parts[-1])-len(needle)  'foo bar bar bar'.replace('bar' 'XXX' 1).find('bar')  
tuple(x for sublist in base_lists for x in sublist)  base_lists tu.py base_lists = [[a b] for a in range(1 3) for b in range(1 6)]  def genexp():   return tuple(x for sublist in base_lists for x in sublist)  def listcomp():   return tuple([x for sublist in base_lists for x in sublist])  def withsum():   return tuple(sum(base_lists[]))  import itertools as it  def withit():   return tuple(it.chain(*base_lists))  $ python -mtimeit -s'import tu' 'tu.genexp()' 100000 loops best of 3: 7.86 usec per loop $ python -mtimeit -s'import tu' 'tu.withsum()' 100000 loops best of 3: 5.79 usec per loop $ python -mtimeit -s'import tu' 'tu.withit()' 100000 loops best of 3: 5.17 usec per loop $ python -mtimeit -s'import tu' 'tu.listcomp()' 100000 loops best of 3: 5.33 usec per loop  100 * base_lists $ python -mtimeit -s'import tu' 'tu.genexp()' 1000 loops best of 3: 408 usec per loop $ python -mtimeit -s'import tu' 'tu.withsum()' 100 loops best of 3: 5.07 msec per loop $ python -mtimeit -s'import tu' 'tu.withit()' 10000 loops best of 3: 148 usec per loop $ python -mtimeit -s'import tu' 'tu.listcomp()' 1000 loops best of 3: 278 usec per loop  withsum itertools 1000 * 100 * O(N squared) 
PyArg_ParseTupleAndKeywords def foo(bar baz="something or other"):     print bar baz  #include "Python.h"  static PyObject * themodule_foo(PyObject *self PyObject *args PyObject *keywds) {     char *bar;     char *baz = "something or other";      static char *kwlist[] = {"bar" "baz" NULL};      if (!PyArg_ParseTupleAndKeywords(args keywds "s|s" kwlist                                      &amp;bar &amp;baz))         return NULL;      printf("%s %s\n" bar baz);      Py_INCREF(Py_None);     return Py_None; }  static PyMethodDef themodule_methods[] = {     {"foo" (PyCFunction)themodule_foo METH_VARARGS | METH_KEYWORDS      "Print some greeting to standard output."}     {NULL NULL 0 NULL}   /* sentinel */ };  void initthemodule(void) {   Py_InitModule("themodule" themodule_methods); }  
for out = [dict(zip(keys property)) for property in reader]  print out print json.dumps(out) import json 
import codecs from django.utils.encoding f = codecs.open('filename' 'r' 'utf-16') zz = fo.readlines()  import codecs from django.utils.encoding fo = codecs.open('filename' 'r' 'utf-16') zz = fo.readlines()  
fun0(map(lambda x:fun1(fun2(fun3(x))) [arg1arg2arg3arg4])  fun0(map(apply itertools.product([fun1fun2fun3][arg1arg2arg3arg4])))  
goto errorexit errorexit: return NULL 
 [   {     "model": "myapp.person"     "pk": 1     "fields": {       "first_name": "John"       "last_name": "Lennon"     }   }   {     "model": "myapp.person"     "pk": 2     "fields": {       "first_name": "Paul"       "last_name": "McCartney"     }   } ]  
PR_SET_DEATHSIG fork gnuchess select nohup 
&gt;&gt;&gt; print '"Hello\\nworld!"'.decode('string_escape') "Hello world!"  
# pylint: disable-msg=C0103  # pylint: disable=C0103  
from django.shortcuts import get_object_or_404 artist = get_object_or_404(Artist id=id)  artist 
zip l1 = [1 2 3] l2 = [4 5 6] &gt;&gt;&gt; zip(l1 l2) [(1 4) (2 5) (3 6)]  &gt;&gt;&gt; print zip([1 2 3][4 5 6 7]) [(1 4) (2 5) (3 6)]  &gt;&gt;&gt; zip([1 2 3] [4 5 6] [7 8 9]) [(1 4 7) (2 5 8) (3 6 9)]  zip &gt;&gt;&gt; l = [[1 2 3] [4 5 6] [7 8 9]] &gt;&gt;&gt; zip(*l) [(1 4 7) (2 5 8) (3 6 9)]  
class ListParser:   def __init__(self s):   self.str = s.split("\n")   print self.str   self.answer = []   def parse(self):   self.nextLine()   self.topList()   return   def topList(self):   while(len(self.str) &gt; 0):    self.topListItem()   def topListItem(self):   l = self.nextLine()   print "TOP: " + l   l = self.nextLine()   if l != '':    raise Exception("expected blank line but found '%s'" % l)   sub = self.sublist()   def nextLine(self):   return self.str.pop(0)   def sublist(self):   while True:    l = self.nextLine()    if l == '':     return # end of sublist marked by blank line    else:     print "SUB: " + l  parser = ListParser(s) parser.parse()  print "done"  TOP: 1 List name SUB: 1 item SUB: 2 item SUB: 3 item TOP: 2 List name SUB: 1 item SUB: 2 item SUB: 3 item TOP: 3 List name SUB: 1 item SUB: 2 item SUB: 3 item done  
dict csv.DictReader OrderedDict csv.DictReader .fieldnames for rowdict in myReader:   print ['%s:%s' % (f rowdict[f]) for f in myReader.fieldnames]  .fieldnames dict a.csv b.csv import csv  a = open('a.csv' 'r') b = open('b.csv' 'w') ra = csv.DictReader(a) wb = csv.DictWriter(b None)  for d in ra:    if wb.fieldnames is None:     # initialize and write b's headers     dh = dict((h h) for h in ra.fieldnames)     wb.fieldnames = ra.fieldnames     wb.writerow(dh)    wb.writerow(d)  b.close() a.close()  a.csv b.csv 
import subprocess foo = subprocess.Popen('test.exe'stdout=subprocess.PIPEstderr=subprocess.PIPE)  
f = open('fname') header = [next(f) for _ in range(header_len)]  open('new' 'w').writelines(header + list_of_lines)  list_of_lines list_of_lines = [next(f) for _ in range(chunk_len)]  
L = list # 'list' is a poor variable name use something else result = min((n.foo(args) for n in L)              key=lambda x: ClassFred.objects.get(arg1=x)) # if you don't have to use arg1 as a named parameter: result = min((n.foo(args) for n in L) key=ClassFred.objects.get)  &gt;&gt;&gt; L = [-2 -1 3] &gt;&gt;&gt; min(L) -2 &gt;&gt;&gt; min(L key=abs) -1  &gt;&gt;&gt; def identity(x): ...   return x &gt;&gt;&gt; min(L key=identity) -2  &gt;&gt;&gt; min("0000" "11" "222" "3") "0000" # lexicographical minimum &gt;&gt;&gt; min("0000" "11" "222" "3" key=len) "3"  item.foo(args) ClassFred.objects.get(arg1=..) values = (n.foo(args) for n in L) # this is a generator expression # it is similar to a list comprehension but doesn't compute or store # everything immediately  def keyfunc(x):   return ClassFred.objects.get(arg1=x)  result = min(values key=keyfunc)  
sample.ini development.ini 
import urllib  x = "http://query.yahooapis.com/v1/public/yql?q=select%20owner%2Curls%20from%20flickr.photos.info%20where%20photo_id%3D'%s'&amp;format=json" tmp = urllib.unquote(x) tmp2 = tmp % (foo bar) x = urllib.quote(tmp2)  
HttpResponse from django.http import HttpResponse import xlwt  def my_view(request):     response = HttpResponse(mimetype="application/ms-excel")     response['Content-Disposition'] = 'attachment; filename="foo.xls"'     wb = xlwt.Workbook()     wb.save(response)     return response  
walk(dir) dir for dirpath dirnames filenames in os.walk(dir):     for filename in filenames:         path = os.path.join(dirpath filename)  
Multiplier.py class Multiplier:    def multiply(self x y):     return x * y  x = Multiplier().multiply(5 7)  public static void main(String[] args) throws Exception {     ScriptEngine engine = new ScriptEngineManager().getEngineByName("python");      FileReader f = new FileReader("Multiplier.py");     engine.eval(f);     Object x = engine.get("x");     System.out.println("x: " + x); }  x: 35  
pub_date django.db.models.DateField datetime.date datetime.datetime datetime.date datetime.timedelta datetime.datetime.now() pub_date ds = datetime.date.today() &gt;&gt;&gt; ds = datetime.date.today() &gt;&gt;&gt; dd = datetime.date(2009 12 9) &gt;&gt;&gt; ds - dd datetime.timedelta(2) # 2 days ago  
i = int(sys.argv[1] 16) 
print getattr(tc 'foo')  getattr(tc 'methodname')(arg1 arg2)  setattr(tc 'foo' 'bar')  hasattr(tc 'foo')  
  ls &gt; dirlist 2&gt;&amp;1   ls 2&gt;&amp;1 &gt; dirlist  2&gt;&amp;1 stderr stdout cron stdout stdout 05 18 * * * ~/job.sh &gt;&gt;~/job.log 2&gt;&amp;1  
description: describe the command user_options: a list of options initialize_options(): called at startup finalize_options(): called at the end run(): called to run the command   class MyCommand(Command):      """setuptools Command"""      description = "run my command"      user_options = tuple()      def initialize_options(self):          """init options"""          pass       def finalize_options(self):          """finalize options"""          pass       def run(self):          """runner"""          XXX DO THE JOB HERE   setup(      # ...      entry_points = {      "distutils.commands": [      "my_command = mypackage.some_module:MyCommand"]}  
lst = ['one' 'two' 'three'] resp = { 'one': num1 'two': num2 'three': num3 }  for item in lst:   print resp[item]  lst 
s[-2:] == "00"  
int() &gt;&gt;&gt; int('0x01010000'16) 16842752  &amp; | &gt;&gt;&gt; value  = int('0x01010000'16) &gt;&gt;&gt; apple  = 0x01000000 &gt;&gt;&gt; orange = 0x00010000 &gt;&gt;&gt; banana = 0x00000100 &gt;&gt;&gt; bool(value &amp; apple) # tests if apple is part of the value True &gt;&gt;&gt; value |= banana     # adds the banana flag to the value &gt;&gt;&gt; value &amp;= ~orange    # removes the orange flag from the value  &gt;&gt;&gt; hex(value) '0x1000100'  
request RequestContext reverse home 
imgarray = imgarray.astype('B') imgarray.view('uint8') uint8 imgarray.dtype np.dot uint32 np.dot imgarray uint32 view imgarray.view('uint8')[:::4] In [37]: %timeit imgarray2 = imgarray.astype('B') 10000 loops best of 3: 107 us per loop  In [39]: %timeit imgarray3 = imgarray.view('B')[:::4] 100000 loops best of 3: 3.64 us per loop  
* n 
primaryjoin secondaryjoin mapper(     User t_users     properties={         'followers': relation(             User             secondary=t_follows             primaryjoin=(t_follows.c.followee_id==t_users.c.id)             secondaryjoin=(t_follows.c.follower_id==t_users.c.id)         )         'followees': relation(             User             secondary=t_follows             primaryjoin=(t_follows.c.follower_id==t_users.c.id)             secondaryjoin=(t_follows.c.followee_id==t_users.c.id)         )     } )  primaryjoin secondaryjoin backref id follower_id followee_id 
self.rules[a] = [{b:{'f_expr': c 'c_expr': d}}]  self.rules 
shutil.rmtree import os import stat import shutil  def remove_readonly(func path excinfo):     os.chmod(path stat.S_IWRITE)     func(path)  shutil.rmtree(top onerror=remove_readonly)  
urlfetch.fetch() headers if result['Content-Type'] in ('text/html' 'application/xhtml+xml'):     # assuming you want to do something with the content     doSomethingWithXHTML(result.content) else:     # use content for something else     doTheOtherThing(result.content)  
try:     urllib2.urlopen(req) except urllib2.HTTPError e:     print "Response code"e.code # prints 404     print "Response body"e.read() # prints the body of the response...                                    # ie: your XML     print "Headers"e.headers.headers  &gt;&gt;&gt; import httplib &gt;&gt;&gt; conn = httplib.HTTPConnection("www.stackoverflow.com") &gt;&gt;&gt; conn.request("GET" "/dlkfjadslkfjdslkfjd.html") &gt;&gt;&gt; r = conn.getresponse() &gt;&gt;&gt; r.status 301 &gt;&gt;&gt; r.reason 'Moved Permanently' &gt;&gt;&gt; r.read() '&lt;head&gt;&lt;title&gt;Document Moved&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;&lt;h1&gt;Object Moved&lt;/h1&gt;  This document may be found     &lt;a HREF="http://stackoverflow.com/dlkfjadslkfjdslkfjd.html"&gt;here&lt;/a&gt;&lt;/body&gt;'  r.getheaders() 
foo = bar foo nonlocal retval = [True] def cb(widget):     retval[0] = False     gtk.main_quit() ... return retval[0]  
create() @classmethod @staticmethod @classmethod def create(cls *args **kwargs):     obj = cls(*args **kwargs)     obj.set_defaults()     return obj  
INSTALLED_APPS settings.py # in code/models.py  class Questions(models.Model):     histories = models.ManyToManyField('history.MyHistoryModel')  
raise Traceback (most recent call last):   File "./exc.py" line 11 in &lt;module&gt;     b()   File "./exc.py" line 7 in b     a()   File "./exc.py" line 4 in a     return UNBOUND NameError: global name 'UNBOUND' is not defined  e raise e.args = ("hi!") raise   
root --+---&gt; child1        +---&gt; child2 --+--&gt; subchild1        |              +--&gt; subchild2        +---&gt; child3  id       parent_id     data ---      -------       ---- 1        NULL          root 2        1             child1 3        1             child2 4        3             subchild1 5        3             subchild2 6        1             child3  
def __init__(self numberOfInputs numberOfHiddenNeurons numberOfOutputs):     NeuralNetworkBase.__init__(self numberOfInputers numberOfHiddenNeurons numberOfOutputs)     self.outputLayerDeltas = numpy.zeros(shape = (numberOfOutputs))     self.hiddenLayerDeltas = numpy.zeros(shape = (numberOfHiddenNeurons))  super 
decimal &gt;&gt;&gt; print '%.2f' % (0.1+0.1+0.1-0.3) 0.00  
&gt;&gt;&gt; def unpack(seq count): ...   return seq[:count] + [seq[count:]] &gt;&gt;&gt; a b = unpack([1 2 3] 1) &gt;&gt;&gt; a 1 &gt;&gt;&gt; b [2 3] &gt;&gt;&gt; a b = unpack([1 2] 1) &gt;&gt;&gt; a 1 &gt;&gt;&gt; b [2] &gt;&gt;&gt; a b = unpack([1] 1) &gt;&gt;&gt; a 1 &gt;&gt;&gt; b [] &gt;&gt;&gt; a b = unpack([] 1) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; ValueError: need more than 1 value to unpack &gt;&gt;&gt; a b c d = unpack(range(10) 3) &gt;&gt;&gt; a 0 &gt;&gt;&gt; b 1 &gt;&gt;&gt; c 2 &gt;&gt;&gt; d [3 4 5 6 7 8 9]  
setup.py develop 
randomInts = [random.randrange(2000) for _ in range(100)]  randomStrings = [str(x) for x in randomInts]  
+ os.path.join() in_file = input_file_name out_file = in_file + '.json'  
&gt;&gt;&gt; import ast &gt;&gt;&gt; x = u'[ "A""B""C"  " D"]' &gt;&gt;&gt; x = ast.literal_eval(x) &gt;&gt;&gt; x ['A' 'B' 'C' ' D'] &gt;&gt;&gt; x = [n.strip() for n in x] &gt;&gt;&gt; x ['A' 'B' 'C' 'D']  
import subprocess  s = """/usr/local/sbin/kamctl fifo profile_get_size myprofile | awk -F ':: ' '{print $2}'"""  p = subprocess.Popen(s shell=True stdout=subprocess.PIPE)  out err = p.communicate()  print 'out: %r' % out print 'err: %r' % err print 'status: %r' % p.returncode  
makedict(name) name makedict 23 23 name foo baz makedict('name type' locals()) locals() makedict def makedict(names *namespaces):   d = {}   for n in names.split():     for ns in namespaces:       if n in ns:         d[n] = ns[n]         break     else:       d[n] = None  # or raise an exception  inspect def item_blah(self item):     dispatch("blah" item)  class Item(object): pass  def _makedispcall(n):   def item_whatever(self item):     dispatch(n item)   item_whatever.__name__ = 'item_' + n   return item_whatever  for n in 'create delete blah but wait theres more'.split():   setattr(Item 'item_' + n _makedispcall(n))  
html = '''&lt;tr&gt;&lt;td valign="top"&gt;&lt;img src="/icons/unknown.gif" alt="[   ]"&gt;software_0.1-0.log&lt;/td&gt;&lt;td align="right"&gt;17-Nov-2009 13:46  &lt;/td&gt;&lt;td align="right"&gt;186K&lt;/td&gt;&lt;/tr&gt;'''  import BeautifulSoup soup = BeautifulSoup.BeautifulSoup(html) print soup.td.next.next print soup.td.nextSibling.next  software_0.1-0.log 17-Nov-2009 13:46  
class Node(object):   def __init__(self value left=None right=None):     self.value = value     self.left = left     self.right = right  def traverse(rootnode):   thislevel = [rootnode]   while thislevel:     nextlevel = list()     for n in thislevel:       print n.value       if n.left: nextlevel.append(n.left)       if n.right: nextlevel.append(n.right)     print     thislevel = nextlevel  t = Node(1 Node(2 Node(4 Node(7))) Node(3 Node(5) Node(6)))  traverse(t)  collection.deque list popleft push_back .reverse .pop deque pop pop_back 
r'[a-zA-Z0-9]+_[^_]+_[a-zA-Z0-9]+\.[a-zA-Z0-9]+'  
assert isinstance(swarm ParticleSwarmOptimization)  
for year in yearList for year in yearList:     os.chdir(year)     ...     os.chdir('..')  
str(tuple(array)) str(tuple(...)) repr str print '1 2' 1 2 &gt;&gt;&gt; array = [0.1 0.2] &gt;&gt;&gt; print str(tuple(array)) (0.10000000000000001 0.20000000000000001)  repr str float int &gt;&gt;&gt; print '(%s)' % (' '.join(str(x) for x in array)) (0.1 0.2)  list 
randomSample = [(random() - 0.5 random() - 0.5) for _ in range(count)]  count=10 random() [(-0.07 -0.40) (0.39 0.18) (0.13 0.29) (-0.11 -0.15)\ (-0.49 0.42) (-0.20 0.21) (-0.44 0.36) (0.22 -0.08)\ (0.21 0.31) (0.33 0.02)]  lambda f = lambda count: [(random() - 0.5 random() - 0.5) for _ in range(count)]  &gt;&gt;&gt; f(1) f(1) [(0.03 -0.09)] &gt;&gt;&gt; f(2) f(2) [(-0.13 0.38) (0.10 -0.04)] &gt;&gt;&gt; f(5) f(5) [(-0.38 -0.14) (0.31 -0.16) (-0.34 -0.46) (-0.45 0.28) (-0.01 -0.18)] &gt;&gt;&gt; f(10) f(10) [(0.01 -0.24) (0.39 -0.11) (-0.06 0.09) (0.42 -0.26) (0.24 -0.44)  (-0.29 -0.30) (-0.27 0.45) (0.10 -0.41) (0.36 -0.07) (0.00 -0.42)] &gt;&gt;&gt;   
{% regroup %} tags {% regroup tags|dictsort:"count" by count as sorted_tags %} ... {% for count in sorted_tags %} ...     {% for tag in count %}     ...     {% endfor %} {% endfor %}  
python testfile.py settings.py 
... if profile:     import cProfile     import lsprofcalltree      profileFileName = 'Profiles/pythonray_' + time.strftime('%Y%m%d_%H%M%S') + '.profile'      profile = cProfile.Profile()     profile.run('pilImage = camera.render(scene samplePattern)')      kProfile = lsprofcalltree.KCacheGrind(profile)      kFile = open (profileFileName 'w+')     kProfile.output(kFile)     kFile.close()      profile.print_stats()     else:                 pilImage = camera.render(scene samplePattern) ...  
: 
&gt;&gt;&gt; from lxml import objectify &gt;&gt;&gt; import StringIO &gt;&gt;&gt; tree = objectify.parse(StringIO.StringIO('&lt;parent&gt;&lt;child&gt;Billy&lt;/child&gt;&lt;child&gt;Bob&lt;/child&gt;&lt;/parent&gt;')) &gt;&gt;&gt; root = tree.getroot() &gt;&gt;&gt; root.tag 'parent' &gt;&gt;&gt; [(foo.tag foo.text) for foo in root.getchildren()] [('child' 'Billy') ('child' 'Bob')] &gt;&gt;&gt;  deleg = getattr(self'elem_' + str(root.tag)) deleg(tree)  
import time import numpy as np import csv  start = time.time() def elapsed():     return time.time() - start  # count data rows to preallocate array f = open('links.csv' 'rb') def count(f):     while 1:         block = f.read(65536)         if not block:              break         yield block.count('')  linecount = sum(count(f)) print '\n%.3fs: file has %s rows' % (elapsed() linecount)  # pre-allocate array and load data into array m = np.zeros(linecount dtype=[('a' np.uint32) ('b' np.uint32)]) f.seek(0) f = csv.reader(open('links.csv' 'rb')) for i row in enumerate(f):     m[i] = int(row[0]) int(row[1])  print '%.3fs: loaded' % elapsed() # sort in-place m.sort(order='b')  print '%.3fs: sorted' % elapsed()  6.139s: file has 33253213 lines 238.130s: read into memory 517.669s: sorted  kind="mergesort" kind="heapsort" 
unittest sys.path TestLoader new_project ??? antigravity.py ??? test_antigravity.py  $ cd new_project $ python -m unittest test_antigravity  new_project ??? antigravity ?   ??? __init__.py         # make it a package ?   ??? antigravity.py ??? test     ??? __init__.py         # also make test a package     ??? test_antigravity.py  test antigravity # import the package import antigravity  # import the antigravity module from antigravity import antigravity  # or an object inside the antigravity module from antigravity.antigravity import my_object  test_antigravity.py $ cd new_project $ python -m unittest test.test_antigravity  TestCase $ python -m unittest test.test_antigravity.GravityTestCase $ python -m unittest test.test_antigravity.GravityTestCase.test_method  test*.py -p --pattern $ cd new_project $ python -m unittest discover $ # Also works without discover for Python 3 $ # as suggested by @Burrito in the comments $ python -m unittest  test*.py test 
p = re.compile(r'([a-zA-Z0-9\-\+\.]+)\ ([0-9][0-9a-zA-Z\:\.\-]+)') iterator = p.finditer("amd64 build of dvdrip software 1:0.98.10-0.2svn20090909 in archive") for match in iterator:     print match.group() # Prints: software 1:0.98.10-0.2svn20090909  
application = service.Application("chatserver") internet.TCPServer(1025 factory).setServiceParent(application)  from twisted.internet import reactor reactor.listenTCP(1025 factory) reactor.run()  if __name__ == '__main__':     from twisted.internet import reactor     reactor.listenTCP(1025 factory)     reactor.run() else:     application = service.Application("chatserver")     internet.TCPServer(1025 factory).setServiceParent(application)  
import csv  reader = csv.reader(open('workers.csv' newline='') delimiter='' quotechar='"') workers = [ageName(row[0] row[1]) for row in reader]  &gt;&gt;&gt; workers[0].name 'jon'  class Student:     sports = []     def __init__(self row):        self.lname self.fname self.ID self.sport = row        self.sports.append(self.sport)     def get(self):        return (self.lname self.fname self.ID self.sport)  reader = csv.reader(open('copy-john.csv') delimiter='' quotechar='"') print "%-14s|%-10s|%-5s|%-11s" % tuple(reader.next()) # read header line from csv print "-" * 45 students = list(map(Student reader)) # read all remaining lines for student in students:     print "%-14s|%-10s|%-5s|%3s" % student.get()  # Printing all sports that are specified by students for s in set(Student.sports): # class attribute     print s Student.sports.count(s)  # Printing sports that are not picked  allsports = ['Basketball''Football''Other''Baseball''Handball''Soccer''Volleyball''I do not like sport'] for s in set(allsports) - set(Student.sports):     print s 0  allsports = ['Basketball''Football''Other''Baseball''Handball'              'Soccer''Volleyball''I do not like sport'] sports = [] reader = csv.reader(open('copy-john.csv')) for row in reader:     if reader.line_num: sports.append(s[3])     print "%-14s|%-10s|%-5s|%-11s" % tuple(s) for s in allsports: print s sports.count(s)  
nb_int nb_int nb_int 
Hello World  Hello World\r  class MyChat(basic.LineReceiver):     def __init__(self):         self.delimiter = "\n"      def connectionMade(self):         print "Got new client!"         self.factory.clients.append(self)      def connectionLost(self reason):         print "Lost a client!"         self.factory.clients.remove(self)      def lineReceived(self line):         print "received" repr(line)         for c in self.factory.clients:             c.message(line)      def message(self message):         self.transport.write(message + '\n')  factory = protocol.ServerFactory() factory.protocol = MyChat factory.clients = []  if __name__ == "__main__":     print "Building reactor...."     reactor.listenTCP(50000 factory)     print "Running ractor...."     reactor.run() else:     application = service.Application("chatserver")     internet.TCPServer(50000 factory).setServiceParent(application)  
thread.comment_set.all limit views.py # take first three sorted descending comments = thread.comment_set.order_by('-something')[:3]  context = Context({'comments':comments}) return HttpResponse(tmplt.render(context))  slice comments = list(thread.comment_set.all()) context = Context('comments':comments)  {% for comment in comments|slice:"-3:" %}  
str.split &gt;&gt;&gt; ' '.join("Please \n don't \t hurt \x0b me.".split()) "Please don't hurt me."  
class Visitor {     Stack&lt;Node&gt; stack = new Stack&lt;Node&gt;();  //    . . .      void visitPlus(PlusExp pe) {         pe.left.accept(this);         pe.right.accept(this);         Node b = stack.pop();         Node a = stack.pop();         stack.push(new BinOp(BinOp.PLUS a b));     }  
import pexpect c=pexpect.spawn('your_command') c.expect("expected_output_regular_expression" timeout=10)  
import re re.findall("\?read\.php=(\d+)"data)  
{% ifequal id "something"%}selected='selected'{% endifequal %}  
from __future__ import absolute_import # Import uncertainties.math from . import math as local_math import math as sys_math  
from twisted.internet import task  for i row in enumerate(instruments):     task.coiterate(self.table.SetValue(i j v) for j v in enumerate(row))  i row (lambda i=i row=row: ...)() task.coiterate() self.table = instruments 
&gt;&gt;&gt; os.path.basename(r'C:\abc.txt') 'abc.txt'  &gt;&gt;&gt; base ext = os.path.splitext(os.path.basename(r'C:\abc.txt')) &gt;&gt;&gt; base 'abc'  
&amp; to_proc given_code = 'n % 2 == 1' pred = eval "lambda { |n| #{given_code} }" p all = (1..10).select(&amp;pred)  
repr &gt;&gt;&gt; dict = {'one': 1 'two': 2} &gt;&gt;&gt; repr(dict) "{'two': 2 'one': 1}"  f = open( 'file.py' 'w' ) f.write( 'dict = ' + repr(dict) + '\n' ) f.close()  
SELECT * FROM customers WHERE name IN ('john' 'mary' 'jane');  
inspect.getouterframes() inspect.stack() 
on off ioff()  show() 
screenWidth = 10 screenHeight = 10  buf = [False] * screenWidth * screenHeight def draw3dpoint(xyz):     pt = int((((y / z) + (screenHeight/2)) * screenWidth) + (x / z) + (screenWidth/2))     buf[pt] = True  draw3dpoint(305) draw3dpoint(042) draw3dpoint(-3-43)  for y in range(screenHeight):     for x in range(screenWidth):         print(('#' if buf[y * screenWidth + x] else ' ') end='')     print()  for y in range(screenHeight):     for x in range(screenWidth):         print (buf[y * screenWidth + x] and '#' or ' ')     print ''  
locals() locals() locals() locals() locals() locals() locals() locals() 
&lt;field name="age" type="integer" indexed="true" stored="true"/&gt; &lt;field name="age" type="sint" indexed="true" stored="true"/&gt; 
setuptools easy_install setuptools parse_version ("4" "5" "6" "7") x.y.z-dev x.y.z 
   def make_action(quality):         return lambda modeladmin req qset: qset.update(quality=quality)     for q in models.Quality.objects.all():        action = make_action(q)        name = "mark_%s" % (q)        yield (name (action name "Mark selected as %s quality" % (q)))  yield def make_action(quality):     name = 'mark_%s' % quality     action = lambda modeladmin req qset: qset.update(quality=quality)     return (name (action name "Mark selected as %s quality" % quality))  def get_actions(self request):     return dict([make_action for q in models.Quality.objects.all()])  
digest = get_object_or_404(Digest id=id) if digest.user == request.user:   digest.feeds.clear()   #do your processing  digest = get_object_or_404(Digest id=id) if digest.user == request.user:   feed=digest.feeds.get(id=2)#get an instance of the feed to remove   digest.feeds.remove(feed)#remove the instance   
import * __all__ import * template_module import template_module as tm tm.this tm.that 
[hooks] precommit.runtests = python manage.py test  
new_log = ActivityLog.objects.create(user=self.user activity=activity)  
import nltk.corpus dir(nltk.corpus)  __LazyModule__... dir(nltk.corpus) 
b[a.argsort()] argsort &gt;&gt;&gt; a = numpy.array([2 3 1]) &gt;&gt;&gt; p = a.argsort() &gt;&gt;&gt; p [2 0 1]  &gt;&gt;&gt; a[p] array([1 2 3])  &gt;&gt;&gt; b = numpy.array([4 6 7]) &gt;&gt;&gt; b[p] array([7 4 6])  
import libnet from libnet.constants import *  net = libnet.context(RAW4 'venet0:0') ip = net.name2addr4('www.stackoverflow.com' RESOLVE) data = 'This is my payload.' udptag = net.build_udp(len=UDP_H+len(data) sp=54321 dp=54321 payload=data) packetlen = IPV4_H + UDP_H + len(data) iptag = net.autobuild_ipv4(len=packetlen prot=IPPROTO_UDP dst=ip)  net.write()  
copyfileobj 
sudo port selfupdate sudo port install python26  To fully complete your installation and make python 2.6 the default please run  sudo port install python_select   sudo python_select python26  sudo port install mysql5 ... ---&gt;  Installing mysql5 @5.1.41_0 The MySQL client has been installed. If you also want a MySQL server install the mysql5-server port.  sudo port install mysql5-server  ****************************************************** * In order to setup the database you might want to run * sudo -u _mysql mysql_install_db5 * if this is a new install ******************************************************  Installing MySQL system tables... OK Filling help tables... OK  To start mysqld at boot time you have to copy support-files/mysql.server to the right place for your system  PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER ! To do so start the server then issue the following commands:  /opt/local/lib/mysql5/bin/mysqladmin -u root password 'new-password' /opt/local/lib/mysql5/bin/mysqladmin -u root -h iMac.local password 'new-password'  Alternatively you can run: /opt/local/lib/mysql5/bin/mysql_secure_installation  which will also give you the option of removing the test databases and anonymous user created by default.  This is strongly recommended for production servers.  See the manual for more instructions.  You can start the MySQL daemon with: cd /opt/local ; /opt/local/lib/mysql5/bin/mysqld_safe &amp;  You can test the MySQL daemon with mysql-test-run.pl cd /opt/local/mysql-test ; perl mysql-test-run.pl  Please report any problems with the /opt/local/lib/mysql5/bin/mysqlbug script!  The latest information about MySQL is available at http://www.mysql.com/ Support MySQL by buying support/licenses from http://shop.mysql.com/  sudo port install py26-mysql  iMac:~ drhoden$ python Python 2.6.4 (r264:75706 Dec 15 2009 18:00:14)  [GCC 4.2.1 (Apple Inc. build 5646) (dot 1)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import MySQLdb /opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/MySQLdb/__init__.py:34: DeprecationWarning: the sets module is deprecated from sets import ImmutableSet &gt;&gt;&gt;   sudo port install py26-django  
logging Logger.addHandler() class Event(object):     pass  class Observable(object):     def __init__(self):         self.callbacks = []     def subscribe(self callback):         self.callbacks.append(callback)     def fire(self **attrs):         e = Event()         e.source = self         for k v in attrs.iteritems():             setattr(e k v)         for fn in self.callbacks:             fn(e)  Observable self.fire(type="progress" percent=50) 
def setdefaultattr(obj name value):     if not hasattr(obj name):         setattr(obj name value)     return getattr(obj name)  
from pyparsing import * Parameter = Literal('SPEED_X') | Literal('SPEED_Y') | Literal('SPEED_Z') UndParam = Suppress('_') + Parameter Identifier = SkipTo(UndParam) Value = Word(nums) Entry = Identifier + UndParam + Value  &gt;&gt;&gt; Entry.parseString('ABC_123_SPEED_X 123') (['ABC_123' 'SPEED_X' '123'] {})  SkipTo Identifier alphanums Identifier Identifier = Combine(Word(alphanums) +         ZeroOrMore('_' + ~Parameter + Word(alphanums)))  Combine Word(alphanums) 'ABC' 'ABC_123_SPEED_X 123' '_123' '_SPEED_X' ZeroOrMore Literal '_' '_123' Word(alphanums) '_123_SPEED_X' Parameter Identifier '_' + ~Parameter + Word(alphanums) ZeroOrMore OneOrMore Combine 'ABC _123_SPEED_X' 'ABC_123_SPEED_X' Keyword Literal Keyword 
{% templatetag %} {% templatetag openvariable %}Image.jpg|title{% templatetag closevariable %}  
rMyIcon = QtGui.QPixmap("printer.tif"); self.printButton.setIcon(QtGui.QIcon(rMyIcon))  
milliseconds = (c.days * 24 * 60 * 60 + c.seconds) * 1000 + c.microseconds / 1000.0  
[[ $(svnversion .) =~ ([0-9]+):*([0-9]*)([A-Z]*) ]] tuple[0]=${BASH_REMATCH[1]} tuple[1]=${BASH_REMATCH[2]:-${tuple[0]}} tuple[2]=${BASH_REMATCH[3]:-''}  ksh .sh.match ${.sh.match[1]} zsh match ${match[1]} setopt bashrematch ksharrays  
@register.filter(name='getkey') def getkey(value arg):     return value[arg]  {{test|getkey:'this works'}}  
{% gen_table somemodel %}  
&gt;&gt;&gt; [int(i) for i in str(12345)]  [1 2 3 4 5]  
db((db.mytable.create_date&gt;=query_dict['create_date1'])&amp;(db.mytable.create_date&lt;=query_dict['create_date2'])).select() 
re import re  info_lines = [     "Me"     "now"     "STABLE"     "FIX: some bug fixed"     "FIX: 10 24 3355"     "FIX: error 1024 was fixed"     "FIX: 15 (dupe of BUG:25) fixed crash on x = 250." ] linkText = r'&lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=\1"&gt;\1&lt;/a&gt;' bugSearch = re.compile(r'(?:BUG|FIX):(?:[ ]*(\d+))+') bugMatch = re.compile(r'(\d+)')  for k ln in enumerate(info_lines[3:]):     while True:         m = bugSearch.search(ln)         if m:             ln = ln[:m.start()] + bugMatch.sub(linkText m.group()) + ln[m.end():]         else:             break     info_lines[k+3] = ln  for ln in info_lines:     print ln  Me now STABLE FIX: some bug fixed FIX: &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=10"&gt;10&lt;/a&gt; &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=24"&gt;24&lt;/a&gt; &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=3355"&gt;3355&lt;/a&gt; FIX: error 1024 was fixed FIX: &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=15"&gt;15&lt;/a&gt; (dupe of BUG:&lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=25"&gt;25&lt;/a&gt;) fixed crash on x = 250.  linkText = r'\1&lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=\2"&gt;\2&lt;/a&gt;' bugSearch = re.compile(r'((?:BUG|FIX):(?: )?)(\d+)')  info_lines[3:] = [bugSearch.sub(linkText ln) for ln in info_lines[3:]]  for ln in info_lines:     print ln  Me now STABLE FIX: some bug fixed FIX: &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=10"&gt;10&lt;/a&gt; 24 3355 FIX: error 1024 was fixed FIX: &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=15"&gt;15&lt;/a&gt; (dupe of BUG:&lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=25"&gt;25&lt;/a&gt;) fixed crash on x = 250.  
D D B B D self id() &gt;&gt;&gt; class B(object): ...     def virtual_fn(self): ...         print 'in B.virtual_fn() for' id(self) ...     def other_virtual_fn(self): ...         print 'in B.other_virtual_fn() for' id(self) ...     def call_virtual(self): ...         print 'in B.call_virtual() for' id(self) ...  &gt;&gt;&gt; class D(B): ...     def virtual_fn(self): ...         print 'in D.virtual_fn() for' id(self) ...  &gt;&gt;&gt; b_obj = B() &gt;&gt;&gt; d_obj = D() &gt;&gt;&gt; id(b_obj) 1 &gt;&gt;&gt; id(d_obj) 2 &gt;&gt;&gt; &gt;&gt;&gt; b_obj.virtual_fn() in B.virtual_fn() for 1 &gt;&gt;&gt; d_obj.virtual_fn() in D.virtual_fn() for 2 &gt;&gt;&gt; d_obj.other_virtual_fn() in B.other_virtual_fn() for 2 &gt;&gt;&gt; &gt;&gt;&gt; B.virtual_fn(d_obj) in B.virtual_fn() for 2 &gt;&gt;&gt; &gt;&gt;&gt; d_obj.call_virtual() in B.call_virtual() for 2 in D.virtual_fn() for 2 &gt;&gt;&gt;  d_obj.virtual_fn() D.virtual_fn(d_obj) B.virtual_fn(d_obj) call_virtual 
shell&gt; ARCHFLAGS="-arch x86_64" python setup.py build shell&gt; sudo python setup.py install  
((n % M) + M) % M ((-1 % 10) + 10) % 10 ((17 % 10) + 10) % 10 == 17 % 10 
from ??? import RequestFactory from doctest import testmod DocTestFailure from django.test import TestCase  from myapp import views  class MyAppTest(TestCase):      fixtures = ['test_data.json']      def test_doctests(self):                         try:             testmod(views extraglobs={                 'REQUEST': RequestFactory()             } raise_on_error=True)         except DocTestFailure e:             self.fail(e)  def index(request):       """     returns the top 10 most clicked products      &gt;&gt;&gt; response = index(REQUEST)     &gt;&gt;&gt; [test response content here]      """          products = Product.objects.all()[:10]       products = match_pictures_with_products( products 10)  .       return render_to_response('products/product_list.html' {'products': products})  
x == 'STOP' break search_function while True:     x = raw_input("Enter a number to print specific table or STOP to quit: ")     if x == 'STOP':         break     search_function(int(x))  
validated_string = etree.tostring(tree) domDocument = minidom.parseString(validated_string)  getElementById etree.XMLDTDID etree.parseid 
table[hashes] = numpy.arange(len(hashes) dtype=numpy.uint32)  table[hashes] = xrange(len(hashes))  numpy.insert 
base64.b64encode("Hi %s! Your code is %s" % (data[0].decode('utf8').encode('latin1') data[0]))  
{} def store_birthinfo(self user birthday):     data = {}     for key in 'date' 'place' 'country':         data[key] = birthday.get(key '')     BirthInfo(user=user **data).put()  BirthInfo 
&lt;doc&gt; &lt;id name="X"&gt;   &lt;type name="A"&gt;     &lt;min val="100" id="80"/&gt;     &lt;max val="200" id="90"/&gt;    &lt;/type&gt;   &lt;type name="B"&gt;     &lt;min val="100" id="20"/&gt;     &lt;max val="20" id="90"/&gt;   &lt;/type&gt; &lt;/id&gt; &lt;/doc&gt;  from xml.dom import minidom data={} doc=minidom.parse("xml.txt") for n in doc.childNodes[0].childNodes:     if n.localName=="id":         id_name = n.attributes.item(0).nodeValue         data[id_name] = {}         for j in n.childNodes:             if j.localName=="type":                 type_name = j.attributes.item(0).nodeValue                 data[id_name][type_name] = [()()]                 for k in j.childNodes:                     if k.localName=="min":                         data[id_name][type_name][0] = \                             (k.attributes.item(1).nodeValue \                              k.attributes.item(0).nodeValue)                     if k.localName=="max":                         data[id_name][type_name][1] = \                             (k.attributes.item(1).nodeValue \                              k.attributes.item(0).nodeValue) print (data)  {'X': {'A': [('100' '80') ('200' '90')] 'B': [('100' '20') ('20' '90')]}}  
Article.objects.values('pub_date').annotate(article_count=Count('title'))  group by extract class Article(models.Model):     title = models.CharField(max_length=150 verbose_name=_("title"))     # ... more      pub_date = models.DateTimeField(verbose_name=_('publishing date'))     pub_year = models.IntegerField()     pub_month = models.IntegerField()  Article.objects.values('pub_year' 'pub_month').annotate(article_count=Count('title'))  pub_year pub_month save() pub_date models.Issue.objects.extra(select={'year': "EXTRACT(year FROM pub_date)" 'month': "EXTRACT(month from pub_date)"}).values('year' 'month').annotate(Count('title'))  extra year(pub_date) extract(year from pub_date) 
nc import socket  def netcat(hostname port content):     s = socket.socket(socket.AF_INET socket.SOCK_STREAM)     s.connect((hostname port))     s.sendall(content)     s.shutdown(socket.SHUT_WR)     while 1:         data = s.recv(1024)         if data == "":             break         print "Received:" repr(data)     print "Connection closed."     s.close()  shutdown 
from appscript import *  folder = '/path/to/folder'  ps = app('Adobe Photoshop CS4')  for f in app('Finder').items[mactypes.Alias(folder)].files.get(resulttype=k.alias):     ps.open(f)     # do stuff here...  
myFunction def myFunction():     print abc     abc = 123  def myFunction():     print "123"  abc = myFunction  abc # Style 1 abc = lambda: myFunction()  # Style 2 def abc():     return myFunction()  def myFunction():     print "123"  *args **kwargs # Style 1 abc = lambda *args **kwargs: myFunction(*args **kwargs)  # Style 2 def abc(*args **kwargs):     return myFunction(*args **kwargs)  def myFunction(x):     print x  
colprint([(name version[0].summary or '')       for (name version) in sorted(versions.iteritems())])  colprint(sorted([(name version[0].summary or '')              for (name version) in versions.iteritems()]))  [] 
from BaseHTTPServer import BaseHTTPRequestHandler HTTPServer    ....  class w_HttpThread(threading.Thread):     def __init__(self win):         ...  
Overlap = (M * T.transpose() &gt; 0)  # track T overlaps mask M   Connected = (Overlap * Overlap.tranpose() &gt; 0) # Connected masks Density[mask_idx] = numpy.take(T nonzero(Overlap[mask_idx :])[0] axis=0).sum(axis=0)  from numpy import * from scipy.sparse import csc_matrix  nvox = 1000000 ntracks = 300000 nmask = 100  # create about 100 entries per track tcoords = random.uniform(0 ntracks ntracks * 100).astype(int) vcoords = random.uniform(0 nvox ntracks * 100).astype(int) d = ones(ntracks * 100) T = csc_matrix((d  vstack((tcoords vcoords))) shape=(ntracks nvox) dtype=bool)  # create around 10000 entries per mask mcoords = random.uniform(0 nmask nmask * 10000).astype(int) vcoords = random.uniform(0 nvox nmask * 10000).astype(int) d = ones(nmask * 10000) M = csc_matrix((d vstack((mcoords vcoords))) shape=(nmask nvox) dtype=bool)  Overlap = (M * T.transpose()).astype(bool) # mask M overlaps track T Connected = (Overlap * Overlap.transpose()).astype(bool) # mask M1 and M2 are connected Density = Overlap * T.astype(float) # number of tracks overlapping mask M summed across voxels  
class A(db.Model):   b = db.ReferenceProperty()  class B(db.Model):   a = db.ReferenceProperty(A)  
tags_for_object tags_for_object: Tag {% tags_for_object [object] as [varname] %}  {% tags_for_object foo_object as tag_list %}  tag_list {% tags_for_object foo_object as tag_list %}  &lt;ul&gt; {% for tag in tag_list %}   &lt;li&gt;{{ tag }}&lt;/li&gt; {% endfor %} &lt;/ul&gt;  object objects object_list inlines/default.html 
for kv in mydict.items():   print(k '=' v)  for kv in mydict.iteritems():   print k '=' v  def log_wrap(mydict):     mystr = '\n'.join(['%s = %s' % (kv) for kv in mydict.iteritems()])     write_to_log(mydict)  log_wrap(mydict)  
diffkeys = [k for k in dict1 if dict1[k] != dict2[k]] for k in diffkeys:   print k ':' dict1[k] '-&gt;' dict2[k]  
commit=False form=TestPostForm(data=request.POST) if form.is_valid():   object=form.save(commit=False)   object.ip_address=request.META['REMOTE_ADDR']   object.save()  blank=True required=False 
read() import urllib2  n = 123  try:     url = 'http://localhost/%d.jpg' % n     urllib2.urlopen(url) except urllib2.HTTPError e:     if e.code == 404:         print '%d.jpg was not found' % n     else:         raise  # if the issue wasn't a 404 then re-raise the exception  
definitions = soup('ul')[0].findAll(text=True)  
"ILLEGAL".decode("utf8""ignore") &gt;&gt;&gt; "ILLEGA\xa0L".decode("utf8") ... UnicodeDecodeError: 'utf8' codec can't decode byte 0xa0 in position 6: unexpected code byte  &gt;&gt;&gt; "ILLEGA\xa0L".decode("utf8""ignore") u'ILLEGAL' &gt;&gt;&gt;  
class Setting(models.Model):     name = models.CharField(max_length=50)     value = models.TextField()  # ...  # Get the current slot setting current_slot = Setting.objects.get(name='current_slot').value  # ...  # Or wrap it in a helper method def get_setting(name default_value):     try:         return Setting.objects.get(name=name).value     except:         return default_value  current_slot = get_setting('current_slot' 0)  
ssh = paramiko.SSHClient() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) ssh.connect('first.com' username='luser' password='secret')  chan = ssh.invoke_shell()  # Ssh and wait for the password prompt. chan.send('ssh second.com\n') buff = '' while not buff.endswith('\'s password: '):     resp = chan.recv(9999)     buff += resp  # Send the password and wait for a prompt. chan.send('secret\n') buff = '' while not buff.endswith('some-prompt$ '):     resp = chan.recv(9999)     buff += resp  # Execute whatever command and wait for a prompt again. chan.send('ls\n') buff = '' while not buff.endswith('some-prompt$ '):     resp = chan.recv(9999)     buff += resp  # Now buff has the data I need. print 'buff' buff  ssh.close()  t = ssh.get_transport() chan = t.open_session() chan.get_pty()  chan = ssh.invoke_shell()  
max(a...) a w a b[w] w max(akey=lambda w: b[w]) 
class M(object):  
ElementTree lxml cElementTree ElementTree root import xml.etree.ElementTree as ET root = ET.parse('thefile.xml').getroot()  ElementTree for type_tag in root.findall('bar/type'):     value = type_tag.get('foobar')     print(value)  
import math def spc(x):   math.sin(x) + math.cos(x)  &gt;&gt;&gt; spc(decimal.Decimal('1.9')) 0.62301052082391117  .lower len 
total = sum([project.projectTotal for project in dict.values()]) success = sum([project.projectSuccess for project in dict.values()]) failed = sum([project.projectFailed for project in dict.values()])  (totalsuccessfailed) = reduce (lambda xy:(x[0]+y[0]x[1]+y[1]x[2]+y[2]) [(project.projectTotalproject.projectSuccessproject.projectFailed) for project in dict.values()])  
os.system('python "test.py" "a" "b" "c"') os.system('"test.py" "a" "b" "c"') os.system('test.py "a" "b" "c"') 
' " `  ? ” “ 
&lt;title&gt; from xml.dom.minidom import *  resp = "&lt;title&gt; This is a test! &lt;/title&gt;"  rssDoc = parseString(resp)  titles = rssDoc.getElementsByTagName('title')  moo = ""  for t in titles:     for child in t.childNodes:         if child.nodeType == child.TEXT_NODE:             moo += child.data         else:             moo += "not text "  print moo  
<a href="http://docs.python.org/library/datetime.html#datetime.date.strftime" rel="nofollow noreferrer">datetime.date.strftime() a> 
for i in [1 2 3]: for i in (1 2 3): for x in whatever():     anobj.amethod(x)  f = anobj.amethod for x in whatever():     f(x)  anobj.amethod anobj timeit $ python -mtimeit 'for x in (1 2 3): pass' 1000000 loops best of 3: 0.219 usec per loop $ python -mtimeit 'for x in [1 2 3]: pass' 1000000 loops best of 3: 0.512 usec per loop  $ python -mtimeit -s'Xs=[123]' 'for x in Xs: pass' 1000000 loops best of 3: 0.236 usec per loop $ python -mtimeit -s'Xs=(123)' 'for x in Xs: pass' 1000000 loops best of 3: 0.213 usec per loop  -s timeit * Function calls * Class instantiation * Arithmetic * 'Heavier' math operations such as sqrt()  $ python -mtimeit -s'def f(): pass' 'f()' 10000000 loops best of 3: 0.192 usec per loop $ python -mtimeit -s'class o: pass' 'o()' 1000000 loops best of 3: 0.315 usec per loop $ python -mtimeit -s'class n(object): pass' 'n()' 10000000 loops best of 3: 0.18 usec per loop  $ python -mtimeit -s'from math import sqrt' 'sqrt(1.2)' 1000000 loops best of 3: 0.22 usec per loop $ python -mtimeit '1.2**0.5' 10000000 loops best of 3: 0.0363 usec per loop $ python -mtimeit '1.2*0.5' 10000000 loops best of 3: 0.0407 usec per loop  sqrt ** $ python -mtimeit '1.2*0.5' 10000000 loops best of 3: 0.0407 usec per loop $ python -mtimeit -s'a=1.2; b=0.5' 'a*b' 10000000 loops best of 3: 0.0965 usec per loop $ python -mtimeit -s'a=1.2; b=0.5' 'a*0.5' 10000000 loops best of 3: 0.0957 usec per loop $ python -mtimeit -s'a=1.2; b=0.5' '1.2*b' 10000000 loops best of 3: 0.0932 usec per loop  $ python -mtimeit -s'a=1.2; b=0.5' 'a' 10000000 loops best of 3: 0.039 usec per loop  $ python -mtimeit -s'a=1.2; b=0.5' '1.2' 10000000 loops best of 3: 0.0225 usec per loop  
class PickleableStaticMethod(object):     def __init__(self fn cls=None):         self.cls = cls         self.fn = fn     def __call__(self *args **kwargs):         return self.fn(*args **kwargs)     def __get__(self obj cls):         return PickleableStaticMethod(self.fn cls)     def __getstate__(self):         return (self.cls self.fn.__name__)     def __setstate__(self state):         self.cls name = state         self.fn = getattr(self.cls name).fn  .__parentclass__ Pickler .dispatch Pickler.dispatch 
commands list file commands mycommands 
num = int(''.join(''.join(l) for l in lists))  def flatten( nested ):     for inner in nested:         for x in inner:             yield x  num = ''.join(flatten(lists))  
from itertools import islice  def split_every(n iterable):     i = iter(iterable)     piece = list(islice(i n))     while piece:         yield piece         piece = list(islice(i n))  &gt;&gt;&gt; list(split_every(5 range(9))) [[0 1 2 3 4] [5 6 7 8]]  &gt;&gt;&gt; list(split_every(3 (x**2 for x in range(20)))) [[0 1 4] [9 16 25] [36 49 64] [81 100 121] [144 169 196] [225 256 289] [324 361]]  &gt;&gt;&gt; [''.join(s) for s in split_every(6 'Hello world')] ['Hello ' 'world']  &gt;&gt;&gt; list(split_every(100 [])) []  
sorted(adict key=adict.get reverse=True)  adict.get [(k adict[k]) for k in sorted(adict key=adict.get reverse=True)]  $ python -mtimeit -s'adict=dict((xx**2) for x in range(-56))' '[(k adict[k]) for k in sorted(adict key=adict.get reverse=True)]' 100000 loops best of 3: 10.8 usec per loop $ python -mtimeit -s'adict=dict((xx**2) for x in range(-56)); from operator import itemgetter' 'sorted(adict.iteritems() key=itemgetter(1) reverse=True)' 100000 loops best of 3: 9.66 usec per loop $ python -mtimeit -s'adict=dict((xx**2) for x in range(-56))' 'sorted(adict.iteritems() key=lambda (kv): v reverse=True)' 100000 loops best of 3: 11.5 usec per loop  .get items itemgetter lambda get 
self class Desc(object):     default_value = 10     def __init__(self name):         self.name = name      def __get__(selfobjobjtype):         return obj.__dict__.get(self.name self.default_value)         # alternatively the following; but won't work with shadowing:         #return getattr(obj self.name self.default_value)      def __set__(selfobjval):         obj.__dict__[self.name] = val         # alternatively the following; but won't work with shadowing:         #setattr(obj self.name val)      def __delete__(selfobj):         pass   class MyClass(object):     desc = Desc('varx')  obj __dict__ class MyClass(object):     varx = Desc('varx')  MyClass().varx  MyClass().__dict__['varx']  
Python 2.5.1 (r251:54863 Apr 18 2007 08:51:08) [MSC v.1310 32 bit (Intel)] on win32 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import __future__ &gt;&gt;&gt; dir(__future__) ['CO_FUTURE_ABSOLUTE_IMPORT' 'CO_FUTURE_DIVISION' 'CO_FUTURE_WITH_STATEMENT' 'CO_GENERATOR_ALLOWED' 'CO_NESTED' '_Feature' '__all__' '__builtins__' __doc__' '__file__' '__name__' 'absolute_import' 'all_feature_names' 'division' 'generators' 'nested_scopes' 'with_statement'] &gt;&gt;&gt; __future__.with_statement _Feature((2 5 0 'alpha' 1) (2 6 0 'alpha' 0) 32768) &gt;&gt;&gt;  
function sharedStart(array){     var A= array.concat().sort()      a1= A[0] a2= A[A.length-1] L= a1.length i= 0;     while(i&lt;L &amp;&amp; a1.charAt(i)=== a2.charAt(i)) i++;     return a1.substring(0 i); }  sharedStart(['interspecies' 'interstelar' 'interstate'])  //=&gt; 'inters' sharedStart(['throne' 'throne'])                           //=&gt; 'throne' sharedStart(['throne' 'dungeon'])                          //=&gt; '' sharedStart(['cheese'])                                     //=&gt; 'cheese' sharedStart([])                                             //=&gt; '' sharedStart(['prefix' 'suffix'])                           //=&gt; ''  
         import sys     sys.path += ['%s/stuff' % (Dir('#').abspath)]      import configuration  
my_build_directory = '.'  echo_cmd = Command('always.echo' []  "echo %s" % (Dir('.').abspath)) Alias('echo' echo_cmd)  # =&gt; cd test-scons # =&gt; ls  #    build/  SConstruct  subdir/ # =&gt; scons echo  #    scons: Building targets ... #    echo HOME/test-scons/build/subdir #    HOME/test-scons/build/subdir #    scons: done building targets.  
hex &gt;&gt;&gt; a = 123 &gt;&gt;&gt; hex(a) '0x7b'  
import sys from PyQt4.QtCore import * from PyQt4.QtGui import *   class ImageLabel(QLabel):     def __init__(self image parent=None):         super(ImageLabel self).__init__(parent)         self.setPixmap(image)      def mousePressEvent(self event):         print 'I was pressed'       class AppForm(QMainWindow):     def __init__(self parent=None):         QMainWindow.__init__(self parent)          self.create_main_frame()             def create_main_frame(self):         name_label = QLabel("Here's a clickable image:")         img_label = ImageLabel(QPixmap('image.png'))          vbox = QVBoxLayout()         vbox.addWidget(name_label)         vbox.addWidget(img_label)          main_frame = QWidget()         main_frame.setLayout(vbox)         self.setCentralWidget(main_frame)   if __name__ == "__main__":     app = QApplication(sys.argv)     form = AppForm()     form.show()     app.exec_()  image.png 
def get_models_within_25 (self):     from django.db import connection transaction     cursor = connection.cursor()      cursor.execute("""SELECT id (          3959 * acos( cos( radians(37) ) * cos( radians( lat ) ) *          cos( radians( lng ) - radians(-122) ) + sin( radians(37) ) *          sin( radians( lat ) ) ) )         AS distance FROM stores HAVING distance &lt; 25         ORDER BY distance LIMIT 0  20;""")     ids = [row[0] for row in cursor.fetchall()]      return MyModel.filter(id__in=ids)  
readline easy_install fabric readline 
mysql&gt; select 1000/ 20990933630; +-------------------+ | 1000/ 20990933630 | +-------------------+ |            0.0000 |  +-------------------+ 1 row in set (0.00 sec)  mysql&gt; set local div_precision_increment = 30; Query OK 0 rows affected (0.00 sec)  mysql&gt; select 1000/ 20990933630; +----------------------------------+ | 1000/ 20990933630                | +----------------------------------+ | 0.000000047639615160843133969739 |  +----------------------------------+ 1 row in set (0.00 sec)  mysql&gt;   
for site in sites:   for line in files:      url = site + line  
import a.b.c.d   a.something a.b.something a.b.c.something  c.something b.something  from a.b.c.d import name1 name2 name3  
$facebook-&gt;require_login() auth_token 
start.py __init__.py parent.py ./start.py  ./pkg/__init__.py ./pkg/parent.py ./pkg/sub/__init__.py ./pkg/sub/relative.py  start.py import pkg.sub.relative  import parent start.py start.py parent.py __init__.py 
root.overridedirect(1) root.wm_attributes("-topmost" 1)  
switch 
dict((row[0] {"b": row[1] "c": row[2]}) for row in rows)  &gt;&gt;&gt; rows = [[1 2 3] [4 5 6]] &gt;&gt;&gt; dict((row[0] {"b": row[1] "c": row[2]}) for row in rows) {1: {'c': 3 'b': 2} 4: {'c': 6 'b': 5}}  dict((a {"b": b "c": c}) for a b c in rows)  
for lat long in zip(Latitudes Longitudes):     print lat long  
&gt;&gt;&gt; x = {0: {'count': 1000} 1: {'count': 2000}} &gt;&gt;&gt; sum(v['count'] for v in x.values())  3000  
mydict = {"&amp;y":"\033[0;30m"           "&amp;c":"\033[0;31m"           "&amp;b":"\033[0;32m"           "&amp;Y":"\033[0;33m"           "&amp;u":"\033[0;34m"} mystr = "The &amp;yquick &amp;cbrown &amp;bfox &amp;Yjumps over the &amp;ulazy dog"  for k v in mydict.iteritems():     mystr = mystr.replace(k v)  print mystr The ?[0;30mquick ?[0;31mbrown ?[0;32mfox ?[0;33mjumps over the ?[0;34mlazy dog  mydict = dict([('&amp;' + chr(i) str(i)) for i in list(range(65 91)) + list(range(97 123))])  # random inserts between keys from random import randint rawstr = ''.join(mydict.keys()) mystr = '' for i in range(0 len(rawstr) 2):     mystr += chr(randint(6591)) * randint(020) # insert between 0 and 20 chars  from time import time  # How many times to run each solution rep = 10000  print 'Running %d times with string length %d and ' \       'random inserts of lengths 0-20' % (rep len(mystr))  # My solution t = time() for x in range(rep):     for k v in mydict.items():         mystr.replace(k v)     #print(mystr) print '%-30s' % 'Tor fixed &amp; variable dict' time()-t  from re import sub compile escape  # Peter Hansen t = time() for x in range(rep):     sub(r'(&amp;[a-zA-Z])' r'%(\1)s' mystr) % mydict print '%-30s' % 'Peter fixed &amp; variable dict' time()-t  # Claudiu def multiple_replace(dict text):      # Create a regular expression  from the dictionary keys     regex = compile("(%s)" % "|".join(map(escape dict.keys())))      # For each match look-up corresponding value in dictionary     return regex.sub(lambda mo: dict[mo.string[mo.start():mo.end()]] text)  t = time() for x in range(rep):     multiple_replace(mydict mystr) print '%-30s' % 'Claudio variable dict' time()-t  # Claudiu - Precompiled regex = compile("(%s)" % "|".join(map(escape mydict.keys())))  t = time() for x in range(rep):     regex.sub(lambda mo: mydict[mo.string[mo.start():mo.end()]] mystr) print '%-30s' % 'Claudio fixed dict' time()-t  # Andrew Y - variable dict def mysubst(somestr somedict):   subs = somestr.split("&amp;")   return subs[0] + "".join(map(lambda arg: somedict["&amp;" + arg[0:1]] + arg[1:] subs[1:]))  t = time() for x in range(rep):     mysubst(mystr mydict) print '%-30s' % 'Andrew Y variable dict' time()-t  # Andrew Y - fixed def repl(s):   return mydict["&amp;"+s[0:1]] + s[1:]  t = time() for x in range(rep):     subs = mystr.split("&amp;")     res = subs[0] + "".join(map(repl subs[1:])) print '%-30s' % 'Andrew Y fixed dict' time()-t  Running 10000 times with string length 490 and random inserts of lengths 0-20 Tor fixed &amp; variable dict      1.04699993134 Peter fixed &amp; variable dict    0.218999862671 Claudio variable dict          2.48400020599 Claudio fixed dict             0.0940001010895 Andrew Y variable dict         0.0309998989105 Andrew Y fixed dict            0.0310001373291  mydict = dict([('&amp;' + chr(i) str(i)) for i in range(391024)])  # random inserts between keys from random import randint rawstr = ''.join(mydict.keys()) mystr = '' for i in range(0 len(rawstr) 2):     mystr += chr(randint(6591)) * randint(020) # insert between 0 and 20 chars  from time import time  # How many times to run each solution rep = 10000  print('Running %d times with string length %d and ' \       'random inserts of lengths 0-20' % (rep len(mystr)))  # Tor Valamo - too long #t = time() #for x in range(rep): #    for k v in mydict.items(): #        mystr.replace(k v) #print('%-30s' % 'Tor fixed &amp; variable dict' time()-t)  from re import sub compile escape  # Peter Hansen t = time() for x in range(rep):     sub(r'(&amp;[a-zA-Z])' r'%(\1)s' mystr) % mydict print('%-30s' % 'Peter fixed &amp; variable dict' time()-t)  # Peter 2 def dictsub(m):     return mydict[m.group()]  t = time() for x in range(rep):     sub(r'(&amp;[a-zA-Z])' dictsub mystr) print('%-30s' % 'Peter fixed dict' time()-t)  # Claudiu - too long #def multiple_replace(dict text):  #    # Create a regular expression  from the dictionary keys #    regex = compile("(%s)" % "|".join(map(escape dict.keys()))) # #    # For each match look-up corresponding value in dictionary #    return regex.sub(lambda mo: dict[mo.string[mo.start():mo.end()]] text) # #t = time() #for x in range(rep): #    multiple_replace(mydict mystr) #print('%-30s' % 'Claudio variable dict' time()-t)  # Claudiu - Precompiled regex = compile("(%s)" % "|".join(map(escape mydict.keys())))  t = time() for x in range(rep):     regex.sub(lambda mo: mydict[mo.string[mo.start():mo.end()]] mystr) print('%-30s' % 'Claudio fixed dict' time()-t)  # Separate setup for Andrew and gnibbler optimized dict mydict = dict((k[1] v) for k v in mydict.items())  # Andrew Y - variable dict def mysubst(somestr somedict):   subs = somestr.split("&amp;")   return subs[0] + "".join(map(lambda arg: somedict[arg[0:1]] + arg[1:] subs[1:]))  def mysubst2(somestr somedict):   subs = somestr.split("&amp;")   return subs[0].join(map(lambda arg: somedict[arg[0:1]] + arg[1:] subs[1:]))  t = time() for x in range(rep):     mysubst(mystr mydict) print('%-30s' % 'Andrew Y variable dict' time()-t) t = time() for x in range(rep):     mysubst2(mystr mydict) print('%-30s' % 'Andrew Y variable dict 2' time()-t)  # Andrew Y - fixed def repl(s):   return mydict[s[0:1]] + s[1:]  t = time() for x in range(rep):     subs = mystr.split("&amp;")     res = subs[0] + "".join(map(repl subs[1:])) print('%-30s' % 'Andrew Y fixed dict' time()-t)  # gnibbler t = time() for x in range(rep):     myparts = mystr.split("&amp;")     myparts[1:]=[mydict[x[0]]+x[1:] for x in myparts[1:]]     "".join(myparts) print('%-30s' % 'gnibbler fixed &amp; variable dict' time()-t)  Running 10000 times with string length 9491 and random inserts of lengths 0-20 Tor fixed &amp; variable dict      0.0 # disqualified 329 secs Peter fixed &amp; variable dict    2.07799983025 Peter fixed dict               1.53100013733  Claudio variable dict          0.0 # disqualified 37 secs Claudio fixed dict             1.5 Andrew Y variable dict         0.578000068665 Andrew Y variable dict 2       0.56299996376 Andrew Y fixed dict            0.56200003624 gnibbler fixed &amp; variable dict 0.530999898911  
def generate_png_from_markup_filename(filename):     def grab_markup_from_filename():         ...      ... # code that calls grab_markup_from_filename() to make the image     return image  def verify_admin(function_to_call):     def call_on_verify_admin(*args **kwargs):         if is_admin(global.session.user):             return function_to_call(*args **kwargs)         else:            throw Exception("Not Admin")     return call_on_verify_admin  # the return value of verify_admin()   def update_price(item price):      database.lookup(item).set_field('price' price)  update_price = verify_admin(update_price)   @verify_admin  def update_price(item price):      database.lookup(item).set_field('price' price)  
class myclass(object):     def __init__(self a b c):         self.a = a         self.b = b         self.c = c      def __repr__(self):         return "(a=%s b=%s c=%s)" % (self.a self.b self.c)  &gt;&gt;&gt; obj1 = myclass(1 2 3) &gt;&gt;&gt; obj2 = myclass(1 2 4) &gt;&gt;&gt; obj3 = myclass(2 5 1) &gt;&gt;&gt; obj4 = myclass(3 1 1)  &gt;&gt;&gt; print sorted([obj1 obj2 obj3 obj4] key=lambda o: o.a) [(a=1 b=2 c=3) (a=1 b=2 c=4) (a=2 b=5 c=1) (a=3 b=1 c=1)]  
monty = {      ('parrot''spam''cheese_shop'): 'sketch'      ('Cleese' 'Gilliam' 'Palin') : 'actors' }  working_monty = {} for k v in monty.items():     for key in k:         working_monty[key] = v  {'Gilliam': 'actors' 'Cleese': 'actors' 'parrot': 'sketch' 'spam': 'sketch' 'Palin': 'actors' 'cheese_shop': 'sketch'}  working_monty 
__init__.py views.py def view1(arg):     pass  def view2(arg):    pass  views/    __init__.py    viewsa.py    viewsb.py  viewsa.py def view1(arg):     pass  viewsb.py def view2(arg):     pass  __init__.py from viewsa import view1 from viewsb import view2  from views import view1 views.py views/__init__.py __init__.py import urlpattern urls.py views/__init__.py * from viewsa import * from viewsb import *  
numOfResults = sel.get_xpath_count(xpath) l = [] for i in range(1numOfResults+1):    l.append(sel.get_text(xpath='(%s)[%d]'%(xpath i)))  
os.fork() pty.fork() pty.fork() 
# file messages.py messages = dict(     struct1=[         dict(field="name" type="string" ignore=False)         dict(field="id" type="int" enums={0: "val1" 1: "val2"})         ]     struct2=[         dict(field="object" type="struct1")         ]     )  # in your program from messages import messages print messages['struct1'][0]["type"] print messages['struct1'][1]['type'] print messages['struct1'][1]['enums'][0] print messages['struct2'][0]['type']  messages = dict(     ...     strange_msg=[dict(field="field_%d" % i) for i in range(1000)]     ...     )  execfile import # file mainprogram.py  def read_messages_from_file(filename):     module_dict = {}     execfile(filename module_dict)     return module_dict['messages']  if __name__ == "__main__":     from pprint import pprint     import sys      for arg in sys.argv[1:]:         messages = read_messages_from_file(arg)         pprint(messages)  $ python mainprogram.py messages1 messages2 messages3  
struct &gt;&gt;&gt; import struct &gt;&gt;&gt; x = 173.125 &gt;&gt;&gt; s = struct.pack('&gt;f' x) &gt;&gt;&gt; ''.join('%2.2x' % ord(c) for c in s) '432d2000'  &gt;&gt;&gt; i = struct.unpack('&gt;l' s)[0] &gt;&gt;&gt; print hex(i) 0x432d2000  int float 
class _BaseA(object):     _intern = object.__dict__.keys()  class A(_BaseA):     myattribute = 1  print filter(lambda x: x not in A._intern+['__module__'] A.__dict__.keys())  'name convention' __len__ 
if __name__ == '__main__': 
try:     new_accountadmin_form.save() except IntegrityError:     new_accountadmin_form._errors["account"] = ["some message"]     new_accountadmin_form._errors["is_master"] = ["some message"]      del new_accountadmin_form.cleaned_data["account"]     del new_accountadmin_form.cleaned_data["is_master"]  forms.ValidationError class YouForm(forms.Form):     # Everything as before.     ...      def clean(self):        """ This is the form's clean method not a particular field's clean method """        cleaned_data = self.cleaned_data         account = cleaned_data.get("account")        is_master = cleaned_data.get("is_master")        username = cleaned_data.get("username")         if AccountAdmin.objects.filter(account=account is_master=is_master).count() &gt; 0:            del cleaned_data["account"]            del cleaned_data["is_master"]            raise forms.ValidationError("Account and is_master combination already exists.")         if AccountAdmin.objects.filter(account=account username=username).count() &gt; 0:            del cleaned_data["account"]            del cleaned_data["username"]            raise forms.ValidationError("Account and username combination already exists.")      # Always return the full collection of cleaned data.     return cleaned_data  
f() x x funcs = [] for x in range(10): funcs.append(lambda x=x: x) print [f() for f in funcs]  lambda x = x x 
filename='plot%03d.png'%i  %03d i filename='plot{0:03d}.png'.format(i)  marker='*' linestyle='none' plt.plot() plt.axis(...) plt.plot() #!/usr/bin/env python import matplotlib import matplotlib.pyplot as plt  matplotlib.use('Agg')   # This can also be set in ~/.matplotlib/matplotlibrc for i in range(03):     print 'Plotting'i     # Reading a single column data file     plt.plotfile('gen%s'%ilinestyle='none' marker='*')      plt.xlabel('Population')     plt.ylabel('Function Value')     plt.title('Generation%s'%i)     plt.axis([05000180])     # This (old-style string formatting) also works especial for Python versions &lt;2.6:     # filename='plot%03d.png'%i     filename='plot{0:03d}.png'.format(i)     print(filename)     plt.savefig(filename)     # plt.clf()  # clear current figure  
class ResponseDTO(object): # New style classes are just better use them.      def __init__(self):         self.success = True # That's the idiomatic way to define an instance member.         self.errors = [] # Empty list literal equivalent to list() and more idiomatic.      def append_error(self code message exception):         self.success = False         self.errors.append(ErrorDefinition(code message exception))  
form.fields['template'].choices = templates_as_choices(request)  def templates_as_choices(request):     templates = []     default = []     user = []     for template in Template.objects.filter(default=1).order_by('name'):         default.append([template.id template.name])      for template in Template.objects.filter(user=request.user).order_by('name'):         user.append([template.id template.name])      templates.append(['Default Templates' default])     templates.append(['User Templates' user])      return templates  
import re  def type_and_size(s):     return re.split('[][]' s+'[1]' 2)[:2]  type_and_size('char') ['char' '1']  type_and_size('char[5]') ['char' '5']  type size = type_and_size('char[5]')  
NUL = '\x00' def lines_without_nulls(path):     with open(path 'Urb') as f:         for line in f:             yield line.replace(NUL '').replace('\n' '\r')  
def safer( func ):     def safer(*args**kwargs):         try:             return func(*args**kwargs)         except Exceptione:             print "Couldn't call" func             # do_stuff( e )     return safer   thread = threading.Thread(target=safer(foo)args=(123))  
httplib.HTTP getresponse() 
datetime.datetime.strptime() datetime.datetime.strftime() '%d-%b-%Y' time 
print print() print("Hello World!") 
utils.py def log_traceback(exception args):     import sys traceback logging     exceptionType exceptionValue exceptionTraceback = sys.exc_info()     logging.debug(exception)     logging.debug(args)     for tb in traceback.format_exception(exceptionType exceptionValue exceptionTraceback):         logging.debug(tb)  site_logging.py import logging import sys  logger = logging.getLogger('') logger.setLevel(logging.DEBUG) handler = logging.StreamHandler(sys.stderr) handler.setLevel(logging.DEBUG) formatter = logging.Formatter('%(levelname)-8s %(message)s') handler.setFormatter(formatter) logger.addHandler(handler)  settings.py import site_logging  from where.is.your.utils import log_traceback try:    `do something` except Exception args:     log_traceback(Exception args)  
multis = '%s '*23 multis = multis[:-2]  multis = ' '.join(['%s'] * 23)  ziplist             (row[0] row[1] row[2] row[3] row[4] row[5] row[6]             row[7] row[8] row[9] row[10] row[11] row[12]             row[13] row[14] row[15] row[16] row[17] row[18]             row[19] row[20] row[21] row[22])  tuple(row) row INSERT for row in csvReader:   c.execute(sql_statement row)  c.executemany(sql_statement csvReader)  
data="""Spec 2 Included : TRUE Spec 2 Label: 19-Flat2-HS3 Spec 3 Included : FALSE Spec 3 Label: 4-1-Bead1-HS3"""  #data=open("data.txt").read()  import re  data=dict(re.findall('(Spec \d+ (?:Included|Label))\s*:\s*(\S+)'data))  data {'Spec 3 Included': 'FALSE' 'Spec 2 Included': 'TRUE' 'Spec 3 Label': '4-1-Bead1-HS3' 'Spec 2 Label': '19-Flat2-HS3'}  from xml.dom import minidom  dom = minidom.parseString(xml_text) params=dom.getElementsByTagName("Parameter") for param in params:     name=param.getAttribute("name")     if name in data:         for item in param.getElementsByTagName("*"): # You may change to "Result" or "Value" only             item.firstChild.replaceWholeText(data[name])  print dom.toxml()  #write to file open("output.xml""wb").write(dom.toxml())  &lt;?xml version="1.0" ?&gt;&lt;ParameterData&gt;   &lt;CreationInfo date="10/28/2009 03:05:14 PM" user="manoj"/&gt;   &lt;ParameterList count="85"&gt;     &lt;Parameter mode="both" name="Spec 2 Included" type="boolean"&gt;       &lt;Value&gt;TRUE&lt;/Value&gt;       &lt;Result&gt;TRUE&lt;/Result&gt;     &lt;/Parameter&gt;     &lt;Parameter mode="both" name="Spec 2 Label" type="string"&gt;       &lt;Value&gt;19-Flat2-HS3&lt;/Value&gt;       &lt;Result&gt;19-Flat2-HS3&lt;/Result&gt;     &lt;/Parameter&gt;     &lt;Parameter mode="both" name="Spec 3 Included" type="boolean"&gt;       &lt;Value&gt;FALSE&lt;/Value&gt;       &lt;Result&gt;FALSE&lt;/Result&gt;     &lt;/Parameter&gt;     &lt;Parameter mode="both" name="Spec 3 Label" type="string"&gt;       &lt;Value&gt;4-1-Bead1-HS3&lt;/Value&gt;       &lt;Result&gt;4-1-Bead1-HS3&lt;/Result&gt;     &lt;/Parameter&gt;   &lt;/ParameterList&gt; &lt;/ParameterData&gt;  
&gt;&gt;&gt; import ast &gt;&gt;&gt; mylist = ast.literal_eval("['foo' ['cat' ['ant' 'bee'] 'dog'] 'bar' 'baz']") &gt;&gt;&gt; mylist ['foo' ['cat' ['ant' 'bee'] 'dog'] 'bar' 'baz']  
errptr = file(errFile "r")  if os.path.exists(errFile):   errptr = file(errFile "r")   errData = errptr.read()   errptr.close()   raise Exception("Error executing command: " + repr(errData))  /usr/bin/si si 
call subprocess.call /usr/bin/si createsandbox which si "si createsandbox" + "--no ..." ["/usr/bin/si""createsandbox --no ..."] sys sandbox self.sandbox def mks_create_sandbox(): def mks_create_sandbox(self): 
seq= something.get() root.copy( seq[0] ) foo( seq[0] ) for member in seq[1:]:     somewhereElse.copy(member)     foo( member )  seq_iter= iter( something.get() ) head = seq_iter.next() root.copy( head ) foo( head ) for member in seq_iter:     somewhereElse.copy( member )     foo( member )  
h1 = Image.open("image1").histogram() h2 = Image.open("image2").histogram()  rms = math.sqrt(reduce(operator.add     map(lambda ab: (a-b)**2 h1 h2))/len(h1))  
return from mksfunction import mks_create_sandbox   import os.path  if not os.path.exists('home/build/test/new_sandbox/project.pj'):     mks_create_sandbox()  
class Class1(object):     def method( self theA params ):         theA.methA( params )  class Class2(object):     def method( self theA params ):         theA.methB( params )  class Class3(object):     def method( self theA params ):         theA.methC( params )  class A(object):     def methA(parm1 parm2)         ...      def methB(parm1 parm2)         ...      def methC(parm1 parm2)         ...      def manager(parm1 method params)         ...         param1.method( self params )  
ndx {{ test.0.bar }}  {{ foo.bar }} foo[bar] foo['bar'] 
-Wl-search_paths_first 
dict()  i = int("1")  dict() &gt;&gt;&gt; from timeit import Timer &gt;&gt;&gt; Timer("mydict = {'a' : 1 'b' : 2 'c' : 'three'}").timeit() 0.91826782454194589 &gt;&gt;&gt; Timer("mydict = dict(a=1 b=2 c='three')").timeit() 1.9494664824719337  
zipped = urllib.urlopen('www.abc.com/xyz.zip') buf = cStringIO.StringIO(zipped.read()) zipped.close() unzipped = zipfile.ZipFile(buf 'r') for f_info in unzipped.infolist():    logfile = unzipped.open(f_info)    # Here's where we buffer:    logbuffer = cStringIO.StringIO(logfile.read())    logfile.close()     for handler in [handler1 handler2]:       handler(logbuffer)       # StringIO objects support seek():       logbuffer.seek(0)     unzipped.extract(f_info)  
Table Table [x for x in coords if x['agent'] == 1]  [x["agent"] for x in coords if x['agent'] == 1]  [x[:] for x in coords if x['agent'] == 1]  [x.fetch_all_fields() for x in coords if x['agent'] == 1]  
(?:[\d]*[\\.\ \-]+)*  (?:[\d. \-]*[. \-])?  [' Aug  6 20:43:20 2003' ' Mar 14 06:02:55 1973' ' March 14 06:02:55 AM 1973' ' Jun 16 20:18:03 1981'] ['2003-08-06' '2003-08-07' '2003-07-23' '1973-01-18' '3/14/1973' '16/6/1981' '16/6/1981' '16/6/1981' '16/6/1981' '08/08/2003']  
a=b operator= operator= foo2 = Foo(foo1) 
from sqlalchemy import * from sqlalchemy.orm import *  engine = create_engine('sqlite:///:memory:' echo='debug')  m = MetaData()  parent = Table('parent' m                  Column('id' Integer primary_key=True) )  child = Table('child' m                  Column('id' Integer primary_key=True)                 Column('parent_id' Integer ForeignKey('parent.id'))                 Column('sortkey' Integer)                 )  m.create_all(engine)  class Parent(object):     def __init__(self children):         self.all_c = children  class Child(object):     def __init__(self sortkey):         self.sortkey = sortkey  latest_c = select([func.max(child.c.sortkey)]).\                 where(child.c.parent_id==parent.c.id).\                 correlate(parent).\                 as_scalar()  mapper(Parent parent properties={     'all_c':relation(Child)     'latest_c':relation(Child                              primaryjoin=and_(                                 child.c.sortkey==latest_c                                  child.c.parent_id==parent.c.id                             )                             uselist=False     ) })  mapper(Child child)  session = sessionmaker(engine)()  p1 p2 p3 = Parent([Child('a') Child('b') Child('c')]) \                 Parent([Child('b') Child('c')])\                 Parent([Child('f') Child('g') Child('c')])  session.add_all([p1 p2 p3]) session.commit()  assert p1.latest_c.sortkey == 'c' assert p2.latest_c.sortkey == 'c' assert p3.latest_c.sortkey == 'g'  latest_c = select([child.c.id]).\                 where(child.c.parent_id==parent.c.id).\                 order_by(child.c.sortkey.desc()).\                 limit(1).\                 correlate(parent).\                 as_scalar()  mapper(Parent parent properties={     'all_c':relation(Child)     'latest_c':relation(Child                              primaryjoin=and_(                                 child.c.id==latest_c                                  child.c.parent_id==parent.c.id                             )                             uselist=False     ) })  
get_next_by_foo get_previous_by_foo DateField DateTimeField null=True &gt;&gt;&gt; from foo.models import Request &gt;&gt;&gt; r = Request.objects.get(id=1) &gt;&gt;&gt; r.get_next_by_created() &lt;Request: xyz246&gt;  DoesNotExist &gt;&gt;&gt; r2 = r.get_next_by_created() &gt;&gt;&gt; r2.get_next_by_created() ... DoesNotExist: Request matching query does not exist.  
# Answer to question 1 - just use the built-in functionality of lists. # # There is no need to use variables when lists let you do so much more #   in a quick and organised fashion. lines = [] for line in open_file:    lines.append(line)  
class Node(models.Model):     #other class attributes  class Thingy(Node):     name       = models.CharField(max_length=100)     otherstuff = models.CharField(max_length=255)  
&gt;&gt;&gt; import yaml &gt;&gt;&gt; s = '{value: "82363549923gnyh49c9djl239pjm01223" id: 17893}' &gt;&gt;&gt; yaml.load(s) {'id': 17893 'value': '82363549923gnyh49c9djl239pjm01223'}  
[line.strip().split() for line in z if not line.startswith(('a' 'b'))]  [     line.strip().split()     for line in z if line.endswith('c') and not line.startswith(('a' 'b')) ]  
date_list pub_date archive_year extra_context date_list {% for month in date_list %}     &lt;li&gt;         &lt;a href="/blog/{{ year }}/{{ month|date:"b" }}/"&gt;{{ month|date:"F" }}&lt;/a&gt;     &lt;/li&gt; {% endfor %}  
def linetype(line):     if line.startswith("a"):         return 1     if line.startswith("b"):         return 2     try:         parts = [int(x) for x in line.split()]         if len(parts) &gt;=3 and parts[-1] == 0:             return 3     except:         pass     raise Exception("Unknown Line Type")  maxtype = 0  for line in open("filename""r"):  #iterate over each line in the file     line = line.strip() # strip any whitespace     if line == "":      # if we're left with a blank line         continue        # continue to the next iteration      lt = linetype(line) # get the line type of the line                         # or raise an exception if unknown type     if lt &gt;= maxtype:   # as long as our type is increasing         maxtype = lt    # note the current type     else:               # otherwise line type decreased         raise Exception("Out of Order")  # so raise exception  print "Validates"  # if we made it here we validated  
source create database test;  sql=open("test.sql").read()  cursor.execute(sql);  
str.encode str.encode([encoding[ errors]])  codecs.register_error register_error 
verbose_name name name = models.CharField(max_length=200 verbose_name="Kaardi peakiri" help_text="Sisesta kaardi pealkiri (maksimum tähemärkide arv on 38)" blank=False null=False)  name 
sys import sys  #Functions def a(filename): pass def b(filename): pass def c(filename): pass  #Function chooser func_arg = {"-a": a "-b": b "-c": c}  #Do it if __name__ == "__main__":     func_arg[sys.argv[1]](sys.argv[2])  a(filename) python file.py -a filename 
for key val in values:     fieldName = valueToFieldName[key]     fieldType = fieldNameToType[fieldName]     if fieldType is int:         s = 'object.%s = int(%s)' % (fieldName fieldType)      #Many clauses like this...  exec(s)  
&gt;&gt;&gt; import bisect &gt;&gt;&gt; grid = [0 5 10 15 20] &gt;&gt;&gt; value = 8 &gt;&gt;&gt; bisect.bisect(grid value) 2  
random.py tempfile random random 
EXTERNAL_LOGIN_APP = 'drupal_login' INSTALLED_APPS = (                   '...'                   EXTERNAL_LOGIN_APP                 )  def external_login_app():     return __import__(EXTERNAL_LOGIN_APP …)  external_login_app = settings.external_login_app()  
POST / HTTP/1.1 User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8k zlib/1.2.3 Host: 127.0.0.1  Accept: */* Content-Length: 188 Expect: 100-continue  bwckschd.p_disp_dyn_sched&amp;p_term=201010  POST / HTTP/1.1 Accept-Encoding: identity Content-Length: 60 Host: 127.0.0.1 Content-Type: application/x-www-form-urlencoded Connection: close User-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)  p_calling_proc%3Dbwckschd.p_disp_dyn_sched%26p_term%3D201010  
li li = {} for j in range(10):     li[j] = []  
return GetFileContents return bytearray(fileContents)  bytearray bytes 
HKEY_CLASSES_ROOT\Applications\python26.exe\shell\open\command  "C:\Python26\python26.exe" "%1" %*  %*  HKEY_CLASSES_ROOT\py_auto_file\shell\open\command  HKEY_CLASSES_ROOT\Applications\python.exe\shell\open\command python26.exe python.exe HKEY_CLASSES_ROOT\py_auto_file\shell\open\command 
someval = mlab.set(h'XData') mlab.set(h'XData'[000]nout=0) 
BOOST_PYTHON_MODULE(MyLib) {     PyEval_InitThreads();     class_ stuff  
from weakref import ref from time import sleep  class Person4:     '''Represents a person'''     population = 0      def __init__(self name):         '''Initialize the person's data'''         self.name = name         print 'Initializing %s'% self.name          #When the person is created they increase the population         Person4.population += 1          self._wr = ref(self lambda wr name=self.name: Person4_finalizer(name))  def Person4_finalizer(name):         '''I am dying'''         print '%s says bye' % name          Person4.population -= 1          if Person4.population == 0:             print 'I am the last one'         else:             print 'There are still %d left' % Person4.population  p1 = Person4("one") p2 = Person4("two") p3 = Person4("three")  del p2 del p3 sleep(5)  Initializing one Initializing two Initializing three two says bye There are still 2 left three says bye There are still 1 left one says bye I am the last one  
from Bio.Blast import NCBIXML with open('xml/results/file') as handle:     all_records = NCBIXML.parse(handle)     first_record = all_records.next()  
&lt;&lt; __lshift__ . __getattr__ __getattribute__ __setattr__ = &lt;&lt; &lt;&lt; &gt;&gt; 
float __init__ self float float __init__ __new__ int str tuple __init__ self self __new__ float class My_Number(float):   def __new__(cls float_string):     try: return float.__new__(cls float_string)     except (TypeError ValueError): raise My_Error(float_string)  __init__ &gt;&gt;&gt; n = My_Number('foo') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;stdin&gt;" line 4 in __new__ NameError: global name 'My_Error' is not defined  My_Error 
from bs4 import BeautifulSoup from bs4.element import Comment import urllib.request   def tag_visible(element):     if element.parent.name in ['style' 'script' 'head' 'title' 'meta' '[document]']:         return False     if isinstance(element Comment):         return False     return True   def text_from_html(body):     soup = BeautifulSoup(body 'html.parser')     texts = soup.findAll(text=True)     visible_texts = filter(tag_visible texts)       return u" ".join(t.strip() for t in visible_texts)  html = urllib.request.urlopen('http://www.nytimes.com/2009/12/21/us/21storm.html').read() print(text_from_html(html))  
p.stdin.flush() 
/(?&lt;!&amp;)&amp;/  
def count(self):     self.running=True     while self.running:         self.cnt+=1         print self.cnt         self.lbl.setText(str(self.cnt))         self.repaint()  self.running=False repaint time.sleep 
print &gt;&gt;&gt; import sys &gt;&gt;&gt; class tee(object): ...   def __init__(self fn='/tmp/foo.txt'): ...     self.o = sys.stdout ...     self.f = open(fn 'w') ...   def write(self s): ...     self.o.write(s) ...     self.f.write(s) ...  &gt;&gt;&gt; sys.stdout = tee() &gt;&gt;&gt; print('hello world!') hello world! &gt;&gt;&gt;  $ cat /tmp/foo.txt hello world!  retvalue = subprocess.check_call(cmd shell=True)  cmd p = subprocess.Popen(cmd shell=True stdout=subprocess.PIPE) so se = p.communicate() print(so) retvalue = p.returncode  cmd .communicate def echoed_input(prompt):     response = raw_input(prompt)     sys.stdout.f.write(response)     return response  raw_input tee communicate p = subprocess.Popen(cmd shell=True stdout=subprocess.PIPE                       stderr=subprocess.STDOUT) so se = p.communicate() print(so) retvalue = p.returncode  p = subprocess.Popen(cmd shell=True stdout=subprocess.PIPE                       stderr=subprocess.STDOUT) for line in p.stdout:   sys.stdout.write(p) p.wait() retvalue = p.returncode  cmd 
BOOST_PYTHON_MODULE class_ BOOST_PYTHON_MODULE #include &lt;iostream&gt; #include &lt;boost/python.hpp&gt; #include &lt;boost/python/suite/indexing/vector_indexing_suite.hpp&gt; using namespace boost::python; using namespace std;  int main() {     vector&lt;double&gt; vec;     vec.push_back(1.2);     vec.push_back(3.4);     try {                Py_Initialize();              boost::python::class_&lt;std::vector&lt;double&gt; &gt;("PyVec")             .def(boost::python::vector_indexing_suite&lt;std::vector&lt;double&gt; &gt;());              object main_module = import("__main__");             object globals = main_module.attr("__dict__");             globals["var"]=vec;             object ignored = exec("result = sum(var)" globals globals);             double result = extract&lt;double&gt;(globals["result"]);             std::cout &lt;&lt; result &lt;&lt; std::endl;     } catch( error_already_set ) {             PyErr_Print();     }     return 0; }  
aList = range(10) anIterator = iter(aList)  for item in anIterator:     print item     if item &gt; 4: break  for item in anIterator:     print item  
datetime.combine(date time) datetime.time from datetime import date from datetime import datetime  dt = datetime.combine(date.today() datetime.min.time())  
var userName = {{name}}  var userName = Bob  var userName = '{{name}}';  &amp; &lt; escapejs var userName = '{{name|escapejs}}';  &lt; &lt;/script&gt; 
lambda x: 2**X x X 
int inp = int(input("Enter a number:"))  inp = input("Enter a number:")  inp n NameError n = 0 for n = n + i;  n = n + int(i)  '7' 7 
class p1(object):pass class p2(p1):pass  issubclass(p2 p1)  
PIL/BmpImagePlugin.py 
class PickleableFile(object):     def __init__(self filename mode='rb'):         self.filename = filename         self.mode = mode         self.file = open(filename mode)     def __getstate__(self):         state = dict(filename=self.filename mode=self.mode                      closed=self.file.closed)         if not self.file.closed:             state['filepos'] = self.file.tell()         return state     def __setstate__(self state):         self.filename = state['filename']         self.mode = state['mode']         self.file = open(self.filename self.mode)         if state['closed']: self.file.close()         else: self.file.seek(state['filepos'])     def __getattr__(self attr):         return getattr(self.file attr)  class WordWindowReader:     def __init__(self filenames window_size):         self.filenames = filenames         self.window_size = window_size         self.filenum = 0         self.stream = None         self.filepos = 0         self.prevwords = []         self.current_line = []      def __iter__(self):         return self      def next(self):         # Read through files until we have a non-empty current line.         while not self.current_line:             if self.stream is None:                 if self.filenum &gt;= len(self.filenames):                     raise StopIteration                 else:                     self.stream = PickleableFile(self.filenames[self.filenum])                     self.stream.seek(self.filepos)                     self.prevwords = []             line = self.stream.readline()             self.filepos = self.stream.tell()             if line == '':                 # End of file.                 self.stream = None                 self.filenum += 1                 self.filepos = 0             else:                 # Reverse line so we can pop off words.                 self.current_line = line.split()[::-1]          # Get the first word of the current line and add it to         # prevwords.  Truncate prevwords when necessary.         word = self.current_line.pop()         self.prevwords.append(word)         if len(self.prevwords) &gt; self.window_size:             self.prevwords = self.prevwords[-self.window_size:]          # If we have enough words then return a word window;         # otherwise go on to the next word.         if len(self.prevwords) == self.window_size:             return self.prevwords         else:             return self.next()  
POST x 
class Foo(object):   def __init__(self val=2):      self.val = val   def __getstate__(self):      print "I'm being pickled"      self.val *= 2      return self.__dict__   def __setstate__(self d):      print "I'm being unpickled with these values:" d      self.__dict__ = d      self.val *= 3  import pickle f = Foo() f_string = pickle.dumps(f) f_new = pickle.loads(f_string)  
y = set(x.flatten())  x.flat x.flatten() x.ravel() y = set(x.flat)  y = numpy.unique(x)  set(x.flat) set set(numpy.unique(x)) 
#!/usr/bin/env python   # import mks_function .. you won't need this ...  from mks_function import mks_create_sandbox   import os datetime    # import time sys .. these aren't used in this snippet  # import os.path .. just refer to os.path since os is already imported  # get today's date as a datetime type   todaystr = datetime.date.today().isoformat()    # .. use os.path.join() if not os.path.exists(os.path.join('/home/build/test/sandboxes/' todaystr)):       os.mkdir(os.path.join('/home/build/test/sandboxes/' todaystr))   # .. 'else: pass' is unnecessary  if not os.path.exists(os.path.join(     '/home/build/test/sandboxes/' todaystr '/new_sandbox/project.pj')):        # i'm not seen that the sandbox is created in the right directory here     # maybe you should change the working directory via ..     # os.chdir(os.path.join('/home/build/test/sandboxes/' todaystr))     mks_create_sandbox()    if os.path.exists(os.path.join(     '/home/build/test/sandboxes/' todaystr '/new_sandbox/Makefile')):        # .. change to the right directory     os.chdir(os.path.join(         '/home/build/test/sandboxes/' todaystr '/new_sandbox/'))      os.system("make &gt; make_results.txt 2&gt;&amp;1")    
In [1]: theModule = __import__("the_module")  In [2]: toImport = getattr(theModule "ToImport")  In [3]: toImport.initialize("parameter") parameter  
class MyForm(ModelForm):    class Meta:       model = YourModel     some_field = forms.CharField(required=False help_text="Whatever you want")  
&gt;&gt;&gt; import ctypes &gt;&gt;&gt; ctypes.windll.LoadLibrary("c:\tools\depends\depends.dll") Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "c:\tools\python271\lib\ctypes\__init__.py" line 431 in LoadLibrary     return self._dlltype(name)   File "c:\tools\python271\lib\ctypes\__init__.py" line 353 in __init__     self._handle = _dlopen(self._name mode) WindowsError: [Error 126] The specified module could not be found  &gt;&gt;&gt; import ctypes &gt;&gt;&gt; ctypes.windll.LoadLibrary("c:\\tools\\depends\\depends.dll")  &gt;&gt;&gt; import ctypes &gt;&gt;&gt; ctypes.windll.LoadLibrary("c:/tools/depends/depends.dll")  &gt;&gt;&gt; import ctypes &gt;&gt;&gt; ctypes.windll.LoadLibrary(r"c:\tools\depends\depends.dll")  
# get_or_create() a person with similar first names.  p created = Person.objects.get_or_create(     first_name='John'     last_name='Lennon'     defaults={'birthday': date(1940 10 9)} )  # get_or_create() didn't have to create an object. &gt;&gt;&gt; created False  defaults defaults customer.sourcecreated = Source.objects.get_or_create(name="Website")  
def slices(seq length prefer_last=False):   unique = {}   if prefer_last: # this doesn't have to be a parameter just choose one     for start in xrange(len(seq) - length + 1):       unique[seq[start:start+length]] = start   else: # prefer first     for start in xrange(len(seq) - length -1 -1):       unique[seq[start:start+length]] = start   return unique  # or find all locations for each slice: import collections def slices(seq length):   unique = collections.defaultdict(list)   for start in xrange(len(seq) - length + 1):     unique[seq[start:start+length]].append(start)   return unique  set(slices(..)) a = set(slices("aab" 2)) # {"aa" "ab"} b = set(slices("abb" 2)) # {"ab" "bb"} c = set(slices("abc" 2)) # {"ab" "bc"} all = [a b c] import operator a_unique = reduce(operator.sub (x for x in all if x is not a) a) print a_unique # {"aa"}  a = slices("aab" 2) b = slices("abb" 2) c = slices("abc" 2) all = [a b c] import operator a_unique = reduce(operator.sub (set(x) for x in all if x is not a) set(a)) # a_unique is only the keys so far a_unique = dict((k a[k]) for k in a_unique) # now it's a dict of slice -&gt; location(s) print a_unique # {"aa": 0} or {"aa": [0]}                # (depending on which slices function used)  import operator import random import string  def slices(seq length):   unique = {}   for start in xrange(len(seq) - length -1 -1):     unique[seq[start:start+length]] = start   return unique  def sample_with_repeat(population length choice=random.choice):   return "".join(choice(population) for _ in xrange(length))  word_length = 5*1000*1000 words = [sample_with_repeat(string.lowercase word_length) for _ in xrange(3)] slice_length = 20 words_slices_sets = [set(slices(x slice_length)) for x in words] unique_words_slices = [reduce(operator.sub                               (x for x in words_slices_sets if x is not n)                               n)                        for n in words_slices_sets] print [len(x) for x in unique_words_slices]  
.set_property .set_property('property' 'value') gtk.main() import gtk  info = gtk.MessageDialog(buttons=gtk.BUTTONS_OK) info.set_property('title' 'Test info message') info.set_property('text' 'Message to be displayed in the messagebox goes here') response = info.run() if response == gtk.RESPONSE_OK:     print 'ok' else:     print response info.destroy()  gtk.main()  
ctypes #define from ctypes import *  d2xx = WinDLL('ftd2xx')  OK = 0 INVALID_HANDLE = 1 DEVICE_NOT_FOUND = 2 DEVICE_NOT_OPENED = 3  ...  def openEx(serial):     serial = create_string_buffer(serial)     handle = c_int()     if d2xx.FT_OpenEx(serial OPEN_BY_SERIAL_NUMBER byref(handle)) == OK:         return Handle(handle.value)     raise D2XXException  class Handle(object):     def __init__(self handle):         self.handle = handle     ...     def read(self bytes):         buffer = create_string_buffer(bytes)         count = c_int()         if d2xx.FT_Read(self.handle buffer bytes byref(count)) == OK:             return buffer.raw[:count.value]         raise D2XXException     def write(self data):         buffer = create_string_buffer(data)         count = c_int()         bytes = len(data)         if d2xx.FT_Write(self.handle buffer bytes byref(count)) == OK:             return count.value         raise D2XXException  
class Foo(object):     def __init__(self):         self.j = None     def __iter__(self):         for i in range(10):             self.j = 10 - i             yield i  my_generator = Foo()  for k in my_generator:     print 'j is'my_generator.j     print 'k is'k  j is 10 k is 0 j is 9 k is 1 j is 8 k is 2 j is 7 k is 3 j is 6 k is 4 j is 5 k is 5 j is 4 k is 6 j is 3 k is 7 j is 2 k is 8 j is 1 k is 9  
./configure --prefix=/usr/local/python-2.6.4 --enable-framework=/usr/local/python-2.6.4/frameworks --enable-universalsdk=/ MACOSX_DEPLOYMENT_TARGET=10.5 --with-universal-archs=3-way make sudo make install  ./configure --with-python=/usr/local/python-2.6.4/bin/python make sudo make install  otool -L /opt/apache2/modules/ mod_wsgi.so   
apt-get install python-pycurl export PYCURL_SSL_LIBRARY=[openssl|gnutls|nss] pip install pycurl --upgrade pip uninstall pycurl 
  timerB = timers.timer(1800)     while 1:           if timerB.isexpired():             print 'timerA expired'           break  timerB.isexpired() timerB.isexpired() 
re.sub() re.IGNORECASE sub(pattern repl string count=0) re.sub("(?i)mr" "" "Mr Bean")  
ModelForm if form.is_valid():     story = form.save()     return HttpResponseRedirect(reverse('story_detail' args=(story.user story.id)))  
dict range dict dictionary = dict([(List[i] List[i+1]) for i in range(0 len(List) 2)])  
class Foo(object):      def regular_method(self):         print 'ok'      def _soft_private(self):         print 'ok'      def __mangled_private(self):         print 'ok'  f = Foo() f.regular_method() # prints ok f._soft_private() # print ok f.__mangled_private() # error! no such attribute. BUT: f._Foo__mangled_private() # prints ok  
count() count() COUNT count count 
user = DBSession.query(User.user_name).filter(User.username==value).first()  
__all__ __all__ import * __all__ import * __init__.py __init__.py foo.py - contains classes related to foo such as fooFactory tallFoo shortFoo  foo/     __init__.py     foofactories.py     tallFoos.py     shortfoos.py     mediumfoos.py     santaslittlehelperfoo.py     superawsomefoo.py     anotherfoo.py  __all__ = ['foofactories' 'tallFoos' 'shortfoos' 'medumfoos'            'santaslittlehelperfoo' 'superawsomefoo' 'anotherfoo'] # deprecated to keep older scripts who import this from breaking from foo.foofactories import fooFactory from foo.tallfoos import tallFoo from foo.shortfoos import shortFoo  from foo import fooFactory tallFoo shortFoo  
class foo:     def __init__(self):         self.a = "a"     def __getattr__(self attribute):         return "You asked for %s but I'm giving you default" % attribute   &gt;&gt;&gt; bar = foo() &gt;&gt;&gt; bar.a 'a' &gt;&gt;&gt; bar.b "You asked for b but I'm giving you default" &gt;&gt;&gt; getattr(bar "a") 'a' &gt;&gt;&gt; getattr(bar "b") "You asked for b but I'm giving you default"  __getattr__ getattr 
&gt;&gt;&gt; "The word is {0:{1}&lt;10}".format("spam" "}") 'The word is spam}}}}}}'  
divisibleby {% if forloop.counter|divisibleby:3 %}&lt;div&gt;{% endif %}  
os.path.join r'\foo' os.path.join("c:" "foo") C: c:foo c:\foo 
B=A[:] B[self.ID] A[self.ID] A B list_of_trading_partners __deepcopy__ A[self.ID] 
for line in open(FunctionPath):     line = line.strip()     if line.startswith('def '):         print '%s: %s' % (FunctionPath line.partition(':')[0])  import fileinput for line in fileinput.input(paths):     line = line.strip()     if line.startswith('def '):         print '%s: %s' % (fileinput.filename() line.partition(':')[0])  $ python script.py filepath1 filepath2 filepath3  def func(): #comment myfunc():    pass  &gt;&gt;&gt; 'def func(): #comment myfunc():'.partition(':')[0] 'def func()'  
my_var = "Retired" if age &gt; 65 else "Working"  my_var = age &gt; 65 ? "Retired" : "Working";  ("Working""Retired")  var&gt;65  
get a=ProjectRecord.objects.get()  GET urls.py urls.py urlpatterns = patterns(''     (r'^class/(?P&lt;object_id&gt;\d+?)/$' 'app.views.edit_record')  def edit_record( request object_id = None ):     if request.method == "POST":         if object_id is None:             return Http_404         ProjectRecord.objects.get( pk = int(object_id) )      etc.  
class MyPoller(SVNPoller):     def __init__(...):         SVNPoller.__init__(self ...)      def getProcessOutput(self args):         args += ["--trust-server-cert"]         return SVNPoller.getProcessOutput(self args)  
authenticate u.password u.set_password('password') &gt;&gt;&gt; u = User(name='luis') &gt;&gt;&gt; u.set_password('password') &gt;&gt;&gt; u.save() &gt;&gt;&gt; authenticate(username='luis' password='password') &lt;User: luis&gt;  
gtk.Widget.modify_text gtk.Widget.modify_base 
Location print "Status: 301 Moved" print "Location:/wherever.com/"  
Python 2.5.1 (r251:54863 May 18 2007 16:56:43) [GCC 3.4.4 (cygming special gdc 0.12 using dmd 0.125)] on cygwin  Python 2.5 (r25:51908 Sep 19 2006 09:52:17) [MSC v.1310 32 bit (Intel)] on win32 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import signal &gt;&gt;&gt; dir(signal) ['NSIG' 'SIGABRT' 'SIGBREAK' 'SIGFPE' 'SIGILL' 'SIGINT' 'SIGSEGV' 'SIGTERM' 'SIG_DFL' 'SIG_IGN' '__doc__' '__ name__' 'default_int_handler' 'getsignal' 'signal']  
def show_firm_url(self obj):     return '&lt;a href="%s"&gt;%s&lt;/a&gt;' % (obj.firm_url obj.firm_url) show_firm_url.allow_tags = True  
import os import tempfile MAKO_TEMPLATE_OPTS=dict(input_encoding='utf-8'                         module_directory=os.path.join(     tempfile.gettempdir()     os.environ.get('LOGNAME' 'unknown_user')     'mako'))  
from zipfile import ZipFile ZipInfo ZIP_DEFLATED import zlib from cStringIO import StringIO from urllib2 import urlopen from urlparse import urlparse from os import path  images = ['http://sstatic.net/so/img/logo.png'            'http://sstatic.net/so/Img/footer-cc-wiki-peak-internet.png']  buf = StringIO() # By default zip archives are not compressed... adding ZIP_DEFLATED # to achieve that. If you don't want that or don't have zlib on or # system delete the compression kwarg zip_file = ZipFile(buf mode='w' compression=ZIP_DEFLATED)  for image in images:     internet_image = urlopen(image)     fname = path.basename(urlparse(image).path)      zip_file.writestr(fname internet_image.read())  zip_file.close()  output = open('images.zip' 'wb') output.write(buf.getvalue()) output.close() buf.close()  
import from ... import __import__ __builtin__.__import__ import __builtin__ import __builtin__ realimp = __builtin__.__import__ def my_import(name globals={} locals={} fromlist=[]):   print 'importing' name fromlist   return realimp(name globals locals fromlist) __builtin__.__import__ = my_import  from os import path  $ python2.4 aim.py importing os ('path')  
def path(self name):     try:         path = safe_join(self.location name)     except ValueError:         raise SuspiciousOperation("Attempted access to '%s' denied." % name)     return smart_str(os.path.normpath(path))  def safe_join(base *paths):     """     Joins one or more path components to the base path component intelligently.     Returns a normalized absolute version of the final path.      The final path must be located inside of the base path component (otherwise     a ValueError is raised).     """     # We need to use normcase to ensure we don't false-negative on case     # insensitive operating systems (like Windows).     base = force_unicode(base)     paths = [force_unicode(p) for p in paths]     final_path = normcase(abspathu(join(base *paths)))     base_path = normcase(abspathu(base))     base_path_len = len(base_path)     # Ensure final_path starts with base_path and that the next character after     # the final path is os.sep (or nothing in which case final_path must be     # equal to base_path).     if not final_path.startswith(base_path) \        or final_path[base_path_len:base_path_len+1] not in ('' sep):         raise ValueError('the joined path is located outside of the base path'                          ' component')     return final_path  self.location name self.location /media/ "/home/tsoporan/site/media/media/albums/anthem-for-the-underdog"  
import datetime  def daterange(start end delta):     """ Just like `range` but for dates! """     current = start     while current &lt; end:         yield current         current += delta  start = datetime.datetime.now() end = start + datetime.timedelta(days=20)  for d in daterange(start end datetime.timedelta(days=1)):     print d  2009-12-22 20:12:41.245000 2009-12-23 20:12:41.245000 2009-12-24 20:12:41.245000 2009-12-25 20:12:41.245000 2009-12-26 20:12:41.245000 2009-12-27 20:12:41.245000 2009-12-28 20:12:41.245000 2009-12-29 20:12:41.245000 2009-12-30 20:12:41.245000 2009-12-31 20:12:41.245000 2010-01-01 20:12:41.245000 2010-01-02 20:12:41.245000 2010-01-03 20:12:41.245000 2010-01-04 20:12:41.245000 2010-01-05 20:12:41.245000 2010-01-06 20:12:41.245000 2010-01-07 20:12:41.245000 2010-01-08 20:12:41.245000 2010-01-09 20:12:41.245000 2010-01-10 20:12:41.245000  range range 
safe_dump dump load str unicode 
classmethod &gt;&gt;&gt; class x(object): ...   def c1(*args): print 'c1' args ...   c1 = classmethod(c1) ...   @classmethod ...   def c2(*args): print 'c2' args ...  &gt;&gt;&gt; inst = x() &gt;&gt;&gt; x.c1() c1 (&lt;class '__main__.x'&gt;) &gt;&gt;&gt; x.c2() c2 (&lt;class '__main__.x'&gt;) &gt;&gt;&gt; inst.c1() c1 (&lt;class '__main__.x'&gt;) &gt;&gt;&gt; inst.c2() c2 (&lt;class '__main__.x'&gt;)  classmethod &gt;&gt;&gt; class y(object): ...   def __init__(self astring): ...     self.s = astring ...   @classmethod ...   def fromlist(cls alist): ...     x = cls('') ...     x.s = ''.join(str(s) for s in alist) ...     return x ...   def __repr__(self): ...     return 'y(%r)' % self.s ... &gt;&gt;&gt; y1 = y('xx') &gt;&gt;&gt; y1 y('xx') &gt;&gt;&gt; y2 = y.fromlist(range(3)) &gt;&gt;&gt; y2 y('012')  y &gt;&gt;&gt; class k(y): ...   def __repr__(self): ...     return 'k(%r)' % self.s.upper() ... &gt;&gt;&gt; k1 = k.fromlist(['za''bu']) &gt;&gt;&gt; k1 k('ZABU')  
Desc1|wildcard1|Desc2|wildcard2 ...  Spreadsheet (*.xls)|*.xls|Plain-old text (*.txt)|*.txt|Random noise|*.dat  
memo &gt;&gt;&gt; import copy &gt;&gt;&gt; memo = {} &gt;&gt;&gt; x = range(5) &gt;&gt;&gt; y = copy.deepcopy(x memo) &gt;&gt;&gt; memo {399680: [0 1 2 3 4] 16790896: 3 16790884: 4 16790920: 1  438608: [0 1 2 3 4 [0 1 2 3 4]] 16790932: 0 16790908: 2} &gt;&gt;&gt;   &gt;&gt;&gt; id(x) 399680 &gt;&gt;&gt; for j in x: print j id(j) ...  0 16790932 1 16790920 2 16790908 3 16790896 4 16790884  &gt;&gt;&gt; for k v in memo.items(): print k id(v) ...  399680 435264 16790896 16790896 16790884 16790884 16790920 16790920 438608 435464 16790932 16790932 16790908 16790908  &gt;&gt;&gt; z = [x x] &gt;&gt;&gt; t = copy.deepcopy(z memo) &gt;&gt;&gt; print id(t[0]) id(t[1]) id(y) 435264 435264 435264  
result = [{}] for item in data:     key val = item.split(":" 1)     if key in result[-1]:         result.append({})     result[-1][key] = val  
class Auto(threading.Thread):     def run(self):         SendKeys.SendKeys("#"pause=0.1);         print('Sent');         exit();  for i in xrange(30):     Auto().start()  
__dict__ junk_block = "".join(open("foo.txt""rb").read().split())  with with open("foo.txt""rb") as f:   junk_block = "".join(f.read().split())  re .translate 
class ClassA(db.Model):     name = db.StringProperty()      def __get_classBdeleted(self):         return self.classB_set.filter('deleted_flag =' 'True')      classBdeleted = property(__get_classBdeleted)  class ClassB(db.Model):     name = db.StringProperty()     deleted_flag = db.BooleanProperty()     classA = db.ReferenceProperty(ClassA)  
obj.get class A __get__ get class A(object):     def __get__(self obj klass):         print "__get__" obj klass         return 'xxx'  class X(object):     a = A()  x=X() print x.a  
PyTypeObject type; // ...other initialisation... type.tp_dict = PyDict_New(); PyDict_SetItemString(type.tp_dict "bar" PyInt_FromLong(1));  
from collections.abc import Iterable   # drop `.abc` with Python 2.7 or lower  def iterable(obj):     return isinstance(obj Iterable)  iter() def iterable(obj):     try:         iter(obj)     except Exception:         return False     else:         return True  iter() __getitem__ __getitem__ AttributeError &gt;&gt;&gt; from faker import Faker &gt;&gt;&gt; fake = Faker() &gt;&gt;&gt; iter(fake)    # No exception must be iterable &lt;iterator object at 0x7f1c71db58d0&gt; &gt;&gt;&gt; list(fake)    # Ooops Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "/home/.../site-packages/faker/proxy.py" line 59 in __getitem__     return self._factory_map[locale.replace('-' '_')] AttributeError: 'int' object has no attribute 'replace'  insinstance() __getitem__ &gt;&gt;&gt; from collections.abc import Iterable &gt;&gt;&gt; from faker import Faker &gt;&gt;&gt; isinstance(Faker() Iterable) False  iter() __getitem__ isinstance() isinstance() isinstance() iter() UserDict isinstance(item (Iterable UserDict)) 
req = google.appengine.ext.webapp.Request(dict(os.environ))  
SMTP() connect() localhost 
&gt;&gt;&gt; import itertools &gt;&gt;&gt; map(''.join itertools.chain(itertools.product(list1 list2) itertools.product(list2 list1))) ['squarered' 'squaregreen' 'circlered' 'circlegreen' 'trianglered' 'trianglegreen' 'redsquare' 'redcircle' 'redtriangle' 'greensquare' 'greencircle' 'greentriangle']  
pickle cPickle pickle cPickle pickle.py import sys pickle; sys.modules['cPickle']=pickle 
import datetime import os import shutil  threshold = datetime.datetime.now() + datetime.timedelta(days=-7) file_time = datetime.datetime.fromtimestamp(os.path.getmtime('/folder_name'))  if file_time &lt; threshold:     shutil.rmtree('/folder_name')  
#include "Python.h" #include "structmember.h"  // The CountDict type.  typedef struct {    PyObject_HEAD    PyObject * dict;    int count; } CountDict;  static int CountDict_init(CountDict *self PyObject *args PyObject *kwds) {    self-&gt;dict = PyDict_New();    self-&gt;count = 0;    return 0; }  static void CountDict_dealloc(CountDict *self) {    Py_XDECREF(self-&gt;dict);    self-&gt;ob_type-&gt;tp_free((PyObject*)self); }  static PyObject * CountDict_set(CountDict *self PyObject *args) {    const char *key;    PyObject *value;     if (!PyArg_ParseTuple(args "sO:set" &amp;key &amp;value)) {       return NULL;    }     if (PyDict_SetItemString(self-&gt;dict key value) &lt; 0) {       return NULL;    }     self-&gt;count++;     return Py_BuildValue("i" self-&gt;count); }  static PyMemberDef CountDict_members[] = {    { "dict"   T_OBJECT offsetof(CountDict dict) 0                "The dictionary of values collected so far." }     { "count"  T_INT    offsetof(CountDict count) 0                "The number of times set() has been called." }     { NULL } };  static PyMethodDef CountDict_methods[] = {    { "set"    (PyCFunction) CountDict_set METH_VARARGS                "Set a key and increment the count." }    // typically there would be more here...     { NULL } };  static PyTypeObject CountDictType = {    PyObject_HEAD_INIT(NULL)    0                         /* ob_size */    "CountDict"               /* tp_name */    sizeof(CountDict)         /* tp_basicsize */    0                         /* tp_itemsize */    (destructor)CountDict_dealloc /* tp_dealloc */    0                         /* tp_print */    0                         /* tp_getattr */    0                         /* tp_setattr */    0                         /* tp_compare */    0                         /* tp_repr */    0                         /* tp_as_number */    0                         /* tp_as_sequence */    0                         /* tp_as_mapping */    0                         /* tp_hash */    0                         /* tp_call */    0                         /* tp_str */    0                         /* tp_getattro */    0                         /* tp_setattro */    0                         /* tp_as_buffer */    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE /* tp_flags*/    "CountDict object"        /* tp_doc */    0                         /* tp_traverse */    0                         /* tp_clear */    0                         /* tp_richcompare */    0                         /* tp_weaklistoffset */    0                         /* tp_iter */    0                         /* tp_iternext */    CountDict_methods         /* tp_methods */    CountDict_members         /* tp_members */    0                         /* tp_getset */    0                         /* tp_base */    0                         /* tp_dict */    0                         /* tp_descr_get */    0                         /* tp_descr_set */    0                         /* tp_dictoffset */    (initproc)CountDict_init  /* tp_init */    0                         /* tp_alloc */    0                         /* tp_new */ };  // Module definition  static PyModuleDef moduledef = {     PyModuleDef_HEAD_INIT     "countdict"     MODULE_DOC     -1     NULL       /* methods */     NULL     NULL       /* traverse */     NULL       /* clear */     NULL };   PyObject * PyInit_countdict(void) {     PyObject * mod = PyModule_Create(&amp;moduledef);     if (mod == NULL) {         return NULL;     }      CountDictType.tp_new = PyType_GenericNew;     if (PyType_Ready(&amp;CountDictType) &lt; 0) {         Py_DECREF(mod);         return NULL;     }      Py_INCREF(&amp;CountDictType);     PyModule_AddObject(mod "CountDict" (PyObject *)&amp;CountDictType);      return mod; }  
a(1+b) = a+ab &gt;&gt;&gt; bool(a*(1+b) == a + a*b) False    &gt;&gt;&gt; bool(a*(1+b) - (a+a*b) == 0) False    .expand() &gt;&gt;&gt; A B = a*(1+b) a + a*b  &gt;&gt;&gt; bool(A.expand() == B.expand()) True  &gt;&gt;&gt; (A - B).expand() 0   .expand() simplify() trigsimp() &gt;&gt;&gt; trigsimp(cos(x)**2 + sin(x)**2) == 1 True  
public django.fcgi #!/usr/bin/python import os sys  _PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) sys.path.insert(0 _PROJECT_DIR) sys.path.insert(0 os.path.dirname(_PROJECT_DIR))  _PROJECT_NAME = _PROJECT_DIR.split('/')[-1] os.environ['DJANGO_SETTINGS_MODULE'] = "%s.settings" % _PROJECT_NAME  from django.core.servers.fastcgi import runfastcgi runfastcgi(method="threaded" daemonize="false")  public AddHandler fcgid-script .fcgi RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ django.fcgi/$1 [QSAL]  public ln -s /usr/local/alwaysdata/python/django/1.1/django/contrib/admin/media/ media  myproject/     __init__.py     manage.py     public/         django.fcgi         .htaccess         media/     settings.py     urls.py     myapp/         views.py         models.py  
return_method() func_accepting_args() def return_method(*args):     return self.func_accepting_args(prop*args)  
text = ''.join(sys.argv[3:]  
displayname = firstname + lastname or username  
write PySys_SetObject xxmodule.c aview.py #include "Python.h" #include &lt;stdio.h&gt;  static PyObject * aview_write(PyObject *self PyObject *args) {     const char *what;     if (!PyArg_ParseTuple(args "s" &amp;what))         return NULL;     printf("==%s==" what);     return Py_BuildValue(""); }  static PyMethodDef a_methods[] = {     {"write" aview_write METH_VARARGS "Write something."}     {NULL NULL 0 NULL} };  PyMODINIT_FUNC initaview(void) {     PyObject *m = Py_InitModule("aview" a_methods);     if (m == NULL) return;     PySys_SetObject("stdout" m); }  aview $ python Python 2.5.4 (r254:67917 Dec 23 2008 14:57:27)  [GCC 4.0.1 (Apple Computer Inc. build 5363)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import aview &gt;&gt;&gt; print 'ciao' ==ciao==== ==&gt;&gt;&gt;   == print .write 'ciao' 
   def __iter(self):     def __iter__(self):  __ iter return 33  yield 33  return __iter__ return [33] yield __iter__ a().itervalues()  for x in a(): print x  print list(a())  itervalues __iter__ 
env.hosts fabric/main.py set() set() 
env.warn_only run sudo local run sudo local from __future__ import print_function from fabric.api import run sudo local env import paramiko import socket  host1 = '192.168.200.181' offline_host2 = '192.168.200.199' host3 = '192.168.200.183'  env.hosts = [host1 offline_host2 host3]  def df_h():     if _is_host_up(env.host int(env.port)) is True:         run("df -h | grep sda1")   def _is_host_up(host port):     # Set the timeout     original_timeout = socket.getdefaulttimeout()     new_timeout = 3     socket.setdefaulttimeout(new_timeout)     host_status = False     try:         transport = paramiko.Transport((host port))         host_status = True     except:         print('***Warning*** Host {host} on port {port} is down.'.format(             host=host port=port)         )     socket.setdefaulttimeout(original_timeout)     return host_status  
p = re.compile('\{\{*.*?\}\}' re.DOTALL) nonBracketedString = p.sub('' bracketedString)  . .*? 
ModelClass.objects.latest(timestamp_field)  
eval(compile(a'&lt;string&gt;''exec'))  eval(repr(a))  &gt;&gt;&gt; a='''b="ddd"''' &gt;&gt;&gt; eval(compile(a'&lt;string&gt;''exec')) &gt;&gt;&gt; print str(a) b="ddd" &gt;&gt;&gt; print b ddd  'b="ddd"' b eval() eval() compile() None &gt;&gt;&gt; 'c=7' 'c=7' &gt;&gt;&gt; c Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; NameError: name 'c' is not defined &gt;&gt;&gt; c=7 &gt;&gt;&gt; c 7 &gt;&gt;&gt; '7=d' '7=d' &gt;&gt;&gt; 7=d   File "&lt;stdin&gt;" line 1 SyntaxError: can't assign to literal  7=d '7=d' expr() repr() compile() 
TEMPLATE_DIRS PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__)) # Other settings... TEMPLATE_DIRS = (     os.path.join(PROJECT_ROOT "templates") )  return render_to_response("payment.html" self.context RequestContext(self.request)) # or return render_to_response("subdir/payment.html" self.context RequestContext(self.request))  E:\path\to\project\templates\payment.html E:\path\to\project\templates\subdir\payment.html 
super(ClassType self).__init__() ClassType self __init__ C inherits B inherits A C.__init__ C's B.__init__ B.__init__ B class A (object):   def __init__(self):     pass  class B (A):   def __init__(self):     super(B self).__init__()  class C (B):   def __init__(self):     super(C self).__init__()  c = C() super(self).__init__() B.__init__ 
for item in mylist:     print item  for keyitem in enumerate(mylist):     print key":"item  for i in range(050):     print i  for item in X X next(self) class a(object):     def __init__(selfx=10):         self.x = x     def __iter__(self):         return self     def next(self):         if self.x &gt; 0:             self.x-=1             return self.x         else:             raise StopIteration   ainst = a()  for item in aisnt:      print item  
triggerAction: 'all'  valueField: 'dblist'  
__getitem__ class MyClass:     def __getitem__(self key):         return key * 2  myobj = MyClass() myobj[3] #Output: 6  __setitem__ &gt;&gt;&gt; myobj[5] = 1 Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; AttributeError: MyClass instance has no attribute '__setitem__'  
fstat os.stat 
display.keysym_to_keycode(Xlib.XK.string_to_keysym(char)) 
set2 = set(x['id'] for x in list2) for entry in list1:   if entry['id'] in set2:     entry['match'] = True  set2 = set(x['id'] for x in list2) for entry in list1:   entry['match'] = entry['id'] in set2  
def new_directory(): # define the function  if not os.path.exists(current_sandbox):        os.mkdir(current_sandbox)  new_directory() # call the function  current_sandbox def new_directory(dir_path):     if not os.path.exists(dir_path):           os.mkdir(dir_path)  new_directory(current_sandbox) # much later new_directory(some_other_path)  
def row2dict(row):     d = {}     for column in row.__table__.columns:         d[column.name] = str(getattr(row column.name))      return d  row2dict = lambda r: {c.name: str(getattr(r c.name)) for c in r.__table__.columns}  
None sys.modules foo import sys foo.sys sys foo/sys.py None sys.modules sys logging import xml.dom xml.dom.xml xml xml.dom 
Participation class Participation(models.Model):     user = models.ForeignKey(User)     event = models.ForeignKey(Event)  class Event(models.Model):     users = models.ManyToManyField(User through='Participation')  Participation instance.event 
sys.path[0] '' logging sys.path 
&gt;&gt;&gt; val = "1.5698D+03"  # 1569.8 &gt;&gt;&gt; print float(val.replace('D' 'E')) 1569.8  
import urllib2 from threading import Thread  BASE_URL = 'http://farmsubsidy.org/DE/browse?page=' NUM_RANGE = range(0000 3603) THREADS = 2  def main():     for nums in split_seq(NUM_RANGE THREADS):         t = Spider(BASE_URL nums)         t.start()  def split_seq(seq num_pieces):     start = 0     for i in xrange(num_pieces):         stop = start + len(seq[i::num_pieces])         yield seq[start:stop]         start = stop  class Spider(Thread):     def __init__(self base_url nums):         Thread.__init__(self)         self.base_url = base_url         self.nums = nums     def run(self):         for num in self.nums:             url = '%s%s' % (self.base_url num)             data = urllib2.urlopen(url).read()             print data  if __name__ == '__main__':     main()  
from django.forms import model_to_dict  dict = model_to_dict(instance) dict.update(dict2)  ... Then serialize here ...  
{% for movie in movie_list|sort(attribute='rating') %}  
use_rawinput = 1  raw_input() sys.stdout.readline() raw_input() readline raw_input() #!/usr/bin/python name=raw_input("Enter your name: ")  &gt; python test.py Enter your name: Alex  &gt; python test.py | tee log  sys.stdin.readline() readline() raw_input() Cmd.use_rawinput = 0  pdb = pdb.Pdb() pdb.use_rawinput=0 pdb.set_trace()  
&gt;&gt;&gt; s = [[0]*3 for i in range(2)] &gt;&gt;&gt; s [[0 0 0] [0 0 0]] &gt;&gt;&gt; s[0][1] = 1 &gt;&gt;&gt; s [[0 1 0] [0 0 0]]  
timeit $ python -mtimeit -s'x=0' 'if x: d=1' 'else: d=2' 10000000 loops best of 3: 0.0748 usec per loop $ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2' 10000000 loops best of 3: 0.0685 usec per loop $ python -mtimeit -s'x=0' 'd=2' 'if x: d=1' 10000000 loops best of 3: 0.0734 usec per loop $ python -mtimeit -s'x=1' 'd=2' 'if x: d=1' 10000000 loops best of 3: 0.101 usec per loop  $ python -mtimeit -s'x=0' 'd=1 if x else 2' 10000000 loops best of 3: 0.0736 usec per loop $ python -mtimeit -s'x=1' 'd=1 if x else 2' 10000000 loops best of 3: 0.076 usec per loop  $ python -mtimeit -s'x=1' 'd=1 if x else 2' 10000000 loops best of 3: 0.076 usec per loop $ python -mtimeit -s'x=1' 'd=1 if x else 2' 10000000 loops best of 3: 0.0749 usec per loop $ python -mtimeit -s'x=1' 'd=1 if x else 2' 10000000 loops best of 3: 0.0742 usec per loop $ python -mtimeit -s'x=1' 'd=1 if x else 2' 10000000 loops best of 3: 0.0749 usec per loop $ python -mtimeit -s'x=1' 'd=1 if x else 2' 10000000 loops best of 3: 0.0745 usec per loop  $ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2' 10000000 loops best of 3: 0.0688 usec per loop $ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2' 10000000 loops best of 3: 0.0681 usec per loop $ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2' 10000000 loops best of 3: 0.0687 usec per loop $ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2' 10000000 loops best of 3: 0.0679 usec per loop $ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2' 10000000 loops best of 3: 0.0692 usec per loop  
ifequal picture for picture in pictures:     picture.is_in_article = (picture in article.pictures)  {% for picture in pictures %}     {% if picture.is_in_article %}         &lt;input type="checkbox" checked="true" name="picture" value="{{ picture.key }}"  /&gt;     {% else %}         &lt;input type="checkbox" name="picture" value="{{ picture.key }}"  /&gt;     {% endif %}     &lt;img src='/img?img_id={{ picture.key }}'&gt;&lt;/img&gt; &lt;br /&gt; {% endfor %}  
__iter__() __iter__() __next__() class A():     def __init__(self x=10):         self.x = x     def __iter__(self):         for i in reversed(range(self.x)):             yield i  a = A() for item in a:     print(item)  
json.JSONEncoder class DecimalEncoder(json.JSONEncoder):     def default(self o):         if isinstance(o decimal.Decimal):             # wanted a simple yield str(o) in the next line             # but that would mean a yield on the line with super(...)             # which wouldn't work (see my comment below) so...             return (str(o) for o in [o])         return super(DecimalEncoder self).default(o)  json.dumps({'x': decimal.Decimal('5.5')} cls=DecimalEncoder)  
@a @a def b...  def b...  b = a(b)  a a 
b = ''.join(map(str [12345])) # =&gt; '12345'  
QueryDict dict(keyword_filter) dict(keyword_filter name=filter_name) json 
.../site-packages/PyQt4 
from django.utils.translation import ugettext_lazy as _  
class __b__ class a print print 
astng astng pyqt 
__copy__ __deepcopy__ __all__ __name__ __bases__ __foo__ 
red green blue alpha = img.split()  alpha = img.split()[-1]  img.putalpha(alpha)  if img.mode in ('RGBA' 'LA') or (img.mode == 'P' and 'transparency' in img.info):     alpha = img.convert('RGBA').split()[-1]  
class MyClass(object):     def __init__(self):         self.w = {}      def __setitem__(self k v):         self.w[k] = v      def __getitem__(self k):         return self.w[k]   mc = MyClass() mc['aa'] = 12 print mc['aa']  
test[numpy.logical_or.reduce([test[:1] == x for x in wanted])]  
bash-3.2$ python Python 2.6 (trunk:66714:66715M Oct  1 2008 18:36:04)  [GCC 4.0.1 (Apple Computer Inc. build 5370)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; class a: ...    @staticmethod ...    def b(): ...       return 1 ...  &gt;&gt;&gt; a_obj = a() &gt;&gt;&gt; print a.b() 1 &gt;&gt;&gt; print a_obj.b() 1 &gt;&gt;&gt;   
scroll_area = pyglet.text.layout.ScrollableTextLayout(my_text width height multiline=True)   scroll_area.view_y = 30 # start 30 pixels down  
hash(o) l = [] for x in range(0 50):     for y in range(0 50):         if hash((xy)) in l:             print "Fail: " (xy)         l.append(hash((xy))) print "Test Finished"  
for line in open("file"):     print line[4:8]  line[11:16]  
#check whether int conversion will raise an error if not isinstance(s str) or not s.isdigit:     return None elif len(s) &gt; 10:    #too many digits for int conversion     return None else:     return int(str)  try:     return int(str) except (TypeError ValueError OverflowError): #int conversion failed     return None  
django.core.mail send_mail send_mail(     subject      message      from_email      recipient_list      fail_silently=False      auth_user=None      auth_password=None      connection=None)  
real(4) 
#!/usr/bin/env python import random import itertools  numname={1:'Ace'11:'Jack'12:'Queen'13:'King'} suits=['Clubs''Diamonds''Hearts''Spades'] numbers=range(114) cards=['%s-%s'%(numname.get(numbernumber)suit)        for numbersuit in itertools.product(numberssuits)] print(cards) random.shuffle(cards) print(cards) hand=random.sample(cards5) print(hand)  
MySQL-python-1.2.2.win32-py2.5.exe MySQL-python-1.2.2.win32-py2.4.exe 
formfield ModelForm formfield form_class from myapp.forms import MyCustomFormField  #create a custom model field class EditAreaField(models.TextField):   def formfield(self **kwargs):     defaults={'form_class': MyCustomFormField}#pass our custom field as form_class     defaults.update(kwargs)     return super(EditAreaField self).formfield(**defaults)  
lambda request *args **kwargs: {}  request a={'a':'aaa''b':'bbb'} b=a.pop('a'lambda xy:x) print a  {'b': 'bbb'} a 'aaa' b .pop .pop .pop 'a' a 'aaa' .pop b 
class FileTypeCache(dict):     def __missing__(self key):         try:           obj = self[key] = Session.query(FileType).filter_by(typename=key).one()           return obj         except InvalidRequestError:           return obj=self[key]= FileType(key)           return obj  class FileType(object):     def __init__(self typename)        self.typename=typename     def __eq__(self):         if isinstance(other FileType):             return self.typename == other.typename         else:             return False  
__ __contains__ __contains__ in a True true b print 'x' in b True b b True self.d 
print class foo:  class foo(object):  if x in self: __getattr__ __contains__ x x self __getattr__ self getattr raise AttributeError __getattr__ __getattr__ __getattr__ class foo(object):     def __init__(self):         self.blah = {'a': 'boh'}     def __getattr__(self x):         if x in self.blah:             return self.blah[x]         raise AttributeError  a=foo() print getattr(a'b''sss')  sss __setattr__ self self.blah = __setattr__ class foo(object):     def __init__(self):         self.__dict__['blah'] = {}     def __setattr__(self name value):         self.blah[name] = value     def __getattr__(self x):         if x in self.blah:             return self.blah[x]         raise AttributeError  a=foo() print getattr(a'b''sss')  sss         self.__dict__['blah'] = {}          object.__setattr__(self 'blah' {})  super 
input raw_input TypeError input raw_input 
.setter .deleter property class C(object):     def __init__(self):         self._x = None      def _get_x(self):         """I'm the 'x' property."""         return self._x     def _set_x(self value):         self._x = value     def _del_x(self):         del self._x     x = property(_get_x _set_x _del_x)  
datetime timedelta datetime from datetime import datetime  # Parse the time strings t1 = datetime.strptime('01:12''%H:%M') t2 = datetime.strptime('18:59''%H:%M')  # Do the math the result is a timedelta object delta = (t2 - t1) / 12 print(delta.seconds)  
2to3 "/Users/Nimbuz/Documents/python31/Excercise 1/time3.py"  2to3 /Users/Nimbuz/Documents/python31/Excercise\ 1/time3.py  2to3 time3.py  
def make_preview(text fontfile imagefile fontsize=30):     p = subprocess.call(['convert' '-font' fontfile '-background'          'transparent' '-gravity' 'center' '-size' '1500x300'         '-pointsize' str(fontsize)  '-trim' '+repage' 'label:%s' % text image_file])      return p==0   
import itertools  x = '''[This] is some text with [some [blocks that are nested [in a [variety] of ways]]] and some [which are not] and [any [with nesting] must go] away.'''  def nonest(txt):   pieces = []   d = 0   level = []   for c in txt:     if c == '[': d += 1     level.append(d)     if c == ']': d -= 1   for k g in itertools.groupby(zip(txt level) lambda x: x[1]&gt;0):     block = list(g)     if max(d for c d in block) &gt; 1: continue     pieces.append(''.join(c for c d in block))   print ''.join(pieces)  nonest(x)  [This] is some text with  and some [which are not] and  away.  level level groupby g block 
def decorate(function):     def wrap_function(*args **kwargs):         kwargs['str'] = 'Hello!'         return function(*args **kwargs)     return wrap_function  @decorate def print_message(*args **kwargs):     print(kwargs['str'])  def decorate(function):     def wrap_function(*args **kwargs):         str = 'Hello!'         return function(str *args **kwargs)     return wrap_function  @decorate def print_message(str *args **kwargs):     print(str)  def decorate(function):     def wrap_function(*args **kwargs):         str = 'Hello!'         args.insert(1 str)         return function(*args **kwargs)     return wrap_function  class Printer:     @decorate     def print_message(self str *args **kwargs):         print(str)  
arr = list() arr = []  __setitem__() 
tolist() import numpy as np &gt;&gt;&gt; np.array([[123][456]]).tolist() [[1 2 3] [4 5 6]]  
./configure --enable-static --disable-shared $ ./configure --prefix=/usr/local/mysql-src/ --enable-static --disable-shared --with-charset=utf8 --with-extra-charsets=asciibinarylatin1 --with-collation=utf8_general_ci $ make $ sudo make install _mysql.so site.cfg static = True mysql_config = /usr/local/mysql-src/bin/mysql_config configure python setup.py build sudo python setup.by install site-packages virtualenv 
&gt;&gt;&gt; a = ['Hello ''everybody ''! '] &gt;&gt;&gt; [ e.strip() for e in a ] ['Hello' 'everybody' '!']  string.strip string.rstrip string.lstrip 
&gt;&gt;&gt; import struct &gt;&gt;&gt; i = struct.unpack('&lt;L' '\x23\x45\x00\x73')[0] &gt;&gt;&gt; print i 1929397539  
&gt;&gt;&gt; import re &gt;&gt;&gt; wordlist = ['Schreiben\nEs' 'Schreiben' \     'Schreiben\nEventuell' 'Schreiben\nHaruki'] &gt;&gt;&gt; [ re.sub("\n.*" "" word) for word in wordlist ] ['Schreiben' 'Schreiben' 'Schreiben' 'Schreiben']  re.sub &gt;&gt;&gt; help(re.sub)   1 Help on function sub in module re:   2    3 sub(pattern repl string count=0)   4     Return the string obtained by replacing the leftmost   5     non-overlapping occurrences of the pattern in string by the   6     replacement repl.  repl can be either a string or a callable;   7     if a callable it's passed the match object and must return   8     a replacement string to be used.  
def foo(a b c):     mydict = {'a': a 'b': b 'c': c}  def foo(a b c):     mydict = locals()  
phase2() queries %timeit raw_queries(queriesnlp)  python -mtimeit -s"import test; queries=test.phase2()" "test.raw_queries(queries)"  test.py python -mtimeit -s"SETUP_COMMANDS" "COMMAND_TO_BE_TIMED"  queries raw_queries queries queries phase2() queries phase2 queries def phase2():     ...     return queries  phase2 def phase3():     # Do stuff like phase2() but return queries     return queries  
__init__.py from packagename import modulename  from __future__ import absolute_import from . import modulename  from __future__ __init__.py __import__() 
import page2  /page2 page2.Page2 app.yaml def render(template_file template_values):     path = os.path.join(os.path.dirname(__file__) template_file)     self.response.out.write(template.render(path template_values))  render import 
addr 
def InvalidArgsSpecified:  def InvalidArgsSpecified():  def 
def def f(x y _d={1:2 3:4}):  _d _d _d 
'dsa\wqqqq\ffff' \f chr(12) print os.path.exists('dsa\wqqqq\ffff') dsa print os.path.exists(os.path.join('dsa' 'wqqqq' 'ffff'))  dsa wqqqq ffff print os.path.exists(r'dsa\wqqqq\ffff')  r print os.path.exists('dsa\\wqqqq\\ffff')  print os.path.exists('dsa/wqqqq/ffff')  os.path.exists('what') what 
path = os.path.abspath(__file__)[:-8]  path = os.path.dirname(os.path.abspath(__file__))  
__import__ &lt;module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/posixpath.pyc'&gt; print os.path print os.environ['PATH'] print os.getcwd() __import__(name)#why it do this return sys.modules[name]  __import__ sys.modules return __import__(name)  name . __import__ sys.modules return __import__('foo.bar')  __import__('foo.bar') return sys.modules['foo']  __import__('foo.bar') return sys.modules['foo.bar']  
a + b ''.join &gt;&gt;&gt; chars = ['a'] * 10000000 &gt;&gt;&gt; r = '' &gt;&gt;&gt; for c in chars: r += c &gt;&gt;&gt; print len(r)  &gt;&gt;&gt; chars = ['a'] * 10000000 &gt;&gt;&gt; r = ''.join(chars) &gt;&gt;&gt; print len(r)  
hasattr hasattr(x'y') x.y getattr 
myprog *  * myprog mydir1 mydir2 myfile1.jpg myfile2.txt mynamedpipe1  stat 
class Directions:     up = 0     down = 1     left = 2     right =3  
uu HlpWiz&gt;&gt;&gt; 4 What module do you want to look more into?:  uu  *An error occurred - probably because the module isn't loaded or is misspelled*  #!/usr/bin/env python import sys __import__('uu') print(sys.modules['uu']) print(dir(uu))  NameError: name 'uu' is not defined __import__ uu uu uu uu sys.modules     var_mod = input("What module do you want to look more into?:  ")     print "\n attempting to browse... please wait!"     time.sleep(2)     browse_mod(zlib = var_mod)      var_mod = raw_input("What module do you want to look more into?:  ")     print "\n attempting to browse... please wait!"     time.sleep(2)     browse_mod(zlib = sys.modules[var_mod])  raw_input input raw_input i = 1 for line in sample:     print i line     i = i + 1  for iline in enumerate(sample):     print i+1 line  uu sys.modules['uu'] uu 
def translate(value leftMin leftMax rightMin rightMax):     # Figure out how 'wide' each range is     leftSpan = leftMax - leftMin     rightSpan = rightMax - rightMin      # Convert the left range into a 0-1 range (float)     valueScaled = float(value - leftMin) / float(leftSpan)      # Convert the 0-1 range into a value in the right range.     return rightMin + (valueScaled * rightSpan)  
dict( (o.nameo) for o in obj_list )[name]  obj_list 
sample = ("this" "is" "Annoying!")  for i line in enumerate(sample):     print i line  enumerate 
import re data=r'&lt;wn20schema:NounSynset rdf:about="&amp;dn;synset-56242" rdfs:label="{saddelmageri_1}"&gt;"'  matches=re.findall('synset-([0-9]+).*label="{(.*)_1}"' data) print "matches:" matches  matches: [('56242' 'saddelmageri')]  
form = UserCreationForm  {% for field in form1 %}{{ field }}{% endfor %}  UserCreationForm 
main None all_mods is None for x in all_mods import sys StringIO buffer = StringIO.StringIO() sys.stdout = buffer main() buffer.seek(0) all_mods = buffer.read().splitlines() sys.stdout = sys.__stdout__  
class Car(models.Model):     manufacturer = models.ForeignKey('production.Manufacturer')  
In [1]: np.arange(1000000).dtype Out[1]: dtype('int32')  a=np.arange(1000000dtype='int64').reshape(10001000)  
Keyword.objects.exclude(id__in=PageKeyword.objects.values('keyword_id'))  Keyword.objects.exclude(pagekeyword__in=PageKeyword.objects.all())  
Document.getElementById b id setIdAttribute id id setIdAttribute import xml.dom.minidom as d a = d.Document() b = a.createElement('test') a.appendChild(b) b.setAttribute('id' 'x') b.setIdAttribute('id')  getElementById &gt;&gt;&gt; a.getElementById('x') &lt;DOM Element: test at 0xb77712ec&gt;  
connection.execute_query('exec storedProcedureName @Id=1')  
os.environ['CXXFLAGS'] CXXFLAGS ./configure cmd = [     './configure'     'CXXFLAGS=-O2 -march=i586 -mtune=i686' ] subprocess.Popen(cmd)  CXXFLAGS CXXFLAGS 
TypeError INSTALLED_APPS from list 
text.replace text.replace string.translate string.maketrans translate 
def addEvent(calendar_service):     event = gdata.calendar.CalendarEventEntry()     event.content = atom.Content(text='Tennis with John 30.12.2009 15:00-16:00')     event.quick_add = gdata.calendar.QuickAdd(value='true')     feed = calendar_service.GetOwnCalendarsFeed()     calurl=[a_calendar.content.src for i a_calendar in enumerate(feed.entry)]     new_event = calendar_service.InsertEvent(event calurl[1]) #calurl[1] select the 2. cal of own's cals  
# Windows connector libs for MySQL. connector = C:\Program Files\MySQL\Connector C 6.0.2  include_dirs = [ os.path.join(mysql_root r'include') ]:  include_dirs = [ os.path.join(options['connector'] r'include') ]  library_dirs = [ os.path.join(options['connector'] r'lib\opt') ]  ... library_dirs = [ os.path.join(mysql_root r'lib\opt') ] library_dirs = [ os.path.join(options['connector'] r'lib\opt') ] libraries = [ 'kernel32' 'advapi32' 'wsock32' client ] include_dirs = [ os.path.join(mysql_root r'include') ] include_dirs = [ os.path.join(options['connector'] r'include') ] extra_compile_args = [ '/Zl' ] ...  
cursor.execute execute 
sort sorted sort sorted cmp key reverse L.sort(cmp=None key=None reverse=False) -- stable sort *IN PLACE*; cmp(x y) -&gt; -1 0 1  sorted(iterable cmp=None key=None reverse=False) --&gt; new sorted list  key reverse cmp key reverse key operator.itemgetter &gt;&gt;&gt; from operator import itemgetter  &gt;&gt;&gt; a = range(5) &gt;&gt;&gt; b = a[::-1] &gt;&gt;&gt; c = map(lambda x: chr(((x+3)%5)+97) a) &gt;&gt;&gt; sequence = zip(abc)  # sort by first item in a tuple &gt;&gt;&gt; sorted(sequence key = itemgetter(0)) [(0 4 'd') (1 3 'e') (2 2 'a') (3 1 'b') (4 0 'c')]  # sort by second item in a tuple &gt;&gt;&gt; sorted(sequence key = itemgetter(1)) [(4 0 'c') (3 1 'b') (2 2 'a') (1 3 'e') (0 4 'd')]  # sort by third item in a tuple &gt;&gt;&gt; sorted(sequence key = itemgetter(2)) [(2 2 'a') (3 1 'b') (4 0 'c') (0 4 'd') (1 3 'e')]  key sort sorted itemgetter f=itemgetter(2) f(r) r[2] key cmp key cmp &gt;&gt;&gt; from timeit import Timer &gt;&gt;&gt; Timer(stmt="sorted(xskey=itemgetter(1))"setup="from operator import itemgetter;xs=range(100);xs=zip(xsxs);").timeit(300000) 6.7079150676727295 &gt;&gt;&gt; Timer(stmt="sorted(xskey=lambda x:x[1])"setup="xs=range(100);xs=zip(xsxs);").timeit(300000) 11.609490871429443 &gt;&gt;&gt; Timer(stmt="sorted(xscmp=lambda ab: cmp(a[1]b[1]))"setup="xs=range(100);xs=zip(xsxs);").timeit(300000) 22.335839986801147  key cmp itemgetter lambda x: x[1] 
bbb = x 
h2 = QuotedString("==")  
msvcrt.setmode(1 os.O_BINARY) sys.stdout.flush 
 &lt;html> &lt;head> &lt;/head> &lt;body> &lt;p>here is some text to bold&lt;/p> &lt;p>and some more&lt;/p> &lt;/body> &lt;/html>   &lt;?xml version="1.0"?> &lt;html> &lt;head/> &lt;body> &lt;p>here is &lt;b>some&lt;/b> text to &lt;b>bold&lt;/b> &lt;/p> &lt;p>and &lt;b>some&lt;/b> more &lt;/p> &lt;/body> &lt;/html>   from lxml import etree  stylesheet = etree.XML("""     &lt;xsl:stylesheet version="1.0"          xmlns:btest="uri:bolder"          xmlns:xsl="http://www.w3.org/1999/XSL/Transform">          &lt;xsl:template match="@*">             &lt;xsl:copy />         &lt;/xsl:template>          &lt;xsl:template match="*">             &lt;xsl:element name="{name(.)}">                 &lt;xsl:copy-of select="@*" />                 &lt;xsl:apply-templates select="text()" />                 &lt;xsl:apply-templates select="./*" />             &lt;/xsl:element>         &lt;/xsl:template>          &lt;xsl:template match="text()">             &lt;xsl:copy-of select="btest:bolder(.)/node()" />         &lt;/xsl:template>               &lt;/xsl:stylesheet> """)  glossary = ['some' 'bold']  def bolder(context s):     results = []     r = None     for word in s[0].split():         if word in glossary:             if r is not None:                 results.append(r)             r = etree.Element('r')             b = etree.SubElement(r 'b')             b.text = word             b.tail = ' '             results.append(r)             r = None         else:             if r is None:                 r = etree.Element('r')             r.text = '%s%s ' % (r.text or '' word)          if r is not None:             results.append(r)     return results  def test():     ns = etree.FunctionNamespace('uri:bolder') # register global namespace     ns['bolder'] = bolder # define function in new global namespace     transform = etree.XSLT(stylesheet)     print str(transform(etree.XML("""&lt;html>&lt;head>&lt;/head>&lt;body>&lt;p>here is some text to bold&lt;/p>&lt;p>and some more&lt;/p>&lt;/body>&lt;/html>""")))  if __name__ == "__main__":     test()   
c.sort(key=lambda x:x[0])  
if 
while running:       option = 1       for choice in items:          print(str(option) + ". " + choice)          option = option + 1  print(str(option) + ". Quit")) choice = int(input("choose an option: ")) if choice == option:    running = false else:     credit_card = input("Credit card number: ")    save_transaction(prices[choice - 1] credit_card items[choice - 1])  
Amount       = line[36:45]  Amount       = int(line[36:45])  ClerkHash[ClerkKey+AccountKey] = arr[00]  ClerkHash[ClerkKey+AccountKey] = [00]  
from django.shortcuts import render_to_response from django.template import RequestContext  def my_personalized_view(request):   return render_to_response('something.html'                              {}                              context_instance=RequestContext(request))  
$ python setup.py install  
map for map for map 
{{form.working_month}}  def __init__(self *args **kwargs):   forms.MultiValueField.__init__(self *args **kwargs)   self.fields = (forms.CharField() forms.CharField())  
import os os.environ['instance'] = 'blah' import a  import os import b print 'a:' os.environ['instance']  import os print 'b:' os.environ['instance']  b: blah a: blah  
next((i for i d in enumerate(hugelist) if 735 in d['ids']) None)  None next hugelist hugelist auxdict = {} L = len(hugelist) - 1 for i d in enumerate(reversed(hugelist)):   auxdict.update(dict.fromkeys(d['ids'] L-i))  reversed(enumerate(... enumerate reversed L-i auxdict auxdict = {} for i d in enumerate(hugelist):   for item in d['ids']:     if item not in auxdict: auxdict[item] =i  if dict L = len(hugelist) - 1 auxdict = dict((item L-i) for i d in enumerate(reversed(hugelist)) for item in d['ids'])  hugelist timeit hugelist 
Traceback (most recent call last):   File "t.py" line 13 in &lt;module&gt;     print 'The amount of sales tax is: ' '$%.2f' % sum(items_count) * tax TypeError: can't multiply sequence by non-int of type 'float'  sum(items_count) * tax  % sum() &lt;string_value&gt; * tax  print 'The amount of sales tax is: ' '$%.2f' % (sum(items_count) * tax)  % * sum() % &lt;string_value&gt; * tax items_tax = sum(items_count) * tax print 'The amount of sales tax is: ' '$%.2f' % items_tax  float() 0.06 tax = 0.06  tax = 0.06 tax = .06 raw_input() float() count raw_input() int() int count -= 1  count int() raw_input() y 
dbus.mainloop.glib.DBusGMainLoop(set_as_default=True) gobject.threads_init() dbus.mainloop.glib.threads_init()     DBUSMAINLOOP = gobject.MainLoop()  print 'Creating DBus Thread' DBUSLOOPTHREAD = threading.Thread(name='glib_mainloop' target=DBUSMAINLOOP.run) DBUSLOOPTHREAD.start()  print 'Starting REST' cherrypy.config.update({ 'server.socket_host': Common.DBUS_SERVER_ADDR 'server.socket_port': Common.DBUS_SERVER_PORT }) cherrypy.quickstart(USBRest())  
X = 1  import foo print(foo.X)  # prints 1  global def initDB(name):     global __DBNAME__  # add this line!     if __DBNAME__ is None: # see notes below; explicit test for None         __DBNAME__ = name     else:         raise RuntimeError("Database name has already been set.")  if not __DBNAME__ if not variablename None is None None import * from mymodule import mymodule dir(mymodule) mymodule.__DBNAME__ import * mymodule.something from mymodule import something global list __DBNAME__ = [None] # use length-1 list as a mutable  # later in code:   if __DBNAME__[0] is None:     __DBNAME__[0] = name  dict class Box:     pass  __m = Box()  # m will contain all module-level values __m.dbname = None  # database name global in module  # later in code: if __m.dbname is None:     __m.dbname = name  __m.dbname __m["DBNAME"] dict dict Box 
import scipy import math import numpy from scipy import interpolate   x= [123456] y= [102030]  Y = numpy.array([[i]*len(x) for i in y]) X = numpy.array([x for i in y]) Z = numpy.array([[2.33.45.67.89.611.2]                  [4.35.47.69.811.613.2]                  [6.37.48.610.813.615.2]])   tck = interpolate.bisplrep(XYZ) print interpolate.bisplev(3.515tck)    7.84921875  print interpolate.bisplev(xytck)  [[  2.2531746    4.2531746    6.39603175]  [  3.54126984   5.54126984   7.11269841]  [  5.5031746    7.5031746    8.78888889]  [  7.71111111   9.71111111  10.9968254 ]  [  9.73730159  11.73730159  13.30873016]  [ 11.15396825  13.15396825  15.2968254 ]]  tck = interpolate.bisplrep(XYZkx=5ky=2) print interpolate.bisplev(xytck)   [[  2.3   4.3   6.3]  [  3.4   5.4   7.4]  [  5.6   7.6   8.6]  [  7.8   9.8  10.8]  [  9.6  11.6  13.6]  [ 11.2  13.2  15.2]]  print interpolate.bisplev(3.515tck)  7.88671875  fig = plt.figure() ax = Axes3D(fig) ax.plot_surface(X Y Zrstride=1 cstride=1 cmap=cm.jet) plt.show()  
HTMLParser &gt;&gt;&gt; import HTMLParser &gt;&gt;&gt; h= HTMLParser.HTMLParser() &gt;&gt;&gt; h.unescape('alpha &amp;lt; &amp;beta;') u'alpha &lt; \u03b2'  &gt;&gt;&gt; cgi.escape(u'&lt;a&gt;bá&lt;/a&gt;').encode('ascii' 'xmlcharrefreplace') '&amp;lt;a&amp;gt;b&amp;#225;&amp;lt;/a&amp;gt;  
HTTP/1.1 200 OK Server: nginx Date: Wed 30 Dec 2009 01:38:24 GMT Content-Type: text/html; charset=utf-8 Connection: close  HttpResponseNotFound     return HttpResponseNotFound('&lt;h1&gt;Page not found&lt;/h1&gt;')  
pip install -e . easy_install . python setup.py install 
x = NavigableString('foop') y = pickle.dumps(x) z = pickle.loads(y) print x z  __getnewargs__ pickle.dumps x pickle.loads NavigableString.__new__ 
SELECT somestuff FROM mytable WHERE thetimestamp = ANY (%(times)s::timestamp[])  
str unicode           object              |              |          basestring             / \            /   \          str  unicode  str unicode &gt;&gt;&gt; string1 = "I am a plain string" &gt;&gt;&gt; string2 = u"I am a unicode string" &gt;&gt;&gt; isinstance(string1 str) True &gt;&gt;&gt; isinstance(string2 str) False &gt;&gt;&gt; isinstance(string1 unicode) False &gt;&gt;&gt; isinstance(string2 unicode) True &gt;&gt;&gt; isinstance(string1 basestring) True &gt;&gt;&gt; isinstance(string2 basestring) True  
0x00 
print str print print &gt;&gt;&gt; print '\xaa\xbb\xcc' ??  decode &gt;&gt;&gt; 'ª»Ì' '\xc2\xaa\xc2\xbb\xc3\x8c' &gt;&gt;&gt; 'ª»Ì'.decode(sys.stdin.encoding) u'\xaa\xbb\xcc'  '\xaa\xbb\xcc' print u "asdf" u"asdf" a = '\xAA\xBB\xCC' a.decode('latin1') # result: u'\xAA\xBB\xCC' print(a.decode('latin1')) # output: ª»Ì  sys.stdout.write("\xAA\xBB\xCC".decode('latin1').encode(sys.stdout.encoding))  sys.stdout.write("?öî\n".decode(sys.stdin.encoding).encode(sys.stdout.encoding))  ord('?'.decode('utf-8').encode('latin2'))  print(obj) str(obj) unicode unicode(str(obj)) print str __str__ class Foo(object):     def __str__(self):         return "I'm a Foo!"  print Foo()  print Python/bltinmodule.c builtin_print 
powrprof.dll mswsock.dll options setup.py  'dll_excludes': [ "mswsock.dll" "powrprof.dll" ]  
 f = open(filename 'wb')  
Foo.objects.order_by('b_date').values_list('b_date' flat=True)  
minidom ownerDocument &gt;&gt;&gt; imp= minidom.getDOMImplementation('') &gt;&gt;&gt; dt= imp.createDocumentType('html' '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd')  SystemId DocumentType &gt;&gt;&gt; doc= imp.createDocument('http://www.w3.org/1999/xhtml' 'html' dt) &gt;&gt;&gt; print doc.toxml() &lt;?xml version="1.0" ?&gt;&lt;!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;&lt;html/&gt;  DocumentType ownerDocument pxdom minidom &gt;&gt;&gt; doc= minidom.parseString('&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;&lt;head/&gt;&lt;body/&gt;&lt;/html&gt;') &gt;&gt;&gt; dt= minidom.getDOMImplementation('').createDocumentType('html' '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd') &gt;&gt;&gt; doc.insertBefore(dt doc.documentElement) &lt;xml.dom.minidom.DocumentType instance&gt; &gt;&gt;&gt; print doc.toxml() &lt;?xml version="1.0" ?&gt;&lt;!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;&lt;head/&gt;&lt;body/&gt;&lt;/html&gt;  &gt;&gt;&gt; doc.doctype # None &gt;&gt;&gt; dt.ownerDocument # None  def setDoctype(document doctype):     imp= document.implementation     newdocument= imp.createDocument(doctype.namespaceURI doctype.name doctype)     newdocument.xmlVersion= document.xmlVersion     refel= newdocument.documentElement     for child in document.childNodes:         if child.nodeType==child.ELEMENT_NODE:             newdocument.replaceChild(                 newdocument.importNode(child True) newdocument.documentElement             )             refel= None         elif child.nodeType!=child.DOCUMENT_TYPE_NODE:             newdocument.insertBefore(newdocument.importNode(child True) refel)     return newdocument  
&lt;table&gt; {% for item in items %}   &lt;tr&gt;     &lt;td&gt;{% item.name %}&lt;/td&gt;     {% for dday in days %}     &lt;td&gt;       {% ifequal dday item.day %}y{% else %}n{% endifequal %}     &lt;/td&gt;     {% endfor %}   &lt;/tr&gt; {% endfor %} &lt;/table&gt;  item.day item['day'] 
im = Image.open("D:\\Python26\\PYTHON-PROGRAMME\\bild.jpg")  
__setattr__ ______ 
from PIL import Image im = Image.open("D:\\Python26\\PYTHON-PROGRAMME\\bild.jpg") im.load() im.show()  if os.name == "nt":     command = "start /wait %s &amp;&amp; del /f %s" % (file file)  if os.name == "nt":     command = "%s" % file  
try except &gt;&gt;&gt; conn = sqlite3.connect('mydb') &gt;&gt;&gt; conn.close() &gt;&gt;&gt; try: ...   resultset = conn.execute("SELECT 1 FROM my_table LIMIT 1;") ... except sqlite3.ProgrammingError as e: ...   print e Cannot operate on a closed database.  
itertools.groupby() 
f = open(r"temp.txt") [[c for c in line] for line in f]  
params params reader = csv.reader(open('params.csv') delimiter='' skipinitialspace=True) params = list(reader)  
re findall() &gt;&gt;&gt; import re &gt;&gt;&gt; p = re.compile('\$(.*?)\$') &gt;&gt;&gt; s = "apple $banana$ coconut $delicious ethereal$ funkytown" &gt;&gt;&gt; p.findall(s) ['banana' 'delicious ethereal']  p \$ (...?) . * \$ 
.pyc python -OO -OO -O .pyo .pyc -O assert foo.py """This is the documentation for my module foo."""  def bar(x):   """This is the documentation for my function foo.bar."""   return x + 1  $ python -c'import foo; print foo.bar(22); print foo.__doc__' 23 This is the documentation for my module foo. $ ls -l foo.pyc -rw-r--r--  1 aleax  eng  327 Dec 30 16:17 foo.pyc $ python -O -c'import foo; print foo.bar(22); print foo.__doc__' 23 This is the documentation for my module foo. $ ls -l foo.pyo -rw-r--r--  1 aleax  eng  327 Dec 30 16:17 foo.pyo $ python -OO -c'import foo; print foo.bar(22); print foo.__doc__' 23 This is the documentation for my module foo. $ ls -l foo.pyo -rw-r--r--  1 aleax  eng  327 Dec 30 16:17 foo.pyo $ rm foo.pyo $ python -OO -c'import foo; print foo.bar(22); print foo.__doc__' 23 None $ ls -l foo.pyo -rw-r--r--  1 aleax  eng  204 Dec 30 16:17 foo.pyo  -O .pyo -OO .pyo .pyo touch foo.py .pyo .__doc__ None 
import cStringIO import sys  def getPrint(thefun *a **k):   savstdout = sys.stdout   sys.stdout = cStringIO.StringIO()   try:     thefun(*a **k)   finally:     v = sys.stdout.getvalue()     sys.stdout = savstdout   return v  getPrint(funA) getPrint(funA()) getPrint getPrint getPrint 
iter() c().next c def generator():     yield 1     yield 2     yield 3     yield -1  sequence = iter (generator().next -1) print sequence for value in sequence:     print value  pax&gt; python prog1.py     &lt;callable-iterator object at 0xb77dd6ac&gt;     1     2     3 pax&gt; _  
flush_all()   import sys   sys.path   import os  os.environ["CURRENT_VERSION_ID"]  
create_controls     create_left_panel         create_grid     create_right_panel  
def transpose(grid):     return zip(*grid)  def removeBlankRows(grid):     return [list(row) for row in grid if any(row)]  print removeBlankRows(transpose(removeBlankRows(transpose(grid))))  [[{'some': 'thing'} None None]  [None None {'something': 'else'}]  [None {'another': 'thing'} None]]  zip removeBlankRows def removeBlankRows(grid):     return [list(row) for row in grid if any(x is not None for x in row)]  
class A(some_function()):   def f(self):     self.member = 42     self.method()  class B(object):   pass  print B() # &lt;__main__.B object at 0xb7e4082c&gt;  def B_init(self):   self.answer = 42 def B_str(self):   return "&lt;The answer is %s.&gt;" % self.answer # notice these functions require no knowledge of the actual class # how hard are they to read and realize that "members" are used?  B.__init__ = B_init B.__str__ = B_str  print B() # &lt;The answer is 42.&gt;  
__repr__ __repr__ __str__ &gt;&gt;&gt; class Point: ...   def __init__(self x y): ...     self.x self.y = x y ...   def __repr__(self): ...     return 'Point(x=%s y=%s)' % (self.x self.y) &gt;&gt;&gt; p = Point(1 2) &gt;&gt;&gt; p Point(x=1 y=2)  
next() __iter__ for i in b:  a iter(self.w) next() 
__enter__ __exit__ with try-finally class DatabaseConnection(object):      def __enter__(self):         # make a database connection and return it         ...         return self.dbconn      def __exit__(self exc_type exc_val exc_tb):         # make sure the dbconnection gets closed         self.dbconn.close()         ...  with from __future__ import with_statement with DatabaseConnection() as mydbconn:     # do stuff  
struct_as_record=True G.shape G = x['G'][00] G.Inp 
Customer.objects.annotate(total=Sum('sale__total'))  class Customer(models.Model):     def __unicode__(self):         return self.name     name = models.CharField(max_length=200)      def total_sale(self):         total = 0         for s in self.sale_set:            total += s.total         return total  
im= im.convert('RGB') split 
allow_reuse_address class TestServer(SocketServer.TCPServer):     allow_reuse_address = True  ... httpd = TestServer(("" PORT) handler)  
__call__ func_xxx func_code 
sys.getsizeof() &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.getsizeof(1)  # integer 12 &gt;&gt;&gt; sys.getsizeof([]) # empty list 36 &gt;&gt;&gt; sys.getsizeof(()) # empty tuple 28 &gt;&gt;&gt; sys.getsizeof((1))  # tuple with one element 32  17*(12+4)+28 36+N*(4+300) 257 is not 257+0 
[:punct:] &gt;&gt;&gt; import string re &gt;&gt;&gt; pat = r'\b(([\w-]+://?|www[.])[^\s()&lt;&gt;]+(?:\([\w\d]+\)|([^%s\s]|/)))' &gt;&gt;&gt; pat = pat % re.sub(r'([-\\\]])' r'\\\1' string.punctuation)  re.sub() &gt;&gt;&gt; pat = pat % re.escape(string.punctuation)  
sign() cmp(x0) copysign(xy): Return x with the sign of y.  copysign sign copysign sign copysign &gt;&gt;&gt; math.copysign(1 -4) -1.0 &gt;&gt;&gt; math.copysign(1 3) 1.0  sign &gt;&gt;&gt; sign = functools.partial(math.copysign 1) # either of these &gt;&gt;&gt; sign = lambda x: math.copysign(1 x) # two will work &gt;&gt;&gt; sign(-4) -1.0 &gt;&gt;&gt; sign(3) 1.0 &gt;&gt;&gt; sign(0) 1.0 &gt;&gt;&gt; sign(-0.0) -1.0 &gt;&gt;&gt; sign(float('nan')) -1.0  copysign s = sign(a) b = b * s  b = copysign(b a)  cmp sign __cmp__ cmp sign copysign sign copysign 
state region-related country-related 
Asset.__subclasses__() Asset def descendants(aclass):   directones = aclass.__subclasses__()   if not directones: return   for c in directones:     yield c     for x in descendants(c): yield x  Asset 
import sys  from IPython.Shell import IPShellEmbed  class IPShellDoctest(IPShellEmbed):    def __call__(self *a **kw):        sys_stdout_saved = sys.stdout        sys.stdout = sys.stderr        try:            IPShellEmbed.__call__(self *a **kw)        finally:            sys.stdout = sys_stdout_saved   def some_function():   """   &gt;&gt;&gt; some_function()   'someoutput'   """   # now try to drop into an ipython shell to help   # with development   IPShellDoctest()(local_ns=locals())   return 'someoutput'  if __name__ == '__main__':   import doctest   print "Running doctest . . ."   doctest.testmod()  
FindFilesW() DIR_EXCLUDES = set(['.' '..']) MASK = win32con.FILE_ATTRIBUTE_DIRECTORY | win32con.FILE_ATTRIBUTE_SYSTEM REQUIRED = win32con.FILE_ATTRIBUTE_DIRECTORY FindFilesW = win32file.FindFilesW  def get_dir_size(path):     total_size = 0     try:         items = FindFilesW(path + r'\*')     except pywintypes.error ex:         return total_size      for item in items:         total_size += item[5]         if (item[0] &amp; MASK == REQUIRED):             name = item[8]             if name not in DIR_EXCLUDES:                 total_size += get_dir_size(path + '\\' + name)      return total_size  
logging.getLogger().getEffectiveLevel()  logging.getLogger() 
post blog @permission_required('blog.delete_post')  
sys.stderr print print("Error in atexit._run_exitfuncs:" file=sys.stderr)  
/usr/lib/pymodules/python2.5/sphinx/environment.py:from docutils.parsers.rst.languages import en as english  
numpy.set_printoptions import sys import numpy numpy.set_printoptions(threshold=sys.maxsize)  
db._get_cxn() db _ MySQL has gone away try...except OperationalError...try again 
&gt;&gt;&gt; class a(object): ...     b = 'bbbb' ...     def __init__(self): ...         self.c = 'cccc' ... &gt;&gt;&gt; a1=a() &gt;&gt;&gt; a2=a() &gt;&gt;&gt; a1.b 'bbbb' &gt;&gt;&gt; a2.b 'bbbb' &gt;&gt;&gt; a1.c='dddd' &gt;&gt;&gt; a1.c 'dddd' &gt;&gt;&gt; a2.c 'cccc' &gt;&gt;&gt; a.b= 'common' &gt;&gt;&gt; a1.b 'common' &gt;&gt;&gt; a2.b 'common'  
@classmethod @staticmethod from decorator import decorator  @decorator def print_function_name(function *args):     print '%s was called.' % function.func_name     return function(*args)  class My_class(object):     @classmethod     @print_function_name     def get_dir(cls):         return dir(cls)     @staticmethod     @print_function_name     def get_a():         return 'a'  
numpy numpy 
setup_code = """   from PerformanceTests.Vectors import NaiveVector   left = NaiveVector([100])   right = NaiveVector([010]) """  timeit def test():     "Stupid test function"     L = []     for i in range(100):         L.append(i)  if __name__=='__main__':     from timeit import Timer     t = Timer("test()" "from __main__ import test")     print t.timeit()  
sys.path __init__.py $ mkdir adir $ echo 'print "hello world"' &gt; adir/helo.py $ python -c 'import adir.helo' Traceback (most recent call last):   File "&lt;string&gt;" line 1 in &lt;module&gt; ImportError: No module named adir.helo $ touch adir/__init__.py $ python -c 'import adir.helo' hello world  adir helo.py import adir.helo __init__.py adir adir 
    textEdit = QtGui.QTextEdit(self.page1)     textEdit.setDocument(document)     layout = QtGui.QVBoxLayout(self.page1)     layout.addWidget(textEdit)  def toolbox_page2(self):     self.page2 = QtGui.QWidget()     self.page2.setGeometry(QtCore.QRect(0 0 471 145))      label = QtGui.QLabel(self.page2)     label.setText("Title - Build a Report : page 2")     label.setStyleSheet("font: 10pt 'Helvetica'; color: rgb(168 34 3)")     label.setGeometry(QtCore.QRect(QtCore.QPoint(50 50) label.sizeHint()))  
tzset time hasattr 
import admin.RunStoppedException  RunStoppedException admin mypackage.admin import admin.RunStoppedException import RunStoppedException RunStoppedException admin.RunStoppedException admin except import mypackage.admin.RunStoppedException except RunStoppedException:  mypackage.exceptions RunStoppedException 
mydatetime = datetime.datetime(d.year d.month d.day)  mydatetime = datetime.combine(d datetime.time())  mydatetime = datetime.datetime.fromordinal(d.toordinal())  
currrentRow=int(line['RID'])  r currrentRow 
def c(*x**y):     print(xy) def a(*x**y):     print(x)     def b(*x1**y1):         c(*(x+x1)**dict(y**y1))     return b  a(123a=1b=2)(456c='222'd='aaa')  &gt;&gt;&gt; ================================ RESTART ================================ &gt;&gt;&gt;  (1 2 3) (1 2 3 4 5 6) {'a': 1 'c': '222' 'b': 2 'd': 'aaa'} &gt;&gt;&gt;   
import sys from PIL import Image ImageDraw  class Region():     def __init__(self x y):         self._pixels = [(x y)]         self._min_x = x         self._max_x = x         self._min_y = y         self._max_y = y      def add(self x y):         self._pixels.append((x y))         self._min_x = min(self._min_x x)         self._max_x = max(self._max_x x)         self._min_y = min(self._min_y y)         self._max_y = max(self._max_y y)      def box(self):         return [(self._min_x self._min_y) (self._max_x self._max_y)]  def find_regions(im):     width height  = im.size     regions = {}     pixel_region = [[0 for y in range(height)] for x in range(width)]     equivalences = {}     n_regions = 0     #first pass. find regions.     for x in xrange(width):         for y in xrange(height):             #look for a black pixel             if im.getpixel((x y)) == (0 0 0 255): #BLACK                 # get the region number from north or west                 # or create new region                 region_n = pixel_region[x-1][y] if x &gt; 0 else 0                 region_w = pixel_region[x][y-1] if y &gt; 0 else 0                  max_region = max(region_n region_w)                  if max_region &gt; 0:                     #a neighbour already has a region                     #new region is the smallest &gt; 0                     new_region = min(filter(lambda i: i &gt; 0 (region_n region_w)))                     #update equivalences                     if max_region &gt; new_region:                         if max_region in equivalences:                             equivalences[max_region].add(new_region)                         else:                             equivalences[max_region] = set((new_region ))                 else:                     n_regions += 1                     new_region = n_regions                  pixel_region[x][y] = new_region      #Scan image again assigning all equivalent regions the same region value.     for x in xrange(width):         for y in xrange(height):                 r = pixel_region[x][y]                 if r &gt; 0:                     while r in equivalences:                         r = min(equivalences[r])                      if not r in regions:                         regions[r] = Region(x y)                     else:                         regions[r].add(x y)      return list(regions.itervalues())  def main():     im = Image.open(r"c:\users\personal\py\ocr\test.png")     regions = find_regions(im)     draw = ImageDraw.Draw(im)     for r in regions:         draw.rectangle(r.box() outline=(255 0 0))     del draw      #im.show()     output = file("output.png" "wb")     im.save(output)     output.close()  if __name__ == "__main__":     main()  
dict &gt;&gt;&gt; class m(dict): ...   def __missing__(self key): return key + key ...  &gt;&gt;&gt; a=m() &gt;&gt;&gt; a['ciao'] 'ciaociao'  __missing__ dict UserDict __missing__ d[key] d[key] __missing__(key) __missing__() __missing__() KeyError __missing__() collections.defaultdict 
sys.exc_info 
with open(file1) as fsock1 open(file2 'a') as fsock2:     fstring1 = fsock1.read()     fstring2 = fsock2.read()  
from django.contrib.auth.signals import user_logged_in   def do_stuff(sender user request **kwargs):     whatever...  user_logged_in.connect(do_stuff)  
from celery.task.schedules import crontab from celery.decorators import periodic_task  @periodic_task(run_every=crontab(hour=7 minute=30 day_of_week="mon")) def every_monday_morning():     print("This runs every Monday morning at 7:30a.m.")  
complex complex 
def loadComboCity(selfcustomerName):     """query results cityList into self.mydb.matrix"""     queryName="citylist_thisCustomer"     self.mysqlAPI(queryNamecustomerName)      # Clear the previous items in the combobox (if any)     self.comboCity.clear()      id=0     for row in self.mydb.matrix:         cityname=self.mydb.matrix[id][0]         self.addcomboCity(idcityname)          id=id+1     del self.mydb.matrix[:]  
pop self.data {'a':'aaa''b':'bbb''c':'ccc'} default pop key pop key print b.pop('a'{'b':'bbb'}) 'a' b.data b=a() print b.pop('a'{'b':'bbb'}) print b.pop('a'{'b':'bbb'}) print b.data  pop 'a' pop default 'a' b.data 
keys a(dict) a.__dict__.keys()  # Mixin defining all dictionary methods for classes that already have  # a minimum dictionary interface including getitem setitem delitem  # and keys  DictMixin UserDict collections.MutableMapping class A(object):     def __init__(self):         self.myinstatt1 = 'one'         self.myinstatt2 = 'two'     def mymethod(self):         pass  a = A() for attr value in a.__dict__.iteritems():     print attr value  
.feed() self.reset() 
DateProperty 
def mount(f):     op = gio.MountOperation()     op.connect('ask-password' ask_password_cb)     f.mount_enclosing_volume(op mount_done_cb)  def ask_password_cb(op message default_user default_domain flags):     op.set_username(USERNAME)     op.set_domain(DOMAIN)     op.set_password(PASSWORD)     op.reply(gio.MOUNT_OPERATION_HANDLED)  def mount_done_cb(obj res):     obj.mount_enclosing_volume_finish(res)  
import gui ui = None  def start():   selected = "web"   log("going to start gui " + selected)   global ui   __import__("gui.%s" % selected) # if you're importing a submodule that                                   # may not have been imported yet   ui = getattr(gui selected)   ui.start()  
    for t in list:         fileo.write(t + "\n")     list = []     fileo.close()     fileo = open(OutFile 'a')     k = 0  list list 
src = """&lt;p&gt;&lt;i&gt;p&lt;/i&gt;&lt;sub&gt;0&lt;/sub&gt; = (&lt;i&gt;m&lt;/i&gt;&lt;sup&gt;3&lt;/sup&gt;+(2&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;+&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;) """ \       """&lt;i&gt;m&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;+(&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;+2&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt; &lt;i&gt;l&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;+""" \       """&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;) &lt;i&gt;m&lt;/i&gt;) /(&lt;i&gt;m&lt;/i&gt;&lt;sup&gt;3&lt;/sup&gt;+(3&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;+""" \       """2&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;) ) }.&lt;/p&gt;"""  from pyparsing import makeHTMLTags anyOpenTag anyCloseTag Suppress replaceWith  # set up tag matching for &lt;sub&gt; and &lt;sup&gt; tags SUBendSUB = makeHTMLTags("sub") SUPendSUP = makeHTMLTags("sup")  # all other tags will be suppressed from the output ANYendANY = map(Suppress(anyOpenTaganyCloseTag))  SUB.setParseAction(replaceWith("_{")) SUP.setParseAction(replaceWith("^{")) endSUB.setParseAction(replaceWith("}")) endSUP.setParseAction(replaceWith("}"))  transformer = (SUB | endSUB | SUP | endSUP | ANY | endANY)  # now use the transformer to apply these transforms to the input string print transformer.transformString(src)  p_{0} = (m^{3}+(2l_{2}+l_{1}) m^{2}+(l_{2}^{2}+2l_{1} l_{2}+l_{1}^{2}) m) /(m^{3}+(3l_{2}+2l_{1}) ) }.  
:python import sys :python print sys.path :python sys.path.append(...) ... etc  
itertools.groupby import itertools operator  data = [ {'LTYPE': 'N' 'RID': '1' 'NAME': 'Jason Smith'} {'LTYPE': 'A' 'RID': '2' 'NAME': 'DA'} {'LTYPE': 'A' 'RID': '3' 'NAME': 'B'} {'LTYPE': 'N' 'RID': '4' 'NAME': 'John Smith'} {'LTYPE': 'A' 'RID': '5' 'NAME': 'BC'} {'LTYPE': 'A' 'RID': '6' 'NAME': 'CB'} {'LTYPE': 'A' 'RID': '7' 'NAME': 'DB'} {'LTYPE': 'A' 'RID': '8' 'NAME': 'DA'} ]  for k g in itertools.groupby(data operator.itemgetter('LTYPE')):   if k=='N':     person_name_record = next(g)   else:     attribute_records = list(g)     person_attributes = ' '.join(r['NAME'] for r in attribute_records)     addfields = dict(PERSON_ATTRIBUTES=person_attributes                      PERSON_NAME=person_name_record['NAME'])     person_name_record.update(addfields)     for r in attribute_records: r.update(addfields)  for r in data: print r  
raise_ 
@register.filter def in_list(obj arg):     "Is the issue in the list?"     return obj in (item.issue for item in arg)  {% if issue|in_list:user.wishlist_items.all %}  
import math  for i in range(n):   ax = ay = az = 0.0   for j in range(n):     dx=x[j]-x[i]     dy=y[j]-y[i]     dz=z[j]-z[i]     invr = 1.0/math.sqrt(dx*dx + dy*dy + dz*dz + eps)     f=m[j]*invr**3     ax += f*dx  # accumulate the acceleration from gravitational attraction     ay += f*dy     az += f*dz   xnew[i] = x[i] + dt*vx[i] + 0.5*dt*dt*ax   ynew[i] = y[i] + dt*vy[i] + 0.5*dt*dt*ay   znew[i] = z[i] + dt*vz[i] + 0.5*dt*dt*az   vx[i] += dt*ax  # update velocity of particle "i"   vy[i] += dt*ay   vz[i] += dt*az  n 
os _nt _posix environ except os.py os.environ 
defaultdict dict dict dv = list() # arbitrary sequence of numbers seq = [245246389372472]  # dictionary counting number of occurances seqDic = { }  for i in seq:   if i in seqDic:     seqDic[i] += 1   else:     dv.append(i)     seqDic[i] = 1  if i in seqDic dv seqDic for i in seq:   seqDic[i] = 1 + seqDic.get(i 0)  get dict dv for i in seq:   seqDic[i] = 1 + seqDic.get(i 0)   if seqDic[i] == 1: dv.append(i)  dv dv seq dv = seqDic.keys()  .keys dv = list(seqDic)  dv seqDic = dict.fromkeys(seq 0) for i in seq: seqDic[i] += 1 dv = list(seqDic)  fromkeys 0 .get 
myfun(*some_tuple) * 
jQuery(function($) {     $('div.inline-group').sortable({         items: 'div.inline-related'         handle: 'h3:first'         update: function() {             $(this).find('div.inline-related').each(function(i) {                 if ($(this).find('input[id$=chair_id]').val() ||                   $(this).find('select[id$=member]').val() ||                       $(this).find('select[id$=description]').val()) {                     $(this).find('input[id$=order]').val(i+1);                 }             });         }     });     $('div.inline-related h3').css('cursor' 'move');     $('div.inline-related').find('input[id$=order]').parent('div').hide(); });  
def dobin(n):   digs = []   s = ''   if n&lt;0:     s = '-'     n = -n   while True:     digs.append(str(n % 2))     n /= 2     if not n: break   if s: digs.append(s)   digs.reverse()   return ''.join(digs)  
def somefunction(keyFunction values):     return dict((keyFunction(v) v) for v in values)  print somefunction(lambda a: a[0] ["hello" "world"])  {'h': 'hello' 'w': 'world'}  
def get_text_blocks(filename):     import itertools     with open(filename'r') as f:         groups = itertools.groupby(f lambda line:line.startswith('-- -'))         return [''.join(lines) for is_separator lines in groups if not is_separator]  def get_text_blocks(filename):     import re     seperator = re.compile('^-- -.*' re.M)     with open(filename'r') as f:         return re.split(seperator f.read())  
eval __class__ object __subclasses__ ast.literal_eval 
'DEF' remove remove discard remove 
settings.DATABASE_ENGINE settings.py 
shutil.copytree shutil.copy import shutil errno  def copyanything(src dst):     try:         shutil.copytree(src dst)     except OSError as exc: # python &gt;2.5         if exc.errno == errno.ENOTDIR:             shutil.copy(src dst)         else: raise  
os.listdir() import os os.listdir('/foo/bar')[0]  
elif 'd' in string:      print 'string4 being processed'      # undesirable side effect occurs here     newData.remove(string)     xmlToDictionary(string 'string4')   
for i = 1 to 10000     get "http://en.wikipedia.org/wiki/Special:Random"  
os.listdir os.remove import os  filelist = [ f for f in os.listdir(mydir) if f.endswith(".bak") ] for f in filelist:     os.remove(os.path.join(mydir f))  glob.glob import glob os os.path  filelist = glob.glob(os.path.join(mydir "*.bak")) for f in filelist:     os.remove(f)  os.chdir 
dis FOR_ITER LOAD_FAST LOAD_DEREF LOAD_DEREF LOAD_FAST x y x LOAD_FAST &gt;&gt;&gt; def Generator(x y): ...     for i in xrange(x): ...         for j in xrange(y): ...             yield(i j) ... &gt;&gt;&gt; dis.dis(Generator)   2           0 SETUP_LOOP              54 (to 57)               3 LOAD_GLOBAL              0 (xrange)               6 LOAD_FAST                0 (x)               9 CALL_FUNCTION            1              12 GET_ITER         &gt;&gt;   13 FOR_ITER                40 (to 56)              16 STORE_FAST               2 (i)    3          19 SETUP_LOOP              31 (to 53)              22 LOAD_GLOBAL              0 (xrange)              25 LOAD_FAST                1 (y)              28 CALL_FUNCTION            1              31 GET_ITER         &gt;&gt;   32 FOR_ITER                17 (to 52)              35 STORE_FAST               3 (j)    4          38 LOAD_FAST                2 (i)              41 LOAD_FAST                3 (j)              44 BUILD_TUPLE              2              47 YIELD_VALUE              48 POP_TOP              49 JUMP_ABSOLUTE           32         &gt;&gt;   52 POP_BLOCK         &gt;&gt;   53 JUMP_ABSOLUTE           13         &gt;&gt;   56 POP_BLOCK         &gt;&gt;   57 LOAD_CONST               0 (None)              60 RETURN_VALUE &gt;&gt;&gt; def Generator_expr(x y): ...    return ((i j) for i in xrange(x) for j in xrange(y)) ... &gt;&gt;&gt; dis.dis(Generator_expr.func_code.co_consts[1])   2           0 SETUP_LOOP              47 (to 50)               3 LOAD_FAST                0 (.0)         &gt;&gt;    6 FOR_ITER                40 (to 49)               9 STORE_FAST               1 (i)              12 SETUP_LOOP              31 (to 46)              15 LOAD_GLOBAL              0 (xrange)              18 LOAD_DEREF               0 (y)              21 CALL_FUNCTION            1              24 GET_ITER         &gt;&gt;   25 FOR_ITER                17 (to 45)              28 STORE_FAST               2 (j)              31 LOAD_FAST                1 (i)              34 LOAD_FAST                2 (j)              37 BUILD_TUPLE              2              40 YIELD_VALUE              41 POP_TOP              42 JUMP_ABSOLUTE           25         &gt;&gt;   45 POP_BLOCK         &gt;&gt;   46 JUMP_ABSOLUTE            6         &gt;&gt;   49 POP_BLOCK         &gt;&gt;   50 LOAD_CONST               0 (None)              53 RETURN_VALUE  
&gt;&gt;&gt; "%012d" % ( 1 ) '000000000001' &gt;&gt;&gt; "%012d" % ( 2 ) '000000000002'  
int("000000013"10) int(("%o" % 00000013)10)  
Decimal() decimal &gt;&gt;&gt; TWOPLACES = Decimal(10) ** -2       # same as Decimal('0.01') &gt;&gt;&gt; # Round to two places &gt;&gt;&gt; Decimal('3.214').quantize(TWOPLACES) Decimal('3.21') &gt;&gt;&gt; # Validate that a number does not exceed two places &gt;&gt;&gt; Decimal('3.21').quantize(TWOPLACES context=Context(traps=[Inexact])) Decimal('3.21') &gt;&gt;&gt; Decimal('3.214').quantize(TWOPLACES context=Context(traps=[Inexact])) Traceback (most recent call last):    ... Inexact: None  Decimal str str(Decimal('10')) # -&gt; '10' str(Decimal('10.00')) # -&gt; '10.00' str(Decimal('10.000')) # -&gt; '10.000'  
import Image import ImageOps  x = Image.open('test.png') y = ImageOps.expand(xborder=5fill='red') y.save('test2.png')  
import urllib import re  fbhandle = urllib.urlopen('http://www.facebook.com/Microsoft') pattern = "6 of(.*)fans" #this wild card doesnt appear to work? compiled = re.compile(pattern)  ms = compiled.search(fbhandle.read()) print ms.group(1).strip() fbhandle.close()  re.search() re.match() 79110 
isidentifier &gt;&gt;&gt; 's'.isidentifier() True  
subprocess.call() subprocess.Popen() subprocess.PIPE communicate() from subprocess import Popen PIPE  p = Popen(['program' 'arg1'] stdin=PIPE stdout=PIPE stderr=PIPE) output err = p.communicate(b"input data that is passed to subprocess' stdin") rc = p.returncode  subprocess.call() fileno() 
depth mode_to_bpp = {'1':1 'L':8 'P':8 'RGB':24 'RGBA':32 'CMYK':32 'YCbCr':24 'I':32 'F':32}  data = Image.open('file.jpg') bpp = mode_to_bpp[data.mode]  
b = a b help(b) a a def a(something):     return something*something  #Case I - referencing b1 = a #Case II - creating a new function to call the first def b2(something):     return a(something)  $ python -mtimeit -s'import ref' 'ref.a(23)' 1000000 loops best of 3: 0.716 usec per loop $ python -mtimeit -s'import ref' 'ref.b1(23)' 1000000 loops best of 3: 0.702 usec per loop $ python -mtimeit -s'import ref' 'ref.b2(23)' 1000000 loops best of 3: 0.958 usec per loop  b1 a b2 a 
x+y x a y b args+moreargs tuple 
RequestContext 
threading.py thread threading thread 
{a|b}|{c|d} 
PyImaging_GrabScreenWin32(PyObject* self PyObject* args) {     int width height;     HBITMAP bitmap;     BITMAPCOREHEADER core;     HDC screen screen_copy;     PyObject* buffer;      /* step 1: create a memory DC large enough to hold the        entire screen */      screen = CreateDC(";DISPLAY" NULL NULL NULL);      screen_copy = CreateCompatibleDC(screen);       width = GetDeviceCaps(screen HORZRES);     height = GetDeviceCaps(screen VERTRES);      bitmap = CreateCompatibleBitmap(screen width height);     if (!bitmap)         goto error;      if (!SelectObject(screen_copy bitmap))         goto error;      /* step 2: copy bits into memory DC bitmap */      if (!BitBlt(screen_copy 0 0 width height screen 0 0 SRCCOPY))         goto error;      /* step 3: extract bits from bitmap */      buffer = PyString_FromStringAndSize(NULL height * ((width*3 + 3) &amp; -4));     if (!buffer)         return NULL;      core.bcSize = sizeof(core);     core.bcWidth = width;     core.bcHeight = height;     core.bcPlanes = 1;     core.bcBitCount = 24;     if (!GetDIBits(screen_copy bitmap 0 height PyString_AS_STRING(buffer)                    (BITMAPINFO*) &amp;core DIB_RGB_COLORS))         goto error;      DeleteObject(bitmap);     DeleteDC(screen_copy);     DeleteDC(screen);      return Py_BuildValue("(ii)N" width height buffer);  error:     PyErr_SetString(PyExc_IOError "screen grab failed");      DeleteDC(screen_copy);     DeleteDC(screen);      return NULL; }  winnt Windows &gt;&gt;&gt; from ctypes import * &gt;&gt;&gt; user= windll.LoadLibrary("c:\\winnt\\system32\\user32.dll") #I am in windows 2000 may be yours will be windows &gt;&gt;&gt; h = user.GetDC(0) &gt;&gt;&gt; gdi= windll.LoadLibrary("c:\\winnt\\system32\\gdi32.dll") &gt;&gt;&gt; gdi.GetPixel(h1023767) 16777215 #I believe its white color of RGB or BGR value #FFFFFF (according to msdn it should be RGB) &gt;&gt;&gt; gdi.GetPixel(h1024767) -1 #because my screen is only 1024x768  from ctypes import windll dc= windll.user32.GetDC(0)  def getpixel(xy):     return windll.gdi32.GetPixel(dcxy)  getpixel(00) getpixel(1000) winnt windows user32.dll gdi32.dll 
decimal decimal.getcontext() decimal.setcontext('foo') a .copy() from decimal import localcontext  with localcontext() as ctx:     ctx.prec -= 5   # Perform a low precision calculation     s = calculate_something() s = +s  # Round the final result back to the default precision  
req = mechanize.Request("http://www.google.com") req.set_proxy("localhost:8888""http") mechanize.urlopen(req)  
new.classobj from win32com.client import Dispatch WithEvents from new import classobj  class MyEventHandler(object):     def OnVisible(self visible):         print "got event from object %d" % self.obj_index  listOfObjects = [] for i in range(3):     handler = classobj('Handler_%s' % i(MyEventHandler){})     handler.obj_index = i     ie = Dispatch("InternetExplorer.Application")     listOfObjects.append(ie)     WithEvents(ie handler)  listOfObjects[0].Visible = 1 listOfObjects[2].Visible = 1  got event from object 0 got event from object 2  
minus_seven = today - datetime.timedelta(days = 7)  
string.replace re.sub glob.glob with try finally *.clean fileinput import re import os import glob  source_dir=os.getcwd() target_dir="clean" source_files = [fname for fname in glob.glob(os.path.join(source_dir"*.seq"))]  # check if target directory exists... if not create it. if not os.path.exists(target_dir):     os.makedirs(target_dir)  for source_file in source_files:    target_file = os.path.join(target_diros.path.basename(source_file)+".clean")    with open(source_file'r') as sfile:       with open(target_file'w') as tfile:          lines = sfile.readlines()          # do the replacement in the second line.          # (remember that arrays are zero indexed)          lines[1]=re.sub("K|Y|W|M|R|S"'N'lines[1])          tfile.writelines(lines)  print "DONE"  
".*?.*?.*?.*?.*?.*?.*?.*?.*?.*?"*50000 ".*?" "x"*50000 "x"*50000 ".*?x"*50000 "x"*50000 ".*?x"*50000 
query = u"?????????"  # -*- coding: UTF-8 -*-  
parser.setFeature(handler.feature_external_ges False)  
Session.delete() Inventory character.inventory 'delete-orphan' Inventory 
&lt;meta http-equiv="Content-type" content="text/html; charset=utf-8" /&gt;   
while True:     rate(100) #what does this rate(100) do?     try:         'something'     except:         'something else'  True False True True False while 
make.retval make retval def make( ):     etc.      return retval  def email_results( retval ):     etc.  if __name__ == "__main__":     retval= make()     email_results( retval )  
&lt;html&gt; &lt;head py:match="item.tag == 'head'"&gt;   &lt;title&gt;My Site&lt;/title&gt; &lt;/head&gt; &lt;body py:match="item.tag == 'body'"&gt;   &lt;h1&gt;My Site&lt;/h1&gt;   &lt;div py:replace="item[:]"&gt;&lt;/div&gt;   &lt;p id="footer"&gt;Copyright Blixt 2010&lt;/p&gt;   &lt;div py:if="defined('body_end')" py:replace="body_end()"&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt;  &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;   &lt;p&gt;Hello World!&lt;/p&gt;   &lt;div py:def="body_end()" py:strip="True"&gt;     &lt;script type="text/javascript"&gt;alert('Hello World!');&lt;/script&gt;   &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;  body_end &lt;/body&gt; &lt;/body&gt; body_end py:def="body_end()" py:strip="True" &lt;div&gt; 
a = CustASample() b = Sample() a.__class__ is b.__class__ -&gt; False  class A(object):     def __init__(self):         self.__class__ = B  class B(object):     def bark(self):        print "Wuff!"  a = A() b = B() a.__class__ is b.__class__ -&gt; True  a.bark() -&gt; Wuff!  b.bark() -&gt; Wuff!  __new__ __init__ class C(object):     def __new__(cls):         return A()  &gt;&gt;&gt; a = object() &gt;&gt;&gt; b = object() &gt;&gt;&gt; a == b False  __eq__ a is b is &gt;&gt;&gt; id(a) 156808  
properties() def populate_object_properties(values_as_strings                                 object_to_populate                                 properties_to_populate):     model_properties = object_to_populate.properties()     for k in properties_to_populate:                 value = values_as_strings.get(k)         model_property = model_properties.get(k)         if value:             if isinstance(model_property StringProperty):                 setattr(object_to_populate k str(value))             elif isinstance(model_property IntegerProperty):                 setattr(object_to_populate k int(value))         else:             setattr(object_to_populate k None)  
//PHP style header('Content-Type: application/vnd.ms-excel'); header('Content-Disposition: attachment; filename="downloaded.pdf"');  
import inspect def callers_module():    module = inspect.getmodule(inspect.currentframe().f_back)    return module  
class ReopeningFile(object):     def __init__(self filename):         self.filename = filename         self.f = open(self.filename)      def next(self):         try:             self.f.next()         except StopIteration:             depth = self.f.tell()             self.f.close()             self.f = open(self.filename)             self.f.seek(depth)             # May need to sleep here to allow more data to come in             # Also may need a way to signal a real StopIteration             self.next()      def __iter__(self):         return self  import csv csv_reader = csv.reader(ReopeningFile('data.csv')) for each in csv_reader:     process_csv_line(each)  
checkedItems = [i for i in range(citList.GetCount()) if citList.IsChecked(i)]  citList.GetChecked() __init__ __init__ wx.EVT_BUTTON self self.citList = wx.CheckListBox(self -1 (60 50) wx.DefaultSize allLoc) # some code self.panel = citPanel(self -1)  Clicked def Clicked(self event):     checkedItems = [i for i in range(self.panel.citList.GetCount()) if self.panel.citList.IsChecked(i)]     print checkedItems     event.Skip()  
__import__(m globals() locals()) __import__(m) p.split(fn)[1][:-3] 
func User.coords = classmethod(lambda s: (s.latitude s.longitude))  def calc_distance(latlong1 latlong2):     return func.sqrt(func.pow(69.1 * (latlong1[0] - latlong2[0])2)                    + func.pow(53.0 * (latlong1[1] - latlong2[1])2))  meta.Session.query(User).filter(calc_distance(User.coords() (my_lat my_long)) &lt; 5)  
u 'ISU European Figure Skating Championships 2009: Senior Ladies Ladies: Short Program - 2. Susanna P\xc3\x96YKI\xc3\x96'  ascii &gt;&gt;&gt; 'P\xc3\x96YKI\xc3\x96'.encode('utf-8') UnicodeDecodeError  
INSTALLED_APPS = ( 'django.contrib.auth' 'django.contrib.contenttypes' 'django.contrib.sessions' 'django.contrib.admin' 'django.contrib.sites' 'squick.items' 'cowsite.search' 'cowsite.posts'  
descr.__get__(self obj type=None) --&gt; value descr.__set__(self obj value) --&gt; None descr.__delete__(self obj) --&gt; None key __get__ def __init__(self initval=None name='var'):     self.val = initval     self.name = name  def __get__(self obj objtype):     print 'Retrieving' self.name     return self.val  def __set__(self obj val):     print 'Updating'  self.name     self.val = val  self.something __init__ __set__ self.something __get__ print 
.+&gt; [^&gt;]+&gt; .*?&gt; [^&gt;]*&gt; [^\r\n] 
None urlopen is None 
from google.appengine.ext import webapp from google.appengine.ext.webapp.util import run_wsgi_app  import jsonpickle  class Pizza:     pass                  class Example(webapp.RequestHandler):     def get(self):         jsonpickle.load_backend('django.utils.simplejson'                                 'dumps''loads'ValueError)         encoded = jsonpickle.encode(Pizza())         self.response.out.write( jsonpickle.decode(encoded).__class__ )  run_wsgi_app(webapp.WSGIApplication([('/' Example)]debug=True))  
h[1] &gt;&gt;&gt; import datetime h[1] &gt;&gt;&gt; Jan1st = datetime.date(201011) h[1] &gt;&gt;&gt; YearWeekNumDOW = Jan1st.isocalendar() # DOW = day of week h[1] &gt;&gt;&gt; print YearWeekNumDOW 2009 53 5  from datetime import date timedelta   def allsundays(year):     """This code was provided in the previous answer! It's not mine!"""     d = date(year 1 1)                    # January 1st                                                               d += timedelta(days = 6 - d.weekday())  # First Sunday                                                              while d.year == year:         yield d         d += timedelta(days = 7)  Dict = {} for wnd in enumerate(allsundays(2010)):     # This is my only contribution!     Dict[wn+1] = [(d + timedelta(days=k)).isoformat() for k in range(07) ]  print Dict  
Python __path__ __path__ __init__.py 
date datetime from datetime import date timedelta  def allsundays(year):    d = date(year 1 1)                    # January 1st    d += timedelta(days = 6 - d.weekday())  # First Sunday    while d.year == year:       yield d       d += timedelta(days = 7)  for d in allsundays(2010):    print(d)  
class YesNo(Criteria):     def __init__(self  name  ctype):         Criteria.__init__(self)            # &lt;&lt;&lt;&lt;----- This was missing before         self.Name = name         self.Index = ctype  class Criteria(QItemDelegate):     def __init__(self):         QItemDelegate.__init__(self)       # &lt;&lt;&lt;&lt;----- This was missing before  
print repr(filename)  os.path.join '/dirname' repr repr filename = filename.decode('utf-8') os.path.join open .encode('Latin-1') .encode('utf-8') 
bbins=np.bincount(b)  a[:len(bbins)] += bbins  
n funct funct def funct():     x = 4     def action(n):         return x ** n     return action  
PyErr_PrintEx PyErr_Print sys.last_traceback 
urllib.unquote(string)  
from google.appengine.ext import webapp from google.appengine.ext.webapp.util import run_wsgi_app  class ProfileHandler(webapp.RequestHandler):      def get(self *ar **kw):         self.response.out.write("PROFILE IS:" + ar[0])  run_wsgi_app(webapp.WSGIApplication( [(r'/main/profile/([a-f0-9]{40})' ProfileHandler)]                                  debug=True))  application: someapp version: 1 runtime: python api_version: 1  handlers: - url: /main/.*   script: index.py  GET: http://localhost:8082/main/profile/4c4f630aef49c0065c22eb3dd35a00f5787f4816 RESPONSE: PROFILE IS:4c4f630aef49c0065c22eb3dd35a00f5787f4816  
def selectDate(self):     date = self.calendar.selectedDate()     self.fullDate = str(date.day()) + " / " + str(date.month()) + " / " + str(date.year())     print "full date: %s" % self.fullDate  
import win32com.client from pythoncom import PumpWaitingMessages from time import time strftime import constants  class EventHandler:     def OnProcessEvent(self result):         event = win32com.client.gencache.EnsureDispatch(result)          if event.EventType == constants.SUBSCRIPTION_DATA:             self.getData(event)         elif event.EventType == constants.SUBSCRIPTION_STATUS:             self.getStatus(event)         else:             self.getMisc(event)     def getData(self event):         iterator = event.CreateMessageIterator()         while iterator.Next():             message = iterator.Message               dataString = ''             for fieldIndex field in enumerate(constants.fields):                            if message.AsElement.HasElement(field):                     element = message.GetElement(field)                     if element.IsNull:                         theValue = ''                     else:                         theValue = ' Value: ' + str(element.Value)                      dataString = dataString + ' (Type: ' + element.Name + theValue + ')'             print strftime('%m/%d/%y %H:%M:%S') + ' MessageType: ' + message.MessageTypeAsString + ' CorrelationId: ' + str(message.CorrelationId) + dataString     def getMisc(self event):         iterator = event.CreateMessageIterator()         while iterator.Next():             message = iterator.Message             print strftime('%m/%d/%y %H:%M:%S') + ' MessageType: ' + message.MessageTypeAsString     def getStatus(self event):         iterator = event.CreateMessageIterator()         while iterator.Next():             message = iterator.Message             if message.AsElement.HasElement('reason'):                 element = message.AsElement.GetElement('reason')                 print strftime('%m/%d/%y %H:%M:%S') + ' MessageType: ' + message.MessageTypeAsString + ' CorrelationId: ' + str(message.CorrelationId) + ' Category: ' + element.GetElement('category').Value + ' Description: ' + element.GetElement('description').Value              if message.AsElement.HasElement('exceptions'):                 element = message.AsElement.GetElement('exceptions')                 exceptionString = ''                 for n in range(element.NumValues):                     exceptionInfo = element.GetValue(n)                     fieldId = exceptionInfo.GetElement('fieldId')                     reason = exceptionInfo.GetElement('reason')                     exceptionString = exceptionString + ' (Field: ' + fieldId.Value + ' Category: ' + reason.GetElement('category').Value + ' Description: ' + reason.GetElement('description').Value + ') '                  print strftime('%m/%d/%y %H:%M:%S') + ' MessageType: ' + message.MessageTypeAsString + ' CorrelationId: ' + str(message.CorrelationId) + exceptionString  class bloombergSource:     def __init__(self):         session = win32com.client.DispatchWithEvents('blpapicom.Session'  EventHandler)         session.Start()         started = session.OpenService('//blp/mktdata')         subscriptions = session.CreateSubscriptionList()         for tickerIndex ticker in enumerate(constants.tickers):             if len(constants.interval) &gt; 0:                 subscriptions.AddEx(ticker constants.fields constants.interval session.CreateCorrelationId(tickerIndex))             else:                 subscriptions.Add(ticker constants.fields session.CreateCorrelationId(tickerIndex))            session.Subscribe(subscriptions)         endTime = time() + 2         while True:             PumpWaitingMessages()             if endTime &lt; time():                                 break                 if __name__ == "__main__":     aBloombergSource = bloombergSource()  ADMIN = 1 AUTHORIZATION_STATUS = 11 BLPSERVICE_STATUS = 9 PARTIAL_RESPONSE = 6 PUBLISHING_DATA = 13 REQUEST_STATUS = 4 RESOLUTION_STATUS = 12 RESPONSE = 5 SESSION_STATUS = 2 SUBSCRIPTION_DATA = 8 SUBSCRIPTION_STATUS = 3 TIMEOUT = 10 TOKEN_STATUS = 15 TOPIC_STATUS = 14 UNKNOWN = -1 fields = ['BID'] tickers = ['AUD Curncy'] interval = '' #'interval=5.0'  import win32com.client  session = win32com.client.Dispatch('blpapicom.Session') session.QueueEvents = True session.Start() started = session.OpenService('//blp/refdata') dataService = session.GetService('//blp/refdata') request = dataService.CreateRequest('HistoricalDataRequest') request.GetElement('securities').AppendValue('5 HK Equity') request.GetElement('fields').AppendValue('PX_LAST') request.Set('periodicitySelection' 'DAILY') request.Set('startDate' '20090119') request.Set('endDate' '20090130') cid = session.SendRequest(request) ADMIN = 1 AUTHORIZATION_STATUS = 11 BLPSERVICE_STATUS = 9 PARTIAL_RESPONSE = 6 PUBLISHING_DATA = 13 REQUEST_STATUS = 4 RESOLUTION_STATUS = 12 RESPONSE = 5 SESSION_STATUS = 2 SUBSCRIPTION_DATA = 8 SUBSCRIPTION_STATUS = 3 TIMEOUT = 10 TOKEN_STATUS = 15 TOPIC_STATUS = 14 UNKNOWN = -1 stayHere = True while stayHere:     event = session.NextEvent();     if event.EventType == PARTIAL_RESPONSE or event.EventType == RESPONSE:         iterator = event.CreateMessageIterator()         iterator.Next()         message = iterator.Message         securityData = message.GetElement('securityData')         securityName = securityData.GetElement('security')         fieldData = securityData.GetElement('fieldData')         returnList = [[0 for col in range(fieldData.GetValue(row).NumValues+1)] for row in range(fieldData.NumValues)]         for row in range(fieldData.NumValues):             rowField = fieldData.GetValue(row)             for col in range(rowField.NumValues+1):                 colField = rowField.GetElement(col)                 returnList[row][col] = colField.Value         stayHere = False         break element = None iterator = None message = None event = None session = None print returnList  
msg = MIMEText( "The nightly build status was a SUCCESS\n\n" "Build File: http://www.python.org\n\n" "Build Results File: http://10.51.54.57/sandboxes/"  project  "\n" )  msg = MIMEText("""The nightly build status was a SUCCESS  Build File: http://www.python.org  Build Results File: http://10.51.54.57/sandboxes/""" project "\n")  msg = MIMEText("The nightly build status was a SUCCESS\n\n" "Build File: http://www.python.org\n\n" "Build Results File: http://10.51.54.57/sandboxes/"  project "\n")  msg=MIMEText("""The nightly build status was a SUCCESS\n\n     Build File: %s     \n\n      Build Results File: %s     \n\n     Sandbox Folder: %s      \n\n     Antibrick File: """ % (build_filebuild_filesandbox)     antibrick      "\n\n" )  
try:     #stuff except Exception as e:     print e  traceback e 
.append() from visual import * stars = [] galaxies = []     for i in  range(10):    stars.append(sphere(...)) for j in range(20):    galaxies.append(sphere(...)) for star galaxy starpos galaxypos in zip(stars galaxies                                              position G_position):    star.pos = starpos    galaxy.pos = galaxypos  show() start_animation() &gt;&gt;&gt; from visual import sphere &gt;&gt;&gt; s = sphere()  &gt;&gt;&gt; s.x = -100  -100 
def maker(n):   def action(x):     return x ** n   return action  f = maker(2) --&gt; def action(x): --&gt;   return x ** 2  a = 1 b = 2 a b = b a  a b = 2 1  
utf-8 utf-8 'ignore' 'ignore' utf-8 &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt; ??? 
gobject gobject.threads_init()  
sed "/logging.debug/d" if __debug__: if __debug__: doStuff()  if 0: doStuff()  if False: doStuff()  &gt;&gt;&gt; False = True &gt;&gt;&gt; if False: print "Illogical captain" Illogical captain  if False: doStuff() &gt;&gt;&gt; def f(): ...     if False: print( "illogical") ...  &gt;&gt;&gt; dis.dis(f)   2           0 LOAD_CONST               0 (None)                3 RETURN_VALUE           
su su $USER -c "$WEB --quiet" &amp;  
s.sendmail(me you.split("") msg.as_string())  you = ['a@a.com' 'a@a.com'] msg['To'] = "".join(you)  ...  s.sendmail(me you msg.as_string())  
   from PyQt4 import QtGui QtCore    clipboard = QtGui.QApplication.clipboard()    event = QtCore.QEvent(QtCore.QEvent.Clipboard)    QtGui.QApplication.sendEvent(clipboard event)  
from models import * from piston.handler import BaseHandler from django.http import Http404  class ZipCodeHandler(BaseHandler):     methods_allowed = ('GET')      def read(self request zip_code):         try:             points = DeliveryPoint.objects.filter(zip_code=zip_code).order_by("name")             dps = []             for p in points:                 name = p.name if (len(p.name)&lt;=16) else p.name[:16]+"..."                 dps.append({'name': name 'zone': p.zone 'price': p.price})             return {'length':len(dps) 'dps':dps}             except Exception e:             return {'length':0 "error":e}  
# emails is a set of emails for line in fileinput.input("csvfile.csv"inplace =1):     parts = line.split('')     if parts[3] not in emails:         print line  
f f.func_code.co_filename f.func_code.co_firstlineno eval exec import dis dis.dis(f) import pdb; pdb.pm() help where functools.partial .func im.get_thumbnail_url def curry(_curried_func  *args  **kwargs):     def _curried(*moreargs **morekwargs):         return _curried_func(*(args+moreargs) **dict(kwargs **morekwargs))     return _curried  f.func_closure &gt;&gt;&gt; f &lt;function _curried at 0xb77d64fc&gt; &gt;&gt;&gt; f.func_closure (&lt;cell at 0xb77eb44c: tuple object at 0xb77dfa0c&gt; &lt;cell at 0xb77eb5e4: dict object at 0xb77d93e4&gt; &lt;cell at 0xb77eb5cc: function object at 0xb77d1d84&gt;)  args kwargs _curried_func curry _curried &gt;&gt;&gt; f.func_closure[2].cell_contents &lt;function say at 0xb77d1d84&gt; &gt;&gt;&gt; import inspect &gt;&gt;&gt; inspect.getsource(_) 'def say(x):\n    print x\n'  
import os if os.fork() == 0: exit()  
/dev/shm /dev/shm $ ls -ld /dev/shm drwxrwxrwt 2 root root          40 2010-01-05 20:34 shm  /etc/fstab none /dev/shm tmpfs rwnosuidnodevnoexec 0 0  
def counter():     count = 0     def c():         nonlocal count         count += 1         return count     return c  x = counter() print([x()x()x()])  counter() itertools yield 
ri irb 
&gt;&gt;&gt; import itertools &gt;&gt;&gt; itertools.__file__ '/usr/lib64/python2.6/lib-dynload/itertools.so'  .so Modules/itertoolsmodule.c Python 2.5.2 (r252:60911 Oct  5 2008 19:29:17)  [GCC 4.3.2] on linux2 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import itertools &gt;&gt;&gt; itertools.__file__ '/usr/lib/python2.5/lib-dynload/itertools.so'  
stored_ids $ python -m timeit -s "l=range(1000000)" "1000001 in l" 10 loops best of 3: 71.1 msec per loop $ python -m timeit -s "s=set(range(1000000))" "1000001 in s" 10000000 loops best of 3: 0.174 usec per loop  
group_by     sess.query(User func.sum(Score.amount).label('score_increase')).\                join(User.scores).\                filter(Score.created_at &gt; someday).\                group_by(User).\                order_by("score increase desc")  sess.query(User).\            join(User.scores).\            filter(Score.created_at &gt; someday).\            group_by(User).\            order_by(func.sum(Score.amount))  subq = sess.query(Score.user_id func.sum(Score.amount).label('score_increase')).\                   filter(Score.created_at &gt; someday).\                   group_by(Score.user_id).subquery() sess.query(User).join((subq subq.c.user_id==User.user_id)).order_by(subq.c.score_increase)  
(oup2008 / ouptotal) oup["2008"] = oup2008 + int(oup0 * (float(oup2008) / ouptotal))  
&gt;&gt;&gt; class A(object): pass ...  &gt;&gt;&gt; A.__mro__ (&lt;class '__main__.A'&gt; &lt;type 'object'&gt;) &gt;&gt;&gt; class B(A): pass ...  &gt;&gt;&gt; B.__mro__ (&lt;class '__main__.B'&gt; &lt;class '__main__.A'&gt; &lt;type 'object'&gt;) &gt;&gt;&gt; class C(A): pass ...  &gt;&gt;&gt; C.__mro__ (&lt;class '__main__.C'&gt; &lt;class '__main__.A'&gt; &lt;type 'object'&gt;) &gt;&gt;&gt;   __mro__ object &gt;&gt;&gt; class D(B C): pass ...  &gt;&gt;&gt; D.__mro__ (&lt;class '__main__.D'&gt; &lt;class '__main__.B'&gt; &lt;class '__main__.C'&gt; &lt;class '__main__.A'&gt; &lt;type 'object'&gt;)  __mro__ __mro__ __mro__ __mro__ 
from mymodule.model import SomeModel from anotherone.model import AnotherModel  
HTTP_CONTENT_LENGTH 
$ export CC=/usr/bin/gcc-4.0  
print a.__dict__['1']  print getattr(a '1')  a.__dict__ = {'a1' : '111'} print a.a1  
:he inde :filetype :set ft? 
which easy_install rm [easy install full path] wget http://peak.telecommunity.com/dist/ez_setup.py python ez_setup.py  sudo env ARCHFLAGS="-arch x86_64" easy_install setuptools pycurl==7.16.2.1  
from django.db.models import Q products_list = Product.objects.all() orq = None     for key in keywords:     thisq = Q(name__icontains=q)     if orq:         orq = thisq | orq     else:         orq = thisq products_list = products_list.filter(orq)  orq Q(name__icontains='prod1') | Q(name__icontains='prod2') 
memoize cache dict list list tuple a = (1 2 3 4) # Parens not brackets b = a[:2] c = {} # Curly braces not brackets c[b] = 'sss'  
fn cx_Oracle WITH_UNICODE encoding nencoding ORACLE_10G action module clientinfo current_schema cx_Oracle 
result_summary str 
&gt;&gt;&gt; any(isinstance(e int) and e &gt; 0 for e in [12'joe']) True  all() &gt;&gt;&gt; all(isinstance(e int) and e &gt; 0 for e in [12'joe']) False  
import os glob for filename in glob.glob("mypath/version*"):     os.remove(filename)   . mypath 
virtualenv --python=/path/to/python/2.6 virtualenvname  
__main__ derived __main__.MyError derived.MyError 
class Column:     creation_counter = 0      def __init__(self):             self.creation_counter = Column.creation_counter             Column.creation_counter += 1  class Base:     def show(self):         fields = [(name (obj obj.value)) for name obj in self.__class__.__dict__.items() if isinstance(obj Column)]          fields.sort(lambda (name1 (obj1 value1)) (name2 (obj2 value2)): cmp(obj1.creation_counter obj2.creation_counter))         return fields  
cherrypy.config.update({ "environment": "embedded" })  
old_folders = minus_seven + '*' * os.path.exists() False for d in os.listdir(os.getcwd()):     if not os.path.isdir(d) or not d.startswith(minus_seven):         continue     # Do what you need to with 'd' here.  minus_seven_dirs = [d for d in os.listdir(os.getcwd())     if os.path.isdir(d) and d.startswith(minus_seven)]  os 
{0:01.2f} 
mtime ctime import os  all_subdirs = [d for d in os.listdir('.') if os.path.isdir(d)]  latest_subdir = max(all_subdirs key=os.path.getmtime)  def all_subdirs_of(b='.'):   result = []   for d in os.listdir(b):     bd = os.path.join(b d)     if os.path.isdir(bd): result.append(bd)   return result  latest_subdir all_subdirs max 
x = ((5 5))  
'{0:02.1f}' &gt;&gt;&gt; '{0:05.2f}'.format(5.555) '05.55'  .2 
m = self.__class__(sz-1 sz-1)  m = type(self)(sz-1 sz-1)  
Decimal.quantize Decimal ''.format() 
{{username|get_user}}  from django import template from django.contrib.auth.models import User  register = template.Library()  ########################  def get_user(username):     try:         user = User.objects.get(username__iexact=username)     except User.DoesNotExist:          user = User.objects.none()     return user  register.filter('get_user'get_user)  {% with username|getuser as user %} {% if user %}DO USER STUFF {% else %}DO UNREGISTERED STUFF {% endif %} {% endwith %}  
set1=set(line[:6] for line in open('file1.txt')) set2=set(line[:6] for line in open('file2.txt')) not_found = set1 - set2 if not_found:     print "Some keys not found: " + ' '.join(not_found)  
AUTH_PROFILE_MODULE = "UserProfileExtended"  
py2exe_opciones = {'py2exe': {"includes":["sip"]}} script = [{"script":"pyqt.py"}]  setup(windows=scriptoptions=py2exe_opciones)  
content = " ".join(content.replace(u"\xa0" " ").strip().split())  unicode.split() &gt;&gt;&gt; u"  foo  bar  ".split() [u'foo' u'bar'] &gt;&gt;&gt;  
bar.take(np.argsort(foo)) bar.take(np.argsort(foo.ravel()).reshape(foo.shape)) 
counts = {} for p in paths:    parts = p.split('/')    branch = counts    for part in parts[1:-1]:       branch = branch.setdefault(part {})    branch[parts[-1]] = 1 + branch.get(parts[-1] 0)  setdefault() get() counts class Stats(object):    def __init__(self):       self.count = 0       self.subdirs = {}  counts = Stats() for p in paths:    parts = p.split('/')    branch = counts    for part in parts[1:]:       branch = branch.subdirs.setdefault(part Stats())    branch.count += 1  def printstats(stats indent=''):    print indent + str(stats.count) + ' times'    for (d s) in stats.subdirs.items():        print indent + d + ':'        printstats(s indent + '  ')  &gt;&gt;&gt; printstats(counts) 0 times a:   0 times   c:     0 times     d:       1 times   b:     0 times     c:       2 times     d:       1 times ...  
CURLE_FAILED_INIT (2) Very early initialization code failed. This is likely to be an internal error or problem.  import urllib  postdata = urllib.urlencode(data)  resp = urllib.urlopen('https://www.sandbox.paypal.com/cgi-bin/webscr' data=postdata)  # resp is a file-like object which means you can iterate it # or read the whole thing into a string output = resp.read()  # resp.code returns the HTTP response code print resp.code # 200  # resp has other useful data .info() returns a httplib.HTTPMessage http_message = resp.info() print http_message['content-length']  # '1536' or the like print http_message.type  # 'text/html' or the like print http_message.typeheader # 'text/html; charset=UTF-8' or the like   # Make sure to close resp.close()  https:// 
and or &gt;&gt;&gt; 1 | (1/0) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; ZeroDivisionError: integer division or modulo by zero &gt;&gt;&gt; 1 or (1/0) 1  | or ZeroDivisionError 
zip -qr C:\Backup\20100106143030.zip C:\AB\a C:\AB\b zip(r'C:AB\a') zip() 
for x in dictionary:  
__new__ __init__ __new__ type.__new__ __new__ __init__ __new__ __init__ __init__ __new__ __init__ __new__ __init__ __init__ int foo int .foo int __new__ &gt;&gt;&gt; class x(int): ...   def __new__(cls i foo): ...     self = int.__new__(cls i) ...     return self ...   def __init__(self i foo): ...     self.foo = foo ...   __slots__ = 'foo' ...  &gt;&gt;&gt; a = x(23 'bah') &gt;&gt;&gt; print a 23 &gt;&gt;&gt; print a.foo bah &gt;&gt;&gt;   __init__ self.foo = foo __new__ __init__ 
&gt;&gt;&gt; zip(xrange(1 7 2)xrange(2 8  2)) [(1 2) (3 4) (5 6)]  
requests urllib urllib2 requests import requests  resp = requests.get('http://www.mywebsite.com/user') resp = requests.post('http://www.mywebsite.com/user') resp = requests.put('http://www.mywebsite.com/user/put') resp = requests.delete('http://www.mywebsite.com/user/delete')  userdata = {"firstname": "John" "lastname": "Doe" "password": "jdoe123"} resp = requests.post('http://www.mywebsite.com/user' data=userdata)  json.loads() resp.json()  resp.text  
dictList class CsvWriter(object):    def __init__(self dictList):     self.maxline = max(dictList key=len)     self.dictList = [dict((kk) for k in self.maxline)]     self.dictList.extend(dictList)    def doWrite(self outfile):     csv_file=open(outfile'ab')     writer = csv.DictWriter(csv_file                             fieldnames=self.maxLine.keys()                             restval='notScanned'                             dialect='excel')     for dataLine in self.dictList:         writer.writerow(dataLine)     csv_file.close()  cw = CsvWriter(dataList) for ou in many_outfiles:   cw.doWrite(ou)  
dict(data) data super(SortedDict self).__init__(data) super None {} SortedDict 
&gt;&gt;&gt; (options args) = parser.parse_args(sys.argv[1:]) &gt;&gt;&gt; # this is fine &gt;&gt;&gt; &gt;&gt;&gt;  (options args) = parser.parse_args(sys.argv[1:])   File "&lt;stdin&gt;" line 1     (options args) = parser.parse_args(sys.argv[1:])     ^ SyntaxError: invalid syntax &gt;&gt;&gt;  
&gt;&gt;&gt; import re &gt;&gt;&gt; p = re.compile('(?m)^(.*?)\\s*:\\s*(.*)$') &gt;&gt;&gt; text = '''person 1: name1 person 2: name2 person 3: name3 ... person N: nameN''' &gt;&gt;&gt; p.findall(text)  [('person 1' 'name1') ('person 2' 'name2') ('person 3' 'name3') ('person N' 'nameN')]  (?m)     # enable multi-line mode ^        # match the start of a new line (.*?)    # un-greedily match zero or more chars and store it in match group 1 \s*:\s*  # match a colon possibly surrounded by space chars (.*)     # match the rest of the line and store it in match group 2 $        # match the end of the line  
xmllint --noent foobar.xml  
import sys os  sys.path.append('/Path/To/Django/Projects/') os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'  from django.core.serializers import serialize from myproject.myapp import models  model_names = [] # a list of the names of the models you want to export  for model_name in model_names:     cls = getattr(models model_name)     filename = model_name.lower() + ".json"     file = open(filename "w")     file.write(serialize("json" cls.objects.all()))  
father family class Father(Family): Family.Father.method() module .py file __init__ if __name__ ... __init__.py Father Mother Family Father Mother 
class A(object):     def __init__(self):         self.val = 100      def __str__(self):         """What a looks like if your print it"""         return 'A:'+str(self.val)  import pickle a = A() a_pickled = pickle.dumps(a) a.val = 200 a2 = pickle.loads(a_pickled) print 'the original a' print a print # newline print 'a2 - a clone of a before we changed the value' print a2 print   print 'Why are you trying to use __setstate__ not __init__?' print  the original a A:200  a2 - a clone of a before we changed the value A:100  class B(object):     def __init__(self):         print 'Perhaps __init__ must not happen twice?'         print         self.val = 100      def __str__(self):         """What a looks like if your print it"""         return 'B:'+str(self.val)      def __getstate__(self):         return self.val      def __setstate__(selfval):         self.val = val  b = B() b_pickled = pickle.dumps(b) b.val = 200 b2 = pickle.loads(b_pickled) print 'the original b' print b print # newline print 'b2 - b clone of b before we changed the value' print b2  Why are you trying to use __setstate__ not __init__?  Perhaps __init__ must not happen twice?  the original b B:200  b2 - b clone of b before we changed the value B:100  
version.mk &gt;&gt;&gt; exec(open("version.mk")) &gt;&gt;&gt; print VERSION_ID 1  #version no is here VERSION_ID=0.0.2  #some more info here ....  &gt;&gt;&gt; import re &gt;&gt;&gt; VERSION_ID=map(intre.search("VERSION_ID\s*=\s*(\S+)"open("version.mk").read()).group(1).split(".")) &gt;&gt;&gt; VERSION_ID [0 0 2]  
easy_install_pre.exe %1 unzip_eggs.py %1  
&gt;&gt;&gt; 1.1 1.1000000000000001  1.1 &gt;&gt;&gt; 11/1.1 10.0  // math.floor() a == (a//b)*b + a%b Decimal 
__contains__ class everything(object):     def __contains__(self _):         return True             for x in (123):     print x in everything()  
-c mingw32 
string += str(getbingint) + ":" + str("%.2f") % getsmallint + ""   string += str(getbingint) + ":" + str("%.2f") % (getsmallint*1.225) + ""   
import foo foo from foo import something foo foo int str foo &gt;&gt;&gt; class N(object): ...   def __init__(self value): ...     self.value = value &gt;&gt;&gt; n = N(3) &gt;&gt;&gt; value = n.value &gt;&gt;&gt; print value n.value 3 3 &gt;&gt;&gt; value = 4 &gt;&gt;&gt; print value n.value 4 3  foo 
struct &gt;&gt;&gt; pkt_bytes = [0x02 0x07 0xff 0xff 0x00 0x03] &gt;&gt;&gt; myint = 123 &gt;&gt;&gt; pkt_bytes[3:5] = [ord(b) for b in struct.pack("H"myint)] &gt;&gt;&gt; pkt_bytes [2 7 255 123 0 3]  pkt_bytes ! &gt;&gt;&gt; struct.pack("!H"5000) '\x13\x88'  
var q = from el in li         orderby foo(el)         select el; li = q.ToList();  
#! /usr/bin/env python  import foo  def fullname(o):   # o.__module__ + "." + o.__class__.__qualname__ is an example in   # this context of H.L. Mencken's "neat plausible and wrong."   # Python makes no guarantees as to whether the __module__ special   # attribute is defined so we take a more circumspect approach.   # Alas the module name is explicitly excluded from __qualname__   # in Python 3.    module = o.__class__.__module__   if module is None or module == str.__class__.__module__:     return o.__class__.__name__  # Avoid reporting __builtin__   else:     return module + '.' + o.__class__.__name__  bar = foo.Bar() print fullname(bar)  Bar class Bar(object):   def __init__(self v=42):     self.val = v  $ ./prog.py foo.Bar  
#! /usr/bin/python  import re  fn = "version.mk" omk = open(fn).readlines() nmk = open(fn "w") r = re.compile(r'(VERSION_ID\s*=\s*)(\S+)')  for l in omk:     m1 = r.match(l)     if m1:         VERSION_ID=map(intm1.group(2).split("."))         VERSION_ID[2]+=1 # increment version         l = r.sub(r'\g&lt;1&gt;' + '.'.join(['%s' % (v) for v in VERSION_ID]) l)     nmk.write(l) nmk.close()  
try:     result = simulate(open("myfile")) except SimulationException as sim_exc:     print "error parsing stream" sim_exc else:     if result:         print "result pass"     else:         print "result fail"  # execution continues from here regardless of exception or not  
execfile execfile(filename)  
Range import urllib2 req = urllib2.Request('http://www.python.org/') # # Here we request that bytes 18000--19000 be downloaded. # The range is inclusive and starts at 0. # req.headers['Range'] = 'bytes=%s-%s' % (18000 19000) f = urllib2.urlopen(req) # This shows you the *actual* bytes that have been downloaded. range=f.headers.get('Content-Range') print(range) # bytes 18000-18030/18031 print(repr(f.read())) # '  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n'  Content-Range Range 
testcode testoutput .. testcode::     print 'Output     text.'  .. testoutput::    :hide:    :options: -ELLIPSIS +NORMALIZE_WHITESPACE     Output text.  
soup1 = BeautifulSoup(''.join(str(t) for t in tags))   from pyparsing import makeHTMLTags originalTextFor SkipTo Combine  # makeHTMLTags defines HTML tag patterns for given tag string aTagaEnd = makeHTMLTags("A")  # makeHTMLTags by default returns a structure containing # the tag's attributes - we just want the original input text aTag = originalTextFor(aTag) aEnd = originalTextFor(aEnd)  # define an expression for a full link and use a parse action to # combine the returned tokens into a single string aLink = aTag + SkipTo(aEnd) + aEnd aLink.setParseAction(lambda tokens : ''.join(tokens))  # extract links from the input html links = aLink.searchString(html)  # build list of strings for output out = [] out.append(pre) out.extend(['  '+lnk[0] for lnk in links]) out.append(post)  print '\n'.join(out)  &lt;html&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;   &lt;a href="http://www.reddit.com/r/pics/" &gt;pics&lt;/a&gt;   &lt;a href="http://www.reddit.com/r/reddit.com/" &gt;reddit.com&lt;/a&gt;   &lt;a href="http://www.reddit.com/r/politics/" &gt;politics&lt;/a&gt;   &lt;a href="http://www.reddit.com/r/funny/" &gt;funny&lt;/a&gt;   &lt;a href="http://www.reddit.com/r/AskReddit/" &gt;AskReddit&lt;/a&gt;   &lt;a href="http://www.reddit.com/r/WTF/" &gt;WTF&lt;/a&gt;   .   .   .   &lt;a href="http://reddit.com/help/privacypolicy" &gt;Privacy Policy&lt;/a&gt;   &lt;a href="#" onclick="return hidecover(this)"&gt;close this window&lt;/a&gt;   &lt;a href="http://www.reddit.com/feedback" &gt;volunteer to translate&lt;/a&gt;   &lt;a href="#" onclick="return hidecover(this)"&gt;close this window&lt;/a&gt; &lt;/html&gt;  
+ array.append extend() 
yield next() send() next() cr.send(1)  1 c cr.next() cr.send(None) 
diff stdin 
PastableEntry gtksheet.ItemEntry paste-clipboard class PastableEntry(gtksheet.ItemEntry):     def __init__(self):         gtksheet.ItemEntry.__init__(self)         self.connect('paste-clipboard' self.__on_paste)  application/x-gnumeric text/html UTF8_STRING COMPOUND_TEXT STRING 11 &lt;tab&gt; 12 &lt;tab&gt; 13 &lt;newline&gt; 21 &lt;tab&gt; 22 &lt;tab&gt; 23 &lt;newline&gt; 31 &lt;tab&gt; 32 &lt;tab&gt; 33  application/x-gnumeric text/html     def __on_paste(self entry):         clip = gtk.Clipboard()         data = clip.wait_for_contents('UTF8_STRING')         text = data.get_text()         sheet = self.parent         o_row o_col = sheet.get_active_cell()         for i_row row in enumerate(text.split('\n')):             for i_col cell in enumerate(row.split('\t')):                 sheet.set_cell_text(o_row + i_row o_col + i_col cell)         self.stop_emission('paste-clipboard')  stop_emission gobject.type_register(PastableEntry)  gtksheet.Sheet s = gtksheet.Sheet(20 20 "Sheet 1" entry_type=PastableEntry)  
head tail head = theurl[:theurl.find('/')] print head tail = theurl[theurl.find('/'):] print tail  head tail head http://myhost.com:8080/blah/blah  
socket.gethostbyname('yahoo.com') 
import simplejson as json  myfruits = {'fruit':4 'color':11} json.dumps(myfruits)  
using System; using System.Reflection;  namespace ConsoleApplication1 {     class Program     {         public Int32 Add(Int32 a Int32 b) { return a + b; }         static void Main(string[] args)         {             Program obj = new Program();              MethodInfo m = obj.GetType().GetMethod("Add");             Int32 result = (Int32)m.Invoke(obj new Object[] { 1 2 });         }     } }  
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --  -- $Id: cleanGeometry.sql 2008-04-24 10:30Z Dr. Horst Duester $ -- -- cleanGeometry - remove self- and ring-selfintersections from  --                 input Polygon geometries  -- http://www.sogis.ch -- Copyright 2008 SO!GIS Koordination Kanton Solothurn Switzerland -- Version 1.0 -- contact: horst dot duester at bd dot so dot ch -- -- This is free software; you can redistribute and/or modify it under -- the terms of the GNU General Public Licence. See the COPYING file. -- This software is without any warrenty and you use it at your own risk --   -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   CREATE OR REPLACE FUNCTION cleanGeometry(geometry)   RETURNS geometry AS $BODY$DECLARE   inGeom ALIAS for $1;   outGeom geometry;   tmpLinestring geometry;  Begin    outGeom := NULL;  -- Clean Process for Polygon    IF (GeometryType(inGeom) = 'POLYGON' OR GeometryType(inGeom) = 'MULTIPOLYGON') THEN  -- Only process if geometry is not valid  -- otherwise put out without change     if not isValid(inGeom) THEN  -- create nodes at all self-intersecting lines by union the polygon boundaries -- with the startingpoint of the boundary.         tmpLinestring := st_union(st_multi(st_boundary(inGeom))st_pointn(boundary(inGeom)1));       outGeom = buildarea(tmpLinestring);             IF (GeometryType(inGeom) = 'MULTIPOLYGON') THEN               RETURN st_multi(outGeom);       ELSE         RETURN outGeom;       END IF;     else           RETURN inGeom;     END IF;   ------------------------------------------------------------------------------ -- Clean Process for LINESTRINGS self-intersecting parts of linestrings  -- will be divided into multiparts of the mentioned linestring  ------------------------------------------------------------------------------   ELSIF (GeometryType(inGeom) = 'LINESTRING') THEN  -- create nodes at all self-intersecting lines by union the linestrings -- with the startingpoint of the linestring.       outGeom := st_union(st_multi(inGeom)st_pointn(inGeom1));     RETURN outGeom;   ELSIF (GeometryType(inGeom) = 'MULTILINESTRING') THEN      outGeom := multi(st_union(st_multi(inGeom)st_pointn(inGeom1)));     RETURN outGeom;   ELSIF (GeometryType(inGeom) = '&lt;NULL&gt;' OR GeometryType(inGeom) = 'GEOMETRYCOLLECTION') THEN      RETURN NULL;   ELSE      RAISE NOTICE 'The input type % is not supported %'GeometryType(inGeom)st_summary(inGeom);     RETURN inGeom;   END IF;      End;$BODY$   LANGUAGE 'plpgsql' VOLATILE;  
&gt;&gt;&gt; import functools &gt;&gt;&gt; f = lambda selflambda x=x *y: foo(x y selflambda) &gt;&gt;&gt; f = functools.partial(f f)  
expose_request=True def echo(environ *args):     return args  expose_request=False from pyamf.remoting.gateway import expose_request from pyamf.remoting.gateway.wsgi import WSGIGateway  @expose_request def some_service_method(request *args):     return ['some' 'thing']  services = {     'a_service_method': some_service_method }  gw = WSGIGateway(services expose_request=False)  TypeError def update(obj force=False):     pass  from pyamf.remoting.client import RemotingService  path = 'http://localhost:8080/gateway/' gw = RemotingService(path) service = gw.getService('myService')  print service.update('foo' True)  
customerID = self.cursorMySQL.fetchone()[0]  def autofetch_value(self sql args=None):     """ return a single value from a single row or None if there is no row     """     self.execute(sql args)     returned_val = None      row = self.fetchone()     if row is not None:         returned_val = row[0]      return returned_val  def clean_table(selftableName):     cleanTableQuery = """TRUNCATE TABLE %s;""" % (tableName)     self.cursorMySQL.execute(cleanTableQuery)      setIndexQuery = """ALTER TABLE %s AUTO_INCREMENT = 1;""" % (tableName)     self.cursorMySQL.execute(setIndexQuery)  
from django import template register = template.Library()  def dict_get(value arg):     #custom template tag used like so:     #{{dictionary|dict_get:var}}     #where dictionary is duh a dictionary and var is a variable representing     #one of it's keys      return value[arg]  register.filter('dict_get'dict_get)  {% for employee dependents in company_dict|company %}  
'ascii' 
int i = 5; // Okay. i = "5";   // Illegal! i can only hold integers.  &gt;&gt;&gt; 1 + 1          # Add two integers. 2 &gt;&gt;&gt; "1" + "1"      # Concatenate two strings. '11' &gt;&gt;&gt; 1 + int("1")   # Add two integers. 2 &gt;&gt;&gt; "1" + str(1)   # Concatenate two strings. '11' &gt;&gt;&gt; 1 + "1"        # Undefined! Adding integers and strings is meaningless. Traceback (most recent call last):   File "" line 5 in ? TypeError: unsupported operand type(s) for +: 'int' and 'str'  $x = 1 + "1"; // x is 2  dynamic 
 string = string.split('[')[0].strip()  
if r == "Y" or "y" or "yes" or"yep" or"yeah":  if r in ["Y""y""yes""yep""yeah"] :  r = raw_input('\nDo you want play the video?\n\nY:Yes  N:No\n\n').lower() if r in ["y""yes""yep""yeah"] :  
traceback.extract_stack() 
&gt;&gt;&gt; '\xe3\x81\x82'.decode('utf-8')    # three top-bit-set bytes representing one character u'\u3042'                             # Hiragana letter A  &gt;&gt;&gt; u'\u3042'.encode('shift-jis') '\x82\xa0'                            # only requires two bytes in the Shift-JIS encoding  &gt;&gt;&gt; unicode('\x82\xa0' 'shift-jis')  # alternative way of doing a decode u'\u3042'  
str string &gt;&gt;&gt; str &lt;class 'str'&gt; &gt;&gt;&gt; str(42) '42' &gt;&gt;&gt; import string &gt;&gt;&gt; string &lt;module 'string' from '/usr/lib/python3.1/string.py'&gt; &gt;&gt;&gt; string.digits '0123456789'  str o str(o) string 
import setup setuptools distutils pyc .py .pyc 
from IPython import embed as shell  def start_ipython():    from IPython.Shell import IPShellEmbed    shell = IPShellEmbed()    shell()  start_ipython locals() def start_python():    import code    code.interact()  ImportError 
class A(object):   def __new__(cls):     class C(cls B):       pass     self = object.__new__(C)     return self  
mod3.py mod2 mod2 mod2 mod2 mod2 
__iadd__() += -= *= /= //= %= **= &lt;&lt;= &gt;&gt;= &amp;= ^= |= self self x += y x __iadd__() x.__iadd__(y) += c += &gt;&gt;&gt; c = 3 &gt;&gt;&gt; print(c id(c)) 3 505389080 &gt;&gt;&gt; c += c &gt;&gt;&gt; print(c id(c)) 6 505389128  
&gt;&gt;&gt; 'ID {0} {1} and {2}.'.format(*ID) 'ID 0 1 and 2.'  
def b():     ID = [0 1 2]     ID2 = ('ID=%d.%d.%d' % tuple(ID))     return ID2  if __name__ == '__main__': ID2 = b()  def c(ID2):     print ID2  if __name__ == '__main__': myObject = c(ID2)  myObject = c(ID2) 
#!/usr/bin/env python from pylab import *  def f(t):     s1 = cos(2*pi*t)     e1 = exp(-t)     return multiply(s1e1)  t1 = arange(0.0 5.0 0.1) t2 = arange(0.0 5.0 0.02) t3 = arange(0.0 2.0 0.01)  figure(figsize=(4 4)) sub1 = subplot(211) l = plot(t1 f(t1) 'bo' t2 f(t2) 'k--' markerfacecolor='green') grid(True) title('A tale of 2 subplots') ylabel('Damped oscillation')  ## I ADDED THIS autoAxis = sub1.axis() rec = Rectangle((autoAxis[0]-0.7autoAxis[2]-0.2)(autoAxis[1]-autoAxis[0])+1(autoAxis[3]-autoAxis[2])+0.4fill=Falselw=2) rec = sub1.add_patch(rec) rec.set_clip_on(False)  subplot(212) plot(t3 cos(2*pi*t3) 'r.') grid(True) xlabel('time (s)') ylabel('Undamped')  savefig('test.png')  
mycolors.append('black'); print mycolors __main__ 
lat = float(request.GET.get('lat')) lng = float(request.GET.get('lng')) a = Authority.objects.get(area__contains=Point(lng lat)) if a:     json = simplejson.dumps({'name': a.name                               'area': "{replaceme}"                              'id': a.id})      return HttpResponse(json.replace('"{replaceme}"' a.area.geojson)                         mimetype='application/json')  
def doit( s ):      # with some side-effect on a     a = []       def f1( s m ):         a.append( 1 )         print 'f1' a s m      def f2( s m ):         a.append( 2 )         print 'f2' a s m      def f3( s m ):         a.append( 3 )         print 'f3' a s m      re1 = re.compile( 'one' )     re2 = re.compile( 'two' )     re3 = re.compile( 'three' )       func_re_list = (         ( f1 re1 )          ( f2 re2 )          ( f3 re3 )     )     for myfunc myre in func_re_list:         m = myre.match( s )         if m:             myfunc( s m )             break   doit( 'one' )  doit( 'two' )  doit( 'three' )   
process.stdout.readlines() communicate() process.stdout.readline() 
pylint/epylint.py from pylint.lint import Run Run(['--errors-only' 'myfile.py'])   
element.text &gt;&gt;&gt; xmlstr = "&lt;sec&gt;header &lt;p&gt;para 0&lt;/p&gt; text &lt;p&gt;para 1&lt;/p&gt; footer&lt;/sec&gt;" &gt;&gt;&gt; element = etree.fromstring(xmlstr) &gt;&gt;&gt; &gt;&gt;&gt; element.text + "".join(map (etree.tostring element)) 'header &lt;p&gt;para 0&lt;/p&gt; text &lt;p&gt;para 1&lt;/p&gt; footer' &gt;&gt;&gt;  
import operator ... sortcompanies.sort(key=operator.itemgetter("companyname"))  companyid companyname 
# -*- coding: UTF-8 -*- ... accents = { u'a': [u'à' u'ã' u'á' u'â']             u'e': [u'é' u'è' u'ê' u'ë']             u'i': [u'î' u'ï']             u'u': [u'ù' u'ü' u'û']             u'o': [u'ô' u'ö'] }  glob import sys file_name = file_name.decode(sys.getfilesystemencoding())  u 
from django.contrib.auth.models import User  User._meta.get_field('username')._unique = False  auth_user auth_user 
datetime import datetime datetime from datetime import datetime () import datetime date = models.DateField(_("Date") default=datetime.date.today)  
reload foo.py print("I am being imported")     &gt;&gt;&gt; import foo    Hello I am being imported    &gt;&gt;&gt; import foo # Will not print the statement    &gt;&gt;&gt; reload(foo) # Will print it again    Hello I am being imported  
#+BEGIN_SRC python htmlize.el 
import random string  def randomword(length):    letters = string.ascii_lowercase    return ''.join(random.choice(letters) for i in range(length))  &gt;&gt;&gt; randomword(10) 'vxnxikmhdc' &gt;&gt;&gt; randomword(10) 'ytqhdohksy'  
u = numpy.poly1d(numpy.array([1 -1 1 -1 1 -1 1 -1 1 -1 1] dtype=numpy.int64))  
t1 = 'one 1\ntwo 2\nthree 3'.splitlines() from difflib import ndiff t1 = 'one 1\ntwo 2\nthree 3'.splitlines() t2 = 'one 1\ntwo 29\nthree 3'.splitlines() def lj(line):     rval = '2' in line     print("lj: line=%r rval=%s" % (line rval))     return rval d = list(ndiff(t1 t2    )); print("%d %r\n" %  (1 d)) d = list(ndiff(t1 t2 lj)); print("%d %r\n" %  (2 d)) d = list(ndiff(t2 t1 lj)); print("%d %r\n" %  (3 d))  1 ['  one 1' '- two 2' '+ two 29' '?      +\n' '  three 3']  lj: line='one 1' rval=False lj: line='two 29' rval=True lj: line='three 3' rval=False 2 ['  one 1' '- two 2' '+ two 29' '?      +\n' '  three 3']  lj: line='one 1' rval=False lj: line='two 2' rval=True lj: line='three 3' rval=False 3 ['  one 1' '- two 29' '?      -\n' '+ two 2' '  three 3']  t3 = 'one 1\n   \ntwo 2\n'.splitlines() t4 = 'one 1\n\n#\n\ntwo 2\n'.splitlines() d = list(ndiff(t3 t4      )); print("%d %r\n" %  (4 d)) d = list(ndiff(t4 t3      )); print("%d %r\n" %  (5 d)) d = list(ndiff(t3 t4 None)); print("%d %r\n" %  (6 d)) d = list(ndiff(t4 t3 None)); print("%d %r\n" %  (7 d))  4 ['  one 1' '-    ' '+ ' '+ #' '+ ' '  two 2']  5 ['  one 1' '+    ' '- ' '- #' '- ' '  two 2']  6 ['  one 1' '-    ' '+ ' '+ #' '+ ' '  two 2']  7 ['  one 1' '+    ' '- ' '- #' '- ' '  two 2']  t1f = [line for line in t1 if '2' not in line] t2f = [line for line in t2 if '2' not in line] diff = ndiff(t1f t2f)  
im.save(thumbnail_file 'JPEG' quality=90)  
interpolation=nearest 
import time import datetime  # if for some reason this script is still running # after a year we'll stop after 365 days for i in xrange(0365):     # sleep until 2AM     t = datetime.datetime.today()     future = datetime.datetime(t.yeart.montht.day20)     if t.hour &gt;= 2:         future += datetime.timedelta(days=1)     time.sleep((future-t).total_seconds())          # do 2AM stuff  
Surface array array Surface for array def __i(x y):     assert(0 &lt;= x &lt; 80)     assert(0 &lt;= y &lt; 60)     i = (y*80 + x) * 4     return i def red(x y):     return __a[__i(x y)] def green(x y):     return __a[__i(x y) + 1] def blue(x y):     return __a[__i(x y) + 2] def rgb(x y):     i = __i(x y)     return __a[i] __a[i + 1] __a[i + 2] def set_rgb(x y r g b):     i = __i(x y)     _a[i] = r     _a[i + 1] = g     _a[i + 2] = b  # example: r g b = rgb(23 33)  array __a array 
import logging from logging.handlers import RotatingFileHandler import os  def setup_logging(logdir=None scrnlog=True txtlog=True loglevel=logging.DEBUG):     logdir = os.path.abspath(logdir)      if not os.path.exists(logdir):         os.mkdir(logdir)      log = logging.getLogger('stumbler')     log.setLevel(loglevel)      log_formatter = logging.Formatter("%(asctime)s - %(levelname)s :: %(message)s")      if txtlog:         txt_handler = RotatingFileHandler(os.path.join(logdir "Stumbler.log") backupCount=5)         txt_handler.doRollover()         txt_handler.setFormatter(log_formatter)         log.addHandler(txt_handler)         log.info("Logger initialised.")      if scrnlog:         console_handler = logging.StreamHandler()         console_handler.setFormatter(log_formatter)         log.addHandler(console_handler)    setup_logging('/tmp/logs') corelog = logging.getLogger('stumbler.core') corelog.debug("Messages and rainbows...")  
updateIndexMySQLQuery = """UPDATE %s  SET numberID=%%s WHERE numberID=%%s;""" % (tableName)  
def @param_checker(['req_param_1' 'req_param_2']) def my_decorated_function(params):     # do stuff  def my_decorated_function(params):     # do stuff my_decorated_function = param_checker(['req_param_1' 'req_param_2'])(my_decorated_function)  param_checker import functools  def param_checker(reqs):   reqs = set(reqs)   def middling(f):     @functools.wraps(f)     def wrapper(params):       missing = reqs.difference(params)       if missing:         raise TypeError('Missing parms: %s' % ' '.join(sorted(missing)))       return f(params)     return wrapper   return middling  
[len(x) for x in a[0]] &gt;&gt;&gt; a = [] &gt;&gt;&gt; a.append([]) &gt;&gt;&gt; a[0].append([12345]) &gt;&gt;&gt; a[0].append([1234]) &gt;&gt;&gt; a[0].append([123]) &gt;&gt;&gt; [len(x) for x in a[0]] [5 4 3]  
def runScript():     script = "%s %s %s@%s %s::%s %s" %(rdiffrdiffVerbosityrdiffStatisticsclientNameclientHostclientDirserverDir)         os.system(script)  rdiffArgs = [rdiffVerbosityrdiffStatisticsclientNameclientHostclientDirserverDir]  rdiffArgs = ' '.join(rdiffArgs)  from rdiff_backup.Main import Main as backup task=['/etc' '/tmp/backup'] backup(task)  
urlpatterns = patterns(''          (r'^salaries/employee/$' list_detail.object_list 'employee_info') )  urlpatterns = patterns(''          (r'^salaries/employee/$' list_detail.object_list employee_info) )  
__file__ .so .pyd __file__ """ Supplies the internal functions for functools.py in the standard library """  class partial:     """     partial(func *args **keywords) - new function with partial application     of the given arguments and keywords.     """     __slots__ = ['func' 'args' 'keywords']      def __init__(self func *args **keywords):         if not callable(func):             raise TypeError("the first argument must be callable")         self.func = func         self.args = args         self.keywords = keywords      def __call__(self *fargs **fkeywords):         newkeywords = self.keywords.copy()         newkeywords.update(fkeywords)         return self.func(*(self.args + fargs) **newkeywords)  
QTableWidget.setCellWidget(row column QWidget)   table = QTableWidget(1 3) item1 = QTableWidgetItem("foo") comboBox = QComboBox() checkBox = QCheckBox() table.setItem(00item1) table.setCellWidget(01comboBox) table.setCellWidget(02checkBox)  1x3 cell 00 QComboBox cell 01 QCheckBox cell 02 
import networkx as nx edges = """A1 - B1 A2 - B2 A2 - B1 A3 - B1 A4 - B2 A5 - B3 A6 - B3 A7 - B3 A7 - B3 A8 - B4 A9 - B3""".split('\n') G = nx.parse_edgelist(edgesdelimiter=' - ') for component in nx.connected_components(G):     print [n for n in component if n.startswith('A')]  
dict.__init__(self) isinstance(x dict) UserDict.UserDict UserDict.DictMixin collections.MutableMapping def createImageDb(directory):     d = {}     # do something to fill in the dict     return d  class MyContainer(dict):     def newmethod1(self args):         pass      def newmethod2(self args2):         pass   def createImageDb(directory):     d = MyContainer()     # fill the container     return d  
print('literal' + var1 + var2) print('literal' var1 var2) python -m timeit --help $ python -m timeit -s 'from cStringIO import StringIO; out = StringIO(); a = "abc"; b = "def"' 'print &gt;&gt;out a b' 100000 loops best of 3: 7.68 usec per loop $ python -m timeit -s 'from cStringIO import StringIO; out = StringIO(); a = "abc"; b = "def"' 'print &gt;&gt;out a + " " + b' 100000 loops best of 3: 4.67 usec per loop $ python -m timeit -s 'from cStringIO import StringIO; out = StringIO(); a = "abc"; b = "def"' 'print &gt;&gt;out " ".join([a b])' 100000 loops best of 3: 5.37 usec per loop  
action=login params = urllib.urlencode(dict(action='login' username_hb='user' password_hb='hunter2'))  opener.open('http://www.instamapper.com/fe' params)  
## # Embossing filter.  class EMBOSS(BuiltinFilter):     name = "Emboss"     filterargs = (3 3) 1 128 (         -1  0  0         0  1  0         0  0  0         )  scale offset # @keyparam scale Scale factor.  If given the result for each #    pixel is divided by this value.  The default is the sum #    of the kernel weights. # @keyparam offset Offset.  If given this value is added to the #    result after it has been divided by the scale factor.  ImageFilter.EMBOSS.filterargs=((3 3) 1 128 (-1 0 0 0 1 0 0 0 0))  from PIL import Image import numpy  # defining azimuth elevation and depth ele = numpy.pi/2.2 # radians azi = numpy.pi/4.  # radians dep = 10.          # (0-100)  # get a B&amp;W version of the image img = Image.open('daisy.jpg').convert('L')  # get an array a = numpy.asarray(img).astype('float') # find the gradient grad = numpy.gradient(a) # (it is two arrays: grad_x and grad_y) grad_x grad_y = grad # getting the unit incident ray gd = numpy.cos(ele) # length of projection of ray on ground plane dx = gd*numpy.cos(azi) dy = gd*numpy.sin(azi) dz = numpy.sin(ele) # adjusting the gradient by the "depth" factor # (I think this is how GIMP defines it) grad_x = grad_x*dep/100. grad_y = grad_y*dep/100. # finding the unit normal vectors for the image leng = numpy.sqrt(grad_x**2 + grad_y**2 + 1.) uni_x = grad_x/leng uni_y = grad_y/leng uni_z = 1./leng # take the dot product a2 = 255*(dx*uni_x + dy*uni_y + dz*uni_z) # avoid overflow a2 = a2.clip(0255) # you must convert back to uint8 /before/ converting to an image img2 = Image.fromarray(a2.astype('uint8'))  img2.save('daisy2.png')  
mat = sio.loadmat('a.mat')  print mat  key my_matrix = mat[key]  my_matrix my_matrix[0] my_matrix[0][0] 
ttk.Button None grid None .grid ttk.Button button = ttk.Button(root text="Test") button.grid(row=0 column=0)  print button 
sorted([(0 2) (0 1) (1 0) (1 2)] key = lambda x:(-x[0] x[1]))  
setSelectionMode QAbstractItemView QTreeWidget yourtreeView-&gt;setSelectionMode(QAbstractItemView::NoSelection);  yourtreeView-&gt;setFocusPolicy(Qt::NoFocus);  State_HasFocus class NoFocusDelegate : public QStyledItemDelegate { protected:     void paint(QPainter* painter const QStyleOptionViewItem&amp; option const QModelIndex&amp; index) const; };  void NoFocusDelegate::paint(QPainter* painter const QStyleOptionViewItem &amp; option const QModelIndex &amp;index) const {     QStyleOptionViewItem itemOption(option);     if (itemOption.state &amp; QStyle::State_HasFocus)         itemOption.state = itemOption.state ^ QStyle::State_HasFocus;     QStyledItemDelegate::paint(painter itemOption index); }  ....  NoFocusDelegate* delegate = new NoFocusDelegate(); yourtreeView-&gt;setItemDelegate(delegate);  
{% for error in form.errors %} {% for field errors in form.errors.items %}     {% for error in errors %} ...  
... &gt;&gt;&gt; @requireparams(['name' 'pass' 'code']) ... def complex_function(params): ...     print(params['name']) ...     print(params['pass']) ...     print(params['code']) ... &gt;&gt;&gt; params = { ...     'name': 'John Doe' ...     'pass': 'OpenSesame' ...     #'code': '1134' ... } ... &gt;&gt;&gt; complex_function(params)  
.decode("base64").decode("zlib") 
from django.test.client import RequestFactory rf = RequestFactory() get_request = rf.get('/hello/') post_request = rf.post('/submit/' {'foo': 'bar'})  
tokenize NINETY_NINE = 99       # Defines the constant `NINETY_NINE` to have the value `99`  rules = {   '*': {     # Applies to all data     'isYummy': {}      # Everything must be yummy      'chocolate': {        # To validate say `validate("chocolate" object)`       'sweet': {}        # chocolate must be sweet (but not necessarily chocolate.*)        'lindt': {          # To validate say `validate("chocolate.lindt" object)`         'tasty':{}        # Applies only to chocolate.lindt (and not to chocolate.lindt.dark for e.g.)          '*': {            # Applies to all data under chocolate.lindt           'smooth': {}  # Could also be written smooth()           'creamy': 1   # Level 1 creamy         } # ...     }   } }  class _:     class isYummy: pass      class chocolate:         class sweet: pass          class lindt:             class tasty: pass              class _:                 class smooth: pass                 class creamy: level = 1 # ...  import parser token symbol pprint  _map = dict(token.tok_name.items() + symbol.sym_name.items())  def clean_ast(ast):     if not isinstance(ast list):         return ast     elif len(ast) == 2: # Elide single-child nodes.         return clean_ast(ast[1])     else:         return [_map[ast[0]]] + [clean_ast(a) for a in ast[1:]]  ast = parser.expr('''{  '*': {     # Applies to all data   isYummy: _    # Everything must be yummy    chocolate: {        # To validate say `validate("chocolate" object)`     sweet: _        # chocolate must be sweet (but not necessarily chocolate.*)      lindt: {          # To validate say `validate("chocolate.lindt" object)`       tasty: _        # Applies only to chocolate.lindt (and not to chocolate.lindt.dark for e.g.)        '*': {            # Applies to all data under chocolate.lindt         smooth: _  # Could also be written smooth()         creamy: 1   # Level 1 creamy       } # ...     }   } }  }''').tolist() pprint.pprint(clean_ast(ast))  *:     isYummy  
donothing printer donothing x = donothing(func) # donothing is a class not function  __call__ __init__ params params = {     'name': 'John Doe'     'pass': 'OpenSesame'     'code': '1134' } complex_function(params=params)  class checkforkeysinparams(object):     def __init__(self required):         self.required = set(required)      def __call__(self func):         def wrapper(params):             missing = self.required.difference(params)             if missing:                 raise TypeError('Missing from "params" argument: %s' % ' '.join(sorted(missing)))              func(params)          return wrapper  checkforkeysinparams __call__ 
import sys import sqlite3  print 'python version:' sys.version print 'PySQLite version:' sqlite3.version print 'sqlite3 version:' sqlite3.sqlite_version print  conn = sqlite3.connect('shane.sqlite') conn.isolation_level = None  # CHANGED  with conn:     conn.execute("create table example (A B);")  with conn:     conn.execute("insert into example values (? ?);" (0200))      conn.execute("savepoint spTest;")     conn.execute("insert into example values (? ?);" (1201))     conn.execute("insert into example values (? ?);" (2202))     conn.execute("rollback to savepoint spTest;")  # CHANGED      conn.execute("insert into example values (? ?);" (5205))  
-I --ignore-installed pip -E v_env install -I pyfacebook  
firstG secondG = f(first) list(f(second))  for e in ("(%s%s%s)" % (e1 op e2) for e1 in f(first) for e2 in f(second)): #                               new generator object every loop  ^^^^^^^^^  r = [v for a in A for b in B]  r = [] for a in A:   for b in B:     r.append(v)  def y():   yield 1   yield 2   yield 3 def r():   return [1 2 3]  vy = y() for v in vy:   print v for v in vy:   print v  print "---"  vr = r() for v in vr:   print v for v in vr:   print v  
#!/usr/bin/ruby1.8  def partitions(set)   yield [] if set.empty?   (0 ... 2 ** set.size / 2).each do |i|     parts = [[] []]     set.each do |item|       parts[i &amp; 1] &lt;&lt; item       i &gt;&gt;= 1     end     partitions(parts[1]) do |b|       result = [parts[0]] + b       result = result.reject do |e|         e.empty?       end       yield result     end   end end  partitions([1 2 3 4]) do |e|   p e end  # =&gt; [[1 2 3 4]] # =&gt; [[2 3 4] [1]] # =&gt; [[1 3 4] [2]] # =&gt; [[3 4] [1 2]] # =&gt; [[3 4] [2] [1]] # =&gt; [[1 2 4] [3]] # =&gt; [[2 4] [1 3]] # =&gt; [[2 4] [3] [1]] # =&gt; [[1 4] [2 3]] # =&gt; [[1 4] [3] [2]] # =&gt; [[4] [1 2 3]] # =&gt; [[4] [2 3] [1]] # =&gt; [[4] [1 3] [2]] # =&gt; [[4] [3] [1 2]] # =&gt; [[4] [3] [2] [1]]  
django-admin.py startproject pyDietTracker python manage.py startapp myApp 
ListProperty 
__hash__ __eq__ a==b hash(a)==hash(b) class Item2(DictMixin):     def __hash__(self): return hash(id(self))     def __eq__(self x): return x is self     def __ne__(self x): return x is not self  Item1 __eq__ DictMixin x is self id(x) == id(self) is id a==b a is b __eq__ 
var data = [ {text:'Link A' url:'/page1'} {text:'Link B' url: '/page2'} ]; $("...").autocomplete(data {   formatItem: function(item) {     return item.text;   } }).result(function(event item) {   location.href = item.url; });  $('#my_hidden_field').val(item.extra_value); 
import sympy.physics.units as units from sympy import Rational  my_mile = units.Unit('my_mile' 'mile') my_hour = units.Unit('my_hour' 'hour')  converter = {units.m: my_mile/Rational('1609.344')              units.s: my_hour/Rational('3600')}  v = 10*units.miles/units.hour print v # = 2794*m/(625*s)  print v.subs(converter) # = 10*mile/hour  
evil.py import inspect  def modify_var():   callersframe = inspect.stack()[1][0]   callersglobals = callersframe.f_globals   if 'mod_var' not in callersglobals:     raise ValueError 'calling module has no "mod_var"!'   callersglobals['mod_var'] += 1  a.py import evil  mod_var = 23 evil.modify_var() print 'a mod_var now:' mod_var  b.py import evil  mod_var = 100 evil.modify_var() print 'b mod_var now:' mod_var  $ python -c'import a; import b' a mod_var now: 24 b mod_var now: 101  
character= get_object_or_404(Character pk=character_id) InventoryInlineFormSet = inlineformset_factory(Character Inventory max_num=1) classificationformset = ClassificationInlineFormSet(instance=character)  
&gt;&gt;&gt; def f(): return 23+100 ...  &gt;&gt;&gt; dis.dis(f)   1           0 LOAD_CONST               3 (123)               3 RETURN_VALUE         &gt;&gt;&gt;   if (codelen &gt; 32700)  if (codelen &gt; 0)  
source $PATH source ./houdini_setup 
In [37]: import statsmodels.api as sm  In [38]: x = [5.05 6.75 3.21 2.66]  In [39]: y = [1.65 26.5 -5.93 7.96]  In [40]: X = sm.add_constant(x) # intercept  In [41]: model = sm.OLS(y X)  In [42]: fit = model.fit()  In [43]: fit.params Out[43]: array([  5.39357736 -16.28112799])  In [44]: fit.rsquared Out[44]: 0.52480627513624789  In [45]: np.sqrt(fit.mse_resid) Out[45]: 11.696414461570097  
cast(f c_void_p) 
invalid_range = re.compile(r'[^\x08-\x7B]' re.I) invalid_unicode = re.compile(ur'(Û|²|°|±|É|¹|Í)') line = re.sub(invalid_range  '' line) line = re.sub(invalid_unicode '' line)  
\w \d \w \W \d _ [\W\d_] [^\W\d_] &gt;&gt;&gt; import re &gt;&gt;&gt; rx = re.compile("[^\W\d_]+" re.UNICODE) &gt;&gt;&gt; rx.findall(u"abc_defk9") [u'abc' u'def' u'k']  &gt;&gt;&gt; import unicodedata as ucd &gt;&gt;&gt; allsorts =u"\u0473\u0660\u06c9\u24e8\u4e0a\u3020\u3021" &gt;&gt;&gt; for x in allsorts: ...     print repr(x) ucd.category(x) ucd.name(x) ... u'\u0473' Ll CYRILLIC SMALL LETTER FITA u'\u0660' Nd ARABIC-INDIC DIGIT ZERO u'\u06c9' Lo ARABIC LETTER KIRGHIZ YU u'\u24e8' So CIRCLED LATIN SMALL LETTER Y u'\u4e0a' Lo CJK UNIFIED IDEOGRAPH-4E0A u'\u3020' So POSTAL MARK FACE u'\u3021' Nl HANGZHOU NUMERAL ONE &gt;&gt;&gt; rx.findall(allsorts) [u'\u0473' u'\u06c9' u'\u4e0a' u'\u3021']  
r r == 2 ** 0.5 rationals.py ** 
profiler sys.setprofile print 'call'  'return'  'c_call'  'c_return'  &gt;&gt;&gt; def a(): ...     print 'aaa' ...  &gt;&gt;&gt; def profiler(frame event arg): ...     print 'PROF %r %r' % (event arg) ...  &gt;&gt;&gt; sys.setprofile(profiler) PROF 'return' None &gt;&gt;&gt; a() PROF 'call' None PROF 'c_call' &lt;built-in function utf_8_decode&gt; PROF 'c_return' &lt;built-in function utf_8_decode&gt; PROF 'return' (u'a()\n' 4) PROF 'call' None PROF 'call' None aaa PROF 'return' None PROF 'return' None  c_call c_return utf-8 
key=YOUR_API_KEY&amp;image=http://example.com/example.jpg 
u'(\xdb|\xb2|\xb0|\xb1|\xc9|\xb9|\xcd)' re.compile 
from facebook.djangofb import facebook import facebook.djangofb @facebook.djangofb.require_login() require_login facebook.djangofb facebook.djangofb.facebook import facebook.djangofb @facebook.djangofb.require_login() ...  from facebook import djangofb @djangofb.require_login() ...  from facebook.djangofb import require_login @require_login() ...  request.fb.check_session(request) 
class requiresparams(object):     """      Used as a decorator with an iterable passed in this will look for each item     in the iterable given as a key in the params argument of the function being     decorated. It was built for a series of PayPal methods that require     different params and AOP was the best way to handle it while staying DRY.       &gt;&gt;&gt; @requiresparams(['name' 'pass' 'code'])     ... def complex_function(params):     ...     print(params['name'])     ...     print(params['pass'])     ...     print(params['code'])     &gt;&gt;&gt;      &gt;&gt;&gt; params = {     ...     'name': 'John Doe'     ...     'pass': 'OpenSesame'     ...     #'code': '1134'     ... }     &gt;&gt;&gt;      &gt;&gt;&gt; complex_function(params=params)     Traceback (most recent call last):         ...     ValueError: Missing from "params" dictionary: code     """     def __init__(self required):         self.required = set(required)      def __call__(self func):         def wrapper(*args **kwargs):             if not kwargs.get('params' None):                 raise KeyError('"params" kwarg required for {0}'.format(func.__name__))             missing = self.required.difference(kwargs['params'])             if missing:                 raise ValueError('Missing from "params" dictionary: %s' % ' '.join(sorted(missing)))             return func(*args **kwargs)         return wrapper  if __name__ == "__main__":     import doctest     doctest.testmod()  
widgets 
import facebook.djangofb as facebook  
def some_view(request):     # ...     return render_to_response('my_template.html'                               my_data_dictionary                               context_instance=RequestContext(request))  
class Vuln(models.Model):    pub_date = models.DateTimeField("Publication Date")    short_description = models.CharField("Description" max_length=70)   vendor = models.ForeignKey(Vendor verbose_name="Vendor")   class Url(models.Model):    url = models.URLField("URL" max_length=200)   vulnerability = models.ForeignKey(Vuln)  class Vendor(models.Model):    field_names_go_here = models.TextField(max_length=70)   short_description = models.CharField("Description" max_length=70)  
month day birthdays.sort(key = lambda d: (d.month d.day))  
__eq__ __ne__ a==b a is b 
[x[0] for x in list].index('a')  
sets sets set frozenset 
global ID ID="Yes"  project = ("Yep"+ID) def getprojectname(ID):     return project+ID  
assert AssertionError raise for tr in completed_taskrevs:     for nr in completion_noterevs:         if tr.description in nr.body:             completion_noterevs.remove(nr)             break     else:         raise ValueError("description not found"); # or whatever exception would be appropriate  
sx sy = x/cur_scale y/cur_scale  EVT_PAINT 
pg_cancel_backend(pid) connection.get_backend_pid() 
urls.py urlpatterns = patterns(''      ...      (r'^(?P&lt;path&gt;.+)$' 'django.views.generic.simple.redirect_to' {         'url': '/login/?next=/%(path)s'          'permanent': False     }) )  from django.http import Http404 HttpResponseRedirect def fake_redirect(request path):     if request.user.is_authenticated:         raise Http404()     else:         return HttpResponseRedirect('/login/?next=/%s' % path)  urlpatterns = patterns(''      ...      (r'^(?P&lt;path&gt;.+)$' fake_redirect) )  
r \\ \ r copyfile source_path = r"\\mynetworkshare" dest_path = r"C:\TEMP" file_name = "\\myfile.txt"  shutil.copyfile(source_path + file_name dest_path + file_name)  
&gt;&gt;&gt; from itertools import combinations &gt;&gt;&gt; L = ["one" "two" "three" "four"] &gt;&gt;&gt; for R in combinations(L len(L) - 1): ...     print " and ".join(R) ... one and two and three one and two and four one and three and four two and three and four  
datetime.datetime.strptime(self.request.get("visibleDate") "%Y/%m/%d") from datetime import datetime a = (datetime(200011)) assert isinstance(a tuple) a = (datetime(200011)) assert isinstance(a datetime)  
inputValues = [[0 1] [1 2] [2 3] [2 4] [2 5] [5 6] [4 6] [3 6] [0 7] [7 6] [8 9] [9 6]]  tree = {} numberOfChildren = {} for (f t) in inputValues:   if not tree.has_key(f):     tree[f] = []   tree[f].append(t)   if not numberOfChildren.has_key(t):     numberOfChildren[t] = 0   numberOfChildren[t] += 1  roots = [c for c in tree if c not in numberOfChildren] permutations = []  def findPermutations(node currentList):   global tree   global permutations   if not tree.has_key(node):     permutations.append(currentList)     return   for child in tree[node]:     l = list()     l.extend(currentList)     l.append(child)     findPermutations(child l)  for r in roots:   findPermutations(r [r])  print permutations  
import re regex = re.compile('^' + '.*'.join(re.escape(foo) for foo in pattern.split('*')) + '$')  
echo -e "import sys\nfor r in range(10): print 'rob'" | python  python -c "exec(\"import sys\nfor r in range(10): print 'rob'\")"  (echo "import sys" ; echo "for r in range(10): print 'rob'") | python  
    def __mul__ ( self other ) :         print (type(other))         return Decimal.__mul__ ( self  other )  &gt;&gt;&gt; repr(2.1) '2.1000000000000001' &gt;&gt;&gt; str(2.1) '2.1'      @classmethod     def fromfloat(cls f):         return cls(str(f))  class m_Decimal(Decimal):     @classmethod     def fromfloat(cls f):         return cls(str(f))      def __mul__(self other):         if isinstance(other float):             other = m_Decimal.fromfloat(other)         return Decimal.__mul__(selfother)  &gt;&gt;&gt; Decimal(2) * m_Decimal(2) * 2.2  Traceback (most recent call last):   File "&lt;pyshell#3&gt;" line 1 in &lt;module&gt;     Decimal(2) * m_Decimal(2) * 2.2 TypeError: unsupported operand type(s) for *: 'Decimal' and 'float'      def __mul__(self other):         if isinstance(other float):             other = m_Decimal.fromfloat(other)         return m_Decimal(Decimal.__mul__(selfother))  decimal._Decimal = decimal.Decimal decimal.Decimal = m_Decimal  
system('git rev-parse') # in a git repo running ipython &gt;&gt;&gt; system('git rev-parse') 0  # not in a git repo &gt;&gt;&gt; system('git rev-parse') 32768  
allowed_errors __builtins__ [exc for exc in __builtins__ if isinstance(exc BaseException)]  ValueError TypeError OSError 
__call__ class MyView(object):     def __call__(self request slug)         # do stuff here      def helper_method(self):         # etc.  urls.py class MyView(object):     def __init__(self parameters):         # initialize instance      def __call__(self request slug):         # main view code goes here  first_view = MyView("some parameter") second_view = MyView("some other parameter") # creates second object instance  
sys sys.exc_info import sys  try:     # some call to a java lib that raises an exception here except:     instance = sys.exc_info()[1]  
readline import readline COMMANDS = ['extra' 'extension' 'stuff' 'errors'             'email' 'foobar' 'foo']  def complete(text state):     for cmd in COMMANDS:         if cmd.startswith(text):             if not state:                 return cmd             else:                 state -= 1  readline.parse_and_bind("tab: complete") readline.set_completer(complete) raw_input('Enter section name: ')  Enter section name: &lt;tab&gt; email      errors     extension  extra      foo        foobar    stuff Enter section name: e&lt;tab&gt; email      errors     extension  extra       Enter section name: ext&lt;tab&gt; extension  extra        readline 
__contains__ a __contains__ &gt;&gt;&gt; class a(object): ...     def a(self item): ...         return True ...     __contains__=a ... &gt;&gt;&gt; b=a() &gt;&gt;&gt; print 2 in b True  
TextCtrlInstance.GetValue()  
multiprocessing from multiprocessing import Process Queue  def my_function(q x):     q.put(x + 100)  if __name__ == '__main__':     queue = Queue()     p = Process(target=my_function args=(queue 1))     p.start()     p.join() # this blocks until the process terminates     result = queue.get()     print result  
    c.title="title"  c c c title c.title from pylons import tmpl_context as c from ... import ... as 
mysettings.py sitename = "My site" footer = "This page owned by X"  import mysettings print mysettings.sitename  DJANGO_SETTINGS_MODULE from google.appengine.api import memcache class MySettings(db.Model):    # properties...  def Settings():     key = "mysettings"     obj = memcache.get(key)     if obj is None:        obj = MySettings.all().get()  # assume there is only one        if obj:             memcache.add(key zone 360)        else:             logging.error("no MySettings found create one!")     return obj  
def toUnix(path):     return path.replace("\\" "/")  
# The method that gets called when a new email arrives.  # Replace it with something better. def dosync(self):     print "Got an event!"  # Replaced with something better. def dosync(self):     print "Got an event!"     res = self.M.recent()     print res  
open() open() open() IOError open() try finally 
Column('password' String)  Column('password' String(20))  
QtCore.SIGNAL("aa(str)") QtCore.SIGNAL("aa") QtCore.QObject.connect(self.loginDialog QtCore.SIGNAL("aa") self.login)  
ff f from f import ff ff(...)  import f f.ff(...)  tags ctags ptags.py Ctrl-] 
# classes should have capitalized names ... class a(str):     def b(self*x**y):         print 'debugging: ' self x y         print str.decode(self *x**y)  if __name__ == '__main__':     b=a('aaa')     b.b('utf-8')      b=a()     b.b('utf-8')  # =&gt; output  # debugging:  aaa ('utf-8') {} # aaa # debugging:   ('utf-8') {} #  
im = cvLoadImage( filename CV_LOAD_IMAGE_GRAYSCALE ); if( !im )     return -1;  realInput = cvCreateImage( cvGetSize(im) IPL_DEPTH_64F 1); imaginaryInput = cvCreateImage( cvGetSize(im) IPL_DEPTH_64F 1); complexInput = cvCreateImage( cvGetSize(im) IPL_DEPTH_64F 2);  cvScale(im realInput 1.0 0.0); cvZero(imaginaryInput); cvMerge(realInput imaginaryInput NULL NULL complexInput);  dft_M = cvGetOptimalDFTSize( im-&gt;height - 1 ); dft_N = cvGetOptimalDFTSize( im-&gt;width - 1 );  dft_A = cvCreateMat( dft_M dft_N CV_64FC2 ); image_Re = cvCreateImage( cvSize(dft_N dft_M) IPL_DEPTH_64F 1); image_Im = cvCreateImage( cvSize(dft_N dft_M) IPL_DEPTH_64F 1);  // copy A to dft_A and pad dft_A with zeros cvGetSubRect( dft_A &amp;tmp cvRect(00 im-&gt;width im-&gt;height)); cvCopy( complexInput &amp;tmp NULL ); if( dft_A-&gt;cols &gt; im-&gt;width ) {     cvGetSubRect( dft_A &amp;tmp cvRect(im-&gt;width0 dft_A-&gt;cols - im-&gt;width im-&gt;height));     cvZero( &amp;tmp ); }  // no need to pad bottom part of dft_A with zeros because of // use nonzero_rows parameter in cvDFT() call below  cvDFT( dft_A dft_A CV_DXT_FORWARD complexInput-&gt;height );  cvNamedWindow("win" 0); cvNamedWindow("magnitude" 0); cvShowImage("win" im);  // Split Fourier in real and imaginary parts cvSplit( dft_A image_Re image_Im 0 0 );  // Compute the magnitude of the spectrum Mag = sqrt(Re^2 + Im^2) cvPow( image_Re image_Re 2.0); cvPow( image_Im image_Im 2.0); cvAdd( image_Re image_Im image_Re NULL); cvPow( image_Re image_Re 0.5 );  // Compute log(1 + Mag) cvAddS( image_Re cvScalarAll(1.0) image_Re NULL ); // 1 + Mag cvLog( image_Re image_Re ); // log(1 + Mag)  
Choice Question Choice question Question foo_set Foo ForeignKey choice_set RelatedManager Choice Question q.choice_set.all() foo_set related_name ForeignKey 
import heapq glob  def my_iterable():     for fname in glob.glob("in_s*.txt"):         f = open(fname "r")         for line in f:             items = line.split()             yield fname items[0] float(items[6])         f.close()  result = heapq.nsmallest(10 my_iterable() lambda x: x[2]) print result  list(iterable) heapreplace() heappush() heappushpop() key import glob from heapq import heappush heappushpop from pprint import pprint as pp  def my_iterable():     for fname in glob.glob("in_s*.txt"):         f = open(fname "r")         for line in f:             items = line.split()             yield -float(items[6]) fname items[0]         f.close()  def homegrown_nlargest(n iterable):     """Ensures heap never has more than n entries"""     heap = []     for item in iterable:         if len(heap) &lt; n:             heappush(heap item)         else:             heappushpop(heap item)     return heap  result =  homegrown_nlargest(10 my_iterable()) result = sorted(result reverse=True) result = [(fname fld0 -negfld6) for negfld6 fname fld0 in result] pp(result)  
{referer: http://test/index-test.html}  {referer: "http://test/index-test.html"}  {"referer": "http://test/index-test.html"}  
a()  if __name__ == '__main__': a()  if __name__ == '__main__': b = a()  def a():      b = 'print'     print b  if __name__ == '__main__': b = a()  
b*(abb*)*a?  p = re.compile(r'^b*(abb*)*a?$')  s = 'aa'  &gt;&gt; p = re.compile(r'b*(abb*)*a?') &gt;&gt; bool(p.match(s)) True  &gt;&gt; p = re.compile(r'^b*(abb*)*a?$') &gt;&gt; bool(p.match(s)) False  &gt;&gt; s = 'aa' &gt;&gt; p = re.compile(r'b*(abb*)*a?$') &gt;&gt; bool(p.match(s)) False                 # Correct &gt;&gt; bool(p.search(s)) True                  # Incorrect - search ignored the first 'a'  
file Mock self.__dict__ __getattr__ def __getstate__(self): return self.__dict__ def __setstate__(self d): self.__dict__.update(d)  pickle self.__dict__ __getattr__ 
cksum=0x%4.4x System.out.printf("cksum=0x%4.4x%n" ...);  System.out.printf("cksum=%#04x%n" ...);  DataInputStream bis.read(buffer) dis.read(buffer) 
def doit(inf ouf thestring separator='SEPARATOR\n'):   thestring += '\n'   for line in inf:     # here we're always at the start-of-block separator     assert line == separator     blockid = next(inf)     if blockid == thestring:       # found block of interest use enumerate to count its lines       for c line in enumerate(inf):         if line == separator: break       assert line == separator       # emit results and terminate function       ouf.writelines((separator thestring '(%d)' % c separator))       inf.close()       ouf.close()       return     # non-interesting block just skip it     for line in inf:       if line == separator: break  blockid = next(inf) blockid = inf.next() thestring separator sys.stdin sys.stdout assert for next(inf) 
[s + mystring for s in mylist]  list (s + mystring for s in mylist)  
sys.stdout.flush() 
i 0 while 
ord(my_byte) my_byte == "0xff" ff int(my_byte 16) int_bytes = (int(my_bytes[i:i+2] 16) for i in xrange(0 len(my_bytes) 2) )   
id ID &amp;eacute; getElementsByTagName element.id getElementById text/html 
| srv*: r"HQ01 : HTTP Service - (?:[Ss][Rr][Vv]\d+\.\w+\.com:)?(\w+\.\w+\.(?:net|com|org))"  
WORK_HOUR_CHOICES = (     (Decimal("0") '0')     (Decimal("0.5") '0.5')     (Decimal("1") '1')     (Decimal("1.5") '1.5')     (Decimal("2") '2')     (Decimal("2.5") '2.5') )  &gt;&gt;&gt; from decimal import Decimal &gt;&gt;&gt; Decimal(1.5) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "C:\software\Python25\lib\decimal.py" line 578 in __new__     "First convert the float to a string") TypeError: Cannot convert float to Decimal.  First convert the float to a string &gt;&gt;&gt; Decimal("1.5") Decimal("1.5")  
plt.gca().invert_xaxis()  plt.gca().invert_yaxis()  
#! /usr/bin/python  import gtk import gtk.glade import gconf  class GConfExample:     def __init__(self):         self.client = gconf.client_get_default()      def get_key(self key):         return client.get_string(key)      def set_key(self key val):         client.set_string(key str(val))  mygconf['/path/to/key'];  foo = self.gconf_client.get_string("/path/to/my/config/data/foo") bar = self.gconf_client.get_int("/path/to/my/config/data/bar") baz = self.gconf_client.get_bool("/path/to/my/config/data/baz")  get_* set_* 
sudo port install py26-pyobjc2  
form 
#!usr/bin/env python  import wx import threading import Queue import random import time  TextEventType = wx.NewEventType() EVT_THREAD_TEXT_EVENT = wx.PyEventBinder(TextEventType 1)  global_queue = Queue.Queue()  def threadStart(numthrds queue window):     for i in range(numthrds):         i = TextThread(queue window)  class TextThread(threading.Thread):     def __init__(self queue output_window):         threading.Thread.__init__(self)         self.inqueue = queue         self.output_window = output_window         self.start()       def run(self):         word = self.inqueue.get()         self.setName(word.upper())         wait = random.randrange(1 10)         time.sleep(wait)         msg = 'Thread: ' + self.getName() + '--wait= ' + str(wait) + ' ' + word         evt = NewTextEvent(TextEventType -1)         evt.setText(msg)         wx.PostEvent(self.output_window evt) #post EVT_THREAD_TEXT_EVENT         #self.inqueue.task_done() #may not need this if non-blocking    class NewTextEvent(wx.PyCommandEvent):     def __init__(self evtType id):         wx.PyCommandEvent.__init__(self evtType id)          self.msg = ''      def setText(self text):         self.msg = text      def getText(self):         return self.msg  class TextFrame(wx.Frame):     def __init__(self parent id *args **kwargs):         wx.Frame.__init__(self parent id *args **kwargs)         self.queue = Queue.Queue()         framesizer = wx.BoxSizer(wx.VERTICAL)         self.panel = ThreadPanel(self wx.ID_ANY)         framesizer.Add(self.panel 0 wx.EXPAND)         self.SetSizerAndFit(framesizer)          self.Bind(EVT_THREAD_TEXT_EVENT self.OnThreadText)      def OnThreadText(self evt):         msg = evt.getText()         self.panel.out_tc.AppendText(msg + '\n')  class ThreadPanel(wx.Panel):     def __init__(self parent id *args **kwargs):         wx.Panel.__init__(self parent *args **kwargs)         vsizer = wx.BoxSizer(wx.VERTICAL)         self.wordtc = wx.TextCtrl(self id=wx.ID_ANY value='' size=(350 -1))         self.inst_text = wx.StaticText(self wx.ID_ANY             label='Enter a list of space-separated words')         self.out_tc = wx.TextCtrl(self id=wx.ID_ANY size=(350 300)              value='' style=wx.TE_MULTILINE)         self.start_button = wx.Button(self wx.ID_ANY label='Start Threads')          vsizer.Add(self.inst_text 0 wx.ALIGN_LEFT)         vsizer.Add(self.wordtc 0 wx.EXPAND)         vsizer.Add(self.start_button)         vsizer.Add((100100))         vsizer.Add(self.out_tc 0 wx.EXPAND)         self.SetSizer(vsizer)         self.Bind(wx.EVT_BUTTON self.OnStartButton self.start_button)      def OnStartButton(self evt):         self.out_tc.Clear()         text = self.wordtc.GetValue()         self.wordtc.Clear()         if not text.count(''):             text = text.split(' ')         num_thrds = len(text)         for word in text:             word = word.strip()             self.GetParent().queue.put(word)         threadStart(num_thrds self.GetParent().queue self.GetParent())     if __name__ == "__main__":     app = wx.App()     frame = TextFrame(None wx.ID_ANY 'Thread test')     frame.Show()         app.MainLoop()  #!usr/bin/env python  import wx import random  colorEventType = wx.NewEventType() EVT_COLOR_EVENT = wx.PyEventBinder(colorEventType 1)  class ButtonPanel(wx.Panel):     def __init__(self parent *args **kwargs):         wx.Panel.__init__(self parent *args **kwargs)          vsizer = wx.BoxSizer(wx.VERTICAL)         self.rstbutt = wx.Button(self wx.ID_ANY label='Restore')         self.rstbutt.Disable()         self.Bind(wx.EVT_BUTTON self.OnButt self.rstbutt)         vsizer.Add(self.rstbutt 0 wx.ALIGN_CENTER)         vsizer.Add((500150) 0)         self.SetSizer(vsizer)      def OnButt(self evt):         self.SetBackgroundColour(wx.NullColor)         self.GetParent().Refresh()         self.rstbutt.Disable()  class ColorEvent(wx.PyCommandEvent):     def __init__(self evtType id):         wx.PyCommandEvent.__init__(self evtType id)         self.color = None      def SetMyColor(self color):         self.color = color      def GetMyColor(self):         return self.color  class MainFrame(wx.Frame):     def __init__(self parent *args **kwargs):         wx.Frame.__init__(self parent *args **kwargs)         framesizer = wx.BoxSizer(wx.VERTICAL)         self.panel = ButtonPanel(self wx.ID_ANY)         framesizer.Add(self.panel 1 wx.EXPAND)          menubar = wx.MenuBar()         filemenu = wx.Menu()         menuquit = filemenu.Append(wx.ID_ANY '&amp;Quit')         menubar.Append(filemenu 'File')         colormenu = wx.Menu()         switch = colormenu.Append(wx.ID_ANY '&amp;Switch Color')         menubar.Append(colormenu '&amp;Color')         self.SetMenuBar(menubar)          self.Bind(wx.EVT_MENU self.OnQuit menuquit)         self.Bind(wx.EVT_MENU self.OnColor switch)         self.Bind(EVT_COLOR_EVENT self.ColorSwitch)         self.SetSizerAndFit(framesizer)      def OnQuit(self evt):         self.Close()      def OnColor(self evt):         colevt = ColorEvent(colorEventType -1)          colors = ['red' 'green' 'blue' 'white' 'black' 'pink'              (106 90 205) #slate blue             (64 224 208) #turquoise             ]         choice = random.choice(colors)         colevt.SetMyColor(choice)         self.GetEventHandler().ProcessEvent(colevt)         #evt.Skip()      def ColorSwitch(self evt):         color = evt.GetMyColor()         #print(color)         self.panel.SetBackgroundColour(color)         self.Refresh()         self.panel.rstbutt.Enable()    if __name__ == "__main__":     app = wx.App()     frame = MainFrame(None wx.ID_ANY title="Change Panel Color Custom Event")     frame.Show(True)      app.MainLoop()  
raise ValueError('A very specific bad thing happened.')  Exception raise Exception('I know Python!') # Don't! If you catch likely to hide bugs.  def demo_bad_catch():     try:         raise ValueError('Represents a hidden bug do not catch this')         raise Exception('This is the exception you expect to handle')     except Exception as error:         print('Caught this error: ' + repr(error))  &gt;&gt;&gt; demo_bad_catch() Caught this error: ValueError('Represents a hidden bug do not catch this')  def demo_no_catch():     try:         raise Exception('general exceptions not caught by specific handling')     except ValueError as e:         print('we will not catch exception: Exception')   &gt;&gt;&gt; demo_no_catch() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;stdin&gt;" line 3 in demo_no_catch Exception: general exceptions not caught by specific handling  raise raise ValueError('A very specific bad thing happened')  raise ValueError('A very specific bad thing happened' 'foo' 'bar' 'baz')   args Exception try:     some_code_that_may_raise_our_value_error() except ValueError as err:     print(err.args)  ('message' 'foo' 'bar' 'baz')      message BaseException args message except logger = logging.getLogger(__name__)  try:     do_something_in_app_that_breaks_easily() except AppError as error:     logger.error(error)     raise                 # just this!     # raise AppError      # Don't do this you'll lose the stack trace!  sys.exc_info() raise sys.exc_info() type value traceback = sys.exc_info()      raise AppError error sys.exc_info()[2] # avoid this.     # Equivalently as error *is* the second object:     raise sys.exc_info()[0] sys.exc_info()[1] sys.exc_info()[2]  args def error():     raise ValueError('oops!')  def catch_error_modify_message():     try:         error()     except ValueError:         error_type error_instance traceback = sys.exc_info()         error_instance.args = (error_instance.args[0] + ' &lt;modification&gt;')         raise error_type error_instance traceback  &gt;&gt;&gt; catch_error_modify_message() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;stdin&gt;" line 3 in catch_error_modify_message   File "&lt;stdin&gt;" line 2 in error ValueError: oops! &lt;modification&gt;      raise error.with_traceback(sys.exc_info()[2])  sys.exc_info     raise RuntimeError('specific message') from error  raise ValueError 'message' # Don't do this it's deprecated!  raise 'message' # really really wrong. don't do this.  TypeError BaseException def api_func(foo):     '''foo should be either 'baz' or 'bar'. returns something very useful.'''     if foo not in _ALLOWED_ARGS:         raise ValueError('{foo} wrong use "baz" or "bar"'.format(foo=repr(foo)))  class MyAppLookupError(LookupError):     '''raise this when there's a lookup error for my app'''  if important_key not in resource_dict and not ok_to_be_missing:     raise MyAppLookupError('resource is missing and that is not ok.')  
class Phone_Number():     def get_phone_numbers(self):         phone_count = int(raw_input("How many phone numbers?\n"))         self.phone_numbers = []         for _ in range(phone_count):             self.phone_numbers.append(raw_input("Phone Number: "))  p = Phone_Number() p.get_phone_numbers() for phone_number in p.phone_numbers:     print phone_number  
webapp.RequestHandler # Required imports import cgi from django.core.files.uploadedfile import SimpleUploadedFile  def get_uploaded_files(self):     """Gets a dictionary mapping field names to SimpleUploadedFile objects     for each uploaded file in the given params.  Suitable for passing to a     Django form as the `files` argument."""     return dict((k SimpleUploadedFile(v.filename v.file.read()))                 for k v in self.request.params.items()                 if isinstance(v cgi.FieldStorage) and v.file)  form = MyForm(self.request.params self.get_uploaded_files())  
CFLAGS="-fPIC" --disable-shared ./configure --enable-static 
&gt;&gt;&gt; lst = [3 3 4] &gt;&gt;&gt; import itertools &gt;&gt;&gt; set(itertools.permutations(lst)) {(3 4 3) (3 3 4) (4 3 3)}  
import pexpect MW = "/usr/local/maple12/bin/maple -tu" X = '1+1;' child = pexpect.spawn(MW) child.expect('#--') child.sendline(X) child.expect('#--') out = child.before out = out[out.find(';')+1:].strip() out = ''.join(out.split('\r\n')) print out  
any() &gt;&gt;&gt; any(item['color'] == 'red' and item['time'] != 2  for item in thelist) False  
cmds = [     "lock"     "read"     "write"     "request"     "log"     ]  def match_cmd(s):     matched = [c for c in cmds if c.startswith(s)]     if matched:         return matched[0]  
for y in x... iter = x.__iter__()         # get iterator try:     while 1:         y = iter.next()         # get each item         ...                     # process y except StopIteration: pass  # iterator exhausted  
from numpy import array myVector = array([Vx Vy Vz]) myMatrix = array([[Vx Vy Vz] [123]])  
t = tuple(x[0] for x in s)  
path13882 cah Cahuilla var langaugeMap = {}; languageMap["cah"] = { name: "Cahuilla" color: "rgb(255 0 0)" }; languageMap["cup"] = { name: "Cupeño" color: "rgb(255 64 0)" }; // and so on -- this could even be generated from a CSV file or Excel etc. // if the highlighted color is always the same then you don't need it in the map // or use style sheets for an activeshape and inactiveshape // Put any information that is specific to a language in the map  &lt;path    style="fill:#800000;fill-opacity:1;display:inline"    d="m 422.43078517.40746 c 0.521510.006 1.107550.0374 1.759250.0825 3.820110.26462 5.010880.75501 5.750012.37491 0.513121.12355 2.41213.0097 4.222134.1946 3.9062.55656 7.388242.07964 9.61517-1.3194 2.12996-3.25075 9.13451-3.19196 13.617390.11545 1.771851.30707 4.049942.38037 5.063192.38041 1.013250 3.345930.92548 5.184212.06155 2.528161.56236 4.99182.09869 10.098892.19902 3.713590.0729 7.681450.64349 8.823741.26442 2.817171.53202 5.676331.42382 10.7693-0.40133 4.97461-1.78261 6.31161-1.36525 17.102675.31063 3.398622.10239 6.904914.08094 7.79564.39801 2.465930.8776 4.554284.66976 3.952597.17971 -0.293591.22605 -0.758983.51121 -1.033495.07968 -0.274111.56855 -0.883823.33952 -1.357613.93621 -1.508421.89871 -20.985017.77151 -27.89458.41122 -3.660140.33879 -8.30911.04337 -10.329871.56676 -3.506660.90799 -3.817430.79746 -6.78388-2.44089 -3.3486-3.65594 -6.11308-4.2716 -8.48815-1.89661 -2.144082.14401 -1.851263.96434 1.06676.66846 1.407251.30409 1.856992.10446 1.000271.77571 -0.85672-0.32883 -6.3937-0.12213 -12.30330.46176 -5.90960.58386 -12.560621.27336 -14.782971.53381 -4.170580.4888 -5.09869-0.37014 -2.61673-2.42989 2.1563-1.78956 1.74245-2.63318 -1.65999-3.36449 -1.69931-0.36525 -4.94789-1.90738 -7.213-3.42496 -2.26473-1.51754 -5.89662-3.66823 -8.07583-4.77731 -2.17921-1.10923 -6.21922-3.94186 -8.97721-6.29463 -4.75318-4.05478 -4.93682-4.36681 -3.43604-6.02527 0.96935-1.07117 2.36209-1.56397 3.5899-1.26992 1.626390.38937 2.49494-0.41237 4.59588-4.24958 1.42481-2.60257 2.23686-4.95457 1.80316-5.22266 -0.4337-0.26805 -1.06784-3.14557 -1.40725-6.39358 -0.33978-3.24797 -1.19001-6.79064 -1.89134-7.87242 -1.74322-2.68957 -1.2114-3.65437 2.44111-3.61188 l 00 z"    id="cah"    inkscape:label="#cah"    onmouseover="highlightRegion(evt);"    onmouseout="restoreRegion(evt);" /&gt;  
def translate(cities tags kwargs):   return {'city': cities[int(kwargs['city'])]           'tag': tags[int(kwargs['tag'])]}        # Now new_keywords is {'city': '3' 'tag': '23'}       # I WANT TO BE LIKE THIS       #new_keywords is {'city': 'Phnom Penh' 'tag': 'publicprivate'}  def commaplay(adict value):   return ''.join(adict[int(x)] for x in value.split(''))  def translate(cities tags kwargs):   return {'city': commaplay(cities kwargs['city'])           'tag': commaplay(tags kwargs['tag'])}  
save 
site-packages 
0x600D 0xBAD True 0x600D False 0xBAD True 0x600D 0x600D 0xBAD True False __str__ 0x600D 'True' True = False  True True False 0xBAD False True = True  True True True 0xBAD 0xBAD False True = not True  True 0xBAD not not 0xBAD 0xBAD 0x600D = True True 0x600D print True True 
import meminfo gc commands  page_size = int(commands.getoutput("getconf PAGESIZE"))  def stat(message):     s = meminfo.proc_stat()     print "My memory usage %s: RSS: %dkb VSIZE: %dkb" % (         message s['rss']*page_size/1024 s['vsize']/1024) mylist = []  stat("before allocating a big list") for i in range(03000000):     mylist.append('something here to take memory')  stat("after allocating big list") ### uncomment one of these: mylist = [] # del mylist[:] stat("after dropping a big list") gc.collect() stat("after gc.collect()") gc.collect() stat("after second gc.collect()") gc.collect() stat("after third gc.collect()")  My memory usage before allocating a big list: RSS: 3396kb VSIZE: 7324kb My memory usage after allocating big list: RSS: 50700kb VSIZE: 55084kb My memory usage after dropping a big list: RSS: 38980kb VSIZE: 42824kb My memory usage after gc.collect(): RSS: 38980kb VSIZE: 42824kb My memory usage after second gc.collect(): RSS: 38980kb VSIZE: 42824kb My memory usage after third gc.collect(): RSS: 38980kb VSIZE: 42824kb  My memory usage before allocating a big list: RSS: 3392kb VSIZE: 7324kb My memory usage after allocating big list: RSS: 50696kb VSIZE: 55084kb My memory usage after dropping a big list: RSS: 38976kb VSIZE: 42824kb My memory usage after gc.collect(): RSS: 38976kb VSIZE: 42824kb My memory usage after second gc.collect(): RSS: 38976kb VSIZE: 42824kb My memory usage after third gc.collect(): RSS: 38976kb VSIZE: 42824kb  
a.b.a is b.b.a True a b 
inspect finally gc.disable() def handle_stackframe_without_leak():     frame = inspect.currentframe()     try:         # do something with the frame     finally:         del frame  
lines = open('file.txt') for line in lines:    as_list = line.split()    result = [as_list[0] as_list[1] as_list[2:]]    print result  ['index' 'command' ['param1' 'param2' 'param3']]  
json.load() 
_private_var = 42 
del a[0][0]  
AUTHENTICATION_BACKENDS = (    'django.contrib.auth.backends.ModelBackend'    'backends.twitteroauth.TwitterBackend' )  
my_dir = os.path.expanduser('~/some_dir')  
python setup.py install sudo python setup.py install 
for x in range(subjectlength - 1 -1 -1):  y 
(r'^/message/(?&lt;name&gt;\d+)/$' 'your_app.views.direct_to_template')  def direct_to_template(name):   return render_to_response('message/%s.html' % name)  
NameError var1 = var2 = var3 = None # code that might change the value of three variables mentioned above myvar = var1 or var2 or var3  
def search(request):     if 'q' in request.GET and request.GET['q']:         q = request.GET['q']         q_school = Lawyer.objects.filter(last__icontains=q).values_list('school' flat=True)         q_year = Lawyer.objects.filter(last__icontains=q).values_list('year_graduated' flat=True)         lawyers = Lawyer.objects.filter(school__icontains=q_school[0]).filter(year_graduated__icontains=q_year[0])                 return render_to_response('search_results.html' {'lawyers': lawyers 'query': q})     else:         return HttpResponse('Please submit a search term.')  
import pkg_resources  # part of setuptools version = pkg_resources.require("MyProject")[0].version  setup.py __version__ execfile('mypackage/version.py') __version__ VERSION setup.py version_file = open(os.path.join(mypackage_root_dir 'VERSION')) version = version_file.read().strip()  VERSION 
class Base {     public static T Get&lt;T&gt;(int id)         where T : Base new()     {         return new T() { ID = id };     }      public int ID { get; set; } }  var p = Base.Get&lt;Puppy&gt;(10) Puppy.Get&lt;Puppy&gt;(10) Kitty.Get&lt;Puppy&gt; class Base&lt;T&gt; where T : Base&lt;T&gt; new() {     public static T Get(int id)     {         return new T() { ID = id };     }      public int ID { get; set; } }  class Puppy : Base&lt;Puppy&gt; { }  class Kitten : Base&lt;Kitten&gt; { }  Puppy.Get(10) var p = new Puppy(10) 
elt elt elt NameError del elt # not necessary if we haven't use elt before but just in case for elt in itertools.chain.from_iterable(node):     do_stuff_to_each(elt) try:     do_stuff_to_last(elt) except NameError: # no last elt to do stuff to     pass  
("This is the first line of my text " "which will be joined to a second.")  "This is the first line of my text " \ "which will be joined to a second."  "This is the first line of my text " \  "which will be joined to a second."  + ("This is the first line of my text " +  "which will be joined to a second.")  """This is the first line of my text which will be joined to a second."""  """This is the first line of my text \ which will be joined to a second."""  
int j=1; int k=2; k += j;  j = 1 k = 2 k += j    2           0 LOAD_CONST               1 (1)               3 STORE_FAST               0 (j)    3           6 LOAD_CONST               1 (2)               9 STORE_FAST               1 (k)    4          12 LOAD_FAST                1 (k)              15 LOAD_FAST                0 (j)              18 INPLACE_ADD              19 STORE_FAST               1 (k)  
import os  def paths(filename):     dirList = ['c:\\' 'y:\\' 'z:\\']     complete = [os.path.join(s filename) for s in dirList]     return complete  def fileWrite():     for each_file in paths('c:\\peter.txt'):         text = 'Hello World'         file = open(each_file 'w')         file.write(text)         file.close()  def paths(filename):     return [os.path.join(s filename) for s in ('c:\\' 'y:\\' 'z:\\')]  
if message.value[0] == "/" or message.value[0] == "\\":  
_environ = dict(os.environ)  # or os.environ.copy() try:      ...  finally:     os.environ.clear()     os.environ.update(_environ)  
&gt;&gt;&gt; a = ['a''b''d''c'] &gt;&gt;&gt; b = [1 2 4 3] &gt;&gt;&gt; c = zip(a b) &gt;&gt;&gt; c [('a' 1) ('b' 2) ('d' 4) ('c' 3)] &gt;&gt;&gt; c.sort(key=lambda x: x[1]) &gt;&gt;&gt; c [('a' 1) ('b' 2) ('c' 3) ('d' 4)]  
# Save the existing list of warning filters before we modify it using simplefilter(). # Note: the '[:]' causes a copy of the list to be created. Without it original_filter # would alias the one and only 'real' list and then we'd have nothing to restore. original_filters = warnings.filters[:]  # Ignore warnings. warnings.simplefilter("ignore")  try:     # Execute the code that presumably causes the warnings.     fxn()  finally:     # Restore the list of warning filters.     warnings.filters = original_filters  try/finally with try/finally 
    def Clicked(self event):         checkedItems = [i for i in range(self.panel.sitList.GetCount()) if self.panel.sitList.IsChecked(i)]         print checkedItems         r = [siteDict[k] for k in checkedItems]         print r         for each in r:             pre = '&lt;HTML&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;'             post = '&lt;/HTML&gt;'             site = urllib2.urlopen(each)             html=site.read()             soup = BeautifulSoup(html)             tags = soup.findAll('a')              soup1 = BeautifulSoup(''.join(str(t) for t in tags))             print soup1.prettify()              aTagaEnd = makeHTMLTags("A")              aTag = originalTextFor(aTag)             aEnd = originalTextFor(aEnd)              aLink = aTag + SkipTo(aEnd) + aEnd             aLink.setParseAction(lambda tokens : ''.join(tokens))              links = aLink.searchString(html)              out = []             out.append(pre)             out.extend(['  '+lnk[0] for lnk in links])             out.append(post)              P= '\n'.join(out)             print type(P)              print P              # create the html frame pass it in your string             frm = MyHtmlFrame(None "Charlie" P)             frm.Show()    class MyHtmlFrame(wx.Frame): def __init__(self parent title page):  # pass it in the page variable     wx.Frame.__init__(self parent -1 title)     html = wx.html.HtmlWindow(self)     if "gtk2" in wx.PlatformInfo:         html.SetStandardFonts()      html.SetPage(page)    app = wx.App()  checkList(None -1 'Charlie')  checkList.Show()   # show first frame which opens other windows app.MainLoop()  
cur.executescript COMMIT CREATE COMMIT 
super() super().__init__ 
scipy.io.wavfile.read(somefile) numpy from scipy.io import wavfile samplerate data = wavfile.read('./output/audio.wav')  
class PhotoQuerySet(QuerySet):     def delete(self):         for x in self:             x.delete()  class PhotoManager(models.Manager):     def get_query_set(self):         return PhotoQuerySet(self.model)  class Photo(models.Model):     name = models.CharField(max_length=256 unique=True)     slug = models.SlugField(unique=True)     image = models.ImageField(upload_to='photos/')      objects = PhotoManager()      def delete(self):         os.remove(self.get_thumbnail_name())         os.remove(self.get_medium_name())         super(Photo self).delete()  
__setitem__ Objects/dictobject.c dictobject.c class MyUpdateDict(dict):     def __init__(self *args **kwargs):         self.update(*args **kwargs)      def __setitem__(self key value):         # optional processing here         super(MyUpdateDict self).__setitem__(key value)      def update(self *args **kwargs):         if args:             if len(args) &gt; 1:                 raise TypeError("update expected at most 1 arguments "                                 "got %d" % len(args))             other = dict(args[0])             for key in other:                 self[key] = other[key]         for key in kwargs:             self[key] = kwargs[key]      def setdefault(self key value=None):         if key not in self:             self[key] = value         return self[key]  def test_updates(dictish):     dictish['abc'] = 123     dictish.update({'def': 234})     dictish.update(red=1 blue=2)     dictish.update([('orange' 3) ('green'4)])     dictish.update({'hello': 'kitty'} black='white')     dictish.update({'yellow': 5} yellow=6)     dictish.setdefault('brown'7)     dictish.setdefault('pink')     try:         dictish.update({'gold': 8} [('purple' 9)] silver=10)     except TypeError:         pass     else:         raise RunTimeException("Error did not occur as planned")  python_dict = dict([('b'2)('c'3)]a=1) test_updates(python_dict)  my_dict = MyUpdateDict([('b'2)('c'3)]a=1) test_updates(my_dict)  
subprocess.Popen Popen shell=True subprocess.Popen("curl --data-binary \@"+input_file_path+" -o "+ file_name +" localhost:30"     stdout=subprocess.PIPE     shell=True)  
start = 0 count = 0 for match in iter(lambda: find(target key start) -1):   count += 1   start = match + 1 return count  def findall(target key start=0):   for match in iter(lambda: find(target key start) -1):     yield match     start = match + 1  count = sum(1 for m in findall(target key))  
from BeautifulSoup import BeautifulSoup  ht = ''' &lt;div id="abc"&gt;     some long text goes &lt;a href="/"&gt; here &lt;/a&gt; and hopefully it      will get picked up by the parser as content &lt;/div&gt; ''' soup = BeautifulSoup(ht)  anchors = soup.findAll('a') for a in anchors:   a.previousSibling.replaceWith(a.previousSibling + a.string)  results = soup.findAll(text=lambda(x): len(x) &gt; 20)  print results  $ python bs.py [u'\n    some long text goes  here ' u' and hopefully it \n    will get picked up by the parser as content\n']  a.string a.previousSibling None if len(x) &gt; 20 &lt;a&gt; &lt;a&gt; &lt;b&gt; &lt;strong&gt; &lt;p&gt; &lt;br&gt; 
m = [row for row in l if 'a' in row[0]]  in m = [row for row in l if 'a' == row[0]]  
w.element("Node" None {'class': 'oops'})  w.element("Node" attrib={'class': 'oops'})  
io.wavfile from scipy.io import wavfile wavfile.read("/usr/share/sounds/purple/receive.wav") 
set smartindent :h smartindent When typing '#' as the first character in a new line the indent for that line is removed the '#' is put in the first column.  The indent is restored for the next line.  If you don't want this use this mapping: ":inoremap # X^H#" where ^H is entered with CTRL-V CTRL-H. When using the "&gt;&gt;" command lines starting with '#' are not shifted right.  au! FileType python setl nosmartindent  
\\.\COMxx 
else if foo: return else def digit_to_char(digit):     if digit &lt; 10:         return str(digit)     return chr(ord('a') + digit - 10)  def str_base(numberbase):     if number &lt; 0:         return '-' + str_base(-number base)     (d m) = divmod(number base)     if d &gt; 0:         return str_base(d base) + digit_to_char(m)     return digit_to_char(m)  digit_to_char() str() chr(ord()) &gt;= 10 ord() 
QTextEdit toPlainText() print "show input: %s" % self.textEditInput.toPlainText()  toHtml() QTextDocument QTextEdit.document() 
from suds.client import Client  client = Client("http://example.com/foo.wsdl") client.service.someMethod(someParameter)  someMethod 
lines = open('textfile.txt').readlines() open('newfile.txt' 'w').writelines(lines[3:-1])  
tp_as_sequence #include &lt;Python.h&gt;  /**  * C structure and methods definitions  */  typedef struct {     PyObject_HEAD; } TestObject;  static Py_ssize_t TestClass_len(TestObject* self)  {        return 55; }  /**  * Python definitions  */  static PySequenceMethods TestClass_sequence_methods = {     TestClass_len                  /* sq_length */ };  static PyTypeObject TestClass = {     PyObject_HEAD_INIT(NULL)         0                              /*ob_size*/     "testmodule.TestClass"         /*tp_name*/     sizeof(TestObject)             /*tp_basicsize*/ };  /**  * Module entry point  */ #ifndef PyMODINIT_FUNC  /* declarations for DLL import/export */ #define PyMODINIT_FUNC void #endif PyMODINIT_FUNC inittestmodule(void)  {     PyObject* m;      TestClass.tp_new = PyType_GenericNew;     TestClass.tp_as_sequence = &amp;TestClass_sequence_methods;     TestClass.tp_flags = Py_TPFLAGS_DEFAULT;      if (PyType_Ready(&amp;TestClass) &lt; 0)         return;      m = Py_InitModule3("testmodule" NULL "");      Py_INCREF(&amp;TestClass);     PyModule_AddObject(m "TestClass" (PyObject *)&amp;TestClass); }  __len__ PyCFunction_New PyMethod_New PyObject_SetAttr __len__ 
is-even my_var = is-even(another_var)  is-even(another_var) is-even even is (is-even 4)  (- is (even 4))  
&gt;&gt;&gt; a = set([1 2 3]) &gt;&gt;&gt; b = set([1 2 3 4 5 6]) &gt;&gt;&gt; a.issubset(b) True  &gt;&gt;&gt; a = [1 2 3] &gt;&gt;&gt; b = [1 2 3 4 5 6] &gt;&gt;&gt; all(map(lambda x: x in b a)) True &gt;&gt;&gt; a = [1 2 3 9] &gt;&gt;&gt; all(map(lambda x: x in b a)) False  &gt;&gt;&gt; a = [1 1 2 3] &gt;&gt;&gt; all(map(lambda x: a.count(x) &lt;= b.count(x) a)) False  
Updater screen process multiprocessing.current_process() updater.start() fork() process 
location args = ['wget' '-r' '-l' '1' '-p' '-P' location url]  
from suds.client import Client client=Client('http://eample.wsdl') res = client.service.AbsoluteMove(profile_token destination speed) print res  
class MyClass:     def __init__(self impl)         self.impl = impl     def run(selfvar):         print "prepare"         impl.runImpl(var)         print "I'm done"  class AnImplementation:     def runImpl(selfvar):  
def sum_to_n(n size limit=None):     """Produce all lists of `size` positive integers in decreasing order     that add up to `n`."""     if size == 1:         yield [n]         return     if limit is None:         limit = n     start = (n + size - 1) // size     stop = min(limit n - size + 1) + 1     for i in range(start stop):         for tail in sum_to_n(n - i size - 1 i):             yield [i] + tail  for partition in sum_to_n(6 3):     print partition  [2 2 2] [3 2 1] [4 1 1]  
subprocess.Popen(("mdb-export" mdb.name tbl)stdout=csv)  
assertRaises obj = Class() def setNameTest():     obj.name = "Name"         self.assertRaises(NameError setNameTest)  setattr self.assertRaises(NameError setattr obj "name" "Name")  
if info['user'] == username:   locations = (json.loads(info['locations']) +     [{'place': '' 'description': ''}] * 5)[:5]    return {'date': info['date'] 'locations': locations}  
file_content[:10] + [var1] + rss_xml[11:]  
RSS: resident set size the non-swapped physical memory      that a task has used (in kiloBytes).  VSZ: virtual memory usage of entire process.      vm_lib + vm_exe + vm_data + vm_stack  # ps -eo pidvszrssszsizecmd|egrep python  PID    VSZ   RSS   SZ    SZ    CMD 23801  4920  2896  1230  1100  python  
unittest.skip @unittest.skip("reason for skipping") def test_foo():     print('This is foo test case.')   @unittest.skip  # no reason needed def test_bar():     print('This is bar test case.')  
def section1( ... ):  def section2( ... ):  def overall( ... ):     section1()     section2()  with 
zip(some_values other_values) from itertools import izip some_values = ['a' 'b' 'c' 'd' 'e' 'f'] other_values = [4 8 15 16 23 42] context['zipped_values'] = izip(some_values other_values)  {% for some other in zipped_values %}     {{ some }}: {{ other }}  &lt;br/&gt; {% endfor %}  
Content.objects.filter(score__real_score=1) 
item price class Item(object):     def __init__(selfnameprice):         self.name=name         self.price=price  id name class Person(object):     def __init__(selfidname*items):         self.id=id         self.name=name         self.items=set(items)  list_dicts list_people = [     Person('001''jim'Item('pencil'0.99))     Person('002''mary'Item('book'15.49))     Person('002''mary'Item('tape'7.99))     Person('003''john'Item('pen'3.49))     Person('003''john'Item('stapler'9.49))     Person('003''john'Item('scissors'12.99))  ]  id reduce take_items def take_items(personother):     '''     person takes other's items.     Note however that although person may be altered other remains the same --     other does not lose its items.         '''     person.items.update(other.items)     return person  import itertools import operator  class Item(object):     def __init__(selfnameprice):         self.name=name         self.price=price     def __str__(self):         return '{0} {1}'.format(self.nameself.price)  class Person(object):     def __init__(selfidname*items):         self.id=id         self.name=name         self.items=set(items)     def __str__(self):         return '{0} {1}: {2}'.format(self.idself.namemap(strself.items))  list_people = [     Person('001''jim'Item('pencil'0.99))     Person('002''mary'Item('book'15.49))     Person('002''mary'Item('tape'7.99))     Person('003''john'Item('pen'3.49))     Person('003''john'Item('stapler'9.49))     Person('003''john'Item('scissors'12.99))  ]  def take_items(personother):     '''     person takes other's items.     Note however that although person may be altered other remains the same --     other does not lose its items.         '''     person.items.update(other.items)     return person  list_people2 = [reduce(take_itemsg)                 for kg in itertools.groupby(list_people lambda person: person.id)] for person in list_people2:     print(person)  
table=soup.find('table' 'bioTableAlt') for row in table.findAll('tr')[1:]:     cells = row.findAll('td')     #retreieve data from cells...      rank = cells[0].string     player = cells[1].a.string     link = cells[1].a['href']  
get characters KeyError .get None myget(d k v) d.get(k v) def myget(d k v=None):   try: return d[k]   except KeyError: return v  get get 1 
timeit +---------------------+-------+ | Method              | ms    | +---------------------+-------+ | rwh_primes1         | 43.0  | | sieveOfAtkin        | 46.4  | | rwh_primes          | 57.4  | | sieve_wheel_30      | 63.0  | | rwh_primes2         | 67.8  |     | sieveOfEratosthenes | 147.0 | | ambi_sieve_plain    | 152.0 | | sundaram3           | 194.0 | +---------------------+-------+  +---------------------+-------+ | Method              | ms    | +---------------------+-------+ | rwh_primes2         | 68.1  | | rwh_primes1         | 93.7  | | rwh_primes          | 94.6  | | sieve_wheel_30      | 97.4  | | sieveOfEratosthenes | 178.0 | | ambi_sieve_plain    | 286.0 | | sieveOfAtkin        | 314.0 | | sundaram3           | 416.0 | +---------------------+-------+  +---------------------+-------+ | Method              | ms    | +---------------------+-------+ | primesfrom2to       | 15.9  | | primesfrom3to       | 18.4  | | ambi_sieve          | 29.3  | +---------------------+-------+  python -mtimeit -s"import primes" "primes.{method}(1000000)"  {method} #!/usr/bin/env python import psyco; psyco.full() from math import sqrt ceil import numpy as np  def rwh_primes(n):     # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188     """ Returns  a list of primes &lt; n """     sieve = [True] * n     for i in xrange(3int(n**0.5)+12):         if sieve[i]:             sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)     return [2] + [i for i in xrange(3n2) if sieve[i]]  def rwh_primes1(n):     # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188     """ Returns  a list of primes &lt; n """     sieve = [True] * (n/2)     for i in xrange(3int(n**0.5)+12):         if sieve[i/2]:             sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)     return [2] + [2*i+1 for i in xrange(1n/2) if sieve[i]]  def rwh_primes2(n):     # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188     """ Input n&gt;=6 Returns a list of primes 2 &lt;= p &lt; n """     correction = (n%6&gt;1)     n = {0:n1:n-12:n+43:n+34:n+25:n+1}[n%6]     sieve = [True] * (n/3)     sieve[0] = False     for i in xrange(int(n**0.5)/3+1):       if sieve[i]:         k=3*i+1|1         sieve[      ((k*k)/3)      ::2*k]=[False]*((n/6-(k*k)/6-1)/k+1)         sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k]=[False]*((n/6-(k*k+4*k-2*k*(i&amp;1))/6-1)/k+1)     return [23] + [3*i+1|1 for i in xrange(1n/3-correction) if sieve[i]]  def sieve_wheel_30(N):     # http://zerovolt.com/?p=88     ''' Returns a list of primes &lt;= N using wheel criterion 2*3*5 = 30  Copyright 2009 by zerovolt.com This code is free for non-commercial purposes in which case you can just leave this comment as a credit for my work. If you need this code for commercial purposes please contact me by sending an email to: info [at] zerovolt [dot] com.'''     __smallp = ( 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59     61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139     149 151 157 163 167 173 179 181 191 193 197 199 211 223 227     229 233 239 241 251 257 263 269 271 277 281 283 293 307 311     313 317 331 337 347 349 353 359 367 373 379 383 389 397 401     409 419 421 431 433 439 443 449 457 461 463 467 479 487 491     499 503 509 521 523 541 547 557 563 569 571 577 587 593 599     601 607 613 617 619 631 641 643 647 653 659 661 673 677 683     691 701 709 719 727 733 739 743 751 757 761 769 773 787 797     809 811 821 823 827 829 839 853 857 859 863 877 881 883 887     907 911 919 929 937 941 947 953 967 971 977 983 991 997)      wheel = (2 3 5)     const = 30     if N &lt; 2:         return []     if N &lt;= const:         pos = 0         while __smallp[pos] &lt;= N:             pos += 1         return list(__smallp[:pos])     # make the offsets list     offsets = (7 11 13 17 19 23 29 1)     # prepare the list     p = [2 3 5]     dim = 2 + N // const     tk1  = [True] * dim     tk7  = [True] * dim     tk11 = [True] * dim     tk13 = [True] * dim     tk17 = [True] * dim     tk19 = [True] * dim     tk23 = [True] * dim     tk29 = [True] * dim     tk1[0] = False     # help dictionary d     # d[a  b] = c  ==&gt; if I want to find the smallest useful multiple of (30*pos)+a     # on tkc then I need the index given by the product of [(30*pos)+a][(30*pos)+b]     # in general. If b &lt; a I need [(30*pos)+a][(30*(pos+1))+b]     d = {}     for x in offsets:         for y in offsets:             res = (x*y) % const             if res in offsets:                 d[(x res)] = y     # another help dictionary: gives tkx calling tmptk[x]     tmptk = {1:tk1 7:tk7 11:tk11 13:tk13 17:tk17 19:tk19 23:tk23 29:tk29}     pos prime lastadded stop = 0 0 0 int(ceil(sqrt(N)))     # inner functions definition     def del_mult(tk start step):         for k in xrange(start len(tk) step):             tk[k] = False     # end of inner functions definition     cpos = const * pos     while prime &lt; stop:         # 30k + 7         if tk7[pos]:             prime = cpos + 7             p.append(prime)             lastadded = 7             for off in offsets:                 tmp = d[(7 off)]                 start = (pos + prime) if off == 7 else (prime * (const * (pos + 1 if tmp &lt; 7 else 0) + tmp) )//const                 del_mult(tmptk[off] start prime)         # 30k + 11         if tk11[pos]:             prime = cpos + 11             p.append(prime)             lastadded = 11             for off in offsets:                 tmp = d[(11 off)]                 start = (pos + prime) if off == 11 else (prime * (const * (pos + 1 if tmp &lt; 11 else 0) + tmp) )//const                 del_mult(tmptk[off] start prime)         # 30k + 13         if tk13[pos]:             prime = cpos + 13             p.append(prime)             lastadded = 13             for off in offsets:                 tmp = d[(13 off)]                 start = (pos + prime) if off == 13 else (prime * (const * (pos + 1 if tmp &lt; 13 else 0) + tmp) )//const                 del_mult(tmptk[off] start prime)         # 30k + 17         if tk17[pos]:             prime = cpos + 17             p.append(prime)             lastadded = 17             for off in offsets:                 tmp = d[(17 off)]                 start = (pos + prime) if off == 17 else (prime * (const * (pos + 1 if tmp &lt; 17 else 0) + tmp) )//const                 del_mult(tmptk[off] start prime)         # 30k + 19         if tk19[pos]:             prime = cpos + 19             p.append(prime)             lastadded = 19             for off in offsets:                 tmp = d[(19 off)]                 start = (pos + prime) if off == 19 else (prime * (const * (pos + 1 if tmp &lt; 19 else 0) + tmp) )//const                 del_mult(tmptk[off] start prime)         # 30k + 23         if tk23[pos]:             prime = cpos + 23             p.append(prime)             lastadded = 23             for off in offsets:                 tmp = d[(23 off)]                 start = (pos + prime) if off == 23 else (prime * (const * (pos + 1 if tmp &lt; 23 else 0) + tmp) )//const                 del_mult(tmptk[off] start prime)         # 30k + 29         if tk29[pos]:             prime = cpos + 29             p.append(prime)             lastadded = 29             for off in offsets:                 tmp = d[(29 off)]                 start = (pos + prime) if off == 29 else (prime * (const * (pos + 1 if tmp &lt; 29 else 0) + tmp) )//const                 del_mult(tmptk[off] start prime)         # now we go back to top tk1 so we need to increase pos by 1         pos += 1         cpos = const * pos         # 30k + 1         if tk1[pos]:             prime = cpos + 1             p.append(prime)             lastadded = 1             for off in offsets:                 tmp = d[(1 off)]                 start = (pos + prime) if off == 1 else (prime * (const * pos + tmp) )//const                 del_mult(tmptk[off] start prime)     # time to add remaining primes     # if lastadded == 1 remove last element and start adding them from tk1     # this way we don't need an "if" within the last while     if lastadded == 1:         p.pop()     # now complete for every other possible prime     while pos &lt; len(tk1):         cpos = const * pos         if tk1[pos]: p.append(cpos + 1)         if tk7[pos]: p.append(cpos + 7)         if tk11[pos]: p.append(cpos + 11)         if tk13[pos]: p.append(cpos + 13)         if tk17[pos]: p.append(cpos + 17)         if tk19[pos]: p.append(cpos + 19)         if tk23[pos]: p.append(cpos + 23)         if tk29[pos]: p.append(cpos + 29)         pos += 1     # remove exceeding if present     pos = len(p) - 1     while p[pos] &gt; N:         pos -= 1     if pos &lt; len(p) - 1:         del p[pos+1:]     # return p list     return p  def sieveOfEratosthenes(n):     """sieveOfEratosthenes(n): return the list of the primes &lt; n."""     # Code from: &lt;dickinsm@gmail.com&gt; Nov 30 2006     # http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d     if n &lt;= 2:         return []     sieve = range(3 n 2)     top = len(sieve)     for si in sieve:         if si:             bottom = (si*si - 3) // 2             if bottom &gt;= top:                 break             sieve[bottom::si] = [0] * -((bottom - top) // si)     return [2] + [el for el in sieve if el]  def sieveOfAtkin(end):     """sieveOfAtkin(end): return a list of all the prime numbers &lt;end     using the Sieve of Atkin."""     # Code by Steve Krenzel &lt;Sgk284@gmail.com&gt; improved     # Code: https://web.archive.org/web/20080324064651/http://krenzel.info/?p=83     # Info: http://en.wikipedia.org/wiki/Sieve_of_Atkin     assert end &gt; 0     lng = ((end-1) // 2)     sieve = [False] * (lng + 1)      x_max x2 xd = int(sqrt((end-1)/4.0)) 0 4     for xd in xrange(4 8*x_max + 2 8):         x2 += xd         y_max = int(sqrt(end-x2))         n n_diff = x2 + y_max*y_max (y_max &lt;&lt; 1) - 1         if not (n &amp; 1):             n -= n_diff             n_diff -= 2         for d in xrange((n_diff - 1) &lt;&lt; 1 -1 -8):             m = n % 12             if m == 1 or m == 5:                 m = n &gt;&gt; 1                 sieve[m] = not sieve[m]             n -= d      x_max x2 xd = int(sqrt((end-1) / 3.0)) 0 3     for xd in xrange(3 6 * x_max + 2 6):         x2 += xd         y_max = int(sqrt(end-x2))         n n_diff = x2 + y_max*y_max (y_max &lt;&lt; 1) - 1         if not(n &amp; 1):             n -= n_diff             n_diff -= 2         for d in xrange((n_diff - 1) &lt;&lt; 1 -1 -8):             if n % 12 == 7:                 m = n &gt;&gt; 1                 sieve[m] = not sieve[m]             n -= d      x_max y_min x2 xd = int((2 + sqrt(4-8*(1-end)))/4) -1 0 3     for x in xrange(1 x_max + 1):         x2 += xd         xd += 6         if x2 &gt;= end: y_min = (((int(ceil(sqrt(x2 - end))) - 1) &lt;&lt; 1) - 2) &lt;&lt; 1         n n_diff = ((x*x + x) &lt;&lt; 1) - 1 (((x-1) &lt;&lt; 1) - 2) &lt;&lt; 1         for d in xrange(n_diff y_min -8):             if n % 12 == 11:                 m = n &gt;&gt; 1                 sieve[m] = not sieve[m]             n += d      primes = [2 3]     if end &lt;= 3:         return primes[:max(0end-2)]      for n in xrange(5 &gt;&gt; 1 (int(sqrt(end))+1) &gt;&gt; 1):         if sieve[n]:             primes.append((n &lt;&lt; 1) + 1)             aux = (n &lt;&lt; 1) + 1             aux *= aux             for k in xrange(aux end 2 * aux):                 sieve[k &gt;&gt; 1] = False      s  = int(sqrt(end)) + 1     if s  % 2 == 0:         s += 1     primes.extend([i for i in xrange(s end 2) if sieve[i &gt;&gt; 1]])      return primes  def ambi_sieve_plain(n):     s = range(3 n 2)     for m in xrange(3 int(n**0.5)+1 2):          if s[(m-3)/2]:              for t in xrange((m*m-3)/2(n&gt;&gt;1)-1m):                 s[t]=0     return [2]+[t for t in s if t&gt;0]  def sundaram3(max_n):     # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279     numbers = range(3 max_n+1 2)     half = (max_n)//2     initial = 4      for step in xrange(3 max_n+1 2):         for i in xrange(initial half step):             numbers[i-1] = 0         initial += 2*(step+1)          if initial &gt; half:             return [2] + filter(None numbers)  ################################################################################ # Using Numpy: def ambi_sieve(n):     # http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html     s = np.arange(3 n 2)     for m in xrange(3 int(n ** 0.5)+1 2):          if s[(m-3)/2]:              s[(m*m-3)/2::m]=0     return np.r_[2 s[s&gt;0]]  def primesfrom3to(n):     # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188     """ Returns a array of primes p &lt; n """     assert n&gt;=2     sieve = np.ones(n/2 dtype=np.bool)     for i in xrange(3int(n**0.5)+12):         if sieve[i/2]:             sieve[i*i/2::i] = False     return np.r_[2 2*np.nonzero(sieve)[0][1::]+1]      def primesfrom2to(n):     # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188     """ Input n&gt;=6 Returns a array of primes 2 &lt;= p &lt; n """     sieve = np.ones(n/3 + (n%6==2) dtype=np.bool)     sieve[0] = False     for i in xrange(int(n**0.5)/3+1):         if sieve[i]:             k=3*i+1|1             sieve[      ((k*k)/3)      ::2*k] = False             sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k] = False     return np.r_[23((3*np.nonzero(sieve)[0]+1)|1)]  if __name__=='__main__':     import itertools     import sys      def test(f1f2num):         print('Testing {f1} and {f2} return same results'.format(             f1=f1.func_name             f2=f2.func_name))         if not all([a==b for ab in itertools.izip_longest(f1(num)f2(num))]):             sys.exit("Error: %s(%s) != %s(%s)"%(f1.func_namenumf2.func_namenum))      n=1000000     test(sieveOfAtkinsieveOfEratosthenesn)     test(sieveOfAtkinambi_sieven)     test(sieveOfAtkinambi_sieve_plainn)      test(sieveOfAtkinsundaram3n)     test(sieveOfAtkinsieve_wheel_30n)     test(sieveOfAtkinprimesfrom3ton)     test(sieveOfAtkinprimesfrom2ton)     test(sieveOfAtkinrwh_primesn)     test(sieveOfAtkinrwh_primes1n)              test(sieveOfAtkinrwh_primes2n)  
if break break return def some_function():     if condition_a:         # do something and return early         ...         return     ...     if condition_b:         # do something else and return early         ...         return     ...     return  if outer_condition:     ...     some_function()     ...  
Objects/unicodeobject.c unicode_hash tp_hash Objects/stringobject.c string_hash static long string_hash(PyStringObject *a) {     register Py_ssize_t len;     register unsigned char *p;     register long x;      if (a-&gt;ob_shash != -1)         return a-&gt;ob_shash;     len = Py_SIZE(a);     p = (unsigned char *) a-&gt;ob_sval;     x = *p &lt;&lt; 7;     while (--len &gt;= 0)         x = (1000003*x) ^ *p++;     x ^= Py_SIZE(a);     if (x == -1)         x = -2;     a-&gt;ob_shash = x;     return x; }  
from collections import Counter a = Counter(0121) b = Counter(011)  print a - b  # ignores items in b missing in a  # check every element in a is in b # a[key] returns 0 if key not in a instead of raising an exception assert all(a[key] &gt; b[key] for key in b)  try:    from collections import Counter except ImportError:     class Counter(dict):        ...  
enumerate for ki in enumerate(mylist):     #do something with index k     #do something with element i  for i item in enumerate(mylist):  i j k book 
class Unit:   """Very simple class to track a unit name and an associated count."""   def __init__(self name amount):    self.name = name    self.amount = amount  # Pre-existing lists of types and amounts.     list1 = ["Infantry" "Tanks" "Jets"] list2 = [ 10 20 30]  # Create a list of Unit objects and initialize using # pairs from the above lists.     units = [] for a b in zip(list1 list2):   units.append(Unit(a b))  
def players(request):     players_in_team_one = Player.objects.filter(Team__pk = 1)     return render_to_response('players.html' {'players': players_in_team_one})  players.html {% for player in players %}        &lt;tr&gt;&lt;td&gt;{{ player.Name }}&lt;/td&gt;&lt;td&gt; {{ player.Position }}&lt;/td&gt;&lt;/tr&gt; {% endfor %}  all_lowercase_names_with_underscores 
self.dialog = builder.get_object("config_dialog")  self.nameEntry = builder.get_object("name_entry")  
cdfs = defaultdict() for id1id2val in d:     prevtotal = cdfs[id1][-1][0]     newtotal = prevtotal + val     cdfs[id1].append( (newtotalid2) )  cdfs = { 701 : [ (0.21) (0.52) (1.03) ]           702 : [ (0.21) (0.52) ]          703 : [ (0.53) ] }  def func(id1):     max = cdfs[id1][-1][0]     rand = random.random()*max     for upperid2 in cdfs[id1]:         if upper&gt;rand:             return id2     return None  
&lt;br&gt; &lt;a&gt;...&lt;/a&gt; from BeautifulSoup import BeautifulSoup Tag  # ....  soup = BeautifulSoup(data) for a in soup.findAll('a'):     a.parent.insert(a.parent.index(a)+1 Tag(soup 'br'))  soup.findAll(tag = '&lt;/a&gt;') &lt;a&gt; &lt;p&gt; for a in soup.findAll('a'):     p = Tag(soup 'p') #create a P element     a.replaceWith(p)   #Put it where the A element is     p.insert(0 a)     #put the A element inside the P (between &lt;p&gt; and &lt;/p&gt;)  &lt;p&gt; &lt;/p&gt; 
if __name__ == &quot;__main__&quot;:     # add freeze support     processing.freeze_support()     a = QApplication(sys.argv)     QObject.connect(aSIGNAL(&quot;lastWindowClosed()&quot;)aSLOT(&quot;quit()&quot;))     w = MainWindow()     w.show()     a.exec_()  
function log(info) {   document.getElementById('pixel').src = '/tracker?'+info; }  &lt;img id='pixel' src='pixel.gif' style='display:none'/&gt;  log('clicked_Button_BuyStuff');  
bakeries = Bakery.objects.annotate(     hottest_cake_baked_at=Max('cake__baked_at') )  hottest_cakes = Cake.objects.filter(     baked_at__in=[b.hottest_cake_baked_at for b in bakeries] )  hottest_cake_ids = Bakery.objects.annotate(     hottest_cake_id=Max('cake__id') ).values_list('hottest_cak??e_id' flat=True)  hottest_cakes = Cake.objects.filter(id__in=hottest_cake_ids)  
    sum += a     print('sum' sum)     if sum &gt;= 4000000:         break      if a &gt; 4000000:         break     sum += a     print('sum' sum)  
class Item(models.Model):     name = models.CharField(max_length=500)     ...     tags = models.ManyToManyField(Category blank=True)  item = Item(name='test') item.save() tag = Category(name='foo') item.tags.add(tag)  item.tags.all()  
print "%.2f kg = %.2f lb = %.2f gal = %.2f l" % (var1 var2 var3 var4)  
mylist = [s.replace("\r" " ") for s in mylist]  
--enable-ipv6 socket.AF_INET6 
a_tag delete() def save(self *args **kwargs):     super(Item self).save(*args **kwargs)     for a_tag in self.tag.all():         a_tag.tag_item.clear()     cat = self.category     while cat is not None:         cat.tag_item.add(self)         cat = cat.parent  
href="..." el[name] a href for link in soup.findAll('a'):     if link['href'].startswith('/'):         link['href']= 'http://www.foobarinc.com'+link['href']  
http https print opener.open('http://check.torproject.org/').read()  
__get__ ReferenceProperty .key() get_value_for_datastore son.father.key() Son.father.get_value_for_datastore(son) 
get_value_for_datastore Property 
as_integer_ratio 
&gt;&gt;&gt; import re &gt;&gt;&gt; re.findall('"([^"]*)"' 'SetVariables "a" "b" "c" ') ['a' 'b' 'c']  
# Given the posts fetches all the data the template will need # with just 2 key-only loads from the datastore. posts = get_the_posts()  author_keys = [Post.author.get_value_for_datastore(x) for x in posts] authors = db.get(author_keys)  city_keys = [Author.city.get_value_for_datastore(x) for x in authors] cities = db.get(city_keys)  for post author city in zip(posts authors cities):   post.author = author   author.city = city  None 
  28  /**   29   * Portable PHP password hashing framework.   30   *   31   * @package phpass   32   * @version 0.1 / genuine   33   * @link http://www.openwall.com/phpass/   34   * @since 2.5   35   */  
html.escape &gt;&gt;&gt; string = """ Hello "XYZ" this 'is' a test &amp; so on """ &gt;&gt;&gt; import html &gt;&gt;&gt; html.escape(string) ' Hello &amp;quot;XYZ&amp;quot; this &amp;#x27;is&amp;#x27; a test &amp;amp; so on '  cgi escape() import cgi  s = cgi.escape( """&amp; &lt; &gt;""" )   # s = "&amp;amp; &amp;lt; &amp;gt;"  &amp; &lt; &gt; cgi.escape(string_to_escape quote=True) "  html_escape_table = {      "&amp;": "&amp;amp;"      '"': "&amp;quot;"      "'": "&amp;apos;"      "&gt;": "&amp;gt;"      "&lt;": "&amp;lt;"      }   def html_escape(text):      """Produce entities within text."""      return "".join(html_escape_table.get(cc) for c in text)  escape() xml.sax.saxutils unescape() from xml.sax.saxutils import escape unescape # escape() and unescape() takes care of &amp; &lt; and &gt;. html_escape_table = {     '"': "&amp;quot;"     "'": "&amp;apos;" } html_unescape_table = {v:k for k v in html_escape_table.items()}  def html_escape(text):     return escape(text html_escape_table)  def html_unescape(text):     return unescape(text html_unescape_table)  
number number x = list(range(r)) #timer is started here for iteration in xrange(1000000):     while x: x.pop(0) #timer is stopped here  x number==1 
' '.join(mystring.split())  
./manage.py shell --plain  
x = f(x) 
mylist.sort(key=lambda x: x.dict_properties['mykey'])  operator attrgetter itemgetter lambda def 
buffer str file.write 
time 12:00 11:00 datetime import datetime  def timediff(t1 t2):   td = datetime.date.today()   return datetime.datetime.combine(td t1) - datetime.datetime.combine(td t2)  
class LimitGenericSitemap(GenericSitemap):     limit = 2000  
reverse() reverse admin.autodiscover() 
class A:   def foo(self x = [] ):     x.append(1)     self.x = x  a = A() a.foo() print a.x # prints: [1] a.foo() print a.x # prints: [11]   # !!!! Consumer would expect this to be [1] y = [123] a.foo(y) print a.x # prints: [1 2 3 1] print y # prints: [1 2 3 1]  #  !!!! My list was modified  import copy class A:   def foo(self x = [] ):     x = copy.copy(x)     x.append(1)     self.x = x  a = A() a.foo() print a.x # prints: [1] a.foo() print a.x # prints: [1]   # !!! Much better =) y = [123] a.foo(y) print a.x # prints: [1 2 3 1] print y # prints: [1 2 3]  #  !!!! My list is how I made it  
Dog('big').play(0) toy n play 'None' Toy.play None print count homework exercise 
sys.path $ virtualenv $HOME/my_python $ $HOME/my_python/bin/easy_install numpy  #!/home/myuser/my_python/bin/python  import numpy  # script here  import sys sys.path.insert(0 '/home/myuser/my_python/lib/python2.5/site-packages')  import numpy  
choices 
@register.filter def a():    pass  def a():     pass a = register.filter(a)  register.filter if callable(name) 
&lt;input type="submit" value="Gogogo!" /&gt;  
counter Value from multiprocessing import Pool Value from time import sleep  counter = None  def init(args):     ''' store the counter for later use '''     global counter     counter = args  def analyze_data(args):     ''' increment the global counter do something with the input '''     global counter     # += operation is not atomic so we need to get a lock:     with counter.get_lock():         counter.value += 1     print counter.value     return args * 10  if __name__ == '__main__':     #inputs = os.listdir(some_directory)      #     # initialize a cross-process counter and the input lists     #     counter = Value('i' 0)     inputs = [1 2 3 4]      #     # create the pool of workers ensuring each one receives the counter      # as it starts.      #     p = Pool(initializer = init initargs = (counter ))     i = p.map_async(analyze_data inputs chunksize = 1)     i.wait()     print i.get()  
import subprocess import sys  command = 'python -c \'print raw_input("Please make a selection: ")\'' sp = subprocess.Popen(command shell = True stdin = sys.stdin) sp.wait()  
#!/usr/bin/env python  import glob import os  for i in glob.glob(u'*.txt'):   os.unlink (i)  map #!/usr/bin/env python  import glob import os  map(os.unlink glob.glob(u'*.txt'))  
&gt;&gt;&gt; import string &gt;&gt;&gt; string.ascii_lowercase 'abcdefghijklmnopqrstuvwxyz' &gt;&gt;&gt; L = list(string.ascii_lowercase) &gt;&gt;&gt; print L ['a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' ... &gt;&gt;&gt; help(string)  
is id(string.ascii_lowercase) == id(str)  str False isinstance(string.ascii_lowercase basestring)  str unicode 
'r' \ r'...' ur'...' r'...' r'''...''' r"..." r"""...""" u'...' '...' &gt;&gt;&gt; sys.getsizeof('ciao') 28 &gt;&gt;&gt; sys.getsizeof(u'ciao') 34  
[QT Frontend] [CLIs]             &lt;=======&gt; [Dispatcher] &lt;=&gt; [API] &lt;==&gt; [Core/Model] [SOAP/XMPRPC/Json] [API Test Suite]  
INSTALLED_APPS INSTALLED_APPS = ( #    'django.contrib.auth'      'django.contrib.contenttypes' #    'django.contrib.sessions'      'django.contrib.sites'      'project_name.app_name' )  
def myfunc(*args):     for argument in args:         print "myfunc was given" argument  *args args *args def my_other_func(name *args):  name args args 
.translate import string identity = string.maketrans('' '')  def remove_whitespace(value):   return value.translate(identity string.whitespace)    return value.translate(None string.whitespace)  .translate ord None dict .fromkeys nospace = dict.fromkeys(ord(c) for c in string.whitespace)  def unicode_remove_whitespace(value):   return value.translate(nospace)  unicode_nospace 
'RGB' 
class CaseInsensitiveDict(dict):     def __setitem__(self key value):         super(CaseInsensitiveDict self).__setitem__(key.lower() value)      def __getitem__(self key):         return super(CaseInsensitiveDict self).__getitem__(key.lower())  
#!/usr/bin/python  import timereadlinethreadsys  def noisy_thread():     while True:         time.sleep(3)         sys.stdout.write('\r'+' '*(len(readline.get_line_buffer())+2)+'\r')         print 'Interrupting text!'         sys.stdout.write('&gt; ' + readline.get_line_buffer())         sys.stdout.flush()  thread.start_new_thread(noisy_thread ()) while True:     s = raw_input('&gt; ')  $ ./threads_input.py Interrupting text! Interrupting text! Interrupting text! &gt; WELL PRINCE Genoa and Lucca are now no more than private estates of the Bo Interrupting text! &gt; WELL PRINCE Genoa and Lucca are now no more than private estates of the Bo naparte family. No I warn you that if you do not tell me we are at war  #!/usr/bin/python  import timereadlinethread import sysstructfcntltermios  def blank_current_readline():     # Next line said to be reasonably portable for various Unixes     (rowscols) = struct.unpack('hh' fcntl.ioctl(sys.stdout termios.TIOCGWINSZ'1234'))      text_len = len(readline.get_line_buffer())+2      # ANSI escape sequences (All VT100 except ESC[0G)     sys.stdout.write('\x1b[2K')                         # Clear current line     sys.stdout.write('\x1b[1A\x1b[2K'*(text_len/cols))  # Move cursor up and clear line     sys.stdout.write('\x1b[0G')                         # Move to start of line   def noisy_thread():     while True:         time.sleep(3)         blank_current_readline()         print 'Interrupting text!'         sys.stdout.write('&gt; ' + readline.get_line_buffer())         sys.stdout.flush()          # Needed or text doesn't show until a key is pressed   if __name__ == '__main__':     thread.start_new_thread(noisy_thread ())     while True:         s = raw_input('&gt; ')  $ ./threads_input2.py Interrupting text! Interrupting text! Interrupting text! Interrupting text! &gt; WELL PRINCE Genoa and Lucca are now no more than private estates of the Bo naparte family. No I warn you that if you do not tell me we are at war  
for div in range(2candidate//21):     if candidate % div == 0:         prime = False         print candidate "is not prime - divisible by" div         return next_prime(candidate)  
  --with-xunit          Enable plugin Xunit: This plugin provides test results                         in the standard XUnit XML format. [NOSE_WITH_XUNIT]   --xunit-file=FILE     Path to xml file to store the xunit report in. Default                         is nosetests.xml in the working directory                         [NOSE_XUNIT_FILE]  
def search(doc):     print "Visiting" doc     f = open(doc 'r')     for line in f:         if line.strip():             search(line.strip())  
&gt;&gt;&gt; print '4-12????????????'.decode('gb2312').encode('unicode-escape')  # coding: gb2312 print u'4-12????????????'.encode('unicode-escape')  
while True try while for i in range(0100):     while True:         try:             # do stuff         except SomeSpecificException:             continue         break  
import csv  with open(... 'wb') as myfile:     wr = csv.writer(myfile quoting=csv.QUOTE_ALL)     wr.writerow(mylist)  wb w with open(... 'w' newline='') as myfile:      wr = csv.writer(myfile quoting=csv.QUOTE_ALL)      wr.writerow(mylist)  
httplib https:// connection RemotingService key_file cert_file connection connect Read 41 bytes for the response 
from hashlib import md5  
from lxml import html etree from StringIO import StringIO  html_string = '''&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"    "http://www.w3.org/TR/html4/loose.dtd"&gt;  &lt;html lang="en"&gt; &lt;head/&gt; &lt;body&gt;     &lt;table border="1"&gt;       &lt;tbody&gt;         &lt;tr&gt;           &lt;td&gt;&lt;a href="http://stackoverflow.com/foobar" title="Foobar"&gt;A link&lt;/a&gt;&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;           &lt;td&gt;&lt;a href="http://stackoverflow.com/baz" title="Baz"&gt;Another link&lt;/a&gt;&lt;/td&gt;         &lt;/tr&gt;       &lt;/tbody&gt;     &lt;/table&gt; &lt;/body&gt; &lt;/html&gt;'''  tree = etree.parse(StringIO(html_string)) print tree.xpath('/html/body//tbody/tr/td/a[@title]/@href')  &gt;&gt;&gt; ['http://stackoverflow.com/foobar' 'http://stackoverflow.com/baz']  
class PrintObject(object):     def __repr__(self):         return 'repr'      def __str__(self):         return 'str'      def __unicode__(self):         return 'unicode'  Python 2.6.4 (r264:75821M Oct 27 2009 19:48:32) [GCC 4.0.1 (Apple Inc. build 5493)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; from printobject import PrintObject &gt;&gt;&gt; printObj = PrintObject() &gt;&gt;&gt; printObj &gt;&gt;&gt; repr(printObj) 'repr' &gt;&gt;&gt; str(printObj) 'str' &gt;&gt;&gt; unicode(printObj) u'unicode'  &gt;&gt;&gt; printObj repr  &gt;&gt;&gt; print(printObj) str  &gt;&gt;&gt; print(u'%s' % printObj) unicode  
shell&gt; cd /usr/local/mysql/data/ shell&gt; ls -ld * drwx------    17 geert   admin         578 Oct  1 19:33 someabstract  
PL.loglog 
try:     result = client.service.AbsoluteMove(token dest speed) except suds.WebFault as detail:     ...  
dir for entry in pe.DIRECTORY_ENTRY_IMPORT:   print entry.dll   for imp in entry.imports:     print '\t' hex(imp.address) imp.name Output comdlg32.dll         0x10012A0L PageSetupDlgW         0x10012A4L FindTextW         0x10012A8L PrintDlgExW [snip] SHELL32.dll         0x1001154L DragFinish         0x1001158L DragQueryFileW  imp.name &gt;&gt;&gt; ctypes.windll.comdlg32.PageSetupDlgW &lt;_FuncPtr object at 0x00A97210&gt; &gt;&gt;&gt; ctypes.windll.comdlg32.FindTextW &lt;_FuncPtr object at 0x00A97288&gt; ...  
if error:     start_response("404 Not Found" [('Content-type' 'text/plain')])     return ['Page not found']  
DefaultInitEnv PYTHONPATH "/opt/something/lib/python2.4/site-packages/:/usr/lib/python2.4/"  
&gt;&gt;&gt; import time &gt;&gt;&gt; time.ctime(1263538277) 'Fri Jan 15 04:51:17 2010'  
project.settings.SETTING  project.settings settings.SETTING 
from django.core.cache import cache  def cached_user_passes_test(test_func login_url=None redirect_field_name=REDIRECT_FIELD_NAME):     if not login_url:         from django.conf import settings         login_url = settings.LOGIN_URL      def decorator(view_func):         def _wrapped_view(request *args **kwargs):             key = str(test_func) + str(request.user)             cached_test_result = cache.get(key)             if cached_test_result != None:                 test_result = cached_test_result             else:                 test_result = test_func(request.user)                 cache.set(key test_result 60)                     if test_result:                 return view_func(request *args **kwargs)             path = urlquote(request.get_full_path())             tup = login_url redirect_field_name path             return HttpResponseRedirect('%s?%s=%s' % tup)         return wraps(view_func)(_wrapped_view)     return auto_adapt_to_methods(decorator)  
append foo.py --my_list=1 --my_list=2 ... foo.py --my_list='12345' x.split('') getopt optparse --my_list split() '1' '2' 
request_path extra_var request_path 404.html 404.html request_path handler404 handler404 = 'myproject.myapp.views.handler404'  
pip install https://pypi.python.org/packages/source/r/requests/requests-2.3.0.tar.gz  wget https://pypi.python.org/packages/source/r/requests/requests-2.3.0.tar.gz pip install requests-2.3.0.tar.gz  tar -zxvf requests-2.3.0.tar.gz cd requests-2.3.0 pip install .  requests-2.3.0 pip install -e .  
python3.1 foo.py --test make test pre-commit || echo $? /dev/null $ python3.1 test.py 2&gt;/dev/null || echo $? 1 $ make test 2&gt;/dev/null || echo $? python3.1 test.py 2 $ .git/hooks/pre-commit 2&gt;/dev/null || echo $? python3.1 test.py 1  test.py import unittest  class TestFailure(unittest.TestCase):     def testFail(self):         assert(False)  if __name__ == '__main__':     unittest.main()  Makefile test:     python3.1 test.py  .git/hooks/pre-commit #!/bin/sh make test || exit 1  || exit 1 make test pre-commit 0 
html.unescape() import html print(html.unescape('&amp;pound;682m'))  html.parser.HTMLParser.unescape HTMLParser.unescape() HTMLParser html.parser &gt;&gt;&gt; try: ...     # Python 2.6-2.7  ...     from HTMLParser import HTMLParser ... except ImportError: ...     # Python 3 ...     from html.parser import HTMLParser ...  &gt;&gt;&gt; h = HTMLParser() &gt;&gt;&gt; print(h.unescape('&amp;pound;682m')) £682m  six &gt;&gt;&gt; from six.moves.html_parser import HTMLParser &gt;&gt;&gt; h = HTMLParser() &gt;&gt;&gt; print(h.unescape('&amp;pound;682m')) £682m  
install_requires = "useful.package==1.9dev-r1234"  dependency_links dependency_links = ["svn://example.org/useful.package/trunk@1234#egg=useful.package-1.9dev-r1234"]  #egg= dependency_links install_requires 
Value = 1800 results results_dict = {} for line in results.splitlines():     try:         name val = line.split(' = ')     except ValueError:         continue     results_dict[name] = val  int(val) float(val) if " = " in line eval(results) 
&gt;&gt;&gt; def is_func(instance func):     test = getattr(instance func None)     if test and hasattr(test '__call__'):         return True  &gt;&gt;&gt; is_func('' 'len') &gt;&gt;&gt; is_func({} 'fromkeys') True  inspect &gt;&gt;&gt; import inspect &gt;&gt;&gt; test = getattr(cc 'func' None) &gt;&gt;&gt; inspect.ismethod(test) True  
*args **kwargs *a **kw *a **kw 
platform sys lipo 
ulimit -n 1024 ~/.profile ~/.bash_profile 
datetime book.creationTime.tzinfo = EST  book.creationTime = book.creationTime.replace(tzinfo=EST)  
from sqlalchemy import * from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm.collections import attribute_mapped_collection from sqlalchemy.ext.associationproxy import association_proxy from sqlalchemy.orm import relation sessionmaker  metadata  = MetaData() Base = declarative_base(metadata=metadata name='Base')  class Item(Base):      __tablename__ = 'Item'     UniqueId = Column(Integer ForeignKey('ItemSet.UniqueId')                       primary_key=True)     ItemSet = relation('ItemSet')     ItemName = Column(String(10) primary_key=True)     ItemValue = Column(Text) # Use PickleType?  def _create_item(ItemName ItemValue):     return Item(ItemName=ItemName ItemValue=ItemValue)  class ItemSet(Base):      __tablename__ = 'ItemSet'     UniqueId = Column(Integer primary_key=True)     _items = relation(Item                       collection_class=attribute_mapped_collection('ItemName'))     items = association_proxy('_items' 'ItemValue' creator=_create_item)  engine = create_engine('sqlite://' echo=True) metadata.create_all(engine)  session = sessionmaker(bind=engine)() data = {"UniqueId": 1 "a": 23 "b": "Hello" "c": "World"} s = ItemSet(UniqueId=data.pop("UniqueId")) s.items = data session.add(s) session.commit()  
.replace None aware = naive.replace(tzinfo=utc)  print aware.astimezone(Pacific).strftime('%a %b %d %X %z')  
class EstDateTimeProperty(db.DateTimeProperty):   def make_value_from_datastore(self value):     naive_utc = db.DateTimeProperty(self value)     aware_utc = naive_utc.replace(tzinfo=UTC)     return aware_utc.astimezone(EST)  __init__ 
glTranslatef(point[0]point[1]0)  glRotatef(rotation001)  
 radio = QtGui.QRadioButton(child.widget())      qvbl = self.qgbSomeSelectionGroup.layout()     for i in range(0 qvbl.count()):         widget = qvbl.itemAt(i).widget()          if (widget!=0) and (type(widget) is QtGui.QRadioButton):             if widget.isChecked():                 print "radio button num " + str(i) + " is checked"  
"Báz Bar" ['b' 'ba' 'bar' 'baz'] 
ParseFile while True:   data = f.read(BUFSIZE)   if not data:     p.Parse('' True)     break   p.Parse(data False)   time.sleep(0.0)  time.sleep(0.0) Parse Queue q q.put(name) q.get() 
(?&lt;name&gt;subexp) \k&lt;name&gt; 
unittest EditProfileTestCase LoginTestCase unittest.TestCase LoginTestCase EditProfileTestCase LoginTestCase 
[     ('userName' "4-12\u4e2a\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf")     ('userNameMin' "\u4e0d\u80fd\u5c0f\u4e8e4\u4e2a\u5b57")     .... ]  s s.items() for ij in s:         print ij.decode('unicode-escape')  
if input_quit == 'Quit':         input_quit = gui.ynbox(         msg = 'Are you sure you want to quit?'  if input_event_1 == 'Quit':         input_quit = gui.ynbox(         msg = 'Are you sure you want to quit?'  ynbox     elif input_event_1 == 'Quit':         input_quit = gui.ynbox(             msg = 'Are you sure you want to quit?'             title = 'Confirm quit'             choices = ('Quit' 'Cancel'))         if input_quit == 1:             sys.exit(1)  
input() raw_input() 
locale.setlocale() 
urllib2.urlopen() &gt;&gt;&gt; import urllib2 &gt;&gt;&gt; from xml.dom.minidom import parse parseString &gt;&gt;&gt; u1=urllib2.urlopen('http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml') &gt;&gt;&gt; dom=parse(u1) &gt;&gt;&gt; print dom &lt;xml.dom.minidom.Document instance at 0x017D73A0&gt; &gt;&gt;&gt; dom.childNodes [&lt;DOM Element: gesmes:Envelope at 0x17d7c88&gt;] &gt;&gt;&gt; dom.childNodes[0].childNodes [&lt;DOM Text node "u'\n\t'"&gt; &lt;DOM Element: gesmes:subject at 0x1041aa8&gt;  &lt;DOM Text node "u'\n\t'"&gt; &lt;DOM Element: gesmes:Sender at 0xff8260&gt;  &lt;DOM Text node "u'\n\t'"&gt; &lt;DOM Element: Cube at 0x17d3dc8&gt; &lt;DOM Text node "u'\n'"&gt;] &gt;&gt;&gt;   Cube &gt;&gt;&gt; [elem.attributes['currency'].value for elem in      dom.getElementsByTagName('Cube') if elem.hasAttribute('currency')] [u'USD' u'JPY' u'BGN' u'CZK' u'DKK' u'EEK' u'GBP' u'HUF' u'LTL' u'LVL'  u'PLN' u'RON' u'SEK' u'CHF' u'NOK' u'HRK' u'RUB' u'TRY' u'AUD' u'BRL'  u'CAD' u'CNY' u'HKD' u'IDR' u'INR' u'KRW' u'MXN' u'MYR' u'NZD' u'PHP'  u'SGD' u'THB' u'ZAR'] &gt;&gt;&gt;   
print b().cool  attrs __new__ . 
method = getattr(myPotatoHead 'play_' + toy) method()  
&lt;script type="text/javascript" src="{{ MEDIA_URL }}jquery-1.4.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="{{ MEDIA_URL }}reg.js"&gt;&lt;/script&gt;  "django.core.context_processors.media" TEMPLATE_CONTEXT_PROCESSORS 
dict((category list(l)) for category l       in itertools.groupby(l operator.itemgetter(3))  itertools.groupby list(l) dict(itertools.groupby(l operator.itemgetter(3))) 
def json_view(request):   username=request.GET.get('username')   result='successName'   if username:     try:       user=User.objects.get(username=username)       result='existName'     except User.DoesNotExist:       pass     return HttpResponse(simplejson.dumps({'result': result}))  
$ ./manage.py show_urls  
values values = {     'error_message': 'there is an error'     ...  
conn = sqlite3.connect('/path/to/your/sqlite_file.db') c = conn.cursor() for item in my_list:   c.execute('insert into tablename values (???)' item)  
def my_view(request)   referer = request.META.get('HTTP_REFERER' '')   if referer == 'absolute/path/to/somepage.html':     # do something     ...   else:     # do something else     ...  reverse() 
Item Item save() Item master None 
from twisted.words.xish import domish  class ElementParser(object):     "callable class to parse XML string into Element"      def __call__(self s):         self.result = None         def onStart(el):             self.result = el         def onEnd():             pass         def onElement(el):             self.result.addChild(el)          parser = domish.elementStream()         parser.DocumentStartEvent = onStart         parser.ElementEvent = onElement         parser.DocumentEndEvent = onEnd         tmp = domish.Element(("" "s"))         tmp.addRawXml(s)         parser.parse(tmp.toXml())         return self.result.firstChildElement()   
s = '/opt/ad/bin$ ./ptzflip\r\nValue = 1800\r\nMin = 0\r\nMax = 3600\r\nStep = 1\r\n' d = {} for pair in [val.split('=') for val in s.split('\r\n')[1:-1]]:     d[pair[0]] = int(pair[1])  
/bin/sh/ &lt;&lt;EOF EOF /Library/Frameworks/Python.framework/Versions/Current/bin/python &lt;&lt;EOF from appscript import * Numbers = app('Numbers') EOF  /Library/Frameworks/Python.framework/Versions/Current/bin/python &lt;&lt;EOF EOF appscript {query} /Library/Frameworks/Python.framework/Versions/Current/bin/python script.py {query}  
from django.utils import simplejson from django.core import serializers from django.db.models.query import QuerySet  class HandleQuerySets(simplejson.JSONEncoder):      """ simplejson.JSONEncoder extension: handle querysets """      def default(self obj):          if isinstance(obj QuerySet):              return serializers.serialize("python" obj ensure_ascii=False)          return simplejson.JSONEncoder.default(self obj)  serializers.serialize("json" [...]) python default 
@makebold def makeitalic(fn):     def wrapped():         return "&lt;i&gt;" + fn() + "&lt;/i&gt;"     return wrapped  makeitalic wrapped def makeitalic(fn):     @makebold     def wrapped():         return "&lt;i&gt;" + fn() + "&lt;/i&gt;"     return wrapped  makeitalic makebold wrapped 
a.rstrip().split('\n')  filter(None a.split('\n'))  
None class User:    username = None    password = None  class User(object):     def __init__(self):         self.username = None         self.password = None  None def f():     pass g = f() # g now has the value of None  
/blog/ myapp/urls.py /job/ myapp/job_urls.py urls urlpatterns = patterns("myproject.myapp.views"     (r"^jobs/(?P&lt;id&gt;\d+)/edit/$"    "myproject.myapp.views.edit")     (r"^jobs/(?P&lt;id&gt;\d+)/delete/$"  "myproject.myapp.views.delete")     (r"^jobs/(?P&lt;id&gt;\d+)/update/$"  "myproject.myapp.views.update")     (r"^jobs/insert/$"              "myproject.myapp.views.insert") )  urlpatterns += patterns(""     (r"^blog/(?P&lt;object_id&gt;\d+)/$"  "django.views.generic.list_detail.object_detail" info_dict "NOIDEA-detail")     (r"^blog/$"                    "django.views.generic.list_detail.object_list"   info_dict "NOIDEA-community") )  urlpatterns = patterns(""     (r"" include("myapp.urls")) )  blog/(?P&lt;post_id&gt;\d+)/edit/$ 
a = 'foo' b = 'bar'  text = 'find a replacement for me [[:a:]] and [[:b:]]'  desired_output = 'find a replacement for me foo and bar'  def repl(m):     contents = m.group(1)     if contents == 'a':         return a     if contents == 'b':         return b  print re.sub('\[\[:(.+?):\]\]' repl text)  
for n1 n2 in izip(num reversed(num)):     print n1 '\t' n2  
app = authkit.authenticate.middleware(app app_conf)  app = PylonsApp()  
__init__ def __init__(self *args **kwargs):     self.userN = kwargs.pop('userN' None)     super(SearchFormself).__init__(*args**kwargs)     ...etc...  
itertools itertools 
org.mpris.Totem /Player org.freedesktop.MediaPlayer PositionGet() totem.props.current_time import dbus  T_SERVICE_NAME = "org.mpris.Totem" T_OBJECT_PATH = "/Player" T_INTERFACE = "org.freedesktop.MediaPlayer"  session_bus= dbus.SessionBus()  totem = session_bus.get_object(T_SERVICE_NAME T_OBJECT_PATH) totem_mediaplayer = dbus.Interface(totem dbus_interface=T_INTERFACE)  print totem_mediaplayer.PositionGet()  org.gnome.Totem 
sys.modules['mod_x'] mod_x.x getattr(sys.modules[a] b) a b 'mod_x' 'x' 
 trac_url = 'http://mytratsite/'  from docutils import nodes utils from docutils.parsers.rst import roles import urllib  def trac_role(role rawtext text lineno inliner options={} content=[]):   ref = trac_url + '/intertrac/' + urllib.quote(text safe='')   node = nodes.reference(rawtext utils.unescape(text) refuri=ref **options)   return [node][]  roles.register_canonical_role('trac' trac_role)  :trac:`#123` :trac:`r1023` 
DictReader &gt;&gt;&gt; help(csv.DictReader) fieldnames 
if not self.multiline and value and value.find('\n') != -1:   raise BadValueError('Property %s is not multi-line' % self.name)  \n value logging.info('value is: %r' value)  put %r repr \n 
izip(xrange(n - r + 1 n+1) xrange(1 r+1)) from itertools import izip  reduce(lambda x y: x * y[0] / y[1] izip(xrange(n - r + 1 n+1) xrange(1 r+1)) 1)  
book = models.Book(title='Foo') chapter = models.Chapter(parent=book title='dummy') form = forms.ChapterForm(request.POST request.FILES instance=chapter)  chapter instance if form.is_valid():     chapter = form.save()     # Now chapter.parent() == book  
def convert_string(s):     try:         u = s.decode("utf-8")     except UnicodeDecodeError:         u = s.decode("cp1252")     return u  conn.text_factory = convert_string  
sql='SELECT x FROM myTable WHERE x LIKE %s' args=[beginningOfString+'%'] cursor.execute(sqlargs)  
&gt;&gt;&gt; myhtml = """ &lt;tag&gt;I need this stuff&lt;/tag&gt; ... blah blah ... &lt;tag&gt;I need this stuff too ... &lt;/tag&gt; ... blah blah """ &gt;&gt;&gt; for item in myhtml.split("&lt;/tag&gt;"): ...   if "&lt;tag&gt;" in item: ...       print item [ item.find("&lt;tag&gt;")+len("&lt;tag&gt;") : ] ... I need this stuff I need this stuff too  
def add_to(amount):     def f(x):         return x + amount     return f  if __name__ == "__main__":     add_2 = add_to(2)     add_3 = add_to(3)      print add_2(42)     print add_3(42)  def create_toy(self fun_0_3 fun_3_4 fun_4_7 fun_7_9 fun_9_plus):     def toy(self):         self.happiness_num = float(self.happiness)         if float(self.age) &lt;= 3.0:             self.happiness_num = self.happiness_num + fun_0_3         elif float(self.age) &gt; 3.0 and float(self.age) &lt; 4.0:             self.happiness_num = self.happiness_num + fun_3_4         elif float(self.age) &gt; 4.0 and float(self.age) &lt; 7.0:             self.happiness_num = self.happiness_num + fun_4_7         elif float(self.age) &gt; 7.0 and float(self.age) &lt; 9.0:             self.happiness_num = self.happiness_num + fun_7_9         elif float(self.age) &gt; 9.0:             self.happiness_num = self.happiness_num + fun_9_plus             gui.msgbox(                 msg = 'This toy is Only providing minimal fun to your potato head. Either get a new one or play with another!'                 title = 'WARNING!'                 ok_button = 'Understood')         self.happiness = str(self.happiness_num)     return toy  #somewhere else play_Softball = create_toy(0.3 0.7 1.0 0.5 0.02)  
def main():     usage = "Usage: %prog [options] FILE"     description = "Read data from FILE."     parser = OptionParser(usage description=description)      (options args) = parser.parse_args()     if len(args) != 1:         parser.error("incorrect number of arguments")      file = args[0]     checkall(file)  
import thread import threading  class Operation(threading._Timer):     def __init__(self *args **kwargs):         threading._Timer.__init__(self *args **kwargs)         self.setDaemon(True)      def run(self):         while True:             self.finished.clear()             self.finished.wait(self.interval)             if not self.finished.isSet():                 self.function(*self.args **self.kwargs)             else:                 return             self.finished.set()  class Manager(object):      ops = []      def add_operation(self operation interval args=[] kwargs={}):         op = Operation(interval operation args kwargs)         self.ops.append(op)         thread.start_new_thread(op.run ())      def stop(self):         for op in self.ops:             op.cancel()         self._event.set()  if __name__ == '__main__':     # Print "Hello World!" every 5 seconds      import time      def hello():         print "Hello World!"      timer = Manager()     timer.add_operation(hello 5)      while True:         time.sleep(.1)  
import urllib2 req = urllib2.Request('http://www.example.com/') req.add_header('Referer' 'http://www.python.org/') r = urllib2.urlopen(req)  
x = scipy.array([10 11 12 13]) y = scipy.array([0 2]) x[[0 2]] x[y] new_data = scipy.delete(data x axis=0) (data&gt;=0).sum(axis=1) axis delete 
sqldiiff sqlall yourapp 
def merged(dictoflists):   result = dict()   reversed = dict()   for k l in dictoflists.iteritems():     intersecting = set(reversed.get(w) for w in l) - set([None])     if intersecting:       pickone = intersecting.pop()       into = result[pickone]     else:       pickone = k       into = result[k] = set()     for ok in intersecting:       into.update(result.pop(ok))     into.update(l)     for w in into:       reversed[w] = pickone   return dict((k sorted(l)) for k l in result.iteritems())  set 
class Article(model.Model):     ...     author = models.ForeignKey(Author related_name='articles')  article.author_set  article.authors related_name 
from django.test.client import Client c = Client() response = c.get('/json_view/' {'tag': 'email' 'email': '...'})  
functools.wraps(wrapped[ assigned][ updated])   partial(update_wrapper wrapped=wrapped assigned=assigned updated=updated) &gt;&gt;&gt; from functools import wraps &gt;&gt;&gt; def my_decorator(f): ...     @wraps(f) ...     def wrapper(*args **kwds): ...         print 'Calling decorated function' ...         return f(*args **kwds) ...     return wrapper ... &gt;&gt;&gt; @my_decorator ... def example(): ...     """Docstring""" ...     print 'Called example function' ... &gt;&gt;&gt; example() Calling decorated function Called example function &gt;&gt;&gt; example.__name__ 'example' &gt;&gt;&gt; example.__doc__ 'Docstring'  
urlfetch urlfetch urlfetch 
def delayed_loader(*args **kwargs):     """     Replace each real_* function with the corresponding function from either     trans_real or trans_null (e.g. real_gettext is replaced with     trans_real.gettext or trans_null.gettext). This function is run once the     first time any i18n method is called. It replaces all the i18n methods at     once at that time.     """     #...  
&gt;&gt;&gt; a = ['stste' 'setset' 'serthjsetj'] &gt;&gt;&gt; b = json.dumps(a) &gt;&gt;&gt; b '["stste" "setset" "serthjsetj"]' &gt;&gt;&gt; json.loads(b) [u'stste' u'setset' u'serthjsetj']  
import operator sortedlist = sorted(reader key=operator.itemgetter(3) reverse=True)  sortedlist = sorted(reader key=lambda row: row[3] reverse=True)  
subprocess.Popen() subprocess.call() open(fifo) os.popen('cat ' + fifo) p = Popen(['patch' '--input' fpath] stdout=PIPE) 
[a b] = [1 2]  
http://server/getresults/uniqueid/ 
finfout=os.popen4("wget --version | grep Wget") print fout.read()  subprocess import subprocess cmd = subprocess.Popen('wget --version' shell=True stdout=subprocess.PIPE) for line in cmd.stdout:     if "Wget" in line:         print line  
class SuperState( object ):     def someStatefulMethod( self ):         raise NotImplementedError()     def transitionRule( self input ):         raise NotImplementedError()  class SomeState( SuperState ):     def someStatefulMethod( self ):         actually do something()     def transitionRule( self input ):         return NextState()  eval class State( object ):     def transitionRule( self input ):         return eval(self.map[input])()  class S1( State ):      map = { "input": "S2" "other": "S3" }     pass # Overrides to state-specific methods  class S2( State ):     map = { "foo": "S1" "bar": "S2" }  class S3( State ):     map = { "quux": "S1" }  class State( object ):     def transitionRule( self input ):         next_states = [ s for fs in self.map if f(input)  ]         assert len(next_states) &gt;= 1 "faulty transition rule"         return eval(next_states[0])()  class S1( State ):     map = [ (lambda x: x == "input" "S2") (lambda x: x == "other" "S3" ) ]  class S2( State ):     map = [ (lambda x: "bar" &lt;= x &lt;= "foo" "S3") (lambda x: True "S1") ]  
warnings warnings.filterwarnings('error' category=MySQLdb.Warning) MySQLdb.Warning warnings 'ignore' 
manage.py notifications # set up the environment using the settings module from django.core.management import setup_environ from myapp import settings setup_environ(settings)  
map if __name__ == "__main__":     print p.map(f [123])  
\ \ \\ subprocess.Popen('rd /s /q .\\ProcessControlSimulator\\bin' shell=True stdout=subprocess.PIPE stderr=subprocess.STDOUT)  
&gt;&gt;&gt; urllib.quote("Tabula Rasa") 'Tabula%20Rasa'  
Users def __iter__(self):     return iter(self.users)  for u in users:     print u.email  
labels = dict(choices) label = labels[some_int]  labels 
for item in z: z item z item item = [0123456789]  for element in item:     if element not in z:         print element  [x for x in item if x not in z]  set(item) - set(z)  
from django.db.models import F Book.objects.all().update(activity=F('views')*4)  for book in Book.objects.all().iterator():     Book.objects.filter(pk=book.pk).update(activity=book.calculate_activity())  
 'dll_excludes': [ "mswsock.dll" "powrprof.dll" ]  
ndim ndim ufunc shape mismatch 
channel = E.channel(E.title("Page Title") E.link("")E.description(""))     for (title link description) in container:         try:                     mytitle = E.title(title)                     mylink = E.link(link)                     mydesc = E.description(description)             item = E.item(mytitle mylink mydesc)                 except ValueError:                     print repr(title)                     print repr(link)                     print repr(description)                     raise         channel.append(item)     top = page = E.top(channel)  
QThread::exec() asyncore.loop() 
from operator import mul reduce(mul list 1)  from operator import mul import numpy as np import numexpr as ne # from functools import reduce # python3 compatibility  a = range(1 101) %timeit reduce(lambda x y: x * y a)   # (1) %timeit reduce(mul a)                  # (2) %timeit np.prod(a)                      # (3) %timeit ne.evaluate("prod(a)")          # (4)  a = range(1 101)  # A a = np.array(a)    # B a = np.arange(1 1e4 dtype=int) #C a = np.arange(1 1e5 dtype=float) #D  np.prod np.array 
item = [123456789] for element in item:     if element not in z:             print element             break  data[x][y] = element  print data[x][y]  
int long sys.maxint sys.getsizeof() sys.maxsize sys.maxsize 
self.fields['nut'].queryset = Nut.objects.exclude(     pk__in=Bolt.objects.values('nut').query)  pk__in=Bolt.objects.values('nut') pk__in=Bolt.objects.values_list('nut') pk__in=Bolt.objects.values('nut').query  .query 
set layout.html &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt; &lt;html&gt;   &lt;title&gt;{{ title }} | Site.com&lt;/title&gt;   ....   {% block content %}{% endblock content %}   .... &lt;/html&gt;  index.html {% extends "layout.html" %} {% set title = 'Homepage' %} {% block content %} (html code here) {% endblock content %}  title 'Homepage' 
select fan_count  from page where username='michaeljackson' 
os.walk() os.listdir() os.path.join() os.path.isdir() import os from xml.sax.saxutils import escape as xml_escape  def DirAsXML(path):     result = '&lt;dir&gt;\n&lt;name&gt;%s&lt;/name&gt;\n' % xml_escape(os.path.basename(path))     dirs = []     files = []     for item in os.listdir(path):         itempath = os.path.join(path item)         if os.path.isdir(itempath):             dirs.append(item)         elif os.path.isfile(itempath):             files.append(item)     if files:         result += '  &lt;files&gt;\n' \             + '\n'.join('    &lt;file&gt;\n      &lt;name&gt;%s&lt;/name&gt;\n    &lt;/file&gt;'             % xml_escape(f) for f in files) + '\n  &lt;/files&gt;\n'     if dirs:         for d in dirs:             x = DirAsXML(os.path.join(path d))             result += '\n'.join('  ' + line for line in x.split('\n'))     result += '&lt;/dir&gt;'     return result  if __name__ == '__main__':     print '&lt;structure&gt;\n' + DirAsXML(os.getcwd()) + '\n&lt;/structure&gt;'  &lt;files&gt; import os from xml.sax.saxutils import quoteattr as xml_quoteattr  def DirAsLessXML(path):     result = '&lt;dir name=%s&gt;\n' % xml_quoteattr(os.path.basename(path))     for item in os.listdir(path):         itempath = os.path.join(path item)         if os.path.isdir(itempath):             result += '\n'.join('  ' + line for line in                  DirAsLessXML(os.path.join(path item)).split('\n'))         elif os.path.isfile(itempath):             result += '  &lt;file name=%s /&gt;\n' % xml_quoteattr(item)     result += '&lt;/dir&gt;'     return result  if __name__ == '__main__':     print '&lt;structure&gt;\n' + DirAsLessXML(os.getcwd()) + '\n&lt;/structure&gt;'  &lt;structure&gt; &lt;dir name="local"&gt;   &lt;dir name=".hg"&gt;     &lt;file name="00changelog.i" /&gt;     &lt;file name="branch" /&gt;     &lt;file name="branch.cache" /&gt;     &lt;file name="dirstate" /&gt;     &lt;file name="hgrc" /&gt;     &lt;file name="requires" /&gt;     &lt;dir name="store"&gt;       &lt;file name="00changelog.i" /&gt;  os.walk() expat 
PS&gt; chcp 65001 PS&gt; ipy64.exe &gt;&gt;&gt; print unichr(0x3a9) ?  PS&gt; [char]0xf12 ? PS&gt; [char]0xe4 ä PS&gt; [char]0x3a9 ?  $src = @' namespace Foo {     public class Bar     {         public static void Baz()         {             System.Console.Out.WriteLine("\u0f12");             System.Console.Out.WriteLine("\u00e4");             System.Console.Out.WriteLine("\u03a9");         }     } } '@  Add-Type -TypeDefinition $src  [Foo.Bar]::Baz() ? ä ?  
C:\Program Files\Parasoft\SOAtest\5.5.3\rules\SOAP\SECURITY.MSGSIZE.rule  C:\Program Files\Parasoft\SOAtest\5.5.3\rules\soa.policy  def checkSize(value context):     message = XMLUtil.serialize(value)     size = len(message)     if size &gt; 10240:         return 1     else:         return 0  size &gt; 10240 
self.total_in_dollars Order __init__ class Order Payment is_paid False Payment Order self.order.total_in_dollars self.amount property import weakref  class Payment(object):   def __init__(self order):     self.order = weakref.proxy(order self.ordergone)   def ordergone(self *_):     self.order = None   @property   def amount(self):     if self.order is None: return None     else: return self.order.total_in_dollars  class Order(object):   def __init__(self amount):     self.total_in_dollars = amount     self.is_paid = False     self._payment = None   @property   def payment(self):     if self._payment is None:       self._payment = Payment(self)     return self._payment  
dpkg -l subversion dpkg -l python-svn  
while True: dostuff False 
a = int(''.join(str(i) for i in a))   long Python long a s s = str(a) a = int(''.join(str(i) for i in s))  
times global def timeit():     global times # &lt;- global declaration     # ...  global times 
"DownloadError: ApplicationError: 2 something bad"  
arr arr.resize arr.resize python_lists_to_array numpy_all_the_way % python -mtimeit -s"import test" "test.numpy_all_the_way(100)" 100 loops best of 3: 1.78 msec per loop % python -mtimeit -s"import test" "test.numpy_all_the_way(1000)" 100 loops best of 3: 18.1 msec per loop % python -mtimeit -s"import test" "test.numpy_all_the_way(5000)" 10 loops best of 3: 90.4 msec per loop  % python -mtimeit -s"import test" "test.python_lists_to_array(100)" 1000 loops best of 3: 1.97 msec per loop % python -mtimeit -s"import test" "test.python_lists_to_array(1000)" 10 loops best of 3: 20.3 msec per loop % python -mtimeit -s"import test" "test.python_lists_to_array(5000)" 10 loops best of 3: 101 msec per loop  numpy_all_the_way % test.py Initial memory usage: 19788 After python_lists_to_array: 20976 After numpy_all_the_way: 20348  import numpy as np import os   def memory_usage():     pid = os.getpid()     return next(line for line in open('/proc/%s/status' % pid).read().splitlines()                 if line.startswith('VmSize')).split()[-2]  N M = 5000 10   def python_lists_to_array(k):     list_of_arrays = list(map(lambda x: x * np.ones(M) range(k)))     arr = np.array(list_of_arrays)     return arr   def numpy_all_the_way(k):     arr = np.empty((N M))     for x in range(k):         arr[x] = x * np.ones(M)     arr.resize((k M))     return arr  if __name__ == '__main__':     print('Initial memory usage: %s' % memory_usage())     arr = python_lists_to_array(5000)     print('After python_lists_to_array: %s' % memory_usage())     arr = numpy_all_the_way(5000)     print('After numpy_all_the_way: %s' % memory_usage())  
ServiceFramework path_to_watch folder path_to_watch = r"c:\foo\bar" + "\\"   
def log_it():     try:         1 / 0     except:         pass  try:     this = that except:     log_it()     raise  try:     this = that except NameError e: # or NameError as e for Python 2.6     try:         1 / 0     except:         pass     raise e  except 
/images/filename-120x45.jpg /images/original_size_image.jpg 
example.com 127.0.0.1:8000 
&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup &gt;&gt;&gt; soup = BeautifulSoup('''&lt;ul class="something"&gt; ... &lt;li id="li_id"&gt; ... &lt;a href="#" title="myurl"&gt;URL Text&lt;/a&gt; ... &lt;/li&gt; ... &lt;/ul&gt;''')  findAll &gt;&gt;&gt; soup.findAll(href='#' title='myurl') [&lt;a href="#" title="myurl"&gt;URL Text&lt;/a&gt;]  &lt;li class="li_class"&gt; &gt;&gt;&gt; soup = BeautifulSoup('''&lt;li class="li_class"&gt;     &lt;a href="#" title="myurl"&gt;URL Text&lt;/a&gt;     &lt;a href="#" title="myurl2"&gt;URL Text2&lt;/a&gt;&lt;/li&gt;&lt;li class="foo"&gt;     &lt;a href="#" title="myurl3"&gt;URL Text3&lt;/a&gt;&lt;/li&gt;''') # just some sample html  &gt;&gt;&gt; for elem in soup.findAll("li" "li_class"): ...   pprint(elem.findAll('a')) # requires `from pprint import pprint` ...  [&lt;a href="#" title="myurl"&gt;URL Text&lt;/a&gt;  &lt;a href="#" title="myurl2"&gt;URL Text2&lt;/a&gt;]  
seek() file.seek(0)  readlines() file 
def sums(it):     """     &gt;&gt;&gt; sums(1)     1     &gt;&gt;&gt; sums([123])     6     &gt;&gt;&gt; sums([123[45]])     15     &gt;&gt;&gt; sums(['a''b'])     Traceback (most recent call last):     ...     TypeError: unsupported operand type(s) for +: 'int' and 'str'     """     if getattr(it "__iter__" None):         return sum(map(sums it))     else:         return it  if __name__ == "__main__":     import doctest     doctest.testmod()  
cmd os.system os.system &gt; cat phase1.py #!/usr/bin/python import os status = 9 while status == 9:     status = int(os.system ("./phase2.py") / 256) # exit code is upper 8 bits     print "Controller: %d"%(status)  &gt; cat phase2.py #!/usr/bin/python import sys import time time.sleep(1) val = int(time.time())%10 if val == 0:     rc = 0 else:     rc = 9 print "Program: %d -&gt; %d"%(valrc) sys.exit(rc)  &gt; ./phase1.py Program: 2 -&gt; 9 Controller: 9 Program: 3 -&gt; 9 Controller: 9 Program: 4 -&gt; 9 Controller: 9 Program: 5 -&gt; 9 Controller: 9 Program: 7 -&gt; 9 Controller: 9 Program: 8 -&gt; 9 Controller: 9 Program: 9 -&gt; 9 Controller: 9 Program: 0 -&gt; 0 Controller: 0  
def __unicode__(self): pub_date = ... return ... 
update(...) get(...) QuerySet from django.core.management import setup_environ from register import settings setup_environ(settings)  from django.contrib.sites.models import Site  obj=Site.objects.get(id=1) obj.name='sss' obj.save() print obj  
env os.environ myapp.environ myapp.environ 
example = etree.Element("example") login = etree.SubElement(example "login") password = etree.SubElement(login"password") password.text = "newPassword"  
user.first_name = u'Rytis'.encode('unicode_escape') user.last_name = u'Slatkevi?ius'.encode('unicode_escape') user.save() &gt;&gt;&gt; SUCCEED  print user.last_name &gt;&gt;&gt; Slatkevi\u010dius print user.last_name.decode('unicode_escape') &gt;&gt;&gt; Slatkevi?ius  
pip install ipython==0.10  
from pylab import *  points = [] points.append((-0.25 -1.0)) points.append((0.7 -0.7)) points.append((10)) points.append((0.71)) points.append((-0.251.2)) points.append((-10.5)) points.append((-1-0.5)) points.append((-0.25 -1.0))  a_line = plot(*zip(*points))[0] a_line.set_color('g') a_line.set_marker('o') a_line.set_markerfacecolor('b') a_line.set_markersize(30) axis([-1.51.5-1.51.5])  show()  # general imports import random time from multiprocessing import Process Queue  # for matplotlib import random import numpy as np import matplotlib matplotlib.use('GTKAgg') # do this before importing pylab  import matplotlib.pyplot as plt from matplotlib.patches import Circle   def matplotLibAnimate(qpoints):      # set up initial plot     fig = plt.figure()     ax = fig.add_subplot(111)       circles = []     for point in points:         ax.add_patch(Circle(point0.1))      a_line = ax.plot(*zip(*points))     a_line.set_color('g')     a_line.set_lw(2)      currentNode = None       def animate(currentNode = currentNode):         while 1:             newNode = q.get()             if currentNode: currentNode.remove()             circle = Circle(newNode0.1)             currentNode = ax.add_patch(circle)             circle.set_fc('r')             fig.canvas.draw()      # start the animation     import gobject     gobject.idle_add(animate)     plt.show()  #initial points points = ((-0.25 -1.0)(0.7 -0.7)(10)(0.71)(-0.251.2)(-10.5)(-1-0.5)(-0.25 -1.0)) q = Queue() p = Process(target = matplotLibAnimate args=(qpoints)) p.start()  # feed animation data while 1:     time.sleep(random.randrange(4))     q.put(random.sample(points1)[0])  
unique_together class Item(models.Model):     name = models.CharField(max_length = 200 blank = False)  class Player(models.Model):     items = models.ManyToManyField(Item through='PlayerItem')  class PlayerItem(models.Model):     player = models.ForeignKey(Player)     item = models.ForeignKey(Item)     quantity = models.IntegerField(default=1)      class Meta:         unique_together = ('player' 'item')  class Item(models.Model):     name = models.CharField(max_length = 200 blank = False)  class Player(models.Model):     items = models.ManyToManyField(Item through='PlayerItem')  class PlayerItem(models.Model):     player = models.ForeignKey(Player)     item = models.ForeignKey(Item)     acquired = models.DateTimeField(default=datetime.datetime.now)  count() PlayerItem Item Player PlayerItem 
python renamer.py "Z:\\FolderCollectionInHere" blah.txt csv  import os import sys  class Renamer:     def start(self args):         os.chdir(args[1])         dirs = os.listdir(".")          for dir in dirs:             try:                 os.rename(dir + "\\" + args[2] dir + "\\" + dir + "." + args[3])                 print "Renamed file in directory: " + dir             except Exception:                 print "Couldn't find file to rename in directory: " + dir  Renamer().start(sys.argv)  
process_view process_view() None HttpResponse None process_view() HttpResponse HttpResponse 
manage.py os.getpid() 
zfh.write(zip_file_name)  zfh.write(file)  
for i in range(len(somelist)):    something( somelist[i] )  for x in somelist:      something( x )  def GetSteamAccts():     Steamapp_Folders = [f for f in ("C:\\Program Files (x86)\\Steam\\steamapps\\"                                      "C:\\Program Files\\Steam\\steamapps\\")                            if os.path.isdir(f)]     return [os.path.join(root folder)                      for root in Steamapp_Folders                      for folder in os.listdir(root)                      if os.path.isdir( os.path.join(root folder)) ]  def subfoldernames( root ):     for folder in os.listdir(root):         path = os.path.join(root folder)         if os.path.isdir(path):             yield folder # just the name not the path  # same just shorter: def subfoldernames( root ):     # this returns a generator written as a generator expression     return ( folder for folder in os.listdir( root )                      if os.path.isdir(os.path.join( root folder )) )  def GetSteamAccts():         Steamapp_Folders = ("C:\\Program Files (x86)\\Steam\\steamapps\\"                                               "C:\\Program Files\\Steam\\steamapps\\")         for folder in Steamapp_Folders:             if os.path.isdir(folder):                 # only the subfolders of the first path that exists are returned                 return list(subfoldernames( folder ))   
im = Image.new('L' size) im.putdata([x1 x2 x3 ...])  
a[np.arange(3) (010)]  
keywords = library.get_keywords() if not isinstance(keywords tuple):     keywords = (keywords) # Note the comma for keyword in keywords:     do_your_thang(keyword)  
self.testdata.close() setUp() tearDown()      try:         file.open()     finally:         file.close()   _tests 
sys.stdout sys.__stdout__ sys.stdout import StringIO import sys  # Store App Engine's modified stdout so we can restore it later gae_stdout = sys.stdout  # Redirect stdout to a StringIO object new_stdout = StringIO.StringIO() sys.stdout = new_stdout  # Run your code here however you're doing that  # Get whatever was printed to stdout using the `print` statement (if necessary) printed = new_stdout.getvalue()  # Restore App Engine's original stdout sys.stdout = gae_stdout  
Explicit is better than implicit. ... Namespaces are one honking great idea -- let's do more of those!  handlers index globals handlers globals 
if False forced builtins dir(module) dir stub predefined 
Window &gt; Preferences &gt; Pydev &gt; Editor &gt; Code Analysis &gt; Others  class Group(object):     def key(self k):         outer_self = self         class Subkey(object):             def __enter__(self):                 outer_self._settings.beginGroup(k)                 return outer_self              def __exit__(self type value tb):                 outer_self._settings.endGroup()           return Subkey()  s self 
glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT GL_COLOR_ATTACHMENT0_EXT GL_TEXTURE_2D surface.texture 0)  
public int winCraps{     roll = rollDice();     if (roll == 7 || roll == 11) {         return true;     }     else if(roll == 2 || roll == 3 || roll == 12) {         return false;     }     else{         return rollforPoint(roll);     } }  
save_file = open(os_path 'wb')  shutil.copyfileobj file_save_path = os.path.join(config.images_dir request.POST['image'].filename) file_contents = request.POST['image'].file.read()  # insert sanity checks here...  save_file = open(file_save_path 'wb') save_file.write(file_contents) save_file.close()  with open(file_save_path 'wb') as save_file:     save_file.write(file_contents)  from __future__ import with_statements  
generate_url(expires_in method='GET' headers=None query_auth=True force_http=False)  
import re xmlprocre = re.compile("(\s*&lt;[\?\!])") def add_toplevel_tag(string):     """ After all the XML processing instructions add an enclosing top-level &lt;DOC&gt; tag and return it. e.g. &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE FOO BAR "foo.dtd" [ &lt;!ENTITY ...&gt; &lt;!ENTITY ...&gt; &lt;!ENTITY ...&gt; ]&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt; =&gt; &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE FOO BAR "foo.dtd" [ &lt;!ENTITY ...&gt; &lt;!ENTITY ...&gt; &lt;!ENTITY ...&gt; ]&gt;&lt;DOC&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt;&lt;/DOC&gt; """     def _advance_proc(string idx):         # If possible advance over whitespace and one processing         # instruction starting at string index idx and return its index.         # If not possible return None         # Find the beginning of the processing instruction         m = xmlprocre.match(string[idx:])         if m is None: return None         #print "Group" m.group(1)         idx = idx + len(m.group(1))         #print "Remain" string[idx:]          # Find closing &gt; bracket         bracketdebt = 1         while bracketdebt &gt; 0:             if string[idx] == "&lt;": bracketdebt += 1             elif string[idx] == "&gt;": bracketdebt -= 1             idx += 1         #print "Remain" string[idx:]         return idx     loc = 0     while 1:         # Advance one processing instruction         newloc = _advance_proc(string loc)         if newloc is None: break         else: loc = newloc     return string[:loc] + "&lt;DOC&gt;" + string[loc:] + "&lt;/DOC&gt;"  
py2exe win32com pysvn py2exe 
&gt;&gt;&gt; def wrapper(param1 *stuff **kargs): ...  print(param1) ...  print(stuff) ...  print(args) ... &gt;&gt;&gt; wrapper(3 4 5 foo=2) 3 (4 5) {'foo': 2}  wrapee(param1 *stuff **kargs)  *stuff **kargs 
from google.appengine.ext import db from google.appengine.api.datastore_types import *  def dumpStr(obj):     return "'" + obj + "'"  def dumps(obj):     if isinstance(obj str):         return dumpStr(obj)     elif obj == None:         return None     elif isinstance(obj list):         items = [];         for item in obj:             items.append(dumps(item))         return '[' + ''.join(items) + ']'     elif isinstance(obj datetime.datetime):         return "new Date('%s')" % obj.ctime()     properties = [];     for property in dir(obj):         if property[0] != '_':             value = obj.__getattribute__(property)             valueClass = str(value.__class__)             if not(('function' in valueClass) or ('built' in valueClass) or ('method' in valueClass)):                 value = dumps(value)                 if value != None:                     properties.append("'" + property + "':" + value)     if len(properties) == 0:         return str(obj)     else:         return '{' + ''.join(properties) + '}'  
print fooPy()  fooShell=$(python fooPy.py)  = 
self  for newsletter in newsletters:       setattr(newsletter 'basepath'               newsletter.NewsletterPath.split('/')[-1])  
\3  {'type': 'str' 'name': 'yowza!' 'value': 'c:\\test\\3 tests\\test'}  
seen = set() repeated = set() for l in list_of_lists:   for i in set(l):     if i in seen:       repeated.add(i)     else:       seen.add(i)  from itertools import * reduce(set.union (starmap(set.intersection combinations(map(set ll) 2))))  
strings = dict((x x) for x in L)  
traverse(node):   if node != None do:     traverse(node.left)     print node.value     traverse(node.right)   endif  traverse(node):   while node != None do:     traverse(node.left)     print node.value     node = node.right   endwhile  traverse(node):   stack = []   while !empty(stack) || node != None do:     if node != None do: // this is a normal call recurse       push(stacknode)       node = node.left     else // we are now returning: pop and print the current node       node = pop(stack)       print node.value       node = node.right     endif   endwhile  if/else traverse(node):   // entry:   if node == NULL do return   traverse(node.left)   // after-left-traversal:   print node.value   traverse(node.right)  traverse(node):    stack = [node'entry']    while !empty(stack) do:      [nodestate] = pop(stack)      switch state:         case 'entry':           if node == None do: break; // return          push(stack[node'after-left-traversal']) // store return address          push(stack[node.left'entry']) // recursive call          break;        case 'after-left-traversal':           print node.value;          // tail call : no return address          push(stack[node.right'entry']) // recursive call       end     endwhile   
def getEventsForMonth(self month year):   start_date = datetime.datetime(year month 1)   if month == 12:     end_date = datetime.datetime(year + 1 1 1)   else:     end_date = datetime.datetime(year month + 1 1)   return Events.all().filter('date &gt;=' start_date).filter('date &lt;=' end_date).fetch(1000)  
x = 'a and (b and c) and d or e and (f or g)' import re  matches = re.findall(r'\(.*?\)|\w+' x) print ''.join(matches)  and or 
for key in myDict:     if key not in myList:         print(key+"\t"+myDict[key])  for key in (set(myDict)-set(myList)):     print(key+"\t"+myDict[key])  
A = [] B = [] for item in L:     if item['b'] == 0:         target = A     else:         target = B     target.append(item)  (A B)[item['b'] != 0].append(item) 
start   cnt 00:05:00   1 00:10:00   0 00:15:00   1 00:20:00   0 00:25:00   1 00:30:00   0 00:35:00   1 00:40:00   0 00:45:00   0 00:50:00   0 00:55:00   2  CREATE TABLE `timedata` (   `id` int(11) NOT NULL AUTO_INCREMENT   `c1` datetime DEFAULT NULL   `c2` varchar(20) DEFAULT NULL   PRIMARY KEY (`id`) )  DROP PROCEDURE IF EXISTS per5min; DELIMITER // CREATE PROCEDURE per5min () BEGIN   DECLARE dtMin DATETIME;   DECLARE dtMax DATETIME;   DECLARE dtStart DATETIME;   DECLARE dtStop DATETIME;   DECLARE tmDiff TIME;   DECLARE result INT UNSIGNED;   SET @offset = 5 * 60;   SELECT MIN(c1) into dtMin FROM timedata;   SELECT MAX(c1) into dtMax FROM timedata;    CREATE TEMPORARY TABLE tmp_per5min (       start TIME       cnt INT UNSIGNED   );    SET dtStart = dtMin;   REPEAT     SELECT dtStart + INTERVAL @offset SECOND into dtStop;     SELECT count(c2) into result FROM timedata WHERE c1 BETWEEN dtStart and dtStop;     SELECT TIME(SUBTIME(dtStopTIME(dtMin))) into tmDiff;     INSERT INTO tmp_per5min (startcnt) VALUES (tmDiffresult);     SET dtStart = dtStop;   UNTIL dtStop &gt;= dtMax END REPEAT;    SELECT * FROM tmp_per5min;   DROP TABLE tmp_per5min; END; // DELIMITER ;  CALL per5min();  shell&gt; mysql -uroot test &lt; per5minproc.sql  import MySQLdb as m  if __name__ == '__main__':     db = m.connect(user='root'db='test')     c = db.cursor()     c.callproc("per5min")     print(c.fetchall())     c.close()     db.close()  
__setattr__ __getattr__ &gt;&gt;&gt; class  TempFileWithAttributes(object): ...   __slots__ = ['_tempFile' 'Value'] ...   def __init__(self): ...     self._tempFile  =  tempfile.TemporaryFile() ...     self.Value = 123 ...   def __getattr__(self name): ...     return getattr(self._tempFile name) ...   
datetime.timedelta td td.days timedelta def days_hours_minutes(td):     return td.days td.seconds//3600 (td.seconds//60)%60  
hex(ord(b))  
method=GET method=GET method=POST first_name last_name if 'first_name' in request.GET or 'last_name' in request.GET:     form = SearchForm(request.GET) else:     form = SearchForm()  __init__ 
scipy.weave import numpy import time from os import urandom from scipy import weave  SIZE = 2**20  def faster_slow_xor(aabb):     b = numpy.fromstring(bb dtype=numpy.uint64)     numpy.bitwise_xor(numpy.frombuffer(aadtype=numpy.uint64) b b)     return b.tostring()  code = """ const __m128i* pa = (__m128i*)a; const __m128i* pend = (__m128i*)(a + arr_size); __m128i* pb = (__m128i*)b; __m128i xmm1 xmm2; while (pa &lt; pend) {   xmm1 = _mm_loadu_si128(pa); // must use unaligned access    xmm2 = _mm_load_si128(pb); // numpy will align at 16 byte boundaries   _mm_store_si128(pb _mm_xor_si128(xmm1 xmm2));   ++pa;   ++pb; } """  def inline_xor(aa bb):     a = numpy.frombuffer(aa dtype=numpy.uint64)     b = numpy.fromstring(bb dtype=numpy.uint64)     arr_size = a.shape[0]     weave.inline(code ["a" "b" "arr_size"] headers = ['"emmintrin.h"'])     return b.tostring()  support = """ #define ALIGNMENT 16 static void memxor(const char* in1 const char* in2 char* out ssize_t n) {     const char* end = in1 + n;     while (in1 &lt; end) {        *out = *in1 ^ *in2;        ++in1;         ++in2;        ++out;     } } """  code2 = """ PyObject* res = PyString_FromStringAndSize(NULL real_size);  const ssize_t tail = (ssize_t)PyString_AS_STRING(res) % ALIGNMENT; const ssize_t head = (ALIGNMENT - tail) % ALIGNMENT;  memxor((const char*)a (const char*)b PyString_AS_STRING(res) head);  const __m128i* pa = (__m128i*)((char*)a + head); const __m128i* pend = (__m128i*)((char*)a + real_size - tail); const __m128i* pb = (__m128i*)((char*)b + head); __m128i xmm1 xmm2; __m128i* pc = (__m128i*)(PyString_AS_STRING(res) + head); while (pa &lt; pend) {     xmm1 = _mm_loadu_si128(pa);     xmm2 = _mm_loadu_si128(pb);     _mm_stream_si128(pc _mm_xor_si128(xmm1 xmm2));     ++pa;     ++pb;     ++pc; } memxor((const char*)pa (const char*)pb (char*)pc tail); return_val = res; Py_DECREF(res); """  def inline_xor_nocopy(aa bb):     real_size = len(aa)     a = numpy.frombuffer(aa dtype=numpy.uint64)     b = numpy.frombuffer(bb dtype=numpy.uint64)     return weave.inline(code2 ["a" "b" "real_size"]                          headers = ['"emmintrin.h"']                          support_code = support)  weave str std::string frombuffer _mm_loadu_si128 _mm_load_si128 _mm_store_si128 _mm_stream_si128 slow_xor uint64 slow_xor slow_xor faster_slow_xor inline_xor inline_xor_nocopy 
ModelA myproject.modelb.models from myproject.modela.models import ModelA class ModelB:     a = models.ForeignKey(ModelA)  class ModelB:     a = models.ForeignKey('ModelA')  
RegexObject.match(string [pos] [endpos])  r.match("foo")  RegexObject.match(string[ pos][ endpos])  
copy.copy copy.copy self.__dict__ copy.deepcopy deepcopy self 
linked.html tabular.html {% if inline_admin_form.original.pk %}           &lt;td class="{{ field.field.name }}"&gt;               &lt;a href="/admin/{{ app_label }}/{{ inline_admin_formset.opts.admin_model_path }}/{{ inline_admin_form.original.pk }}/"&gt;Full record&lt;/a&gt;           &lt;/td&gt; {% endif %}  LinkedInline InlineModelAdmin #override of the InlineModelAdmin to support the link in the tabular inline class LinkedInline(admin.options.InlineModelAdmin):     template = "admin/linked.html"     admin_model_path = None      def __init__(self *args):         super(LinkedInline self).__init__(*args)         if self.admin_model_path is None:             self.admin_model_path = self.model.__name__.lower()  LinkedInline InlineModelAdmin 
prettify BeautifulSoup.BeautifulSoup('&lt;p&gt;a&lt;span&gt;b&lt;/span&gt;c&lt;/p&gt;').renderContents()  
epydoc --check foo.py bar.py  +------------------------------------------------------------------------------------------------------------ | In /home/mark/Desktop/foo.py: | Import failed (but source code parsing was successful). |     Error: KeyError: 'DOES_NOT_EXIST' (line 2) |    +------------------------------------------------------------------------------------------------------------ | In /home/mark/Desktop/bar.py: | Import failed (but source code parsing was successful). |     Error: KeyError: 'DOES_NOT_EXIST' (line 7) |     
token.py help() token.py .py pydoc.py help() help() 
rstrip line line = line.rstrip('\n')  "a string".strip().upper()  
whyteboard.tools tools import tools sys.modules sys.modules['whyteboard.tools'] sys.modules import sys from whyteboard import tools  sys.modules['tools'] = tools  cPickle.load del sys.modules['tools'] cPickle.dump sys.modules 
print repr(open('file_saved_from_wireshark' 'rb').read()) print repr(a_sample_packet) import binascii sys cStringIO gzip struct zlib # guff is allegedly a "packet" formatted as 2 hex characters per byte guff = "001321cdc68ff4ce46e4f00d0800450000832a85400080061e51ac102cceac102cb004f8092a9909b32c10e81cb25018f734823e00000100000000000000521f8b08000000000000005bf39681b59c85818121a0b4884138da272bb12c512f27312f5dcf3f292b35b9c47ac2b988f902c59a394c0c0c150540758c250c5c2ea5b9b9950a2e89258900aa4c201a3f000000" guff2 = binascii.unhexlify(guff) print "raw input: len=%d repr=%r" % (len(guff2) guff2) # gzip spec: http://www.faqs.org/rfcs/rfc1952.html GZIP_HDR = "\x1F\x8B\x08" gzpos = guff2.find(GZIP_HDR) if gzpos == -1:     print "Can't find gzip header"     sys.exit(1) print gzpos "bytes before gzipped data" gzipped = guff2[gzpos:] packet_crc packet_orig_len = struct.unpack("&lt;II" gzipped[-8:]) print "packet_crc packet_orig_len:" hex(packet_crc) packet_orig_len fobj = cStringIO.StringIO(gzipped) zf = gzip.GzipFile(fileobj=fobj) payload = zf.read() print "payload: len=%d repr=%r" % (len(payload) payload) print "crc32(payload):" hex(zlib.crc32(payload))  raw input: len=145 repr="\x00\x13!\xcd\xc6\x8f\xf4\xceF\xe4\xf0\r\x08\x00E\x00\x 00\x83*\x85@\x00\x80\x06\x1eQ\xac\x10\xce\xac\x10\xb0\x04\xf8\t*\x99\t\xb3\x1 0\xe8\x1c\xb2P\x18\xf74\x82&gt;\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x1f\x8b\x0 8\x00\x00\x00\x00\x00\x00\x00[\xf3\x96\x81\xb5\x9c\x85\x81\x81!\xa0\xb4\x88A8\xd a'+\xb1Q/'1/]\xcf?)+5\xb9\xc4z\xc2\xb9\x88\xf9\x02\xc5\x9a9L\x0c\x0c\x15\x05@u\ x8c%\x0c\\.\xa5\xb9\xb9\x95\n.\x89%\x89\x00\xaaL \x1a?\x00\x00\x00" 63 bytes before gzipped data packet_crc packet_orig_len: 0x1a204caa 63 payload: len=63 repr='\xac\xed\x00\x05w\x04\x00\x00\x00Pur\x00\x13[Ljava.lang.Ob ject;\x90\xceX\x9f\x10s)l\x02\x00\x00xp\x00\x00\x00\x01t\x00\nDummy Data' crc32(payload): 0x1a204caa  
settings import settings settings.bar settings.quux from foo import * import foo 
d = collections.defaultdict(list) for line in stream:     if '/' in line:         #.....         key =  str(hostname)+":"+r.groups()[0][0:2]+r.groups()[2]         value = str(line[3])         d[key].append(value)  d2 = {} for keyvalues in d.iteritems():     d2['%s:%d' % (key len(values)] = ' '.join(str(v) for v in values)  ' '.join() 
&lt;py:for each="line in message.split('\n')"&gt;${line}&lt;br /&gt;&lt;/py:for&gt;  
u'€' 
  File "test.py" line 9 in &lt;module&gt;     sudoku[i/4*4+k] = sudoku[i/4*4+k].translate(None str(j+1)) TypeError: expected a character buffer object    File "test.py" line 12 in &lt;module&gt;     sd(i/4*4+k) NameError: name 'k' is not defined      sd(lambda k: i/4*4+k)  sd 
def attrsetter(attr):   def set_any(self value):     setattr(self attr value)   return set_any  a = property(fset=attrsetter('_a')) b = property(fset=attrsetter('_b')) c = property(fset=attrsetter('_c'))  
entries = db.Query(Entry).order("-published").fetch() comments = db.Query(Comment).order("published").fetch()  
# adjust python path if not a system-wide install: import sys sys.path.insert(0 "c:/dev/Mercurial/lib")  
entire_file = open('hello.txt' 'rb').read()  print 'number of \\n: %d number of bytes %d' % (     entire_file.count('\n') len(entire_file))  
set_size_request() window_get_size() set_resizable() 
Timer threading.Timer Queue.Queue 
str = '%-10f' % val  set = '%10f' % val  str = '%-10.4f' % val  import sys rows = [[1.343 348.222 484844.3333] [12349.000002 -2.43333]] for row in rows:   for val in row:     sys.stdout.write('%20f' % val)   sys.stdout.write("\n")          1.343000          348.222000       484844.333300     12349.000002           -2.433330  
365 10! 
object class Base(object):     ...  
    value = SDL_JoystickGetHat (joy _index); #ifdef DEBUG     printf("SDL_JoystickGetHat value:%d:\n" value); #endif     if (value &amp; SDL_HAT_UP) {  
elif 'nt' in _names:     name = 'nt'     linesep = '\r\n'     from nt import *     try:         from nt import _exit     except ImportError:         pass     import ntpath as path      import nt     __all__.extend(_get_exports_list(nt))     del nt  import ntpath as path os.path ntpath 
import unicodedata as ud all_unicode = ''.join(unichr(i) for i in xrange(65536)) unicode_letters = ''.join(c for c in all_unicode                           if ud.category(c)=='Lu' or ud.category(c)=='Ll')  letter in unicode_letters unicode_letters = set(unicode_letters)  
result = reduce(lambda data (aname p): algo_by_name(aname)(p data) workflow)  workflow = ['data' ('algo0' {}) ('algo1' {'param': value}) … ]  def algo0(p data):     …     return output_data.filename  def algo_by_name(name):     return {'algo0': algo0 'algo1': algo1 }[name]  
def word_start_index2(text seek_word):     camel_case = seek_word[0].upper() + seek_word[1:].lower()     seek_word_i = ''.join('[' + c.lower() + c.upper() + ']'                            for c in seek_word)     regex1 = r'(?:(?&lt;=[^a-zA-Z])|^)' + seek_word_i + r'(?=$|[^a-zA-Z])'     regex2 = r'(?:(?&lt;=[a-z]|[^A-Z])|^)' + camel_case + r'(?=$|[A-Z]|[^a-z])'     regex = '%s|%s' % (regex1  regex2)     import re     m = re.search(regex text)     if not m:         return None     else:         return m.start()  (?i) 
countryname = aliases.get(countryname countryname)  
.setAttribute image.setAttribute("rank" str(rank))  
datetime time datetime.datetime time datetime datetime datetime 
Operators.keys() itertools.count from itertools import count KS = count()  Node class Node(object):     isRoot = False     left  = None     right = None     parent = None     branch = None     seq = 0      def __init__(self cargo):         self.cargo = cargo  False None 0 Node namedtuple parent from collections import namedtuple Node = namedtuple("Node" ["cargo" "left" "right" "branch" "seq" "isRoot"]) # ...     def build_nodes (self  depth = Depth entry = 1  pparent = None          bbranch = None):         r = random.random()          if (depth &lt;= 0) or ((r &gt; Ratio) and (not (entry))):             this_node = Node(                 random.choice(Atoms) None None bbranch KS.next() False)             self.thedict[this_node.seq] = this_node             return this_node          else:             this_operator = random.choice(OpKeys)              this_node = Node(               this_operator               self.build_nodes(entry = 0 depth = depth - 1                                pparent = None bbranch = 'left')               self.build_nodes(entry = 0 depth = depth - 2                                pparent = None bbranch = 'right')               bbranch                KS.next()                bool(entry))              self.thedict[this_node.seq] = this_node                 return this_node  from collections import namedtuple Node = namedtuple("Node" ["cargo" "args" "parent" "branch" "seq" "isRoot"])      def build_nodes (self  depth = Depth entry = 1  pparent = None          bbranch = None):         r = random.random()          if (depth &lt;= 0) or ((r &gt; Ratio) and (not (entry))):             this_node = Node(                 random.choice(Atoms) None pparent bbranch KS.next() False)             self.thedict[this_node.seq] = this_node             return this_node          else:             this_operator = random.choice(OpKeys)              this_node = Node(               this_operator [] pparent bbranch               KS.next() bool(entry))             this_node.args.extend(               self.build_nodes(entry = 0 depth = depth - (i + 1)                                pparent = this_node bbranch = i)               for i in range(Operators[this_operator]))              self.thedict[this_node.seq] = this_node                 return this_node  
self.setShapeAt 
/items/today/ /today/ datime.datetime.now() 
read() buffer() PyObject_AsReadBuffer() 
from SimpleXMLRPCServer import SimpleXMLRPCServer server = SimpleXMLRPCServer(("localhost" 9876))  def my_func(ab):     return a + b  server.register_function(my_func) server.serve_forever()  import xmlrpclib s = xmlrpclib.ServerProxy('http://localhost:9876')  print s.my_func(23)  &gt;&gt;&gt; 5 print type(s.my_func(23)) &gt;&gt;&gt; &lt;type 'int'&gt; print s.my_func(23.0): &gt;&gt;&gt; 7.0  
filter_by db.users.filter_by(name='Joe') filter db.users.filter(db.users.name=='Joe') filter db.users.filter(or_(db.users.name=='Ryan' db.users.country=='England')) 
from sqlalchemy.schema import CreateTable  print(CreateTable(table))  print(CreateTable(Model.__table__))  print(CreateTable(Model.__table__).compile(engine))  print(CreateTable(Model.__table__).compile(dialect=postgresql.dialect()))  
[] Enumerable.Empty&lt;T&gt;()  [x] Enumerable.Repeat(x 1)  [[0]*n] Enumerable.Repeat(Enumerable.Repeat(0 n) 1)  [X for Y in Z] from Y in Z select X    - or - Z.Select(Y =&gt; X);  X + Y Enumerable.Concat(X Y)   public IEnumerable&lt;IEnumerable&lt;double&gt;&gt; MultiChoose(int n int k);  
library() from rpy2.robjects import r r.library("lattice") r.library("ggplot2")  
query.values(Comment.comment) 
len __len__ size_t 
outer_join join '|'.join(['p 'p' 'p']) join ['p' 'p' 'p'].join('|') outer_join def outer_join(sep ss):   sep + ss.join(sep) + sep end  expand_blanks gsub gsub def expand_blanks(fen)   fen.gsub(/\d/) { |match| ' ' * match.to_i } end  ascii_draw_chess_position gsub replace map def ascii_draw_chess_position(fen)   pieces = expand_blanks(fen).gsub('/' '')   divider = "+-+-+-+-+-+-+-+-+\n"   rows = (0...8).map do |i|     row = pieces[i * 8...(i + 1) * 8].split('')     outer_join("|"row) + "\n"   end   puts outer_join(divider rows) end  
parent.getElementsByTagName('Url')[0].childNodes[0].nodeValue  
gtk.Builder one class one(gtk.VBox):    def __init__(self):     gtk.VBox.__init__(self)     self.builder = gtk.Builder()     self.builder.add_from_file("ui_for_one.glade")     some_widget = self.builder.get_object("some_widget")     self.add(some_widget)     self.builder.connect_signals(self)     # No reason to call self.show() here that should be done manually.    #Your callback functions here  class two(object):  # This is the page in a notebook.       def __init__(self):     self.builder = gtk.Builder()     self.builder.add_from_file("ui_for_two.glade")     self.some_container = self.builder.get_object("some_container")     self.one = one()     self.some_container.pack_start(self.one False False)     self.some_container.show_all() #recursively show some_container and all its child widgets      self.builder.connect_signals(self)  
__setattr__ &gt;&gt;&gt; class Individualist(object): ...   def __init__(self): ...     self.__class__ = type('GottaBeMe' (self.__class__ object) {}) ...  &gt;&gt;&gt; a = Individualist() &gt;&gt;&gt; b = Individualist() &gt;&gt;&gt; a.__class__.__int__ = lambda self: 23 &gt;&gt;&gt; b.__class__.__int__ = lambda self: 42 &gt;&gt;&gt; int(a) 23 &gt;&gt;&gt; int(b) 42 &gt;&gt;&gt;   &gt;&gt;&gt; class Sophisticated(Individualist): ...   def __setattr__(self n v): ...     if n[:2]=='__' and n[-2:]=='__' and n!='__class__': ...       setattr(self.__class__ n v) ...     else: ...       object.__setattr__(self n v) ...  &gt;&gt;&gt; c = Sophisticated() &gt;&gt;&gt; d = Sophisticated() &gt;&gt;&gt; c.__int__ = lambda self: 54 &gt;&gt;&gt; d.__int__ = lambda self: 88 &gt;&gt;&gt; int(c) 54 &gt;&gt;&gt; int(d) 88  
instOfA.printSelf = b.printSelf.__get__(instOfA)  __class__ instOfA.printSelf = instOfB.__class__.printSelf.__get__(instOfA)  instOfA a self instOfB.printSelf.__func__(instOfA)  
forms remember_me form = AuthenticationRememberMeForm() field_obj = form.fields['remember_me']  form = AuthenticationRememberMeForm(data) if form.is_valid():     remember_me_value = form.cleaned_data['remember_me']  django.forms 
assert len(chunkIt([123] 10)) == 10  # fails  def chunkIt(seq num):     avg = len(seq) / float(num)     out = []     last = 0.0      while last &lt; len(seq):         out.append(seq[int(last):int(last + avg)])         last += avg      return out  &gt;&gt;&gt; chunkIt(range(10) 3) [[0 1 2] [3 4 5] [6 7 8 9]] &gt;&gt;&gt; chunkIt(range(11) 3) [[0 1 2] [3 4 5 6] [7 8 9 10]] &gt;&gt;&gt; chunkIt(range(12) 3) [[0 1 2 3] [4 5 6 7] [8 9 10 11]]  
k k X% k 1 &gt; X% k += 1 k def markCluster(items threshold):     k = 1     clusters = [items]     maxdist = diameter(items)     while maxdist &gt; threshold:         k += 1         clusters = Kmc(items k)         maxdist = max(diameter(c) for c in clusters)     return clusters  diameter Kmc diameter Kmc items numpy 
n = [i if i.startswith('h') else 'http' + i for i in n]  
self.cursor.execute("insert into server_table2(serverstatusid) values (???)"(record[0])(record[1])(record[2]));  self.cursor.execute("insert into server_table2(serverstatusid) values (???)"record[0:2])  executemany 
ctypes #! /usr/bin/env python  ''' A resumable implementation of SHA-256 using ctypes with the OpenSSL crypto library      Written by PM 2Ring 2014.11.13 '''  from ctypes import *  SHA_LBLOCK = 16 SHA256_DIGEST_LENGTH = 32  class SHA256_CTX(Structure):     _fields_ = [         ("h" c_long * 8)         ("Nl" c_long)         ("Nh" c_long)         ("data" c_long * SHA_LBLOCK)         ("num" c_uint)         ("md_len" c_uint)     ]  HashBuffType = c_ubyte * SHA256_DIGEST_LENGTH  #crypto = cdll.LoadLibrary("libcrypto.so") crypto = cdll.LoadLibrary("libeay32.dll" if os.name == "nt" else "libssl.so")  class sha256(object):     digest_size = SHA256_DIGEST_LENGTH      def __init__(self datastr=None):         self.ctx = SHA256_CTX()         crypto.SHA256_Init(byref(self.ctx))         if datastr:             self.update(datastr)      def update(self datastr):         crypto.SHA256_Update(byref(self.ctx) datastr c_int(len(datastr)))      #Clone the current context     def _copy_ctx(self):         ctx = SHA256_CTX()         pointer(ctx)[0] = self.ctx         return ctx      def copy(self):         other = sha256()         other.ctx = self._copy_ctx()         return other      def digest(self):         #Preserve context in case we get called before hashing is         # really finished since SHA256_Final() clears the SHA256_CTX         ctx = self._copy_ctx()         hashbuff = HashBuffType()         crypto.SHA256_Final(hashbuff byref(self.ctx))         self.ctx = ctx         return str(bytearray(hashbuff))      def hexdigest(self):         return self.digest().encode('hex')  #Tests def main():     import cPickle     import hashlib      data = ("Nobody expects " "the spammish " "imposition!")      print "rehash\n"      shaA = sha256(''.join(data))     print shaA.hexdigest()     print repr(shaA.digest())     print "digest size =" shaA.digest_size     print      shaB = sha256()     shaB.update(data[0])     print shaB.hexdigest()      #Test pickling     sha_pickle = cPickle.dumps(shaB -1)     print "Pickle length:" len(sha_pickle)     shaC = cPickle.loads(sha_pickle)      shaC.update(data[1])     print shaC.hexdigest()      #Test copying. Note that copy can be pickled     shaD = shaC.copy()      shaC.update(data[2])     print shaC.hexdigest()       #Verify against hashlib.sha256()     print "\nhashlib\n"      shaD = hashlib.sha256(''.join(data))     print shaD.hexdigest()     print repr(shaD.digest())     print "digest size =" shaD.digest_size     print      shaE = hashlib.sha256(data[0])     print shaE.hexdigest()      shaE.update(data[1])     print shaE.hexdigest()      #Test copying. Note that hashlib copy can NOT be pickled     shaF = shaE.copy()     shaF.update(data[2])     print shaF.hexdigest()   if __name__ == '__main__':     main()  #! /usr/bin/env python  ''' Resumable SHA-256 hash for large files using the OpenSSL crypto library      The hashing process may be interrupted by Control-C (SIGINT) or SIGTERM.     When a signal is received hashing continues until the end of the     current chunk then the current file position total file size and     the sha object is saved to a file. The name of this file is formed by     appending '.hash' to the name of the file being hashed.      Just re-run the program to resume hashing. The '.hash' file will be deleted     once hashing is completed.      Written by PM 2Ring 2014.11.14 '''  import cPickle as pickle import os import signal import sys  import rehash  quit = False  blocksize = 1&lt;&lt;16   # 64kB blocksperchunk = 1&lt;&lt;8  chunksize = blocksize * blocksperchunk  def handler(signum frame):     global quit     print "\nGot signal %d cleaning up." % signum     quit = True   def do_hash(fname filesize):     hashname = fname + '.hash'     if os.path.exists(hashname):         with open(hashname 'rb') as f:             pos fsize sha = pickle.load(f)         if fsize != filesize:             print "Error: file size of '%s' doesn't match size recorded in '%s'" % (fname hashname)             print "%d != %d. Aborting" % (fsize filesize)             exit(1)     else:         pos fsize sha = 0 filesize rehash.sha256()      finished = False     with open(fname 'rb') as f:         f.seek(pos)         while not (quit or finished):             for _ in xrange(blocksperchunk):                 block = f.read(blocksize)                 if block == '':                     finished = True                     break                 sha.update(block)              pos += chunksize             sys.stderr.write(" %6.2f%% of %d\r" % (100.0 * pos / fsize fsize))             if finished or quit:                 break      if quit:         with open(hashname 'wb') as f:             pickle.dump((pos fsize sha) f -1)     elif os.path.exists(hashname):         os.remove(hashname)      return (not quit) pos sha.hexdigest()   def main():     if len(sys.argv) != 2:         print "Resumable SHA-256 hash of a file."         print "Usage:\npython %s filename\n" % sys.argv[0]         exit(1)      fname = sys.argv[1]     filesize = os.path.getsize(fname)      signal.signal(signal.SIGINT handler)     signal.signal(signal.SIGTERM handler)      finished pos hexdigest = do_hash(fname filesize)     if finished:         print "%s  %s" % (hexdigest fname)     else:         print "sha-256 hash of '%s' incomplete" % fname         print "%s" % hexdigest         print "%d / %d bytes processed." % (pos filesize)   if __name__ == '__main__':     main()  import rehash import pickle sha=rehash.sha256("Hello ") s=pickle.dumps(sha.ctx) sha=rehash.sha256() sha.ctx=pickle.loads(s) sha.update("World") print sha.hexdigest()  a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e  
import pylab pylab.show()  ipython -pylab pylab import matplotlib.pyplot as plt  plt.plot([123])  plt.show()  
&gt;&gt;&gt; import urlparse &gt;&gt;&gt; urlparse.urljoin("ftp://domain.com/a/b/c/d/" "../..") 'ftp://domain.com/a/b/' &gt;&gt;&gt; urlparse.urljoin("ftp://domain.com/a/b/c/d/e.txt" "../..") 'ftp://domain.com/a/b/'      urljoin / / os.path posixpathnormpath 
#!/usr/bin/python  python apache cgi 
import ctypes from ctypes.util import find_library libc = ctypes.CDLL(find_library('c'))  userpointer = ctypes.c_void_p() sizeimage = 320*240*2  if libc.posix_memalign(ctypes.byref(userpointer) libc.getpagesize()                        sizeimage) != 0:     raise Exception('ENOMEM')  
.strings # -*- coding: utf-8 -*- import codecs  for line in codecs.open(u'your_file.strings' encoding='utf-16'):     if u'keyword' in line:        # process line  
pip freeze virtualenv 
import myDict print myDict.airportCode  from myDict import airportCode print airportCode  __init__.py 
communicate communicate stdout stderr stdout stderr pexpect 
_() django.utils.functional.__proxy__ unicode() __proxy__ __unicode__ return unicode(self.desc) gettext 
join 
sFields = gp.ListFields(linktofeatureclass) for field in sFields:     print field.Name field.Type field.Scale  
sudo su    cd /usr/lib/pyshared/python2.6  mv _gv.so _gv.so-  ln -s libgv_python.so _gv.so  sys.path.append('/usr/lib/pyshared/python2.6')  
def makeExpr(ch):     expr = Word(ch).setParseAction(lambda tokens: [chlen(tokens[0])])     return expr  expr = Each([Optional(makeExpr(ch)) for ch in "abc"])  for t in tests:     print texpr.parseString(t).asList()  
threading.py &gt;&gt;&gt; import threading &gt;&gt;&gt; class SessionManager(threading.Thread threading._RLock dict): pass ...  &gt;&gt;&gt; s = SessionManager() &gt;&gt;&gt; s.start() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/threading.py" line 469 in start     _limbo[self] = self TypeError: unhashable type: 'SessionManager'  threading.py def __eq__(self other): return self is other def __hash__(self): return hash(id(self))  
operator.itemgetter import operator line=''.join(map(strrange(11))) print(line) # 012345678910 alist=line.split('') print(alist) # ['0' '1' '2' '3' '4' '5' '6' '7' '8' '9' '10'] onefourten=operator.itemgetter(1410)(alist) print(onefourten) # ('1' '4' '10')  
sys.setrecursionlimit() 
import sys  try:     f = open('myfile.txt')     s = f.readline()     i = int(s.strip())  except IOError as (errno strerror):     print "I/O error({0}): {1}".format(errno strerror) except ValueError:     print "Could not convert data to an integer." except:     print "Unexpected error:" sys.exc_info()[0]     raise  except sys.exc_info()[0] 
beamer listings \lstinputlisting[firstline=2lastline=5]{code/get_extent.py}  
a = [a00 a01.... ] #Readed take a list with 024... len(a) [15 will stop at 14] # then make a[i]*256 + a[i+1] so # a[0]*256+a[1] a[2]*256+a[3] ... a[14]*256+a[15] b = [ a[i]*256+a[i+1] for i in range(0len(a)2) ]  
#include &lt;boost/shared_ptr.hpp&gt; #include &lt;boost/python.hpp&gt; #include &lt;boost/python/signature.hpp&gt; #include &lt;boost/mpl/vector.hpp&gt;  #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;sstream&gt;  static boost::shared_ptr&lt;std::ostringstream&gt; test_stream_data;  std::ostringstream&amp; test_stream() {     if (!test_stream_data) {         test_stream_data.reset(new std::ostringstream);     }     return *test_stream_data; }   std::string get_value_and_clear_test_stream() {     std::string result;     if (test_stream_data) {         result = test_stream_data-&gt;str();     }     test_stream_data.reset(new std::ostringstream);     return result; }   std::string func(int a double b) {     std::ostringstream oss;     oss &lt;&lt; "func(a=" &lt;&lt; a &lt;&lt; " b=" &lt;&lt; b &lt;&lt; ")";     std::string result = oss.str();     test_stream() &lt;&lt; "- In " &lt;&lt; result &lt;&lt; std::endl;     return result; }   class MyClass { public:     MyClass(std::string p_name)         : m_name(p_name)     {         test_stream() &lt;&lt; "- In MyClass::MyClass(p_name=\"" &lt;&lt; p_name &lt;&lt; "\")" &lt;&lt; std::endl;     }      MyClass(MyClass const&amp; p_another)         : m_name(p_another.m_name)     {         test_stream()             &lt;&lt; "- In MyClass::MyClass(p_another=MyClass(\""             &lt;&lt; p_another.m_name &lt;&lt; "\"))" &lt;&lt; std::endl;     }      ~MyClass()     {         test_stream() &lt;&lt; "- In MyClass(\"" &lt;&lt; this-&gt;m_name &lt;&lt; "\")::~MyClass()" &lt;&lt; std::endl;     }      boost::shared_ptr&lt;MyClass&gt; clone_and_change(std::string p_new_name)     {         test_stream()             &lt;&lt; "- In MyClass(\"" &lt;&lt; this-&gt;m_name &lt;&lt; "\").clone_and_change(p_new_name=\""             &lt;&lt; p_new_name &lt;&lt; "\")" &lt;&lt; std::endl;          boost::shared_ptr&lt;MyClass&gt; result(new MyClass(*this));         result-&gt;m_name = p_new_name;          return result;     }      std::string get_name()     {         test_stream() &lt;&lt; "- In MyClass(\"" &lt;&lt; this-&gt;m_name &lt;&lt; "\").get_name()" &lt;&lt; std::endl;         return this-&gt;m_name;     }      std::string m_name; };   struct ScopePreAndPostActions {     ScopePreAndPostActions()     {         test_stream() &lt;&lt; "[Before action...]" &lt;&lt; std::endl;     }      ~ScopePreAndPostActions()     {         test_stream() &lt;&lt; "[After action...]" &lt;&lt; std::endl;     } };      template &lt;class FuncType_&gt; struct FuncWrapper;  // You can code-generate specializations for other arities...  template &lt;class R_ class A0_ class A1_&gt; struct FuncWrapper&lt;R_ (A0_ A1_)&gt; {     typedef R_ (*func_type)(A0_ A1_);      typedef typename boost::add_const&lt;typename boost::add_reference&lt;typename A0_&gt;::type&gt;::type AC0_;     typedef typename boost::add_const&lt;typename boost::add_reference&lt;typename A1_&gt;::type&gt;::type AC1_;      func_type m_wrapped_func;      FuncWrapper(func_type p_wrapped_func)         : m_wrapped_func(p_wrapped_func)     {     }      R_ operator()(AC0_ p0 AC1_ p1)     {         ScopePreAndPostActions actions_guard;         return this-&gt;m_wrapped_func(p0 p1);     } };  template &lt;     class R_     class C_     class A0_=void     class A1_=void     class A2_=void     // ... &gt; struct MemberFuncWrapper;  template &lt;class R_ class C_ class A0_&gt; struct MemberFuncWrapper&lt;R_ C_ A0_&gt; {     typedef R_ (C_::*member_func_type)(A0_);      typedef typename boost::add_const&lt;typename boost::add_reference&lt;typename A0_&gt;::type&gt;::type AC0_;      member_func_type m_wrapped_method;      MemberFuncWrapper(member_func_type p_wrapped_method)         : m_wrapped_method(p_wrapped_method)     {     }      R_ operator()(C_* p_self AC0_ p0)     {         ScopePreAndPostActions actions_guard;         return (p_self-&gt;*(this-&gt;m_wrapped_method))(p0);         return R_();     } };    namespace boost { namespace python { namespace detail {      // You can code-generate specializations for other arities...      template &lt;class R_ class P0_ class P1_&gt;     inline boost::mpl::vector&lt;R_ P0_ P1_&gt;     get_signature(FuncWrapper&lt;R_ (P0_ P1_)&gt; void* = 0)     {         return boost::mpl::vector&lt;R_ P0_ P1_&gt;();     }      template &lt;class R_ class C_ class P0_&gt;     inline boost::mpl::vector&lt;R_ C_* P0_&gt;     get_signature(MemberFuncWrapper&lt;R_ C_ P0_&gt; void* = 0)     {         return boost::mpl::vector&lt;R_ C_* P0_&gt;();     }  } } }  // -------------------------------------------------------------------  template &lt;class FuncPtr_&gt; void make_wrapper(FuncPtr_);  // You can code-generate specializations for other arities...  template &lt;class R_ class A0_ class A1_&gt; FuncWrapper&lt;R_ (A0_ A1_)&gt; make_wrapper(R_ (*p_wrapped_func)(A0_ A1_)) {     return FuncWrapper&lt;R_ (A0_ A1_)&gt;(p_wrapped_func); }  template &lt;class R_ class C_ class A0_&gt; MemberFuncWrapper&lt;R_ C_ A0_&gt; make_wrapper(R_ (C_::*p_wrapped_method)(A0_)) {     return MemberFuncWrapper&lt;R_ C_ A0_&gt;(p_wrapped_method); }  template &lt;class R_ class C_ class A0_ class A1_&gt; MemberFuncWrapper&lt;R_ C_ A0_ A1_&gt; make_wrapper(R_ (C_::*p_wrapped_method)(A0_ A1_)) {     return MemberFuncWrapper&lt;R_ C_ A0_ A1_&gt;(p_wrapped_method); }   using namespace boost::python;  void RegisterTestWrapper() {     def("GetValueAndClearTestStream" &amp;get_value_and_clear_test_stream);     def("TestFunc" &amp;func);     def(         "TestWrappedFunctor"         make_wrapper(&amp;func)     );      {         class_&lt; MyClass shared_ptr&lt;MyClass&gt; boost::noncopyable &gt; c("MyClass" init&lt;std::string&gt;());         c.def("CloneAndChange" &amp;MyClass::clone_and_change);         c.def("GetName" &amp;MyClass::get_name);         c.def("WrappedCloneAndChange" make_wrapper(&amp;MyClass::clone_and_change));     } }  import unittest from _test_wrapper import GetValueAndClearTestStream TestFunc TestWrappedFunctor MyClass  class Test(unittest.TestCase):      def setUp(self):         GetValueAndClearTestStream()      def testWrapper(self):         self.assertEqual(TestFunc(69 1.618) 'func(a=69 b=1.618)')         self.assertEqual(GetValueAndClearTestStream() '- In func(a=69 b=1.618)\n')          self.assertEqual(TestWrappedFunctor(69 1.618) 'func(a=69 b=1.618)')         self.assertEqual(             GetValueAndClearTestStream()             (                 '[Before action...]\n'                 '- In func(a=69 b=1.618)\n'                 '[After action...]\n'             )         )  def testWrappedMemberFunction(self):     from textwrap import dedent     x = MyClass("xx")     y = x.WrappedCloneAndChange("yy")     z = y.WrappedCloneAndChange("zz")      self.assertEqual(x.GetName() "xx")     self.assertEqual(y.GetName() "yy")     self.assertEqual(z.GetName() "zz")      self.assertEqual(         GetValueAndClearTestStream()         dedent('''\         - In MyClass::MyClass(p_name="xx")         [Before action...]         - In MyClass("xx").clone_and_change(p_new_name="yy")         - In MyClass::MyClass(p_another=MyClass("xx"))         [After action...]         [Before action...]         - In MyClass("yy").clone_and_change(p_new_name="zz")         - In MyClass::MyClass(p_another=MyClass("yy"))         [After action...]         - In MyClass("xx").get_name()         - In MyClass("yy").get_name()         - In MyClass("zz").get_name()         ''')     )  
import datetime  first=datetime.date(20091012) last=datetime.date(20091020) adate=first dates=[] while adate&lt;=last:     dates.append(adate)     adate+=datetime.timedelta(1) print(dates)  len=(last-first).days dates=[first+datetime.timedelta(n) for n in range(len+1)]  
&gt;&gt;&gt; import BeautifulSoup &gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;div id="articlebody"&gt; ... &lt;/div&gt;&lt;/body&gt;&lt;/html') &gt;&gt;&gt; soup.find("div" {"id": "articlebody"}) &lt;div id="articlebody"&gt; ... &lt;/div&gt;  &lt;div&gt; &lt;div&gt; &gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;div&gt;&lt;div id="articlebody"&gt; ... &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html') &gt;&gt;&gt; soup.find("div" {"id": "articlebody"}) &lt;div id="articlebody"&gt; ... &lt;/div&gt;  
type-&gt;tp_init type-&gt;tp_init type-&gt;tp_new type-&gt;tp_init tp_init PyObject_Call*() PyFoo_New() PyImport_Import() PyObject_GetAttrString() PyObject_Call*() PyObject * 
import re  reexpr = r"""     (                           # Capture code         "(?:\\.|[^"\\])*"       # String literal         |         '(?:\\.|[^'\\])*'       # String literal         |         (?:[^/\n"']|/[^/*\n"'])+ # Any code besides newlines or string literals         |         \n                      # Newline     )|     (/\*  (?:[^*]|\*[^/])*   \*/)        # Multi-line comment     |     (?://(.*)$)                 # Comment     $""" rx = re.compile(reexpr re.VERBOSE + re.MULTILINE)  code = r"""// this is a comment var x = 2 * 4 // and this is a comment too var url = "http://www.google.com/" // and "this" too url += 'but // this is not a comment' // however this one is url += 'this "is not a comment' + " and ' neither is this " // only this  bar = 'http://no.comments.com/' // these // are // comments bar = 'text // string \' no // more //\\' // comments bar = 'http://no.comments.com/' bar = /var/ // comment  /* comment 1 */ bar = open() /* comment 2 */ bar = open() /* comment 2b */// another comment bar = open( /* comment 3 */ file) // another comment  """  parts = rx.findall(code) print '*' * 80 '\nCode:\n\n' '\n'.join([x[0] for x in parts if x[0].strip()]) print '*' * 80 '\nMulti line comments:\n\n' '\n'.join([x[1] for x in parts if x[1].strip()]) print '*' * 80 '\nOne line comments:\n\n' '\n'.join([x[2] for x in parts if x[2].strip()])  
&gt;&gt;&gt; re.split('(\W)' 'foo/bar spam\neggs') ['foo' '/' 'bar' ' ' 'spam' '\n' 'eggs']  
status = db.query("INSERT INTO users ...") if (!status):     raise Error db.error  raise Error db.error user = User('Boda Cydo') session.add(user) session.commit()  help(sqlalchemy.exc) help(sqlalchemy.orm.exc) sqlalchemy.exc ArgumentError CircularDependencyError CompileError ConcurrentModificationError DBAPIError statement params orig DataError DataError DatabaseError DatabaseError DisconnectionError PoolListener FlushError IdentifierError IntegrityError IntegrityError InterfaceError InterfaceError InternalError InternalError InvalidRequestError NoReferenceError ForeignKey NoReferencedColumnError ForeignKey Column NoReferencedTableError ForeignKey Table NoSuchColumnError RowProxy NoSuchTableError NotSupportedError NotSupportedError OperationalError OperationalError ProgrammingError ProgrammingError SADeprecationWarning SAPendingDeprecationWarning SAWarning SQLAlchemyError SQLError TimeoutError UnboundExecutionError UnmappedColumnError sqlalchemy.orm.exc ConcurrentModificationError FlushError flush() MultipleResultsFound NoResultFound ObjectDeletedError refresh() UnmappedClassError UnmappedColumnError UnmappedError UnmappedInstanceError 
class Foo(object):     pass  class Bar(object):     pass  dispatch_dict = {"Foo": Foo "Bar": Bar} dispatch_dict["Foo"]() # returns an instance of Foo  
def outerfunc(calltheinner=True):     def innerfunc():         do_something()     if calltheinner:         return innerfunc()     else:         return innerfunc  
class Product(models.Model):     # ...     availability = models.IntegerField(help_text="(updated on save)")      # Use Seth's save()     def save(self *args **kwargs):         self.availability = self.inventory - self.commited         super(Product self).save(*args **kwargs)  
return super(Parent cls).__new__(cls *args **kwargs)  bases 
if __name__=='__main__' #.... def start():     global download_worker     download_worker = Process(target=downloader args=(url_queue page_queue))     download_worker.start()  import module if __name__=='__main__':     module.start()     module.url_queue.put('http://foobar1')     #....  
try:   1/0 except ZeroDivisionError:   pass  
self.mainListContent[:] = [new list of widgets]  
def classStream(clazz: Class[_]): Stream[Class[_]] = clazz match {   case null =&gt; Stream.empty   case _ =&gt; (     clazz      #:: classStream(clazz.getSuperclass)      #::: clazz.getInterfaces.toStream.flatMap(classStream)      #::: Stream.empty   ) }  def classStream(clazz: Class[_]): Stream[Class[_]] = clazz match {   case null =&gt; Stream.empty   case _ =&gt; (     clazz      #:: { println(clazz.toString+": super"); classStream(clazz.getSuperclass) }      #::: { println(clazz.toString+": interfaces"); clazz.getInterfaces.toStream.flatMap(classStream) }      #::: Stream.empty   ) }  Iterator .iterator Stream def classIterator(clazz: Class[_]): Iterator[Class[_]] = classStream(clazz).iterator  foo Stream scala&gt; def foo(i: Int): Stream[Int] = i #:: (if (i &gt; 0) foo(i - 1) else Stream.empty) foo: (i: Int)Stream[Int]  scala&gt; foo(5) foreach println 5 4 3 2 1 0  def yieldClass(clazz: Class[_]): Iterator[Class[_]] = clazz match {   case null =&gt; println("empty"); Iterator.empty   case _ =&gt;     def thisIterator = { println("self of "+clazz); Iterator(clazz) }     def superIterator = { println("super of "+clazz); yieldClass(clazz.getSuperclass) }     def interfacesIterator = { println("interfaces of "+clazz); clazz.getInterfaces.iterator flatMap yieldClass }     thisIterator ++ superIterator ++ interfacesIterator }  sudoYield 
seenpositions = set() currentpositions = set([startingposition]) while currentpositions:   nextpositions = set()   for p in currentpositions:     seenpositions.add(p)     succ = possiblesuccessors(p)     for np in succ:       if np in seenpositions: continue       if isending(np): raise FoundSolution(np)       nextpositions.add(np)   currentpositions = nextpositions raise NoSolutionExists()  possiblesuccessors isending 
safe escape autoescape {% autoescape on %} {% autoescape off %} 
self = Test(3) self self.__dict__ __slots__ self.__init__(3) self.restart(3) 
Image.open()  
# The following two classes are toys both have a playWith  # as you wanted each playWith do different things class Ball:     def __init__(self):         self.name = "ball"      def playWith(self):         print "the ball bounces"  class Car:     def __init__(self):         self.name = "car"      def playWith(self):         print "the car is fast"  # This is a Python generator every time .next() is called on it # the next "yield-value" is returned def generator():     while True:         yield Ball()         yield Car()  # This is the creator it has to be a class rather than a function # since you wanted a new toy each time getNewToy is called # and as such the generator needs to be tracked class ToyCreator:     def __init__(self):         self.generator = generator()      def getNewToy(self):         return self.generator.next()  # Create five toys print their name and play with them # Do note here that even though we ask for five toys but only have # two "yields" in the generator the generator "wraps around" (since # internally its just an endless loop)  toyCreator = ToyCreator() for i in range(5):     toy = toyCreator.getNewToy()     print "Toy"itoy.name"\t:"     toy.playWith()  
'''Example that demonstrates keeping track of multiple key events''' from Tkinter import *  class Playfield:     def __init__(self):         # this dict keeps track of keys that have been pressed but not         # released         self.pressed = {}          self._create_ui()      def start(self):         self._animate()         self.root.mainloop()      def _create_ui(self):         self.root = Tk()         self.p1label = Label(text="press w s to move player 1 up down"                               anchor="w")         self.p2label = Label(text="press o l to move player 2 up down"                               anchor="w")         self.canvas = Canvas(width=440 height=440)         self.canvas.config(scrollregion=(-20 -20 420 420))          self.p1label.pack(side="top" fill="x")         self.p2label.pack(side="top" fill="x")         self.canvas.pack(side="top" fill="both" expand="true")          self.p1 = Paddle(self.canvas tag="p1" color="red" x=0 y=0)         self.p2 = Paddle(self.canvas tag="p2" color="blue" x=400 y=0)          self._set_bindings()      def _animate(self):         if self.pressed["w"]: self.p1.move_up()         if self.pressed["s"]: self.p1.move_down()         if self.pressed["o"]: self.p2.move_up()         if self.pressed["l"]: self.p2.move_down()         self.p1.redraw()         self.p2.redraw()         self.root.after(10 self._animate)      def _set_bindings(self):         for char in ["w""s""o" "l"]:             self.root.bind("&lt;KeyPress-%s&gt;" % char self._pressed)             self.root.bind("&lt;KeyRelease-%s&gt;" % char self._released)             self.pressed[char] = False      def _pressed(self event):         self.pressed[event.char] = True      def _released(self event):         self.pressed[event.char] = False  class Paddle():     def __init__(self canvas tag color="red" x=0 y=0):         self.canvas = canvas         self.tag = tag         self.x = x         self.y = y         self.color = color         self.redraw()      def move_up(self):         self.y = max(self.y -2 0)      def move_down(self):         self.y = min(self.y + 2 400)      def redraw(self):         x0 = self.x - 10         x1 = self.x + 10         y0 = self.y - 20         y1 = self.y + 20         self.canvas.delete(self.tag)         self.canvas.create_rectangle(x0y0x1y1tags=self.tag fill=self.color)  if __name__ == "__main__":     p = Playfield()     p.start()  
item = defaultvalue for item in my_iter:     pass  
using System; using System.IO; using System.Reflection; using IronPython.Hosting; using Microsoft.Scripting.Hosting; // we get access to Action and Func on .Net 2.0 through Microsoft.Scripting.Utils using Microsoft.Scripting.Utils;   namespace TestCallIronPython {     class Program     {         public static void Main(string[] args)         {             Console.WriteLine("Hello World!");             ScriptEngine pyEngine = Python.CreateEngine();              Assembly myclass = Assembly.LoadFile(Path.GetFullPath("MyClass.dll"));             pyEngine.Runtime.LoadAssembly(myclass);             ScriptScope pyScope = pyEngine.Runtime.ImportModule("MyClass");              // Get the Python Class             object MyClass = pyEngine.Operations.Invoke(pyScope.GetVariable("MyClass"));              // Invoke a method of the class             pyEngine.Operations.InvokeMember(MyClass "somemethod" new object[0]);              // create a callable function to 'somemethod'             Action SomeMethod2 = pyEngine.Operations.GetMember&lt;Action&gt;(MyClass "somemethod");             SomeMethod2();              // create a callable function to 'isodd'             Func&lt;int bool&gt; IsOdd = pyEngine.Operations.GetMember&lt;Func&lt;int bool&gt;&gt;(MyClass "isodd");             Console.WriteLine(IsOdd(1).ToString());             Console.WriteLine(IsOdd(2).ToString());              Console.Write("Press any key to continue . . . ");             Console.ReadKey(true);         }     } }  class MyClass:     def __init__(self):         print "I'm in a compiled class (I hope)"      def somemethod(self):         print "in some method"      def isodd(self n):         return 1 == n % 2  clr.CompileModules MyClass.dll Hello World! I'm in a compiled class (I hope) in some method in some method True False Press any key to continue . . .  
"Field1""Field2" "Field1""""Field2" 
unittest.TestCase test RunTest RunTest test_RunTest class TestPing(unittest.TestCase):     def test_RunTest(self):          add code here  test_RunTest self func(args) self.assertRaises self.assertRaises(AssertionError func args)  func True False self.assertTrue self.assertFalse 
_should_cover_frame testoob Coverage from testoob.coverage import Coverage orig_should_cover = Coverage._should_cover_frame def my_should_cover_frame(self frame):     from os.path import abspath     filename = abspath(frame.f_code.co_filename)     if filename.find('my_module') == -1:         return False     else:         return orig_should_cover(self frame) Coverage._should_cover_frame = my_should_cover_frame  
#! /usr/bin/perl -i.bak     use warnings; use strict; my $template =   '^( public       String       Get)(\w+)( \( \) { return         m_ParsedValue . get \( m_Tags . get \( )(\d+)( \) \) ; } )$'; $template =~ s/ +/\\s*/g; $template =~ s/(\r?\n)+/\\s+/g; my $getter = qr/$template/x;  die "Usage: $0 after new-name source ..\n" unless @ARGV &gt;= 3; my $after = shift; my $add   = shift; my $index; while (&lt;&gt;) {   unless (/$getter/) {     print;     next;   }   my($abc$name$lmno$i$xyz) = ($1$2$3$4$5);   if (defined $index) {     print join "" =&gt; $abc $name $lmno ++$index $xyz;   }   else {     if ($name eq $after) {       $index = $i;       print; print join "" =&gt; $abc $add $lmno ++$index $xyz;     }     else { print; }   } }  
from django.contrib.auth.decorators import login_required from django.views.generic.simple import direct_to_template urlpatterns = patterns(''     (r'^foo/$' login_required(direct_to_template) {'template': 'foo_index.html'})     )  login_required login_required(TemplateView.as_view(template_name='foo_index.html'))  
SyntaxError try:     eval("1 + 2) + 3") except SyntaxError:     pass  
\bin python setup.py install  
plt.xlabel(u'\u03bc = 50') plt.ylabel(u'\u03c3 = 1.5')  
/var/lib/rabbitmq routing_key 
my_list=[123] [print my_item for my_item in my_list]  
&gt;&gt;&gt; s = 'bar' &gt;&gt;&gt; s[2] = 'z' Traceback (most recent call last):    File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: 'str' object does not support item assignment  
utctime = datetime.datetime(160111) + datetime.timedelta(microseconds = ms hours =-5)  def getcr():     connection = sqlite3.connect('/Users/someuser/Documents/tmp/Chrome/History')     cursor = connection.cursor()     get_time = list(cursor.execute("""SELECT last_visit_time FROM urls"""))     get_url = list(cursor.execute("""SELECT url from urls"""))     stripped_time = []     crf = open ('/Users/someuser/Documents/tmp/cr/cr_hist.txt''w' )     itr = iter(get_time)     itr2 = iter(get_url)      while True:         try:             newdate = str(itr.next())             stripped1 = newdate.strip(' ()L')             ms = int(stripped1)             utctime = datetime.datetime(160111) + datetime.timedelta(microseconds = ms hours =-5)             stripped_time.append(str(utctime))             newurl = str(itr2.next())             stripped_url = newurl.strip(' ()')             stripped_time.append(str(stripped_url))             crf.write('\n')             crf.write(str(utctime))             crf.write('\n')             crf.write(str(newurl))             crf.write('\n')             crf.write('\n')             crf.write('********* Next Entry *********')              crf.write('\n')         except StopIteration:             break      crf.close()                  shutil.copy('/Users/someuser/Documents/tmp/cr/cr_hist.txt'  '/Users/parent/Documents/Chrome_History_Logs')     os.rename('/Users/someuser/Documents/Chrome_History_Logs/cr_hist.txt''/Users/someuser/Documents/Chrome_History_Logs/%s.txt' % formatdate)  
my_new_list = my_list[:]  
(SELECT * FROM (   SELECT     RANK() OVER (ORDER BY Score desc Karma desc) AS ranking     Id     Username     Score karma   FROM Players  ) AS players_ranked_by_score where Id = id_of_user   (SELECT * FROM (   SELECT     RANK() OVER (ORDER BY Score desc Karma desc) AS ranking     Id     Username     Score karma   FROM Players  ) AS all_players_ranked where ranking &gt;= player_ranking - 2 and ranking &lt;= player_ranking + 2;  
STATUS_CHOICES choices PENDING = 0 DONE = 1 STATUS_CHOICES = (     (PENDING 'Pending')     (DONE 'Done') )  order.status = Order.DONE get_status_display 
dbus.service.method async_callbacks @dbus.service.method('fm.last.api.account' out_signature="s"                      async_callbacks=("callback" "errback")) def getUsername(self callback errback):     reactor.callLater(3 callback "alice")  d.addCallbacks(callback errback)  dbus.service.method async_callbacks dbus.service.method 
class BaseHandler(webapp.RequestHandler):   def error(self code):     super(BaseHandler self).error(code)     if code == 404:       # Output 404 page  class MyHandler(BaseHandler):   def get(self some_id):     some_obj = SomeModel.get_by_id(some_id)     if not some_obj:       self.error(404)       return     # ...  class Error404Handler(BaseHandler):   def get(self):     self.error(404)  
AssertionError ValueError 
l = [('a' 1) ('b' 2) ('c' 3)] k = 1 l_without_num = l[:k] + l[(k + 1):]  
fbdata = request.facebook.users.getInfo(request.facebook.uid                                          ['name' 'pic' 'interests'])  
query = urllib.parse.urlencode({'q' : 'searchterm''start' : k}doseq=false) url = 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;%s' \              % (query) results = urllib.urlopen(url) encoding = input.getheader('content-type').split('=')[-1] resultsjson = json.loads(results.read().decode(encoding)) betterResults += resultsjson["responseData"]["results"]  
r"'(''|[^'])*'"  
def twoPointCrossover(self partner):         #at two random(?) points crossover.         pass  
random.seed random.Random() &gt;&gt;&gt; import random &gt;&gt;&gt; seed=1234 &gt;&gt;&gt; n=10 &gt;&gt;&gt; random.Random(seed).sample(range(1000)n) [966 440 7 910 939 582 671 83 766 236] &gt;&gt;&gt;   
&gt;&gt;&gt; import httplib &gt;&gt;&gt; conn = httplib.HTTPConnection("mydomain.com") &gt;&gt;&gt; conn.request("HEAD" "/thevideofile.mp4") &gt;&gt;&gt; res = conn.getresponse() &gt;&gt;&gt; print res.getheaders()  
export dbus-launch os.environ p = subprocess.Popen('dbus-launch' shell=True stdout=subprocess.PIPE stderr=subprocess.STDOUT) for var in p.stdout:   sp = var.split('=' 1)   print sp   os.environ[sp[0]] = sp[1][:-1]  
set /p var=&lt;file  c:\python27\bin\python.exe myscript.py  @echo off set /p var=&lt;test.py call %var:~2% test.py  C:\test&gt;more test1.py #!c:\Python26\python.exe  print "hello"   C:\test&gt;more test.bat @echo off set /p var=&lt;test1.py call %var:~2% test1.py  C:\test&gt;test.bat hello  
example def example(f):   return f  example 
&lt;form action="" method="post"&gt; &lt;input type="text" name="email" /&gt; &lt;/form&gt;  pylons.url.current() 
{% load i18n %} {% trans %} _ django-admin.py makemessages -l cn locale/cn/LC_MESSAGES/django.po msgid "Hello!" msgstr "" msgstr "nihao" msgid django-admin.py compilemessages 
numpy.histogram() numpy.histogram(a bins=10 range=None normed=False weights=None new=None)  a bins a bins num_bins import numpy values = numpy.arange(10 dtype=int) bins = numpy.arange(-1 11) freq bins = numpy.histogram(values bins) # freq is now [0 1 1 1 1 1 1 1 1 1 1] # bins is unchanged  bins [1 2 3 4]  [1 2) [2 3) [3 4] numpy.digitize() numpy.bincount() &gt;&gt;&gt; values = numpy.random.randint(0 20 10) &gt;&gt;&gt; values array([17 14  9  7  6  9 19  4  2 19]) &gt;&gt;&gt; bins = numpy.linspace(-1 21 23) &gt;&gt;&gt; bins array([ -1.   0.   1.   2.   3.   4.   5.   6.   7.   8.   9.         10.  11.  12.  13.  14.  15.  16.  17.  18.  19.  20.         21.]) &gt;&gt;&gt; pos = numpy.digitize(values bins) &gt;&gt;&gt; pos array([19 16 11  9  8 11 21  6  4 21])  &gt;&gt;&gt; (bins[pos-1] == values).all() True &gt;&gt;&gt; import sys &gt;&gt;&gt; for n in range(len(values)): ...     sys.stdout.write("%g &lt;= %g &lt; %g\n" ...             %(bins[pos[n]-1] values[n] bins[pos[n]])) 17 &lt;= 17 &lt; 18 14 &lt;= 14 &lt; 15 9 &lt;= 9 &lt; 10 7 &lt;= 7 &lt; 8 6 &lt;= 6 &lt; 7 9 &lt;= 9 &lt; 10 19 &lt;= 19 &lt; 20 4 &lt;= 4 &lt; 5 2 &lt;= 2 &lt; 3 19 &lt;= 19 &lt; 20  
'D:\\zjm_code\\register2' sys.path register2 'D:\\zjm_code' sys.path 'D:\\zjm_code\\register2\\__init__.py' __init__.py 
register2 register2\\locale 
PYTHONPATH ~/.bashrc .BAT .CMD PYTHONPATH site-packages sys.path sitecustomize.py sys.path sitecustomize.py 
def fileOrRandom():   return raw_input("Would you like to read from file or random list? (A or B): ")  while True :     choice=raw_input("Your choice: ")     for i in range(2):      if choice==i+1 and fileOrRandom()=="A" :        fileName=raw_input("Please Enter The Name of the File to sort: ")        sorter = choices[choice](fileName)        sorter.timedSort(sorter.sort)      elif choice==i+1 and fileOrRandom()=="B" :        num = raw_input("How many random numbers would you like to sort: ")        sorter = choices[choice](Nonenum)        sorter.timedSort(sorter.sort)      elif choice in ['q''Q']: break      else: print "Bad choice"  
sys.platform win32 PC/pyconfig.h #if defined(MS_WIN64) /* maintain "win32" sys.platform for backward compatibility of Python code    the Win64 API should be close enough to the Win32 API to make this    preferable */ #       define PLATFORM "win32"  
__init__ __init__ __init__ __new__ __init__ __new__ 
os.execv stdin stdout stderr stdin execv stdin subprocess stdin stdout 
TarFile.addfile(tarinfo fileobj=None)  TarInfo.mtime Time of last modification.  TarInfo.uid User ID of the user who originally stored this member.  TarInfo.gid Group ID of the user who originally stored this member.  
 newString = oldString[:oldString[:-1].rfind('/')]  # strip out trailing slash    ----^       ^---- find last remaining slash  
A'=AX|M # === birthday.py =========================================== # from math import log10 factorial  PV=4500          # Number of possible values SS=100           # Sample size  # These intermediate results are exceedingly large numbers; # Python automatically starts using bignums behind the scenes. # numerator = factorial (PV)           denominator = (PV ** SS) * factorial (PV - SS)  # Now we need to get from bignums to floats without intermediate # values too large to cast into a double.  Taking the logs and  # subtracting them is equivalent to division. #   log_prob_no_pair = log10 (numerator) - log10 (denominator)  # We've just calculated the log of the probability that *NO* # two matching pairs occur in the sample.  The probability # of at least one collision is 1.0 - the probability that no  # matching pairs exist. # print 1.0 - (10 ** log_prob_no_pair)  
from distutils import sysconfig site_packages_path = sysconfig.get_python_lib()  setup(...   data_files=[(site_packages_path ["mypackage.pth"])]  )  
fread array f = open(...) import array a = array.array("L")  # L is the typecode for uint32 a.fromfile(f 3)  f a fromfile .tolist() 
__cmp__(xy) x &lt; y x &gt; y x == y __eq__(x y) 
randint 
#!/usr/bin/env python  import httplib c = httplib.HTTPSConnection("ccc.de") c.request("GET" "/") response = c.getresponse() print response.status response.reason data = response.read() print data # =&gt;  # 200 OK # &lt;!DOCTYPE html ....  &gt;&gt;&gt; import socket &gt;&gt;&gt; socket.ssl &lt;function ssl at 0x4038b0&gt;  
and or 
stdout print if size &lt; 0:     print 'size must be non-negative' else:     print size * 4  yours.py sum_all_lines.sh yours.py sum_all_lines.sh 
-Wall -Wno-uninitialized _save PyThreadState *_save;  _save = 0; /* init as null pointer value */ _save = PyEval_SaveThread();  
getpage.py dlpage.py getPage getPage 
from xml.parsers.xmlproc import dtdparser  attr_separator = '_' child_separator = '_'  dtd = dtdparser.load_dtd('schedule.dtd')  for name element in dtd.elems.items():     for attr in element.attrlist:         output = '%s%s%s = ' % (name attr_separator attr)         print output     for child in element.get_valid_elements(element.get_start_state()):         output = '%s%s%s = ' % (name child_separator child)         print output  
def initSock():     message = ""     for i in range(MAX_TRIES):         try:             #...socket opening code         except socket.error (value message):             message = message         else:             print "Connected"             return sock     print "Could not open socket: " + message     sys.exit(1)  
import json list = [1 2 (3 4)] # Note that the 3rd element is a tuple (3 4) json.dumps(list) # '[1 2 [3 4]]'  
values_list Model.objects.filter(...).values_list('name' flat=True)  values_list 
result = numpy.where(x == y x 0)  numpy.where numpy.where(a b c) a a b c a b c x &amp; y x y x = numpy.array([2**p for p in xrange(10)]) # x is [  1   2   4   8  16  32  64 128 256 512] y = x - 1 # y is [  0   1   3   7  15  31  63 127 255 511] x &amp; y # result: [0 0 0 0 0 0 0 0 0 0]  x 1 n y n a b a &amp; b a b 
from xml.etree import cElementTree as ElementTree  class XmlListConfig(list):     def __init__(self aList):         for element in aList:             if element:                 # treat like dict                 if len(element) == 1 or element[0].tag != element[1].tag:                     self.append(XmlDictConfig(element))                 # treat like list                 elif element[0].tag == element[1].tag:                     self.append(XmlListConfig(element))             elif element.text:                 text = element.text.strip()                 if text:                     self.append(text)   class XmlDictConfig(dict):     '''     Example usage:      &gt;&gt;&gt; tree = ElementTree.parse('your_file.xml')     &gt;&gt;&gt; root = tree.getroot()     &gt;&gt;&gt; xmldict = XmlDictConfig(root)      Or if you want to use an XML string:      &gt;&gt;&gt; root = ElementTree.XML(xml_string)     &gt;&gt;&gt; xmldict = XmlDictConfig(root)      And then use xmldict for what it is... a dict.     '''     def __init__(self parent_element):         if parent_element.items():             self.update(dict(parent_element.items()))         for element in parent_element:             if element:                 # treat like dict - we assume that if the first two tags                 # in a series are different then they are all different.                 if len(element) == 1 or element[0].tag != element[1].tag:                     aDict = XmlDictConfig(element)                 # treat like list - we assume that if the first two tags                 # in a series are the same then the rest are the same.                 else:                     # here we put the list in dictionary; the key is the                     # tag name the list elements all share in common and                     # the value is the list itself                      aDict = {element[0].tag: XmlListConfig(element)}                 # if the tag has attributes add those to the dict                 if element.items():                     aDict.update(dict(element.items()))                 self.update({element.tag: aDict})             # this assumes that if you've got an attribute in a tag             # you won't be having any text. This may or may not be a              # good idea -- time will tell. It works for the way we are             # currently doing XML configuration files...             elif element.items():                 self.update({element.tag: dict(element.items())})             # finally if there are no child tags and no attributes extract             # the text             else:                 self.update({element.tag: element.text})  tree = ElementTree.parse('your_file.xml') root = tree.getroot() xmldict = XmlDictConfig(root)  root = ElementTree.XML(xml_string) xmldict = XmlDictConfig(root)  
openid.store 
import os sys os.environ['ETS_TOOLKIT'] = 'qt4'  from PyQt4 import QtGui app = QtGui.QApplication(sys.argv) from numpy import linspace pi sin from enthought.enable.api import Component Container Window from enthought.chaco.api import create_line_plot \                                 add_default_axes \                                 add_default_grids \                                 OverlayPlotContainer   x = linspace(-pipi100) y = sin(x) plot = create_line_plot((xy)) add_default_grids(plot) add_default_axes(plot) container = OverlayPlotContainer(padding = 50) container.add(plot) plot_window = Window(None -1 component=container) plot_window.control.setWindowTitle('hello') plot_window.control.resize(400400) plot_window.control.show()  app.exec_()  
&gt;&gt;&gt; values = [1112] &gt;&gt;&gt; print [(xvalues.count(x)) for x in set(values)] [(1 3) (2 1)]  
&gt;&gt;&gt; my_pattern = '(?=(a.*?b.*?c))' &gt;&gt;&gt; my_regex = re.compile(my_pattern re.DOTALL|re.IGNORECASE) &gt;&gt;&gt; matches = my_regex.findall(string) &gt;&gt;&gt; print min(matches key=len) A|B|C  findall() min() 
for i in [x for x in dir(signal) if x.startswith("SIG")]:   try:     signum = getattr(signali)     signal.signal(signumsighandler)   except (OSError RuntimeError) as m: #OSError for Python3 RuntimeError for 2     print ("Skipping {}".format(i))  
asyncore glib glib 
urlmon.dll ctypes ctypes.windll.urlmon.URLDownloadToFileA(0urllocal_file_name00)  url local_file_name 
impost psycopg2  con = connect(...)  def save(long_blob):      cur = con.cursor()       long_data = struct.unpack('&lt;L' long_blob)       # grab the first result of the tuple      long_data = long_data[0]       cur.execute('insert into blob_records( blob_data ) values (%s)' [long_data])  
OneToOne 
ELF ELFCLASS32 
type type &gt;&gt;&gt; def m1(name bases atts): &gt;&gt;&gt;     print "m1 called for " + name &gt;&gt;&gt;     return type(name bases atts) &gt;&gt;&gt;  &gt;&gt;&gt; def m2(name bases atts): &gt;&gt;&gt;     print "m2 called for " + name &gt;&gt;&gt;     return type(name bases atts) &gt;&gt;&gt;  &gt;&gt;&gt; class c1(object): &gt;&gt;&gt;     __metaclass__ = m1 m1 called for c1  &gt;&gt;&gt; type(c1) &lt;type 'type'&gt;  &gt;&gt;&gt; class sub1(c1): &gt;&gt;&gt;     pass  &gt;&gt;&gt; type(sub1) &lt;type 'type'&gt;  &gt;&gt;&gt; class c2(object): &gt;&gt;&gt;     __metaclass__ = m2 m2 called for c2  &gt;&gt;&gt; class sub2(c1 c2): &gt;&gt;&gt;     pass  &gt;&gt;&gt; type(sub2) &lt;type 'type'&gt;  &gt;&gt;&gt; class M1(type): &gt;&gt;&gt;     def __new__(meta name bases atts): &gt;&gt;&gt;         print "M1 called for " + name &gt;&gt;&gt;         return super(M1 meta).__new__(meta name bases atts)  &gt;&gt;&gt; class C1(object): &gt;&gt;&gt;     __metaclass__ = M1 M1 called for C1  &gt;&gt;&gt; type(C1) &lt;class '__main__.M1'&gt;  &gt;&gt;&gt; class Sub1(C1): &gt;&gt;&gt;     pass M1 called for Sub1  &gt;&gt;&gt; type(Sub1) &lt;class '__main__.M1'&gt;  super() &gt;&gt;&gt; class M2(type): &gt;&gt;&gt;     def __new__(meta name bases atts): &gt;&gt;&gt;         print "M2 called for " + name &gt;&gt;&gt;         return super(M2 meta).__new__(meta name bases atts)  &gt;&gt;&gt; class C2(object): &gt;&gt;&gt;     __metaclass__ = M2 M2 called for C2  &gt;&gt;&gt; type(C2) &lt;class '__main__.M2'&gt;  &gt;&gt;&gt; class Sub2(C1 C2): &gt;&gt;&gt;     pass M1 called for Sub2 Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;stdin&gt;" line 23 in __new__ TypeError: Error when calling the metaclass bases     metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases  &gt;&gt;&gt; class M3(M1 M2): &gt;&gt;&gt;     def __new__(meta name bases atts): &gt;&gt;&gt;         print "M3 called for " + name &gt;&gt;&gt;         return super(M3 meta).__new__(meta name bases atts)  &gt;&gt;&gt; class C3(C1 C2): &gt;&gt;&gt;     __metaclass__ = M3 M3 called for C3 M1 called for C3 M2 called for C3  &gt;&gt;&gt; type(C3) &lt;class '__main__.M3'&gt;  super() __new__ type type 
&gt;&gt;&gt; p = re.compile("^[-\w]+$" re.DEBUG) at at_beginning max_repeat 1 65535   in     literal 45     category category_word at at_end &gt;&gt;&gt;  
signed_angle = atan2(b.yb.x) - atan2(a.ya.x)  
collections.deque rotate() from collections import deque items = deque([1 2]) items.append(3)        # deque == [1 2 3] items.rotate(1)        # The deque is now: [3 1 2] items.rotate(-1)       # Returns deque to original state: [1 2 3] item = items.popleft() # deque == [2 3]  
# Textview with inverted colors import gtk  tv = gtk.TextView() tv.modify_base(gtk.STATE_NORMAL gtk.gdk.color_parse('black')) tv.modify_text(gtk.STATE_NORMAL gtk.gdk.color_parse('white'))  
$5. 5. money = re.compile('|'.join([   r'^\$?(\d*\.\d{12})$'  # e.g. $.50 .50 $1.50 $.5 .5   r'^\$?(\d+)$'           # e.g. $500 $5 500 5   r'^\$(\d+\.?)$'         # e.g. $5. ]))  ^ $ \. \$ \$? \d \d* \d+ \d{12} matchobj.group(index) matchobj.groups() None (?:...) for test expected in tests:     result = money.match(test)      is_match = result is not None     if is_match == expected:       status = 'OK'       if result:         amt = [x for x in result.groups() if x is not None].pop()         status += ' (%s)' % amt     else:       status = 'Fail'     print test + '\t' + status  
class OrganizationalUnit(models.Model):     name = models.CharField(max_length=100)     parent = models.ForeignKey(         'self'         blank=True null=True         related_name='children'     )     checkout_number = models.IntegerField(default=0)  def pre_save_checkout(sender instance **kwargs):     if isinstance(instanceCheckout) and instance.id and instance.department:          substract_checkout(instance.department)  def post_save_checkout(sender instance **kwargs):     if isinstance(instanceCheckout) and instance.department:          add_checkout(instance.department)  def  substract_checkout(organizational_unit):     organizational_unit.checkout_number-=1     organizational_unit.save()     if organizational_unit.parent:         substract_checkout(organizational_unit.parent)  def  add_checkout(organizational_unit):     organizational_unit.checkout_number+=1     organizational_unit.save()     if organizational_unit.parent:         add_checkout(organizational_unit.parent)  from django.db.models.signals import post_save pre_save pre_delete  pre_save.connect(pre_save_checkout Checkout) pre_delete.connect(pre_save_checkout Checkout) post_save.connect(post_save_checkout Checkout)  
&gt;&gt;&gt; type(o.b) &lt;type 'lxml.objectify.StringElement'&gt;  &gt;&gt;&gt; o.b = objectify.E.b('newtext' atr='someatr')  &gt;&gt;&gt; o.b.text = 'newtext'  &gt;&gt;&gt; o.b._setText('newtext')  
tested_nodes=set() def solve_board(dfs_obj node):     if goal(node):  # only 1 peg!         print node         return node      for new_node in succ(node):         if tuple(new_node) not in tested_nodes:             tested_nodes.add(tuple(new_node))             print new_node             result = solve_board(new_node)             if result:  # True if it's a goal None otherwise                 return result  if def succ(self node):     size = len(node)      # find all legal moves going forward     for pos in range(size-2):         new_node = list(node)         if ((node[pos] == 1) and (node[pos+2] == 0)):             new_node[pos] = 0  # we're moving now             new_node[pos+2] = 1 # this is where we're moving the peg to             new_node[pos+1] = 0  # take out the peg here if there was one             yield new_node      # find all legal moves going backwards     for pos in range(1size):         new_node = list(node)         if ((node[pos] == 1) and (node[pos-2] == 0)):             new_node[pos] = 0  # we're moving now             new_node[pos-2] = 1 # this is where we're moving the peg             new_node[pos-1] = 0  # take out the peg here if there was one             yield new_node  def succ(self node):     for i in range(len(node)-2):         j=i+3         if node[i:j]==[110]:             yield node[:i]+[001]+node[j:]         if node[i:j]==[011]:             yield node[:i]+[100]+node[j:]         if node[i:j]==[100]:             yield node[:i]+[001]+node[j:]         if node[i:j]==[001]:             yield node[:i]+[100]+node[j:]  
except ExceptionType as varname: except ExceptionType varname: 
$.ajax({     method:"get"     url:"/main/"     dataType: "json"     data:"q="+query     beforeSend:function() {}     success:function(json){         $("#main").html(json.main);         $("#secondary").html(json.secondary);     } });  {     "main": "&lt;p&gt;{{ num_results }} you just searched for {{ query }}&lt;/p&gt;"     "secondary": "{{ num_results }}" }  
set.union &gt;&gt;&gt; results_list = [[123] [124]] &gt;&gt;&gt; results_union = set().union(*results_list) &gt;&gt;&gt; print(results_union) set([1 2 3 4])  
cmd = ["bash" 'childProc.sh'] p = subprocess.Popen(cmd stdout=subprocess.PIPE                            stderr=subprocess.STDOUT                            close_fds=True) time.sleep(3) print 'killing pid' p.pid os.kill(p.pid signal.SIGTERM) print "timed out and killed child collecting what output exists so far" out  = p.communicate()[0] print "got it" out  killing pid 5844 timed out and killed child collecting what output exists so far got it output line 0 output line 1 output line 2  
graphviz.py conf.py inheritance_graph_attrs = dict(size='""')  rankdir="TB" inheritance_graph_attrs = dict(rankdir="TB" size='""')  
handlers: - url: /media     static_dir: _generated_media  
boardPieces = [["A""O""A""A" "A"]["A""O""A""A" "A"]["A""O""A""A" "A"]["A""O""A""A" "A"]["A""O""A""A" "A"]]  
&gt;&gt;&gt; import itertools &gt;&gt;&gt; list(itertools.chain(*[(0 1) (1 2) (2 3)])) [0 1 1 2 2 3]  list(...) itertools.chain(G.edges_iter()) 
a = a[0] print a 3  sum &gt;&gt;&gt; a=[1] &gt;&gt;&gt; sum(a) 1 &gt;&gt;&gt; a=[123] &gt;&gt;&gt; sum(a) 6  
python $ python Python 2.6.4 (r264:75821M Oct 27 2009 19:48:32)  [GCC 4.0.1 (Apple Inc. build 5493)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; ^D  $ cd ~/Downloads   # substitute the appropriate directory name $ sh setuptools-0.6c11-py2.6.egg  
itertools from itertools import islice  def window(seq n=2):     "Returns a sliding window (of width n) over data from the iterable"     "   s -&gt; (s0s1...s[n-1]) (s1s2...sn) ...                   "     it = iter(seq)     result = tuple(islice(it n))     if len(result) == n:         yield result         for elem in it:         result = result[1:] + (elem)         yield result  for r1 r2 in window(dm_revisions):     summary = svn.diff_summarize(svn_path revision1=r1 revision2=r2)  def adjacent_pairs(seq):     it = iter(seq)     a = it.next()     for b in it:         yield a b         a = b  for r1 r2 in adjacent_pairs(dm_revisions):     summary = svn.diff_summarize(svn_path revision1=r1 revision2=r2)  
dict.key  {{ sc.name }}  dict dict sc name id {{ sc.name }} {{ sc.id }}  
&gt;&gt;&gt; lst = ['a' 'ab' 'abc' 'bac'] &gt;&gt;&gt; [k for k in lst if 'ab' in k] ['ab' 'abc']  filter &gt;&gt;&gt; filter(lambda k: 'ab' in k lst) ['ab' 'abc']  &gt;&gt;&gt; list(filter(lambda k: 'ab' in k lst)) ['ab' 'abc']  
import threading import socket  def start_server():     tick = 0     sock = socket.socket(socket.AF_INET socket.SOCK_STREAM)     sock.bind(('localhost' 1234))     sock.listen(100)     while True:         print 'listening...'         csock address = sock.accept()         tick+=1         print 'connection!'          handshake(csock tick)         print 'handshaken'         while True:             interact(csock tick)             tick+=1   def send_data(client str):     #_write(request '\x00' + message.encode('utf-8') + '\xff')     str = '\x00' + str.encode('utf-8') + '\xff'     return client.send(str) def recv_data(client count):     data = client.recv(count)         return data.decode('utf-8' 'ignore')  def handshake(client tick):     our_handshake = "HTTP/1.1 101 Web Socket Protocol Handshake\r\n"+"Upgrade:     WebSocket\r\n"+"Connection: Upgrade\r\n"+"WebSocket-Origin: http://localhost:8888\r\n"+"WebSocket-Location: "+" ws://localhost:1234/websession\r\n\r\n"     shake = recv_data(client 255)     print shake     #We want to send this without any encoding     client.send(our_handshake)  def interact(client tick):     data = recv_data(client 255)     print 'got:%s' %(data)     send_data(client "clock ! tick%d" % (tick))     send_data(client "out ! %s" %(data))  if __name__ == '__main__':     start_server()  
__dict__ class A(object):     pass  class B(A):     def __add__(self other):         return self.value + other   a = A() a.value = 5  a.__class__ = B  print a + 10  
&gt;&gt;&gt; import itertools &gt;&gt;&gt; [sum(x)/len(x) for x in itertools.izip(*a)] [4 5 6]  
str unicode unistring = "?????????" unistring = u"?????????" ? result = unistring[:1] 
def zipij(m=mem ms=mems):   return [(i m) if i &lt; m else (m i) for i in ms]  from itertools import repeat  mems = range(1 50000 2) mem = 8  def zipij7(m=mem ms=mems):   cpy = sorted(ms + [m])   loc = cpy.index(m)    return zip(ms[:(loc)] repeat(m)) + zip(repeat(m) ms[(loc):])  def zipinline(m=mem ms=mems):   return [(i m) if i &lt; m else (m i) for i in ms]  &gt;python -m timeit -s "import zipit" "zipit.zipinline()" 100 loops best of 3: 4.44 msec per loop  &gt;python -m timeit -s "import zipit" "zipit.zipij7()" 100 loops best of 3: 4.8 msec per loop  &gt;python -m timeit -s "import zipit random; random.shuffle(zipit.mems)" "zipit.zipinline()" 100 loops best of 3: 4.65 msec per loop  p&gt;python -m timeit -s "import zipit random; random.shuffle(zipit.mems)" "zipit.zipij7()" 100 loops best of 3: 17.1 msec per loop  
query = db.GqlQuery("SELECT * FROM EmailDatabase WHERE emailaddress = :1" self.request.get('emailaddress'))  :1 self.request.get('emailaddress') 
for o in re.finditer('left:102[0-9]"&gt;&lt;nobr&gt;(.*?)&lt;/nobr&gt;&lt;/div&gt;' words[index]):     out = o.group(1)  
more_itertools.consecutive_groups import more_itertools as mit   iterable = [2 3 4 5 12 13 14 15 16 17 20] [list(group) for group in mit.consecutive_groups(iterable)] # [[2 3 4 5] [12 13 14 15 16 17] [20]]  def find_ranges(iterable):     """Yield range of consecutive numbers."""     for group in mit.consecutive_groups(iterable):         group = list(group)         if len(group) == 1:             yield group[0]         else:             yield group[0] group[-1]   iterable = [2 3 4 5 12 13 14 15 16 17 20] list(find_ranges(iterable)) # [(2 5) (12 17) 20]  more_itertools pip install more_itertools 
request.POST &gt;&gt;&gt; new_subjects = request.POST.getlist('subjects') &gt;&gt;&gt; print new_subjects [u'7' u'4' u'5' u'3' u'2' u'1']  
colour class ColourChoices(models.Model):     colour1 = models.CharField()     colour1.colour_default = "red"     colour2 = models.CharField()     colour2.colour_default = "blue"      def save(self *args **kwargs):         # force colour fields to default values         for f in [ x for x in self._meta.fields if hasattr(x 'colour_default') ]:             if self.__getattribute__(f.attname) == "":                 self.__setattr__(f.attname f.colour_default)        super(ColourChoices self).save(*args**kwargs)  
this_prize.choice from collections import namedtuple  import random  Prize = namedtuple("Prize" ["left" "right" ])  this_prize = Prize("FirstPrize" "SecondPrize")  if random.random() &gt; .5:     choice = "left" else:     choice = "right"  #retrieve the value of "left" or "right" depending on the choice  print "You won" getattr(this_prizechoice)  
classmethod staticmethod 
this_prize._replace(choice  = "Yay") _replace "choice" choice choice this_prize._replace(**{choice  : "Yay"} ) choice _replace this_prize = this_prize._replace(**{choice  : "Yay"} ) 
{% get_content_list as content % {% for items in content %}         &lt;h2&gt;{{items.title}}&lt;/h2&gt;  {% endfor %}`  
import pdb; pdb.set_trace()  
import random  for pixel in pic.get_pixels(): # Replace with appropiate way of getting the pixels     if random.random() &lt; 0.25:         pixel.red = random.randint(256)         pixel.green = random.randint(256)         pixel.blue = random.randint(256)  
my_datetime.strftime("%B %d %Y")  
def flatten(l):     for el in l:         if isinstance(el collections.Iterable) and not isinstance(el basestring):             for sub in flatten(el):                 yield sub         else:             yield el  basestring str bytes yield from def flatten(l):     for el in l:         if isinstance(el collections.Iterable) and not isinstance(el (str bytes)):             yield from flatten(el)         else:             yield el  
allowed path(s) vhost.conf &lt;Directory /var/www/vhosts/&lt;domain&gt;/httpdocs&gt;     php_admin_flag engine on     php_admin_value open_basedir none &lt;/Directory&gt;  Alias /media/ /var/www/vhosts/&lt;domain&gt;/httpdocs/media/  WSGIScriptAlias / /var/www/vhosts/&lt;domain&gt;/conf/django.wsgi  
from lxml import etree etree import lxml 
bin easy_install easy_install /usr/bin $ echo $PATH /Library/Frameworks/Python.framework/Versions/2.6/bin:/usr/bin:/bin  easy_install $ echo $PATH /opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin:/opt/local/bin:/usr/bin:/bin  $ easy_install mechanize  
fopen fopen("Last_Dawn.jpg""r") LF -&gt; CRLF img = open("Last_Dawn.jpg" "rb")  
zlib.decompress(self.request.body) 
node_color #!/usr/bin/env python """ Draw a graph with matplotlib. You must have matplotlib for this to work. """ __author__ = """Aric Hagberg (hagberg@lanl.gov)""" try:     import matplotlib.pyplot as plt except:     raise  import networkx as nx  G=nx.house_graph() # explicitly set positions pos={0:(00)      1:(10)      2:(01)      3:(11)      4:(0.52.0)}  nx.draw_networkx_nodes(Gposnode_size=2000nodelist=[4]) nx.draw_networkx_nodes(Gposnode_size=3000nodelist=[0123]node_color='b') nx.draw_networkx_edges(Gposalpha=0.5width=6) plt.axis('off') plt.savefig("house_with_colors.png") # save as png plt.show() # display  node_color draw_networkx_nodes 
-v sys.modules __main__ 'goo' 'X' X __main__ 'X' import goo sys.modules['goo'] 
WSGIScriptAlias /wsgi "C:/wsgi/"  &lt;Directory "C:/wsgi"&gt;     AllowOverride None     Options None     Order denyallow     Allow from all &lt;/Directory&gt;  
request takes_context context @register.inclusion_tag('new/userinfo.html' takes_context=True) def address(context):     request = context['request']     address = request.session['address']     return {'address':address}  
for i in range(100):   j = i + 3   print i " j: " j  for ij in [(i i+3) for i in range(100)]:  
append() pop() &gt;&gt;&gt; stack = [3 4 5] &gt;&gt;&gt; stack.append(6) &gt;&gt;&gt; stack.append(7) &gt;&gt;&gt; stack [3 4 5 6 7] &gt;&gt;&gt; stack.pop() 7 &gt;&gt;&gt; stack [3 4 5 6] &gt;&gt;&gt; stack.pop() 6 &gt;&gt;&gt; stack.pop() 5 &gt;&gt;&gt; stack [3 4]  &gt;&gt;&gt; my_list = [] &gt;&gt;&gt; not my_list True  
proc = subprocess.Popen(path 0 None subprocess.PIPE subprocess.PIPE None)  for l in proc.stdout.readlines():   output_file.write(l)  StartProc() StartProc() 
&gt;&gt;&gt; re.findall('(\d+|[a-zA-Z]+)' '12fgsdfg234jhfq35rjg') ['12' 'fgsdfg' '234' 'jhfq' '35' 'rjg']  
groupby groupby itertools a = [1111222233455] from itertools import groupby [len(list(group)) for key group in groupby(a)]  [4 4 2 1 2]  
"plot '%s' with lines '%s' with points;" % (eoutnout)  from os import system remove system('gnuplot tmp.gp') remove('tmp.gp')  
class UniqueVisitsRecord(db.Model):     # be careful setting date correctly if processing at midnight     activity_date = db.DateProperty()     event_count = IntegerProperty()  
read &gt;&gt;&gt; sys.stdin.read(100) xyzzy                       (I press Enter here)                             (I press Ctrl+D once) 'xyzzy\n' &gt;&gt;&gt;  sys.stdin.read(100) sys.stdin.buffer.read sys.stdin.buffer.read sys.stdin.buffer.read &gt;&gt;&gt; sys.stdin.read()        (note I can still type stuff to python) xyzzy                       (I press Enter)                             (Press Ctrl+D again) 'xyzzy\n'  BufferedReader.read() self.raw.read() FileIO.read() FileIO.read() BufferedReader.read() self.raw.read() BufferedReader.read() 
import subprocess  retcode = subprocess.call(['convert' 'file.jpg' '-crop'                             '80x10+90+980' '+repage' 'crop.jpg']) if retcode != 0:     print 'error on convert' else:     retcode = subprocess.call(['compare' '-metric' 'PSNR'                                 'reference.jpg' 'crop.jpg' 'crop.jpg'])     print retcode  
&gt;&gt;&gt; ping = os.stat('/bin/ping') &gt;&gt;&gt; ping.st_mode &amp; stat.S_ISUID 2048 &gt;&gt;&gt; echo = os.stat('/bin/echo') &gt;&gt;&gt; echo.st_mode &amp; stat.S_ISUID 0  
import re  from django.conf import settings from django.contrib.auth.decorators import login_required   class RequireLoginMiddleware(object):     """     Middleware component that wraps the login_required decorator around     matching URL patterns. To use add the class to MIDDLEWARE_CLASSES and     define LOGIN_REQUIRED_URLS and LOGIN_REQUIRED_URLS_EXCEPTIONS in your     settings.py. For example:     ------     LOGIN_REQUIRED_URLS = (         r'/topsecret/(.*)$'     )     LOGIN_REQUIRED_URLS_EXCEPTIONS = (         r'/topsecret/login(.*)$'         r'/topsecret/logout(.*)$'     )     ------     LOGIN_REQUIRED_URLS is where you define URL patterns; each pattern must     be a valid regex.      LOGIN_REQUIRED_URLS_EXCEPTIONS is conversely where you explicitly     define any exceptions (like login and logout URLs).     """     def __init__(self):         self.required = tuple(re.compile(url) for url in settings.LOGIN_REQUIRED_URLS)         self.exceptions = tuple(re.compile(url) for url in settings.LOGIN_REQUIRED_URLS_EXCEPTIONS)      def process_view(self request view_func view_args view_kwargs):         # No need to process URLs if user already logged in         if request.user.is_authenticated():             return None          # An exception match should immediately return None         for url in self.exceptions:             if url.match(request.path):                 return None          # Requests matching a restricted URL pattern are returned         # wrapped with the login_required decorator         for url in self.required:             if url.match(request.path):                 return login_required(view_func)(request *view_args **view_kwargs)          # Explicitly return None for all non-matching requests         return None  LOGIN_REQUIRED_URLS = (     r'/private_stuff/(.*)$'     r'/login_required/(.*)$' )  @login_required 
def __init__(self city="Berlin"):   self.city = city  
def locateGameDirs(filelist root=os.curdir): #Find a list of files return directories.     toplevel = [folder for folder in os.listdir(root) if os.path.isdir(os.path.join(root folder))] #List of top-level directories     fileset = set(filelist)      for path dirs files in os.walk(os.path.abspath(root)):          curdir = path.split('\\')[1] #The directory os.walk is currently in.          try: #Thrown here because there's a nonexistant(?) first entry.             youarehere = toplevel.index(curdir)             progress = int(((youarehere)/len(toplevel))*100)         except:             pass          for filename in returnMatches(filelist [k.lower() for k in files]):             yield filename path + "\\" progress      for wow in locateGameDirs(["wow.exe" "firefox.exe" "vlc.exe"] "C:\\"):     print wow  
if "Katakana" in scripts or "Hiragana" in scripts or "Katakana Phonetic Extensions" in scripts:     return "ja"  if "CJK Unified Ideographs" in scripts or "Bopomofo" in scripts \         or "Bopomofo Extended" in scripts or "KangXi Radicals" in scripts:     return "zh"  scripts  49.3 Hiragana   8.7 Katakana  42.0 CJK Unified Ideographs result ja   35.9 Hiragana  49.2 CJK Unified Ideographs  13.3 Katakana   1.6 Halfwidth and Fullwidth Forms result zh    2.4 Hiragana   6.1 CJK Unified Ideographs   0.1 Halfwidth and Fullwidth Forms   3.7 Katakana  87.7 Basic Latin result ca   29.6 Hiragana  18.5 Katakana  34.9 CJK Unified Ideographs  16.9 Basic Latin result en  print repr(justwords)  justwords print repr(justwords) # coding: ascii import sys sys.path.append(r"C:\junk\wotlang\guess-language\guess_language") import guess_language URL = "http://feeds.feedburner.com/nchild" from BeautifulSoup import BeautifulStoneSoup from pprint import pprint as pp import urllib2 htmlSource = urllib2.urlopen(URL).read() soup = BeautifulStoneSoup(htmlSource) fall = soup.findAll(text=True) # pp(fall) justwords = ''.join(fall) # justwords = justwords.encode('utf-8') result = guess_language.guessLanguage(justwords) print "result" result   29.0 CJK Unified Ideographs   0.0 Extended Latin   0.1 Katakana  70.9 Basic Latin result en   27.9 CJK Unified Ideographs   0.0 Extended Latin   0.1 Katakana  72.0 Basic Latin  guess_language.py for key value in run_types.items():     pct = (value*100.0) / totalCount # line changed so that pct is a float     print "%5.1f %s" % (pct key) # line inserted     if pct &gt;=40:         relevant_runs.append(key)  pp(fall) &amp;lt;img style="float:left; margin:0 10px 0px 10px;cursor:pointer; cursor:hand ;" width="60px" src="http://2.bp.blogspot.com/_LBJ4udkQZag/Rm6sTn1b7NI/AAAAAAAAA FA/bYkSJZ3i2bg/s400/hepinge169.gif" border="0" alt=""id="BLOGGER_PHOTO_ID_507518 3283203730642" alt="\u548c\u5e73\u6771\u8def\u4e00\u6bb5169\u865f" title="\u548c \u5e73\u6771\u8def\u4e00\u6bb5169\u865f"/&amp;gt;\u4eca\u5929\u4e2d\u5348\u8d70\u523 0\u516c\u53f8\u5c0d\u9762\u76847-11\u8cb7\u98f2\u6599\uff0c\u7a81\u7136\u770b\u5 230\u9019\u500b7-11\u602a\u7269\uff01\u770b\u8d77\u4f86\u6bd4\u6a19\u6e96\u62db\ u724c\u6709\u4f5c\u7528\u7684\u53ea\u6709\u4e2d\u9593\u7684\u6307\u793a\u71c8\u8 00c\u5df2\uff0c\u53ef\u537b\u6709\u8d85\u7d1a\u5927\u7684footprint\uff01&amp;lt;br / &amp;gt;&amp;lt;br /&amp;gt;&amp;lt;a href="http://4.bp.blogspot.com/_LBJ4udkQZag/Rm6wHH1b7QI/AA  &amp;lt; 
someString[:3] + 'a' + someString[4:] 
from lxml.html import fromstring from lxml.html.clean import Cleaner import requests  url = "https://stackoverflow.com/questions/2165943/removing-html-tags-from-a-text-using-regular-expression-in-python" html = requests.get(url).text  doc = fromstring(html)  tags = ['h1''h2''h3''h4''h5''h6'        'div' 'span'         'img' 'area' 'map'] args = {'meta':False 'safe_attrs_only':False 'page_structure':False         'scripts':True 'style':True 'links':True 'remove_tags':tags} cleaner = Cleaner(**args)  path = '/html/body' body = doc.xpath(path)[0]  print cleaner.clean_html(body).text_content().encode('ascii' 'ignore')  
._replace p = p._replace(x=33)  
exec 
unittest.TestCase.assertEqual 'assertEqual(b 5)' 'self.' self unittest.Testcase 
break li from itertools import cycle  li = [0 1 2 3]  running = True licycle = cycle(li) # Prime the pump nextelem = next(licycle) while running:     thiselem nextelem = nextelem next(licycle)  li = [0 1 2 3]  running = True while running:     for idx elem in enumerate(li):         thiselem = elem         nextelem = li[(idx + 1) % len(li)]  li = [0 1 2 3]  running = True idx = 0 while running:     thiselem = li[idx]     idx = (idx + 1) % len(li)     nextelem = li[idx]  tee len(li) running for break 
__slots__ __getstate__ pickle suds.sudsobject copy_reg __getstate__ 
split &gt;&gt;&gt; "012".split("") ['0' '1' '2']  &gt;&gt;&gt; [int(x) for x in "012".split("")] [0 1 2]  
item.find('pubdate').string.strip() 
commands = ['foo' 'bar' 'exit' 'hello world' 'add number']  s.startswith(command) 
import random  import string def self(): pass self.alphabet = list(string.lowercase) self.finalWord = [] self.length = 4  for x in range(5):   alphabet = self.alphabet   for i in range (self.length):       value = random.sample(alphabet 1)       alphabet.remove(value[0])       self.finalWord.append(value[0])   print "Final word = " self.finalWord  $ python sa.py  Final word =  ['y' 'm' 'u' 'z'] Final word =  ['y' 'm' 'u' 'z' 'h' 'b' 'c' 's'] Final word =  ['y' 'm' 'u' 'z' 'h' 'b' 'c' 's' 'x' 'l' 'r' 'n'] Final word =  ['y' 'm' 'u' 'z' 'h' 'b' 'c' 's' 'x' 'l' 'r' 'n' 'q' 'a' 'k' 'e'] Final word =  ['y' 'm' 'u' 'z' 'h' 'b' 'c' 's' 'x' 'l' 'r' 'n' 'q' 'a' 'k' 'e' 'p' 'd' 'j' 'w'] $ python sa.py  Final word =  ['k' 'v' 'o' 'd'] Final word =  ['k' 'v' 'o' 'd' 'q' 'p' 'w' 'l'] Final word =  ['k' 'v' 'o' 'd' 'q' 'p' 'w' 'l' 'n' 'u' 'g' 't'] Final word =  ['k' 'v' 'o' 'd' 'q' 'p' 'w' 'l' 'n' 'u' 'g' 't' 'i' 'r' 'e' 'f'] Final word =  ['k' 'v' 'o' 'd' 'q' 'p' 'w' 'l' 'n' 'u' 'g' 't' 'i' 'r' 'e' 'f' 's' 'c' 'j' 'z'] $ python sa.py  Final word =  ['o' 'a' 'g' 't'] Final word =  ['o' 'a' 'g' 't' 'k' 'j' 'y' 'w'] Final word =  ['o' 'a' 'g' 't' 'k' 'j' 'y' 'w' 'z' 'l' 'i' 's'] Final word =  ['o' 'a' 'g' 't' 'k' 'j' 'y' 'w' 'z' 'l' 'i' 's' 'u' 'p' 'f' 'm'] Final word =  ['o' 'a' 'g' 't' 'k' 'j' 'y' 'w' 'z' 'l' 'i' 's' 'u' 'p' 'f' 'm' 'h' 'e' 'q' 'v']  random class Phenotype:    ...    chromosome = []     def __init__(self alleles = []):     self.length = len(alleles)     self.alleles = alleles     self.initialBuild()     def initialBuild(self):     alleleSet = self.alleles     for i in range (self.length):         value = random.sample(alleleSet 1)         alleleSet.remove(value[0])         self.chromosome.append(value[0])  __init__ self.chromosome = ... self.chromosome Phenotype.chromosome Phenotype chromosome self.chromosome = [] __init__     self.alleles = alleles        ...     alleleSet = self.alleles        ...         alleleSet.remove(value[0])  self.alleles alleleSet alleles remove alleleSet = list(self.alleles) self.chromosome = list(self.alleles) random.shuffle(self.chromosome)  
&gt;&gt;&gt; class MetaInit(type):      def __call__(cls *args **kwargs):         if args or kwargs:             return super().__call__(*args **kwargs)         return cls.__new__(cls)  &gt;&gt;&gt; class String(metaclass=MetaInit):      def __init__(self string):         self.__string = tuple(string.split())         self.__simple = tuple(self.__simple())      def __simple(self):         letter = lambda s: ''.join(filter(lambda s: 'a' &lt;= s &lt;= 'z' s))         return filter(bool map(letter map(str.lower self.__string)))      def __eq__(self other):         assert isinstance(other String)         return self.__simple == other.__simple      def __getitem__(self key):         assert isinstance(key slice)         string = String()         string.__string = self.__string[key]         string.__simple = self.__simple[key]         return string      def __iter__(self):         return iter(self.__string)  &gt;&gt;&gt; String('Hello world!')[1:] &lt;__main__.String object at 0x02E78830&gt; &gt;&gt;&gt; _._String__string _._String__simple (('world!') ('world')) &gt;&gt;&gt;   #! /usr/bin/env python3 METHOD = 'metaclass'   class NoInitMeta(type):     def new(cls):         return cls.__new__(cls)   class String(metaclass=NoInitMeta if METHOD == 'metaclass' else type):     def __init__(self value):         self.__value = tuple(value.split())         self.__alpha = tuple(filter(None (             ''.join(c for c in word.casefold() if 'a' &lt;= c &lt;= 'z') for word in             self.__value)))      def __str__(self):         return ' '.join(self.__value)      def __eq__(self other):         if not isinstance(other type(self)):             return NotImplemented         return self.__alpha == other.__alpha      if METHOD == 'metaclass':         def __getitem__(self key):             if not isinstance(key slice):                 raise NotImplementedError             instance = type(self).new()             instance.__value = self.__value[key]             instance.__alpha = self.__alpha[key]             return instance     elif METHOD == 'classmethod':         def __getitem__(self key):             if not isinstance(key slice):                 raise NotImplementedError             instance = self.new()             instance.__value = self.__value[key]             instance.__alpha = self.__alpha[key]             return instance          @classmethod         def new(cls):             return cls.__new__(cls)     elif METHOD == 'inline':         def __getitem__(self key):             if not isinstance(key slice):                 raise NotImplementedError             cls = type(self)             instance = cls.__new__(cls)             instance.__value = self.__value[key]             instance.__alpha = self.__alpha[key]             return instance     else:         raise ValueError('METHOD did not have an appropriate value')      def __iter__(self):         return iter(self.__value)   def main():     x = String('Hello world!')     y = x[1:]     print(y)   if __name__ == '__main__':     main()  
&lt;%def name="format( item )"&gt;&lt;a href="#${item|u}"&gt;${item|u}&lt;/a&gt; &lt;/%def&gt;  ${' '.join( format(item) for item in l)}  
_string _simple _string __len__ 
idx=(mask==0) image[idx]=chex[idx]  image idx idx 
[[c a] for c a in zip(cities airports)]  list [list(x) for x in zip(cities airports)]  map map(list zip(cities airports))  
import random  class ArithmeticOperatorNode(object):     def __init__(self operator *args):         self.operator = operator         self.children = args     def eval(self):         if self.operator == '+':             return sum(x.eval() for x in self.children)         assert False 'Unknown arithmetic operator ' + self.operator     def __str__(self):         return '(%s)' % (' ' + self.operator + ' ').join(str(x) for x in self.children)  class ConstantNode(object):     def __init__(self constant):         self.constant = constant     def eval(self):         return self.constant     def __str__(self):         return str(self.constant)  def build_tree(n):     if n == 0:         return ConstantNode(random.randrange(100))     else:         left = build_tree(n - 1)         right = build_tree(n - 1)         return ArithmeticOperatorNode('+' left right)  node = build_tree(5) print node print node.eval()  node = build_tree(5) print node.eval()  __str__ 
itertools product &gt;&gt;&gt; import itertools &gt;&gt;&gt; L = [123] &gt;&gt;&gt; itertools.product(LL) &lt;itertools.product object at 0x83788&gt; &gt;&gt;&gt; list(_) [(1 1) (1 2) (1 3) (2 1) (2 2) (2 3) (3 1) (3 2) (3 3)]  
a.__init__(self) a object super() 
BOOST_PYTHON_MODULE( -name- )  
/usr/bin/easy_install-2.6 
model._meta.get_all_field_names() model._meta.get_field() getattr(model_instance 'field_name') model._meta.get_all_field_names() model._meta.get_fields() field.name 
order = models.IntegerField(default = 0 blank = True)  
sort() None 
glib.timeout_add() threading.Timer import gtk glib  class example:     def __init__(self):         window = gtk.Window()         window.set_title("example")         window.resize(600400)         box = gtk.HBox(homogeneous = True spacing = 2)         self.buf = gtk.TextBuffer()         self.buf.connect("changed" self.buf_on_change)         textInput = gtk.TextView(self.buf)         box.add(textInput)         self.lbl = gtk.Label()         box.add(self.lbl)         window.add(box)         window.connect("destroy" gtk.main_quit)         window.show_all()          self.timer = glib.timeout_add(1000 self.renderText)      def buf_on_change(self buf):         glib.source_remove(self.timer)         self.timer = glib.timeout_add(1000 self.renderText)       def renderText(self):         txt = self.buf.get_text(*self.buf.get_bounds())         # perform computation-intensive text-manipulation here         self.lbl.set_text(txt)         return False  if __name__ == '__main__':     example()     gtk.main()  
def index_containing_substring(the_list substring):     for i s in enumerate(the_list):         if substring in s:               return i     return -1  
_mysql.dll 
str.translate() # You only need to do this once &gt;&gt;&gt; title_trans=''.join(chr(c) if chr(c).isupper() or chr(c).islower() else '_' for c in range(256))  &gt;&gt;&gt; "abcde1234!@%^".translate(title_trans) 'abcde________'  # Using map+lambda $ python -m timeit '"".join(map(lambda x: x if (x.isupper() or x.islower()) else "_" "abcd1234!@#$".strip()))' 10000 loops best of 3: 21.9 usec per loop  # Using str.translate $ python -m timeit -s 'titletrans="".join(chr(c) if chr(c).isupper() or chr(c).islower() else "_" for c in range(256))' '"abcd1234!@#$".translate(titletrans)' 1000000 loops best of 3: 0.422 usec per loop  # Here is regex for a comparison $ python -m timeit -s 'import re;transre=re.compile("[\W\d]+")' 'transre.sub("_""abcd1234!@#$")' 100000 loops best of 3: 3.17 usec per loop  # coding: UTF-8  def format_title_unicode_translate(title):     return title.translate(title_unicode_trans)  class TitleUnicodeTranslate(dict):     def __missing__(selfitem):         uni = unichr(item)         res = u"_"         if uni.isupper() or uni.islower():             res = uni         self[item] = res         return res title_unicode_trans=TitleUnicodeTranslate()  print format_title_unicode_translate(u"Metallica ?????????")          if item&lt;256 and (uni.isupper() or uni.islower()):  
datetime.datetime(... tzinfo) Europe/Paris localize &gt;&gt;&gt; tz= pytz.timezone('Europe/Paris')               # using built-in zoneinfo &gt;&gt;&gt; tz &lt;DstTzInfo 'Europe/Paris' PMT+0:09:00 STD&gt;          # what? Pierre et Miquelon Time? &gt;&gt;&gt; datetime.datetime(2010111200 tzinfo=tz) datetime.datetime(2010 1 1 12 0 tzinfo=&lt;DstTzInfo 'Europe/Paris' PMT+0:09:00 STD&gt;) # bad &gt;&gt;&gt; tz.localize(datetime.datetime(2010111200)) datetime.datetime(2010 1 1 12 0 tzinfo=&lt;DstTzInfo 'Europe/Paris' CET+1:00:00 STD&gt;) # OK  tzinfo tz localize 
.__getattr__() 
cumulative_nodes_found_list 
nodes.append((1 firstNode)) while nodes and lvl&lt;5:     lvl p = nodes.pop(0)      For each child:         #...create child         nodes.append((lvl+1 cs))  collections.deque list j+=1 
r'\[b\](.*)\[\/b\]'  r'\[b\](.*?)\[\/b\]'  * ? re 
trim xargs if mkdir -p for f in *.txt; do     band=$(echo "$f" | cut -d'-' -f1 | xargs)     mkdir -p "$band"     mv "$f" "$band" done  trim xargs xargs 
def create_basic_image():     img = cairo.ImageSurface(cairo.FORMAT_ARGB32 24 24)     c = cairo.Context(img)     c.set_line_width(4)     c.arc(12 12 8 0 2 * math.pi)     c.set_source_rgb(1 0 0)     c.stroke_preserve()     c.set_source_rgb(1 1 1)     c.fill()     return img  def expose(sender event img):     cr = darea.window.cairo_create()     for i in range(num):         cr.set_source_surface(img x[i] y[i])                 cr.paint()         ... # your update code here  ... darea.connect("expose-event" expose create_basic_image())  gobject.timeout_add idle_add 
execute cursor processed = dict((n "'%s'" % v if v is not None else 'NULL')                  for n v in locals().iteritems())  processed locals() 
q = Session.query(Articles).filter(Articles.article_id == ArticleTags.article_id).\     filter(ArticleTags.tag_id == Tags.tag_id).\     filter(Tags.name == 'tag_name')  q = Session.query(Articles).filter(Articles.tags.any(name = 'tag_name'))  
numpy.zeros((333))   
property type(X) class classprop(object):   def __init__(self f):     self.f = classmethod(f)   def __get__(self *a):     return self.f.__get__(*a)()  class buh(object):   @classprop   def bah(cls): return 23  print buh.bah  23 
set name1 = "naveen"; name2 = "darshana"  name1_set=set(name1) name2_set=set(name2)  clean1=[x for x in  name1 if x not in name2_set] clean2=[x for x in name2 if x not in name1_set]  clean1.extend(['0']*(len(name1)-len(clean1))) clean2.extend(['1']*(len(name2)-len(clean2)))  print clean1clean2  set name1 = "naveen"; name2 = "darshana"  count1={} count2={}   for x in name1:     count1[x]=count1.get(x0)+1  for x in name2:     count2[x]=count2.get(x0)+1  def remove_dups(namecountnull):     clean=[]     for x in name:         if count.get(x0):             count[x]-=1         else:             clean.append(x)     clean.extend([null]*(len(name)-len(clean)))     return clean  clean1=remove_dups(name1count2'0') clean2=remove_dups(name2count1'1')  print clean1clean2  dict ['v' 'e' 'e' 'n' '0' '0'] ['d' 'r' 's' 'h' 'a' 'a' '1' '1'] 
binomal def binomal(n):   return tuple(binomal_aux(n i) for i in range(n+1))  binom al 
def app(environ start_response):     output = "&lt;html&gt;&lt;body&gt;&lt;p&gt;Räksmörgås&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;".encode('utf-8')     start_response('200 OK' [         ('Content-Type' 'text/html; charset=utf-8')         ('Content-Length' str(len(output)))     ])      return [output]  yield 
from enthought.chaco.scales.formatters import TimeFormatter TimeFormatter._formats['days'] = ('%d/%m' '%d%a')  EuroMDYScales = [TimeScale(day_of_month=range(1313) formatter=MyFormatter())              TimeScale(day_of_month=(181522) formatter=MyFormatter())              TimeScale(day_of_month=(115) formatter=MyFormatter())              TimeScale(month_of_year=range(113) formatter=MyFormatter())              TimeScale(month_of_year=range(1133) formatter=MyFormatter())              TimeScale(month_of_year=(17) formatter=MyFormatter())              TimeScale(month_of_year=(1) formatter=MyFormatter())]  euro_scale_system = CalendarScaleSystem(*(HMSScales + EuroMDYScales)) tick_gen = ScalesTickGenerator(scale=euro_scale_system)  axis = PlotAxis(tick_generator = tick_gen)  
import wx  class Frame(wx.Frame):     def __init__(self):         super(Frame self).__init__(None -1 'CursorTracker')         self.mdc = None # memory dc to draw off-screen         self.Bind(wx.EVT_SIZE self.on_size)         self.Bind(wx.EVT_ERASE_BACKGROUND self.on_erase)         self.Bind(wx.EVT_PAINT self.on_paint)         w h = wx.GetDisplaySize()         w h = w * 3 / 4 h * 3 / 4         self.SetSize((w h))         self.Center()         self.on_timer()     def on_size(self event):         # re-create memory dc to fill window         w h = self.GetClientSize()         self.mdc = wx.MemoryDC(wx.EmptyBitmap(w h))         self.redraw()     def on_erase(self event):         pass # don't do any erasing to avoid flicker     def on_paint(self event):         # just blit the memory dc         dc = wx.PaintDC(self)         if not self.mdc:             return         w h = self.mdc.GetSize()         dc.Blit(0 0 w h self.mdc 0 0)     def on_timer(self):         # refresh every N milliseconds         self.redraw()         wx.CallLater(100 self.on_timer)     def redraw(self):         # do the actual drawing on the memory dc here         dc = self.mdc         w h = dc.GetSize()         dc.Clear()         dc.DrawLine(0 0 w h)         self.Refresh()  if __name__ == '__main__':     app = wx.PySimpleApp()     frame = Frame()     frame.Show()     app.MainLoop()  
ctypes 
PyOS_snprintf vsprintf vsnprintf 
WORD_FREQUENCIES = {     'file': 0.00123     'files': 0.00124     'save': 0.002     'ave': 0.00001     'as': 0.00555 }  def split_text(text word_frequencies cache):     if text in cache:         return cache[text]     if not text:         return 1 []     best_freq best_split = 0 []     for i in xrange(1 len(text) + 1):         word remainder = text[:i] text[i:]         freq = word_frequencies.get(word None)         if freq:             remainder_freq remainder = split_text(                     remainder word_frequencies cache)             freq *= remainder_freq             if freq &gt; best_freq:                 best_freq = freq                 best_split = [word] + remainder     cache[text] = (best_freq best_split)     return cache[text]  print split_text('filesaveas' WORD_FREQUENCIES {})  --&gt; (1.3653e-08 ['file' 'save' 'as'])  
class Node():      def __init__(selfdata left=None right=None):          self.data = data          self.left = left         self.right = right  class BSTree():      def __init__(self):          self.root = None      def __add(selfnodedata):         if self.root is None:             self.root = Node(data)         if node is None:             return Node(data)         else:             if data &lt; node.data:                 node.left = self.__add(node.leftdata)             elif data &gt; node.data:                 node.right = self.__add(node.rightdata)             return node      def add(selfdata):         self.__add(self.rootdata)      def __preorder(selfnode):          if node is not None:             print node.data              self.__preorder(node.left)              self.__preorder(node.right)      def preorder(self):         self.__preorder(self.root)      def __inorder(selfnode):          if node is not None:             self.__inorder(node.left)             self.__inorder(node.right)             print node.data      def inorder(self):         self.__inorder(self.root)      def __postorder(selfnode):          if node is not None:             self.__postorder(node.left)             print node.data             self.__postorder(node.right)      def postorder(self):         self.__postorder(self.root)      def pprint(selfNodeindent):          if Node is not None:             self.pprint(Node.right indent+1)              print indent*"     "Node.data             self.pprint(Node.left indent+1)      def leafcount(selfNode):          if Node is None:              return 0          if self.atLeaf(Node):              return 1          else:              return self.leafcount(Node.left)+self.leafcount(Node.right)   if __name__=="__main__":       y = BSTree()      for pres\         in ["OBAMA""BUSHW""CLINTON""BUSHG""REGAN""CARTER""FORD""NIXON""JOHNSON"]:         y.add(pres)      y.pprint(y.root0)  
sscanf sscanf re.split 
distinct() for value in Session.query(Table.column).distinct():      pass  
Location Location: http://127.0.0.1/admin/  Location syntax: port_in_redirect [ on|off ] default: port_in_redirect on context: http server location  
q = Ticket.objects.extra(select={'is_top': "status = 4"}) q = q.extra(order_by = ['-is_top'])  
frame1.axes.get_xaxis().set_visible(False) frame1.axes.get_yaxis().set_visible(False)  frame1.axes.get_xaxis().set_ticks([]) frame1.axes.get_yaxis().set_ticks([])  plt.xlabel() plt.ylabel() 
p.communicate(b"insert into egg values ('egg');");  value = open('thefile' 'rt').read() p.communicate(value);  value = open('thefile' 'rb').read() p.communicate(value);  value p.communicate(value.encode('latin-1');  
glob.iglob topdir = os.path.join('/somedir' 'labels' '*') for filename in glob.iglob(topdir):      if filelen(filename) &gt; 15:           #do stuff  dir filelen def many_line(fname many=15):     for i line in enumerate(open(fname)):         if i &gt; many:             return True     return False  
hist x = scipy.arange(4) y = scipy.array([4765]) f = pylab.figure() ax = f.add_axes([0.1 0.1 0.8 0.8]) ax.bar(x y align='center') ax.set_xticks(x) ax.set_xticklabels(['Aye' 'Bee' 'Cee' 'Dee']) f.show()  
mylist = ['a' 'b' 'c' 'd' 'e'] myorder = [3 2 0 1 4] mylist = [mylist[i] for i in myorder] print(mylist)         # prints: ['d' 'c' 'a' 'b' 'e']  
--with-universal-archs=intel  Mac/readme 
class PublicClass(object):     pass  class _PrivateClass(object):     pass  from module import *  from module import _PrivateClass  
import threading  def nothing():     pass  def testThreads():     timers = [threading.Timer(10.0 nothing) for _ in xrange(881)]     print "Starting threads."     map(threading.Thread.start timers)     print "Joining threads."     map(threading.Thread.join timers)     print "Done."  if __name__ == "__main__":     testThreads()  
key= None datetime None import datetime mindate = datetime.date(datetime.MINYEAR 1 1)  def getaccountingdate(x):   return x['accountingdate'] or mindate  results = sorted(results key=getaccountingdate reverse=True)  cmp cmp key 
graphmodule.find_modules.find_modules(includes=['xml.etree']) Traceback (most recent call last):     File "&lt;stdin&gt;" line 1 in &lt;module&gt;     File ".../modulegraph/find_modules.py" line 255 in find_modules     File ".../modulegraph/find_modules.py" line 182 in find_needed_modules     File ".../modulegraph/modulegraph.py" line 401 in import_hook     File ".../modulegraph/modulegraph.py" line 464 in load_tail ImportError: No module named xml.etree  load_tail import_hook from setuptools import setup import xml.etree.ElementTree  setup(name="Mac XML Test"       app=['macxml.py']       options={'py2app': {'includes': ['xml.etree.ElementTree']}}       data_files=[('' ['lib.xml'])]      )  
def import_path(name):     modname _ attr = name.rpartition('.')     if not modname:         # name was just a single module name         return __import__(attr)     m = __import__(modname fromlist=[attr])     return getattr(m attr)  __import__ m = __import__(modname {} globals() [attr])  
u'spæm' 'spam' "spam" 
struct timer_func_wrapper_t {     timer_func_wrapper_t( bp::object callable ) : _callable( callable ) {}      bool operator()()     {         // These GIL calls make it thread safe may or may not be needed depending on your use case         PyGILState_STATE gstate = PyGILState_Ensure();         bool ret = _callable();         PyGILState_Release( gstate );         return ret;     }      bp::object _callable; };  boost::int32_t createTimerWrapper( Class* class boost::uint64_t interval bp::object function bool recurring = false ) {     return class-&gt;createTimer( interval boost::function&lt;bool ()&gt;( timer_func_wrapper_t( function ) ) recurring ); }  .def( "createTimer" &amp;createTimerWrapper ( bp::arg( "interval" ) bp::arg( "function" ) bp::arg( "recurring" ) = false ) )  import MyLib import time  def callMePls():     print( "Hello world" )     return True  class = MyLib.Class()  class.createTimer( 3 callMePls )  time.sleep( 1 )  import MyLib import time  def callMePls( str ):     print( "Hello" str )     return True  class = MyLib.Class()  class.createTimer( 3 bind( callMePls "world" ) )  time.sleep( 1 )  // Wrapper for timer function parameter struct timer_func_wrapper_t {     timer_func_wrapper_t( bp::object callable ) : _callable(callable) {}      bool operator()()     {         return _callable();     }      bp::object _callable; };  struct BoostFunc_from_Python_Callable {     BoostFunc_from_Python_Callable()     {         bp::converter::registry::push_back( &amp;convertible &amp;construct bp::type_id&lt; boost::function&lt; bool() &gt; &gt;() );     }      static void* convertible( PyObject* obj_ptr )     {         if( !PyCallable_Check( obj_ptr ) ) return 0;         return obj_ptr;     }      static void construct( PyObject* obj_ptr bp::converter::rvalue_from_python_stage1_data* data )     {         bp::object callable( bp::handle&lt;&gt;( bp::borrowed( obj_ptr ) ) );         void* storage = ( ( bp::converter::rvalue_from_python_storage&lt; boost::function&lt; bool() &gt; &gt;* ) data )-&gt;storage.bytes;         new (storage)boost::function&lt; bool() &gt;( timer_func_wrapper_t( callable ) );         data-&gt;convertible = storage;     } };  BOOST_PYTHON_MODULE(Foo) {     // Register function converter     BoostFunc_from_Python_Callable();  
 {% for doc in project.docs %}    ...do my rendering here...  {% endfor %}  
str.format format 
import MySQLdb.cursors MySQLdb.connect(host='...' cursorclass=MySQLdb.cursors.DictCursor)  
/path/to/templates import jinja2 template_dir = '/path/to/templates' loader = jinja2.FileSystemLoader(template_dir) environment = jinja2.Environment(loader=loader)  /path/to/templates/includes/sidebar.html /path/to/templates/index.html index.html {% include 'includes/sidebar.html' %}  
Table  meta.Session.execute(Articles_Keywords.delete(Articles_Keywords.c.article_id == 1))  meta.Session.execute(Articles_Keywords.insert() [      {'article_id': 1 'keyword_id': 1}      {'article_id': 1 'keyword_id': 2}  ])  meta.Session.expire(article ['keywords'])  
__import__ import parsemodule = __import__(feed) parsemodule.parser(posixpath.basename(url) urldir rss_file_path url feed)  ImportError 
__iter__ def __iter__(self):     return iter(self._values)  object.__iter__ 
re.T re.M re.compile re.template print re.M re.compile input re.DOTALL re.DOTALL|re.MULTINE .* .*? 
__raise__ 
repr() __repr__ 
python -v # cleanup[1] foo_package.g Exception TypeError: "'NoneType' object is not callable" in  ignored  None g.shelf g.shelf = None close 
from django.contrib.auth.models import Group User  class FamilyManager(models.Manager):     """     Lets us do querysets limited to families that have      currently enrolled students e.g.:         Family.has_students.all()      """     def get_query_set(self):         return super(FamilyManager self).get_query_set().filter(student__enrolled=True).distinct()   class Family(Group):     notes = models.TextField(blank=True)      # Two managers for this model - the first is default      # (so all families appear in the admin).     # The second is only invoked when we call      # Family.has_students.all()       objects = models.Manager()     has_students = FamilyManager()      class Meta:         verbose_name_plural = "Families"         ordering = ['name']      def __unicode__(self):         return self.name  
class MyDecorator(object):     def __call__(self func):       def wrapper(that *args **kwargs):         ## you can access the "self" of func here through the "that" parameter         ## and hence do whatever you want                 return func(that *args **kwargs)       return wrapper  
Image.point() [(12 140 10) (10 100 200) ...] [12 140 10 10 100 200 ...]  im = im.point(range(256 0 -1) * 3)  Image.getdata Image.putdata load putpixel Image.point Image.getdata Image.putdata Image.point [0 1 2 3 4 5 ...255 0 1 2 3 ....255 0 1 2 3 ...255]  [10 1 2 3 4 5 ...255 100 1 2 3 ....255 10 1 2 3 ...255]  table = sum(zip(*colors) ())  
{% load cache %}  
lines = [r for r in open(thefile) if not r.isspace() and r[0] != '#']  .isspace() len(r.strip()) == 0 
email.iterators._structure(msg) multipart/mixed     text/html                (message)     application/octet-stream (attachment 1)     application/octet-stream (attachment 2)  multipart/alternative     text/plain     text/html  import email  original = email.message_from_string( ... )  for part in original.walk():     if (part.get('Content-Disposition')         and part.get('Content-Disposition').startswith("attachment")):          part.set_type("text/plain")         part.set_payload("Attachment removed: %s (%s %d bytes)"                          %(part.get_filename()                             part.get_content_type()                             len(part.get_payload(decode=True))))         del part["Content-Disposition"]         del part["Content-Transfer-Encoding"]  from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText from email.mime.message import MIMEMessage  new = MIMEMultipart("mixed") body = MIMEMultipart("alternative") body.attach( MIMEText("reply body text" "plain") ) body.attach( MIMEText("&lt;html&gt;reply body text&lt;/html&gt;" "html") ) new.attach(body)  new["Message-ID"] = email.utils.make_msgid() new["In-Reply-To"] = original["Message-ID"] new["References"] = original["Message-ID"] new["Subject"] = "Re: "+original["Subject"] new["To"] = original["Reply-To"] or original["From"] new["From"] = "me@mysite.com"  new.attach( MIMEMessage(original) )  s = smtplib.SMTP() s.sendmail("me@mysite.com" [new["To"]] new.as_string()) s.quit()  multipart/mixed     multipart/alternative         text/plain         text/html     message/rfc822         multipart/mixed             text/html             text/plain             text/plain  from django.core.mail import EmailMultiAlternatives from email.mime.message import MIMEMessage  new = EmailMultiAlternatives("Re: "+original["Subject"]                              "reply body text"                               "me@mysite.com" # from                              [original["Reply-To"] or original["From"]] # to                              headers = {'Reply-To': "me@mysite.com"                                         "In-Reply-To": original["Message-ID"]                                         "References": original["Message-ID"]}) new.attach_alternative("&lt;html&gt;reply body text&lt;/html&gt;" "text/html") new.attach( MIMEMessage(original) ) # attach original message new.send()  
&gt;&gt;&gt; c.execute('rollback to savepoint pt;') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; sqlite3.OperationalError: no such savepoint: pt  pt import sqlite3 from tempfile import NamedTemporaryFile as NF import os  f = NF(suffix='.db' delete=False).name  db = sqlite3.connect(f)  try:     db.execute('CREATE TABLE foo (id INTEGER PRIMARY KEY data VARCHAR)')     db.isolation_level = None      db.execute('INSERT INTO foo (data) values (?)' ('hello'))     db.execute('INSERT INTO foo (data) values (?)' ('world'))      db.execute("savepoint pt;")     db.execute('INSERT INTO foo (data) values (?)' ('bah'))     db.execute('INSERT INTO foo (data) values (?)' ('goodbye world'))     db.execute("rollback to savepoint pt;")      db.execute('INSERT INTO foo (data) values (?)' ('peace'))      assert list(db.execute('select * from foo')) == [(1 'hello')                                                      (2 'world')                                                      (3 'peace')] finally:     db.close()     os.remove(f)  db.isolation_level = None 
def fun1(f):     print "fun1"     return f  def fun2(f):     print "fun2"     return f  def fun3(f):     print "fun3"     return f  def chained(*dec_funs):     def _inner_chain(f):         for dec in reversed(dec_funs):             f = dec(f)         return f     return _inner_chain  @fun1 @fun2 @fun3 def do_stuff():     pass  @chained(fun1 fun2 fun3) def do_stuff2():     pass  all_funs = chained(fun1 fun2 fun3)  @all_funs def do_stuff3():     pass  
f = SomeFilter(request.GET)  f = SomeFilter(request.GET queryset=f.qs)  def __init__(self **kw):    super(SomeFilter self).__init__(**kw)    self.filters['provider'].extra['queryset'] = Provider.objects.filter(foo__in=self.queryset)  
from ..a.b import module test_file.py 
9 setLevel(50) import logging DEBUG_LEVELV_NUM = 9  logging.addLevelName(DEBUG_LEVELV_NUM "DEBUGV") def debugv(self message *args **kws):     if self.isEnabledFor(DEBUG_LEVELV_NUM):         # Yes logger takes its '*args' as 'args'.         self._log(DEBUG_LEVELV_NUM message args **kws)  logging.Logger.debugv = debugv  class Logger logging.__init__.py 
ModelChoiceField 
class PacketDecoder(object):      STX = ...     ETX = ...      def __init__(self):         self._stream = ''      def feed(self buffer):         self._stream += buffer      def decode(self):         '''         Yields packets from the current stream.         '''         while len(self._stream) &gt; 2:             end = self._stream.find(self.ETX)             if end == -1:                 break              packet_len = ord(self._stream[1])             packet = self._stream[:end]             if packet_len &gt;= 5 and check_sum_valid(packet):                 yield packet             self._stream = self._stream[end+1:]  decoder = PacketDecoder() while True:     data = sock.recv(256)      if not data:         # handle lost connection...      decoder.feed(data)     for packet in decoder.decode():         process(packet)  
continue break 
isinstance str unicode import types isinstance(var types.StringTypes)  types.StringType types.StringTypes str unicode types str unicode isinstance(var (str unicode)):  isinstance(var basestring)  
from HTMLParser import HTMLParser  class MyParser(HTMLParser):     def handle_data(self data):         self.output.append(data)     def feed(self data):         self.output = []         HTMLParser.feed(self data)   p = MyParser() page = """&lt;html&gt;&lt;h1&gt;title&lt;/h1&gt;&lt;p&gt;I'm a paragraph!&lt;/p&gt;&lt;/html&gt;""" p.feed(page)  print p.output  output ['title' "I'm a paragraph!"]  p.feed(page) p.feed(page) 
c if '-' == something:    print 'hurray!'  &gt;&gt;&gt; lst =["hello" "-hello" "-" "hell-o""    - "] &gt;&gt;&gt; for i item in enumerate(lst):     if item == '-':         print(i item)   2 -  
def iter_new_list(old_list):         for x in old_list:        if needs_expanding(x):            for y in expand(x):                yield y        else:            yield x  new_list = list(iter_new_list(old_list))  
pathlib.Path.rglob pathlib from pathlib import Path  for path in Path('src').rglob('*.c'):     print(path.name)  glob.glob('**/*.c') recursive . os.walk os.walk fnmatch.filter import fnmatch import os  matches = [] for root dirnames filenames in os.walk('src'):     for filename in fnmatch.filter(filenames '*.c'):         matches.append(os.path.join(root filename))  
ESC = Literal('\x1b') integer = Word(nums) escapeSeq = Combine(ESC + '[' + Optional(delimitedList(integer';')) +                  oneOf(list(alphas)))  from pyparsing import *  ESC = Literal('\x1b') integer = Word(nums) escapeSeq = Combine(ESC + '[' + Optional(delimitedList(integer';')) +                  oneOf(list(alphas)))  nonAnsiString = lambda s : Suppress(escapeSeq).transformString(s)  unColorString = nonAnsiString('\x1b[1m0.0\x1b[0m') print unColorString len(unColorString)  0.0 3  
import operator def lrange(num1 num2 = None step = 1):     op = operator.__lt__      if num2 is None:         num1 num2 = 0 num1     if num2 &lt; num1:         if step &gt; 0:             num1 = num2         op = operator.__gt__     elif step &lt; 0:         num1 = num2      while op(num1 num2):         yield num1         num1 += step  &gt;&gt;&gt; list(lrange(138264128374162347812634134 138264128374162347812634140)) [138264128374162347812634134L 138264128374162347812634135L 138264128374162347812634136L 138264128374162347812634137L 138264128374162347812634138L 138264128374162347812634139L]  itertools.islice xrange 
warnings.showwarning() 
exec() 
open(filename 'wb') # for writing open(filename 'rb') # for reading  
from mod import * __all__ 
customBaseModelAdmin ModelAdmin BaseModelAdmin ModelAdmin 
    &gt;&gt;&gt; def f(alfa beta gamma):     ...     print alfa beta gamma     ...     &gt;&gt;&gt; f(**{'alfa': 1 'beta': 2 'gamma': 3})     1 2 3      &gt;&gt;&gt; def g(**kwargs):     ...     f(**kwargs)     ...     &gt;&gt;&gt; g(**{'alfa': 1 'beta': 2 'gamma': 3})     1 2 3  
finditer groupdict None import re  def mergedgroupdict(pattern thestring):   there = re.compile(pattern)   result = {}   for mo in there.finditer(thestring):     d = mo.groupdict()     for k in d:       if k not in result and d[k] is not None:         result[k] = d[k]   return result  &gt;&gt;&gt; mergedgroupdict('(?P&lt;b&gt;.b.)|(?P&lt;i&gt;.i.)' 'abcdefghijk') {'i': 'hij' 'b': 'abc'} &gt;&gt;&gt; mergedgroupdict('(?P&lt;b&gt;.b.)|(?P&lt;i&gt;.i.)' 'abcdefghijk'[::-1]) {'i': 'jih' 'b': 'cba'}  
print open("my-debug-log.txt" "w").write(repr(variable)) 
test_detail_status_code test_list_status_code get_absolute_url() test_list_numer_of_items test_detail_template test_list_template save() null null save() 
gconf /desktop/gnome/interface/buttons_have_icons  C:\Program Files\Gtk+\etc\gtkrc gtk-button-images = 1 ~/.gtkrc-2.0 gconf image = gtk.Image() #  (from http://www.pygtk.org/docs/pygtk/gtk-stock-items.html) image.set_from_stock(gtk.STOCK_**) button = gtk.Button() button.set_image(image) button.set_label("")  
everythingOK=True False 
table.insert() result.last_inserted_ids() 
seen = set() for x in foo:     if x in seen:         continue     seen.add(x)     # do something  set unique_everseen for x in unique_everseen(foo):     # do something  
- stdin python - &lt;&lt;END  
select_related x = MainTable.objects.get( id="some Object" ) y= x.subTable  for m in MainTable.objects.all():     y = m.subTable     if y.someAttribute &gt; 5:          break  MainTable x.subTable MainTable.objects.select_related()... 
__unicode__ __str__ class A(int):     def __str__(self):         print "A.str"         return int.__str__(self)      def __unicode__(self):         print "A.unicode"         return int.__str__(self)  class B(int):     def __str__(self):         print "B.str"         return int.__str__(self)   unicode(A(1)) # prints "A.unicode" unicode(B(1)) # prints "B.str"  
l = [huge list from your example] for e in l: # for each list     for t in e: # for each tuple         for s in t: # each string             if 'playAudio' in s:                 args = s[9:].split('') #skip 'playAudio' split on comma                 print "%s%s" % (args[0].strip('(')                                  args[1].lstrip(" ")[0:args[1].find(')')]  from BeautifulSoup import BeautifulSoup SoupStrainer import re import urllib2  doc = urllib2.urlopen("http://www.learnersdictionary.com/search/python").read() doc = doc.replace('&lt;/SCR' '') audioLinks = SoupStrainer('a' onclick=re.compile(r'^playAudio')) soup = [str(elm) for elm in BeautifulSoup(doc parseOnlyThese=audio)] for elm in soup:     print re.search(r'playAudio\((.*[^)])\)' elm).group(1)     # prints 'python01.wav' 'py*thon'  
'D:\\aaa.db' 
data = data[1] + data[0]  struct &gt;&gt;&gt; from struct import pack unpack &gt;&gt;&gt; unpack('&lt;H' '\x12\x13') (4882) &gt;&gt;&gt; pack('&gt;H' *unpack('&lt;H' '\x12\x13')) '\x13\x12'  
boost::python::object PyObject* object(); None 
__import__('some_module')  
import sys import subprocess  class Fanspeed(object):      def __init__(self command):         self.command = command.split()      def average_fan_speed(self):         data = subprocess.Popen(CMDstdout=subprocess.PIPE).stdout.readlines()          count = total = 0         for item in data:             if "Reading" in item:                 # Extract variable length fan speed without regex.                 total += int(item.split(":")[1].split()[0])                 count += 1         # Sometimes omreport returns zero output if omsa services aren't started.         if not count or not total:             raise ValueError("I found no fans. Is OMSA services started?"          avg = (total / count)         return % avg  if __main__ == '__main__':     # Munin populates sys.argv[1] with "" (an empty argument) lets remove it.     sys.argv = [x for x in sys.argv if x]      if len(sys.argv) &gt; 1:         if sys.argv[1].lower() == "autoconfig":             print "autoconfig"         elif sys.argv[1].lower() == "config":             print "graph_title Average Fan Speed"             print "graph_args --base 1000 -l 0"             print "graph_vlabel speed (RPM)"             print "graph_category Chassis"             print "graph_info This graph shows the average speed of all fans"             print "graph_period second"             print "speed.label speed"             print "speed.info Average fan speed for the five minutes."     else:         try:             cmd = "/usr/sbin/omreport chassis fans"             fanspeed = Fanspeed(cmd)             average = fanspeed.average_fan_speed()         except OSError e:             print &gt;&gt; sys.stderr "Error running '%s' %s" % (cmd e)             sys.exit(1)         except ValueError e:             # Sometimes omreport returns zero output if omsa services aren't started.             print &gt;&gt; sys.stderr 'Error: "omreport chassis fans" returned 0 output.'             print &gt;&gt; sys.stderr 'OMSA running? Try: "srvadmin-services.sh status".'             sys.exit(1)  
title = u'\xb5\xb1\xc4\xe3\xb9\xc2\xb5\xa5\xc4\xe3\xbb\xe1\xcf\xeb\xc6\xf0\xcb\xad' print title.encode('latin-1').decode('gbk') ?????????  
&lt;input type="checkbox" name="vehicle" value="Bike" /&gt; &lt;input type="checkbox" name="vehicle" value="Car" /&gt; &lt;input type="checkbox" name="vehicle" value="Airplane" /&gt;  def delete(request):     values = request.POST.getlist(u'vehicle')     # Handling goes here.  
print results.split(' ')[5]  rx = re.compile('version\s+([\d.]+)\s+') rxx = rx.search(results) if rxx:     print rxx.group(1)  
def entry_icon_event(self widget icon event):     if icon == gtk.ENTRY_ICON_PRIMARY:         ...     elif icon == gtk.ENTRY_ICON_SECONDARY:         ...  
filename="file1" if filename == 'file1':     print 1  
def filepath(filename foldername=None envar='MYAPPDIR'):   default = '~/myFolder'   if foldername:     default = os.path.join(default foldername)   dirpath = os.path.expanduser(os.environ.get(envar default))    try:     os.makedirs(dirpath)   except OSError as e:     if e.errno != errno.EEXIST:       raise   return os.path.join(dirpath filename)  def filepath(filename foldername=None envar='MYAPPDIR'):   dirpath = os.path.expanduser(os.environ.get(envar "~/myFolder"))   if foldername:     dirpath = os.path.join(dirpath foldername)    try:     os.makedirs(dirpath)   except OSError as e:     if e.errno != errno.EEXIST:       raise   return os.path.join(dirpath filename)  def filepath(filename foldername=None envar='MYAPPDIR'):   default = os.path.join(os.environ.get("XDG_CONFIG_HOME" "~/.config") "myFolder")   dirpath = os.path.expanduser(os.environ.get(envar default))   if foldername:     dirpath = os.path.join(dirpath foldername)    try:     os.makedirs(dirpath)   except OSError as e:     if e.errno != errno.EEXIST:       raise   return os.path.join(dirpath filename)  
class AutoRegister(type):   def __new__(mcs name bases D):     self = type.__new__(mcs name bases D)     if "ID" in D:  # only register if has ID attribute directly       if self.ID in self._by_id:         raise ValueError("duplicate ID: %r" % self.ID)       self._by_id[self.ID] = self     return self  class Base(object):   __metaclass__ = AutoRegister   _by_id = {}   ID = "base"    @classmethod   def from_id(cls id):     return cls._by_id[id]()  class A(Base):   ID = "A"  class B(Base):   ID = "B"  print Base.from_id("A") print Base.from_id("B")  class IDFactory(object):   def __init__(self):     self._by_id = {}   def register(self cls):     self._by_id[cls.ID] = cls     return cls    def __call__(self id *args **kwds):     return self._by_id[id](*args **kwds)   # could use a from_id function instead as above  factory = IDFactory()  @factory.register class Base(object):   ID = "base"  @factory.register class A(Base):   ID = "A"  @factory.register class B(Base):   ID = "B"  print factory("A") print factory("B")  class IDFactory(object):   def __init__(self):     self._by_id = {}    def register(self cls):     self._by_id[cls.ID] = cls     return cls    def register_as(self name):     def wrapper(cls):       self._by_id[name] = cls       return cls     return wrapper    # ...  @factory.register_as("A")  # doesn't require ID anymore @factory.register          # can still use ID even mix and match @factory.register_as("B")  # imagine we got rid of B class A(object):           #  and A fulfills that roll now   ID = "A"  class IDFactory(object):   #...  class Base(object):   factory = IDFactory()    @classmethod   def register(cls subclass):     if subclass.ID in cls.factory:       raise ValueError("duplicate ID: %r" % subclass.ID)     cls.factory[subclass.ID] = subclass     return subclass  @Base.factory.register  # still completely decoupled                         # (it's an attribute of Base but that can be easily                         # changed without modifying the class A below) @Base.register  # alternatively more coupled but possibly desired class A(Base):   ID = "A"  
(?:[a-z]+-\d{15})(?: [a-z]+-\d{15})*\|.*  &gt;&gt;&gt; regex = '[a-z]+-\d{15}(?: [a-z]+-\d{15})*\|.*' &gt;&gt;&gt; re.match(regex 'proj-234 proj-345|log message') is not None True  prefs _ log = subj.partition('|') for group in prefs.split(' '):     pref _ id5 = group.partition('-')     if id5.isdigit() and len(id5) &lt;= 5 and pref.isalpha():          print(pref id5)  
Temps FanSpeed Animal Animal 
basic.return basic.return 
[item for item in a if item[0] == 1]  [item for item in a if 1 in item]  
codecs import codecs outputFile = codecs.open("textbase.tab" "w" "ISO-8859-1")  unicode str codecs.open 
value = b if a &gt; 10 else c  value = [c b][a &gt; 10]  
System.DirectoryServices.AccountManagment UserPrincipal 
site-packages PYTHON_EGG_CACHE ~/.python-eggs .python-eggs /tmp/python-eggs PYTHON_EGG_CACHE -Z easy_install 
while True if-break 
import paramiko transport=paramiko.Transport("10.10.0.0") transport.connect(username="service"password="word") sftp=paramiko.SFTPClient.from_transport(transport) filestat=sftp.stat("/opt/ad/bin/email_tidyup.sh")  import paramiko client=paramiko.SSHClient() client.load_system_host_keys() client.connect("10.10.0.0"username="service"password="word") _stdout_=client.exec_command("[ -f /opt/ad/bin/email_tidyup.sh ] &amp;&amp; echo OK") assert stdout.read()  
gzip zlib GzipWrap from gzip import GzipFile  class GzipWrap(object):     # input is a filelike object that feeds the input     def __init__(self input filename = None):         self.input = input         self.buffer = ''         self.zipper = GzipFile(filename mode = 'wb' fileobj = self)      def read(self size=-1):         if (size &lt; 0) or len(self.buffer) &lt; size:             for s in self.input:                 self.zipper.write(s)                 if size &gt; 0 and len(self.buffer) &gt;= size:                     self.zipper.flush()                     break             else:                 self.zipper.close()             if size &lt; 0:                 ret = self.buffer                 self.buffer = ''         else:             ret self.buffer = self.buffer[:size] self.buffer[size:]         return ret      def flush(self):         pass      def write(self data):         self.buffer += data      def close(self):         self.input.close()  
format '{0:0=#10b}'.format(my_num)[2:] # '00001010'  def str2bits(astr):     for char in astr:             n=ord(char)         for bit in '{0:0=#10b}'.format(n)[2:]:             yield int(bit)  def grouper(n iterable fillvalue=None):     # Source: http://docs.python.org/library/itertools.html#recipes     "grouper(3 'ABCDEFG' 'x') --&gt; ABC DEF Gxx"     return itertools.izip_longest(*[iter(iterable)]*nfillvalue=fillvalue)  def bits2str(bits):     for b in grouper(8bits):         yield chr(int(''.join(map(strb))2))  for b in str2bits('Hi Zvarberg'):     print b # 0 1 0 0 1 0 0 0 0 1 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 1 0 1 0 0 1 1 1 0 1 1 0 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 1 1 1  # To show bits2str is the inverse of str2bits: print ''.join([c for c in bits2str(str2bits('Hi Zvarberg'))]) # Hi Zvarberg  
j = i  CALL_FUNCTION BUILD_CLASS type(name bases dict) 
del import del __del__ __del__ &gt;&gt;&gt; class visdel(object): ...   def __del__(self): print 'del' id(self) ...  &gt;&gt;&gt; d = visdel() &gt;&gt;&gt; a = list() &gt;&gt;&gt; a.append(d) &gt;&gt;&gt; del d &gt;&gt;&gt;  del __del__ del __del__ &gt;&gt;&gt; a.append(visdel()) &gt;&gt;&gt; a[:]=[1 2 3] del 550864 del 551184  del __del__ del del pop 
load_dynamic_engine() load_dynamic() load_openssl() load_dynamic_engine() 
class Worker run 
SQLAlchemyError 
if not name.startswith('doc'):      print name  if not name.startswith(('prefix' 'another' 'yetanother')):      print name  
class FocusEmittingButton(QPushButton):     #...     def focusInEvent(self event):         # emit your signal  Promote To FocusEmittingButton QApplication.focusChanged QApplication.focusChanged(oldQWidget newQWidget) QApplication.focusChanged 
class Foo:     # static method     @staticmethod     def test():         pass      # class variable     c = {'name' : test }  
(id)   0   1    0   1 smooth  1   11  choppy 2   20  turbulent 3   2  smooth 4   5  choppy 5  7   bumpy  import numpy as np arr=np.loadtxt('datafile'                dtype=[('id''int')('speed''float')('surface''|S20')]                 skiprows=1)  skiprows=1 arr[1] arr['speed'] arr[3]['speed'] arr['speed'][3] 
Enumerable.Select Func&lt;TSource int TResult&gt; char[] letters = new[] { 'a' 'b' 'c' }; var enumerate = letters.Select((c i) =&gt; new { Char = c Index = i }); foreach (var result in enumerate) {     Console.WriteLine(         String.Format("Char = {0} Index = {1}" result.Char result.Index)     ); }  Char = a Index = 0 Char = b Index = 1 Char = c Index = 2  
def foo(         flab_nickers # a series of under garments to process         has_polka_dots=False         needs_pressing=False  # Whether the list of garments should all be pressed    ):     ...  def foo(         flab_nickers          has_polka_dots=False         needs_pressing=False    ):    """foo     :param flab_nickers: a series of under garments to process    :type flab_nickers: list or tuple    :param has_polka_dots: default False    :type has_polka_dots: bool    :param needs_pressing: default False Whether the list of garments should all be pressed    :type needs_pressing: bool    """     ...  param docutils 
def engine_initz(self):         """Return engine name"""         return m2.engine_initz(self._ptr)  void engine_init(PyObject *engine_err) {     Py_INCREF(engine_err);     _engine_err = engine_err; }  %rename(engine_initz) ENGINE_init; extern int ENGINE_init(ENGINE *);  
re.sub import re s = "87 foo 87 bar" r = re.compile(r"87\s*") s = r.sub('' s) print s  foo bar  
def addslashes(value):     """     Adds slashes before quotes. Useful for escaping strings in CSV for     example. Less useful for escaping JavaScript; use the ``escapejs``     filter instead.     """     return value.replace('\\' '\\\\').replace('"' '\\"').replace("'" "\\'") addslashes.is_safe = True addslashes = stringfilter(addslashes)  
libvlc_media_player_new 
{% if is_loggedin or is_anonymous %} test message {% endif %}  
def saveSnapshot(dcSource):     # based largely on code posted to wxpython-users by Andrea Gavana 2006-11-08     size = dcSource.Size      # Create a Bitmap that will later on hold the screenshot image     # Note that the Bitmap must have a size big enough to hold the screenshot     # -1 means using the current default colour depth     bmp = wx.EmptyBitmap(size.width size.height)      # Create a memory DC that will be used for actually taking the screenshot     memDC = wx.MemoryDC()      # Tell the memory DC to use our Bitmap     # all drawing action on the memory DC will go to the Bitmap now     memDC.SelectObject(bmp)      # Blit (in this case copy) the actual screen on the memory DC     # and thus the Bitmap     memDC.Blit( 0 # Copy to this X coordinate         0 # Copy to this Y coordinate         size.width # Copy this width         size.height # Copy this height         dcSource # From where do we copy?         0 # What's the X offset in the original DC?         0  # What's the Y offset in the original DC?         )      # Select the Bitmap out of the memory DC by selecting a new     # uninitialized Bitmap     memDC.SelectObject(wx.NullBitmap)      img = bmp.ConvertToImage()     img.SaveFile('saved.png' wx.BITMAP_TYPE_PNG)  
&gt;&gt;&gt; id(2) == id(1+1) True &gt;&gt;&gt; id(1000) == id(1000+0) False &gt;&gt;&gt; id(1000) == id(1000) True  &gt;&gt;&gt; id(0) 8402324  id(1000) == id(1000) 
from mpl_toolkits.mplot3d import Axes3D import matplotlib.pyplot as plt import numpy as np import matplotlib.dates as dates import datetime random import matplotlib.ticker as ticker  def random_date():     date = datetime.date(2008 12 1)     while 1:         date += datetime.timedelta(days=30)         yield (date)  def format_date(x pos=None):     return dates.num2date(x).strftime('%Y-%m-%d') #use FuncFormatter to format dates  r_d = random_date() some_dates = [dates.date2num(next(r_d)) for i in range(020)]  fig = plt.figure(figsize=(10 10)) ax = Axes3D(figrect=[00.111]) #make room for date labels  for c z in zip(['r' 'g' 'b' 'y'] [30 20 10 0]):     xs = np.array(some_dates)     ys = np.random.rand(20)     ax.bar(xs ys zs=z zdir='y' color=c alpha=0.8width=8)  ax.w_xaxis.set_major_locator(ticker.FixedLocator(some_dates)) # I want all the dates on my xaxis ax.w_xaxis.set_major_formatter(ticker.FuncFormatter(format_date)) for tl in ax.w_xaxis.get_ticklabels(): # re-create what autofmt_xdate but with w_xaxis     tl.set_ha('right')     tl.set_rotation(30)       ax.set_ylabel('Series') ax.set_zlabel('Amount')  plt.show()  
setUp test class OurTest( unittest.TestCase ):     def setUp( self ):         self.load_data()         self.load_results()         self.uut = ... UUT ...     def runTest( self ):         ... exercise UUT with source data ...         ... check results using self.assertXXX methods ...  class Test1( OurTest ):     source_file = 'this'     result_file = 'that'  class Test2( OutTest ):     source_file= 'foo'     result_file= 'bar'  
def specialconvolve(a):     # sorry you must pad the input yourself     rowconvol = a[1:-1:] + a[:-2:] + a[2::]     colconvol = rowconvol[:1:-1] + rowconvol[::-2] + rowconvol[:2:] - 9*a[1:-11:-1]     return colconvol  
l = [[0]] * 4 l[0][0] += 1 print l # prints "[[1] [1] [1] [1]]"  import copy l = [copy.copy(x) for x in [[0]] * 4] l[0][0] += 1 print l # prints "[[1] [0] [0] [0]]"  __copy__ copy copy.deepcopy arrayList = [] for x in allValues:     result = model(x)     arrayList.append(wM) # appends the wM object to the list     wM.reset()           # clears  the wM object  import copy arrayList = [] for x in allValues:     result = model(x)     arrayList.append(copy.copy(wM)) # appends a copy to the list     wM.reset()                      # clears the wM object  wM wM model() wM result 
writeback=True shelf['foobar'].append(23)  shelf 'foobar' shelf thelist = shelf['foobar'] thelist.append(23) shekf['foobar'] = thelist  
#! /usr/bin/env python3 import _thread import abc as _abc import collections as _collections import enum as _enum import math as _math import multiprocessing as _multiprocessing import operator as _operator import queue as _queue import signal as _signal import sys as _sys import time as _time  __all__ = (     'Executor'     'get_timeout'     'set_timeout'     'submit'     'map_'     'shutdown' )   class _Base(metaclass=_abc.ABCMeta):     __slots__ = (         '__timeout'     )      @_abc.abstractmethod     def __init__(self timeout):         self.timeout = _math.inf if timeout is None else timeout      def get_timeout(self):         return self.__timeout      def set_timeout(self value):         if not isinstance(value (float int)):             raise TypeError('value must be of type float or int')         if value &lt;= 0:             raise ValueError('value must be greater than zero')         self.__timeout = value      timeout = property(get_timeout set_timeout)   def _run_and_catch(fn args kwargs):     # noinspection PyPep8PyBroadException     try:         return False fn(*args **kwargs)     except:         return True _sys.exc_info()[1]   def _run(fn args kwargs queue):     queue.put_nowait(_run_and_catch(fn args kwargs))   class _State(_enum.IntEnum):     PENDING = _enum.auto()     RUNNING = _enum.auto()     CANCELLED = _enum.auto()     FINISHED = _enum.auto()     ERROR = _enum.auto()   def _run_and_catch_loop(iterable *args **kwargs):     exception = None     for fn in iterable:         error value = _run_and_catch(fn args kwargs)         if error:             exception = value     if exception:         raise exception   class _Future(_Base):     __slots__ = (         '__queue'         '__process'         '__start_time'         '__callbacks'         '__result'         '__mutex'     )      def __init__(self timeout fn args kwargs):         super().__init__(timeout)         self.__queue = _multiprocessing.Queue(1)         self.__process = _multiprocessing.Process(             target=_run             args=(fn args kwargs self.__queue)             daemon=True         )         self.__start_time = _math.inf         self.__callbacks = _collections.deque()         self.__result = True TimeoutError()         self.__mutex = _thread.allocate_lock()      @property     def __state(self):         pid exitcode = self.__process.pid self.__process.exitcode         return (_State.PENDING if pid is None else                 _State.RUNNING if exitcode is None else                 _State.CANCELLED if exitcode == -_signal.SIGTERM else                 _State.FINISHED if exitcode == 0 else                 _State.ERROR)      def __repr__(self):         root = f'{type(self).__name__} at {id(self)} state={self.__state.name}'         if self.__state &lt; _State.CANCELLED:             return f'&lt;{root}&gt;'         error value = self.__result         suffix = f'{"raised" if error else "returned"} {type(value).__name__}'         return f'&lt;{root} {suffix}&gt;'      def __consume_callbacks(self):         while self.__callbacks:             yield self.__callbacks.popleft()      def __invoke_callbacks(self):         self.__process.join()         _run_and_catch_loop(self.__consume_callbacks() self)      def cancel(self):         self.__process.terminate()         self.__invoke_callbacks()      def __auto_cancel(self):         elapsed_time = _time.perf_counter() - self.__start_time         if elapsed_time &gt; self.timeout:             self.cancel()         return elapsed_time      def cancelled(self):         self.__auto_cancel()         return self.__state is _State.CANCELLED      def running(self):         self.__auto_cancel()         return self.__state is _State.RUNNING      def done(self):         self.__auto_cancel()         return self.__state &gt; _State.RUNNING      def __handle_result(self error value):         self.__result = error value         self.__invoke_callbacks()      def __ensure_termination(self):         with self.__mutex:             elapsed_time = self.__auto_cancel()             if not self.__queue.empty():                 self.__handle_result(*self.__queue.get_nowait())             elif self.__state &lt; _State.CANCELLED:                 remaining_time = self.timeout - elapsed_time                 if remaining_time == _math.inf:                     remaining_time = None                 try:                     result = self.__queue.get(True remaining_time)                 except _queue.Empty:                     self.cancel()                 else:                     self.__handle_result(*result)      def result(self):         self.__ensure_termination()         error value = self.__result         if error:             raise value         return value      def exception(self):         self.__ensure_termination()         error value = self.__result         if error:             return value      def add_done_callback(self fn):         if self.done():             fn(self)         else:             self.__callbacks.append(fn)      def _set_running_or_notify_cancel(self):         if self.__state is _State.PENDING:             self.__process.start()             self.__start_time = _time.perf_counter()         else:             self.cancel()   class Executor(_Base):     __slots__ = (         '__futures'     )      def __init__(self timeout=None):         super().__init__(timeout)         self.__futures = set()      def submit(self fn *args **kwargs):         future = _Future(self.timeout fn args kwargs)         self.__futures.add(future)         future.add_done_callback(self.__futures.remove)         # noinspection PyProtectedMember         future._set_running_or_notify_cancel()         return future      @staticmethod     def __cancel_futures(iterable):         _run_and_catch_loop(map(_operator.attrgetter('cancel') iterable))      def map(self fn *iterables):         futures = tuple(self.submit(fn *args) for args in zip(*iterables))          def result_iterator():             future_iterator = iter(futures)             try:                 for future in future_iterator:                     yield future.result()             finally:                 self.__cancel_futures(future_iterator)          return result_iterator()      def shutdown(self):         self.__cancel_futures(frozenset(self.__futures))      def __enter__(self):         return self      def __exit__(self exc_type exc_val exc_tb):         self.shutdown()         return False   _executor = Executor() get_timeout = _executor.get_timeout set_timeout = _executor.set_timeout submit = _executor.submit map_ = _executor.map shutdown = _executor.shutdown del _executor  
str.split str.join "/".join(['' 'segment' 'segment' ''])  '/' join() 
if set(L) &amp; set(M):     # there is an intersection else:     # no intersection  True False bool(set(L) &amp; set(M))  m_set=set(M) any(x in m_set  for x in L)  any(x in M for x in L)  M=range(100) L=range(100200)  timeit set(L) &amp; set(M) 10000 loops best of 3: 32.3 µs per loop  timeit any(x in M for x in L) 1000 loops best of 3: 374 µs per loop  timeit m_set=frozenset(M);any(x in m_set  for x in L) 10000 loops best of 3: 31 µs per loop  L=range(50150)  timeit set(L) &amp; set(M) 10000 loops best of 3: 18 µs per loop  timeit any(x in M for x in L) 100000 loops best of 3: 4.88 µs per loop  timeit m_set=frozenset(M);any(x in m_set  for x in L) 100000 loops best of 3: 9.39 µs per loop   # Now for some random lists import random L=[random.randrange(200000) for x in xrange(1000)] M=[random.randrange(200000) for x in xrange(1000)]  timeit set(L) &amp; set(M) 1000 loops best of 3: 420 µs per loop  timeit any(x in M for x in L) 10 loops best of 3: 21.2 ms per loop  timeit m_set=set(M);any(x in m_set  for x in L) 1000 loops best of 3: 168 µs per loop  timeit m_set=frozenset(M);any(x in m_set  for x in L) 1000 loops best of 3: 371 µs per loop  
&gt;&gt;&gt; class MyThread(threading.Thread): ...   def __init__(self): ...     super(MyThread self).__init__()  super super(threading.Thread ... 
  SELECT CONCAT(x.weight ' ' GROUP_CONCAT(t.id SEPARATOR ' ') '\n')     FROM TRANSACTIONLOG t     JOIN (SELECT tl.tableid                  tl.tupleid                  COUNT(DISTINCT tl.transactionid) AS weight             FROM TRANSACTIONLOG tl            WHERE tl.querytype = 'update'         GROUP BY tl.tableid tl.tupleid) x ON x.tableid = t.tableid                                           AND x.tupleid = t.tupleid                                           AND x.weight &gt; 0 GROUP BY t.tableid t.tupleid x.weight   HAVING COUNT(*) &gt; 1  
&gt;&gt;&gt; f = open("/tmp/gs.pid" "r") &gt;&gt;&gt; for line in f:     ...   word = line.strip().split()[1].lower()     ...   print " --&gt;" word &gt;&gt;&gt; f.close()  split() [1] lower() &gt;&gt;&gt; f = open("/tmp/gs.pid" "r") &gt;&gt;&gt; for line in f:     ...   words = line.strip().split()     ...   if len(words) &gt;= 2:     ...      print " --&gt;" words[1].lower()     ...   else:     ...      print 'Line contains fewer than 2 words.' &gt;&gt;&gt; f.close()  
socket.inet_ntoa(packed_ip) packed ip struct.pack() &gt;&gt;&gt; import socket &gt;&gt;&gt; import struct &gt;&gt;&gt; addr_long = int(&quot;0200A8C0&quot;16) &gt;&gt;&gt; hex(addr_long) '0x200a8c0' &gt;&gt;&gt; struct.pack(&quot;&lt;L&quot; addr_long) '\xc0\xa8\x00\x02'  &gt;&gt;&gt; socket.inet_ntoa(struct.pack(&quot;&lt;L&quot; addr_long)) '192.168.0.2' &gt;&gt;&gt;   
CommaSeparatedIntegerField my_ints = [12345]  class MyModel(models.Model):     values = CommaSeparatedIntegerField(max_length = 200)  my_ints MyModel m = MyModel(values = ''.join(my_ints)) m.save()  
Model 1 2 3 for {% for object in objects %}     Some value: {{ object.value }} {% endfor %}  
select_related select_related [ l.event_set.order_by( start_date ).all()[0] for l in Location.objects.select_related().all() ]  events = [] for l in Location.objects.select_related().all():     events.append( l.event_set.order_by( start_date ).all()[0] )  
'&amp;'.join('%s=%s' % (kv) for kv in params.items())  &gt;&gt;&gt; params = { 'foo' : 'bar+baz' 'qux' : 'quux' } &gt;&gt;&gt; urllib.urlencode(params) 'qux=quux&amp;foo=bar%2Bbaz'  
oauth_request.to_header() password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm() top_level_url = "http://example.com/" password_mgr.add_password(None top_level_url 'user' 'password') handler = urllib2.HTTPBasicAuthHandler(password_mgr) opener = urllib2.build_opener(urllib2.HTTPHandler handler) request = urllib2.Request(url)  
re.M re.S &gt;&gt;&gt; doc = """&lt;table border="1"&gt;     &lt;tr&gt;         &lt;td&gt;row 1 cell 1&lt;/td&gt;         &lt;td&gt;row 1 cell 2&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;row 2 cell 1&lt;/td&gt;         &lt;td&gt;row 2 cell 2&lt;/td&gt;     &lt;/tr&gt; &lt;/table&gt;"""  &gt;&gt;&gt; re.findall('&lt;tr&gt;(.*?)&lt;/tr&gt;' doc re.S) ['\n        &lt;td&gt;row 1 cell 1&lt;/td&gt;\n        &lt;td&gt;row 1 cell 2&lt;/td&gt;\n    '   '\n        &lt;td&gt;row 2 cell 1&lt;/td&gt;\n        &lt;td&gt;row 2 cell 2&lt;/td&gt;\n    '] &gt;&gt;&gt; re.findall('&lt;tr&gt;(.*?)&lt;/tr&gt;' doc re.M) []  
    d = conditionalize(d dim val)      def conditionalize(arr dim val):         arr = arr.swapaxes(dim 0)         shape = arr.shape[1:]       # shape of the sub-array when we omit the desired dimension.         count = array(shape).prod() # count of elements omitted the desired dimension.         arr = arr.reshape(array(arr.shape).prod()) # flatten the array in-place.         arr = arr[val*count:(val+1)*count] # take the needed elements         arr = arr.reshape((1)+shape) # the desired sub-array shape.         arr = arr. swapaxes(0 dim)   # fix dimensions          return arr  
urls = [many urls] links = [] funcs = []  for url in urls:     @funcs.append     def func(url=url):         page = open(url)         link = searchForLink(page)         links.append(link)  
Listener PyObject* notify notify PyObject* PyObject_CallMethod 
from project.project import * setenv PYTHONPATH /User/username/project import sys sys.path.append('/User/username/project')  
class MyModel(models.Model):   field1 = models.CharField(max_length=50)   field2 = models.CharField(max_length=50)    class Meta:     unique_together = ('field1' 'field2')  class Volume(models.Model):   id = models.AutoField(primary_key=True)   journal_id = models.ForeignKey(Journals db_column='jid' null=True verbose_name = "Journal")   volume_number = models.CharField('Volume Number' max_length=100)   comments = models.TextField('Comments' max_length=4000 blank=True)    class Meta:     unique_together = ('journal_id' 'volume_number')  
''.join(unicode(page_title 'utf-8').splitlines()) splitlines() 
lfmt inspect inspect import inspect def lfmt(s):     caller = inspect.currentframe().f_back     return s.format(**caller.f_locals)  a = 3 b = 'foo' c = dict(mykey='myval')  print(lfmt('a is {a} b is {b} mykey is {c[mykey]}')) # a is 3 b is foo mykey is myval  
if hasattr(program 'swimprogram'):     # ... elif hasattr(program 'campprogram'):     # ...  class Archive(models.Model):     pub_date = models.DateField()      def __unicode__(self):         return "Archive: %s" % self.pub_date  class ArchiveB(Archive):     def __unicode__(self):         return "ArchiveB: %s" % self.pub_date  &gt; a_id = Archive.objects.create(pub_date="2010-10-10").id &gt; b_id = ArchiveB.objects.create(pub_date="2011-11-11").id &gt; a = Archive.objects.get(id=a_id) &gt; b = Archive.objects.get(id=b_id) &gt; (a b) # they both look like archive objects (&lt;Archive: Archive: 2010-10-10&gt; &lt;Archive: Archive: 2011-11-11&gt;) &gt; hasattr(a 'archiveb') False &gt; hasattr(b 'archiveb') # but only one has access to an ArchiveB True  
&gt;&gt;&gt; [(m.group(0) m.start()) for m in re.finditer('[aeiou]'s)] [('u' 1) ('e' 3) ('a' 6) ('i' 8) ('a' 11) ('i' 13) ('i' 15) ('i' 18) ('e' 20) ('i' 23) ('a' 24) ('i' 26) ('o' 28) ('i' 30) ('o' 31) ('u' 32)]  
from paste.deploy import appconfig from pylons import config  from project.config.environment import load_environment  conf = appconfig('config:development.ini' relative_to='.') load_environment(conf.global_conf conf.local_conf)  from project.model import *  
from django.db.models import Lookup  class AbsoluteValueLessThan(Lookup):     lookup_name = 'lt'      def as_sql(self qn connection):         lhs lhs_params = qn.compile(self.lhs.lhs)         rhs rhs_params = self.process_rhs(qn connection)         params = lhs_params + rhs_params + lhs_params + rhs_params         return '%s &lt; %s AND %s &gt; -%s' % (lhs rhs lhs rhs) params  AbsoluteValue.register_lookup(AbsoluteValueLessThan)  Field.register_lookup(AbsoluteValueLessThan) 
getattr &gt;&gt;&gt; class MyClass(object): ...  def sayhello(self): ...   print "Hello World!" ...  &gt;&gt;&gt; m=MyClass() &gt;&gt;&gt; getattr(m"sayhello")() Hello World! &gt;&gt;&gt;   &gt;&gt;&gt; def sayhello(): ...  print "Hello World!" ...  &gt;&gt;&gt; globals().get("sayhello")() Hello World!  prove_riemann_hypothesis sayhello &gt;&gt;&gt; globals().get("prove_riemann_hypothesis" sayhello)() Hello World!  &gt;&gt;&gt; json_functions={} &gt;&gt;&gt; def make_available_to_json(f): ...  json_functions[f.__name__]=f ...  return f ... &gt;&gt;&gt; @make_available_to_json ... def sayhello(): ...  print "Hello World!" ... &gt;&gt;&gt; json_functions.get("sayhello")() Hello World! &gt;&gt;&gt; json_functions["sayhello"]() Hello World! &gt;&gt;&gt; json_functions.get("prove_riemann_hypothesis" sayhello)() Hello World!  
from paste.deploy import appconfig from pylons import config  from project.config.environment import load_environment  conf = appconfig('config:development.ini' relative_to='.') load_environment(conf.global_conf conf.local_conf)  from project.model import *  
class SearchForm(forms.Form):   text = forms.CharField()   metadata = forms.CharField()   figures = forms.CharField()    def generateSolrQuery(self):     return "+and+".join(["%s\u003A%s" % (fv) for fv in self.cleaned_data.items()])  
request.sessions request.session 
select count(*) sender from messages group by sender;  select count(*) sender day hour     from messages group by sender day hour     order by sender day hour;  
__new__ &gt;&gt;&gt; class sic(object): ...   def __new__(cls *x): return object.__new__(cls *x) ...  &gt;&gt;&gt; type(sic.__dict__['__new__']) &lt;type 'staticmethod'&gt;  &gt;&gt;&gt; class cis(sic): pass ...  &gt;&gt;&gt; class oops(sic cis): pass ...  Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: Error when calling the metaclass bases     Cannot create a consistent method resolution order (MRO) for bases sic cis  object object 
__slots__ __getstate__ -1 __slots__ __getstate__ &gt;&gt;&gt; class sic(object): ...   __slots__ = 'a' 'b' ...  &gt;&gt;&gt; import pickle &gt;&gt;&gt; pickle.dumps(sic() -1) '\x80\x02c__main__\nsic\nq\x00)\x81q\x01.' &gt;&gt;&gt; pickle.dumps(sic()) Traceback (most recent call last):   [snip snip]     raise TypeError("a class that defines __slots__ without " TypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled &gt;&gt;&gt;   -1 __slots__ -1 __slots__ -1 
def transform(functions arguments):   return [f(a) for f a in zip(functions arguments)]  
sc.enter(10 1 t.timestamp (sc)  sc.enter(3600 1 t.timestamp (sc)  s.enter(1 1 t.timestamp (s))  
time.struct_time(tm_year=2010 tm_mon=2 tm_mday=4 tm_hour=23 tm_min=44 tm_sec=19 tm_wday=3 tm_yday=35 tm_isdst=0) import time import calendar  struct = time.localtime() seconds = calendar.timegm(struct)  
class FurniturePiece(models.Model):     type = models.ForeignKey(FurnitureType)     color = models.ForeignKey(FurnitureColor)     sqft = models.IntegerField()     name = models.CharField(max_length=200 unique=True)  Room FurniturePiece FurniturePiece Room class FurniturePiece(models.Model):     room = models.ForeignKey(Room)     type = models.ForeignKey(FurnitureType)     color = models.ForeignKey(FurnitureColor)     sqft = models.IntegerField()     name = models.CharField(max_length=200)  
HttpResponseRedirect(((u'/page/?title=' + query_string).encode('utf-8'))  /page 
/usr/lib/pymodules/python2.5 /usr/lib/python2.5/site-packages sys.path.append('/usr/lib/pymodules/python2.5')   
utilpackage foo import urllib2  __all__ = ["foo"]  class foo(object):     myStringHtml = urllib2.urlopen("http://www.google.com").read()  from utilpackage import foo  from utilpackage import urllib2  
import mako repr(mako) 
return next( (i for i(kv) in enumerate(items) if k=='Spock')None)  next None 
re.sub() lookForPrefix('foobar?'listOfPrefixes) '' if \?\s*$ re.search() re.match() doSearch = { "text":"Search for: " "url":"http://www.google.com/#&amp;q=QUERY" "words":["^\?\s*""\?\s*$"] }  def lookForPrefix(querylistOfPrefixes):     for l in listOfPrefixes:         if re.search(l query):             return re.sub(l'' query)     return False  &gt;&gt;&gt; lookForPrefix('?foobar' doSearch["words"]) 'foobar' &gt;&gt;&gt; lookForPrefix('foobar?' doSearch["words"]) 'foobar' &gt;&gt;&gt; lookForPrefix('foobar' doSearch["words"]) False  ^\?\s*|\?\s*$ 
&gt;&gt;&gt; s = u'????' &gt;&gt;&gt; print repr(s) u'\u0435\u0441\u043b\u0438'  
badp shell=True /bin/sh COMSPEC shell=True dir copy shell=True shell=True /bin/sh /bin/sh /usr/bin/sh /tmp/run/launch.sh subprocess.Popen('/tmp/run/launch.sh' shell=True)  subprocess.Popen('/tmp/run/launch.sh' executable = '/usr/bin/sh' shell=True)  shell=True 
def get_random_filename(car_picture filename):     extension = filename.split('.')[-1]     return u'_%s_%s.%s' % (random.randint(010000000)                            random.randint(010000000)                            extension)  class CarPicture(models.Model):     title = models.TextField()     image = models.ImageField(upload_to=get_random_filename)  picture = CarPicture(title="Some Title" image=request.FILES['image']) picture.save()  picture.image.url()  &lt;img src="{{picture.image.url}}" title="{{picture.image.title}}"/&gt;  
&gt;&gt;&gt; L = [{'id':44} {'name':'alexa'}{'color':'blue'}]  &gt;&gt;&gt; newd = {} &gt;&gt;&gt; for d in L: ...    newd.update(d) &gt;&gt;&gt; newd['id'] 44  
cdef extern from "foo.h":     void *mmap(void *start size_t length int prot int flags int fd off_t offset)     cdef int PROT_READ     cdef int MAP_ANONYMOUS     ...  
   email_dispatcher.add_to_queue(my_email)  
data = [[0] * cols for i in range(rows)]  cols = 2 rows = 3 data = [[0 0]         [0 0]         [0 0]]  v = data[row][col]  val = 10 set_col = 5  for row in range(rows):     data[row][set_col] = val  for row in data:     row[set_col] = val  
ForeignKey def popularity(self):     return self.playlistitem_set.count()  
 args = self.request.arguments()  data = {}  for i in args:      data[i] = self.request.get_all(i)  form = forms.KeywordForm(data=data)  if form.is_valid():      [...]  
AC_INIT somefile AC_CONFIG_FILES configure somefile.in somefile somescript.py configure.ac AC_INIT(MILHOUSE 0.3.6) ...blah blah... AC_CONFIG_FILES([   some/Makefile   some/other/Makefile   somescript.py ])  somescript.py.in version = '''@PACKAGE_VERSION@'''  
&gt;&gt;&gt; import psycopg2 &gt;&gt;&gt; conn = psycopg2.connect('') &gt;&gt;&gt; cur = conn.cursor() &gt;&gt;&gt; cur.execute('select current _date') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; psycopg2.ProgrammingError: syntax error at or near "_date" LINE 1: select current _date                        ^  &gt;&gt;&gt; cur.execute('select current_date') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; psycopg2.InternalError: current transaction is aborted commands ignored until end of transaction block  &gt;&gt;&gt; conn.rollback() &gt;&gt;&gt; cur.execute('select current_date') &gt;&gt;&gt; cur.fetchall() [(datetime.date(2010 2 5))] &gt;&gt;&gt;   twisted.enterprise.adbapi try:     cur.execute("...")     cur.fetchall()     cur.close()     connection.commit() except:     connection.rollback()  
C = numpy.ascontiguousarray([567]"uint16")  # make an array C rawPointer = C.ctypes.data pC = ctypes.cast( rawPointer ctypes.POINTER( ctypes.c_uint16 )) pC[0:3] pC[1]=100 pC[0:3] C  
== __eq__ __cmp__ is is is is not None None None 
surf_inst SURF newKeyPoints = surf_inst(img mask keypoints)  keypoints img mask Mat keypoints operator() __call__ keypoints 
round &gt;&gt;&gt; int(round(1.5)) 2  &gt;&gt;&gt; help(round) Help on built-in function round in module __builtin__:  round(...)     round(number[ ndigits]) -&gt; floating point number      Round a number to a given precision in decimal digits (default 0 digits).     This always returns a floating point number.  Precision may be negative.  floor math from math import log10 floor def format_value_error(valueerror):     E = int(floor(log10(error)))     val = int(round(float(value) / 10**E))     err = int(round(float(error) / 10**E))     return "(%d +- %d) x 10^%d" % (val err E)  print format_value_error(123 12) print format_value_error(4234.3 2) print format_value_error(0.02312 0.003)  (12 +- 1) x 10^1 (4234 +- 2) x 10^0 (23 +- 3) x 10^-3  text x 10^0 
f = open(xmlfile).readlines() w = open('src_model.xml''w') empty=re.compile('^$') for line in open(xmlfile).readlines():     if empty.match(line):         continue     else:          w.write(line)  
int defaultdict from collections import defaultdict  myDict = defaultdict(int)  for item in myTupleList:     myDict[item[1]] += item[2]  defaultdict int from collections import defaultdict  myDict = defaultdict(int)  for _ key val in myTupleList:     myDict[key] += val  _ key val _ item[1] item[2] myTupleList myTupleList 
engine central_db def __init__(self):     global engine     global central_db     engine = engine_from_config(config 'sqlalchemy.central.')          central_db = create_engine(engine)  engine central_db 
class User(Base):     __tablename__='users'     id = Column(Integer primary_key=True)     name = Column(String(32))     posts = relation("UserPost" backref="poster")  class UserPost(Base):     __tablename__='posts'     id = Column(Integer primary_key=True)     user_id = Column(Integer ForeignKey('users.id'))     subject = Column(String(32))  
--universal-archs=32-bit configure MACOSX_DEPLOYMENT_TARGET=10.6 export MACOSX_DEPLOYMENT_TARGET=10.6 ./configure --universal-archs=32-bit --enable-universalsdk=/Developer/SDKs/MacOSX10.6.sdk ...  configure 
except DoesNotExist django.core.exceptions.ObjectDoesNotExist len(SomeModel.objects.filter(...)) 
&gt;&gt;&gt; soup = BeautifulSoup.BeautifulStoneSoup(     """&lt;alan x="y" &gt;&lt;anne&gt;hello&lt;/anne&gt;"""     ) &gt;&gt;&gt; print soup.prettify() &lt;alan x="y"&gt;  &lt;anne&gt;   hello  &lt;/anne&gt; &lt;/alan&gt;  &gt;&gt;&gt; soup = BeautifulSoup.BeautifulStoneSoup(     """&lt;alan x="y" &gt;&lt;anne&gt;hello&lt;/anne&gt;"""     selfClosingTags=['alan']) &gt;&gt;&gt; print soup.prettify() &lt;alan x="y" /&gt; &lt;anne&gt;  hello &lt;/anne&gt; &gt;&gt;&gt;  &lt;alan x="y" /&gt; / alan 
class Attribute(models.Model):     name = models.CharField(max_length=20)  class Equipment(models.Model):     name = models.CharField(max_length=20)     attributes = models.ManyToManyField(Attribute)  equips = Equipment.objects.filter(     attributes__name='wheels').exclude(attributes__name='blades')  print equips.query.as_sql()  
setup_environ myapp PYTHONPATH #!/usr/bin/env python  from django.core.management import setup_environ  # If myapp is not in your PYTHONPATH append it to sys.path import sys sys.path.append('/path/to/myapp/')  # This must be AFTER you update sys.path from myapp import settings setup_environ(settings)  from myapp.models import Foo Bar  # do stuff foo = Foo.objects.get(id=1) bar = Bar.objects.filter(foo=foo.baz)  standalone.py D:\zjm_code\sphinx_test sphinx_test |-- __init__.py |-- manage.py |-- settings.py `-- urls.py  file_test python manage.py startapp file_test D:\zjm_code\sphinx_test sphinx_test |-- __init__.py |-- __init__.pyc |-- file_test |   |-- __init__.py |   |-- models.py |   |-- tests.py |   `-- views.py |-- manage.py |-- settings.py |-- settings.pyc `-- urls.py  File file_test\models.py from django.db import models from djangosphinx.models import SphinxSearchSphinxQuerySet  class File(models.Model):     name = models.CharField(max_length=200)     tags = models.CharField(max_length=200)      objects = models.Manager()     search  = SphinxQuerySet(index="test1")     #class Meta:#&lt;-----------  1     #    app_label = 'sphinx_test'#&lt;------ 2  python manage.py syncdb standalone.py file_test.models.File #!/path/to/python from django.core.management import setup_environ import sys sys.path.append('D:\zjm_code\sphinx_test')  from sphinx_test import settings setup_environ(settings)  # NOW you can import from your app from sphinx_test.file_test.models import File  f = File(name='test' tags='abcxyz' search='foo') f.save()  # confirm the data was saved if f.id:     print 'success!' else:     print 'fail!'  
word11 d['1'] = 'word1' &gt;&gt;&gt; K = sys.getsizeof('123456789012345678') &gt;&gt;&gt; V = sys.getsizeof('1234567') &gt;&gt;&gt; K V (42 31)  sys.getsizeof(str_object) =&gt; 24 + len(str_object) &gt;&gt;&gt; sys.getsizeof(()) 28 &gt;&gt;&gt; sys.getsizeof((1)) 32 &gt;&gt;&gt; sys.getsizeof((12)) 36 &gt;&gt;&gt; sys.getsizeof((123)) 40 &gt;&gt;&gt; sys.getsizeof(("foo" "bar")) 36 &gt;&gt;&gt; sys.getsizeof(("fooooooooooooooooooooooo" "bar")) 36 &gt;&gt;&gt;  sys.getsizeof(tuple_object) =&gt; 28 + 4 * len(tuple_object) sys.getsizeof(list_object) =&gt; 36 + 4 * len(list_object) &gt;&gt;&gt; sys.getsizeof(1234567) 12  
def padArgsWithTrue(func *args):     passed_args = list(args)     num_args = len(inspect.getargspec(func).args)     passed_args += [True] * (num_args - len(args))     return func(*passed_args)  print padArgsWithTrue(lambda xyzw: (x*y z w) 5 6)  
os.walk for root subdirs files in os.walk(rootdir):  root subdirs root files root subdirs os.path.join filePath = rootdir + '/' + file filePath = os.path.join(root file) import os import sys  walk_dir = sys.argv[1]  print('walk_dir = ' + walk_dir)  # If your current working directory may change during script execution it's recommended to # immediately convert program arguments to an absolute path. Then the variable root below will # be an absolute path as well. Example: # walk_dir = os.path.abspath(walk_dir) print('walk_dir (absolute) = ' + os.path.abspath(walk_dir))  for root subdirs files in os.walk(walk_dir):     print('--\nroot = ' + root)     list_file_path = os.path.join(root 'my-directory-list.txt')     print('list_file_path = ' + list_file_path)      with open(list_file_path 'wb') as list_file:         for subdir in subdirs:             print('\t- subdirectory ' + subdir)          for filename in files:             file_path = os.path.join(root filename)              print('\t- file %s (full path: %s)' % (filename file_path))              with open(file_path 'rb') as f:                 f_content = f.read()                 list_file.write(('The file %s contains:\n' % filename).encode('utf-8'))                 list_file.write(f_content)                 list_file.write(b'\n')  with with open('filename' 'rb') as f:     dosomething()  # is effectively the same as  f = open('filename' 'rb') try:     dosomething() finally:     f.close()  
message if ' ' in msg:     get = message.split(' ')[1] else:     get = message  
query = ( zipcode("zip") | foo("foo") )   print t"-&gt;" results results.getName()  80517 -&gt; ['80517'] zip Expected Re:('\\d{5}(?:[-\\s]\\d{4})?') (at char 0) (line:1 col:1) 90001-3234 -&gt; ['90001-3234'] zip ! sfs -&gt; ['! sfs'] foo  # enclose zipcodes in '*'s foos in '#'s zipcode.setParseAction(lambda t: '*' + t[0] + '*') foo.setParseAction(lambda t: '#' + t[0] + '#')  query = ( zipcode("zip") | foo("foo") )   80517 -&gt; ['*80517*'] zip Expected Re:('\\d{5}(?:[-\\s]\\d{4})?') (at char 0) (line:1 col:1) 90001-3234 -&gt; ['*90001-3234*'] zip ! sfs -&gt; ['#! sfs#'] foo  ssn = Combine(Word(numsexact=3) + '-' +          Word(numsexact=2) + '-' + Word(numsexact=4))  delimitedList(ssn '/')  ssn * (13)  class PairOf(Token):     """Token for matching words composed of a pair        of characters in a given set.     """     def __init__( self chars ):         super(PairOfself).__init__()         self.pair_chars = set(chars)      def parseImpl( self instring loc doActions=True ):         if (loc &lt; len(instring)-1 and             instring[loc] in self.pair_chars and            instring[loc+1] == instring[loc]):             return loc+2 instring[loc:loc+2]         else:             raise ParseException(instring loc "Not at a pair of characters")  punc = r"~!@#$%^&amp;*_-+=|\?/" parser = OneOrMore(Word(alphas) | PairOf(punc)) print parser.parseString("Does ** this match @@@@ %% the parser?")  ['Does' '**' 'this' 'match' '@@' '@@' '%%' 'the' 'parser']  
csv csv 
from pydoc import ttypager  def jhelp(object):      text = # get text for object      ttypager(text) # display a scrollable screen.  
namedtuple 
def proxy_wrapper(name docstring):     def wrapper(self *args **kwargs):         return self.proxy.__getattribute__(name)(*args **kwargs)     wrapper.__doc__ = docstring     wrapper._is_wrapper = True     return wrapper  class Something(object):     def __init__(self):         self.proxy = {}      @classmethod     def get_proxy_wrappers(cls):         return [m for m in dir(cls) if hasattr(getattr(cls m) "_is_wrapper")]      update = proxy_wrapper("update" "wraps the proxy's update() method")     proxy_keys = proxy_wrapper("keys" "wraps the proxy's keys() method")      &gt;&gt;&gt; a = Something() &gt;&gt;&gt; print a.proxy {} &gt;&gt;&gt; a.update({1: 42}) &gt;&gt;&gt; print a.proxy {1: 42} &gt;&gt;&gt; a.update({"foo": "bar"}) &gt;&gt;&gt; print a.proxy_keys() [1 'foo'] &gt;&gt;&gt; print a.get_proxy_wrappers() ['proxy_keys' 'update']  
class Status(models.Model):     code = models.IntegerField()     text = models.CharField(maxlength=255)      @classmethod     def successful(cls):         return cls.objects.get(code=0)      @classmethod     def failed(cls):         return cls.objects.get(code=1)  get() Status.DoesNotExist MultipleObjectsReturned class StatusManager(models.Manager):     def successful(self):         return self.get(code=1)      def failed(self):         return self.get(code=0)  class Status(models.Model):     code = models.IntegerField()     text = models.CharField(maxlength=255)      objects = StatusManager()  Status.objects.successful() Status.objects.failed() 
_registry = {}  def register(choice_class):     id = len(_registry) + 1     choice_class.id = id     _registry[id] = choice_class  def as_list():     ret = []     for id in sorted(_registry):         ret.append((id _registry[id].name))     return ret  def get_choice(id):     return _registry[id]  class SomeChoice:     name = u"lorem"  class AnotherChoice:     name = u"ipsum"  register(SomeChoice) register(AnotherChoice)  from django.db import models import choices  class SomeModel(models.Model):     somefield = models.IntegerField('field' choices=choices.as_list())  
easy_install easy_install scipy Searching for scipy Reading http://pypi.python.org/simple/scipy/ Reading http://www.scipy.org Reading http://sourceforge.net/project/showfiles.php?group_id=27747&amp;package_id=19531 Reading http://new.scipy.org/Wiki/Download  pip pip install svn+http://svn.scipy.org/svn/scipy/trunk/#egg=scipy  pip install git+https://github.com/scipy/scipy.git  
timedelta &gt;&gt;&gt; import datetime &gt;&gt;&gt; d = datetime.datetime(2010 12 25 18 25) &gt;&gt;&gt; d + datetime.timedelta(hours = 8) datetime.datetime(2010 12 26 2 25)  
&gt;&gt;&gt; k = [[1 2] [4] [5 6 2] [1 2] [3] [4]] &gt;&gt;&gt; import itertools &gt;&gt;&gt; k.sort() &gt;&gt;&gt; list(k for k_ in itertools.groupby(k)) [[1 2] [3] [4] [5 6 2]]  itertools timeit nodup.py import itertools  k = [[1 2] [4] [5 6 2] [1 2] [3] [4]]  def doset(k map=map list=list set=set tuple=tuple):   return map(list set(map(tuple k)))  def dosort(k sorted=sorted xrange=xrange len=len):   ks = sorted(k)   return [ks[i] for i in xrange(len(ks)) if i == 0 or ks[i] != ks[i-1]]  def dogroupby(k sorted=sorted groupby=itertools.groupby list=list):   ks = sorted(k)   return [i for i _ in itertools.groupby(ks)]  def donewk(k):   newk = []   for i in k:     if i not in newk:       newk.append(i)   return newk  # sanity check that all functions compute the same result and don't alter k if __name__ == '__main__':   savek = list(k)   for f in doset dosort dogroupby donewk:     resk = f(k)     assert k == savek     print '%10s %s' % (f.__name__ sorted(resk))  python nodup.py $ python -mtimeit -s'import nodup' 'nodup.doset(nodup.k)' 100000 loops best of 3: 11.7 usec per loop $ python -mtimeit -s'import nodup' 'nodup.dosort(nodup.k)' 100000 loops best of 3: 9.68 usec per loop $ python -mtimeit -s'import nodup' 'nodup.dogroupby(nodup.k)' 100000 loops best of 3: 8.74 usec per loop $ python -mtimeit -s'import nodup' 'nodup.donewk(nodup.k)' 100000 loops best of 3: 4.44 usec per loop  $ python -mtimeit -s'import nodup' 'nodup.donewk([[i] for i in range(12)])' 10000 loops best of 3: 25.4 usec per loop $ python -mtimeit -s'import nodup' 'nodup.dogroupby([[i] for i in range(12)])' 10000 loops best of 3: 23.7 usec per loop $ python -mtimeit -s'import nodup' 'nodup.doset([[i] for i in range(12)])' 10000 loops best of 3: 31.3 usec per loop $ python -mtimeit -s'import nodup' 'nodup.dosort([[i] for i in range(12)])' 10000 loops best of 3: 25 usec per loop  k 
None object.c TypeError &lt; &lt;= &gt;= &gt; TypeError 1 &lt; '' 0 &gt; None len &lt;= len None &lt; None TypeError False == != None None 
&lt;Location&gt; testproject /testproject/ 
+ related_name 
null=True syncdb NULL 
% 
fields = ('foreign_model_field' ('nested_field1' 'nested_field2'))  fields = ('updated' 'expires' 'created'      ('request' ('incident' 'reason' ('inputter' ('username')))))  
o = bar(xmwidth=wcolor='0.6' yerr=None) # note the comma after the o eBarX = o.get_x()+o.get_width()/2.0 eBarY = o.get_height() errorbar(eBarXeBarYecapsize=7elinewidth=6ecolor='k')  axes().xaxis.set_visible(False)  
last_name = soup.find('last_name') and soup.find('last_name').string  if last_name_node = soup.find('last_name') last_name = last_name_node and last_name_node.string  last_name = getattr(soup.find('last_name') 'string' None)  if 
only 
class B(A):     def __init__(self *a **k):       if 'W' in k:         w = k.pop('W')       else:         w = a.pop()       A.__init__(self *a **k)       self._W = w  
for filepath in sys.argv[1:]:     # ...     self.player.set_property("uri" "file://" + filepath)  'file:' + urllib.pathname2url(filepath)  C:\a\b.mp3 
''' Get windows special folders without pythonwin     Example:             import specialfolders             start_programs = specialfolders.get(specialfolders.PROGRAMS)  Code is public domain do with it what you will.   Luke Pinner - Environment.gov.au 2010 February 10 '''  #Imports use _syntax to mask them from autocomplete IDE's import ctypes as _ctypes from ctypes.wintypes import HWND as _HWND HANDLE as _HANDLEDWORD as _DWORDLPCWSTR as _LPCWSTRMAX_PATH as _MAX_PATH create_unicode_buffer as _cub _SHGetFolderPath = _ctypes.windll.shell32.SHGetFolderPathW  #public special folder constants DESKTOP=                             0 PROGRAMS=                            2 MYDOCUMENTS=                         5 FAVORITES=                           6 STARTUP=                             7 RECENT=                              8 SENDTO=                              9 STARTMENU=                          11 MYMUSIC=                            13 MYVIDEOS=                           14 NETHOOD=                            19 FONTS=                              20 TEMPLATES=                          21 ALLUSERSSTARTMENU=                  22 ALLUSERSPROGRAMS=                   23 ALLUSERSSTARTUP=                    24 ALLUSERSDESKTOP=                    25 APPLICATIONDATA=                    26 PRINTHOOD=                          27 LOCALSETTINGSAPPLICATIONDATA=       28 ALLUSERSFAVORITES=                  31 LOCALSETTINGSTEMPORARYINTERNETFILES=32 COOKIES=                            33 LOCALSETTINGSHISTORY=               34 ALLUSERSAPPLICATIONDATA=            35  def get(intFolder):     _SHGetFolderPath.argtypes = [_HWND _ctypes.c_int _HANDLE _DWORD _LPCWSTR]     auPathBuffer = _cub(_MAX_PATH)     exit_code=_SHGetFolderPath(0 intFolder 0 0 auPathBuffer)     return auPathBuffer.value  
time strptime() import time date = input('Date (mm/dd/yyyy): ') try:   valid_date = time.strptime(date '%m/%d/%Y') except ValueError:   print('Invalid date!')  raw_input input 
(1[Hh].|2[Hh]..|3[Hh]...|etc...)  
ModelMultipleChoiceField PizzaForm class PizzaForm(forms.ModelForm):     class Meta:         model = Pizza      # Representing the many to many related field in Pizza     toppings = forms.ModelMultipleChoiceField(queryset=Topping.objects.all())      # Overriding __init__ here allows us to provide initial     # data for 'toppings' field     def __init__(self *args **kwargs):         # Only in case we build the form from an instance         # (otherwise 'toppings' list should be empty)         if kwargs.get('instance'):             # We get the 'initial' keyword argument or initialize it             # as a dict if it didn't exist.                             initial = kwargs.setdefault('initial' {})             # The widget for a ModelMultipleChoiceField expects             # a list of primary key for the selected data.             initial['toppings'] = [t.pk for t in kwargs['instance'].topping_set.all()]          forms.ModelForm.__init__(self *args **kwargs)      # Overriding save allows us to process the value of 'toppings' field         def save(self commit=True):         # Get the unsave Pizza instance         instance = forms.ModelForm.save(self False)          # Prepare a 'save_m2m' method for the form         old_save_m2m = self.save_m2m         def save_m2m():            old_save_m2m()            # This is where we actually link the pizza with toppings            instance.topping_set.clear()            instance.topping_set.add(*self.cleaned_data['toppings'])         self.save_m2m = save_m2m          # Do we need to save all changes now?         if commit:             instance.save()             self.save_m2m()          return instance  PizzaForm # yourapp/admin.py from django.contrib.admin import site ModelAdmin from yourapp.models import Pizza from yourapp.forms import PizzaForm  class PizzaAdmin(ModelAdmin):   form = PizzaForm  site.register(Pizza PizzaAdmin)  save() commit=False def save(self):   instance = forms.ModelForm.save(self)   instance.topping_set.clear()   instance.topping_set.add(*self.cleaned_data['toppings'])   return instance  
MyClass.__contains__(self item) 
debug def debug(stdscr):     curses.nocbreak()     stdscr.keypad(0)     curses.echo()     curses.endwin()     import pdb; pdb.set_trace()  curses.wrapper 
urlpatterns = patterns(''     (r'^(?P&lt;city&gt;[a-z-]+)/(?P&lt;area&gt;[a-z-]+)/$' 'yourapp.views.areaview')     (r'^(?P&lt;city&gt;[a-z-]+)/(?P&lt;area&gt;[a-z-]+)/(?P&lt;entry&gt;[a-z-]+)/$' 'yourapp.views.entryview') )  
[mylist[i:] + [newelement] + mylist[:i] for i in xrange(len(mylist)-1-1)]  &gt;&gt;&gt; mylist=['A''B'] &gt;&gt;&gt; newelement='X' &gt;&gt;&gt; [mylist[i:] + [newelement] + mylist[:i] for i in xrange(len(mylist)-1-1)] [['X' 'A' 'B'] ['B' 'X' 'A'] ['A' 'B' 'X']]  
&lt;h4&gt;Statistics&lt;/h4&gt; &lt;ul&gt;  {% for key value in manor_stats.get_fields.items %}  &lt;li&gt; {{ key }}: {{ value }}&lt;/li&gt;  {% endfor %} &lt;/ul&gt;      manor_stats = Manors.objects.get(structidx__exact=id).get_fields()     return render_to_response('template.html' { 'place' : place 'manor_stats' : manor_stats } context_instance = RequestContext(request))  &lt;h4&gt;Statistics&lt;/h4&gt; &lt;ul&gt;  {% for key value in manor_stats.items %}  &lt;li&gt; {{ key }}: {{ value }}&lt;/li&gt;  {% endfor %} &lt;/ul&gt;  
save_m2m() form form = form.save(commit=False) instance = form.save(commit=False) form.save_m2m() instance.save() 
id() {{ question.key }} {{ question.key.id }} 
time.localtime()[0] __gettiem__() time.struct_time &gt;&gt;&gt; class MyTime(object): ...     def __init__(self year month mday hour minute): ...         self.data =  year month mday hour minute ...     def __getitem__(self idx): ...         return self.data[idx] ...     def __str__(self): ...         return "MyTime(tm_year=%s tm_mon=%s tm_mday=%s tm_hour=%s tm_min=%s)"%self.data ...  &gt;&gt;&gt; x=MyTime(2010271446) &gt;&gt;&gt; x[0] 2010 &gt;&gt;&gt; x[1] 2 &gt;&gt;&gt; print x MyTime(tm_year=2010 tm_mon=2 tm_mday=7 tm_hour=14 tm_min=46)  time.struct_time time.localtime() &gt;&gt;&gt; tm_yeartm_montm_mdaytm_hourtm_min=map(strtime.localtime()[:5])  
from webhelpers.pylonslib import secure_form  
random.Random random copy.deepcopy random fileinput 
sysv_ipc 
object __subclasses__ class A(object):  def hello(self):   print "Hello A"  class B(A):  def hello(self):    print "Hello B"  &gt;&gt;&gt; for cls in A.__subclasses__(): ...  print cls.__name__ ... B  &gt;&gt;&gt; def f(x): ...  class C(A): ...   def hello(self): ...    print "Hello C" ...  c = C() ...  c.hello() ...  print x ...  for cls in A.__subclasses__(): ...   print cls.__name__ ... &gt;&gt;&gt; f(4) Hello C 4 B C  C f 
__exact __contains exclude() filter() 
eval exec eval exec eval exec try: except: class def a_variable = (anything you can put within these parentheses is an expression)  eval exec None exec exec exec &gt;&gt;&gt; a = 5 &gt;&gt;&gt; eval('37 + a')   # it is an expression 42 &gt;&gt;&gt; exec('37 + a')   # it is an expression statement; value is ignored (None is returned) &gt;&gt;&gt; exec('a = 47')   # modify a global variable as a side effect &gt;&gt;&gt; a 47 &gt;&gt;&gt; eval('a = 47')  # you cannot evaluate a statement Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;string&gt;" line 1     a = 47       ^ SyntaxError: invalid syntax  compile 'exec' None 'eval' &gt;&gt;&gt; eval(compile('42' '&lt;string&gt;' 'exec'))  # code returns None &gt;&gt;&gt; eval(compile('42' '&lt;string&gt;' 'eval'))  # code returns 42 42 &gt;&gt;&gt; exec(compile('42' '&lt;string&gt;' 'eval'))  # code returns 42 &gt;&gt;&gt;                                          # but ignored by exec  'eval' eval compile &gt;&gt;&gt; compile('for i in range(3): print(i)' '&lt;string&gt;' 'eval') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;string&gt;" line 1     for i in range(3): print(i)       ^ SyntaxError: invalid syntax  eval compile(source '&lt;string&gt;' 'eval') code exec eval exec None eval compile &gt;&gt;&gt; eval(compile('if 1: print("Hello")' '&lt;string&gt;' 'exec')) Hello &gt;&gt;&gt;  None compile 'eval' eval compile &gt;&gt;&gt; compile('for i in range(3): print(i)' '&lt;string&gt;'. 'eval') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;string&gt;" line 1     for i in range(3): print(i)       ^ SyntaxError: invalid syntax  exec eval exec &gt;&gt;&gt; program = ''' for i in range(3):     print("Python is cool") ''' &gt;&gt;&gt; exec(program) Python is cool Python is cool Python is cool &gt;&gt;&gt;   eval &gt;&gt;&gt; a = 2 &gt;&gt;&gt; my_calculation = '42 * a' &gt;&gt;&gt; result = eval(my_calculation) &gt;&gt;&gt; result 84  exec eval str unicode bytes code str unicode bytes exec exec(compile(source '&lt;string&gt;' 'exec'))  eval eval(compile(source '&lt;string&gt;' 'eval'))  Expr exec eval('my_func(42)') exec('my_func(42)') eval my_func exec &gt;&gt;&gt; def my_func(arg): ...     print("Called with %d" % arg) ...     return arg * 2 ...  &gt;&gt;&gt; exec('my_func(42)') Called with 42 &gt;&gt;&gt; eval('my_func(42)') Called with 42 84 &gt;&gt;&gt;   exec def for while import class a = 42 &gt;&gt;&gt; exec('for i in range(3): print(i)') 0 1 2 &gt;&gt;&gt; eval('for i in range(3): print(i)') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;string&gt;" line 1     for i in range(3): print(i)       ^ SyntaxError: invalid syntax  exec eval globals locals globals() locals() exec eval globals mapping locals dict exec &gt;&gt;&gt; g = dict() &gt;&gt;&gt; l = dict() &gt;&gt;&gt; exec('global a; a b = 123 42' g l) &gt;&gt;&gt; g['a'] 123 &gt;&gt;&gt; l {'b': 42}  g exec eval __builtins__ exec exec code in globals locals &gt;&gt;&gt; exec 'global a; a b = 123 42' in g l  exec(code globals locals) compile compile(source filename mode flags=0 dont_inherit=False optimize=-1) exec eval code mode compile 'eval' 'exec' 'single' 'eval' &gt;&gt;&gt; dis.dis(compile('a + b' '&lt;string&gt;' 'eval'))   1           0 LOAD_NAME                0 (a)               3 LOAD_NAME                1 (b)               6 BINARY_ADD               7 RETURN_VALUE  'exec' None &gt;&gt;&gt; dis.dis(compile('a + b' '&lt;string&gt;' 'exec'))   1           0 LOAD_NAME                0 (a)               3 LOAD_NAME                1 (b)               6 BINARY_ADD               7 POP_TOP                             &lt;- discard result               8 LOAD_CONST               0 (None)   &lt;- load None on stack              11 RETURN_VALUE                        &lt;- return top of stack  'single' 'exec' ; repr if elif else else try except else finally 'single' &gt;&gt;&gt; exec(compile('a = 5\na = 6' '&lt;string&gt;' 'single')) &gt;&gt;&gt; a 5  &gt;&gt;&gt; exec(compile('a = 5\na = 6' '&lt;string&gt;' 'single')) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;string&gt;" line 1     a = 5         ^ SyntaxError: multiple statements found while compiling a single statement  eval exec eval compile compile code ast.parse compile(source filename mode PyCF_ONLY_AST) eval eval compile print eval &gt;&gt;&gt; eval('for i in range(3): print("Python is cool")') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;string&gt;" line 1     for i in range(3): print("Python is cool")       ^ SyntaxError: invalid syntax  compile 'exec' code eval eval None &gt;&gt;&gt; code = compile('for i in range(3): print("Python is cool")'                    'foo.py' 'exec') &gt;&gt;&gt; eval(code) Python is cool Python is cool Python is cool  eval exec PyEval_EvalCode exec None exec exec eval exec exec code [in globals[ locals]] exec exec exec(code globals locals) exec code globals locals exec code globals locals exec(expr globals) exec expr in globals exec(expr globals locals) exec expr in globals locals exec exec exec &gt;&gt;&gt; exec("print(a)" globals() {'a': 42}) 42  exec Python 2.7.11+ (default Apr 17 2016 14:00:29)  [GCC 5.3.1 20160413] on linux2 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; a = exec('print(42)')   File "&lt;stdin&gt;" line 1     a = exec('print(42)')            ^ SyntaxError: invalid syntax  exec None exec &gt;&gt;&gt; call_later(exec 'print(42)' delay=1000)   File "&lt;stdin&gt;" line 1     call_later(exec 'print(42)' delay=1000)                   ^ SyntaxError: invalid syntax  &gt;&gt;&gt; [exec(i) for i in ['print(42)' 'print(foo)']   File "&lt;stdin&gt;" line 1     [exec(i) for i in ['print(42)' 'print(foo)']         ^ SyntaxError: invalid syntax  for 
burn_values [25500] burn=[123]burn_values=[25500] gdal.RasterizeLayer(dsbandslayerburn_values options = ["BURN_VALUE_FROM=Z"]) 
a[ij] = x  
  from django.db import transaction     @transaction.autocommit     def my_count():            while True:           transaction.commit()           print "Number of Things: %d" % Thing.objects.count()           time.sleep(5)  
from mako.template import Template  print Template("${'foo %(a)s bar %(b)s' % data}").render(data=dict(a='Alpha'b='Beta'))  
iter next() for l1[0] l1 = ['1'] l2 = ['A'] l3 = ['2'] l4 = ['B'] l5 = ['3'] l6 = ['C']  listoflists = [l1l2l3l4l5l6]  f = open ('order.txt''w')  for inner_list in listoflists:     for element in inner_list:         f.write(element+'\n')  f.close()  
i i func funcs = [] for i in range(10):     def func(value=i):         print value     funcs.append(func)  for f in funcs:     f()  def func(i=i):     print i  value 
range=[10100] options='abc'  def func(val)      choose=str(options[bisect(rangeval)])      exec choose+"()" def a():       do_stuff def b():       do_other_stuff def c():       do_other_other stuff  
tkinter._fix tkinter/__init__.py --include-modules includes cx_Freeze.Executable setup.py 
import threading  def f(f_stop):     # do something here ...     if not f_stop.is_set():         # call f() again in 60 seconds         threading.Timer(60 f [f_stop]).start()  f_stop = threading.Event() # start calling f now and every 60 sec thereafter f(f_stop)  # stop the thread when needed #f_stop.set()  
type object object type type object type type object 
class PostAdmin(admin.ModelAdmin):     list_display = ('title' 'pubdate''user')  class MyPost(Post):     class Meta:         proxy = True  class MyPostAdmin(PostAdmin):     def get_queryset(self request):         return self.model.objects.filter(user = request.user)   admin.site.register(Post PostAdmin) admin.site.register(MyPost MyPostAdmin)  PostAdmin /admin/myapp/post /admin/myapp/myposts def create_modeladmin(modeladmin model name = None):     class  Meta:         proxy = True         app_label = model._meta.app_label      attrs = {'__module__': '' 'Meta': Meta}      newmodel = type(name (model) attrs)      admin.site.register(newmodel modeladmin)     return modeladmin  class MyPostAdmin(PostAdmin):     def get_queryset(self request):         return self.model.objects.filter(user = request.user)  create_modeladmin(MyPostAdmin name='my-posts' model=Post)  
canvas.pack()  &gt;&gt;&gt;def hello(): ...    print "hello world" ...    return  &gt;&gt;&gt;hello &gt;&gt;&gt;hello() 
LineDemo.reload src_b           = [l for l in self.fobj.readline() if l.strip()]  src_b           = [l for l in self.fobj.readlines() if l.strip()]  
sys.stdout.isatty() 
inspect.getfullargspec inspect.getargspec  &gt;&gt;&gt; def foo(x): pass  &gt;&gt;&gt; import inspect &gt;&gt;&gt; inspect.getfullargspec(foo) FullArgSpec(args=['x'] varargs=None varkw=None defaults=None kwonlyargs=[] kwonlydefaults=None annotations={})  
records from BeautifulSoup import BeautifulSoup import urllib2 import codecs  response = urllib2.urlopen('http://www.reality.sk/zakazka/0747-003578/predaj/1-izb-byt/kosice-mestska-cast-sever-sladkovicova-kosice-sever/art-real-1-izb-byt-sladkovicova-ul-kosice-sever') html = response.read() soup = BeautifulSoup(html)  tabulka = soup.find("table" {"class" : "detail-char"})  records = [] # store all of the records in this list for row in tabulka.findAll('tr'):     col = row.findAll('td')     prvy = col[0].string.strip()     druhy = col[1].string.strip()     record = '%s;%s' % (prvy druhy) # store the record with a ';' between prvy and druhy     records.append(record)  fl = codecs.open('output.txt' 'wb' 'utf8') line = ';'.join(records) fl.write(line + u'\r\n') fl.close()  
import pandas as pd # BDay is business day not birthday... from pandas.tseries.offsets import BDay  # pd.datetime is an alias for datetime.datetime today = pd.datetime.today() print today - BDay(4)  datetime.datetime(2013 9 20 14 8 4 89761)  
:[        -1 :/        -1 :(          -1 :)         1  emoticons = {}           for line in open('data/emoticons.txt').xreadlines():            symbol value = line.split('\t')                                                    emoticons[str(symbol)] = int(value)  def mark_emoticons(t):     for w v in emoticons.items():         match = re.search(re.escape(w)t)             if match:                 print w "found "  mark_emoticons('Hello ladies! How are you? Fantastic :) Look at your man ...')  u   you ur  you are uw  you are welcome  wb  welcome back  wfm works for me  wtf what the fuck  def mark_slangs(t):             for w v in slangs.items():             s = r'\b' + w + r'\b'             match = re.search(st)             if match:                     #print w "found in:"t "replacing with"readtable.slangs[w]                     t = re.sub(wslangs[w].rstrip()t)                     ...  
pattern = r'^1?$|^(11+?)\1+$' re.match(pattern '1'*10)    #matches re.match(pattern '1'*11)    #doesn't match  \1 
import glob  jpgFilenamesList = glob.glob('145592*.jpg')  glob 
zap vars(zap) globals() 
&gt;&gt;&gt; def ness(): ...  pie='yum' ...  exec pie+"=4" ...  print vars()[pie] ...  print yum ... &gt;&gt;&gt; &gt;&gt;&gt; ness() 4 4  &gt;&gt;&gt; def ness(): ...  dic={} ...  pie='yum' ...  dic[pie]=4 ...  print dic[pie] ...  print dic['yum'] ... &gt;&gt;&gt; ness() 4 4 &gt;&gt;&gt;  
file cd /opt/local/Library/Frameworks/Python.framework/Versions/2.6/ cd lib/python2.6/lib-dynload/ file itertools.so  itertools.so: Mach-O universal binary with 2 architectures itertools.so (for architecture x86_64): Mach-O 64-bit bundle x86_64 itertools.so (for architecture i386):   Mach-O bundle i386  sudo port selfupdate sudo port -u install python26 +universal ...  import objc import sys sys.stderr.write(sys.executable)  /opt/local/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python  py2app 
519 def _isPILImage(im): 520     import Image as PIL_Image 521     try: 522         return isinstance(imImage.Image) or isinstance(im PIL_Image.Image) 523     except ImportError: 524         return 0  
&gt;&gt;&gt; t1 = ("A" "B" "C") &gt;&gt;&gt; t2 = ("1" "2" "3") &gt;&gt;&gt; [x + y for x in t1 for y in t2] ['A1' 'A2' 'A3' 'B1' 'B2' 'B3' 'C1' 'C2' 'C3'] &gt;&gt;&gt; [[x + y for y in t2] for x in t1] [['A1' 'A2' 'A3'] ['B1' 'B2' 'B3'] ['C1' 'C2' 'C3']] &gt;&gt;&gt; x = _  # assign x to the last value &gt;&gt;&gt; for row in x: ...   print " ".join(row) ...  A1 A2 A3 B1 B2 B3 C1 C2 C3 &gt;&gt;&gt; for x in t1: ...   for y in t2: ...     print x + y  # notice the comma special print-statement syntax ...   print A1 A2 A3 B1 B2 B3 C1 C2 C3  [..] 
Node from xml.dom.minidom import parseString documentNode = parseString("&lt;types name='character' shortName='chrs'&gt;&lt;/types&gt;") typesNode = documentNode.firstChild  # Getting an attribute print typesNode.attributes["name"].value # will print "character"  # Setting an attribute typesNode.attributes["mynewattribute"] = u"mynewvalue" print documentNode.toprettyxml()  print &lt;?xml version="1.0" ?&gt; &lt;types mynewattribute="mynewvalue" name="character" shortName="chrs"/&gt;  
user_name user_pass MapNetworkDrive testnetwork.MapNetworkDrive(drive_letter network_path True user_name user_pass)  True 
addr_file = addr_file.encode("utf-8") values = {'q' : addr_file 'output':out_fmt 'key':gkey} data = urllib.urlencode(values)  inf = codecs.open(addr_file 'r' 'iso-8859-1')  
f = open(filename'rb') m = hashlib.md5() while True:     ## Don't read the entire file at once...     data = f.read(10240)     if len(data) == 0:         break     m.update(data) print m.hexdigest()  
  hints = dict(zip(WORD HINT))    if guess=='hint':     print hints[current_word]  if if guess != 'hint':   print "Sorry that's not the answer."  
&gt;&gt;&gt; import base64 &gt;&gt;&gt; test = "Hi I'm a string" &gt;&gt;&gt; enc = base64.urlsafe_b64encode(test) &gt;&gt;&gt; enc 'SGksIEknbSBhIHN0cmluZw==' &gt;&gt;&gt; uenc = unicode(enc) &gt;&gt;&gt; base64.urlsafe_b64decode(enc) "Hi I'm a string" &gt;&gt;&gt; base64.urlsafe_b64decode(uenc) Traceback (most recent call last): ... TypeError: character mapping must return integer None or unicode  &gt;&gt;&gt; base64.urlsafe_b64decode(uenc.encode("ascii")) "Hi I'm a string"  
imaplib t == 'OK' data[0][1] import getpass os imaplib email from OpenSSL.crypto import load_certificate FILETYPE_PEM  def getMsgs(servername="myimapserverfqdn"):   usernm = getpass.getuser()   passwd = getpass.getpass()   subject = 'Your SSL Certificate'   conn = imaplib.IMAP4_SSL(servername)   conn.login(usernmpasswd)   conn.select('Inbox')   typ data = conn.search(None'(UNSEEN SUBJECT "%s")' % subject)   for num in data[0].split():     typ data = conn.fetch(num'(RFC822)')     msg = email.message_from_string(data[0][1])     typ data = conn.store(num'-FLAGS''\\Seen')     yield msg  def getAttachment(msgcheck):   for part in msg.walk():     if part.get_content_type() == 'application/octet-stream':       if check(part.get_filename()):         return part.get_payload(decode=1)  if __name__ == '__main__':   for msg in getMsgs():     payload = getAttachment(msglambda x: x.endswith('.pem'))     if not payload:       continue     try:       cert = load_certificate(FILETYPE_PEMpayload)     except:       cert = None     if cert:       cn = cert.get_subject().commonName       filename = "%s.pem" % cn       if not os.path.exists(filename):         open(filename'w').write(payload)         print "Writing to %s" % filename       else:         print "%s already exists" % filename  
continue break continue ok = 0 for x in range(010):     print "x="x     if ok == 1:         ok = 0         continue     for y in range(020):          print "y="y         if y == 5:             ok = 1             break  
ldconfig(8) -p -r man crle man dyld 
from lxml import etree data = etree.parse(fname) result = [node.text.strip()      for node in data.xpath("//AssetType[@longname='characters']/type")]  
distutils py_compile.compile() doraise True distutils py_compile.compile() doraise=True setup.py py_compile.compile() setup.py from setuptools import setup import py_compile  # Replace py_compile.compile with a function that calls it with doraise=True orig_py_compile = py_compile.compile  def doraise_py_compile(file cfile=None dfile=None doraise=False):     orig_py_compile(file cfile=cfile dfile=dfile doraise=True)  py_compile.compile = doraise_py_compile  # Usual setup...  
self.__data __iadd__ __add__ self[epoch] += traffic self[epoch] = self[epoch].__iadd__(traffic)  __iadd__ __iadd__ operator operator.__iadd__(self[epoch] traffic) self[epoch].__iadd__(traffic) self[epoch] __iadd__ 
&gt;&gt;&gt; def f(): ...   print "F called" ...   return 1 ... &gt;&gt;&gt; 0 &lt; f() &lt; 100 F called True &gt;&gt;&gt; 0 &lt; f() and f() &lt; 100 F called F called True &gt;&gt;&gt; if (0 &lt; f() and f() &lt; 100): ...   print True ... F called F called True &gt;&gt;&gt;  
os.environ.copy() import subprocess os my_env = os.environ.copy() my_env["PATH"] = "/usr/sbin:/sbin:" + my_env["PATH"] subprocess.Popen(my_command env=my_env)  
baudrate = 9600 parity = N  baudrate baudrate None input 
threading.Condition &gt;&gt;&gt; type(threading.Condition) &lt;type 'function'&gt;  
[input[i:i+n] for i in range(0 len(input) n)]        # Use xrange in py2k  n input n n 
MY_CONSTANT is == 
with from __future__ import with_statement 
import os  os.cmd ("mkdir ~/mnt/data_dir mount -t data:/dir/ /mnt/data_dir")  
MyClass.f x = MyClass() x.f()  static method class MyClass(object):     def f():                 #no self parameter         return 'hello world' print MyClass.f()  
import curses sys time  def test_streams(wot):     print wot "stdout"     print &gt;&gt;sys.stderr wot "stderr"  def curses_mode(stdscr):     test_streams("wrap")     time.sleep(1.0)  test_streams("before") curses.wrapper(curses_mode) test_streams("after")  wrap stderr 
iter() [x] * n n x n x *arg zip() x = iter([123456789]) print zip(x x x)  
purge = [] for iobject in enumerate(self.list):     if object.mycond()         purge.append(i) for i in reversed(purge):     del self.list[i]  for i in reversed([ i for (io) in enumerate(self.list) if o.mycond() ]):     del self.list[i]  
zxJDBC 
HTTPError read try:     resp = urllib2.urlopen(url)     contents = resp.read() except urllib2.HTTPError error:     contents = error.read()  
__nonzero__ class test:     def __nonzero__(self):         return False  
tuple(int(x.strip()) for x in raw_input().split(''))  
def f(obj errs):   try: return not obj.mycond()   except MyException as err: errs.append((obj err))  errs = [] l = [obj for obj in objlist if f(obj errs)] if errs:   emiterrorinfo(errs)  errs l objlist obj 
glib glib g_slist_foreach glib 
A.objects.order_by('B__name')  A.objects.annotate(bname='B__name').order_by('bname')  
PyImport_Import() PyImport_ImportModule() const char * PyImport_Import*() Py_DECREF() PyEval_CallObject() Py_BuildValue() Py_DECREF() PyFloat_AsDouble() PyArg_Parse() PyErr_ExceptionMatches() PyErr_Occurred() PyErr_Print() PyErr_Clear() PyErr_Fetch() sys.exc_info() 
__getslice__ class MyList(list):     #your stuff here      def __getslice__(self i j):         return MyList(list.__getslice__(self i j))  
def __init__(self sample_rate data=[] label=u""): self data __getslice__ label return Channel(self.sample_rate label=self.label data=list.__getslice__(selfstartstop))  
{{ forloop.counter0|add:page.start_index }}  start_index {{ page.start_index|add:forloop.counter0 }}  
COUNT() points 
socket.create_connection -&gt; urllib2.urlopen -&gt; httplib.HTTPConnection -&gt; socket.create_connection  httplib.HTTPConnection connect self.host socket.create_connection HTTPHandler HTTPSHandler http_open HTTPConnection do_open import urllib2 import httplib import socket  def MyResolver(host):   if host == 'news.bbc.co.uk':     return '66.102.9.104' # Google IP   else:     return host  class MyHTTPConnection(httplib.HTTPConnection):   def connect(self):     self.sock = socket.create_connection((MyResolver(self.host)self.port)self.timeout) class MyHTTPSConnection(httplib.HTTPSConnection):   def connect(self):     sock = socket.create_connection((MyResolver(self.host) self.port) self.timeout)     self.sock = ssl.wrap_socket(sock self.key_file self.cert_file)  class MyHTTPHandler(urllib2.HTTPHandler):   def http_open(selfreq):     return self.do_open(MyHTTPConnectionreq)  class MyHTTPSHandler(urllib2.HTTPSHandler):   def https_open(selfreq):     return self.do_open(MyHTTPSConnectionreq)  opener = urllib2.build_opener(MyHTTPHandlerMyHTTPSHandler) urllib2.install_opener(opener)  f = urllib2.urlopen('http://news.bbc.co.uk') data = f.read() from lxml import etree doc = etree.HTML(data)  &gt;&gt;&gt; print doc.xpath('//title/text()') ['Google']  
(r'^category/(?P&lt;category_id&gt;\d+)$' 'myapp.views.category_list')  from django.views.generic.list_detail import object_list def category_list(request category_id):     queryset = ModelObject.objects.filter(category=category_id)     return object_list(request queryset=queryset)  
next(x[0] for x in enumerate(L) if x[1] &gt; 0.7)  
pop() super() class DynamicForm(Form):   def __init__(self *args **kwargs):     my_arg = kwargs.pop('my_arg')     super(DynamicForm self).__init__(*args **kwargs)     for item in range(5):         self.fields['test_field_%d' % item] = CharField(max_length=255)  form = DynamicForm(... my_arg='value')  
text_file = open("write_it.txt" "w") while 1:     word = input("Please add to a text file: ")     if not word:         break     text_file.write(word) text_file.close()  
from django.conf import settings  urlpatterns += patterns(''     (r'^media/(?P&lt;path&gt;.*)$' 'django.views.static.serve' {'document_root': settings.MEDIA_ROOT}) )  
import inspect  def decallmethods(decorator prefix='test_'):   def dectheclass(cls):     for name m in inspect.getmembers(cls inspect.ismethod):       if name.startswith(prefix):         setattr(cls name decorator(m))     return cls   return dectheclass  @decallmethods(login_testuser) class TestCase(object):     def setUp(self):         pass      def test_1(self):         print "test_1()"      def test_2(self):         print "test_2()"  @decallmethods class TestCase TestCase = decallmethods(login_testuser)(TestCase)  
F:\JavaWorkspace\Test\src\gui_geo_location.py self.entryVariable entryVariable __init__ entryVariable self.entryVariable = Tkinter.StringVar()  __init__ 
import os import time import shutil numdays = 86400*7 now = time.time() directory=os.path.join("/home""path") for rdf in os.walk(directory):     for dir in d:          timestamp = os.path.getmtime(os.path.join(rdir))          if now-numdays &gt; timestamp:              try:                   print "removing "os.path.join(rdir)                   # shutil.rmtree(os.path.join(rdir))  #uncomment to use              except Exceptione:                   print e                   pass              else:                    print "some message for success"  
date.today datetime.now().date() datetime.now &gt;&gt;&gt; import datetime &gt;&gt;&gt; datetime.date.today() datetime.date(2010 2 10) &gt;&gt;&gt; datetime.datetime.now().date() datetime.date(2010 2 10)  
func(*tuple) t = (2010 10 2 11 4 0 2 41 0) dt = datetime.datetime(*t[0:7])  &gt;&gt;&gt; range(3 6)             # normal call with separate arguments [3 4 5] &gt;&gt;&gt; args = [3 6] &gt;&gt;&gt; range(*args)            # call with arguments unpacked from a list [3 4 5]  
try:     user = User.objects.get(email__exact=email)     if authenticate(user email password):         request.session['user'] = user         return HttpResponseRedirect('/home/')     else:         return HttpResponseRedirect('/home/login/') except User.DoesNotExist: # A user with the e-mail provided was not found     return HttpResponseRedirect('/home/')  get QuerySet len q = User.objects.filter(email = 'foo@bar.com') print len(q)  count() print User.objects.filter(email = 'foo@bar.com').count()  len QuerySet count() QuerySet SELECT COUNT(*) /home/ /home/login/ 
u'über' s = utf8_string.decode('utf8') + latin1_string.decode('latin1')  send(s.encode('utf8')) input1 = get_possibly_nonascii_input().decode('iso-8859-1') input2 = get_possibly_nonascii_input().decode('iso-8859-1') input3 = u'üvw'  s =  u'%s -&gt; %s' % (input3 (input1 + input2).upper())  send_output(s.encode('utf8'))  
tarfile.addfile() TarInfo name /path/to/filename myfilename tar.addfile(tarfile.TarInfo("myfilename.txt") open("/path/to/filename.txt"))  
== is 
fp.flush() 
easy_install django-nose    INSTALLED_APPS = ( ... 'django_nose' ... )  TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'  manage.py test  
s='17GB' for ic in enumerate(s):     if not c.isdigit():         break number=int(s[:i]) unit=s[i:]  
class PathInfo(object):  
nohup start 
&gt;&gt;&gt; def sha1(s): ...     return hashlib.sha1(s).hexdigest() ... &gt;&gt;&gt; def sha512(s): ...     return hashlib.sha512(s).hexdigest() ... &gt;&gt;&gt; t1 = timeit.Timer("sha1('asdf' * 100)" "from __main__ import sha1") &gt;&gt;&gt; t512 = timeit.Timer("sha512('asdf' * 100)" "from __main__ import sha512") &gt;&gt;&gt; t1.timeit() 3.2463729381561279 &gt;&gt;&gt; t512.timeit() 6.5079669952392578  hash512 sha1 &gt;&gt;&gt; s = "asdf" &gt;&gt;&gt; hash(s) -618826466 &gt;&gt;&gt; s = "xxx" &gt;&gt;&gt; hash(s) 943435 &gt;&gt;&gt; hash("xxx") 943435  hash = hashlib.sha1(object_to_cache_as_string).hexdigest() cache[hash] = object_to_cache  cache[object_to_cache_as_string] = object_to_cache  cache[object_to_cache] = object_to_cache  PYTHONHASHSEED 
git log -1 --format=format:%h TREEISH SHA_OF_THE_RELEASE git log -1 --format=format:%h SHA_OF_THE_RELEASE requirements.txt 1d02afc 1d02afc pip install -E /path/to/venv/1d02afc -r /path/to/requirements.txt path/to/venv/1d02afc git archive my-branch git archive 1d02afc 
&gt;&gt;&gt; def myFunc(*args **kwargs): ...   # This function accepts arbitary arguments: ...   # Keywords arguments are available in the kwargs dict; ...   # Regular arguments are in the args tuple. ...   # (This behaviour is dictated by the stars not by ...   #  the name of the formal parameters.) ...   print args kwargs ... &gt;&gt;&gt; myFunc() () {} &gt;&gt;&gt; myFunc(2) (2) {} &gt;&gt;&gt; myFunc(25) (2 5) {} &gt;&gt;&gt; myFunc(b = 3) () {'b': 3} &gt;&gt;&gt; import dis &gt;&gt;&gt; dis.dis(myFunc)   1           0 LOAD_FAST                0 (args)               3 PRINT_ITEM               4 LOAD_FAST                1 (kwargs)               7 PRINT_ITEM               8 PRINT_NEWLINE               9 LOAD_CONST               0 (None)              12 RETURN_VALUE  myFunc 
dict.fromkeys([1 2 3 4]) collections.defaultdict None 
import xmlrpclib  s = xmlrpclib.ServerProxy('http://localhost:8000') print s.myfunction(2 4)  from SimpleXMLRPCServer import SimpleXMLRPCServer from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler  # Restrict to a particular path. class RequestHandler(SimpleXMLRPCRequestHandler):     rpc_paths = ('/RPC2')  # Create server server = SimpleXMLRPCServer(("localhost" 8000)                             requestHandler=RequestHandler)  def myfunction(x y):     status = 1     result = [5 6 [4 5]]     return (status result) server.register_function(myfunction)  # Run the server's main loop server.serve_forever()  xmlrpclib xmlrpclib.Transport 
def get_max(f s):   return max(s key=f)  
a.foo A.foo A.foo type -- object   |       | Meta --   A  -- a  a ? A ? object  object    ^    |    A  &lt;-- a  foo foo A type   ^   |        Meta &lt;--   A   
class ImpersonateMiddleware(object):     def process_request(self request):         if request.user.is_superuser and "__impersonate" in request.GET:             request.user = models.User.objects.get(id=int(request.GET["__impersonate"]))      def process_response(self request response):         if request.user.is_superuser and "__impersonate" in request.GET:             if isinstance(response http.HttpResponseRedirect):                 location = response["Location"]                 if "?" in location:                     location += "&amp;"                 else:                     location += "?"                 location += "__impersonate=%s" % request.GET["__impersonate"]                 response["Location"] = location         return response  
list(self.items) self.items list(qs) 
data = """&lt;link rel="index" href="/index.php" /&gt; &lt;link rel="contents" href="/getdata.php" /&gt; &lt;link rel="copyright" href="/blabla.php" /&gt; &lt;link rel="shortcut icon" href="/img/all/favicon.ico" /&gt; """  from lxml import etree  d = etree.HTML(data)  d.xpath('//link[@rel="shortcut icon"]/@href') ['/img/all/favicon.ico']  
import random from twisted.internet import task  class MyProcess:   def __init__(self):     self.stats = []     self.lp = None   def myloopingCall(self):     print "I have %s stats" % len(self.stats)   def myMainFunction(selfreactor):     self.stats.append(random.random())     reactor.callLater(0self.myMainFunctionreactor)   def start(selfreactor):     self.lp = task.LoopingCall(self.myloopingCall)     self.lp.start(2)     reactor.callLater(0self.myMainFunctionreactor)   def stop(self):     if self.lp is not None:       self.lp.stop()     print "I'm done"  if __name__ == '__main__':   myproc = MyProcess()   from twisted.internet import reactor   reactor.callWhenRunning(myproc.startreactor)   reactor.addSystemEventTrigger('during''shutdown'myproc.stop)   reactor.callLater(10reactor.stop)   reactor.run()  
from pylons import config  def my_cache(*args **kwargs):     if config["debug"]:         decorate = lambda f: f     else:          decorate = beaker_cache(*args **kwargs)      return decorate  
from heapq import nlargest lst = [916428375] nlargest(3 lst) # Gives [987]  from heapq import nlargest tags = [ ("python" 30) ("ruby" 25) ("c++" 50) ("lisp" 20) ] nlargest(2 tags key=lambda e:e[1]) # Gives [ ("c++" 50) ("python" 30) ]  
import syslog # Define identifier syslog.openlog("Python") # Record a message syslog.syslog(syslog.LOG_ALERT "Example message")  
def files(a):     pass  while True:     try:         i = int(input('Select: '))         if i in range(4):             files(i)             break     except:             pass      print '\nIncorrect input try again'  
import matplotlib.pyplot as plt import numpy as np  length = np.random.random(10) length.sort() time = np.random.random(10) time.sort() slope intercept = np.polyfit(np.log(length) np.log(time) 1) print(slope) plt.loglog(length time '--') plt.show()  
&gt;&gt;&gt; list1 = ['one''two''three''four''five'] &gt;&gt;&gt; list2 = ['one''two''four'] &gt;&gt;&gt; set(list1) - set(list2) set(['five' 'three'])  
&gt;&gt;&gt; from lxml import etree &gt;&gt;&gt; data = """&lt;assetsMain&gt; ... &lt;assetParent type='character' shortName='char'&gt; ... &lt;asset&gt;pub&lt;/asset&gt; ... &lt;asset&gt;car&lt;/asset&gt; ... &lt;/assetParent&gt; ... &lt;assetParent type='par' shortName='pr'&gt; ... &lt;asset&gt;camera&lt;/asset&gt; ... &lt;asset&gt;rig&lt;/asset&gt; ... &lt;/assetParent&gt; ... &lt;/assetsMain&gt; ... """ &gt;&gt;&gt; doc = etree.XML(data) &gt;&gt;&gt; for aP in doc.xpath('//assetParent'): ...   parent = aP.attrib['type'] ...   for a in aP.xpath('./asset/text()'): ...     print parent a.strip() ... character pub character car par camera par rig  
#!/usr/bin/env python import os import time import win32com.client import logging  old_mappings = [     r'\\192.168.1.100\old'     ] new_mapping = r'\\192.168.1.200\new' LOG_FILENAME = 'status.log'  def main():     """     Check to see if Z: is mapped to the old server; if so remove it and     map the Z: to the new server.      Then repeatedly monitor the Z: mapping. If the Z: drive exists     report to status.log that we are working. Otherwise re-map it and     report errors to the log.     """     setupLogging()     replaceMapping()     monitorMapping()  def replaceMapping():     if removeMapping():         createNewMapping()  def setupLogging():     format = os.environ['COMPUTERNAME'] + " - %(asctime)s - %(message)s"     logging.basicConfig(filename=LOG_FILENAME level=logging.DEBUG format=format)  def getCredentials():     """     Return one of three things:     - an empty tuple     - a tuple containing just a username (if a password is not required)     - a tuple containing username and password     """     return ('someuser' 'somepass')  def createNewMapping():     network = win32com.client.Dispatch('WScript.Network')     params = (         'Z:' # drive letter         new_mapping # UNC path         True # update profile         )     params += getCredentials()     try:         network.MapNetworkDrive(*params)         msg = '{params} - Drive has been mapped'         logging.getLogger().info(msg.format(**vars()))     except Exception as e:         msg = 'error mapping {params}'         logging.getLogger().exception(msg.format(**vars()))  def monitorMapping():     while True:         # only check once a minute         time.sleep(60)         checkMapping()  def checkMapping():     if getDriveMappings()['Z:'] == new_mapping:         msg = 'Drive is still mapped'         logging.getLogger().info(msg.format(**vars()))     else:         replaceMapping()  # From Python 2.6.4 docs from itertools import izip_longest def grouper(n iterable fillvalue=None):     "grouper(3 'ABCDEFG' 'x') --&gt; ABC DEF Gxx"     args = [iter(iterable)] * n     return izip_longest(fillvalue=fillvalue *args)  def getDriveMappings():     """     Return a dictionary of drive letter to UNC paths as mapped on the     system.     """     network = win32com.client.Dispatch('WScript.Network')     # http://msdn.microsoft.com/en-us/library/t9zt39at%28VS.85%29.aspx     drives = network.EnumNetworkDrives()     # EnumNetworkDrives returns an even-length array of drive/unc pairs.     # Use grouper to convert this to a dictionary.     result = dict(grouper(2 drives))     # Potentially several UNC paths will be connected but not assigned     # to any drive letter. Since only the last will be in the     # dictionary remove it.     if '' in result: del result['']     return result  def getUNCForDrive(drive):     """     Get the UNC path for a mapped drive.     Throws a KeyError if no mapping exists.     """     return getDriveMappings()[drive.upper()]  def removeMapping():     """     Remove the old drive mapping. If it is removed or was not present     return True.     Otherwise return False or None.     """     mapped_drives = getDriveMappings()     drive_letter = 'Z:'     if not drive_letter in mapped_drives:         return True     if mapped_drives[drive_letter] in old_mappings:         network = win32com.client.Dispatch('WScript.Network')         force = True         update_profile = True         network.RemoveNetworkDrive(drive_letter force update_profile)         return True     # return None  if __name__ == '__main__':     main()  
from functools import wraps from time import time  def timed(f):   @wraps(f)   def wrapper(*args **kwds):     start = time()     result = f(*args **kwds)     elapsed = time() - start     print "%s took %d time to finish" % (f.__name__ elapsed)     return result   return wrapper  @timed def somefunction(countto):   for i in xrange(countto):     pass   return "Done"  &gt;&gt;&gt; timedec.somefunction(10000000) somefunction took 0 time to finish 'Done' &gt;&gt;&gt; timedec.somefunction(100000000) somefunction took 2 time to finish 'Done' &gt;&gt;&gt; timedec.somefunction(1000000000) somefunction took 22 time to finish 'Done'  
virtualenv test cd test/ . bin/activate easy_install spawning python -c 'import spawning'  
configparser json pickle safe_load datetime import yaml  sql = """ query         : "SELECT * from cities WHERE name='Unknown';" count         : 0 level         : 1 name          : "Check for cities whose name should be null" suggested_fix : "UPDATE cities SET name=NULL WHERE name='Unknown';" """  sql_dict = yaml.safe_load(sql)  print(sql_dict['query'])  SELECT * from cities WHERE name='Unknown';  
request.user.groups.all() QuerySet for g in request.user.groups.all():     l.append(g.name)  l = request.user.groups.values_list('name'flat = True) # QuerySet Object l_as_list = list(l)                                     # QuerySet to `list`  
words = 'She sells seashells by the seashore'  unique_letters = set(words.lower()) unique_letters.discard(' ') # If there was a space remove it.  
pip install eldar  from eldar import build_query  eldar = build_query('"president" AND ("ronald" OR ("george" AND NOT "bush"))')  print(eldar("President Bush")) # &gt;&gt;&gt; False print(eldar("President George")) # &gt;&gt;&gt; True  
TEMPLATE_CONTEXT_PROCESSORS = ('myapp.processor.foos')  TEMPLATE_CONTEXT_PROCESSORS = (     "django.core.context_processors.auth"     "django.core.context_processors.debug"     "django.core.context_processors.i18n"     "django.core.context_processors.media"     "myapp.processor.foos" )  
def reverse_insort(a x lo=0 hi=None):     """Insert item x in list a and keep it reverse-sorted assuming a     is reverse-sorted.      If x is already in a insert it to the right of the rightmost x.      Optional args lo (default 0) and hi (default len(a)) bound the     slice of a to be searched.     """     if lo &lt; 0:         raise ValueError('lo must be non-negative')     if hi is None:         hi = len(a)     while lo &lt; hi:         mid = (lo+hi)//2         if x &gt; a[mid]: hi = mid         else: lo = mid+1     a.insert(lo x)  
try/except try 'subject' if 'subject' in request.POST:     subject = request.POST['subject'] else:     subject = some_default  request.POST.get('subject' some_default) 
set http_proxy=http://wwwcache.lancs.ac.uk:8080  export http_proxy=http://wwwcache.lancs.ac.uk:8080/  
use_for_related_fields = True def do_something(     ids = self.get_query_set().values_list('user__id' flat=True)     return User.objects.filter(id__in=ids).distinct()  
remove None l= MyWords.upper().split() l.remove(SpamWords[SpamCheckRange]) # l is ['YES']  &gt;&gt;&gt; [word for word in MyWords.split() if word.upper() not in SpamWords] ['yes']  
host.toggle_axisline(False)  from mpl_toolkits.axes_grid.parasite_axes import SubplotHost import matplotlib.pyplot as plt  fig = plt.figure(1)  host = SubplotHost(fig 111) fig.add_subplot(host)  par = host.twinx()  host.set_xlabel("Distance") host.set_ylabel("Density") par.set_ylabel("Temperature")  p1 = host.plot([0 1 2] [0 1 2] label="Density") p2 = par.plot([0 1 2] [0 3 2] label="Temperature")  host.axis["left"].label.set_color(p1.get_color()) par.axis["right"].label.set_color(p2.get_color())  host.toggle_axisline(False) host.grid(True)  host.legend()  plt.show()  
os.system() subprocess 
shell&gt; jython &gt;&gt;&gt; from com.ziclix.python.sql import zxJDBC &gt;&gt;&gt; (d v) = "jdbc:mysql://localhost/test" "org.gjt.mm.mysql.Driver" &gt;&gt;&gt; cnx = zxJDBC.connect(d None None v) &gt;&gt;&gt; cur = cnx.cursor() &gt;&gt;&gt; cur.execute("SELECT %s" ('ham')) .. zxJDBC.Error: error setting index [1] [SQLCode: 0] Parameter index out of range (1 &gt; number of parameters   which is 0). [SQLCode: 0] [SQLState: S1009]  &gt;&gt;&gt; cur.execute("SELECT '?'" ('ham'))  Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; zxJDBC.Error: error setting index [1] [SQLCode: 0] Parameter index out of range (1 &gt; number of parameters   which is 0). [SQLCode: 0] [SQLState: S1009]  &gt;&gt;&gt; cur.execute("SELECT ?" ('ham'))   &gt;&gt;&gt; cur.fetchall() [(u'ham')]  start = "%d%d%d%d%d" % (int(tempStart.month)   int(tempStart.day) int(tempStart.year)int(tempStart.hour)    int(tempStart.minute)) stop = "%d%d%d%d%d" % (int(tempEnd.month)   int(tempEnd.day) int(tempEnd.year) int(tempEnd.hour)   int(tempEnd.minute))  select = """SELECT value FROM table_name   WHERE value_till_dt &gt;= str_to_date(? '%%m%%d%%Y%%H%%i')   AND value_till_dt &lt;= str_to_date(? '%%m%%d%%Y%%H%%i')   AND granularity=?   ORDER BY value_till_dt """ cursor.execute(select (startstop5))  
import warnings warnings.filterwarnings(action="ignore" message='the sets module is deprecated') import sets  
stdout stderr = p.communicate(str.encode('utf-8'))  str shell=True p = subprocess.Popen(['/usr/bin/dot' '-Kfdp' '-Tsvg']     stdin=subprocess.PIPE stdout=subprocess.PIPE)  
DeadlineExceededError CancelledError CancelledError 
itertools.groupby import itertools import operator  L = [('grape' 100) ('grape' 3) ('apple' 15) ('apple' 10)      ('apple' 4) ('banana' 3)]  def accumulate(l):     it = itertools.groupby(l operator.itemgetter(0))     for key subiter in it:        yield key sum(item[1] for item in subiter)   &gt;&gt;&gt; print list(accumulate(L)) [('grape' 103) ('apple' 29) ('banana' 3)] &gt;&gt;&gt;   
&gt;&gt;&gt; import textwrap &gt;&gt;&gt; class Album(object): ...     def __init__(self title artist tracks length bitrate md5): ...         self.title=title ...         self.artist=artist ...         self.tracks=tracks ...         self.length=length ...         self.bitrate=bitrate ...         self.md5=md5 ...     def __str__(self): ...         return textwrap.dedent(""" ...         %(artist)s; ...         %(title)s; ...                       %(tracks)s - %(length)s - %(bitrate)s - %(md5)s"""%(vars(self))) ...  &gt;&gt;&gt; a=Album("album title""artist name"1052.1"320kb/s""4d53b0cb432ec371ca93ea30b62521d9") &gt;&gt;&gt; print a  artist name; album title;               10 - 52.1 - 320kb/s - 4d53b0cb432ec371ca93ea30b62521d9  
if __FILE__ == $0     foo()     bar() end  
import re text="""{{rdex|001|001|Bulbasaur|2|Grass|Poison}}""" re.findall("\{\{[^|]+\|(\d+)\|\d+\|([^|]+)"text) [('001' 'Bulbasaur')]  
page s = 'This is string : %d' % (page + 1)  
google_appengine/google/appengine/tools/appcfg.py RequestLogLines LogsRequester 
next() in for 
print repr(u'?????'.encode('utf-16be')) print repr(u'?????'.encode('utf-16le'))  
os.environ['QUERY_STRING'] request.environ['QUERY_STRING'] 
datetime try:   nextmonthdate = x.replace(month=x.month+1) except ValueError:   if x.month == 12:     nextmonthdate = x.replace(year=x.year+1 month=1)   else:     # next month is too short to have "same date"     # pick your own heuristic or re-raise the exception:     raise  
def format_float_fld(v):     #return str(v)     return ('%20.0f' % (v)).strip()  str(s) bigint float  SELECT (EXTRACT(EPOCH FROM TIMESTAMP '2010-02-16 20:38:40.123') * 1000)::bigint;  
-ln(f(x)/x numpy.linalg.lstsq 
linalg.lstsq(Ay) A linalg.solve(Ay) A 
saxParser.parse( thexml  new DefaultHandler() );   saxParser.parse( thexml  new MyFreakingHandler() );  public void startDocument () throws SAXException public void endElement (String name) throws SAXException  
def is_sublist(a b):     if not a: return True     if not b: return False     return b[:len(a)] == a or is_sublist(a b[1:])  set 
decimal 
convert 
application/x-www-form-urlencoded self.request.body enctype &lt;form&gt; enctype="application/octet-stream" 
import filecmp compare = filecmp.dircmp( "C:/" "D:/" ) for f in compare.left_only:     print "C: new" f for f in compare.right_only:     print "D: new" f  
TypeError str repr Decimal 
super(Pictureself).save() super save def save(self*args**kwargs):     ...     super(Picture self).save(*args**kwargs)  save 
INSERT INTO site_entry (field1 field2) (          SELECT i.field1 i.field2          FROM (VALUES %s) AS i(field1 field2)          LEFT JOIN site_entry as existing                  ON (existing.field1 = i.field1 AND existing.field2 = i.field2)          WHERE existing.id IS NULL )  ("field1 field2") ("field3 field4") ("field5 field6") 
PythonOption django.root /mysite 
class Test(object):      def __init__(self):         self.a = 20         self.b = 30  if __name__ == '__main__':     test_instance = Test()  from class1 import Test  class Test2(Test):      def e(self):         print self.a         print self.b   if __name__ == '__main__':     test_instance = Test2()     test_instance.e() # prints 20 and 30  self self.variable = value __init__ Test() test2() 
main stdout import xxx results = xxx.main('foo') # Do something with results  
params = [321] stmt = 'SELECT * FROM table WHERE id IN (%s)' % ''.join('%s' for i in params) cursor.execute(stmt params)  &gt;&gt;&gt; from pg8000 import DBAPI &gt;&gt;&gt; conn = DBAPI.connect(user="a" database="d" host="localhost" password="p") &gt;&gt;&gt; c = conn.cursor() &gt;&gt;&gt; prms = [123] &gt;&gt;&gt; stmt = 'SELECT * FROM table WHERE id IN (%s)' % ''.join('%s' for i in prms) &gt;&gt;&gt; c.execute(stmtprms) &gt;&gt;&gt; c.fetchall() ((1 u'myitem1') (2 u'myitem2') (3 u'myitem3'))  
from HTMLParser import HTMLParser  
ball[i][j] ball ball = []     for i in range(5):     ball.append([])     for y in range(5):         ball[i].append(sphere())  
f = t.fileobj.__class__(newfn 'w')  
env.AlwaysBuild(env.Alias('convert_all' pix_conversions))  ConvToPNG = Builder(action = 'convert $SOURCE $TARGET'         suffix = '.png'         src_suffix = '.jpg') env['BUILDERS']['ConvToPNG'] = ConvToPNG pix_conversions = [env.ConvToPNG(jpg_src) for jpg_src in Glob('pix/img_*.jpg')] env.AlwaysBuild(env.Alias('convert_all' pix_conversions))  
self.frameRect().setTopLeft(Qt.QPoint(event.x event.y))  self.frameRect.setTopLeft(Qt.QPoint(event.x event.y))  
timeit.Timer.repeat(testn cycles) testn cycles hashlookup:          0.13s     100% lookup:              0.15s     109% stringcount:         0.29s     220% unrolled_bitwise:    0.36s     272% log_e:               0.60s     450% bitcounter:          0.64s     479% log_2:               0.69s     515% ilog:                0.81s     609% bitwise:             1.10s     821% olgn:                1.42s    1065%  hashlookup:          0.11s     100% unrolled_bitwise:    0.26s     229% log_e:               0.30s     268% stringcount:         0.30s     270% log_2:               0.34s     301% ilog:                0.41s     363% bitwise:             0.87s     778% olgn:                1.02s     912% bitcounter:          1.42s    1264%  hashlookup:     0.01s     100% stringcount:    0.03s     264% log_e:          0.04s     315% log_2:          0.04s     383% olgn:           0.18s    1585% bitcounter:     1.41s   12393%  log_e:          0.00s     100% log_2:          0.01s     118% stringcount:    0.02s     354% olgn:           0.03s     707% bitcounter:     1.73s   37695%  import math sys  def stringcount(v):     """mac"""         return len(bin(v)) - 3  def log_2(v):     """mac"""         return int(round(math.log(v 2) 0)) # 2**101 generates 100.999999999  def log_e(v):     """bp on mac"""         return int(round(math.log(v)/0.69314718055994529 0))  # 0.69 == log(2)  def bitcounter(v):     """John Y on mac"""     r = 0     while v &gt; 1 :         v &gt;&gt;= 1         r += 1     return r  def olgn(n) :     """outis"""     if n &lt; 1:         return -1     low = 0     high = sys.getsizeof(n)*8 # not the best upper-bound guesstimate but...     while True:         mid = (low+high)//2         i = n &gt;&gt; mid         if i == 1:             return mid         if i == 0:             high = mid-1         else:             low = mid+1  def hashlookup(v):     """mac on brone -- limit: v &lt; 2**131""" #    def prepareTable(max_log2=130) : #        hash_table = {} #        for p in range(1 max_log2) : #            hash_table[2**p] = p #        return hash_table      global hash_table     return hash_table[v]   def lookup(v):     """brone -- limit: v &lt; 2**11""" #    def prepareTable(max_log2=10) : #        log2s_table=[0]*((1&lt;&lt;max_log2)+1) #        for i in range(max_log2+1): #            log2s_table[1&lt;&lt;i]=i #        return tuple(log2s_table)      global log2s_table     return log2s_table[v]  def bitwise(v):     """Mark Byers -- limit: v &lt; 2**32"""     b = (0x2 0xC 0xF0 0xFF00 0xFFFF0000)     S = (1 2 4 8 16)     r = 0     for i in range(4 -1 -1) :         if (v &amp; b[i]) :             v &gt;&gt;= S[i];             r |= S[i];     return r  def unrolled_bitwise(v):     """x4u on Mark Byers -- limit:   v &lt; 2**33"""     r = 0;     if v &gt; 0xffff :          v &gt;&gt;= 16         r = 16;     if v &gt; 0x00ff :         v &gt;&gt;=  8         r += 8;     if v &gt; 0x000f :         v &gt;&gt;=  4         r += 4;     if v &gt; 0x0003 :          v &gt;&gt;=  2         r += 2;     return r + (v &gt;&gt; 1)  def ilog(v):     """Gregory Maxwell - (Original code: B. Terriberry) -- limit: v &lt; 2**32"""     ret = 1     m = (not not v &amp; 0xFFFF0000) &lt;&lt; 4;     v &gt;&gt;= m;     ret |= m;     m = (not not v &amp; 0xFF00) &lt;&lt; 3;     v &gt;&gt;= m;     ret |= m;     m = (not not v &amp; 0xF0) &lt;&lt; 2;     v &gt;&gt;= m;     ret |= m;     m = (not not v &amp; 0xC) &lt;&lt; 1;     v &gt;&gt;= m;     ret |= m;     ret += (not not v &amp; 0x2);     return ret - 1;   # following table is equal to "return hashlookup.prepareTable()"  hash_table = {...} # numbers have been cut out to avoid cluttering the post  # following table is equal to "return lookup.prepareTable()" - cached for speed log2s_table = (...) # numbers have been cut out to avoid cluttering the post  
# Lets rename:     &gt;&gt;&gt; procname.setprocname('My super name')      # Lets check. Press Ctrl+Z        user@comp:~/procname$ ps      PID TTY TIME CMD   13016 pts/2 00:00:00 bash  13128 pts/2 00:00:00 My super name &lt;-- it's here  prctl PR_SET_NAME 
Event class Event:   # stuff here    @property   def status(self):      # do the same thing here as in your status function      return status  {{ event.status }}  
app.sub2.sub2 app 
import random  _memomask = {}  def hash_function(n):   mask = _memomask.get(n)   if mask is None:     random.seed(n)     mask = _memomask[n] = random.getrandbits(32)   def myhash(x):     return hash(x) ^ mask   return myhash  
import urllib2  import urllib import cookielib import re  def write_f_to_f(fnamef):     f1 = open(fname"w")     f1.write(f.read())     f1.close()  def gen_req(urlreferer=None):     req = urllib2.Request(url)     return req    myjar = cookielib.FileCookieJar("cookies.txt"); cookieHandler = urllib2.HTTPCookieProcessor(myjar)  password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm() tlurl="http://127.0.0.1:8081/webgoat/attack"  password_mgr.add_password(Nonetlurluser="guest"passwd="guest") find = "Blind Numeric."  authhandler = urllib2.HTTPBasicAuthHandler(password_mgr) opener = urllib2.build_opener(authhandlercookieHandler)  url = "http://127.0.0.1:8081/webgoat/attack" req = gen_req(urlurl) f = opener.open(req)# Setup session and login.  params = urllib.urlencode({'start':'Start WebGoat'}) url = "http://127.0.0.1:8081/webgoat/attack" req = gen_req(urlurl) f = opener.open(reqparams) # Submit the "Start" form dat = f.read() # Get the menu html from the firstpage. f.close()   m = re.search("attack\?Screen=(\d+).*%s"%finddat) # Try to find screen id for what i want if not m is None:     scr= m.group(1)     qs = urllib.urlencode( {'Screen':scr 'menu':1200 } )     ourl = url     url = "http://127.0.0.1:8081/webgoat/attack?%s"%qs     req = gen_req(urlourl)     f = opener.open(req)     write_f_to_f("f4.html"f)     f.close()     print "Found the page and saved it to f4.html" else:     print "Didnt find screen id for %s"%find  
ORDER BY create table artists ( id integer not null primary key name char(1) not null);  insert into artists values     (8 'a')     (1 'b')      (2 'c')     (15 'd')     (14 'e')     (3  'f')     (13 'g');  select * from artists where id in (8 1 2 15 14 3 13) order by     id = 8 desc     id = 1 desc     id = 2 desc     id = 15 desc     id = 14 desc     id = 3 desc     id = 13 desc;  select     a.* from     artists a     rankings r where     a.id = r.artist_id order by     r.score desc;  
** **kwargs *args 
sshfile sshfile class sshfile:     pass  def a():     f = sshfile() # UnboundLocalError here     sshfile = 0  a()  
from myapp import models  ...  models.SideNames = None  t.sidenames_set.all() 
__init__.py import Models  Models.my_model.MyClassName  from from Models import my_model  my_model.MyClassName  from Models.my_model import my_method_name my_method_name()  
import wx  class MyPanel(wx.Panel):     """ class MyPanel creates a panel to draw on inherits wx.Panel """     def __init__(self parent id):         # create a panel         wx.Panel.__init__(self parent id)         self.SetBackgroundColour("white")         self.Bind(wx.EVT_PAINT self.OnPaint)      def OnPaint(self evt):         """set up the device context (DC) for painting"""         self.dc = wx.PaintDC(self)         self.dc.BeginDrawing()         self.dc.SetPen(wx.Pen("grey"style=wx.TRANSPARENT))         self.dc.SetBrush(wx.Brush("grey" wx.SOLID))         # set x y w h for rectangle         self.dc.DrawRectangle(25025050 50)         self.dc.EndDrawing()         del self.dc  app = wx.PySimpleApp() # create a window/frame no parent -1 is default ID frame = wx.Frame(None -1 "Drawing A Rectangle..." size = (500 500)) # call the derived class -1 is default ID MyPanel(frame-1) # show the frame frame.Show(True) # start the event loop app.MainLoop()  
&gt;&gt;&gt; l = [1 2 37 32 4] &gt;&gt;&gt; d = dict = { ...     32: 'Megumi'  ...     1: 'Ai' ...     2: 'Risa' ...     3: 'Eri'  ...     4: 'Sayumi'  ...     37: 'Mai' ... }  &gt;&gt;&gt; s = list((i d.get(i)) for i in L) &gt;&gt;&gt; print s [(1 'Ai') (2 'Risa') (37 'Mai') (32 'Megumi') (4 'Sayumi')]  &gt;&gt;&gt; s = list(d.get(i) for i in L) &gt;&gt;&gt; print s ['Ai' 'Risa' 'Mai' 'Megumi' 'Sayumi']  
ImageFile.ImageFile ImageFile.ImageFile _open() self.fp _open() 
class OtherEntity(db.Model): # ... some properties  @classmethod def update_descendants(cls ancestor with_transaction=True):   if with_transaction:     return db.run_in_transaction(cls.update_descendants ancestor                                  with_transaction=False)    # Now I can assume I am in a transaction one way or another...   descendants = cls.all().ancestor(ancestor).fetch(10)   for descendant in descendants:     descendant.update_yourself(ancestor.count)   return db.put(descendants)  put 
for ch in f:                                                  \   ( translatedToken = english_hindi_dict[ch] )                \     if (ch in english_hindi_dict) else (translatedToken = ch)                                                         ?  SyntaxError: invalid syntax  for ch in f:   if ch in english_hindi_dict:     translatedToken = english_hindi_dict[ch]   else:     translatedToken = ch  for ch in f:   translatedToken = english_hindi_dict[ch] if ch in english_hindi_dict else ch  translated = str(english_hindi_dict.get(ch ch) for ch in f) 
types = [col.type for col in q.columns]  types = [col.type for col in res.context.compiled.statement.columns]  types = [elem[1] for elem in res.cursor.description]  ResultProxy 
process = subprocess.Popen(['tf' 'changeset' '12345'] cwd='c:/somedir' env={'SOMEENVVAR': 'SOMEVALUE' ...} stdout=subprocess.PIPE)  for line in process.stdout:   print line  process.terminate()  
Text Text Text def button1():     text.insert(INSERT text1.get("1.0" "end-1c"))  "1.0" 1 0 Tkinter from Tkinter import * import Tkinter text = Tkinter.Text()  import Tkinter as tk text = tk.Text()  "tk" 
__import__ None &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.modules['pwd'] = None &gt;&gt;&gt; import pwd Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; ImportError: No module named pwd  
os.fstat 
SimpleXMLRPCServer logRequests server = SimpleXMLRPCServer(("localhost" 8000) logRequests = False)  BaseServer def handle_error(self request client_address):     """Handle an error gracefully.  May be overridden.      The default is to print a traceback and continue.      """     print '-'*40     print 'Exception happened during processing of request from'     print client_address     import traceback     traceback.print_exc() # XXX But this goes to stderr!     print '-'*40  &amp;2&gt;1 
content_css TINYMCE_DEFAULT_CONFIG TINYMCE_DEFAULT_CONFIG = {     # your other settings     'content_css': '/media/css/main.css' }  
def foo(bar baz):     """Function foo()  * Summary:     Function foo() handles all your foo-ish needs.  You pass in a bar and a baz and it foos them.  * Developers:     When you change foo() be sure you don't add any global variables and don't forget to run the unit tests.  * Testers:     When you test foo be sure to try negative values for baz. """     pass # code would go here  s = foo.__doc__  # s now refers to the docstring  lst = s.split("\n* ") section = [section for section in lst if section.startswith("Developers")][0] print(section) # prints the "Developers" section  def foo(bar baz):     """Function foo()  Function foo() handles all your foo-ish needs.  You pass in a bar and a baz and it foos them."     pass # code goes here  doc_developers["foo"] = "When you change foo() be sure you don't add any global variables and don't forget to run the unit tests."  doc_testers["foo"] = "When you change foo() be sure you don't add any global variables and don't forget to run the unit tests."  def def doc_dict = {} # this will be a dict of dicts doc_dict["developers"] = {} doc_dict["testers"] = {}  def doc_update(fn d):     name = fn.__name__     for key value in d.items():         doc_dict[key][name] = value  def foo(bar baz):     """Function foo()  Function foo() handles all your foo-ish needs.  You pass in a bar and a baz and it foos them."     pass # code goes here  d = { "developers": "When you change foo() be sure you don't add any global variables and don't forget to run the unit tests." "testers": " When you test foo be sure to try negative values for baz."}  doc_update(foo d)  
def owns_console():     wnd = GetConsoleWindow()     if wnd is None:         return False     return GetCurrentProcessId() == GetWindowThreadProcessId(wnd)  
Gadget Element 
{{ form.as_something }} 
&gt;&gt;&gt; print "%r %r" % (True False) True False  %r __repr__ %s str 
string.py string.pyc 
    @objc.IBAction     def okSelected(self sender):      @objc.IBAction     def okSelected_(self sender):  
x = 3 y = 4 def f(x): return (x&lt;4)  import sys  # somehow modnames should be a list of strings that are the names of config files # # you can do this more dynamically depending on what you're doing                                                                                                      modnames = ['bar']  for modname in modnames:   exec('import %s' % modname)  for modname in modnames:   mod = sys.modules[modname]   for k in mod.__dict__:     if k[:2] != '__':       print modname k mod.__dict__[k]  bar f &lt;function f at 0x7f2354eb4cf8&gt; bar x 3 bar y 4  
import sys os  print 'sys.argv[0] =' sys.argv[0]             1 pathname = os.path.dirname(sys.argv[0])        2 print 'path =' pathname print 'full path =' os.path.abspath(pathname)  
main app.yaml app.yaml .py main main app.yaml 
Template 
render_uploads return markdown(render_uploads(markup))  
QMainWindow.menuBar() menubar = QtGui.MenuBar()  QMainWindow.menuBar() 
self.total_sold self.tax_rate Item.tax_rate self. 
wx.EVT_SIZE wx.FULL_REPAINT_ON_RESIZE 
replacer 
"Clear text" import tkinter as tk  class App(tk.Frame):     def __init__(self master):         tk.Frame.__init__(self master height=42 width=42)         self.entry = tk.Entry(self)         self.entry.focus()         self.entry.pack()         self.clear_button = tk.Button(self text="Clear text" command=self.clear_text)         self.clear_button.pack()      def clear_text(self):         self.entry.delete(0 'end')  def main():     root = tk.Tk()     App(root).pack(expand=True fill='both')     root.mainloop()  if __name__ == "__main__":     main()  
activate.py ~/.ipython import appscript import sys appscript.app(pid=int(sys.argv[1])).activate()  ~/.ipython/ipy_user_conf.py def wxactivate(self arg):    import wx    pid = wx.GetProcessId()    ip = self.api    import os    here = os.path.dirname(__file__)    import subprocess    subprocess.Popen([os.path.join(here 'activate.py') str(pid)])  ip.expose_magic('wxactivate' wxactivate)  IPython -wthread %wxactivate activate() 
python manage.py runserver 0.0.0.0:8000  8000 80 sudo python manage.py runserver 0.0.0.0:80 
u'm:/\u0411\u043b\u043e\u043a\u043d\u043e\u0442/home.tdl' 
root.geometry("500x500")  
# create the main sections of the layout  # and lay them out top = Frame(root) bottom = Frame(root) top.pack(side=TOP) bottom.pack(side=BOTTOM fill=BOTH expand=True)  # create the widgets for the top part of the GUI # and lay them out b = Button(root text="Enter" width=10 height=2 command=button1) c = Button(root text="Clear" width=10 height=2 command=clear) b.pack(in_=top side=LEFT) c.pack(in_=top side=LEFT)  # create the widgets for the bottom part of the GUI # and lay them out text = Text(root width=35 height=15) scrollbar = Scrollbar(root) scrollbar.config(command=text.yview) text.config(yscrollcommand=scrollbar.set) scrollbar.pack(in_=bottom side=RIGHT fill=Y) text.pack(in_=bottom side=LEFT fill=BOTH expand=True)  b = Button(root text="Enter" width=10 height=2 command=button1) c = Button(root text="Clear" width=10 height=2 command=clear) b.grid(row=0column=0 sticky=W) c.grid(row=0column=1 sticky=W)  textframe = Frame(root) textframe.grid(in_=root row=1 column=0 columnspan=3 sticky=NSEW) root.columnconfigure(0 weight=1) root.rowconfigure(1 weight=1)  text = Text(root width=35 height=15) scrollbar = Scrollbar(root) scrollbar.config(command=text.yview) text.config(yscrollcommand=scrollbar.set) scrollbar.pack(in_=textframe side=RIGHT fill=Y) text.pack(in_=textframe side=LEFT fill=BOTH expand=True)  
(T)~(T)0 def count_set_bits(v N=128):     mask = (1 &lt;&lt; N) - 1      v = v - ((v &gt;&gt; 1) &amp; mask//3)     v = (v &amp; mask//15*3) + ((v &gt;&gt; 2) &amp; mask//15*3)     v = (v + (v &gt;&gt; 4)) &amp; mask//255*15     return (mask &amp; v * (mask//255)) &gt;&gt; (N//8 - 1) * 8  
import httplib import urlparse  def getUrl(url):     maxattempts = 10     turl = url     while (maxattempts  &gt;  0) :                        hostpathquery = urlparse.urlsplit(turl)[1:4]         if  len(host.strip()) == 0 :             return None         try:              connection = httplib.HTTPConnection(hosttimeout=10)             connection.request("GET" path+'?'+query)             resp = connection.getresponse()         except:                                      return None                              maxattempts = maxattempts - 1         if (resp.status &gt;= 300) and (resp.status &lt;= 399):             turl = resp.getheader('location')         elif (resp.status &gt;= 200) and (resp.status &lt;= 299) :             return turl         else :             #some problem with this url             return None                    return None print getUrl('http://bit.ly/cDdh1c')  
class MyCPPException : public std::exception {...}  class_&lt;MyCPPException&gt; myCPPExceptionClass("MyCPPException"...); PyObject *myCPPExceptionType=myCPPExceptionClass.ptr(); register_exception_translator&lt;MyCPPException&gt;(&amp;translateFunc);  void translate(MyCPPException const &amp;e) {     PyErr_SetObject(myCPPExceptionType boost::python::object(e).ptr()); }  #include &lt;boost/python.hpp&gt; #include &lt;assert.h&gt; #include &lt;iostream&gt;  class MyCPPException : public std::exception { private:   std::string message;   std::string extraData; public:   MyCPPException(std::string message std::string extraData)   {     this-&gt;message = message;     this-&gt;extraData = extraData;   }   const char *what() const throw()   {     return this-&gt;message.c_str();   }   ~MyCPPException() throw()   {   }   std::string getMessage()   {     return this-&gt;message;   }   std::string getExtraData()   {     return this-&gt;extraData;   } };  void my_cpp_function(bool throwException) {   std::cout &lt;&lt; "Called a C++ function." &lt;&lt; std::endl;   if (throwException)     {       throw MyCPPException("Throwing an exception as requested."                "This is the extra data.");     } }  PyObject *myCPPExceptionType = NULL;  void translateMyCPPException(MyCPPException const &amp;e) {   assert(myCPPExceptionType != NULL);   boost::python::object pythonExceptionInstance(e);   PyErr_SetObject(myCPPExceptionType pythonExceptionInstance.ptr()); }  BOOST_PYTHON_MODULE(my_cpp_extension) {   boost::python::class_&lt;MyCPPException&gt;     myCPPExceptionClass("MyCPPException"             boost::python::init&lt;std::string std::string&gt;());   myCPPExceptionClass.add_property("message" &amp;MyCPPException::getMessage)     .add_property("extra_data" &amp;MyCPPException::getExtraData);   myCPPExceptionType = myCPPExceptionClass.ptr();   boost::python::register_exception_translator&lt;MyCPPException&gt;     (&amp;translateMyCPPException);   boost::python::def("my_cpp_function" &amp;my_cpp_function); }  import my_cpp_extension try:     my_cpp_extension.my_cpp_function(False)     print 'This line should be reached as no exception should be thrown.' except my_cpp_extension.MyCPPException e:     print 'Message:' e.message     print 'Extra data:'e.extra_data  try:     my_cpp_extension.my_cpp_function(True)     print ('This line should not be reached as an exception should have been' +        'thrown by now.') except my_cpp_extension.MyCPPException e:     print 'Message:' e.message     print 'Extra data:'e.extra_data  
ssl setup.py build -cmingw32 -cmingw32 setup.py install ssl 
while 1: True = 1 True True 1 &gt;&gt;&gt; import dis &gt;&gt;&gt; def while_1(): ...     while 1: ...         pass ... &gt;&gt;&gt; def while_true(): ...     while True: ...         pass ... &gt;&gt;&gt; dis.dis(while_1)   2           0 SETUP_LOOP               5 (to 8)    3     &gt;&gt;    3 JUMP_ABSOLUTE            3               6 POP_TOP               7 POP_BLOCK         &gt;&gt;    8 LOAD_CONST               0 (None)              11 RETURN_VALUE &gt;&gt;&gt; dis.dis(while_true)   2           0 SETUP_LOOP              12 (to 15)         &gt;&gt;    3 LOAD_GLOBAL              0 (True)               6 JUMP_IF_FALSE            4 (to 13)               9 POP_TOP    3          10 JUMP_ABSOLUTE            3         &gt;&gt;   13 POP_TOP              14 POP_BLOCK         &gt;&gt;   15 LOAD_CONST               0 (None)              18 RETURN_VALUE  while True: while 1: 
Blue =  RGBint &amp; 255 Green = (RGBint &gt;&gt; 8) &amp; 255 Red =   (RGBint &gt;&gt; 16) &amp; 255  
def ignore_exception(IgnoreException=ExceptionDefaultVal=None):     """ Decorator for ignoring exception from a function     e.g.   @ignore_exception(DivideByZero)     e.g.2. ignore_exception(DivideByZero)(Divide)(2/0)     """     def dec(function):         def _dec(*args **kwargs):             try:                 return function(*args **kwargs)             except IgnoreException:                 return DefaultVal         return _dec     return dec  sint = ignore_exception(ValueError)(int) print sint("Hello World") # prints none print sint("1340") # prints 1340  
from src import module_name   
characters def startElement(self name attrs):     self.map[name] = ''     self.tag = name  def characters(self content):     self.map[self.tag] += content  def endElement(self name):     print self.map[name]  
&lt;img&gt; 
sys.stdout.encoding cp850 cp1252 cp866 cp1251 IDLE 2.6.4       &gt;&gt;&gt; import os &gt;&gt;&gt; os.popen('chcp').read() 'Active code page: 850\n' &gt;&gt;&gt;  os.popen('chcp').read() : codepage = result.split()[-1] sys.stdout.encoding 
import os.path open(os.path.join(os.path.dirname(os.path.abspath(__file__)) 'cardlist.xml'))  
for r in results:      print r.get('key_name')  None key_name for r in results:      print r.get('key_name' 'Missing: key_name')  for r in results:     if 'key_name' in r:         print r['key_name']  for r in results:     try: print r['key_name']     except KeyError: pass  
0 1 0 1 &gt;&gt;&gt; format(23 '08b') '00010111'  &gt;&gt;&gt; int('00010111' 2) 23  
s = """A' B F2 E' B2 A2 C' D2 C D' E2 F"""  L = s.split(' ')  for i in xrange(len(L)):   if len(L[i]) == 1:     L[i] += 'x'  str_out = ' '.join(L)  
close() Qt.WA_DeleteOnClose button.setAttribute(Qt.WA_DeleteOnClose)  
&lt;script type="text/javascript"&gt;     var a='{{form}}';      alert(a); &lt;/script&gt;  
def read_as_flat( someFile ):     line_iter= iter(someFile)     time_header= None     for line in line_iter:         words = line.split()         if words[0] == 'time':             time_header = [ words[1:] ] # the "time" line             description= line_iter.next()             time_header.append( description )         elif words[0] in subjectNameSet:             data = line_iter.next()             yield time_header + data  for time description var1 var2 var3 in read_as_flat( someFile ):     etc.  
re.sub() repl print 'My name is %(name)s' % rowdict  
  &lt;iframe src="http://docs.google.com/gview?url=http://infolab.stanford.edu/pub/papers/google.pdf&amp;embedded=true" style="width:600px; height:500px;" frameborder="0"&gt;&lt;/iframe&gt;  
external 
fileinput.input() import fileinput for line in fileinput.input(remaining_args):     process(line)  
executemany() 
foo = B() print foo.__class__.__bases__[0].msg # 'hehehe'  A.msg 
(Foo.valid_from &lt;= func.current_timestamp()) &amp; (Foo.valid_until &gt; func.current_timestamp()) Foo.is_valid() 
AA A gh g shaakhaay-e-ng sh aa sha a #!/usr/bin/python # -*- coding: UTF-8 -*-  input_data = """ E-k- b-u-d-z*dhi-m-aan- p-ksii#  E-k- ghn-e- j-ngg-l- m-e-ng E-k- b-h-u-t- UUNNc-aa p-e-dr thaa# [snip] "t-o- k-z*y-aa h-u-AA"# """  roman_devanagari_dict={'A' : u'?'   'AA' : u'? '  'I' : u'?'  'II' : u'? '  'U' : u'? ' \ [snip]             '2' : u'?'  '5' : u'?'  '3' : u'?'  '7' : u'?'  '9' : u'?'  '1' : u'?'}  #Presuming we need to do the 3-letter cases then the 2-letter then the 1-letter replacements = [(-len(k) unicode(k) v) for k v in roman_devanagari_dict.items()] replacements.sort()  data = input_data.decode('ascii')  for _junk from_text to_text in replacements:     data = data.replace(from_text to_text)  # Presuming the '-' are inter-character markers delete them last not first data = data.replace(u'-' '') data = data.replace(u'#' '') print "untransliterated:" set(c for c in data if 0x20 &lt; ord(c) &lt; 0x7f)  BOM = u'\ufeff' outf = open('devanagari.txt' 'w') outf.write(BOM.encode('utf8')) # for the benefit of clueless Windows s/w outf.write(data.encode('utf8')) outf.close()  
import numpy as np import matplotlib.pyplot as plt  x = np.arange(0 7 0.01)  plt.subplot(2 1 1) plt.plot(x np.sin(x))  plt.subplot(2 2 3) plt.plot(x np.cos(x))  plt.subplot(2 2 4) plt.plot(x np.sin(x)*np.cos(x))  subplot() subplot(2 2 3) 
locals() &gt;&gt;&gt; class c(object): ...     for i in range(10): ...         locals()['A' + str(i)] = i ...  &gt;&gt;&gt; c.A0 0 &gt;&gt;&gt; c.A7 7  
for i in range(10):     print d.entries[i].summary  
('thumb') ('thumb') class UploadImageForm(ModelForm):   class Meta:      model = ImageUpload      fields = ('thumb')  
# If more than 1 second difference if os.stat(src).st_mtime - os.stat(dest).st_mtime &gt; 1:     shutil.copy2 (src dst)  
from django.core.files.uploadedfile import SimpleUploadedFile  my_model.file_field = SimpleUploadedFile('best_file_eva.txt' b'these are the contents of the txt file')  
{% extends "base.html" %}  {% extends "standard/bishop/base.html" %}  
logger = logging.getLogger('my-logger') logger.propagate = False # now if you use logger it will not log to console.  
blueprint = Blueprint(     self.blueprint_map[str(self.ui.blueprint_combo.currentText())]     runs=self.ui.runs_spin.text()      me=self.ui.me_spin.text()     pe=self.ui.pe_skill_combo.currentIndex() )  
class ExtendedRequest(urllib2.Request):     def __init__(self...):         urllib2.Request.__init__(self...)  
import string digs = string.digits + string.ascii_letters   def int2base(x base):     if x &lt; 0:         sign = -1     elif x == 0:         return digs[0]     else:         sign = 1      x *= sign     digits = []      while x:         digits.append(digs[int(x % base)])         x = int(x / base)      if sign &lt; 0:         digits.append('-')      digits.reverse()      return ''.join(digits)  
return self a += b type(a) __iadd__   a = a.__iadd__(b)  __iadd__ self a return return None 
plugins __init__.py import pkgutil # import our package import plugins list(pkgutil.iter_modules(plugins.__path__))  import pkgutil list(pkgutil.iter_modules(["plugins"]))  import types import sys plugins = types.ModuleType("plugins") plugins.__path__ = ["plugins"]  sys.modules["plugins"] = plugins import plugins.testplugin  
def expire_view_cache(view_name args=[] namespace=None key_prefix=None):     """     This function allows you to invalidate any view-level cache.          view_name: view function you wish to invalidate or it's named url pattern         args: any arguments passed to the view function         namepace: optioal if an application namespace is needed         key prefix: for the @cache_page decorator for the function (if any)     """     from django.core.urlresolvers import reverse     from django.http import HttpRequest     from django.utils.cache import get_cache_key     from django.core.cache import cache     # create a fake request object     request = HttpRequest()     # Loookup the request path:     if namespace:         view_name = namespace + ":" + view_name     request.path = reverse(view_name args=args)     # get cache key expire if the cached item exists:     key = get_cache_key(request key_prefix=key_prefix)     if key:         if cache.get(key):             # Delete the cache entry.               #             # Note that there is a possible race condition here as another              # process / thread may have refreshed the cache between             # the call to cache.get() above and the cache.set(key None)              # below.  This may lead to unexpected performance problems under              # severe load.             cache.set(key None 0)         return True     return False  from django.db.models.signals import post_save from blog.models import Entry  def invalidate_blog_index(sender **kwargs):     expire_view_cache("blog")  post_save.connect(invalidate_portfolio_index sender=Entry)  
import re s = "\t\tthis line has two tabs of indention" re.match(r"\s*" s).group() // "\t\t" s = "    this line has four spaces of indention" re.match(r"\s*" s).group() // "    "  &gt;&gt;&gt; timeit.timeit('r.match(s).group()' 'import re;r=re.compile(r"\s*")s="          hello world!"*10000' number=100000) 0.10037684440612793 &gt;&gt;&gt; timeit.timeit('"".join(itertools.takewhile(lambda x:x.isspace()s))' 'import itertools;s="          hello world!"*10000' number=100000) 0.7092740535736084 &gt;&gt;&gt; timeit.timeit('"".join(itertools.takewhile(str.isspaces))' 'import itertools;s="          hello world!"*10000' number=100000) 0.51730513572692871 &gt;&gt;&gt; timeit.timeit('s[:-len(s.lstrip())]' 's="          hello world!"*10000' number=100000) 2.6478431224822998  &gt;&gt;&gt; timeit.timeit('r.match(s).group()' 'import re;r=re.compile(r"\s*");s="          hello world!"*100' number=100000) 0.099548101425170898 &gt;&gt;&gt; timeit.timeit('"".join(itertools.takewhile(str.isspaces))' 'import itertools;s="          hello world!"*100' number=100000) 0.53602385520935059 &gt;&gt;&gt; timeit.timeit('s[:-len(s.lstrip())]' 's="          hello world!"*100' number=100000) 0.064291000366210938  &gt;&gt;&gt; timeit.timeit('s[:-len(s.lstrip())]' 's=" "*2000' number=10000) 0.047424077987670898 &gt;&gt;&gt; timeit.timeit('r.match(s).group()' 'import re;r=re.compile(r"\s*");s=" "*2000' number=10000) 0.2433168888092041 &gt;&gt;&gt; timeit.timeit('"".join(itertools.takewhile(str.isspaces))' 'import itertools;s=" "*2000' number=10000) 3.9949162006378174  &gt;&gt;&gt; timeit.timeit('s[:-len(s.lstrip())]' 's=" "*200000' number=10000) 4.2374031543731689 &gt;&gt;&gt; timeit.timeit('r.match(s).group()' 'import re;r=re.compile(r"\s*");s=" "*200000' number=10000) 23.877214908599854 &gt;&gt;&gt; timeit.timeit('"".join(itertools.takewhile(str.isspaces))' 'import itertools;s=" "*200000' number=100)*100 415.72158336639404  
Simple getChild() isLeaf = True isLeaf = True isLeaf = False Resource.getChild ... This will not be called if the class-level variable 'isLeaf' is set in     your subclass; instead the 'postpath' attribute of the request will be     left as a list of the remaining path elements....  
request is_facebook django.core.context_processors.request request {% if request.facebook.uid %}  
import ae.util import util ae util print util 
cursor.execute("""INSERT INTO life(user_id utm)      values(%sPointFromWKB(point(%s%s)))"""      (the_user_id utm_easting utm_northing))  execute() cursor.execute("""INSERT INTO life(user_id utm)      values(%sPointFromWKB(point(%s%s)))"""      [the_user_id utm_easting utm_northing])  
chr &gt;&gt;&gt; chr(0x65) == '\x65' True   &gt;&gt;&gt; hex(65) '0x41' &gt;&gt;&gt; chr(65) == '\x41' True  hex 
def evaluateHelper(self g):   return sum(a*b for a b in zip(self.chromosome self.chomosome[g:]))  % len... evaluate range(1 len(...)-1) N-1 
Decimal('3.432') &gt;&gt;&gt; from decimal import * &gt;&gt;&gt; import json &gt;&gt;&gt; json.dumps(Decimal('3.432')) .... TypeError: Decimal('3.432') is not JSON serializable  &gt;&gt;&gt; j = json.dumps(str(Decimal('3.000'))) &gt;&gt;&gt; j '"3.000"' &gt;&gt;&gt; Decimal(json.loads(j)) Decimal('3.000')  json load() loads() 
.setsockopt(SOL_SOCKET SO_REUSEADDR 1) TIME_WAIT SO_REUSEADDR 
\b__(\S+)__\b  &gt;&gt;&gt; import re &gt;&gt;&gt; re.findall(r"\b__(\S+)__\b""Here __is__ a __test__ sentence") ['is' 'test']     &gt;&gt;&gt; re.findall(r"\b__(\S+)__\b""__Here__ is a test __sentence__") ['Here' 'sentence'] &gt;&gt;&gt; re.findall(r"\b__(\S+)__\b""__Here's__ a test __sentence__") ["Here's" 'sentence']  &gt;&gt;&gt; print re.sub(r"\b(__)(\S+)(__)\b"r"&lt;b&gt;\2&lt;\\b&gt;""__Here__ is a test __sentence__") &lt;b&gt;Here&lt;\b&gt; is a test &lt;b&gt;sentence&lt;\b&gt;  \b__([a-zA-Z0-9_':])__\b  ### count "'" and ":" as part of words  &gt;&gt;&gt; re.findall(r"\b__([a-zA-Z0-9_']+)__\b""__Here's__ a test __sentence:__") ["Here's"] &gt;&gt;&gt; re.findall(r"\b__([a-zA-Z0-9_':]+)__\b""__Here's__ a test __sentence:__") ["Here's" 'sentence:']  
&gt;&gt;&gt; import re &gt;&gt;&gt; try: ...     a&gt;0 ... except (NameError)e: ...     print re.findall("name '(\w+)' is not defined"str(e))[0] a  &gt;&gt;&gt; str(e).split("'")[1] 'a'  
all([5 &lt; x x &lt; y])  
print line.rstrip("\n") sys.stdout.write() 
int int class str_usr(str):     def dup(self):         return self + self # or 2 * self  s = str_usr("hi") print s # prints hi print s.dup() # print hihi  
-r os dirname = "/some/path/" filename = "somefile.txt" pathname = os.path.abspath(os.path.join(dirname filename)) if pathname.startswith(dirname):    os.remove(pathname)  abspath 
c:/Python/python.exe ./emulate.py #!c:/Python/python.exe #!/usr/bin/env python #!/usr/bin/python PATH=c:/Python/:$PATH ./emulate.py emulate.py /bin/env 
d={key: lambda self: self.__vals__[key] for key in objects_type}  key ... lambda self key=key: self.__vals__[key] ...  key 
def myround(x base=5):     return int(base * round(float(x)/base))  def myround(x base=5):     return base * round(x/base)  round(float(x)/5) float int round() base 
class Class3():      def printValue(self):         print self.string1  class Class2(Class3):      def e(self):         self.value4 = self.value3 - self.value2         print self.value4         self.string1 = 'Hello'         self.printValue()  class Class1(Class2):      def __init__(self):         self.value1 = 10         self.value2 = 20      def add(self):         self.value3 = self.value1 + self.value2   if __name__ == '__main__':     instance1 = Class1()     instance1.add()     instance1.e() # will print "10" and "Hello"     print instance1.value3 # will print "30"  
numpy.select(condlist choicelist default=0) False x &gt; 7 x &gt;=4 x+10 x &gt;= 4 x x &gt; 7 x &lt; 4 
class MyPanel(wx.Panel):     def __init__(self *args):         wx.Panel.__init__(self *args)      def draw(self):         # Your code here  
map(itemgetter(0) query) for value in query: 
sums = session.query(func.sum(Irterm.n).label('a1')).group_by(Irterm.item_id).subquery() average = session.query(func.avg(sums.c.a1)).scalar()  
setattr setattr(self param['key'] 'something') 
#! /usr/bin/env python  import re from collections import deque  pattern = r'([A-Z]{2}(?=[A-Z]|$)|[A-Z](?=[a-z]|$))' chunks = deque(re.split(pattern 'HDMWhoSomeMONKEYThingXYZ'))  result = [] while len(chunks):   buf = chunks.popleft()   if len(buf) == 0:     continue   if re.match(r'^[A-Z]$' buf) and len(chunks):     buf += chunks.popleft()   result.append(buf)  print ' '.join(result)  re.findall pattern = r'([A-Z]{2}(?=[A-Z]|$)|[A-Z][a-z]*)' print ' '.join(re.findall(pattern 'HDMWhoSomeMONKEYThingX'))  
test_data.json [ {     "model": "stats_agg.newevent"     "pk": 1     "fields": {         "name": "event1"         "quantity":0.0         "timestamp": "2010-02-15 00:27:40"      } } {     "model": "stats_agg.newevent"     "pk": 2     "fields": {         "name": "event1"         "quantity":1.0         "timestamp": "2010-02-15 00:27:40"      } } ...  class SimpleTest(TestCase):    fixtures = ['test_data.json']  
from collections import defaultdict import pprint  data = {  'Bob' : {'item1':3 'item2':8 'item3':6}  'Jim' : {'item1':6 'item4':7}  'Amy' : {'item1':6'item2':5'item3':9'item4':2} }  flipped = defaultdict(dict) for key val in data.items():     for subkey subval in val.items():         flipped[subkey][key] = subval  pprint.pprint(dict(flipped))  {'item1': {'Amy': 6 'Bob': 3 'Jim': 6}  'item2': {'Amy': 5 'Bob': 8}  'item3': {'Amy': 9 'Bob': 6}  'item4': {'Amy': 2 'Jim': 7}}  
.get 
import wx from wx.lib.mixins.listctrl import TextEditMixin  class EditableTextListCtrl(wx.ListCtrl TextEditMixin):     def __init__(self parent ID pos=wx.DefaultPosition                 size=wx.DefaultSize style=0):         wx.ListCtrl.__init__(self parent ID pos size style)         TextEditMixin.__init__(self)   class MyDialog(wx.Dialog):     def __init__(self parent id title):         wx.Dialog.__init__(self parent id)         listCtrl = EditableTextListCtrl(self -1 style=wx.LC_REPORT|wx.LC_VRULES|wx.LC_HRULES size=(300 200))         listCtrl.InsertColumn(0 'State')         listCtrl.InsertColumn(1 'Capital')         listCtrl.SetColumnWidth(0 140)         listCtrl.SetColumnWidth(1 153)         states = ['Slovakia' 'Poland' 'Hungary']         capitals = ['Brastislava' 'Warsaw' 'Budapest']         for i in range(3):             listCtrl.InsertStringItem(0 states[i])             listCtrl.SetStringItem(0 1 capitals[i])  class MyApp(wx.App):     def OnInit(self):         dia = MyDialog(None -1 'capitals.py')         dia.ShowModal()         dia.Destroy()         return True  app = MyApp(0) app.MainLoop()  
.setsockopt(SOL_SOCKET SO_REUSEADDR 1) allow_reuse_address httpd = SocketServer.ThreadingTCPServer(('localhost' port) CustomHandler False) # Do not automatically bind httpd.allow_reuse_address = True # Prevent 'cannot bind to address' errors on restart httpd.server_bind()     # Manually bind to support allow_reuse_address httpd.server_activate() # (see above comment) httpd.serve_forever()  
User User User User 
get _notempty put get put block 
from django.contrib.auth.views import login from django.http import HttpResponseRedirect  def mylogin(request **kwargs):     if request.user.is_authenticated():         return HttpResponseRedirect('/')     else:         return login(request **kwargs)  django.contrib.auth.views.login urls.py 
perm = Permission.objects.get(pk=1) # pk #1 for brevity. group = Group.objects.get(pk=1)     # Again for brevity. group_perms = GroupPermission.objects.filter(permission=perm group=group) objects = [x.content_object for x in group_perms]  perm group objects class GroupPermissionManager(models.Manager):     def for(self perm):         group_perms = GroupPermission.objects.filter(permission=perm group=self)         objects = [x.content_object for x in group_perms]  class Group(models.Model):     name = models.CharField(max_length=30)     permissions = GroupPermissionManager()  perm = Permission.objects.get(pk=1) # pk #1 for brevity. group = Group.objects.get(pk=1)     # Again for brevity. objects = group.permissions.for(perm)      
f = open('data.txt' 'r') raw = f.readlines()  #generate set of all possible groupings groups = set() for lines in raw:     data = lines.strip().split()     for items in data:         groups.add(items)  #parse input into groups for group in groups:     print "Group \'%s\':" % group     for line in raw:         if line.find(group) is not -1:             print line.strip()     print  #consider storing into a dictionary instead of just printing  Group 'trainer': good dog trainer  Group 'good': good dog trainer  Group 'food': dog food cat food  Group 'dog': dog food good dog trainer  Group 'cat': cat food  Group 'veterinarian': veterinarian  
SetBackgroundColour self.Bind 
digitize import numpy as NP A = NP.random.randint(0 10 100)  bins = NP.array([0. 20. 40. 60. 80. 100.])  # d is an index array holding the bin id for each point in A d = NP.digitize(A bins)       
MIDDLEWARE_CLASSES = (     'django.contrib.sessions.middleware.SessionMiddleware'      'django.contrib.auth.middleware.AuthenticationMiddleware'     'django.contrib.sessions.middleware.SessionMiddleware'     #'django.middleware.locale.LocaleMiddleware'     'localeurl.middleware.LocaleURLMiddleware'     'multilingual.middleware.DefaultLanguageMiddleware'     'multilingual.flatpages.middleware.FlatpageFallbackMiddleware'     'django.middleware.common.CommonMiddleware'  )  
multiprocessing os.fork() multiprocessing subprocess Popen multiprocessing subprocess fork() 
setdefaultencoding() sys import sys # sys.setdefaultencoding() does not exist here! reload(sys)  # Reload does the trick! sys.setdefaultencoding('UTF8')  reload() importlib sys.setdefaultencoding() sys 
{% if thestring %}      {% if "1" in thestring %}      {% endif %}  {% endif %}  
[something] * 2 y[0] y[1] y[0] is y[1] id(y[0]) == id(y[1]) y[0] = [1]  a = [0 1] * 2  [0 1 0 1] 1 int a[1] = 5 a [0 5 0 1] 
sys.prefix sys.exec_prefix &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.prefix '/System/Library/Frameworks/Python.framework/Versions/2.6' &gt;&gt;&gt; sys.exec_prefix '/System/Library/Frameworks/Python.framework/Versions/2.6'  
build_opener() install_opener() urlopen() import urllib2 from StringIO import StringIO  def mock_response(req):     if req.get_full_url() == "http://example.com":         resp = urllib2.addinfourl(StringIO("mock file") "mock message" req.get_full_url())         resp.code = 200         resp.msg = "OK"         return resp  class MyHTTPHandler(urllib2.HTTPHandler):     def http_open(self req):         print "mock opener"         return mock_response(req)  my_opener = urllib2.build_opener(MyHTTPHandler) urllib2.install_opener(my_opener)  response=urllib2.urlopen("http://example.com") print response.read() print response.code print response.msg  
def make_properties(c):     from collections import defaultdict     props=defaultdict(dict)     for kv in vars(c).items():         if k.startswith("Get"):             props[k[3:]]['getter']=v         if k.startswith("Set"):             props[k[3:]]['setter']=v     for kv in props.items():         setattr(ckproperty(v.get('getter')v.get('setter')))     return c  @make_properties class C(object):     def GetX(self):         print "GetX"         return self._x      def SetX(self value):         print "SetX"         self._x = value  c=C() c.X=5 c.X  def make_properties(skip=None):     if skip is None:         skip=[]     def f(c):         from collections import defaultdict         props=defaultdict(dict)         for kv in vars(c).items():             if k.startswith("Get"):                 props[k[3:]]['getter']=v             if k.startswith("Set"):                 props[k[3:]]['setter']=v         for kv in props.items():             if k in skip:                 continue             setattr(ckproperty(v.get('getter')v.get('setter')))         return c     return f  @make_properties(skip=['Y']) class C(object):     def GetX(self):         print "GetX"         return self._x      def SetX(self value):         print "SetX"         self._x = value      def GetY(self):         print "GetY"         return self._y      def SetY(self value):         print "SetY"         self._y = value  c=C() c.X=5 c.X c.Y=5 c.Y  
re.split() from BeautifulSoup import BeautifulSoup   soup = BeautifulSoup(some_html)  paragraphs = list(unicode(x) for x in soup.findAll('p'))  
void start(const Tab&amp; t) {     this-&gt;get_override("start")(t); }  
urlparse.urlparse() os.path.splitext() 
x = text.get('1.0' END).strip()  
urllib.unquote urllib.unquote_plus www.foo.com?x=11&amp;y=12 
re.findall &gt;&gt;&gt; import re &gt;&gt;&gt; re.findall('[A-Z][^A-Z]*' 'TheLongAndWindingRoad') ['The' 'Long' 'And' 'Winding' 'Road'] &gt;&gt;&gt; re.findall('[A-Z][^A-Z]*' 'ABC') ['A' 'B' 'C']  
./configure --prefix=/path/to/installdir  (other options) make make install  cd virtualenv_source_dir /path/to/installdir/bin/python setup.py install  # Just to be safe export PATH="/path/to/installdir/bin:$PATH"   virtualenv ~/ENV ~/ENV/bin/pip install somepackage # (and such)  
Review.objects.filter(venue__pk=2)     .extra({'date_created' : "date(datetime_created)"})     .values('date_created')     .annotate(created_count=Count('id'))  
/bin/sh /bin/ls pfd = subprocess.Popen(['ls'] stdout=subprocess.PIPE stdin=subprocess.PIPE)  out err_output = pfd.communicate()  subprocess.communicate sh~# while 1:      c = pfd.stdout.read(1)     if not c:         break     elif c == '\n': # print line when found         print repr(out)         out = ''     else:         out += c         if out.strip() == 'sh#':             break  
uid.hex.upper().replace('D''Z') hex.upper().replace .hex int(theslice 16) += ''.join 
class InnerClassDescriptor(object):   def __init__(self cls):     self.cls = cls   def __get__(self instance outerclass):     class Wrapper(self.cls):       outer = instance     Wrapper.__name__ = self.cls.__name__     return Wrapper  class Outer(object):   @InnerClassDescriptor   class Inner(object):     def __init__(self):       print self.outer  o = Outer() i = o.Inner() print 'Outer is a' type(Outer) print 'Inner is a' type(o.Inner)  &lt;__main__.Outer object at 0x82f90&gt; Outer is a &lt;type 'type'&gt; Inner is a &lt;type 'type'&gt;  o1 = Outer() o2 = Outer() i1 = o1.Inner i2 = o2.Inner print i1() i2() i1() i2()  o1.Inner o2.Inner o.Inner o Outer 
EST-1 day 19:00:00 
sys.path 
&gt; 
&gt;&gt;&gt; e.__bases__[1].n 3  
page1=opener1.open(urllib2.quote(imageurl))  
sudo port selfupdate sudo port -u install py26-curl   #edited  /opt/local/bin/python2.6 sudo port selfupdate sudo port -u install curl  curl http://pycurl.sourceforge.net/download/pycurl-7.19.0.tar.gz | tar xz cd pycurl-7.19.0 python2.6 setup.py install --curl-config=/opt/local/bin/curl-config  
append return @composable def f4(a):     a.append(0)     return a  @composable def f4(a):   return a + [0]  
from cStringIO import StringIO  # ... def test_some_log_reading_scenario(self):     log1 = '\n'.join([         'log line'         'another log line'     ])     log2 = '\n'.join([         'another log another line'         'lala blah blah'     ])     # ...     result = myobj.read_log_files([StringIO(log1) StringIO(log2)])     # assert result  
INFORMATION_SCHEMA REFERENTIAL_CONSTRAINTS KEY_COLUMN_USAGE TABLE_CONSTRAINTS INFORMATION_SCHEMA SELECT orm backref child1.Parent Table backref foreign_keys ForeignKey references(...) 
lxml.etree import datetime  projects = [{'code': 'demo'  'created_at': datetime.datetime(2008 6 11 7 35 19)  'created_by': None  'id': 4  'image': 'https://website.com/files/0000/0000/blah.jpg'  'name': 'Demo Project'  'description': 'This is for demonstration purposes'  'due': '2009-05-30'  'start': '2009-05-06'  'status': 'Active'  'stype': 'Demo'  'tag_list': []  'type': 'Project'  'updated_at': datetime.datetime(2009 5 27 1 41 55)  'updated_by': {'id': 24 'name': 'Test' 'type': 'HumanUser'}  'users': [{'id': 19 'name': 'User 1' 'type': 'HumanUser'}            {'id': 18 'name': 'User 2' 'type': 'HumanUser'}            {'id': 17 'name': 'User 3' 'type': 'HumanUser'}            {'id': 16 'name': 'User 4' 'type': 'HumanUser'}            {'id': 15 'name': 'User 5' 'type': 'HumanUser'}            {'id': 14 'name': 'User 6' 'type': 'HumanUser'}            {'id': 13 'name': 'User 7' 'type': 'HumanUser'}            {'id': 12 'name': 'User 8' 'type': 'HumanUser'}            {'id': 20 'name': 'Client 1' 'type': 'HumanUser'}]}  ]  from lxml import etree  def E(tag parent=None content=None children=None **kw):   e = etree.Element(tag)   if not content is None:     e.text = str(content)   for kv in kw.items():     e.set(k str(v))   if not parent is None:     parent.append(e)   if not children is None:     for c in children:       e.append(c)   return e  def processProject(data):   attrs = ('name''type''id')   p = E('Project')   for item in attrs:     p.set(itemstr(data[item]))   for kv in [ x for x in data.items() if x[0] not in attrs ]:     if v is None:       E(kparent=p)     elif isinstance(vbasestring):       E(kcontent=vparent=p)     elif isinstance(v(floatlongint)):       E(kcontent=str(v)parent=p)     elif isinstance(vdatetime.datetime):       E(kcontent=v.strftime('%Y-%m-%d %H%M')parent=p)     elif k == 'users':       users = E(kparent=p)       for u in v:         E('user'parent=users**dict([ (xstr(y)) for (xy) in u.items()]))     elif k in ('updated_by''created_by'):       E(kparent=p**dict([ (xstr(y)) for (xy) in v.items()]))     elif k == 'tag_list':       taglist = E(kparent=p)       for t in v:         E('tag'parent=taglistcontent=t)   return p  &gt;&gt;&gt; projxml = processProject(projects[0]) &gt;&gt;&gt; etree.dump(projxml) &lt;Project name="Demo Project" type="Project" id="4"&gt;   &lt;status&gt;Active&lt;/status&gt;   &lt;code&gt;demo&lt;/code&gt;   &lt;created_at&gt;2008-06-11 0735&lt;/created_at&gt;   &lt;due&gt;2009-05-30&lt;/due&gt;   &lt;created_by/&gt;   &lt;updated_at&gt;2009-05-27 0141&lt;/updated_at&gt;   &lt;start&gt;2009-05-06&lt;/start&gt;   &lt;image&gt;https://website.com/files/0000/0000/blah.jpg&lt;/image&gt;   &lt;updated_by type="HumanUser" id="24" name="Test"/&gt;   &lt;users&gt;     &lt;user type="HumanUser" id="19" name="User 1"/&gt;     &lt;user type="HumanUser" id="18" name="User 2"/&gt;     &lt;user type="HumanUser" id="17" name="User 3"/&gt;     &lt;user type="HumanUser" id="16" name="User 4"/&gt;     &lt;user type="HumanUser" id="15" name="User 5"/&gt;     &lt;user type="HumanUser" id="14" name="User 6"/&gt;     &lt;user type="HumanUser" id="13" name="User 7"/&gt;     &lt;user type="HumanUser" id="12" name="User 8"/&gt;     &lt;user type="HumanUser" id="20" name="Client 1"/&gt;   &lt;/users&gt;   &lt;tag_list/&gt;   &lt;stype&gt;Demo&lt;/stype&gt;   &lt;description&gt;This is for demonstration purposes&lt;/description&gt; &lt;/Project&gt;  
__dict__ In [1]: class data:    ...:     def __init__(self **kwargs):    ...:         self.__dict__.update(kwargs)    ...:   In [2]: d = data(foo=1 bar=2)  In [3]: d.foo Out[3]: 1  In [4]: d.bar Out[4]: 2  types.SimpleNamespace 
/modules/ import edit import edit 
dumps &gt;&gt;&gt; from django.utils.simplejson import dumps loads &gt;&gt;&gt; original = u'\u042e\u0449\u0435\u043d\u043a\u043e' &gt;&gt;&gt; print original ?????? &gt;&gt;&gt; encoded = dumps(original) &gt;&gt;&gt; print encoded "\u042e\u0449\u0435\u043d\u043a\u043e" &gt;&gt;&gt; decoded = loads(encoded) &gt;&gt;&gt; print decoded ??????  
curs.execute("insert into location_tr values\         (NULL '%s' '%s')" % (data.entries[i].title data.feed.updated))  
__new__ __prepare__ 
x y x.__op__(y) NotImplemented y.__rop__(x) NotImplemented __rop__() __rop__() __op__() 
for line in open("file"):     if " Deposit" in line:          line=line.rstrip()          print line.split()  for line in open("file"):     if "Deposit" in line:          line=line.rstrip()          print line[line.index("Deposit"):].split()  
@login_required def yazi_ekle(request):         yazim = YaziForm() # Look at the () they are needed for instantiation         return render_to_response('yazi/save.html' {'YaziForm': yazim}) # Sending the form instance to the context not the form class  &lt;form method="post" action=""&gt; {% csrf_token %} &lt;table&gt; {{YaziForm}} &lt;/table&gt; &lt;input type="submit" value="Submit Form"/&gt; &lt;/form&gt;  
&gt;&gt;&gt; tuple(['hello']) ('hello')  
timeout.py from functools import wraps import errno import os import signal  class TimeoutError(Exception):     pass  def timeout(seconds=10 error_message=os.strerror(errno.ETIME)):     def decorator(func):         def _handle_timeout(signum frame):             raise TimeoutError(error_message)          def wrapper(*args **kwargs):             signal.signal(signal.SIGALRM _handle_timeout)             signal.alarm(seconds)             try:                 result = func(*args **kwargs)             finally:                 signal.alarm(0)             return result          return wraps(func)(wrapper)      return decorator  @timeout from timeout import timeout  # Timeout a long running function with the default expiry of 10 seconds. @timeout def long_running_function1():     ...  # Timeout after 5 seconds @timeout(5) def long_running_function2():     ...  # Timeout after 30 seconds with the error "Connection timed out" @timeout(30 os.strerror(errno.ETIMEDOUT)) def long_running_function3():     ...  
reload reload 
python_select port easy_install sys.path ports 
__main__ def print_method_module(method):     def printer(self):         name = self.__module__         if name == '__main__':             filename = sys.modules[self.__module__].__file__             name = os.path.splitext(os.path.basename(filename))[0]         print name         return method(self)     return printer  
lang = lang and lang.get_name() lang != None not lang is None 
obj = PageModel.get_by_id(page_id)  obj.key().id() PageModel 
funcdict = {   'mypackage.mymodule.myfunction': mypackage.mymodule.myfunction     .... }  funcdict[myvar](parameter1 parameter2)  
from suds.client import Client client = Client(url_to_wsdl_file) auth = client.service.login(username password)  client.service.addBase64EncodedAttachmentsToIssue(auth issue_key [filename.encode("utf-8")] [open(full_path_and_filename "rb").read().encode('base64')])  
import app.config.db_config app sys.path PYTHONPATH 
from twisted.application.service import Service startService amulecmd #!/usr/bin/env python # vim:ai:et:ts=2:sw=2:bg=dark from twisted.internet import protocol from twisted.protocols.basic import LineOnlyReceiver from twisted.application import service   from xml.etree import ElementTree as ET  from aMuleClass import amulecmd  class DialogueProtocol(LineOnlyReceiver):   def connectionMade(self):     print "Connected: %s" % self.transport.getPeer().host   def lineReceived(self line):     parsed= ET.XML(line)     if parsed.attrib['type'] == 'request':       if parsed.attrib['prompt'] == 'results':         self.transport.write(self.factory.mule.results())       elif parsed.attrib['prompt'] == 'downloads':         self.transport.write(self.factory.mule.downloads())       else:         print "Invalid request: %s\n" % line     else:       query= parsed.attrib['value']       if parsed.attrib['type'] == 'search':         print "must search for %s" % query         self.factory.mule.search(query)       elif parsed.attrib['type'] == 'cancel':         print "must cancel %s" % query         self.factory.mule.command("cancel %s" % query)       elif parsed.attrib['type'] == 'download':         print "must download %s" % query         self.factory.mule.command("download %s" % query)  class MyService(service.Service):   def __init__(selfport=14000):     self.port = port   def startService(self):     self.factory = protocol.Factory()     self.factory.protocol = DialogueProtocol     from twisted.internet import reactor     reactor.callWhenRunning(self.startListening)   def startListening(self):     self.factory.mule = amulecmd()     from twisted.internet import reactor     self.listener = reactor.listenTCP(self.portself.factory)     print "Started listening"   def stopService(self):     self.listener.stopListening()  if __name__ == '__main__':   pass else:   application = service.Application("aMuleSocket")   services = service.IServiceCollection(application)   MyService().setServiceParent(services)  
s = numpy.sum((A[::0:3]-B[::0:3])**2)  sum((A-B)**2) ((A-B)**2).sum() 
tabsize = view.get_tab_width() spaces = " " * tabsize after = after.replace("\t"spaces)  after = after.replace("\t" " " * view.get_tab_width())  if lang == 'CSS':     after = zen_core.expand_abbreviation(before'css''xhtml') else:     after = zen_core.expand_abbreviation(before'html''xhtml')  after = zen_core.expand_abbreviation(before 'css' if lang == 'CSS' else 'html' 'xhtml')  
import first first.First from first import First 
class Source(Base):     __table__ = source  class Event(Base):     __table__ = event     source = relation(Source)  conn = engine.connect() conn.execute(event.insert()[     {'source_id': 1 'info': 'xyz' 'item': 'foo'}     {'source_id': 1 'info': 'xyz' 'item': 'bar'}     ... ])  
C:\&gt;cd \Users\Junior\Downloads\Python\html5lib-0.90\ C:\Users\Junior\Downloads\Python\html5lib-0.90&gt;python setup.py install  
lst = map(int raw_input().split())  raw_input() \n .split() map(int ...) raw_input input map lst = list(map(int input().split()))  
LOAD query = "LOAD DATA INFILE '/path/to/file' INTO TABLE atable FIELDS TERMINATED BY '' ENCLOSED BY '\"' ESCAPED BY '\\\\'" cursor.execute( query )  INSERT INTO x (ab) VALUES  ('1' 'one') ('2' 'two')   ('3' 'three')  
coverage run manage.py test coverage xml sed 's/filename="/filename="my\/path\//g' coverage.xml &gt; coverage2.xml  
set.add() set set word_dict = dict() word_dict["foo"] = set() word_dict["foo"].add("baz")                                     word_dict["foo"].add("bang")  for for key in word_dict:    print key word_dict[key]  word_dict.items() word_dict.iteritems() for key value in word_dict.items():    print key value  
multiprocessing 
class TreeNode:     children = []  children def add_child(self child):     self.children.append(child)  class TreeNode(object):     numChildren = 0     board = zeros([88] Int)     turn_color = 0 # signifies NEXT to act     board_score = 0 # tally together board items     recursive_score = 0 # set when the recursive score function is called  def __init__(self board turn_color):     self.children = []     self.board = copy.deepcopy(board)     self.turn_color = turn_color ... etc etc ...  self.children __init__ object 
Logger.debug() 
permute_sequence permute_sequence(range(1000))     [500 250 750 125 625 375 ...]  calculate_jobs permute_sequence     [0 1000 500 250 750 125 625 375 ...]  
C = http.cookie.SimpleCookie C.output() wfile req_handler.send_response(200 'OK') req_handler.wfile.write(C.output()) # you may need to .encode() the C.output() req_handler.end_headers() #write body...  
if diff: &gt;&gt;&gt; after_short_program = [ ...     'Evgeni Plushenko' ...     'Evan Lysacek' ...     'Daisuke Takahashi' ...     'Nobunari Oda' ...     'Stephane Lambiel' ... ] &gt;&gt;&gt;  &gt;&gt;&gt; after_free_skate = [ ...     'Evan Lysacek' ...     'Daisuke Takahashi' ...     'Evgeni Plushenko' ...     'Stephane Lambiel' ...     'Nobunari Oda' ... ] &gt;&gt;&gt;  &gt;&gt;&gt; for iitem in enumerate(after_free_skate): ...     diff = after_short_program.index(item)-i ...     print "%s (%+d)"%(itemdiff) ...      ...  Evan Lysacek (+1) Daisuke Takahashi (+1) Evgeni Plushenko (-2) Stephane Lambiel (+1) Nobunari Oda (-1)  &gt;&gt;&gt; from operator import itemgetter &gt;&gt;&gt;  &gt;&gt;&gt; after_short_program = { ...     'Evgeni Plushenko':1 ...     'Evan Lysacek':2 ...     'Daisuke Takahashi':3 ...     'Stephane Lambiel':4 ...     'Nobunari Oda':5 ... } &gt;&gt;&gt;  &gt;&gt;&gt; after_free_skate = { ...     'Evan Lysacek':1 ...     'Daisuke Takahashi':2 ...     'Evgeni Plushenko':3 ...     'Stephane Lambiel':4   # These are tied ...     'Nobunari Oda':4       # at 4th place ... } &gt;&gt;&gt;  &gt;&gt;&gt; for kv in sorted(after_free_skate.items()key=itemgetter(1)): ...     diff = after_short_program[k]-v ...     print "%s (%+d)"%(kdiff) ...      ...  Evan Lysacek (+1) Daisuke Takahashi (+1) Evgeni Plushenko (-2) Nobunari Oda (+1) Stephane Lambiel (+0) &gt;&gt;&gt;   for kv in sorted(after_free_skate.items()key=itemgetter(1)):     try:         diff = after_short_program[k]-v         print "%s (%+d)"%(kdiff)     except KeyError:         print "%s (new)"%k  
&lt;l&gt; &lt;v&gt; from xml.dom.minidom import parseString  xmlDoc = parseString("""&lt;document goes here&gt;""") lNodesWithLevel2 = [lNode for lNode in xmlDoc.getElementsByTagName("l")                     if lNode.getAttribute("k") == "Level2"]  matchingVNodes = map(lambda lNode: lNode.getElementsByTagName("v") lNodesWithLevel2)  print map(lambda vNode: vNode.firstChild.nodeValue matchingVNodes) # Prints [u'Intermediate Level']  
altsep &gt;&gt;&gt; import re os.path &gt;&gt;&gt; seps = os.path.sep &gt;&gt;&gt; if os.path.altsep: ...   seps += os.path.altsep ... &gt;&gt;&gt; seps '\\/' &gt;&gt;&gt; somepath = r"C:\foo/bar.txt" &gt;&gt;&gt; print re.split('[%s]' % (seps) somepath) ['C:\\foo' 'bar.txt'] # Whoops!! it was splitting using [\/] same as [/] &gt;&gt;&gt; print re.split('[%r]' % (seps) somepath) ['C:' 'foo' 'bar.txt'] # after fixing it &gt;&gt;&gt; print re.split('[%r]' % seps somepath) ['C:' 'foo' 'bar.txt'] # removed redundant cruft &gt;&gt;&gt;  r"./foo/bar.txt" r"C:foo\bar.txt" ["." "foo" "bar.txt"] ["C:foo" "bar.txt"] ["" "CWD" "foo" "bar.txt"] ["C:" "CWD" "foo" "bar.txt"] os.path.altsep foo/bar/zot/../../whoopsy/daisy/somewhere/else &gt;&gt;&gt; os.path.abspath(r"C:/hello\world.txt") 'C:\\hello\\world.txt' &gt;&gt;&gt; os.path.abspath(r"C:hello\world.txt") 'C:\\Documents and Settings\\sjm_2\\hello\\world.txt' &gt;&gt;&gt; os.path.abspath(r"/hello\world.txt") 'C:\\hello\\world.txt' &gt;&gt;&gt; os.path.abspath(r"hello\world.txt") 'C:\\Documents and Settings\\sjm_2\\hello\\world.txt' &gt;&gt;&gt; os.path.abspath(r"e:hello\world.txt") 'E:\\emoh_ruo\\hello\\world.txt' &gt;&gt;&gt;  C \Documents and Settings\sjm_2 \emoh_ruo and or 
&gt;&gt;&gt; d={"key" : (100"edge_list")} &gt;&gt;&gt; for i(timeedge_list) in d.items(): ...  d[i] = time+1 edge_list ...  &gt;&gt;&gt; d {'key': (101 'edge_list')}  
libz.so 
separators = [u"?" u"" u"."] text = open("indiantext.txt").read() #This converts the encoded text to an internal unicode object where # all characters are properly recognized as an entity: text = text.decode("utf-8")  #this breaks the text on the white spaces yielding a list of words: words = text.split()  counter = 1  output = "" for word in words:     #if the last char is a separator and is joined to the word:     if word[-1] in separators and len(word) &gt; 1:         #word up to the second to last char:         output += word[:-1] + u"(%d) " % counter         counter += 1         #last char         output += word[-1] +  u"(%d) " % counter     else:         output += word + u"(%d) " % counter     counter += 1  print output  
except ImportError: except Exception: 
def to_base_5(n):     s = ""     while n:         s = str(n % 5) + s         n /= 5     return s  
os.path.split &gt;&gt;&gt; import os.path     &gt;&gt;&gt; olddir = None &gt;&gt;&gt; for name in open('input.txt'):     dirname fname = os.path.split(name)     if olddir != dirname:         prefix = ' ' * (len(dirname) +1)         olddir = dirname         print(name)     else:         print(prefix + fname)   /home/abc/a.txt           b.txt /home/xyz/test/d.txt                e.txt                f.txt /home/xyz/g.txt  
if for idAval in enumerate(items):     for idB in range(0 idA):         process_it(valitems[idB])   process_it 
heapq.nlargest heapq.nsmallest import heapq  elements = heapq.nsmallest(4 my_list key=f) foo = choice(elements)  
manage.py reset_db 
deferred() class SomeClass(Base):     __tablename__ = 'some_table'     id = Column(Integer primary_key=True)     name =  deferred(Column(String(50)))  
urllib2.urlopen() zipfile zipfile.ZipFile read() urllib2.urlopen() &gt;&gt;&gt; files = urllib2.urlopen('ftp://ftp2.census.gov/geo/tiger/TIGER2008/01_ALABAMA/').read().splitlines() &gt;&gt;&gt; for l in files[:4]: print l ...  drwxrwsr-x    2 0        4009         4096 Nov 26  2008 01001_Autauga_County drwxrwsr-x    2 0        4009         4096 Nov 26  2008 01003_Baldwin_County drwxrwsr-x    2 0        4009         4096 Nov 26  2008 01005_Barbour_County drwxrwsr-x    2 0        4009         4096 Nov 26  2008 01007_Bibb_County &gt;&gt;&gt;   &gt;&gt;&gt; for l in files[:4]: print l.split()[-1] ...  01001_Autauga_County 01003_Baldwin_County 01005_Barbour_County 01007_Bibb_County  
__getattribute__ self.isValid __getattribute__ type(self).isValid(self) classmethods __getattribute__ State class _NotValid(object):   def isValid(self):     return False   def setValid(self yesno):     if yesno:       self.__class__ = TheGoodOne  class TheGoodOne(object):   def isValid(self):     return True   def setValid(self yesno):     if not yesno:       self.__class__ = _NotValid   # write all other methods here  setValid __class__ __class__ __getattribute__ class _Valid(object):   def __init__(self actualobject):     self._actualobject = actualobject   # all actual methods go here   # keeping state in self._actualobject  class Wrapit(object):   def __init__(self):     self._themethods = _Valid(self)   def isValid(self):     # whatever logic you want     # (DON'T call other self. methods!-)     return False   def __getattr__(self n):     if self.isValid():       return getattr(self._themethods n)     raise AttributeError(n)  __getattribute__ __getattr__ __dict__ _Valid self._actualobject __getattribute__ _actualobject _Valid _themethods 
sorted(array key=lambda x:x[:24])  &gt;&gt;&gt; a = ["wxyz" "abce" "abcd" "bcde"] &gt;&gt;&gt; sorted(a) ['abcd' 'abce' 'bcde' 'wxyz'] &gt;&gt;&gt; sorted(a key=lambda x:x[:3]) ['abce' 'abcd' 'bcde' 'wxyz']  
ctypes #include &lt;stdlib.h&gt;  float mysumsquares(float * array size_t size) {     float total = 0.0f;     size_t idx;     for (idx = 0; idx &lt; size; ++idx) {         total += array[idx]*array[idx];     }     return total; }  $ gcc -O3 -fPIC -c ctsquare.c -o ctsquare.o $ ld -dylib -o ctsquare.so -lc ctsquare.o  import numpy import ctypes  # pointer to float type for convenience c_float_p = ctypes.POINTER(ctypes.c_float)  # load the library ctsquarelib = ctypes.cdll.LoadLibrary("ctsquare.so")  # define the return type and arguments of the function ctsquarelib.mysumsquares.restype = ctypes.c_float ctsquarelib.mysumsquares.argtypes = [c_float_p ctypes.c_size_t]  # python front-end function takes care of the ctypes interface def myssq(arr):     # make sure that the array is contiguous and the right data type     arr = numpy.ascontiguousarray(arr dtype='float32')      # grab a pointer to the array's data     dataptr = arr.ctypes.data_as(c_float_p)      # this assumes that the array is 1-dimensional. 2d is more complex.     datasize = arr.ctypes.shape[0]      # call the C function     ret = ctsquarelib.mysumsquares(dataptr datasize)      return ret  if __name__ == '__main__':     a = numpy.array([1234])     print 'sum of squares of [1234] =' myssq(a)  
Process.terminate 
# models/__init__.py shown: import user other                 # ambiguous relative import from . import user other          # relative import from app.models import user other # absolute import  import models from models import user other # or: import models.user models.other  
x nonlocal global 
getattr getattr(x 'foobar') x.foobar 
def parseAndEvaluate(exp):         if gdb.VERSION.startswith("6.8.50.2009"):             return gdb.parse_and_eval(exp)         # Work around non-existing gdb.parse_and_eval as in released 7.0         gdb.execute("set logging redirect on")         gdb.execute("set logging on")         gdb.execute("print %s" % exp)         gdb.execute("set logging off")         return gdb.history(0)  
from collections import defaultdict  def leaders(xs top=10):     counts = defaultdict(int)     for x in xs:         counts[x] += 1     return sorted(counts.items() reverse=True key=lambda tup: tup[1])[:top]  defaultdict top &gt;&gt;&gt; xs = list("jkl;fpfmklmcvuioqwerklmwqpmksdvjioh0-45mkofwk903rmiok0fmdfjsd") &gt;&gt;&gt; print leaders(xs) [('k' 7) ('m' 7) ('f' 5) ('o' 4) ('0' 3) ('d' 3) ('i' 3) ('j' 3) ('l' 3) ('w' 3)]  
+= 
doA self.doA() call CoolIt.call(self.doA args=() timeout=100)  call doA 
from Crypto.Cipher import AES from urllib import quote  # Note that for AES the key length must be either 16 24 or 32 bytes encryption_obj = AES.new('abcdefghijklmnop') plain = "Testing"  # The plaintext must be a multiple of 16 bytes (for AES) so here we pad it # with spaces if necessary. mismatch = len(plain) % 16 if mismatch != 0:   padding = (16 - mismatch) * ' '   plain += padding  ciph = encryption_obj.encrypt(plain)  # Finally to make the encrypted string safe to use in a URL we quote it quoted_ciph = quote(ciph)  encryption_obj from urllib import unquote  # We've already created encryption_object as shown above  ciph = unquote(quoted_ciph) plain = encryption_obj.decrypt(ciph)  class Pk_lookup(models.Model):   # since we're using sha256 set the max_length of this field to 32   hashed_pk = models.CharField(primary_key=True max_length=32)   key = models.IntegerField()  import hashlib import Pk_lookup  hash = hashlib.sha256() hash.update(str(pk)) # pk has been defined previously pk_digest = hash.digest()  lookup = Pk_lookup(hashed_pk=pk_digestkey=pk) lookup.save()  hexdigest() digest 
db.coll.group(     key='function(doc) { return {"dt": doc.dt.toDateString()} }'     condition={'dt': {'$gt': datetime_obj_30_days_ago}}     initial={'downloads': 0}     reduce='function(curr prev) { prev.downloads = Math.max(curr.downloads prev.downloads) }' )  
sort() 
px for i in range(0blurAmount):     origPx=getPixel(picx+iy)     rTotal=rTotal+getRed(origPx)     gTotal=gTotal+getGreen(origPx)     bTotal=bTotal+getBlue(origPx)  main show( makeBlurredPicture(picblurAmount) )  
DEBUG False mod_python mod_wsgi mod_wsgi mod_wsgi 
Cookie: output None Set-Cookie: \r\n thecookie.output(None '')  SimpleCookie 
from lxml import etree  def keep(self xmlfile elem_name attr_name pattern dst):     try:          rep = re.compile(pattern)     except TypeError:         # Create regex pattern if a list is given.          # TypeError: unhashable type: 'list'         rep = re.compile("|".join(pattern))      dom = etree.parse(xmlfile)     for node in dom.findall('//%s' % elem_name):         if not rep.search(node.get(attr_name)):             node.getparent().remove(node)      dom.write(dst)  keep('coverage.xml' 'package' 'name' 'ae|tests' 'wanted-coverage.xml')  
Widget.get_parent show no-show-all show_all 
QVBoxLayout QGridLayout self.ui.layout().setSizeConstraint(QtGui.QLayout.SetFixedSize) 
insert cursor.execute('insert into mytable (somefield) values ("%s")' % (mystring))  cursor.execute('insert into mytable (somefield) values (%(myparam)s)'                 dict(myparam=mystring))  
&lt;xs:schema elementFormDefault="qualified"             targetNamespace="http://schemas.datacontract.org/2004/07/Foo"             xmlns:xs="http://www.w3.org/2001/XMLSchema"             xmlns:tns="http://schemas.datacontract.org/2004/07/Foo"&gt;     &lt;xs:complexType name="ArtPiece"&gt;         &lt;xs:sequence&gt;             &lt;xs:element minOccurs="0" name="image" nillable="true" type="xs:base64Binary"/&gt;             &lt;xs:element minOccurs="0" name="imageId" type="xs:int"/&gt;             &lt;xs:element minOccurs="0" name="title" nillable="true" type="xs:string"/&gt;             &lt;xs:element minOccurs="0" name="year" nillable="true" type="xs:string"/&gt;         &lt;/xs:sequence&gt;     &lt;/xs:complexType&gt;      &lt;xs:element name="ArtPiece" nillable="true" type="tns:ArtPiece"/&gt;      &lt;xs:complexType name="ArrayOfArtPiece"&gt;         &lt;xs:sequence&gt;             &lt;xs:element minOccurs="0" maxOccurs="unbounded" name="ArtPiece" nillable="true" type="tns:ArtPiece"/&gt;         &lt;/xs:sequence&gt;     &lt;/xs:complexType&gt;      &lt;xs:element name="ArrayOfArtPiece" nillable="true" type="tns:ArrayOfArtPiece"/&gt; &lt;/xs:schema&gt;  
UserProfile UserProfile User UserProfile User UserProfile User AutoOneToOneField user.userprofile user.get_profile() UserProfile user.get_profile() DoesNotExist User POST Form ModelForm User UserProfile User ForeignKey unique=True ModelAdmin 
set delimiter ' ' lec_name lec_name lecturer lec_name .add offered_proj lecturers[lec_id] = Lecturer(lec_id lec_name) if lec_id in lecturers.keys():     lecturers[lec_id].offered_proj.add(proj_id)  lecturers in....keys() if lec_id in lecturers:     thelec = lecturers[lec_id] else:     thelec = lecturers[lec_id] = Lecturer(lec_id lec_name) thelec.offered_proj.add(proj_id)  thelec = lecturers.get(lec_id) if thelec is None:     thelec = lecturers[lec_id] = Lecturer(lec_id lec_name) thelec.offered_proj.add(proj_id)  
&gt;&gt;&gt; def foo(x): ...   return x + a &gt;&gt;&gt; foo &lt;function foo at 0xb7dde454&gt; &gt;&gt;&gt; foo(2) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;stdin&gt;" line 2 in foo NameError: global name 'a' is not defined  
do_something class ChildClass1( ParentClass ):     def do_something( argument_x= None )         ....  class ChildClass1( ParentClass ):     def do_something( argument_x )         return True  
print() print(ascii(foo)) print(foo) repr() ascii() 
from mpl_toolkits.mplot3d import Axes3D import numpy as np import matplotlib import matplotlib.pyplot as plt  fig = plt.figure() ax = Axes3D(fig)  x = [63691224] y = [3578122356] # put 0s on the y-axis and put the y axis on the z-axis ax.plot(xs=x ys=[0]*len(x) zs=y zdir='z' label='ys=0 zdir=z') plt.show()  ys=[2]*len(x) 
a b c = [] [] []  
result = newline #you lose the newline here  result = newline + '\n' #or '\r\n' depending on your newline format.  
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())  import eventlet from eventlet.green import urllib2 import re  login_url = 'https://secure-web28.secondlife.com/my/account/login.php?lang=en&amp;type=second-life-member&amp;nextpage=/my/index.php?lang=en'  pool = eventlet.GreenPool(10)  def fetch_title(opener url):     match = re.search(r'&lt;title&gt;(.*)&lt;/title&gt;' opener.open(url).read())     if match:         return match.group(1)     else:         return "no title"  def login(login_url fullname password):     opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())     login_page = opener.open(login_url).read()     csrf_token = re.search(r'&lt;input type="hidden" name="CSRFToken" value="(.*)"/&gt;' login_page).group(1)     username lastname = fullname.split()     auth = "CSRFToken=%s&amp;form[type]=second-life-member&amp;form[nextpage]=/my/index.php?lang=en&amp;form[persistent]=Y&amp;form[form_action]=Log%%20In&amp;form[form_lang]=en&amp;form[username]=%s&amp;form[lastname]=%s&amp;form[password]=%s&amp;submit=Submit" % (         csrf_token username lastname password)     logged_in = opener.open(login_url auth).read()     return opener   def login_and_fetch(login_url fullname password page_urls):     opener = login(login_url fullname password)     # note that this deliberately uses the global pool     pile = eventlet.GreenPile(pool)     for url in page_urls:         pile.spawn(fetch_title opener url)      return pile  login_urls = [login_url] *2 usernames = [...] passwords = [...] page_urls = [['https://secure-web28.secondlife.com/my/account/?lang=en-US'         'https://secure-web28.secondlife.com/my/community/events/index.php?lang=en-US']] * 2  for user_iter in pool.imap(login_and_fetch login_urls usernames passwords page_urls):     for title in user_iter:         print "got title" title  
&gt;&gt;&gt; adders = [0123] &gt;&gt;&gt; for i in [0123]: ...     adders[i] = (lambda b: lambda a: b + a)(i) ...      &gt;&gt;&gt; adders[1](3) 4 &gt;&gt;&gt; adders[2](3) 5  def createAdder(x):     return lambda y: y + x adders = [createAdder(i) for i in range(4)]  
None &gt;&gt;&gt; print min([None 12]) None &gt;&gt;&gt; None &lt; 1 True  1 None &gt;&gt;&gt; L = [None 1 2] &gt;&gt;&gt; min(x for x in L if x is not None) 1  
b=BigHash(DB_DIR url) try:     meta = bdecode(b.get())     return meta finally:     #unlock b here  with b as BigHash(DB_DIR url):     meta = bdecode(b.get())     return meta  
def del_A(name):     print('An A deleted:' + name)  class A(object):     def __init__(self name finalizers):         print('A created')         self.name = name         finalizers.append(weakref.ref(self lambda wr n = self.name: del_A(n)))  class B(object):     def __init__(self):         print('B created')  def do_work(finalizers):     a = A('a1' finalizers)     b = B()     a.other = b     b.other = a  if __name__ == '__main__':     finalizers = []     do_work(finalizers)  A created B created An A deleted:a1  
&gt;&gt;&gt; def chain(inp):     d = {}     for i in inp:         d[i[0]] = i[:] i[-1]     l n = d.pop(min(d))     while True:         lt n = d.pop(n [None None])         if n is None:             if len(d) == len(inp) - 1:                 l n = d.pop(min(d))                 continue             break         l += lt[1:]     return l  &gt;&gt;&gt; chain(input) [1 2 3 4 5 6 7] &gt;&gt;&gt; chain(([567] [1210] [345] [8 9])) [3 4 5 6 7]  
child child.value class ValueAttributeExtension(AttributeExtension):   ...  class Child(Base):   ...   value = ColumnProperty(Column(Integer nullable=False default=0)                           extension=ValueAttributeExtension())   from sqlalchemy import create_engine Column Integer ForeignKey from sqlalchemy.orm import relation scoped_session sessionmaker AttributeExtension ColumnProperty from sqlalchemy.ext.declarative import declarative_base  engine = create_engine('sqlite:///:memory:' echo=False) session = scoped_session(sessionmaker(bind=engine autoflush=True)) Base = declarative_base() Base.query = session.query_property()  class ValueAttributeExtension(AttributeExtension):     active_history = True      def append(self state child initiator):         assert False "should not be called"      def remove(self state child initiator):         assert False "should not be called"      def set(self state value oldvalue initiator):         print 'set called' state.obj() value oldvalue         child = state.obj()         if not(child.parent is None):             child.parent.sum_of_children += -oldvalue + value         return value  class ChildrenAttributeExtension(AttributeExtension):     active_history = True      def append(self state child initiator):         print 'append called' state.obj() child         parent = state.obj()         parent.sum_of_children += child.value         return child      def remove(self state child initiator):         print 'remove called' state.obj() child         parent = state.obj()         parent.sum_of_children -= child.value      def set(self state child oldchild initiator):         print 'set called' state child oldchild         parent = state.obj()         parent.parent.sum_of_children += -oldchild.value + child.value         #parent.sum_of_children += -oldchild.value + child.value         return child  class Child(Base):     __tablename__ = 'child'     id = Column(Integer primary_key=True)     parent_id = Column(Integer ForeignKey('parent.id') nullable=False)     value = ColumnProperty(Column(Integer nullable=False default=0)                     extension=ValueAttributeExtension())  class Parent(Base):     __tablename__ = 'parent'     id = Column(Integer primary_key=True)     sum_of_children = Column(Integer nullable=False default=0)      children = relation('Child' backref='parent'                         extension=ChildrenAttributeExtension())  Base.metadata.create_all(engine)  # Add a parent p = Parent() session.add(p) session.commit()  p = Parent.query.first() assert p.sum_of_children == 0   # Add a child c = Child(parent=p value=5) session.add(c) session.commit()  p = Parent.query.first() assert p.sum_of_children == 5  # Change a child #c = Child.query.first() c.value = 3 # fixed bug: = instead of == session.commit()  # extension.set() doesn't get called  p = Parent.query.first() assert p.sum_of_children == 3 # Assertion is OK  
itertools &gt;&gt;&gt; import itertools &gt;&gt;&gt; for i in itertools.product(range(2) repeat=4):     print(i)  
foo   joe = 5  bar   from foo import joe   print joe  
for i in range(1024): # some sensible upper limit beyond which the input is suspicious     myid= params.getfirst("myfield%d" % i)     if not myid: break         # do stuff with myid  
/* XXX should we allow assignment of different item sizes    as long as the byte length is the same?    (e.g. assign 2 shorts to a 4-byte slice) */ if (srcview.itemsize != view-&gt;itemsize) {     PyErr_Format(PyExc_TypeError         "mismatching item sizes for \"%.200s\" and \"%.200s\""          view-&gt;obj-&gt;ob_type-&gt;tp_name srcview.obj-&gt;ob_type-&gt;tp_name);     goto _error; }  mv[0] = mv[0]  
less -p regex file_name  some_command | less -p regex  
button1 = tkinter.Button(frame text="Say hi" command=lambda: print("Say hi") button2 = tkinter.Button(frame text="foo" command=lambda: print("foo")) button3 = tkinter.Button(frame text="bar" command=lambda: print("bar"))  
? page=1&amp; page=2&amp; 
Derived d = Derived() .virtual d.func() Derived.virtual Derived self Derived.virtual 
sys.stdout class file class StdOut(object):     def __init__(selftxtctrl):         self.txtctrl = txtctrl     def write(selfstring):         self.txtctrl.write(string)  sys.stdout = StdOut(the_text_ctrl)  file 
easy_install __file__ __path__ easy_install 
StartServers 8 MaxrequestsPerChild 4000  import os if os.uname()[1] == 'my.development.server.com':     LOCAL = True else:     LOCAL = False  
d[a][b][c] d[a b c] 
filter-with [app:main] use = ... ...  filter-with = flickzeug   [filter:flickzeug] use = egg:...#... ... 
twisted.words 
.get() .get() Empty Thread Thread target= .start() download_queue = queue.Queue()   class Downloader(threading.Thread):     def __init__(selfwork_queue original_size):         super().__init__()         self.current_job = 0         self.work_queue = work_queue         self.queue_size = original_size      def run(self):         while True:             try:                 url = self.work_queue.get(False)                 system_call = "wget -nc -q {0} -O {1}".format(urllocal_file)                 os.system(system_call)                 # the following code is questionable. By the time we get here                 #   many other items may have been taken off the queue.                  self.current_job = int(self.queue_size) - int(self.work_queue.qsize())                 self.percent = (self.current_job / self.queue_size) * 100                 sys.stdout.flush()                 status = ("\rDownloading " + url.split('/')[-1] +                            " [status: " + str(self.current_job) +                            "/" + str(self.queue_size) + " " +                            str(round(self.percent2)) + "%]" )                         except queue.Empty:                 pass             finally:                  self.work_queue.task_done()     def main:     if download_queue.qsize() &gt; 0:         original_size = download_queue.qsize()         if options.active_downloads:             active_downloads = options.active_downloads         else:             active_downloads = 3         for x in range(active_downloads):             downloader = Downloader(download_queue original_size)             downloader.start()         download_queue.join()  
alist = [     '#' '3e98.mtz' 'MR_AUTO' 'with' 'model' '200la_.pdb' 'SPACegroup' 'HALL' 'P' '2yb'     '#P' '1' '21' '1'      'SOLU' 'SET' 'RFZ=3.0' 'TFZ=4.7' 'PAK=0' 'LLG=30' 'SOLU' '6DIM' 'ENSE' '200la_'         'EULER' '321.997' '124.066' '234.744' 'FRAC' '-0.14681' '0.50245' '-0.05722'     'SOLU' 'SET' 'RFZ=3.3' 'TFZ=4.2' 'PAK=0' 'LLG=30' 'SOLU' '6DIM' 'ENSE' '200la_'         'EULER' '329.492' '34.325' '209.775' 'FRAC' '0.70297' '0.00106' '-0.24023'     'SOLU' 'SET' 'RFZ=3.6' 'TFZ=3.6' 'PAK=0' 'LLG=30' 'SOLU' '6DIM' 'ENSE' '200la_'          'EULER' '177.344' '78.287' '187.356' 'FRAC' '0.04890' '0.00090' '-0.57497'     ]  TAG0 = 'EULER' TAG1 = 'FRAC'  def extract_rows(tokens):     pos = 0     while True:         try:             pos = tokens.index(TAG0 pos)         except ValueError:             return         assert pos + 8 &lt;= len(tokens)         assert tokens[pos+4] == TAG1         yield (             tuple(map(float tokens[pos+1:pos+4]))             tuple(map(float tokens[pos+5:pos+8]))             )         pos += 8  for rowx row in enumerate (extract_rows(alist)):     print rowx 'TAG0' row[0]     print rowx 'TAG1' row[1]  0 TAG0 (321.99700000000001 124.066 234.744) 0 TAG1 (-0.14681 0.50244999999999995 -0.05722) 1 TAG0 (329.49200000000002 34.325000000000003 209.77500000000001) 1 TAG1 (0.70296999999999998 0.00106 -0.24023) 2 TAG0 (177.34399999999999 78.287000000000006 187.35599999999999) 2 TAG1 (0.048899999999999999 0.00089999999999999998 -0.57496999999999998)  for line in open('my_file.txt'):     row = line.split()     if row[0] == 'SOLU' and row[1] == '6DIM' and row[4] == 'EULER' and row[8] == 'FRAC':         euler = map(float row[5:8])         frac = map(float row[9:12])         do_something_with(euler frac)  RFZ=3.0 TFZ=4.7 
s = "orange apple grapes pear"  from itertools import product l = s.split() r='/'.join(''.join(k*v for kv in zip(l x))            for x in product(range(2) repeat=len(l))            if sum(x) &gt; 1) print r  bc/ac/ab/abc  
&gt;&gt;&gt; sorted_scores = [ ...     ('Apolo Ohno' 0) ...     ('Shanie Davis' -1) ...     ('Bodie Miller' -2) ...     ('Lindsay Vohn' -3)   ...     ('Shawn White' -3) ...     ('Bryan Veloso'-4) ... ] &gt;&gt;&gt;  &gt;&gt;&gt; res = {} &gt;&gt;&gt; prev = None &gt;&gt;&gt; for i(kv) in enumerate(sorted_scores): ...     if v!=prev: ...         placeprev = i+1v ...     res[k] = place ...  &gt;&gt;&gt; print res {'Apolo Ohno': 1 'Bryan Veloso': 6 'Shanie Davis': 2 'Lindsay Vohn': 4 'Bodie Miller': 3 'Shawn White': 4}  &gt;&gt;&gt; from operator import itemgetter &gt;&gt;&gt; print sorted(res.items()key=itemgetter(1)) [('Apolo Ohno' 1) ('Shanie Davis' 2) ('Bodie Miller' 3) ('Lindsay Vohn' 4) ('Shawn White' 4) ('Bryan Veloso' 6)]  
TEMPLATE_DIRS TEMPLATE_LOADERS templates 
class A(object):     def __init__(self):         self.aMap = {}  
x = 0 s = 0    while x &lt; 5:     x += 1     s += (int(raw_input("Enter a number: "))) print s  
inspect inspect.getmembers 
itertools.islice &gt;&gt;&gt; gen = (x for x in range(10)) &gt;&gt;&gt; index = 5 &gt;&gt;&gt; next(itertools.islice(gen index None)) 5  
list1.extend(reversed(list2[someInt:someOtherInt]))  list1.extend(list2[someOtherInt - 1: someInt - 1: -1])  reversed list1.sort() sorted(list1) 
MCreatePH = startGame()  MCreatePH = startNewGame()  
time.sleep(1) ser.setDTR(level=0) time.sleep(1)  
output += word[-1] +  u'(%d) ' % counter open("pyth_hinwp.py").readlines()[22-1]  
.get multiprocessing Queue 
#!/usr/bin/python # -*- coding: UTF-8 -*- # encoding: utf-8  import re  list1 = [] separators = [u'?' '' '.'] text = open('hinstest1.txt').read().decode('UTF-8') output_file = ('ophwp1.txt')  for line in text.splitlines():     counter = 1     output = ''     for word in line.split():         # Special case for the number at the start of the line         # The regex matches one or more decimal digits (\d+) followed by a dot (\.)         if re.match(r'\d+\.' word):             output += word + ' '             continue         # Special case: the last char is a separator joined to the word         if word[-1] in separators and len(word) &gt; 1:             # word up to the second to last char             output += word[:-1] + u'(%d) ' % counter             counter += 1             # last char             output += word[-1] + u'(%d) ' % counter             counter += 1         else:             output += word + u'(%d) ' % counter             counter += 1     output += u'\n'     list1.append(output.encode('UTF-8'))  f1=open(output_file'w') f1.write(''.join(list1)) f1.close()  
code TINYMCE_DEFAULT_CONFIG = {     # your other configuration     'theme_advanced_buttons3_add': 'code' }  advanced 
class noisePlugin(plugin.Plugin):     def __init__(self *a **k):         plugin.Plugin.__init__(self *a **k)         self.name = "noise"  self. 
qs = cl.get_query_set() qs = qs.aggregate(*[Sum(field) for field in tuple])  
def createNode(doc_ **param_):     cache = ( ('p' 'property')  ('l' 'label') ('td' 'totalDelay')               ('rd' 'routeDelay') ('ld' 'logicDelay') )     for index newIndex in cache:         if index not in param_:             continue         value = param_[index]         print newIndex '=' value  createNode 
def bench_lxml_xpath_direct(root): # Very slow but very fast if text() is removed.   name_list = root.xpath("book/author/name/text()")   print ("Size of list = " + str(len(name_list)))  def bench_lxml_xpath_loop(root): # Fast   name_list = root.xpath("book/author/name")   result = []   for n in name_list:     result.append(n.text)    print ("Size of list = " + str(len(name_list)))  def bench_lxml_getiterator(tree): # Very fast   result = []   for name in tree.getiterator("name"):     result.append(name.text)   print ("Size of list = " + str(len(result)))   def bench_lxml_findall(tree):  # Superfast   result = []   for name in tree.findall("//name"):     result.append(name.text)   print ("Size of list = " + str(len(result)))  
class myPanel(wx.Panel):     def __init__(self parent *args **kwargs):         wx.Panel.__init__(self parent *args **kwargs)         bitmap = wx.EmptyBitmap(1515)         self.button = wx.BitmapButton(self -1 bitmap=bitmap size=(1515) style=wx.NO_BORDER)         self.Bind(wx.EVT_BUTTON self.onClick self.button)  def onClick(self event):     self.Hide()  
&gt;&gt;&gt; try: ...    foo = x ... except NameError: ...    x = 5 ...    foo = 1  class Foo(object):     bar = None     def foo(self):         if self.bar is None:             self.bar = 5         return self.bar  
dot plone.dot -Tsvg &gt; plone.svg 
get_value_for_datastore make_value_from_datastore main class MyStringProperty(db.StringProperty):     def get_value_for_datastore(self model_instance):         vv = db.StringProperty.get_value_for_datastore(self model_instance)         return vv.upper()  class MyModel(db.Model):     foo = MyStringProperty()  class MainHandler(webapp.RequestHandler):      def get(self):         my = MyModel(foo='Hello World')         k = my.put()         mm = MyModel.get(k)         s = mm.foo         self.response.out.write('The secret word is: %r' % s)  get mm = my db.Property property db.Property property Model property db.Property 
MEDIA_ROOT 
_get_FOO() _set_FOO() _FOO 
dummy.cmd python.exe -m dummy  dummy.app 
id match_id match.match_id symmetrical 
memcache 
$stdout.flush  subprocess os.popen import subprocess import sys  cmd = ["ruby" "/Users/smcho/Desktop/testit.rb"] p = subprocess.Popen(cmd stdout=subprocess.PIPE) for line in iter(p.stdout.readline ''):     print line      sys.stdout.flush()  p.wait()  
tostring xml.etree.ElementTree xml.etree.ElementTree.ElementTree from xml.etree.ElementTree import ElementTree from xml.etree.ElementTree import tostring  tree = ElementTree() node = tree.parse(open("my_xml.xml")) text = tostring(node)  
menu [k for k v in menu.iteritems() if 'chips' in v]  defaultdict 
path = os.getcwd() self.webview.settings().setUserStyleSheetUrl(QUrl.fromLocalFile(path + "/myCustom.css"))  
&lt;br /&gt; 
def build_cdf(distrib):     cdf = []     val = 0     for key freq in distrib.items():         val += freq         cdf.append((val key))     return (val cdf)  import random def sample_from_cdf(val_and_cdf):     (val cdf) = val_and_cdf;     rand = random.uniform(0 val)     # use bisect.bisect_left to reduce search time from O(n) to O(log n).     return [key for index key in cdf if index &gt; rand][0]  x = build_cdf({"a":0.2 "b":0.3 "c":0.5}); y = [sample_from_cdf(x) for i in range(0100000)]; print (len([t for t in y if t == "a"]))   # 19864 print (len([t for t in y if t == "b"]))   # 29760 print (len([t for t in y if t == "c"]))   # 50376  
pyfsevents multiprocessing.Queue multiprocessing 
any(a[i:i + len(b)] == b for i in range(len(a) - len(b) + 1))  
class Person( object ):     def __init__( self name addr email etc. ):         self.observer= []         ... etc. ...     @property     def name( self ): return self._name     @name.setter     def name( self value ):          self._name= value         for observer in self.observedBy: observer.update( self )     ... etc. ...  observer class PersonCollection( set ):     def __init__( self *args **kw ):         self.byName= collections.defaultdict(list)         self.byEmail= collections.defaultdict(list)         super( PersonCollection self ).__init__( *args **kw )     def add( self person ):         super( PersonCollection self ).append( person )         person.observer.append( self )         self.byName[person.name].append( person )         self.byEmail[person.email].append( person )     def update( self person ):         """This person changed.  Find them in old indexes and fix them."""         changed = [(kv) for kv in self.byName.items() if id(person) == id(v) ]         for k v in changed:             self.byName.pop( k )         self.byName[person.name].append( person )         changed = [(kv) for kv in self.byEmail.items() if id(person) == id(v) ]         for k v in changed:             self.byEmail.pop( k )         self.byEmail[person.email].append( person)      ... etc. ... for all methods of a collections.Set.  getattr class GenericIndexedCollection( set ):     attributes_to_index = [ ] # List of attribute names     def __init__( self *args **kw ):         self.indexes = dict( (n {}) for n in self.attributes_to_index ]         super( PersonCollection self ).__init__( *args **kw )     def add( self person ):         super( PersonCollection self ).append( person )         for i in self.indexes:             self.indexes[i].append( getattr( person i )  
\x92 ’ &gt;&gt;&gt; print unicode('We\x92ve''1252') We’ve  
params = """Action: login Events: off Username: admin Secret: mypass"""  s.send(params + '\r\n') data = s.recv(1024) print data + '\n'  params = 'Action: status' s.send(params + '\r\n') data = s.recv(1024) print data + '\n'  params = 'Action: Logoff' s.send(params + '\r\n') data = s.recv(1024) print data + '\n'  
xmldoc.documentElement.setAttribute('xmlns' 'http://www.w3.org/2005/Atom')  
import functools  def iterate(update):     @functools.wraps(update)     def inner(X A=None S=None K=2 maxiter=10 c=0.1):         M N = X.shape         O = matrix(ones([M N]))         if A is None:             A = matrix(rand(M K))         if S is None:             S = matrix(rand(K N))         for iter in range(maxiter):             A S = update(X A S K maxiter c)             for k in range(K):                 na = norm(A[:k])                 A[:k] /= na                 S[k:] *= na         return A S     return inner  def def algo1(X A S c):  iterator @decorname @decorname(23) functools.wraps functools partial def algo1(X A S   c) def inner(X A=None S=None   K=2 maxiter=10 c=0.1) algo1(X maxiter=20) inner algo1 algo1 X A S c algo1 
temp_board 0 # First figure out where the array is zero zindex = numpy.where(temp_board == 0) # Make a set of tuples out of it zindex = set(zip(*zindex)) # Make a set of tuples from indices_to_watch too indices_to_watch = set([(01) (12)]) # Find the intersection.  These are the indices that need to be set indices_to_set = indices_to_watch &amp; zindex # Set the value temp_board[zip(*indices_to_set)] = level  indices_to_watch = [(01) (12)]  indices_to_watch = numpy.array(indices_to_watch)  index = zip(*indices_to_watch)  indices_to_set = numpy.where(temp_board[index] == 0)  final_index = zip(*indices_to_watch[indices_to_set])  temp_board[final_index] = level  
array numpy # Using explicit field types for compactness and access by name # (e.g. data[i]['mean'] == data[i][2]). fields = [('x' int) ('y' int) ('mean' float)            ('stdv' float) ('npixels' int)] # The simplest way is to build lists as you do now and convert them # to numpy array when done. data = numpy.array(data dtype=fields) mask = numpy.array(mask dtype=fields) ...  .data sys.getsizeof pytables 
clean foo_date foo_time required=False clean class FooForm(forms.Form)     # your field definitions      def clean(self):         data = self.cleaned_data         if data.get('foo_timestamp' None) or (data.get('foo_date' None) and data.get('foo_time' None)):             return data         else:             raise forms.ValidationError('Provide either a date and time or a timestamp')  
os.path.join B - A C import os import shutil  pathA = r"C:\Users\Morpheous\Desktop\Python Test" pathB = r"C:\Users\Morpheous\Desktop\Python Test 2"  A = set(os.listdir(pathA)) B = set(os.listdir(pathB)) C = B - A  if len(C):     print("Difference is: %s" % repr(C))      for addedFile in C:         shutil.copy2(os.path.join(pathB addedFile)                      os.path.join(pathA addedFile)) else:     print("No new files")  
@ permission_required @ 
str = "" # byte stream for encoding data str += struct.pack("5f i" vert1.x vert1.y vert1.z vert1.u vert1.v vert1.color) # 5 floats and an int # same for other vertices  device. ReadVertices( verts 3) # send vertices to C library "si" 
quit() quit() destroy() 
get() post() def get(self): def post(self): 
# A.func = func A.__dict__['func'] = func # This just sets the attribute # A.func #   The __getattribute__ method of a type object calls the __get__ method with #   None as the first parameter and the type as the second. A.__dict__['func'].__get__(None A) # The __get__ method of a function object                                     # returns an unbound method object if the                                     # first parameter is None. a = A() # a.func() #   The __getattribute__ method of object finds an attribute on the type object #   and calls the __get__ method of it with the instance as its first parameter. a.__class__.__dict__['func'].__get__(a a.__class__) #   This returns a bound method object that is actually just a proxy for #   inserting the object as the first parameter to the function call.  classmethod staticmethod 
threadsafety threadsafety threaded threading.local finally Get StopIteration def imthecaller():   for i row in enumerate(Get()):     print i row     if i &gt; 1: break   # this is the moment the generators' finally-clause runs   print 'bye'  finally yield 
print '\n'.join('\t'.join(x) for x in L)  
if any(s in line for s in ('string1' 'string2' ...)):  
def func(name klassDict):     return type(name () klassDict)  class MyMeta(type):     def __new__(self name bases klassDict):         return bases[0](name klassDict)  class Klass(func):     __metaclass__ = MyMeta  print Klass  
self f def online_only(func):     def f(self *args **kwargs):         if self.running:             return func(self *args **kwargs)         else:             return False     return f  
a = ('Product' '500.00' '1200.00') a = list(a) a.insert(3 'foobar') a = tuple(a) print a  &gt;&gt; ('Product' '500.00' '1200.00' 'foobar')  
&gt;&gt;&gt; t=time.strftime('%m/%d/%Y'time.strptime('12/1/2009' '%m/%d/%Y')) &gt;&gt;&gt; '/'.join( map( str map(intt.split("/")) ) ) '12/1/2009'  
.clear { clear: both; } 
os.dup2(1 2) /bin/ls ls 
def extract_by_letters(letters dictionary):     d = []     for word in dictionary:        for letter in letters:            if word.count(letter)&gt;0:                d.append(word)                break     return d  import re def extract_by_letters(letters dictionary):     regex = re.compile('['+letters+']')     d=[]     for word in dictionary:        if regex.search(word):            d.append(word)     return d  import re def extract_by_letters(letters dictionary):     regex = re.compile('['+letters+']')     return [word for word in dictionary if regex.search(word)]  
import fileinput f=0 for line in fileinput.input("file"inplace=0):     if "hostname" in line and "ser1-xyz" in line:        line=line.replace("ser1-xyz""ser1")        f=1     if f and "group" in line:        a=line.rstrip().split(" ")        a[-1]=str(int(a[-1])+1)        line=' '.join(a)        f=0     print line.rstrip()  $ ./python.py hostname ser1 myuser   name passwd   secret group    1235  hostname ser2-xyz myuser   name passwd   secret group    2345  inplace=0 inplace=1 
data = {         (1 'user1'): ("name1" "coord1" "hero1")         (2 'user1'): ("name2" "coord2" "hero2")         #...         (1 'user2'): ("name11" "coord11" "hero11")         (2 'user2'): ("name12" "coord12" "hero12")         # ...     }   class CityBean:     def __init__(selfnamecoordshero):         self.name = name         self.coords = coords         self.hero = hero  class Castles:     def __init__(selfusern):         self.user = user         self.n = n         name coords hero = data.get((n user))         self.citybean = CityBean(name coords hero)  
Media your-app your-app your-model {% extends "admin/change_form.html" %} {% block extrahead %} &lt;script type="text/javascript" charset="utf-8"&gt;     var MYAPP_objectSlug = "{{ original.slug|escapejs }}"; &lt;/script&gt; {{ block.super }} {% endblock %}  extrahead original tinyMCE.init MYAPP_objectSlug if (MYAPP_objectSlug == "ticker"){     var MYAPP_cssFile = "../css/special.css"; // change to your path } else {     var MYAPP_cssFile = "../css/default.css"; // change to your path }  tinyMCE.init({     ...     content_css : MYAPP_cssFile     ... });  
-pylab ion() show() draw() plot(x y) ioff() 
' '.join(r)  TypeError ' '.join(str(i) for i in r)  ' '.join(r[1:]) 
if re.match(r'\A[\w-]+\Z' word):   print "Single word"  \A \Z word 
 input_name =request.session['name']  input_sirname =request.session['sirname']  
uvw = db.ListProperty(int default=[])  
def dynSlicing(data targetsize):     return data[tuple(slice(x) for x in targetsize)]  
flashvars.userVO = "{{ userVO }}" 
Include/unicodeobject.h #define PyUnicode_AS_UNICODE(op) \                                                       (((PyUnicodeObject *)(op))-&gt;str)  unicode str unicode unicode super /usr/bin/ipython:3: DeprecationWarning: object.__init__() takes no parameters class Foo(unicode):     def __init__(self msg):         super(unicode self).__init__(msg)     def __str__(self): return 'str msg'     def __repr__(self): return 'repr msg'     def __unicode__(self): return u'unicode msg'  In [12]: print(Foo("asdf")) asdf  In [13]: str(Foo("asdf")) Out[13]: 'str msg'  In [14]: print str(Foo("asdf")) -------&gt; print(str(Foo("asdf"))) str msg  In [15]: print(str(Foo("asdf"))) str msg  In [16]: print('%s' % Foo("asdf")) asdf  unicode unicode __str__ Foo 
&lt;&gt; != 
request.path 
ret = np.zeros_like(data[0::]) for latIdx in xrange(grid.shape[1]):     for lonIdx in xrange(grid.shape[2]):         # check if we need to flip the column         if grid[0latIdxlonIdx] &gt; grid[-1latIdxlonIdx]:             ind = -1         else:             ind = 1         f = interpolate.interp1d(grid[::indlatIdxlonIdx] \                 data[::indlatIdxlonIdx] \                 kind=interp)         ret[latIdxlonIdx] = f(value) return ret  
import mimetypes  mimetypes.add_type("image/svg+xml" ".svg" True) mimetypes.add_type("image/svg+xml" ".svgz" True)  
states = ['IA' 'KS' 'UT' 'VA' 'NC' 'NE' 'SD' 'AL' 'ID' 'FM' 'DE' 'AK' 'CT' 'PR' 'NM' 'MS' 'PW' 'CO' 'NJ' 'FL' 'MN' 'VI' 'NV' 'AZ' 'WI' 'ND' 'PA' 'OK' 'KY' 'RI' 'NH' 'MO' 'ME' 'VT' 'GA' 'GU' 'AS' 'NY' 'CA' 'HI' 'IL' 'TN' 'MA' 'OH' 'MD' 'MI' 'WY' 'WA' 'OR' 'MH' 'SC' 'IN' 'LA' 'MP' 'DC' 'MT' 'AR' 'WV' 'TX'] regex = re.compile(r'\b(' + '|'.join(states) + r')\b' re.IGNORECASE)  
import glob os glob.glob(os.path.expanduser('~/.mozilla/firefox/*.default'))  ~/.mozilla/firefox ~ *.default 
fun eval radix lst = let   fun f (element sum) = sum * radix + element in   foldr f 0 lst end  - eval 10 [123]; val it = 321 : int  
class 
00000010 00000101 00000001 00000010 
rc = subprocess.call(     ["cmd" "--thing" "foo" "--stuff" "bar"       "-a" "b" "input" "output"]) print "Return code was" rc  pexpect wexpect 
get_all_field_names() Meta foo._meta.get_all_field_names() &gt;&gt;&gt; from foo.models import Foo &gt;&gt;&gt; f = Foo.objects.get(pk=1) &gt;&gt;&gt; f._meta.get_all_field_names() ['active' 'created' 'expires' 'id'  'inputter' 'reason' 'requester' 'updated']  def print_all_fields_starting_with(obj starter):     fields = [x for x in obj._meta.get_all_field_names() if x.startswith(starter)]     for field in fields:         print getattr(obj field)  save() def save(self):     print_all_fields_starting_with(self "foo_")     super(MyModel self).save()  
plt.plot(RPcolor='0.2'lw=1.5 zorder=1) plt.scatter(RPs=150color=c zorder=2)  
f = open(filename 'rtU')  for line in f:     ...  
&gt;&gt;&gt; import types &gt;&gt;&gt; m = types.ModuleType('m' 'The m module')  sys.modules &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.modules['m'] Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; KeyError: 'm'  &gt;&gt;&gt; sys.modules['m'] = m &gt;&gt;&gt; sys.modules['m'] &lt;module 'm' (built-in)&gt;  sys.modules sys.modules[__name__] KeyError m.__file__ &gt;&gt;&gt; code = compile("a=23" "m.py" "exec") &gt;&gt;&gt; exec code in m.__dict__ &gt;&gt;&gt; m.a 23  exec new types new 
checkingaccount savingsaccount 
class UpdateForm(ModelForm):   name = forms.CharField(     max_length=140     required=False     widget=forms.TextInput(attrs={"class": "blankable"})   )    class Meta:     model = Update     exclude = ("user")  
unicode &gt;&gt;&gt; mystring = "i??ü?" &gt;&gt;&gt; print mystring.decode('utf-8').upper() I??ÜI  
null=True picture_url = models.CharField(max_length=2000 null=True)  
for k v in mydict.iteritems():     if v is None:         mydict[k] = ''  items iteritems AttributeError: 'dict' object has no attribute 'iteritems' items() iteritems() 
plt.imshow(im1) plt.axis('image') x = plt.ginput(4)  
str(info()) &gt;&gt;&gt; import urllib2 &gt;&gt;&gt; f = urllib2.urlopen('http://tejp.de') &gt;&gt;&gt; print str(f.info()) Connection: close Vary: Accept-Encoding Content-Type: text/html Accept-Ranges: bytes ETag: "-807357257" Last-Modified: Wed 01 Jul 2009 10:05:34 GMT Content-Length: 285 Date: Tue 23 Feb 2010 03:24:10 GMT Server: lighttpd/1.4.19  p 
Cursor.execute*() Cursor.rowcount int sqlite3_changes(sqlite3*) 
linebreaks {{ value|linebreaks }}  Joel\nis a slug &lt;p&gt;Joel&lt;br /&gt;is a slug&lt;/p&gt; 
d={} f=open("file") for line in f:     ab=map( int line.split() )      d[a]=b f.close() print d  $ cat file 9 120 10 12 11 4 12 1 13 515 14 32  $ ./python.py {9: 120 10: 12 11: 4 12: 1 13: 515 14: 32}  
lpr(1) subprocess 
\r \n 
from sqlalchemy.orm.collections import column_mapped_collection attribute_mapped_collection mapped_collection  mapper(Item items_table properties={     # key by column     'notes': relation(Note collection_class=column_mapped_collection(notes_table.c.keyword))     # or named attribute     'notes2': relation(Note collection_class=attribute_mapped_collection('keyword'))     # or any callable     'notes3': relation(Note collection_class=mapped_collection(lambda entity: entity.a + entity.b)) })  # ... item = Item() item.notes['color'] = Note('color' 'blue') print item.notes['color']  list dict associationproxy 
x = !echo $$$$PATH  $ PATH="$PATH" x = !echo $PATH x[0].split(":")  
time.strptime time_struct time.strftime time_struct &gt;&gt;&gt;s = time.strptime(page.editTime() "%Y%m%d%H%M%S") &gt;&gt;&gt;print time.strftime('%H:%M %d %B %Y (UTC)' s)  05:09 29 December 2009 (UTC) 
&gt;&gt; s = ''' ... ''' # as above &gt;&gt; t = re.search( 'Registry "unique-name" =(.*?)\n;' s re.S ).group( 1 ) &gt;&gt; u = re.findall( '^\s*(\w+) "?(.*?)"? = "(.*?)";\s*$' t re.M ) &gt;&gt; for x in u:        print( x )  ('String' 'name' 'modulename') ('String' 'timestamp' 'not specified') ('String' 'java' 'not specified') ('String' 'user' 'not specified') ('String' 'host' 'not specified') ('String' 'system' 'not specified') ('String' 'version' 'This I want') ('String' 'version-major' 'not specified') ('String' 'version-minor' 'not specified') ('String' 'scm' 'not specified') ('String' 'scmrevision' 'not specified') ('String' 'mode' 'release')  t = re.search( 'Registry "unique-name"\s*=\s*((?:\s*\w+ "?[^"=]+"?\s*=\s*"[^"]*?";\s*)+)\s*;' s ).group( 1 ) u = re.findall( '^\s*(\w+) "?([^"=]+)"?\s*=\s*"([^"]*?)";\s*$' t re.M )  
Movie.objects.annotate(category_min_season = models.Min('category__season_id')).filter(season_id=category_min_season)  Model.objects.filter(id=Q(season_id))  
pip install -e . 
query = "SELECT * ((ACOS(SIN(%s * PI() / 180) * SIN(lat * PI() / 180) + COS(%s * PI() / 180) * COS(lat * PI() / 180) * COS((%s - lon) * PI() / 180)) * 180 / PI()) * 60 * 1.1515) AS distance FROM app_car WHERE price BETWEEN %s AND %s HAVING distance&lt;=%s ORDER BY distance ASC"  cars = Car.objects.raw(query [lat lat lon min_price max_price miles])  return HttpResponse(len(list(cars))  
cancel False 
.values(...) serializers queryset = Model.objects.filter(make__slug__exact=make) return serializers.serialize("json" queryset fields=('slug' 'name'))  
print my_object.__dict__  
import numpy as np storageMatrix=np.empty((49)dtype='object')  dtype 'object' storageMatrix storageMatrix[columnrow]=np.arange(4096)  storageMatrix[columnrow][0] = 1 storageMatrix[columnrow][4092] = 2  
SIG_IGN 
re.sub def removeComments(string):     string = re.sub(re.compile("/\*.*?\*/"re.DOTALL ) "" string) # remove all occurrences streamed comments (/*COMMENT */) from string     string = re.sub(re.compile("//.*?\n" ) "" string) # remove all occurrence single-line comments (//COMMENT\n ) from string     return string  
formfield_for_manytomany SiteAdmin from django.contrib.admin import widgets  class SitebAdmin(admin.ModelAdmin):     list_display = ('id' 'name')    list_filter = ('name' 'categories')     def formfield_for_manytomany(self db_field request **kwargs):       if db_field.name == 'categories':          kwargs['widget'] = widgets.FilteredSelectMultiple(               db_field.verbose_name (db_field.name in self.filter_vertical))       return super(SitebAdmin self).formfield_for_foreignkey(          db_field request **kwargs)     fieldsets = (        (None {             "fields": ("name" "categories")        })    )  
import subprocess import win32gui import time  proc = subprocess.Popen(["notepad.exe"]) # lets wait a bit to app to start time.sleep(3)  def enumWindowFunc(hwnd windowList):     """ win32gui.EnumWindows() callback """     text = win32gui.GetWindowText(hwnd)     className = win32gui.GetClassName(hwnd)     #print hwnd text className     if text.find("Notepad") &gt;= 0:         windowList.append((hwnd text className))  myWindows = [] # enumerate thru all top windows and get windows which are ours win32gui.EnumWindows(enumWindowFunc myWindows)  # now hide my windows we can actually check process info from GetWindowThreadProcessId # http://msdn.microsoft.com/en-us/library/ms633522(VS.85).aspx for hwnd text className in myWindows:     win32gui.ShowWindow(hwnd False)  # as our notepad is now hidden # you will have to kill notepad in taskmanager to get past next line proc.wait() print "finished."  
SSL.Connection.clientPostConnectionCheck = None SSL.Connection.clientPostConnectionCheck = None 
np.hypot blockData = np.fromfile(ReadFile.fid np.int16 num_receivers*num_channels*num_samples*2) blockData = blockData.reshape((num_receivers num_channes num_samples 2)) return np.hypot(blockData[:::0] blockData[:::1])  
urllib2 import urllib import urllib2  request_data = urllib.urlencode({"DATA": xml}) response = urllib2.urlopen("https://url of the virtual bank POS" request_data)  response_data = response.read() data = response_data.split('\n')  xml 
repr() unicodedata.name() &gt;&gt;&gt; s = ' mwen bezwen \xc3\xa3 \xc2\xa8 d medikal ' &gt;&gt;&gt; print repr(s.decode('utf8')) u' mwen bezwen \xe3 \xa8 d medikal ' &gt;&gt;&gt; import unicodedata &gt;&gt;&gt; unicodedata.name(u'\xe3') 'LATIN SMALL LETTER A WITH TILDE' &gt;&gt;&gt; unicodedata.name(u'\xa8') 'DIAERESIS' &gt;&gt;&gt;  &gt;&gt;&gt; s = ' mwen bezwen \xc3\xa3 \xc2\xa8 d medikal ' &gt;&gt;&gt; for enc in 'euc-kr big5 gb2312 shift-jis euc-jp cp1251 koi8-r'.split():     print enc s.decode(enc)   euc-kr  mwen bezwen ? ? d medikal  big5  mwen bezwen ? ? d medikal  gb2312  mwen bezwen ? ? d medikal  shift-jis  mwen bezwen ?? ?? d medikal  euc-jp  mwen bezwen ? ? d medikal  cp1251  mwen bezwen ?? ?? d medikal  koi8-r  mwen bezwen ?? ?? d medikal  &gt;&gt;&gt;   Input language: English (guess) Output language: Haitian Creole Operating system: linux Python version: unknown C++ package name: unknown C++ package URL: unknown C++ package output encoding: unknown  Test 1 input: unknown Test 1 expected output: unknown Test 1 actual output (utf8): ' mwen bezwen \xc3\xa3 \xc2\xa8 d medikal ' [Are all of those internal spaces really in the string?]  Test 2 input: 'I need medical aid.' Test 2 expected output (utf8): 'Mwen bezwen \xc3\xa8d medikal.' Test 2 actual output (utf8): unknown  Mwen bezwen èd medikal 8a 99164 95 27682 c3 8210 a8 6004 b2 2159  e-grave is c3 a8 in UTF-8 o-grave is c3 b2 in UTF-8 2159 + 6004 approx == 8210 6004 approx == 3 * 2159  e-grave is 8a in old Western Europe DOS encodings like cp850!! o-grave is 95 in old Western Europe DOS encodings like cp850!! 99164 approx == 3 * 27682  
variable0 variable1 variable2 variable3  list for sequence = [] for _ in xrange(10):     sequence.append(function_that_returns_data())  _ sequence[0] sequence[1] sequence[2] sequence[3] [...] sequence[9]  for datum in sequence:     process_data(datum)  vars() locals() locals()['x'] = 4 x = 4  vars()['x'] x locals() vars() locals()[4] = 'An integer' &gt;&gt;&gt; x = 5 &gt;&gt;&gt; dir() ['__builtins__' '__doc__' '__name__' 'x'] &gt;&gt;&gt; locals()[4] = 'An integer' &gt;&gt;&gt; dir() [4 '__builtins__' '__doc__' '__name__' 'x'] &gt;&gt;&gt; x 5 &gt;&gt;&gt; 4 4 &gt;&gt;&gt; locals()[4] 'An integer'  locals() 
rsvg_handle_get_pixbuf_sub() rsvg_handle_render_cairo_sub() import gtk import rsvg handle = rsvg.Handle() handle.write(buffer=xml_data)  # xml_data is the XML string for the object you want image = gtk.Image() image.set_from_pixbuf(handle.get_pixbuf())  gtk.Image handle.render_cairo(cr) cr _sub() id= #!/usr/bin/env python  import gtk import rsvg  window = gtk.Window() window.set_title("Foo") window.connect("destroy" gtk.main_quit) window.show()  svg = rsvg.Handle(file='cards.svg') pixbuf = svg.get_pixbuf(id='#3_diamond')  image = gtk.Image() image.set_from_pixbuf(pixbuf) image.show()  window.add(image)  gtk.main()  
min_date = cur.fetchone()[0] min_date = min_date if min_date is not None else default_value  
Deferred.chainDeferred 
print("Hello World!") print("Please enter a number: ") x = input() print(x)  
**kwargs import re  remove_non_digits = re.compile(r'[^\d.]+')  inputList = ["a='0.015in' lPrime='0.292' offX='45um' offY='75um' sPrime='0.393' twistLength='0'"  "a='0.015in' lPrime='0.292' offX='60um' offY='75um' sPrime='0.393' twistLength='0'"  "a='0.015in' lPrime='0.292' offX='75um' offY='75um' sPrime='0.393' twistLength='0'" '']  #remove empty strings flag = True while flag:     try:         inputList.remove('')     except ValueError:         flag=False  outputList = []  for varString in inputList:     varStringList = varString.split()     varDict = {}     for aVar in varStringList:         varList = aVar.split('=')         varDict[varList[0]] = varList[1]     outputList.append(varDict)  for aDict in outputList:     for aKey in aDict:         aDict[aKey] = float(remove_non_digits.sub('' aDict[aKey]))  print outputList  [{'a': 0.014999999999999999 'offY': 75.0 'offX': 45.0 'twistLength': 0.0 'lPrime': 0.29199999999999998 'sPrime': 0.39300000000000002} {'a': 0.014999999999999999 'offY': 75.0 'offX': 60.0 'twistLength': 0.0 'lPrime': 0.29199999999999998 'sPrime': 0.39300000000000002} {'a': 0.014999999999999999 'offY': 75.0 'offX': 75.0 'twistLength': 0.0 'lPrime': 0.29199999999999998 'sPrime': 0.39300000000000002}]  
print response.content pdb \ 
&gt;&gt;&gt; import urllib.request &gt;&gt;&gt; import tst Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "tst.py" line 12 in &lt;module&gt;     Bus=getBus()   File "tst.py" line 9 in getBus     return sys.modules[mod_name].__dict__["Bus"] KeyError: 'Bus'  
class CheapClone(object):     def __init__(self original):         self.__dict__ = original.__dict__  from sqlalchemy.orm.attributes import ClassManager instrumentation_registry  class ReadonlyClassManager(ClassManager):     """Enables configuring a mapper to return instances of uninstrumented      classes instead. To use add a readonly_type attribute referencing the     desired class to use instead of the instrumented one."""     def __init__(self class_):         ClassManager.__init__(self class_)         self.readonly_version = getattr(class_ 'readonly_type' None)         if self.readonly_version:             # default instantiation logic doesn't know to install finders             # for our alternate class             instrumentation_registry._dict_finders[self.readonly_version] = self.dict_getter()             instrumentation_registry._state_finders[self.readonly_version] = self.state_getter()      def new_instance(self state=None):         if self.readonly_version:             instance = self.readonly_version.__new__(self.readonly_version)             self.setup_instance(instance state)             return instance         return ClassManager.new_instance(self state)  Base = declarative_base() Base.__sa_instrumentation_manager__ = ReadonlyClassManager  class ReadonlyFoo(object):     pass  class Foo(Base ReadonlyFoo):     __tablename__ = 'foo'     id = Column(Integer primary_key=True)     name = Column(String(32))      readonly_type = ReadonlyFoo  assert type(session.query(Foo).first()) is ReadonlyFoo  
import itertools  class Indexable(object):     def __init__(selfit):         self.it = iter(it)     def __iter__(self):         return self.it     def __getitem__(selfindex):         try:             return next(itertools.islice(self.itindexindex+1))         except TypeError:             return list(itertools.islice(self.itindex.startindex.stopindex.step))  it = Indexable(fib()) print(it[10]) #144 print(it[2:12:2]) #[610 1597 4181 10946 28657]  it[2:12:2] [3 8 21 55 144] it[10] it[2:12:2] [3 8 21 55 144] class Indexable(object):      def __init__(self it):         self.it = iter(it)         self.already_computed = []      def __iter__(self):         for elt in self.it:             self.already_computed.append(elt)             yield elt      def __getitem__(self index):         try:             max_idx = index.stop         except AttributeError:             max_idx = index         n = max_idx - len(self.already_computed) + 1         if n &gt; 0:             self.already_computed.extend(itertools.islice(self.it n))         return self.already_computed[index]  self.already_computed 
media {% for file in media %}     &lt;a href="{{ file.url }}"&gt;{{ file.title }}&lt;/a&gt; {% endfor %}  thumbnail_list = [] for file in media:     file_info = {}     file_info['url'] = file.url     file_info['title'] = file.title     thumbnail_list.append(file_info)  {% for file in thumbnail_list %}     &lt;a href="{{ file.url }}"&gt;{{ file.title }}&lt;/a&gt; {% endfor %}  class FileInfo(object):     def __init__(self file):         self.url = file.url # do whatever         self.title = file.title # do whatever  thumbnail_list = [] for file in media:     thumbnail_list.append(FileInfo(file))  
raw_input webbrowser sys.stdout sys.stderr import os gmail_user = raw_input('Please enter your Gmail username: ') savout = os.dup(1) os.close(1) os.open(os.devnull os.O_RDWR) try:    webbrowser.open(whatever) finally:    os.dup2(savout 1)  
img_data = b'iVBORw0KGgoAAAANSUhEUgAABoIAAAaCCAYAAAABZu+EAAAqOElEQVR42uzBAQEAAACAkP6v7ggK\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA2YMDAQAAAAAg\n/9dGUFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWkPDgkA\nAAAABP1/7QobAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAIcAeHkAAeLqlDIAAAAASUVORK5CYII='  # In Python 2.7 fh = open("imageToSave.png" "wb") fh.write(img_data.decode('base64')) fh.close()  # or more concisely using with statement with open("imageToSave.png" "wb") as fh:     fh.write(img_data.decode('base64'))  .encode() .decode() # For both Python 2.7 and Python 3.x import base64 with open("imageToSave.png" "wb") as fh:     fh.write(base64.decodebytes(img_data))  
any(pred(x) for x in lst)  from itertools import imap any(imap(pred lst))  
itertools izip from itertools import izip for i j in izip(handle1 handle2):     ...  izip_longest izip 
import wx  class SelectableFrame(wx.Frame):      c1 = None     c2 = None      def __init__(self parent=None id=-1 title=""):         wx.Frame.__init__(self parent id title size=wx.DisplaySize())          self.panel = wx.Panel(self size=self.GetSize())          self.panel.Bind(wx.EVT_MOTION self.OnMouseMove)         self.panel.Bind(wx.EVT_LEFT_DOWN self.OnMouseDown)         self.panel.Bind(wx.EVT_LEFT_UP self.OnMouseUp)         self.panel.Bind(wx.EVT_PAINT self.OnPaint)          self.SetCursor(wx.StockCursor(wx.CURSOR_CROSS))          self.SetTransparent(50)      def OnMouseMove(self event):         if event.Dragging() and event.LeftIsDown():             self.c2 = event.GetPosition()             self.Refresh()      def OnMouseDown(self event):         self.c1 = event.GetPosition()      def OnMouseUp(self event):         self.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))      def OnPaint(self event):         if self.c1 is None or self.c2 is None: return          dc = wx.PaintDC(self.panel)         dc.SetPen(wx.Pen('red' 1))         dc.SetBrush(wx.Brush(wx.Color(0 0 0) wx.TRANSPARENT))          dc.DrawRectangle(self.c1.x self.c1.y self.c2.x - self.c1.x self.c2.y - self.c1.y)      def PrintPosition(self pos):         return str(pos.x) + " " + str(pos.y)   class MyApp(wx.App):      def OnInit(self):         frame = SelectableFrame()         frame.Show(True)         self.SetTopWindow(frame)          return True   app = MyApp(0) app.MainLoop()  
sys.path.insert(0 os.path.join(os.path.abspath(os.path.dirname(__file__))'..'))  
ttest_... &gt;&gt;&gt; print 't-statistic = %6.3f pvalue = %6.4f' %  stats.ttest_1samp(x m) t-statistic =  0.391 pvalue = 0.6955  
a = b if b else {}  if b:     a = b else:     a = {}  is None a = b if b is not None else {}  
string = (str(a/b)+      #this value is something           '\t'+str(c)+   #this value is another thing           '\t'+str(d)+   #and this one too           ...           '\n')  
M-x cd M-x pdb Run pdb (like this): pdb test.py (Pdb) help import pdb  pdb.set_trace()  test.py M-x shell pdb pdb.set_trace() 
import warnings  def setup_warning_catcher():     """ Wrap warnings.showwarning with code that records warnings. """       caught_warnings = []     original_showwarning = warnings.showwarning      def custom_showwarning(*args  **kwargs):         caught_warnings.append(args[0])         return original_showwarning(*args **kwargs)      warnings.showwarning = custom_showwarning     return caught_warnings   caught_warnings_list = setup_warning_catcher()  # trigger warning here  assert len(caught_warnings_list) == 1  
setup.py bdist sdist_rpm bdist 
*pool product() for n in itertools.product(*pool):    print(n)  pool 
auth_ldap if config.auth_method == 'ldap':   import ldap_auth as auth elif config.auth_method == 'db':   import db_auth as auth else:   raise Exception("No valid authentication module configured")  auth.check_login(user password)  check_login LoginFailure True False 
PYTHONPATH .bashrc export PYTHONPATH=/projects/my_py_lib  
make $(shell cp *.py /usr/bin)  
sys.path /home/bodacydo/work/project sys.path $PYTHONPATH 
with import time     from contextlib import contextmanager  @contextmanager   def measureTime(title):     t1 = time.clock()     yield     t2 = time.clock()     print '%s: %0.2f seconds elapsed' % (title t2-t1)  def myFunc():     #...      with measureTime('myFunc'):         #block of code to time here      #...  
import os import urllib2 import datetime import ftplib  currdate = datetime.datetime.now() formatdate = currdate.strftime("%m-%d-%Y-%H%M")  def log():      fqn = os.uname()[1]     ext_ip = urllib2.urlopen('http://whatismyip.org').read()     smush = str(fqn + formatdate)     s = ftplib.FTP('10.7.1.71''username''password')     f = open('/Users/admin/Documents/%s.txt' % smush'w')     f.write(str("Asset: %s " % fqn))     f.write('\n')     f.write(str("Checking in from IP#: %s" % ext_ip))     f.write('\n')     f.write(str("On: %s" % formatdate))     f.close     f = open('/Users/admin/Documents/%s.txt' % smush'rb')     s.storbinary('STOR %s.txt' % smush  f)     s.close     f.close  
GameClass FieldClass PlayerClass GameClass class GameClass:     def __init__( self fc pc ):         self.Field = fc         self.Player = pc  class PlayerClass:     def __init__( self fc ):         self.fc = fc      def DoMagicHere( self ):         # use self.fc         pass  fc=FieldClass() pc=PlayerClass(fc) gc=GameClass(fc pc)  
fuzzy 
dict UserDict dict help(dict) __delitem__ __setitem__ clear __iter__ keys values items &gt;&gt;&gt; class odict(dict): ...     def __init__(self *args **kw): ...         super(odictself).__init__(*args **kw) ...         self.itemlist = super(odictself).keys() ...     def __setitem__(self key value): ...          # TODO: what should happen to the order if ...          #       the key is already in the dict        ...         self.itemlist.append(key) ...         super(odictself).__setitem__(key value) ...     def __iter__(self): ...         return iter(self.itemlist) ...     def keys(self): ...         return self.itemlist ...     def values(self): ...         return [self[key] for key in self]   ...     def itervalues(self): ...         return (self[key] for key in self) ...  &gt;&gt;&gt; od = odict(a=1b=2) &gt;&gt;&gt; print od {'a': 1 'b': 2} &gt;&gt;&gt; od['d']=4 &gt;&gt;&gt; od['c']=3 &gt;&gt;&gt; print od   # look at the `__str__` and `__repr__` methods  {'a': 1 'c': 3 'b': 2 'd': 4} &gt;&gt;&gt; print od.keys() ['a' 'b' 'd' 'c'] &gt;&gt;&gt; print od.values() [1 2 4 3]  
def initialize():     ... lots of initialization ...     return foo.bar.SomeClass(init_variable)  if __name__ == "__main__":     myObject = initialize()     myObject.member1 # works  class class MyProgram(object):     def __init__(self):         # ... lots of initialization ...         self.myObject = foo.bar.SomeClass(init_variable)      def usage(self):         self.myObject.member1  if __name__ == "__main__":     m = MyProgram()     m.usage()  
def logs(user):     return Log.objects.filter(email=user.email)  from django.contrib.auth.models import User User.logs = property(logs)  user = request.user logs = user.logs  
i * (3 * i - 1 ) / 2 if i == g if p_i &gt; p_g def main():         maxNumber = 5000         diff = 1000          p = {}         quickCache = {}          for i in range(maxNumber):             p[i] = i * (3 * i - 1 ) / 2          def quickCheck(n):             if n in quickCache: return quickCache[n]             partial_c = (sqrt(1 + 24 * (n)))/-6              c = 1/6 + partial_c             if int(c.real) == c.real:                     quickCache[n] = True                     return True             c = c - 2*partial_c             if int(c.real) == c.real:                     quickCache[n] = True                     return True             quickCache[n] = False             return False          for i in range(1 maxNumber):                 mi = p[i]                 for g in range(i+1 maxNumber):                         ma = p[g]                         if ma - mi &lt; diff and quickCheck(ma - mi) and quickCheck(ma + mi):                                 print('New couple ' ma mi)                                 diff = ma - mi  
c = range(a b) print [d * e for d in c for e in c]  
def removeLine(filename lineno):     fro = open(filename "rb")      current_line = 0     while current_line &lt; lineno:         fro.readline()         current_line += 1      seekpoint = fro.tell()     frw = open(filename "r+b")     frw.seek(seekpoint 0)      # read the line we want to discard     fro.readline()      # now move the rest of the lines in the file      # one line back      chars = fro.readline()     while chars:         frw.writelines(chars)         chars = fro.readline()      fro.close()     frw.truncate()     frw.close()  
print repr(filename) import ntpath print ntpath.basename(filename)  
def list_ajax_etag(request):     return str(request.GET.get('l'''))+str(request.GET.get('a'''))  
try:     while True:         data = ser.read(1).__repr__()         if data:             print "Received: %s." % data         else:             print "Looping." except KeyboardInterrupt:     print "Done." except:     raise finally:     ser.close()     print "Closed port."  
opendir(3) 
&gt;&gt;&gt; ctypes.c_long(1).value 1  
pickle pickle import cPickle from collections import namedtuple  ChanVal= namedtuple( 'ChanVal' ['eventTime''eventTimeExact' 'other_clock' ... ] ) for line socket:     c= ChanVal( **line.split('') )     cPickle.dump( sys.stdout )  import cPickle from collections import namedtuple ChanVal= namedtuple( 'ChanVal' ['eventTime''eventTimeExact' 'other_clock' ... ] ) while True:     item = cPickle.load( sys.stdin )     # processing     cPickle.dump( sys.stdout )  python proc1.py | python proc2.py  
options print options.input_pattern  
stdout= stderr= 
datetime.astimezone import pytz  # 3rd party: $ pip install pytz  u = datetime.utcnow() u = u.replace(tzinfo=pytz.utc) #NOTE: it works only with a fixed utc offset  print(u.astimezone(pytz.timezone("America/New_York")))  datetime.now() #!/usr/bin/env python from datetime import datetime import pytz # $ pip install pytz  print(datetime.now(pytz.timezone("America/New_York")))  tz.localize(datetime.now()) 
        url = new URL(SERVER_URL);         URLConnection connection = url.openConnection();         connection.setDoOutput(true);          OutputStreamWriter out = new OutputStreamWriter(                                   connection.getOutputStream());          String post_string;         post_string = "deviceID="+tm.getDeviceId().toString();          // send post string to server         out.write(post_string);         out.close();          //grab a return string from server         BufferedReader in = new BufferedReader(                     new InputStreamReader(                     connection.getInputStream()));          Toast.makeText(context in.readLine() Toast.LENGTH_SHORT).show();  def upload(request):     if request.method == 'POST':         deviceID = measurement.deviceID = str(request.POST['deviceID'])         return HttpResponse('Success!')     else:         return HttpResponse('Invalid Data')  
class Product(models.Model):     name    = models.CharField(max_length = 100)     base_price = models.DecimalField(max_digits = 5 decimal_places = 2)       def __unicode__(self):         return self.name   class Country(models.Model):     name = models.CharField(max_length = 2)     base_price = models.DecimalField(max_digits = 5 decimal_places = 2)         products = models.ManyToManyField(Product through = 'CountryProduct')      def __unicode__(self):         return self.name   class CountryProduct(models.Model):     country = models.ForeignKey(Country)     product = models.ForeignKey(Product)     overriden_price = models.DecimalField(max_digits = 5 decimal_places = 2)      class Meta:         unique_together = (("country" "product"))   class CountryProductInline(admin.TabularInline):     model = CountryProduct  class CountryAdmin(admin.ModelAdmin):     inlines = [CountryProductInline]  class ProductAdmin(admin.ModelAdmin):     inlines = [CountryProductInline]  
fb(method='stream_publish' args={'session_key': settings.FACEBOOK_SESSION 'uid':PAGE_ID 'target_id': 'NULL' 'message':'MESSAGE_HERE'})  
internalPointer() QModelIndex QVariant class TestModel(QAbstractItemModel):     def __init__(self plan):         QAbstractItemModel.__init__(self)      def index(self row column parent):         if not parent.isValid():             return self.createIndex(row column "foo")         return self.createIndex(row column "bar")      def parent(self index):          if index.internalPointer() == "bar":             return self.createIndex(0 0 "foo")         return QModelIndex()      def rowCount(self index):         if index.internalPointer() == "bar":             return 0         return 1      def columnCount(self index):         return 1      def data(self index role):         if role == 0:  # Qt.DisplayRole             return index.internalPointer()         else:             return None  
numpy.nonzero(numpy.in1d(a2 a1))[0]  len(a2) == 100 len(a1) == 10000 a1 a2 
f = open(tmpFile 'w') f.write(text) # make sure that all data is on disk # see http://stackoverflow.com/questions/7433057/is-rename-without-fsync-safe f.flush() os.fsync(f.fileno())  f.close()  os.rename(tmpFile myFile)  os.fsync 
ssl socket.socket 
def reencode(file):     for line in file:         yield line.decode('windows-1250').encode('utf-8')  csv_writer = csv.writer(open(outfilepath'w') delimiter=''quotechar='"' quoting=csv.QUOTE_MINIMAL) csv_reader = csv.reader(reencode(open(filepath)) delimiter=";"quotechar='"') for c in csv_reader:     l = # rearange columns here     csv_writer.writerow(l)  
 os.chdir(r"C:\Program Files(x86)\SomeFolder")  the_dll = WinDLL("SomeDLL.dll")        
Q(question__startswith='Who') | ~Q(pub_date__year=2005)  Record.objects.filter( Q(parameter__icontains="wd2") | ~Q(parameter__icontains="wd") )  
mytable = Table('mytable' db.metadata     Column('id' db.Integer primary_key=True)     Column('counter' db.Integer) )  m = mytable.query.first() m.counter = mytable.c.counter + 1  m = Model.query.first() m.counter = Model.counter + 1  m.counter += 1 
class SelectionWindow(QtGui.QMainWindow):     ...     def getSelection(self):         result = self.exec_()         if result:             # User clicked Ok - read currentRow             selectedRow = self.ui.myQtTreeViewWidget.currentIndex()         else:             # User clicked Cancel             selectedRow = None         return selectedRow     ...  
f.func_defaults def f(a L=[]):     L.append(a)     return L  print f(1) print f(2) print f(3) print f.func_defaults f.func_defaults = (['foo']) # Don't do this! print f(4)  [1] [1 2] [1 2 3] ([1 2 3]) ['foo' 4]  
return u'??????? %s' % self.title  
./manage.py 
python-dateutil datetime datetime .astimezone(dateutil.tz.tzutc()) datetime.datetime.utcnow().replace(tzinfo=dateutil.tz.tzutc()) import dateutil.tz  cet = dateutil.tz.gettz('CET')  cesttime = datetime.datetime(2010 4 1 12 57 tzinfo=cet) cesttime.isoformat() '2010-04-01T12:57:00+02:00'  cettime = datetime.datetime(2010 1 1 12 57 tzinfo=cet) cettime.isoformat()  '2010-01-01T12:57:00+01:00'  # does not automatically parse the time zone portion dateutil.parser.parse('Feb 25 2010 16:19:20 CET')\     .replace(tzinfo=dateutil.tz.gettz('CET'))  
&gt;&gt;&gt; '%11.4f' % -3.5 '    -3.5000'  &gt;&gt;&gt; '{:11.4f}'.format(-3.5) '    -3.5000'  
str( your_dbus_string ) 
import os import sys ..... sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/..') ....  
#!/usr/bin/python -u  import ossys sys.stdout = os.fdopen(sys.stdout.fileno() 'w' 0) # no buffering sys.stdout = os.fdopen(sys.stdout.fileno() 'w' 1) # line buffering  
Python 2.6.1 (r261:67515 Jul  7 2009 23:51:51)  [GCC 4.2.1 (Apple Inc. build 5646)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; float('-0.69389E-03') -0.00069388999999999996  
myFunc eval(input {"__builtins__": {} "myFunc": myFunc})  eval 
.create() create create sys.modules['__main__'] vars(sys.modules['__main__']) 
subtransactions=True begin() autocommit=True session.begin(subtransactions=True) session.begin(nested=True) session.begin_nested() sqlalchemy.test.requires.savepoints     emits_warning_on('mssql' 'Savepoint support in mssql is experimental and may lead to data loss.')     no_support('access' 'not supported by database')     no_support('sqlite' 'not supported by database')     no_support('sybase' 'FIXME: guessing needs confirmation')     exclude('mysql' '&lt;' (5 0 3) 'not supported by database')  
# COMMENT: We dont want arrays in SOAP-XML so I commented out the following lines # if typed: #    self.out.append( #        '&lt;%s %sarrayType="%s[%d]" %stype="%sArray"%s%s%s%s%s%s&gt;\n' % #        (tag ens t len(data) ins ens ndecl edecl idecl #         self.genroot(ns_map) id a))  #if typed: #    try: elemsname = obj._elemsname #    except: elemsname = "item" #else: elemsname = tag  for i in data:     self.dump(i elemsname not same_type ns_map)  #if typed: self.out.append('&lt;/%s&gt;\n' % tag)  &lt;SOAP-ENV:Body&gt; &lt;ns1:executeCommand xmlns:ns1="urn:SoapOAM"&gt; &lt;xsd:in-cmd&gt; &lt;m-strName xsi:type="xsd:string"&gt;set-log-level&lt;/m-strName&gt; &lt;m-argVector&gt;ERROR_LOG_LEVEL&lt;/m-argVector&gt; &lt;m-argVector&gt;netborder&lt;/m-argVector&gt; &lt;/xsd:in-cmd&gt; &lt;/ns1:executeCommand&gt; &lt;/SOAP-ENV:Body&gt;  
&lt; flowers:3 {% blocktrans count flowers|length as counter %}     There is one flower in the vase. {% plural %}     There are {{ counter }} flowers in the vase. {% endblocktrans %}  
CGEventMask eventsOfInterest kCGEventLeftMouseDown _CGEventType CGEventMaskBit tap = CGEventTapCreate(kCGHIDEventTap kCGHeadInsertEventTap     kCGEventTapOptionListenOnly kCGEventLeftMouseDown MyFunction None)  tap = CGEventTapCreate(kCGHIDEventTap kCGHeadInsertEventTap     kCGEventTapOptionListenOnly CGEventMaskBit(kCGEventLeftMouseDown)     MyFunction None)  tap = CGEventTapCreate(kCGHIDEventTap kCGHeadInsertEventTap     kCGEventTapOptionListenOnly (1 &lt;&lt; kCGEventLeftMouseDown)     MyFunction None)  
%pdb on %run scriptname %run -d scriptname 
from xml.dom.minidom import DOMImplementation  imp = DOMImplementation() doctype = imp.createDocumentType(     qualifiedName='foo'     publicId=''      systemId='http://www.path.to.my.dtd.com/my.dtd' ) doc = imp.createDocument(None 'foo' doctype) doc.toxml()  &lt;?xml version="1.0" ?&gt;&lt;!DOCTYPE foo  SYSTEM \'http://www.path.to.my.dtd.com/my.dtd\'&gt;&lt;foo/&gt;  
users_to_exclude = Noticesetting.objects.filter(send=False notice_type__label='announcement').values('user') emails = Emailaddress.objects.exclude(user__in=users_to_exclude)  
pickle pickle pickle.py 
&gt;&gt;&gt; import os &gt;&gt;&gt; os.urandom(10).encode('hex') '3fa0c2f72ff275f48d66' &gt;&gt;&gt; os.urandom(20).encode('hex') 'ecc1143b3fc90bd99bcd609b326694f13291e3d1' &gt;&gt;&gt; os.urandom(30).encode('hex') 'd4a9a2cd7b48eca831e9805e68dd6f7db7275b654e55cdec603631a5a355' &gt;&gt;&gt;   
cPickle array.array 
from django import db  db.reset_queries()  DEBUG False db.reset_queries() 
&gt;&gt;&gt; print xspar   (0 0) 1   (0 2) 3   (1 1) 4   (1 2) 5   (2 0) 7   (2 1) 8 &gt;&gt;&gt; print xspar[[[0][2]][02]]   (0 0) 1   (0 2) 3   (2 0) 7  &gt;&gt;&gt; print xspar[[02][02]]   [[1 0]]  
record.value record whatever = QSqlTableModel.data(self modelIndex role)  
try:   yield 42 finally:   do_something()  try:   yield 42 except:  # bare except catches *anything*   do_something()   raise  # re-raise same exception do_something()  raise sys.exc_info[0] sys.exc_info[1] sys.exc_info[2] 
.decode .encode u'...' 
os.popen import os  process = os.popen('gcc -E myHeader.h') preprocessed = process.read() process.close()  subprocess.Popen os.popen 
from distutils.core import setup import py2exe sys os  sys.argv.append('py2exe')  setup(     options={         "py2exe":{             "dll_excludes":[ "mswsock.dll" "powrprof.dll"]             'bundle_files': 1         }     }     windows = [{'script': "scriptName.py"}]     zipfile = None )  
fab -h 
request.POST QueryDict copy() request.POST request.GET 
import main_code  class COMInterface:     _public_methods_ = [ 'method1' ]     _reg_progid_ = "My.Test"     _reg_clsid_ = "{D6AA2A12-A5CE-4B6C-8603-7952B711728B}"      def methods(self input1input2input3):         # force python to reload the code that does the actual work          reload(main_code)         return main_code.Runner().go(input1input2input3)  
hex binascii &gt;&gt;&gt; binascii.hexlify(b'hello') b'68656c6c6f'  
py_compile $ python -tt -c "import py_compile; py_compile.compile('test.py' doraise=True)"  doraise=True 
enctype="multipart/form-data" from django import forms from django.shortcuts import render_to_response  class UploadForm(forms.Form):     cpk = forms.CharField(max_length=256)     f = forms.FileField()  def my_upload_view(request):     if request.method == 'POST':         form = UploadForm(request.POST request.FILES)         if form.is_valid():             print "Got cpk"form.cleaned_data['cpk']             print "Got file"request.FILES['f'].read()     else:         form = UploadForm()     return render_to_response('upload.html' {'form':form})  &lt;html&gt; &lt;body&gt;     &lt;form enctype="multipart/form-data" method="post"&gt;         {{ form.f }}         {{ form.cpk }}         &lt;input type="submit" /&gt;     &lt;/form&gt; &lt;/body&gt; &lt;/html&gt;  &lt;input type="file" name="f" id="id_f" /&gt; settings.FILE_UPLOAD_MAX_MEMORY_SIZE settings.FILE_UPLOAD_HANDLERS 
def mysum(l):     s2 = 0     s = 0     for e in l:         s += e         s2 += e * e     return (s s2)  sigma 
&gt;&gt;&gt; str(b'GET http://...' 'UTF-8') 'GET http://...'  &gt;&gt;&gt; str(b'GET http://...') "b'GET http://...'"  
admin.site.unregister(User) admin.site.unregister(Group) admin.site.unregister(Site)  
wx.Yield wx.SafeYield wx.CallAfter def start_work(self):     thread = threading.Thread(target=self.do_work args=(args go here))     thread.setDaemon(True)     thread.start() def do_work(self args go here):     # do work here     # wx.CallAfter will call the specified function on the GUI thread     # and it's safe to call from a separate thread     wx.CallAfter(self.work_completed result args here) def work_completed(self result args here):     # use result args to update GUI controls here     self.text.SetLabel(result)  start_work EVT_BUTTON do_work wx.CallAfter 
nb_add tp_as_number 
__lt__() 
$ mkdir /tmp/path $ mkdir /tmp/path/top /tmp/path/top/p1 /tmp/path/top/p2 $ touch /tmp/path/top/__init__.py /tmp/path/top/p1/__init__.py /tmp/path/top/p2/__init__.py $ touch /tmp/path/top/p1/quick1.py /tmp/path/top/p2/quick2.py$ echo 'import top.p1.quick1' &gt; /tmp/path/top/p2/quick2.py $ PYTHONPATH=/tmp/path python /tmp/path/top/p2/quick2.py $ python -c 'import sys; sys.path.append("/tmp/path"); import top.p2.quick2'  __all__ from ... import * top /tmp/path sys.path 
python-crontab from crontab import CronTab  tab = CronTab() cron = tab.new(command='/foo/bar') cron.every_reboot() tab.write()  
dict { '__ClassName__': { ... } }  dict dict TYPES = { 'ParentClass': ParentClass           'ChildClass': ChildClass }   class CustomTypeEncoder(json.JSONEncoder):     """A custom JSONEncoder class that knows how to encode core custom     objects.      Custom objects are encoded as JSON object literals (ie dicts) with     one key '__TypeName__' where 'TypeName' is the actual name of the     type to which the object belongs.  That single key maps to another     object literal which is just the __dict__ of the object encoded."""      def default(self obj):         if isinstance(obj TYPES.values()):             key = '__%s__' % obj.__class__.__name__             return { key: obj.__dict__ }         return json.JSONEncoder.default(self obj)   def CustomTypeDecoder(dct):     if len(dct) == 1:         type_name value = dct.items()[0]         type_name = type_name.strip('_')         if type_name in TYPES:             return TYPES[type_name].from_dict(value)     return dct  from_dict() dict datetime TYPES class ChildClass(object):     def __init__(self):         self.foo = 'foo'         self.bar = 1.1         self.parent = ParentClass(1)  { '__ChildClass__': {     'bar': 1.1     'foo': 'foo'     'parent': {         '__ParentClass__': {             'foo': 1}         }     } }  
range() r = range(100000000)  
filelist print the_file re.escape 
class Bot:     def fight(self):        print "fighting is fun!"  class Scheduler:            def schedule_action(selfaction):        bot = Bot()        getattr(botaction)()  scheduler = Scheduler() scheduler.schedule_action('fight')  
bisect.bisect import datetime import bisect import collections  data=[ (datetime.datetime(2010 2 26 12 8 17) 5594813L)    (datetime.datetime(2010 2 26 12 7 31) 5594810L)    (datetime.datetime(2010 2 26 12 6 4)  5594807L) ] interval=datetime.timedelta(minutes=1seconds=30) start=datetime.datetime(2010 2 26 12 6 4) grid=[start+n*interval for n in range(10)] bins=collections.defaultdict(list) for datenum in data:     idx=bisect.bisect(griddate)     bins[idx].append(num) for idxnums in bins.iteritems():     print('{0} --- {1}'.format(grid[idx]len(nums)))  
LongNamedRestaurant Place AbstractPlace class AbstractPlace(models.Model):     name = models.CharField(max_length=20)     rating = models.DecimalField()      class Meta:         abstract = True  class Place(AbstractPlace):     pass  class LongNamedRestaurant(AbstractPlace):     name = models.CharField(max_length=255)     food_type = models.CharField(max_length=25)  class Place(models.Model):     name = models.CharField(max_length=20)     rating = models.DecimalField()      class Meta:         abstract = True  class LongNamedRestaurant(Place):  # Subclassing `Place`.     name = models.CharField(max_length=255)  # Notice I'm overriding `Place.name` to give it a longer length.     food_type = models.CharField(max_length=25)  
setUp tearDown __init__ TestCase __init__ __init__ __del__ __init__ import unittest import sys  class TestTest(unittest.TestCase):      def __init__(self methodName='runTest'):         # A new TestTest instance is created for each test method         # Thus __init__ is called once for each test method         super(TestTest self).__init__(methodName)         print('__init__')      def setUp(self):         #         # setUp is called once before each test         #         print('setUp')      def tearDown(self):         #         # tearDown is called once after each test         #         print('tearDown')      def test_A(self):         print('test_A')      def test_B(self):         print('test_B')      def test_C(self):         print('test_C')    if __name__ == '__main__':     sys.argv.insert(1 '--verbose')     unittest.main(argv=sys.argv)  __init__ __init__ __init__ test_A (__main__.TestTest) ... setUp test_A tearDown ok test_B (__main__.TestTest) ... setUp test_B tearDown ok test_C (__main__.TestTest) ... setUp test_C tearDown ok  ---------------------------------------------------------------------- Ran 3 tests in 0.000s  OK  
class Foo(models.Model):     name = models.CharField(max_length=50)     extra_param = False  def save(self *args **kwargs):     ...      print self.extra_param  Foo(name="Bill Gates").save(extra_param=True)  def save(self *args **kwargs):     ...      print kwargs["extra_param"]  
&gt;&gt;&gt; tuple([1 2]) == (1 2) True  
import pickle  som = SOM_CLASS() fileObject = &lt;any file-like object&gt; pickle.dump(som fileObject) #... som = pickle.load(fileObject) som.work()  
void* c_void_p free memcpy memcpy void* free struct cdef struct data:     void* hdr     void* data     unsigned int* len  header data len size_t unsigned int 
s="WE THE PEOPLE OF THE UNITED STATES IN ORDER TO FORM A MORE PERFECT UNION ESTABLISH JUSTICE INSURE DOMESTIC TRANQUILITY PROVIDE FOR THE COMMON DEFENSE PROMOTE THE GENERAL WELFARE AND SECURE THE BLESSINGS OF LIBERTY TO OURSELVES AND OUR POSTERITY DO ORDAIN AND ESTABLISH THIS CONSTITUTION FOR THE UNITED STATES OF AMERICA."  import textwrap print "\n".join(textwrap.wrap(s 80))  # You don't even use this so why import it? --&gt; import string  def main():     user_string = raw_input()     all_caps = user_string.upper() # guess you wanted to make it uppercase     output = [] # this will hold the decoded characters      for char in all_caps:         if char.isalpha():             value = ord(char)             if 70 &lt;= value &lt;= 90: # look at this almost no other programming language supports that syntax                 num = value - 5             elif 65 &lt;= value &lt;= 69:                 num = value + 21             output.append(chr(num)) # add the decoded character to the output list         else:             output.append(char) # add the character verbatim to the output list (e.g. whitespace)      print "".join(output) # print out the list by putting it together into a string  main()  
from blog.models import *  INSTALLED_APPS = (     'django.contrib.admin'     'django.contrib.auth'     ...snip...     'sorl.thumbnail'     'mysite.blog' )  INSTALLED_APPS = (     'django.contrib.admin'     'django.contrib.auth'     ...snip...     'sorl.thumbnail'     'blog' )  
row_stack numcols = 4 growsize = 60*60 #60 samples/min * 60 min/hour numrows = 3*growsize #3 hours to start with private.data = npy.zeros([numrows numcols]) #alloc one big memory block rowctr = 0 while (recording):     private.data[rowctr] = npy.array([new_x new_y1 new_y2 new_y3])     rowctr += 1     if (rowctr == numrows): #full grow by another hour's worth of data         private.data = npy.row_stack([private.data npy.zeros([growsize numcols])])         numrows += growsize  row_stack 
C:\Python26\Lib\idlelib\idle.pyw "C:\file1.py" "C:\file2.py"  
from wx.lib.newevent import NewEvent  ResultEvent EVT_RESULT = NewEvent()  wx.PostEvent(handler ResultEvent(data=data))  def OnResult(event):     event.data  handler.Bind(EVT_RESULT OnResult)  wx.CallAfter event.Skip() 
if x in set(request.session['vote_set'])  if x in request.session['vote_set']  
group() frase = re.search(...).group(1)  
NSPropertyListSerialization.dataWithPropertyList_format_options_error_  : -writeToFile:atomically: 
&gt;&gt;&gt; s="This | is || token || some ||| text" &gt;&gt;&gt; items=s.split() &gt;&gt;&gt; items ['This' '|' 'is' '||' 'token' '||' 'some' '|||' 'text'] &gt;&gt;&gt; for ni in enumerate(items): ...     if "|" in i and i.count("|")!=2: ...          items[n]=i.replace("|""\|") ... &gt;&gt;&gt; print ' '.join(items) This \| is || token || some \|\|\| text  
yourname.py import os sys filename = os.path.splitext(os.path.basename(sys.argv[0]))[0] if not os.path.exists(filename):     # filename does not exists we will emulate cmd behaviour     sys.stderr.write("'%s' is not recognized as an internal or external command\noperable program or batch file." % filename)     sys.exit(9009) ret = os.system("python %s %s" % (         filename         " ".join(sys.argv[1:])         )) exit(ret)  
def home(request):     if not  logged_in:         return HttpResponseRedirect("/login?next=%s"%reverse("home"))      return HttpResponse(...)  
&gt;&gt;&gt; def listFrom(here): ...     print "[DBG] here: " + here ...  &gt;&gt;&gt; def book(here there amount): ...     print "[DBG] here: " + here + "; there: " + there + "; amount: " + str(amount) ...  &gt;&gt;&gt; book('LON' 'MAN' 8) [DBG] here: LON; there: MAN; amount: 8 &gt;&gt;&gt; input = """book('LON' 'MAN' 8)""" &gt;&gt;&gt; eval(input {"__builtins__": {} "listFrom": listFrom "book": book}) [DBG] here: LON; there: MAN; amount: 8 &gt;&gt;&gt; eval("""listFrom('LON')""" {"__builtins__": {} "listFrom": listFrom "book": book}) [DBG] here: LON  
big(lite (1 2 3))  def big(func args):     func(*args)  
copy.deepcopy 
self.SetDoubleBuffered(True) 
def grouper( page_size iterable ):     page= []     for item in iterable:         page.append( item )         if len(page) == page_size:             yield page             page= []     yield page  yield iter(page) StopIteration 
import gamelib import gamelib class ScriptObject:     def action(self):         import gamelib         print("ScriptObject.action(): calling gamelib.play_sound()")         gamelib.play_sound()  
&gt;&gt;&gt; from minimock import mock &gt;&gt;&gt; import os.path &gt;&gt;&gt; mock('os.path.isfile' returns=True)  os.path.isfile("blah") True 
config.py config.teamdata config.data['teamdata'] config /etc /usr/local 
TEMPLATE_CONTEXT_PROCESSORS 
  class_&lt;std::list&lt;Item&gt; &gt;("ItemList")     .def("__iter__" iterator&lt;std::list&lt;Item&gt; &gt;());    class Py_BaseClass : public BaseClass {   public:     std::list&lt;Item&gt; &amp; py_get_items();   }  
tril triu 
PYTHONPATH 
dir(caribou) ['__builtins__' '__doc__' '__file__' '__name__' '__package__' '__path__']  caribou __builtins__ Caribou instance dir caribou.on_key_up caribou caribou.py caribou caribou_instance = Caribou()  caribou caribou caribou_instance 
(datetime.date(2010'%d'1))%month TypeError: an integer is required 1 '1' month month_start = datetime.date(2010month1) next_month_begin datetime.timedelta datetime timedelta() 
Recon ReconFile .put .get logging logging.info 
importlib __import__ import importlib  moduleName = input('Enter module name:') importlib.import_module(moduleName)  .py moduleName package import file __init__.py __import__ pmName = input('Enter module name:') pm = __import__(pmName) print(dir(pm))  help(__import__) 
csvreader.fieldnames reader.fieldnames reader.next() reader = csv.DictReader(open(PATH_FILE)skipinitialspace=True) reader.next() headers = reader.fieldnames  
set dict myset = set(myset) 
kerneldt = np.dtype([('myintname' np.int32) ('myfloats' np.float64 9)]) arr = np.empty(dims dtype=kerneldt)  
Observer observe handler=self.log_join bot self Callback __call__ 
exec eval exec global eval exec exec def _exec class print 'one: %r' % _exec(None '"foo"' 'range' 7) print 'two: %r' % allowed_builtins['result']  one: '' two: [0 1 2 3 4 5 6]  result __dict__ exec allowed_builtins global exec 
xml.dom xml.etree.ElementTree 
to_python get_prep_value to_python CharField def to_python(self value):     value = super(LowerCaseCharField self).to_python(value)     if isinstance(value basestring):         return value.lower()     return value  MyModel.objects.filter(lccf="MiXeD")  __get__ __set__ contribute_to_class class ModifyingFieldDescriptor(object):     """ Modifies a field when set using the field's (overriden) .to_python() method. """     def __init__(self field):           self.field = field       def __get__(self instance owner=None):         if instance is None:             raise AttributeError('Can only be accessed via an instance.')           return instance.__dict__[self.field.name]     def __set__(self instance value):         instance.__dict__[self.field.name] = self.field.to_python(value)  class LowerCaseCharField(CharField):     def to_python(self value):         value = super(LowerCaseCharField self).to_python(value)         if isinstance(value basestring):             return value.lower()         return value     def contribute_to_class(self cls name):         super(LowerCaseCharField self).contribute_to_class(cls name)         setattr(cls self.name ModifyingFieldDescriptor(self))  
class A(object): pass  a = A() a.randomattr = 1  
youtube-dl.py -b  -o %%(uploader)s-%%(title)s-%%(id)s.%%(ext)s  
chr &gt;&gt;&gt; chr(10000) '?'  
localrepo.status() node1 node2 
Map class Map(dict):     """     Example:     m = Map({'first_name': 'Eduardo'} last_name='Pool' age=24 sports=['Soccer'])     """     def __init__(self *args **kwargs):         super(Map self).__init__(*args **kwargs)         for arg in args:             if isinstance(arg dict):                 for k v in arg.iteritems():                     self[k] = v          if kwargs:             for k v in kwargs.iteritems():                 self[k] = v      def __getattr__(self attr):         return self.get(attr)      def __setattr__(self key value):         self.__setitem__(key value)      def __setitem__(self key value):         super(Map self).__setitem__(key value)         self.__dict__.update({key: value})      def __delattr__(self item):         self.__delitem__(item)      def __delitem__(self key):         super(Map self).__delitem__(key)         del self.__dict__[key]  m = Map({'first_name': 'Eduardo'} last_name='Pool' age=24 sports=['Soccer']) # Add new key m.new_key = 'Hello world!' # Or m['new_key'] = 'Hello world!' print m.new_key print m['new_key'] # Update values m.new_key = 'Yay!' # Or m['new_key'] = 'Yay!' # Delete key del m.new_key # Or del m['new_key']  
error warning class User(object):     def __init__(self):         self.messages = {}      def add(self):         error = False         warning = False          #Check that name has a space         try:             if (self.name.find(' ') == -1):                 warning = True                 self.messages['email'] = {'type': 'warning'                                           'msg': 'Your name has no space.'}         except NameError:             error = True             self.messages['email'] = {'type': 'error'                                       'msg': 'You have no name.'}          #Check that e-mail has been completed         try:             #Validate e-mail address             if (isAddressValid(self.email)):                 error = True                 self.messages['email'] = {'type': 'error'                                           'msg': 'Invalid e-mail address'}         except NameError:             error = True             self.messages['email'] = {'type': 'error'                                       'msg': 'No e-mail address specified'}          return error warning  
&gt;&gt;&gt; for i in range(0x3040 0x30a0): print(chr(i) end='')  ???????????????????????????????????????????????????????????????????????????????????????????????? &gt;&gt;&gt; for i in range(0x30a0 0x3100): print(chr(i) end='')  ???????????????????????????????????????????????????????????????????????????????????????????????? &gt;&gt;&gt; for i in range(0x4e00 0x4f00): print(chr(i) end='')  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????  
class Bunch(dict):     def __init__(self d):         dict.__init__(self d)         self.__dict__.update(d)  def to_bunch(d):     r = {}     for k v in d.items():         if isinstance(v dict):             v = to_bunch(v)         r[k] = v     return Bunch(r)  to_bunch 
unittest 
__getattr__ __getattr__ class C(object):     def __init__(self):         self.foo = "hi"         self.bar = "mom"      def __getattr__(self attr):         return "hello world"  c = C() print c.foo # hi print c.bar # mom  print c.baz # hello world print c.qux # hello world  
class whatever:     animals = AnimalObject()     fruits = FruitObject()  class AnimalObject:     animals = ['cows''moose']     properties = [926]  class FruitObject:     land = ['strawberries' 'other berries']     space = ['apples' 'cherries']  
#psudo code  class myFile(object):     def __init__(self filename):         self.f = open(filename)      def read(self size=None):         return self.f.next().replace('\x1e' '').replace('some other bad character...' '')   #iterparse context = lxml.etree.iterparse(myFile('bigfile.xml' tag='RECORD')  
from subprocess import Popen PIPE proc = Popen('ls' shell=True stdout=PIPE) proc.wait() proc.communicate()  
    elif form.is_valid():       name = form.cleaned_data['name']       sender = form.cleaned_data['sender']       subject = form.cleaned_data['subject']       message = form.cleaned_data['message']  
class Foo:    def __init__(self foo bar):        self.foo self.bar = foo bar  class Thing:    def __init__(self **kwargs):        self.something = kwargs['something']        #..  t = Thing(something=1)  class Thing:    def __init__(self **kwargs):        self.__dict__.update(kwargs)  t = Thing(a=1 b=2 c=3) print t.a t.b t.c # prints 1 2 3  class Thing:     keywords = 'foo' 'bar' 'snafu' 'fnord'     def __init__(self **kwargs):         for kw in self.keywords:             setattr(self kw kwargs[kw])  
from django.db.models import Count Tag.objects.annotate(img_count=Count('image')).order_by('img_count')  
from django.conf.urls.defaults import *  from django.contrib import admin admin.autodiscover()  urlpatterns = patterns(''     (r'^polls/' include('mysite.polls.urls'))     (r'^admin/' include(admin.site.urls)) )  from django.conf.urls.defaults import *  urlpatterns = patterns('mysite.polls.views'     (r'^$' 'index')     (r'^(?P&lt;poll_id&gt;\d+)/$' 'detail')     (r'^(?P&lt;poll_id&gt;\d+)/results/$' 'results')     (r'^(?P&lt;poll_id&gt;\d+)/vote/$' 'vote') )  
follow_redirects=False response = urlfetch.fetch(your_url follow_redirects=False) location = response.headers['Location']  
lstrip() exec 
/Library/Frameworks/Python.frameworks +universal /opt/local/etc/macports/variants.conf /opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin /opt/local/bin sudo port selfupdate  # ensure you have the latest ports file information sudo port install py26-libxml2 py26-twisted py26-openssl py26-simplejson py26-setuptools python_select sudo python_select python26  # optionally make /opt/local/bin/python -&gt; python2.6 sudo /opt/local/bin/easy_install-2.6 scrapy # or install manually cd /path/to/scrapy sudo /opt/local/bin/python2.6 setup.py install  /opt/local/etc/macports/variants.conf +bash_completion +quartz +ssl +no_x11 +no_neon +no_tkinter +universal +libyaml -scientific  $ ls -l /opt/local/bin/python2.6 lrwxr-xr-x  1 root  wheel  73 Oct 28 20:25 /opt/local/bin/python2.6@ -&gt; /opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6 $ file /opt/local/bin/python2.6 /opt/local/bin/python2.6: Mach-O universal binary with 2 architectures /opt/local/bin/python2.6 (for architecture x86_64): Mach-O 64-bit executable x86_64 /opt/local/bin/python2.6 (for architecture i386):   Mach-O executable i386  +universal $ echo $PATH /opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin:/opt/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin ...  ~/.bash_profile python python_select $ sudo rm -r /opt/local  
__init__.py subdir import os import sys  sys.path.append(os.path.join(os.path.dirname(__file__) 'subdir'))  fix_path.py main.py import fix_path __init__.py __init__.py __init__.py __all__ 
str repr str repr repr repr &lt;blah&gt; %s str %r repr __str__ __repr__ class Foo:    def __init__(self foo):     self.foo = foo    def __eq__(self other):     """Implements ==."""     return self.foo == other.foo    def __repr__(self):     # if you eval the return value of this function     # you'll get another Foo instance that's == to self     return "Foo(%r)" % self.foo  
__init__ __init__ __init__ 
sys.stdin sys.stdin sys.stdin file1 = sys.argv[1].open().read() + sys.stdin.read() 
import urllib2 url="http://www.test.com/page.html" page=urllib2.urlopen(url) data=page.read() for item in data.split("&lt;/h3&gt;"):     if "&lt;h3&gt;" in item:          print item.split("&lt;h3&gt;")[1]  
for src in universe:    for dst in universe:       if src == dst:          continue       ...  
FTP constructor timeout class ftplib.FTP([host[ user[ passwd[ acct[ timeout]]]]]) socket.setdefaulttimeout(timeout) 
lib/site-packages/ 
 ((move src tmp dst (- num 1))   (move src dst tmp 1)   (move tmp dst src (- num 1)))  ((? ()   (move src tmp dst (- num 1))   (move src dst tmp 1)   (move tmp dst src (- num 1))))  (begin    (move ...)    (move ...)    (move ...)    ...)  ((move ...) (move ...) (move ...))  (op param1 param2) #&lt;void&gt;; arguments were: #&lt;void&gt; #&lt;void&gt; 
__main__.__file__ import __main__ as main print hasattr(main '__file__')  python -c python -m 
import math print(math.ceil(4.2))  
Post.objects.filter(author=user)  user Post.objects.filter(author__in=users)  
return return None def add(self):      #1 -- VALIDATE EMAIL ADDRESS     #Check that e-mail has been completed     try:         #Validate if e-mail address is in correct format         if (isAddressValid(self.email) == 0):             self.errors['email'] = 'You have entered an invalid e-mail address';             return False      except NameError:         self.errors['email'] = 'Please enter your e-mail'         return False      return True  
from matplotlib import mlab psdResults = mlab.psd(inputData NFFT=512 Fs=sampleRate window=blackman)  
conda 
isFloat 
help(add) def add(self):     """Create a new user.     Line 2 of comment...     And so on...      """  
true false setDTR() DTR true import serial from time import sleep  conn = serial.Serial('/dev/ttyS0'                      baudrate=9600                      bytesize=serial.EIGHTBITS                      parity=serial.PARITY_NONE                      stopbits=serial.STOPBITS_ONE                      timeout=1                      xonxoff=0                      rtscts=0                      ) # Wake Modem conn.setDTR(True) sleep(3) conn.setDTR(False)  sleep(5)  # Start talking conn.setDTR(True) try:     while True:         conn.write('AT'+chr(13));         print conn.readline() # readlines() will probably never return. finally:     conn.close()  socket 
import scipy X = scipy.rand(941) Y = X.repeat(40962)  X import scipy X = scipy.rand(94) Y = X.reshape(941).repeat(40962)  
position: absolute position: relative 
mod_wsgi 
import re  token_pattern = r""" (?P&lt;identifier&gt;[a-zA-Z_][a-zA-Z0-9_]*) |(?P&lt;integer&gt;[0-9]+) |(?P&lt;dot&gt;\.) |(?P&lt;open_variable&gt;[$][{]) |(?P&lt;open_curly&gt;[{]) |(?P&lt;close_curly&gt;[}]) |(?P&lt;newline&gt;\n) |(?P&lt;whitespace&gt;\s+) |(?P&lt;equals&gt;[=]) |(?P&lt;slash&gt;[/]) """  token_re = re.compile(token_pattern re.VERBOSE)  class TokenizerException(Exception): pass  def tokenize(text):     pos = 0     while True:         m = token_re.match(text pos)         if not m: break         pos = m.end()         tokname = m.lastgroup         tokvalue = m.group(tokname)         yield tokname tokvalue     if pos != len(text):         raise TokenizerException('tokenizer stopped at pos %r of %r' % (             pos len(text)))  stuff = r'property.${general.name}.ip = ${general.ip}' stuff2 = r''' general {   name = myname   ip = 127.0.0.1 } '''  print ' stuff '.center(60 '=') for tok in tokenize(stuff):     print tok  print ' stuff2 '.center(60 '=') for tok in tokenize(stuff2):     print tok  ========================== stuff =========================== ('identifier' 'property') ('dot' '.') ('open_variable' '${') ('identifier' 'general') ('dot' '.') ('identifier' 'name') ('close_curly' '}') ('dot' '.') ('identifier' 'ip') ('whitespace' ' ') ('equals' '=') ('whitespace' ' ') ('open_variable' '${') ('identifier' 'general') ('dot' '.') ('identifier' 'ip') ('close_curly' '}') ========================== stuff2 ========================== ('newline' '\n') ('identifier' 'general') ('whitespace' ' ') ('open_curly' '{') ('newline' '\n') ('whitespace' '  ') ('identifier' 'name') ('whitespace' ' ') ('equals' '=') ('whitespace' ' ') ('identifier' 'myname') ('newline' '\n') ('whitespace' '  ') ('identifier' 'ip') ('whitespace' ' ') ('equals' '=') ('whitespace' ' ') ('integer' '127') ('dot' '.') ('integer' '0') ('dot' '.') ('integer' '0') ('dot' '.') ('integer' '1') ('newline' '\n') ('close_curly' '}') ('newline' '\n')  
stderr ffmpeg.stderr.read() .communicate stderr=PIPE &gt;/dev/null nulfp = open(os.devnull "w") … … = subprocess.Popen(… stderr=nulfp.fileno())  nulfp stderr 
#!/usr/bin/env python # -*- coding: UTF-8 -*- # multiproc_sums.py """A program that reads integer values from a CSV file and writes out their sums to another CSV file using multiple processes if desired. """  import csv import multiprocessing import optparse import sys  NUM_PROCS = multiprocessing.cpu_count()  def make_cli_parser():     """Make the command line interface parser."""     usage = "\n\n".join(["python %prog INPUT_CSV OUTPUT_CSV"             __doc__             """ ARGUMENTS:     INPUT_CSV: an input CSV file with rows of numbers     OUTPUT_CSV: an output file that will contain the sums\ """])     cli_parser = optparse.OptionParser(usage)     cli_parser.add_option('-n' '--numprocs' type='int'             default=NUM_PROCS             help="Number of processes to launch [DEFAULT: %default]")     return cli_parser  class CSVWorker(object):     def __init__(self numprocs infile outfile):         self.numprocs = numprocs         self.infile = open(infile)         self.outfile = outfile         self.in_csvfile = csv.reader(self.infile)         self.inq = multiprocessing.Queue()         self.outq = multiprocessing.Queue()          self.pin = multiprocessing.Process(target=self.parse_input_csv args=())         self.pout = multiprocessing.Process(target=self.write_output_csv args=())         self.ps = [ multiprocessing.Process(target=self.sum_row args=())                         for i in range(self.numprocs)]          self.pin.start()         self.pout.start()         for p in self.ps:             p.start()          self.pin.join()         i = 0         for p in self.ps:             p.join()             print "Done" i             i += 1          self.pout.join()         self.infile.close()      def parse_input_csv(self):             """Parses the input CSV and yields tuples with the index of the row             as the first element and the integers of the row as the second             element.              The index is zero-index based.              The data is then sent over inqueue for the workers to do their             thing.  At the end the input process sends a 'STOP' message for each             worker.             """             for i row in enumerate(self.in_csvfile):                 row = [ int(entry) for entry in row ]                 self.inq.put( (i row) )              for i in range(self.numprocs):                 self.inq.put("STOP")      def sum_row(self):         """         Workers. Consume inq and produce answers on outq         """         tot = 0         for i row in iter(self.inq.get "STOP"):                 self.outq.put( (i sum(row)) )         self.outq.put("STOP")      def write_output_csv(self):         """         Open outgoing csv file then start reading outq for answers         Since I chose to make sure output was synchronized to the input there         is some extra goodies to do that.          Obviously your input has the original row number so this is not         required.         """         cur = 0         stop = 0         buffer = {}         # For some reason csv.writer works badly across processes so open/close         # and use it all in the same process or else you'll have the last         # several rows missing         outfile = open(self.outfile "w")         self.out_csvfile = csv.writer(outfile)          #Keep running until we see numprocs STOP messages         for works in range(self.numprocs):             for i val in iter(self.outq.get "STOP"):                 # verify rows are in order if not save in buffer                 if i != cur:                     buffer[i] = val                 else:                     #if yes are write it out and make sure no waiting rows exist                     self.out_csvfile.writerow( [i val] )                     cur += 1                     while cur in buffer:                         self.out_csvfile.writerow([ cur buffer[cur] ])                         del buffer[cur]                         cur += 1          outfile.close()  def main(argv):     cli_parser = make_cli_parser()     opts args = cli_parser.parse_args(argv)     if len(args) != 2:         cli_parser.error("Please provide an input file and output file.")      c = CSVWorker(opts.numprocs args[0] args[1])  if __name__ == '__main__':     main(sys.argv[1:])  
from lxml import etree data = """  &lt;svg     xmlns:dc="http://purl.org/dc/elements/1.1/"     xmlns:cc="http://web.resource.org/cc/"     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"     xmlns:svg="http://www.w3.org/2000/svg"     xmlns="http://www.w3.org/2000/svg"     xmlns:xlink="http://www.w3.org/1999/xlink"     xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"     xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"     width="50"     height="25"     id="svg2"     sodipodi:version="0.32"     inkscape:version="0.45.1"     version="1.0"     sodipodi:docbase="/home/tcooksey/Projects/qt-4.4/demos/embedded/embeddedsvgviewer/files"     sodipodi:docname="v-slider-handle.svg"     inkscape:output_extension="org.inkscape.output.svg.inkscape"&gt;     &lt;text        xml:space="preserve"        style="font-size:14.19380379px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:DejaVu Sans Mono;-inkscape-font-specification:DejaVu Sans Mono"        x="109.38555"        y="407.02847"        id="libcode-00"        sodipodi:linespacing="125%"        inkscape:label="#text4638"&gt;&lt;tspan          sodipodi:role="line"          id="tspan4640"          x="109.38555"          y="407.02847"&gt;12345678&lt;/tspan&gt;&lt;/text&gt;     &lt;/svg&gt; """  nsmap = {     'sodipodi': 'http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd'     'cc': 'http://web.resource.org/cc/'     'svg': 'http://www.w3.org/2000/svg'     'dc': 'http://purl.org/dc/elements/1.1/'     'xlink': 'http://www.w3.org/1999/xlink'     'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'     'inkscape': 'http://www.inkscape.org/namespaces/inkscape'     }   data = etree.XML(data)  # All svg text elements &gt;&gt;&gt; data.xpath('//svg:text'namespaces=nsmap) [&lt;Element {http://www.w3.org/2000/svg}text at b7cfc9dc&gt;] # All svg text elements with id="libcode-00" &gt;&gt;&gt; data.xpath('//svg:text[@id="libcode-00"]'namespaces=nsmap) [&lt;Element {http://www.w3.org/2000/svg}text at b7cfc9dc&gt;] # TSPAN child elements of text elements with id="libcode-00" &gt;&gt;&gt; data.xpath('//svg:text[@id="libcode-00"]/svg:tspan'namespaces=nsmap) [&lt;Element {http://www.w3.org/2000/svg}tspan at b7cfc964&gt;] # All text elements with id starting with "libcode" &gt;&gt;&gt; data.xpath('//svg:text[fn:startswith(@id"libcode")]'namespaces=nsmap) [&lt;Element {http://www.w3.org/2000/svg}text at b7cfcc34&gt;] # Iterate text elements access tspan child &gt;&gt;&gt; for elem in data.xpath('//svg:text[fn:startswith(@id"libcode")]'namespaces=nsmap): ...     tp = elem.xpath('./svg:tspan'namespaces=nsmap)[0] ...     tp.text = "new text"  open("newfile.svg""w").write(etree.tostring(data))  
class def 
import codecs  with codecs.open(file "r" "utf-8-sig") as f:     a b c= map(int f.readline().split(""))  codecs.open 
c=1 while [[ -s file.txt ]] ; # Stop when file.txt has no more lines do     echo "Python script called $c times"     python script.py # Uses file.txt and removes lines from it     c=$(($c + 1)) done  
smartindent nosmartindent smartindent nosmartindent :set 
import html html.unescape('Suzy &amp;amp; John') # 'Suzy &amp; John'  html.unescape('&amp;quot;') # '"'  import html.parser     html.parser.HTMLParser().unescape('Suzy &amp;amp; John')  import HTMLParser HTMLParser.HTMLParser().unescape('Suzy &amp;amp; John')  
/detail/(\d) class DetailHandler(webapp.RequestHandler):     def get(self detail_id):       # put your code here detail_id contains the passed variable  def main():   # Note the wildcard placeholder in the url matcher   application = webapp.WSGIApplication([('/details/(.*)' DetailHandler)]   wsgiref.handlers.CGIHandler().run(application)  Index.py class IndexHandler(webapp.RequestHandler):     def get(self):       # put your handler code here  def main():   # Note the wildcard without parens   application = webapp.WSGIApplication([('/.*' IndexHandler)]   wsgiref.handlers.CGIHandler().run(application)  
from xyz import * &gt;&gt;&gt; from math import * &gt;&gt;&gt;pi 3.141592653589793 &gt;&gt;&gt;sin(pi/2) &gt;&gt;&gt;1.0  import * &gt;&gt;&gt;from math import pi &gt;&gt;&gt;pi &gt;&gt;&gt;3.141592653589793 &gt;&gt;&gt; sin(pi/2) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; NameError: name 'sin' is not defined    &gt;&gt;&gt;import math   &gt;&gt;&gt;math.pi   &gt;&gt;&gt;3.141592653589793   etc..     &gt;&gt;&gt;import math as m  #bad example math being so short and standard...   &gt;&gt;&gt;m.pi   &gt;&gt;&gt;3.141592653589793   etc..  from xyz import * __all__ urllib urllib.request urllib.errors urllib.response from urllib import * from urllib.request import * import * import * 
        try:             project.model.connectCentral()  
hggit = 
Customer.objects.get(name = request.POST['name']).delete()  action 'delete' &lt;form method="POST" action="/customer/{{ action }}/"&gt;  
__init__.py __init__.py __init__.py 
pickle 
StopIteration next(x for x in the_iterable if x &gt; 3)  default_value None next((x for x in the_iterable if x &gt; 3) default_value)  next next .next() StopIteration .next() next itertools for...: break try/except StopIteration 
import locale setlocale(LC_ALL 'de') x = locale.format('%.2f' 123) setlocale(LC_ALL '')  from babel.numbers import format_decimal x = format_decimal(123 format='#0.00' locale='de')  
&gt;&gt;&gt; from itertools import groupby &gt;&gt;&gt; from operator import itemgetter &gt;&gt;&gt; data = [ 1 456 10 15161718 22 25262728] &gt;&gt;&gt; for k g in groupby(enumerate(data) lambda (i x): i-x): ...     print map(itemgetter(1) g) ... [1] [4 5 6] [10] [15 16 17 18] [22] [25 26 27 28]  
res test 
import ssl import socket from httplib2 import has_timeout import httplib2 import socks   class CertificateValidationError(httplib2.HttpLib2Error):     pass   def validating_sever_factory(ca_cert_file):     # we need to define a closure here because we don't control     # the arguments this class is instantiated with     class ValidatingHTTPSConnection(httplib2.HTTPSConnectionWithTimeout):          def connect(self):             # begin copypasta from HTTPSConnectionWithTimeout             "Connect to a host on a given (SSL) port."              if self.proxy_info and self.proxy_info.isgood():                 sock = socks.socksocket(socket.AF_INET socket.SOCK_STREAM)                 sock.setproxy(*self.proxy_info.astuple())             else:                 sock = socket.socket(socket.AF_INET socket.SOCK_STREAM)              if has_timeout(self.timeout):                 sock.settimeout(self.timeout)             sock.connect((self.host self.port))             # end copypasta               try:                 self.sock = ssl.wrap_socket(sock                             self.key_file                             self.cert_file                             cert_reqs=ssl.CERT_REQUIRED                             ca_certs=ca_cert_file                             )             except ssl.SSLError:                 # we have to capture the exception here and raise later because                  # httplib2 tries to ignore exceptions on connect                 import sys                 self._exc_info = sys.exc_info()                 raise             else:                 self._exc_info = None                  # this might be redundant                 server_cert = self.sock.getpeercert()                 if not server_cert:                     raise CertificateValidationError(repr(server_cert))          def getresponse(self):             if not self._exc_info:                 return httplib2.HTTPSConnectionWithTimeout.getresponse(self)             else:                 raise self._exc_info[1] None self._exc_info[2]     return ValidatingHTTPSConnection   def do_request(url         method='GET'         body=None         headers=None         keyfile=None         certfile=None         ca_certs=None         proxy_info=None         timeout=30):     """     makes an http/https request with optional client certificate and server     certificate verification.     returns response content     """     kwargs = {}     h = httplib2.Http(proxy_info=proxy_info timeout=timeout)     is_ssl = url.startswith('https')     if is_ssl and ca_certs:         kwargs['connection_type'] = validating_sever_factory(ca_certs)      if is_ssl and keyfile and certfile:         h.add_certificate(keyfile certfile '')     return h.request(url method=method body=body headers=headers **kwargs)  
txt read_node += txt read_node &gt;&gt;&gt; def a(): ...  x = "" ...  def b(): ...   x += "X" ...  b() ...  print x ...  &gt;&gt;&gt; a() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt;   File "&lt;stdin&gt;" line 5 in a   File "&lt;stdin&gt;" line 4 in b UnboundLocalError: local variable 'x' referenced before assignment &gt;&gt;&gt;  &gt;&gt;&gt;  &gt;&gt;&gt; def a(): ...  x = [] ...  def b(): ...   x.append("X") ...  b() ...  print "".join(x) ...  &gt;&gt;&gt; a() X  "".join(...) str += ... 
/(?:(?:@\S+\s+)+|^)@\S+/g  @name RT http://twitter.com/name 
&gt;&gt;&gt; mylist='d.complex.1\n24\n25\n67\n123\n764\nd.complex.200\n23\n54\n35\n64\nd.complex.302'.split("\n") &gt;&gt;&gt; res=[] &gt;&gt;&gt; for line in mylist: ...  if line.startswith("d.complex"): ...   res.append([]) ...  res[-1].append(line) ...  &gt;&gt;&gt; res [['d.complex.1' '24' '25' '67' '123' '764'] ['d.complex.200' '23' '54' '35' '64'] ['d.complex.302']]  
img = Image.open(GIF_FILENAME) rgbimg = img.convert('RGB') for i in range(5):     print rgbimg.getpixel((i 0))  
def func(self foo):     return any(foo.boolfunc() for foo in self.list)  
def file_loader(f):     file_dict = {}     current_set = None     for line in f:         if line.startswith('d.complex'):             file_dict[line] = current_set = {}             continue          if current_set is not None:             current_set[line] = current_set.get(line 0)      return file_dict  def count_number(file_dict num):     count = 0     for set_name number_set in file_dict.iteritems():         count += number_set.get(num 0)      return count  s = """d.complex.1 10 11 12 10 11 12"""  file_dict = file_loader(s.split("\n")) print file_dict print count_number(file_dict '10')  {'d.complex.1': {'11': 2 '10': 2 '12': 2}} 2  
start_iter.forward_search found match_start match_end search_str =  self.text_to_find.get_text() start_iter =  textbuffer.get_start_iter() # don't need these lines anymore #match_start = textbuffer.get_start_iter()  #match_end =   textbuffer.get_end_iter()  found =       start_iter.forward_search(search_str0 None)  if found:    match_startmatch_end = found #add this line to get match_start and match_end    textbuffer.select_range(match_startmatch_end)  
list_2 list_1 = ['a' 'big' 'list'] list_2 = ['another' 'big' 'list']  target_set = set(list_2)  for a in list_1:     if a in target_set:          print a  big list  list_2 
&gt;&gt;&gt; results = [] # an empty list &gt;&gt;&gt; item = results[0] # Raises an IndexError because there is nothing in the list  item = db.GqlQuery("SELECT * FROM Item WHERE CSIN = :1" CSIN).get()  item None 
from matplotlib import pyplot  while True:   fig = pyplot.figure()   ax = fig.add_subplot(111)   ax.plot(xy)   ax.legend(legendStrings loc = 'best')   fig.savefig('himom.png')   # etc....  
gzip import gzip import io  StringIO io response = urlopen("https://example.com/gzipped-ressource") buffer = io.BytesIO(response.read()) # Use StringIO.StringIO(response.read()) in Python 2 gzipped_file = gzip.GzipFile(fileobj=buffer) decoded = gzipped_file.read() content = decoded.decode("utf-8") # Replace utf-8 with the source encoding of your requested resource  gzip GZipFile link .encode() html = urllib.urlopen(link).read() unicode_str = html.decode(&lt;source encoding&gt;) encoded_str = unicode_str.encode("utf8")  html = '\xa0' encoded_str = html.encode("utf8")  UnicodeDecodeError: 'ascii' codec can't decode byte 0xa0 in position 0: ordinal not in range(128)  html = '\xa0' decoded_str = html.decode("windows-1252") encoded_str = decoded_str.encode("utf8")  .urlopen().read() .encode() self.response.out.write(html) read() .decode() 
for i grp in enumerate((s[:3]s[3:6]s[6:])):     print "'%s'"%(grp)      total = calc_total(grp)     # more code that needs to happen every time      if i == 0:         # code that needs to happen only the first time     elif i == 1:         # code that needs to happen only the second time  == enumerate 
__get__ def dec_check(f):   def deco(self):     print 'In deco'     f(self)   return deco  class bar(object):   @dec_check   def foo(self):     print 'in bar.foo'  b = bar() b.foo()  In deco in bar.foo  
maketrans import string '(123) 456-7890'.translate(string.maketrans('' '') '-() ')  
with open(thefile 'rb') as f: data = f.read() struct.unpack 
def class_decorator(cls):    for name method in cls.__dict__.iteritems():         if hasattr(method "use_class"):             # do something with the method and class             print name cls    return cls  def method_decorator(view):     # mark the method as something that requires view's class     view.use_class = True     return view  @class_decorator class ModelA(object):     @method_decorator     def a_method(self):         # do some stuff         pass  
from lxml import etree root = etree.fromstring("...your xml...")  el = root.xpath("//div[text() = 'the string']/preceding-sibling::*[9]")  
&lt;ul&gt; % for prompt in whateveryoucalledit.values():   &lt;li&gt;${prompt}&lt;/li&gt; % endfor &lt;/ul&gt;  whateveryoucalledit 
Programme programme 
class GpsPoint(object):     """A class for representing gps coordinates"""     def __init__(self x y z):         self.x = x         self.y = y         self.z = z     def __add__(self other):         try:             return GpsPoint(self.x + other.x self.y + other.y self.z + other.z)         except AttributeError:             return GpsPoint(self.x + other self.y + other self.z + other)     def __radd__(self other):         try:             return GpsPoint(self.x + other.x self.y + other.y self.z + other.z)         except AttributeError:             return GpsPoint(self.x + other self.y + other self.z + other)     def __str__(self):         return "%d %d %d" % (self.x self.y self.z)  
special_cats = ['cat1''cat2''cat3']  def generic_cat_view(request cat_slug):     if cat_slug in special_cats:         return special_view(request cat_slug)     else:         #generic view  
xcode-select --install  brew update brew install libxml2 libxslt  /Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/ Downloads sh setuptools-X.Y.Z.egg site-packages easy_install 
def func(xy):     return cos(x) + cos(y)  def func2(y a b):     return integrate.quad(func a b args=(y))[0]  print integrate.quad(func2 -pi/2 pi/2 args=(-pi/2 pi/2))[0]  print integrate.dblquad(func -pi/2 pi/2 lambda x:-pi/2 lambda x:pi/2)[0]  
a/b a/b a b 3.1 1/k range 
menu_items = {'menu_items': [{'href': '/' 'name': 'Home'}                              {'href': '/cart' 'name': 'Cart'}]               } render('Views/menu.html' self {'menu_items': menu_items})  menu_items = [{'href': '/' 'name': 'Home'} {'href': '/cart' 'name': 'Cart' }]  
Profile._meta.fields name Profile._meta.get_fields_with_model() (field model) model None Profile 
fout fout = file('test.out''r+b')  
&gt;&gt;&gt; test = "somestring 363 1 46 17363 1 34 17401 3 8 14"  &gt;&gt;&gt; from pyparsing import * &gt;&gt;&gt; integer = Word(nums) &gt;&gt;&gt; patt = Word(alphas) + OneOrMore(Group(integer*4 + Suppress('')))  &gt;&gt;&gt; patt.parseString(test).asList() ['somestring' ['363' '1' '46' '17'] ['363' '1' '34' '17'] ['401' '3' '8' '14']]  Word(nums) &gt;&gt;&gt; integer = Word(nums).setParseAction(lambda tokens:int(tokens[0]))  &gt;&gt;&gt; patt = Word(alphas) + OneOrMore(Group(integer*4 + Suppress(''))) &gt;&gt;&gt; patt.parseString(test).asList() ['somestring' [363 1 46 17] [363 1 34 17] [401 3 8 14]]  &gt;&gt;&gt; patt = Word(alphas)("desc") + OneOrMore(Group(integer*4 + Suppress('')))("numgroups")  &gt;&gt;&gt; patt.parseString(test).asList() ['somestring' [363 1 46 17] [363 1 34 17] [401 3 8 14]]  &gt;&gt;&gt; print patt.parseString(test).dump() ['somestring' [363 1 46 17] [363 1 34 17] [401 3 8 14]] - desc: somestring - numgroups: [[363 1 46 17] [363 1 34 17] [401 3 8 14]]  &gt;&gt;&gt; res = patt.parseString(test) &gt;&gt;&gt; print res.desc somestring &gt;&gt;&gt; print res.numgroups [[363 1 46 17] [363 1 34 17] [401 3 8 14]] &gt;&gt;&gt; for ng in res.numgroups: print sum(ng) ... 427 415 426  test = "somestring 363 1 46 17363 1 34 17401 3 8 14" from pyparsing import * integer = Word(nums).setParseAction(lambda tokens:int(tokens[0])) patt = Word(alphas)("desc") + \     OneOrMore(Group(integer*4 + Suppress('')))("numgroups")  print patt.parseString(test).asList() print patt.parseString(test).dump() res = patt.parseString(test) print res.desc print res.numgroups for ng in res.numgroups:      print sum(ng)  
print 'Hello dear user your name is %(first_name)s %(last_name)s' % params  
(button|submit|cancel) ?: (?: &gt;&gt;&gt; re.findall('&lt;html:(?:button|submit|cancel)[\s\S]*?&lt;/html:(?:button|submit|cancel)&gt;'TheHTMLWhichShouldntParseWithRegex) ['&lt;html:button ...&gt;&lt;/html:button&gt;' '&lt;html:submit ...&gt;&lt;/html:submit&gt;']  
s.split(None 1)[-1]  
def complex_file_to_dict(filename):     out = dict()     for line in open(filename):         line = line.strip()         if line.startswith('d.complex'):             name = line             out[name] = set()         elif line:             out[name].add(line)      return out  res_1 = complex_file_to_dict('file1.txt') res_2 = complex_file_to_dict('file2.txt')  for k1 set_1 in res_1.iteritems():     for k2 set_2 in res_2.iteritems():       print k1       print k2       for v in set_1 - set_2:         print v       print  for k1 set_1 in res_1.iteritems():     for k2 set_2 in res_2.iteritems():       print k1       print k2       l = [v for v in set_1 - set_2]       print '(' + ' '.join(l) + ')'  d.complex.1 d.complex.1 (1 65 48) d.complex.1 d.complex.10 (1 65 48) d.complex.10 d.complex.1 (46 109 192) d.complex.10 d.complex.10 (109 21)  
from __future__ import division from pyparsing import (Literal CaselessLiteral Word Combine Group Optional                        ZeroOrMore Forward nums alphas oneOf) import math import operator  __author__ = 'Paul McGuire' __version__ = '$Revision: 0.0 $' __date__ = '$Date: 2009-03-20 $' __source__ = '''http://pyparsing.wikispaces.com/file/view/fourFn.py http://pyparsing.wikispaces.com/message/view/home/15549426 ''' __note__ = ''' All I've done is rewrap Paul McGuire's fourFn.py as a class so I can use it more easily in other places. '''   class NumericStringParser(object):     '''     Most of this code comes from the fourFn.py pyparsing example      '''      def pushFirst(self strg loc toks):         self.exprStack.append(toks[0])      def pushUMinus(self strg loc toks):         if toks and toks[0] == '-':             self.exprStack.append('unary -')      def __init__(self):         """         expop   :: '^'         multop  :: '*' | '/'         addop   :: '+' | '-'         integer :: ['+' | '-'] '0'..'9'+         atom    :: PI | E | real | fn '(' expr ')' | '(' expr ')'         factor  :: atom [ expop factor ]*         term    :: factor [ multop factor ]*         expr    :: term [ addop term ]*         """         point = Literal(".")         e = CaselessLiteral("E")         fnumber = Combine(Word("+-" + nums nums) +                           Optional(point + Optional(Word(nums))) +                           Optional(e + Word("+-" + nums nums)))         ident = Word(alphas alphas + nums + "_$")         plus = Literal("+")         minus = Literal("-")         mult = Literal("*")         div = Literal("/")         lpar = Literal("(").suppress()         rpar = Literal(")").suppress()         addop = plus | minus         multop = mult | div         expop = Literal("^")         pi = CaselessLiteral("PI")         expr = Forward()         atom = ((Optional(oneOf("- +")) +                  (ident + lpar + expr + rpar | pi | e | fnumber).setParseAction(self.pushFirst))                 | Optional(oneOf("- +")) + Group(lpar + expr + rpar)                 ).setParseAction(self.pushUMinus)         # by defining exponentiation as "atom [ ^ factor ]..." instead of         # "atom [ ^ atom ]..." we get right-to-left exponents instead of left-to-right         # that is 2^3^2 = 2^(3^2) not (2^3)^2.         factor = Forward()         factor &lt;&lt; atom + \             ZeroOrMore((expop + factor).setParseAction(self.pushFirst))         term = factor + \             ZeroOrMore((multop + factor).setParseAction(self.pushFirst))         expr &lt;&lt; term + \             ZeroOrMore((addop + term).setParseAction(self.pushFirst))         # addop_term = ( addop + term ).setParseAction( self.pushFirst )         # general_term = term + ZeroOrMore( addop_term ) | OneOrMore( addop_term)         # expr &lt;&lt;  general_term         self.bnf = expr         # map operator symbols to corresponding arithmetic operations         epsilon = 1e-12         self.opn = {"+": operator.add                     "-": operator.sub                     "*": operator.mul                     "/": operator.truediv                     "^": operator.pow}         self.fn = {"sin": math.sin                    "cos": math.cos                    "tan": math.tan                    "exp": math.exp                    "abs": abs                    "trunc": lambda a: int(a)                    "round": round                    "sgn": lambda a: abs(a) &gt; epsilon and cmp(a 0) or 0}      def evaluateStack(self s):         op = s.pop()         if op == 'unary -':             return -self.evaluateStack(s)         if op in "+-*/^":             op2 = self.evaluateStack(s)             op1 = self.evaluateStack(s)             return self.opn[op](op1 op2)         elif op == "PI":             return math.pi  # 3.1415926535         elif op == "E":             return math.e  # 2.718281828         elif op in self.fn:             return self.fn[op](self.evaluateStack(s))         elif op[0].isalpha():             return 0         else:             return float(op)      def eval(self num_string parseAll=True):         self.exprStack = []         results = self.bnf.parseString(num_string parseAll)         val = self.evaluateStack(self.exprStack[:])         return val  nsp = NumericStringParser() result = nsp.eval('2^4') print(result) # 16.0  result = nsp.eval('exp(2^4)') print(result) # 8886110.520507872  
    row = ['0x14' '0xb6' '0xa1' '0x0' '0xa1' '0x0']     as_hex = ''.join(byte[2:].zfill(2) for byte in row)   # as_hex = '14b6a100a100'     bytes = buffer(as_hex.decode('hex'))      cur.execute("INSERT INTO mylog (binaryfield) VALUES (%(bytes)s)"                  {'bytes': bytes})      cur.execute("SELECT binaryfield FROM mylog")     res = cur.fetchone()     my_data = str(res[4:]).encode('hex')  integers 
def parsefile(filename):   ret = {}   cur = None   for line in ( x.strip() for x in open(filename'r')):     if line.startswith('d.complex'):       cur = set()       ret[line] = cur     if not cur or not line.isdigit():       continue     cur.add(int(line))   return ret  def compareStructures(firstsecond):   # Iterate through keyvalue pairs in first   for firstcmplx firstmembers in first.iteritems():     # Iterate through keyvalue pairs in second     for secondcmplx secondmembers in second.iteritems():       notinsecond = firstmembers- secondmembers       if notinsecond:         # There are items in first that aren't in second         print firstcmplx         print secondcmplx         print "\n".join([ str(x) for x in notinsecond])  first = parsefile("myFirstFile.txt") second = parsefile("mySecondFile.txt")  compareStructures(firstsecond)  
itertools.dropwhile False enumerate itertools lambda lambda x: not pred (x) pred def negate(f):     def wrapped(x):         return not f(x)     return wrapped  def odd(x): return x % 2 == 1 itertools.dropwhile(negate(odd) [241]).next() # =&gt; 1  StopIteration 
try urllib.urlopen("http://&lt;path to images&gt;/%s/%sPR-ITPM.jpg" % (folder sku)):         urllib.URLopener().retrieve("http://&lt;path to images&gt;/%s/%sPR-ITPM.jpg" % (folder sku) "%sPR-ITPM.jpg" % (sku))         found_url = True     except:         found_url = False  try:     urllib.urlopen("http://&lt;path to images&gt;/%s/%sPR-ITPM.jpg" % (folder sku)):     urllib.URLopener().retrieve("http://&lt;path to images&gt;/%s/%sPR-ITPM.jpg" % (folder sku) "%sPR-ITPM.jpg" % (sku))     found_url = True except:     found_url = False  except: 
if __name__ == "__main__" import doctest from model import car from tools import tool  doctest.testmod(car) doctest.testmod(tool)  import unittest import doctest  modules = ("model.car"             "tools.tool")  suite = unittest.TestSuite() for mod in modules:     suite.addTest(doctest.DocTestSuite(mod)) runner = unittest.TextTestRunner() runner.run(suite)  easy_install nose nosetests --with-doctest # done :-)  from x import * import x from x import y 
xml.etree.cElementTree import xml.etree.cElementTree as etree  with open(xml_file_path) as xml_file:     tree = etree.iterparse(xml_file)     for items in tree:         for item in items:             print item.text  &gt;&gt;&gt; x="""&lt;?xml version="1.0"?&gt; &lt;test&gt;     &lt;items&gt;         &lt;item&gt;item 1&lt;/item&gt;         &lt;item&gt;item 2&lt;/item&gt;     &lt;/items&gt; &lt;/test&gt;""" &gt;&gt;&gt; x '&lt;?xml version="1.0"?&gt;\n&lt;test&gt;\n    &lt;items&gt;\n        &lt;item&gt;item 1&lt;/item&gt;\n        &lt;item&gt;item 2&lt;/item&gt;\n    &lt;/items&gt;\n&lt;/test&gt;' &gt;&gt;&gt; import xml.etree.cElementTree as etree &gt;&gt;&gt; tree = etree.fromstring(x) &gt;&gt;&gt; tree &lt;Element 'test' at 0xb63ad248&gt; &gt;&gt;&gt; for i in tree:         for j in i:             print j   &lt;Element 'item' at 0xb63ad2f0&gt; &lt;Element 'item' at 0xb63ad338&gt; &gt;&gt;&gt; for i in tree:         for j in i:             j.text  'item 1' 'item 2' &gt;&gt;&gt;  
&gt;&gt;&gt; "    xyz     ".rstrip() '    xyz'  rstrip 
grid.cells grid.cells def get_adjacent_cells( self x_coord y_coord ):     result = {}     for xy in [(x_coord+iy_coord+j) for i in (-101) for j in (-101) if i != 0 or j != 0]:         if (xy) in grid.cells:             result[(xy)] = grid.cells[(xy)]  grid.cells 
CharField UserProfileConfig.username self.tester __init__ 
curl.setopt(pycurl.PROXY "url") curl.setopt(pycurl.PROXYPORT 8000) curl.setopt(pycurl.PROXYTYPE pycurl.PROXYTYPE_HTTP)  
class UserProfileConfig(forms.Form):      def __init__(selfrequest*args**kwargs):         super (UserProfileConfigself).__init__(*args**kwargs)         self.fields['username'] = forms.CharField(label='Username'max_length=100initial=request.session['some_var'])  
permutations itertools.product &gt;&gt;&gt; s = 'atgc' &gt;&gt;&gt; d = dict(zip(s 'tacg')) &gt;&gt;&gt; import itertools &gt;&gt;&gt; for i in itertools.product(s repeat=10):     sta = ''.join(i)     stb = ''.join(d[x] for x in i)  'atgc' sta stb &gt;&gt;&gt; trans = str.maketrans(s 'tacg') &gt;&gt;&gt; for i in itertools.product(s repeat=10):     sta = ''.join(i)     stb = sta.translate(trans)  
prefix form = MyFormClass(prefix='some_prefix')  form = MyFormClass(request.POST prefix='some_prefix')  
Column(u'int_part' Integer primary_key=True nullable=False        autoincrement=False)  
if sys.platform == "win32":     import os msvcrt     msvcrt.setmode(sys.stdout.fileno() os.O_BINARY)  sys.stdout 
* [:6] time.localtime() time.struct_time datetime.datetime 
file.name = slugify(myfile.filename) name ext = os.path.splitext(file.name) while os.path.exists(os.path.join(permanent_store file.name)):     name += '_'     file.name = name + ext  raw_file = os.path.join(permanent_store file.name)  
def __call__(self cls):     def init(cls_self *args **kw):         if len(args)+len(kw) != len(self.params):             raise RuntimeError("Wrong number of arguments")         for param value in zip(self.params args):             setattr(cls_self param value)         vars(cls_self).update(kw)     cls.__init__ = init     return cls  def __call__(self cls):     def init(cls_self *args **kw):         for param value in zip(self.params args):             if param in kw:                 raise TypeError("Multiple values for %s"%param)             kw[param]=value         if len(args) &gt; len(self.params) or set(kw) != set(self.params):             raise TypeError("Wrong number of arguments")         vars(cls_self).update(kw)     cls.__init__ = init     return cls  def __call__(self cls):     def init(cls_self *args **kw):         for param value in zip(self.params args):             if param in kw:                 raise TypeError("Multiple values for %s"%param)             kw[param]=value         unexpected_args = list(set(kw)-set(self.params))         if unexpected_args:             raise TypeError("Unexpected args %s"%unexpected_args)         missing_args = list(set(self.params)-set(kw))         if missing_args:             raise TypeError("Expected args %s"%missing_args)         vars(cls_self).update(kw)     cls.__init__ = init     return cls  
&gt;&gt;&gt; l = ((12)(34)) &gt;&gt;&gt; dict(map(lambda n: (n[0] unicode(n[1])) l)) {1: u'2' 3: u'4'}  &gt;&gt;&gt; l = ((12)(34)) &gt;&gt;&gt; {n[0] : str(n[1]) for n in l} {1: '2' 3: '4'}  
 del request.session['mykey']  
ShoeReview.objects\           .filter(owner_review__ratings__rating_attribute__attribute='overall')\           .order_by(owner_review__ratings__rating)  class BestShoesReviewManager(models.Manager):     def get_query_set(self):         qs =  super(DahlBookManager self).get_query_set()         return qs.filter(owner_review__ratings__rating_attribute__attribute= 'overall')\                  .order_by(owner_review__ratings__rating)  class ShoeReview(models.Model)      objects = models.Manager() # The default manager.     best = BestShoesReviewManager() # The best review manager.  ShoeReview.objects.best()  
from a_package.baz import do_something_expensive do_something_expensive = lambda: 'Something really cheap.'  do_something_expensive = a_package.baz['do_something_expensive'] do_something_expensive = lambda: 'Something really cheap.'  import bar bar.do_something_expensive = lambda: 'Something really cheap.'  
attrs[attr].strip()  
import wx import wx.aui  ######################################################################## class TabPanel(wx.Panel):     """     This will be the first notebook tab     """     #----------------------------------------------------------------------     def __init__(self parent):         """"""          wx.Panel.__init__(self parent=parent id=wx.ID_ANY)          sizer = wx.BoxSizer(wx.VERTICAL)         txtOne = wx.TextCtrl(self wx.ID_ANY "")         txtTwo = wx.TextCtrl(self wx.ID_ANY "")          sizer = wx.BoxSizer(wx.VERTICAL)         sizer.Add(txtOne 0 wx.ALL 5)         sizer.Add(txtTwo 0 wx.ALL 5)          self.SetSizer(sizer)  class DemoPanel(wx.Panel):     """     This will be the first notebook tab     """     #----------------------------------------------------------------------     def __init__(self parent):         """"""         wx.Panel.__init__(self parent=parent id=wx.ID_ANY)          # create the AuiNotebook instance         nb = wx.aui.AuiNotebook(self)          # add some pages to the notebook         pages = [(TabPanel(nb) "Tab 1")                  (TabPanel(nb) "Tab 2")                  (TabPanel(nb) "Tab 3")]         for page label in pages:             nb.AddPage(page label)          sizer = wx.BoxSizer(wx.VERTICAL)         sizer.Add(nb 1 wx.EXPAND)         self.SetSizer(sizer)  ######################################################################## class DemoFrame(wx.Frame):     """     Frame that holds all other widgets     """      #----------------------------------------------------------------------     def __init__(self):         """Constructor"""         wx.Frame.__init__(self None wx.ID_ANY                           "AUI-Notebook Tutorial"                           size=(600400))         panel = DemoPanel(self)         self.Show()  #---------------------------------------------------------------------- if __name__ == "__main__":     app = wx.PySimpleApp()     frame = DemoFrame()     app.MainLoop()  
&gt;&gt;&gt; dataVersionsRequest = getDataVersions**()** &gt;&gt;&gt; dataVersionsRequest._accountInfo = acctInfo &gt;&gt;&gt; service.getDataVersions(dataVersionsRequest)  if isinstance(request getDataVersions) is False:             raise TypeError "%s incorrect request type" % (request.__class__)  
#!/usr/bin/python  /usr/bin/python python which python  python 
def view_function(requestid):     object_to_edit = get_object_or_404(Modelid=id) #Or slug=slug     form = ModelForm(data = request.POST or None instance=object_to_edit)     if form.is_valid():         form.save()         redirect()     return render_to_response('template_name'{}RequestContext(request))  
wx.TR_HAS_VARIABLE_ROW_HEIGHT 
backref relation() 
@property def myattr(self):     """This is the doc string."""     return self._half * 2  @myattr.setter def myattr(self value):     self._half = value / 2  @myattr.deleter def myattr(self):     del self._half  
__init__ __new__ callback webapp.RequestHandler __init__ app.yaml .py .py 
--exe $ nosetests --help  ...      --exe               Look for tests in python modules that are executable.                     Normal behavior is to exclude executable modules                     since they may not be import-safe [NOSE_INCLUDE_EXE]  
import datetime  def minute_interval(start end):      reverse = False      if start &gt; end:           start end = end start           reverse = True       delta = (end.hour - start.hour)*60 + end.minute - start.minute + (end.second - start.second)/60.0      if reverse:           delta = 24*60 - delta      return delta  t1 = datetime.time(12 10 0) # 12:10 t2 = datetime.time(13 13 0) #13:13 t3 = datetime.time(23 55 0) #23:55  t4 = end = datetime.time(01 10 0) #01:10  print minute_interval(t1 t2) print minute_interval(t3 t4)  63 75  
import xml.etree.ElementTree as E e = E.parse("test.xml") print(e.find("type").text)  import xml.dom.minidom d = xml.dom.minidom.parse("test.xml") print(d.getElementsByTagName("type")[0].firstChild.data)  from BeautifulSoup import BeautifulStoneSoup soup = BeautifulStoneSoup(open("test.xml")) print(soup.find("type").text)  
&gt;&gt;&gt; s = "   xyz" &gt;&gt;&gt; len(s) - len(s.lstrip()) 3  
__import__ my_module = __import__("mymodule")  testmod doctest.testmod(my_module)  invenio.webtag module = __import__('invenio.webtag' globals() locals() ['invenio'] -1)  
ast.NodeVisitor &gt;&gt;&gt; class VisitCalls(ast.NodeVisitor): ...   def visit_Call(self what): ...     if what.func.value.id == 'self': ...       print what.func.attr ...  &gt;&gt;&gt; f='''def x(self): ...   return self.bar() + self.baz() ... ''' &gt;&gt;&gt; xx = ast.parse(f) &gt;&gt;&gt; VisitCalls().visit(xx) bar baz  self.something somelist.append(self.blah) somelist[i + j]() self.blah 
numpy.get_include() from distutils.core import setup from distutils.extension import Extension from Cython.Distutils import build_ext import numpy as np                           # &lt;---- New line  ext_modules = [Extension("hello" ["hello.pyx"]                                   include_dirs=[get_numpy_include()])]   # &lt;---- New argument  setup(   name = 'Hello world app'   cmdclass = {'build_ext': build_ext}          ext_modules = ext_modules )  
# In __init__:     self.tree.itemActivated.connect(self.onDoubleClick)   def onDoubleClick(self item index):     """      The logic will happen in the editor delegate. This is needed to let     the delegate run by making this editable     """             item.setFlags(QtCore.Qt.ItemIsSelectable |                   QtCore.Qt.ItemIsEnabled |                   QtCore.Qt.ItemIsEditable)                  # Force the item in to edit mode so the delegate picks it up     self.tree.editItem(item index)      # Set the item back to not editable. The delegate will still do its     #    job but the read-only state will already be set when done!     item.setFlags(QtCore.Qt.ItemIsSelectable |                   QtCore.Qt.ItemIsEnabled)  
time datetime.datetime.strptime import datetime dt=datetime.datetime.strptime(data[4]+data[5]'%Y%m%d%H%M%S') print(dt) # 2010-03-04 08:28:35  %Y%m%d%H%M%S strftime 
import os sys traceback  try:    os.mkdir('/valid_created_dir')    os.listdir('/invalid_path') except OSError msg:    tb = sys.exc_info()[-1]    stk = traceback.extract_tb(tb 1)    fname = stk[0][2]    print 'The failing function was' fname  print if 
import unittest import doctest from project import views  def suite():     suite = unittest.TestSuite()     suite.addTest(doctest.DocTestSuite(views))     return suite  $ python manage.py test project  import unittest import doctest from project import views  class FooTestCase(unittest.TestCase):     def testFoo(self):         self.assertEquals('foo' 'bar')  def suite():     suite = unittest.TestSuite()     suite.addTest(doctest.DocTestSuite(views))     suite.addTest(unittest.TestLoader().loadTestsFromTestCase(FooTestCase))     return suite  
DEBUG watch -n 1 mysqladmin --user=&lt;user&gt; --password=&lt;password&gt; processlist  
jabber.RegisterHandler('presence' myPresenceHandler)  def myPresenceHandler(self con event):   fromjid = event.getFrom().getStripped()   status = myroster.getStatus(fromjid)  jabber.Process() 
from datetime import date from datetime import timedelta  today = date.today() offset = (today.weekday() - 2) % 7 last_wednesday = today - timedelta(days=offset)  for x in xrange(1 32):     today = date(year=2010 month=3 day=x)     offset = (today.weekday() - 2) % 7     last_wednesday = today - timedelta(days=offset)      print last_wednesday  
lambda pkt:((pkt.chksumpresent == 1) or (pkt.special == 1))  
mus.extend(reversed(mus))  import itertools for item in itertools.chain(mus reversed(mus)):     do_something...  
2** (2**(2**2))  
import os if sys.argv[0] != os.path.join(os.environ['WINDIR']'blalah.exe'):  
values = [] for row in woof_1.findAll("tr" { "class" : "row_b" }):   for col in row.findAll(re.compile('td')):     if col.string:       values.append(col.string) result = ''.join(values)  
tot = 0.  for i in xrange(data.shape[0]-1):     tot += ((((data[i+1:]-data[i])**2).sum(1))**.5).sum()  avg = tot/((data.shape[0]-1)*(data.shape[0])/2.)  
try:     os.makedirs('C:\\test\\') except OSError:     pass  OSError import errno try:     os.makedirs('C:\\test\\') except OSError as e:     if e.errno != errno.EEXIST:         raise  # raises the error again  
O(N log N) 
/proc/partitions /sys/class/block #!/usr/bin/python import os partitionsFile = open("/proc/partitions") lines = partitionsFile.readlines()[2:]#Skips the header lines for line in lines:     words = [x.strip() for x in line.split()]     minorNumber = int(words[1])     deviceName = words[3]     if minorNumber % 16 == 0:         path = "/sys/class/block/" + deviceName         if os.path.islink(path):             if os.path.realpath(path).find("/usb") &gt; 0:                 print "/dev/%s" % deviceName  find("/usb") 
$PATH os.environ['PATH'] blkid which blkid sudo su echo $PATH getoutput blkid 
_meta In [1]: from django.db import models  In [2]: model = models.get_model('timeapp' 'Employee')  In [3]: dep_field = model._meta.get_field_by_name('department')  In [4]: dep_field[0].target_field Out[4]: 'id'  In [5]: dep_field[0].related_model Out[5]: &lt;class 'timesite.timeapp.models.Department'&gt;  def get_field_by_name(self name):     """     Returns the (field_object model direct m2m) where field_object is     the Field instance for the given name model is the model containing     this field (None for local fields) direct is True if the field exists     on this model and m2m is True for many-to-many relations. When     'direct' is False 'field_object' is the corresponding RelatedObject     for this field (since the field doesn't have an instance associated     with it).      Uses a cache internally so after the first access this is very fast.     """  
ON SQLite version 3.6.14 Enter ".help" for instructions Enter SQL statements terminated with a ";" sqlite&gt; create table foo (bar int zot int); sqlite&gt; create index barx on foo(bar); sqlite&gt; create index zotx    foo(zot); SQL error: near "foo": syntax error sqlite&gt;  
local_start status class TransactionalMiddlewareInterface(object):     def __init__(self application **config):         self.application = application         self.config = config      def __call__(self environ start_response):         def local_start(stat_str headers=[]):             local_start.status = int(stat_str.split(' ')[0])             return start_response(stat_str headers)         try:             result = self.application(environ local_start)         finally:             if local_start.status and local_start.status &gt; 199:                 pass  
  std::string * pointer (std::string& p) {     return &p; }   >>> s = 'hello' >>> t.testp (pointer (s)) hello >>>  pre>  <p> 
\b(I[MBDPI]{2}|[MBDPI]I[MBDPI]|[MBDPI]{2}I)\b  \b \b[MBDPI]{3}\b  \b(?=[MBDPI]{3}\b)\w*I\w*  
_spam __spam _classname__spam exec eval() execfile() getattr() setattr() delattr() __dict__ 
value_from_datadict 
pyflakes 
coverage xml -i 
if y[35:38] !=x[35:38]:    try:      iy = int(y[35:38])      ix = int(x[35:38])    except ValueError:      # here for whatever action is appropriate including silent ignoring.      print("Unexpected value for record # %s" % x[7:10])     if abs(ix - iy) &gt; 2:      print(x[7:10])  
my_list.extend(reversed(color[-bits:]))  my_list.extend( itertools.islice( reversed(color) 0 bits))  
import inspect  class C:     def otherFunction(self):         print inspect.currentframe().f_back.f_locals  &gt;&gt;&gt; A().callFunction(C()) {'self': &lt;__main__.A instance at 0x96b4fec&gt; 'obj': &lt;__main__.C instance at 0x951ef2c&gt;}  
from distutils.core import setup Extension import sys  libraries = []  if sys.platform == 'win32':     libraries.append('ws2_32')  fastbinarymod = Extension('thrift.protocol.fastbinary'                           sources = ['src/protocol/fastbinary.c']                           libraries = libraries          )  setup(name = 'Thrift'       version = '0.1'       description = 'Thrift Python Libraries'       author = 'Thrift Developers'       author_email = 'thrift-dev@incubator.apache.org'       url = 'http://incubator.apache.org/thrift/'       license = 'Apache License 2.0'       packages = [         'thrift'         'thrift.protocol'         'thrift.transport'         'thrift.server'       ]       package_dir = {'thrift' : 'src'}       ext_modules = [fastbinarymod]       )  #ifdef _MSC_VER   #define __BYTE_ORDER __LITTLE_ENDIAN #endif  python setup.py install 
list1=[1234] list2=[1534] print [(ij) for ij in zip(list1list2) if i!=j]  [(2 5)]  list1=[1234] list2=[2534] print [(ij) for ij in zip(list1list2)[1:] if i!=j]  
http://www.clarityaccounting.com/api/v1  &lt;wsdl:service name="v1"&gt;     &lt;wsdl:port binding="tns:v1SoapBinding" name="BooksApiV1Port"&gt;       &lt;soap:address location="http://www.clarityaccounting.com/api/v1"/&gt;     &lt;/wsdl:port&gt;  &lt;/wsdl:service&gt;  &lt;soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"&gt;     &lt;soap:Body&gt;         &lt;soap:Fault&gt;             &lt;faultcode&gt;soap:Server&lt;/faultcode&gt;             &lt;faultstring&gt;No such operation:  (HTTP GET PATH_INFO: /api/v1)&lt;/faultstring&gt;         &lt;/soap:Fault&gt;     &lt;/soap:Body&gt; &lt;/soap:Envelope&gt;  Client &gt;&gt;&gt; url 'https://www.clarityaccounting.com/api/v1?wsdl' &gt;&gt;&gt; client = Client(url location='https://www.clarityaccounting.com/api/v1') &gt;&gt;&gt; token = client.service.doLogin('demo' 'demo' 'www.kashoo.com' 'en_US' 300000) &gt;&gt;&gt; token (authToken){    authenticationCode = "ObaicdMJZY6UM8xZ2wzGjicT0jQ="    expiryDate = 2010-03-05 12:31:41.000698    locale = "en_US"    myUserId = 4163    site = "www.kashoo.com"  }  logging DEBUG import logging logging.basicConfig(level=logging.INFO) logging.getLogger('suds.client').setLevel(logging.DEBUG) logging.getLogger('suds.transport').setLevel(logging.DEBUG) logging.getLogger('suds.xsd.schema').setLevel(logging.DEBUG) logging.getLogger('suds.wsdl').setLevel(logging.DEBUG)  DEBUG:suds.transport.http:sending: URL:http://www.clarityaccounting.com/api/v1 (xml output omitted)  DEBUG:suds.client:http failed:  
read_until tn.read_until("User Name: ")  tn.read_until(b"User Name: ")  b"..." 
p1 = subprocess.Popen(["/usr/bin/java" "MyClass"] stdout=subprocess.PIPE) print p1.stdout.read()   
for f v in customFields.iteritems():   try:     v = v()   except TypeError:     pass   values.append(v)  callable __call__ 
records = [] CsvSet __init__ record = {} Record __init__ class Record:     def __init__(selflines):         self.record = {}         self.__parse()  class CsvSet:     def __init__(selflines):         self.records = []         self.__parse()  __init__ 
sampleString.decode("cp1255") print sampleString.decode("cp1255") sys.stdout.encoding print sampleString.decode("cp1255").encode("utf-8")  import sys print sys.stdout.encoding samplestring = '\xe0\xe1\xe2\xe3\xe4' print samplestring.decode("cp1255").encode(sys.argv[1])  $ python2.6 test.py utf-8 UTF-8 ?????  $ python2.6 test.py latin1 UTF-8 Traceback (most recent call last): UnicodeEncodeError: 'latin-1' codec can't encode characters in position 0-4: ordinal not in range(256)  $ python2.6 test.py ascii UTF-8 Traceback (most recent call last): UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-4: ordinal not in range(128)  $ python2.6 test.py cp424 UTF-8 ABCDE  $ python2.6 test.py iso8859_8 UTF-8 ?????  encode import sys samplestring = '\xe0\xe1\xe2\xe3\xe4' print "'{0}'".format(samplestring.decode("cp1255").encode(sys.argv[1]        sys.argv[2]))  $ python2.6 test.py latin1 strict Traceback (most recent call last):   File "test.py" line 4 in &lt;module&gt;     sys.argv[2])) UnicodeEncodeError: 'latin-1' codec can't encode characters in position 0-4: ordinal not in range(256) [/tmp] $ python2.6 test.py latin1 ignore '' [/tmp] $ python2.6 test.py latin1 replace '?????' [/tmp] $ python2.6 test.py latin1 xmlcharrefreplace '&amp;#1488;&amp;#1489;&amp;#1490;&amp;#1491;&amp;#1492;' [/tmp] $ python2.6 test.py latin1 backslashreplace '\u05d0\u05d1\u05d2\u05d3\u05d4'  
context = etree.iterparse(xmlfile tag="yourSubTree") action elem = context.next() etree.iterwalk(elem ...)...  
&gt;&gt;&gt; import warnings &gt;&gt;&gt; __warningregistry__ ------------------------------------------------------------ Traceback (most recent call last):   File "&lt;ipython console&gt;" line 1 in &lt;module&gt; NameError: name '__warningregistry__' is not defined  &gt;&gt;&gt; warnings.simplefilter('error') &gt;&gt;&gt; __warningregistry__ ------------------------------------------------------------ Traceback (most recent call last):   File "&lt;ipython console&gt;" line 1 in &lt;module&gt; NameError: name '__warningregistry__' is not defined  &gt;&gt;&gt; warnings.warn('asdf') ------------------------------------------------------------ Traceback (most recent call last):   File "&lt;ipython console&gt;" line 1 in &lt;module&gt; UserWarning: asdf  &gt;&gt;&gt; __warningregistry__ {}  &gt;&gt;&gt; warnings.simplefilter("ignore") &gt;&gt;&gt; warnings.warn('asdf') &gt;&gt;&gt; __warningregistry__ {('asdf' &lt;type 'exceptions.UserWarning'&gt; 1): True} &gt;&gt;&gt; warnings.simplefilter("error") &gt;&gt;&gt; warnings.warn('asdf') &gt;&gt;&gt; warnings.warn('qwerty') ------------------------------------------------------------ Traceback (most recent call last):   File "&lt;ipython console&gt;" line 1 in &lt;module&gt; UserWarning: qwerty  
logging.basicConfig(level=logging.DEBUG) __getitem__ __setitem__ [] DictWatch d[key] d.get() d.set() 
job = Job.objects.get(pk=1) array_result = serializers.serialize('json' [job] ensure_ascii=False) just_object_result = array_result[1:-1]  
source.nodeType == source.ELEMENT_NAME 
__import__ module = __import__(sys.argv[1])  .py __import__() 
unittest unittest unittest subprocess setUp tearDown 
repr() 
{% if forloop.counter|divisbleby:"15" %}     &lt;div class="menu"&gt;abc&lt;/div&gt; {% endif %}  
animal animal.dog 
&gt;&gt;&gt; oacute_latin1 = "\xF3" &gt;&gt;&gt; oacute_unicode = oacute_latin1.decode('latin1') &gt;&gt;&gt; oacute_utf8 = oacute_unicode.encode('utf8') &gt;&gt;&gt; print repr(oacute_latin1) '\xf3' &gt;&gt;&gt; print repr(oacute_unicode) u'\xf3' &gt;&gt;&gt; import unicodedata &gt;&gt;&gt; unicodedata.name(oacute_unicode) 'LATIN SMALL LETTER O WITH ACUTE' &gt;&gt;&gt; print repr(oacute_utf8) '\xc3\xb3' &gt;&gt;&gt;  &gt;&gt;&gt; unicode("\xF3") Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; UnicodeDecodeError: 'ascii' codec can't decode byte 0xf3 in position 0: ordinal not in range(128) &gt;&gt;&gt; "\xF3".decode('latin1') u'\xf3' &gt;&gt;&gt;  u'\xf3' == '\xF3'.decode('latin1') unicode(str_object encoding) str_object.decode(encoding) print repr(your_data[:400]) 
aa = {'ALA':'A'} test = ['ALA']  ### note this is now a list!  for i in test:     if i in aa:         print i aa[i]  #### note i is the key aa[i] is the value  aa.iteritems()   # tuples of (key value)                  # ('ALA' 'A') aa.iterkeys()    # keys only -- equivalent to just making an iterator directly from aa                  # 'ALA' aa.itervalues()  # items only                  # 'A'  
itertools.groupby &gt;&gt;&gt; [(g[0] len(list(g[1]))) for g in itertools.groupby(['a' 'a' 'b' 'b' 'b'])] [('a' 2) ('b' 3)]  
c = xmpp.client.Client(...) # connect jid = xmpp.JID(node=c.User domain=c.Server resource=c.Resource)  
set foldmethod=indent  
with open(file1) as f1:   with open(file2) as f2:     for line1 line2 in itertools.izip(f1 f2):       if line1 != line2:         print 'files are different'         break  zip zip itertools.izip 
class MainPage(BaseHandler):  class MainPage(BaseHandler.BaseHandler):  import BaseHandler  from BaseHandler import BaseHandler  
random.choice import random  d =[random.choice('ACUG') for x in xrange(3355)] s = "".join(d)  print s  s = "".join(random.choice('ACUG') for x in xrange(3355))  
import itertools x = {"a": 600 "b": 75 "c": 75 "d": 90} [(k len(list(v))) for k v in itertools.groupby(sorted(x.values()))]  
from lxml.html import fromstring this1_tree=fromstring(this1) all_cells=[(item[0] item[1]) for item in enumerate(this1_tree.cssselect('td'))] # I am hoping this gives you the cells with their relative position in the document)  the_cell_before_numbers=[] for cell in all_cells:     if 'Item' in cell[1].text_content():         the_cell_before_numbers.append(cell[0])  todays_price=all_cells[the_cell_before_number+1][1].text_content()  
&lt;br/&gt; &lt;br /&gt; response = br.response() response.set_data(response.get_data().replace("&lt;br/&gt;" "&lt;br /&gt;")) #Python mechanize is broken fixing it. br.set_response(response)  re.sub() /&gt; 
render to string render_to_response 
 &gt;&gt;&gt; brains = site.portal_catalog.unrestrictedSearchResults()   &gt;&gt;&gt; for b in brains:  ...     obj = b.getObject()   &gt;&gt;&gt; for field in obj.Schema().fields():  ...     field_id = field.__name__  ...     field_value = field.getAccessor(obj)()  
class Author(Entity):     first_name = Field(Unicode(64))     last_name = Field(Unicode(64))  class Article(Entity):     title = Field(Unicode(64))  class Category(Entity):     name = Field(Unicode(64))  
.id() id() 
elif else def function(a):     if a == '1':         print('1a')     elif a == '2':         print('2a')     else:         print('3a')  function(input('input:'))  
make -j 
from os.path import dirnamerealpath sys.path.append(dirname(dirname(realpath(__file__))))  
return render(     request      template     {         'var1' : value1         'var2' : value2         'var3' : value3     } )  render( 
str.isalpha if line and line[0].isalpha():  
.yaml .yaml 
""" This is the xyz package. """  
/dev/random f = open("/dev/random""rb") rnd_str = f.read(4)  import struct rand_int = struct.unpack('I' rnd_string)[0]  rand_int = 0 for c in rnd_str:     rand_int &lt;&lt;= 8     rand_int += ord(c)  
with open("data.txt") as myfile:     for line in myfile:         do_something(line.rstrip("\n"))  myfile = open("data.txt") for line in myfile:     do_something(line.rstrip("\n"))  .rstrip("\n") 
-WindowStyle 
&lt;form&gt; &lt;form method="GET" action="http://www.google.com/u/ritaj"&gt;  forms = ClientForms.ParseResponseEx(response)  forms[0] &gt;&gt;&gt; f = forms[0] &gt;&gt;&gt; [c.name for c in f.controls] ['q' 'sitesearch' 'sa' 'domains' 'form:mode' 'form:id' '__confirmed_p' '__refreshing_p' 'return_url' 'time' 'token_id' 'hash' 'username' 'password' 'persistent_p' 'formbutton:ok']  username password f raw_input str() 
edited_page = CP      edited_page.title = title edited_page.content = content edited_page.type = type edited_page.reference = reference edited_page.template = template  edited_page.put()  
&gt;&gt;&gt; x = 'Ingl\xeas' &gt;&gt;&gt; print x.decode('latin1') Inglês  
. sys.path models . 
import lxml.etree  example_doc = """   &lt;root&gt;     &lt;a name="listofplaces"/&gt;     text     &lt;sibling/&gt;     &lt;sibling/&gt;     &lt;a name="transport"/&gt;   &lt;/root&gt; """ root = lxml.etree.XML(example_doc)  new_root = lxml.etree.Element("root") it = iter(root) for e in it:   if e.tag == "a" and e.get("name") == "listofplaces":     new_root.text = e.tail     break else:   assert False "TODO: handle tag not found" for e in it:   if e.tag == "a" and e.get("name") == "transport":     break   new_root.append(e) else:   assert False "TODO: handle tag not found"  print lxml.etree.tostring(new_root)  
bar = [] for item in some_iterable:     bar.append(SOME EXPRESSION)  bar = [SOME EXPRESSION for item in some_iterable]  twod_list = []                                       \                       for i in range (0 10):                               \     new = []                  \ can be replaced        } this too     for j in range (0 10):    } with a list          /         new.append(foo)       / comprehension        /     twod_list.append(new)                           /  
BeautifulSoup html5lib from html5lib import HTMLParser treebuilders  parser = HTMLParser(tree=treebuilders.getTreeBuilder("beautifulsoup"))  text = "a&lt;b&gt;b&lt;b&gt;c" soup = parser.parse(text) print soup.prettify()  &lt;html&gt;  &lt;head&gt;  &lt;/head&gt;  &lt;body&gt;   a   &lt;b&gt;    b    &lt;b&gt;     c    &lt;/b&gt;   &lt;/b&gt;  &lt;/body&gt; &lt;/html&gt;  
items = Item.all().order('name').fetch(10) headers = ['Name' 'Price' 'Quantity'] viewitems = [[getattr(x h) for h in headers] for x in items]  template_values = {'items': viewitems                    'headers': headers} render('Views/table.html' self template_values)  
Axes add_subplot import show import matplotlib.pyplot as plt f1 = plt.figure() f2 = plt.figure() ax1 = f1.add_subplot(111) ax1.plot(range(010)) ax2 = f2.add_subplot(111) ax2.plot(range(1020)) plt.show()  add_axes ax1 = f1.add_axes([0.10.10.80.8]) ax1.plot(range(010)) ax2 = f2.add_axes([0.10.10.80.8]) ax2.plot(range(1020))  
$('#delete-button').click(function() {     $.ajax({         'type': 'DELETE'         'url': '/some/url/that/handles/delete'     }) });  class DeleteHandler(webapp.RequestHandler):      def delete(self):         if users.get_current_user() == allowed_user:             the_data_model.delete()         else:             self.response.out.write('Permission denied')  
object object Foo(object): Foo: 
import datetime lastplus = q.get() if lastplus.date &lt; datetime.datetime.now()-datetime.timedelta(seconds=20):     print "Go"  
char[] {0x04H 0xfe 0x13} 
setup.py httplib2 setup.py setup.py python2 setup.py install  python3 setup.py install  setup.py cobs python2 python3 src python2 python3 root   |   +--python2   |     |   |     +--src   |   +--python3   |     |   |     +--src   |   +--setup.py   +--MANIFEST.in  setup.py if sys.version_info[0] == 2:     base_dir = 'python2' elif sys.version_info[0] == 3:     base_dir = 'python3'  setup setup(     ...     packages=[ 'cobs' 'cobs.cobs' 'cobs.cobsr' ]  package_dir base_dir     package_dir={         'cobs' : base_dir + '/cobs'     }      ext_modules=[         Extension('cobs.cobs._cobs_ext' [ base_dir + '/src/_cobs_ext.c' ])         Extension('cobs.cobsr._cobsr_ext' [ base_dir + '/src/_cobsr_ext.c' ])     ]  setup.py setup.py python2 setup.py sdist  python2 python3 MANIFEST.in include *.txt recursive-include python2 * recursive-include python3 *  cobs 
threading.Timer .enter sched def periodic(scheduler interval action actionargs=()):     scheduler.enter(interval 1 periodic                     (scheduler interval action actionargs))     action(*actionargs)  periodic(scheduler 3600 query_rate_limit)  threading.Timer scheduler.enter 
body get class Detail(BaseHandler):     def body(self **kwargs):         print kwargs['CSIN']  class MainPage(BaseHandler):     def body(self **kwargs): # can ignore kwargs  class Cart(BaseHandler):     def body(self **kwargs): # can ignore kwargs  class BaseHandler(webapp.RequestHandler):     def get(self CSIN=None):         self.body(CSIN = CSIN some_new_arg = 3)  class SomeNewHandler(BaseHandler):     def body(self **kwargs):         print kwargs['some_new_arg']  body self 
setup(...) ext_modules try try:   setup(... ext_modules=...) except SystemExit: ...  except setup(...) ext_modules setup.py sys.version 'IronPython' ext_modules 
mydata = data()  mydata.add('yes')  
lim limit sieve = [False]*limit limit-1 if (n &lt;= limit) and (n % 12 == 1 or n % 12 == 5):  n&lt;=limit n==limit sieve[n] limit sieve = [False]*(limit+1)  sieve = [False]*limit sieve sieve[n] sieve[n-1] factor = int(math.sqrt(limit))  int math.sqrt(limit) range(1factor) factor = int(math.sqrt(limit))+1  def AtkinSieve (limit):     results = [235]     sieve = [False]*(limit+1)     factor = int(math.sqrt(limit))+1     for i in range(1factor):         for j in range(1 factor):             n = 4*i**2+j**2             if (n &lt;= limit) and (n % 12 == 1 or n % 12 == 5):                 sieve[n] = not sieve[n]             n = 3*i**2+j**2             if (n &lt;= limit) and (n % 12 == 7):                 sieve[n] = not sieve[n]             if i&gt;j:                 n = 3*i**2-j**2                 if (n &lt;= limit) and (n % 12 == 11):                     sieve[n] = not sieve[n]     for index in range(5factor):         if sieve[index]:             for jndex in range(index**2 limit index**2):                 sieve[jndex] = False     for index in range(7limit):         if sieve[index]:             results.append(index)     return results  
&gt;&gt;&gt; ''.join(map(stra)) '123'  
&gt;&gt;&gt; a = [1] &gt;&gt;&gt; list = [a] &gt;&gt;&gt; print list [[1]] &gt;&gt;&gt; a[:] = [2] &gt;&gt;&gt; print list [[2]]  a - ... a a[:] = ... a 
class A(object):  def __init__(self):    print "world"  class B(A):  def __init__(self):    print "hello"    super(B self).__init__()  class A(object):  def __init__(self):    print("world")  class B(A):  def __init__(self):    print("hello")    super().__init__()  super() super(&lt;containing classname&gt; self) 
if os.path.exists("myWxApplication.exe"):      self.SetIcon(wx.Icon("myWxApplication.exe"wx.BITMAP_TYPE_ICO))  
elif process.loop(i len(list_i) != 'repeat':  ) != 
object.__rlshift__() object.__ror__() __rlshift__ __lshift__ 
string_o = "" string_o = () string_o () 
after after # for python 3.x use 'tkinter' rather than 'Tkinter' import Tkinter as tk import time  class App():     def __init__(self):         self.root = tk.Tk()         self.label = tk.Label(text="")         self.label.pack()         self.update_clock()         self.root.mainloop()      def update_clock(self):         now = time.strftime("%H:%M:%S")         self.label.configure(text=now)         self.root.after(1000 self.update_clock)  app=App()  after 
import re  s = '????? not russianA' d = { '?????':'?????' 'russianA':'englishA' }  pattern = re.compile(r'\b(' + '|'.join(d.keys()) + r')\b') result = pattern.sub(lambda x: d[x.group()] s) # Output: '????? not englishA'  pattern = re.compile('|'.join(d.keys()))  
clean ModelChoiceField int pk SomeChoice invalid ModelChoiceField choice to_field_name ModelChoiceField __init__ 
__concat__ __add__ 
import pdb; pdb.set_trace()  
&gt;&gt;&gt; t [1 3 6] &gt;&gt;&gt; [j-i for i j in zip(t[:-1] t[1:])]  # or use itertools.izip in py2k [2 3]  
Popen(['/bin/sh' '-c' args[0] args[1] ...])  Popen(['/bin/sh' '-c' 'du' '-s' '-b' maildir])  -s -b maildir du shell=True size = subprocess.Popen(['du' '-s' '-b' maildir]                     stdout=subprocess.PIPE).communicate()[0].split()[0]  size = subprocess.Popen('du -s -b "%s"' % maildir shell=True                     stdout=subprocess.PIPE).communicate()[0].split()[0]  
@staticmethod AutoFloatProperties _AutoFloatProperties def AutoFloatProperties(*props):     '''metaclass'''     class _AutoFloatProperties(type):         # Inspired by autoprop (http://www.python.org/download/releases/2.2.3/descrintro/#metaclass_examples)         def __init__(cls name bases cdict):             super(_AutoFloatProperties cls).__init__(name bases cdict)             for attr in props:                 def fget(self _attr='_'+attr): return getattr(self _attr)                 def fset(self value _attr='_'+attr): setattr(self _attr float(value))                 setattr(cls attr property(fget fset))     return _AutoFloatProperties  class Vector(object):     '''Creates a Maya vector/triple having x y and z coordinates as float values'''     __metaclass__ = AutoFloatProperties('x''y''z')     def __init__(self x=0 y=0 z=0):         self.x self.y self.z = x y z # values converted to float via properties  if __name__=='__main__':     v=Vector(123)     print(v.x)     # 1.0     v.x=4     print(v.x)     # 4.0  
python -c "import code; code.interact(local=locals())"  local interact locals() python -c "import mymodule code; code.interact(local=locals())"  
format=0 load_cert() 
def primeList(n i=2 acc=None):     return i &gt; n and (acc or []) or primeList(n i+1 (acc or []) + (isPrime(i) and [i] or []))  print sum(n for n in xrange(2 2000001) if all(n % i for i in xrange(2 int(n**0.5)+1)))  
import os  curpath = os.path.abspath(os.curdir) packet_file = "%s/%s/%s/%s.mol2" % ("dir" "dir2" "dir3" "some_file") print "Current path is: %s" % (curpath) print "Trying to open: %s" % (os.path.join(curpath packet_file))  packetFile = open(packet_file "w")  
important_airports = (airport for airport in airports if airport.is_important) for airport in important_airports:     # do stuff  
&gt;&gt;&gt; x=['a''a''b''c''c''c'] &gt;&gt;&gt; map(x.countx) [2 2 1 3 3 3] &gt;&gt;&gt; dict(zip(xmap(x.countx))) {'a': 2 'c': 3 'b': 1} &gt;&gt;&gt;  
 perl -p -i -e 's/\.x/\.7/' foo.log  
alist blist clist dlist elist = ([] for i in range(5))  = range alist blist clist dlist elist = [[]] * 5  alist = blist = clist = dlist = elist = []  
__init__ def __init__(self l=None):     self.l = [] if l is None else l  
dict dict subdict = dict((k v) for k v in myDict.iteritems() if v.field2 &gt;= 2)  
__del__ with def read_contents(file_path):   with open(file_path 'r') as f:     return f.read()  
A.diagonal() csr_matrix(eye(nn)) 
DisableReflectionKey +.. function:: DisableReflectionKey(key) +    +   Disables registry reflection for 32-bit processes running on a 64-bit +   Operating System. +    +   *key* is an already open key or one of the predefined :const:`HKEY_\*` +   constants. +    +   Will generally raise :exc:`NotImplemented` if executed on a 32-bit +   Operating System.  +   If the key is not on the reflection list the function succeeds but has no +   effect. Disabling reflection for a key does not affect reflection of any +   subkeys.  + +.. function:: EnableReflectionKey(key) + +   Restores registry reflection for the specified disabled key. +    +   *key* is an already open key or one of the predefined :const:`HKEY_\*` +   constants. + +   Will generally raise :exc:`NotImplemented` if executed on a 32-bit +   Operating System. +    +   Restoring reflection for a key does not affect reflection of any subkeys. + + +.. function:: QueryReflectionKey(key) + +   Determines the reflection state for the specified key. +    +   *key* is an already open key or one of the predefined :const:`HKEY_\*` +   constants. +    +   Returns ``True`` if reflection is disabled. + +   Will generally raise :exc:`NotImplemented` if executed on a 32-bit +   Operating System.  
 BLOCKSIZE = 1024*1024  with open(tmpfile 'rb') as inf:    with open(tmpfile 'wb') as ouf:      while True:        data = inf.read(BLOCKSIZE)        if not data: break        converted = data.decode('latin1').encode('utf-8')        ouf.write(converted)  \n 
str.isspace() True False str.strip() 
__getattr__ __getattr__ foo.bar __getattr__ foo bar AttributeError class Foo(object):     def __getattr__(self name):         if some_predicate(name):             # ...         else:             # Default behaviour             raise AttributeError  __getattr__ __getattribute__ class Foo(object):     def __getattribute__(self name):         if some_predicate(name):             # ...         else:             # Default behaviour             return object.__getattribute__(self name)  
conn = memcache.Client(['127.0.0.1:11211'] debug=0)  
flush display = Xlib.display.Display() screen = display.screen() root = screen.root  # ...  sendEvent(root display.intern_atom("_NET_CURRENT_DESKTOP") [1 X.CurrentTime]) display.flush()  
key_value_map value_key_map 
__import__ __import__ sys.modules beingimported = set() originalimport = __import__ def newimport(modulename *args **kwargs):     if modulename in beingimported:         print "Importing in circles" modulename args kwargs         print "    Import stack trace -&gt; " beingimported         # sys.exit(1) # Normally exiting is a bad idea.     beingimported.add(modulename)     result = originalimport(modulename *args **kwargs)     if modulename in beingimported:         beingimported.remove(modulename)     return result import __builtin__ __builtin__.__import__ = newimport  
os.path.dirname() 
'' [''{}] _d &gt;&gt;&gt; x = patricia() &gt;&gt;&gt; x.addWord('abcabc') &gt;&gt;&gt; x._d {'a': ['bcabc' {}]} &gt;&gt;&gt; x.addWord('abcdef') &gt;&gt;&gt; x._d {'a': ['bc' {'a': ['bc' {}] 'd': ['ef' {}]}]} &gt;&gt;&gt; x.addWord('abc') {'a': ['bc' {'a': ['bc' {}] '': ['' {}] 'd': ['ef' {}]}]}  class patricia():     def __init__(self):         self._data = {}      def addWord(self word):         data = self._data         i = 0         while 1:             try:                 node = data[word[i:i+1]]             except KeyError:                 if data:                     data[word[i:i+1]] = [word[i+1:]{}]                 else:                     if word[i:i+1] == '':                         return                     else:                         if i != 0:                             data[''] = [''{}]                         data[word[i:i+1]] = [word[i+1:]{}]                 return              i += 1             if word.startswith(node[0]i):                 if len(word[i:]) == len(node[0]):                     if node[1]:                         try:                             node[1]['']                         except KeyError:                             data = node[1]                             data[''] = [''{}]                     return                 else:                     i += len(node[0])                     data = node[1]             else:                 ii = i                 j = 0                 while ii != len(word) and j != len(node[0]) and \                       word[ii:ii+1] == node[0][j:j+1]:                     ii += 1                     j += 1                 tmpdata = {}                 tmpdata[node[0][j:j+1]] = [node[0][j+1:]node[1]]                 tmpdata[word[ii:ii+1]] = [word[ii+1:]{}]                 data[word[i-1:i]] = [node[0][:j]tmpdata]                 return      def isWord(selfword):         data = self._data         i = 0         while 1:             try:                 node = data[word[i:i+1]]             except KeyError:                 return False             i += 1             if word.startswith(node[0]i):                 if len(word[i:]) == len(node[0]):                     if node[1]:                         try:                             node[1]['']                         except KeyError:                             return False                     return True                 else:                     i += len(node[0])                     data = node[1]             else:                 return False      def isPrefix(selfword):         data = self._data         i = 0         wordlen = len(word)         while 1:             try:                 node = data[word[i:i+1]]             except KeyError:                 return False             i += 1             if word.startswith(node[0][:wordlen-i]i):                 if wordlen - i &gt; len(node[0]):                     i += len(node[0])                     data = node[1]                 else:                     return True             else:                 return False      def removeWord(selfword):         data = self._data         i = 0         while 1:             try:                 node = data[word[i:i+1]]             except KeyError:                 print "Word is not in trie."                 return             i += 1             if word.startswith(node[0]i):                 if len(word[i:]) == len(node[0]):                     if node[1]:                         try:                             node[1]['']                             node[1].pop('')                         except KeyError:                             print "Word is not in trie."                         return                     data.pop(word[i-1:i])                     return                 else:                     i += len(node[0])                     data = node[1]             else:                 print "Word is not in trie."                 return       __getitem__ = isWord  __getitem__ x['abc']  
users.get_current_user() user if self.user 
class RequiredFormSet(BaseFormSet):     def __init__(self *args **kwargs):         super(RequiredFormSet self).__init__(*args **kwargs)         for form in self.forms:             form.empty_permitted = False  MyFormSet = formset_factory(MyForm formset=RequiredFormSet)  self.forms[0].empty_permitted False 
setattr(cat 'name' 'mittens')  cat.name = 'mittens'  
map.connect('/' controller='main' action='index') 
u ax.set_yticklabels([u'é' u'ã' u'â'])  
os.py posixpath ntpath path os.path 
var mydict = {   'a': [35643363]   'b': [876534578]   'c': [34578992] }; for (var key in mydict) {   alert(key); }  
bool int &gt;&gt;&gt; issubclass(boolint) True  /* Boolean type a subtype of int */  /* We need to define bool_print to override int_print */ bool_print     fputs(self-&gt;ob_ival == 0 ? "False" : "True" fp);  /* We define bool_repr to return "False" or "True" */ bool_repr     ...  /* We define bool_new to always return either Py_True or Py_False */     ...  // Arithmetic methods -- only so we can override &amp; | ^ bool_as_number     bool_and       /* nb_and */     bool_xor       /* nb_xor */     bool_or        /* nb_or */  PyBool_Type     "bool"     sizeof(PyIntObject)     (printfunc)bool_print          /* tp_print */     (reprfunc)bool_repr            /* tp_repr */     &amp;bool_as_number                /* tp_as_number */     (reprfunc)bool_repr            /* tp_str */     &amp;PyInt_Type                    /* tp_base */     bool_new                       /* tp_new */  
import urllib2 base64  request = urllib2.Request("http://api.foursquare.com/v1/user") base64string = base64.b64encode('%s:%s' % (username password)) request.add_header("Authorization" "Basic %s" % base64string)    result = urllib2.urlopen(request)  
&gt;&gt;&gt; list_a = [1 2 3 4] &gt;&gt;&gt; list_b = [5 6 7 8] &gt;&gt;&gt; zip(list_a list_b) [(1 5) (2 6) (3 7) (4 8)]  &gt;&gt;&gt; list_a = [1 2 3 4] &gt;&gt;&gt; list_b = [5 6 7 8] &gt;&gt;&gt; list(zip(list_a list_b)) [(1 5) (2 6) (3 7) (4 8)]  
[[] for _ in range(4)]          # use xrange in python-2.x  
msvcrt import msvcrt  num = 0 done = False while not done:     print(num)     num += 1      if msvcrt.kbhit():         print "you pressed"msvcrt.getch()"so now i will quit"         done = True  termios import sys import select import tty import termios  def isData():     return select.select([sys.stdin] [] [] 0) == ([sys.stdin] [] [])  old_settings = termios.tcgetattr(sys.stdin) try:     tty.setcbreak(sys.stdin.fileno())      i = 0     while 1:         print(i)         i += 1          if isData():             c = sys.stdin.read(1)             if c == '\x1b':         # x1b is ESC                 break  finally:     termios.tcsetattr(sys.stdin termios.TCSADRAIN old_settings)  import pygame from pygame.locals import *  def display(str):     text = font.render(str True (255 255 255) (159 182 205))     textRect = text.get_rect()     textRect.centerx = screen.get_rect().centerx     textRect.centery = screen.get_rect().centery      screen.blit(text textRect)     pygame.display.update()  pygame.init() screen = pygame.display.set_mode( (640480) ) pygame.display.set_caption('Python numbers') screen.fill((159 182 205))  font = pygame.font.Font(None 17)  num = 0 done = False while not done:     display( str(num) )     num += 1      pygame.event.pump()     keys = pygame.key.get_pressed()     if keys[K_ESCAPE]:         done = True  
list def foo(self lst):     length = len(lst)  foo Foo.foo(list)  
communicate communicate() shell=True shell=False Popen p = subprocess.Popen(["./AO_FelixStrategy_UnitTest"                       "--bats" "31441" "--chix" "12467"                       "--enxutp" "31884" "--turq" "26372"                       "--symbol" "SOGN" "--target_date" '2009-Oct-16']                      stdin=subprocess.PIPE                       stdout=subprocess.PIPE)  p.stdin.write p.stdout.read p.stdout.read p.stdin.write select Popen.communicate AO_FelixStrategy_UnitTest AO_FelixStrategy_UnitTest p.stdin.close() AO_FelixStrategy_UnitTest AO_FelixStrategy_UnitTest p = subprocess.Popen(["./AO_FelixStrategy_UnitTest"                       "--bats" "31441" "--chix" "12467"                       "--enxutp" "31884" "--turq" "26372"                       "--symbol" "SOGN" "--target_date" '2009-Oct-16']                      stdin=subprocess.PIPE                       stdout=subprocess.PIPE) output = p.communicate('S\nL\n')[0] print output  
shell=True PATH # -*- coding: utf-8 -*- import subprocess  def execute(command):     pipe = subprocess.Popen(command stdout=subprocess.PIPE stderr=subprocess.PIPE)     out errs = pipe.communicate()     retcode = pipe.poll()      print "OUT: " + repr(out)     print "ERRS: " + repr(errs)     print "RET: " + str(retcode)     return out   command = ['rsync.exe' '--stats' '-az' '--numeric-ids' '--delete'             '--blocking-io' '--modify-window=2' '--no-group'             '--chmod=u=rwXg=o=' '-e'             'cygnative plink -ssh -2 -batch -pw test'             u'/cygdrive/c/?????'.encode('utf-8')             'vaidab@192.168.1.86:/volatile/backup/vaidab/2010-03-03.15_41_56/'             '--link-dest=../2010-03-03.15_00_57']  execute(command)  
import csv file_data = self.request.get('file_in') file_data_list = file_data.split('\n') file_Reader = csv.reader(file_data_list) for fields in file_Reader:     print row  
&gt;&gt;&gt; def afunc(): ...    a = ['foo' 'bar' 'zot'] ...    b = ('oof' 'rab' 'toz') ...    return ... &gt;&gt;&gt; import dis; dis.dis(afunc)   2           0 LOAD_CONST               1 ('foo')               3 LOAD_CONST               2 ('bar')               6 LOAD_CONST               3 ('zot')               9 BUILD_LIST               3              12 STORE_FAST               0 (a)    3          15 LOAD_CONST               7 (('oof' 'rab' 'toz'))              18 STORE_FAST               1 (b)    4          21 LOAD_CONST               0 (None)              24 RETURN_VALUE &gt;&gt;&gt;  
hay = "The fox jumped up the tree." needle = "umpe"  print hay.replace(needle "&lt;strong&gt;%s&lt;strong&gt;" % needle)  import re  hay = "The fox jUMPed up the tree." needle = "umpe"  regex = re.compile('(%s)' % needle re.I) print regex.sub('&lt;strong&gt;\\1&lt;/strong&gt;' hay)  
bar() foo 
u A 
datetime.timedelta &gt;&gt;&gt; import datetime &gt;&gt;&gt; d1 = datetime.datetime.strptime("00:08:30.291" "%H:%M:%S.%f") &gt;&gt;&gt; d1 datetime.datetime(1900 1 1 0 8 30 291000) &gt;&gt;&gt; d2 datetime.datetime(1900 1 1 0 2 30 291000) &gt;&gt;&gt; dt1 = datetime.timedelta(minutes=d1.minute seconds=d1.second microseconds=d1.microsecond) &gt;&gt;&gt; dt2 = datetime.timedelta(minutes=d2.minute seconds=d2.second microseconds=d2.microsecond) &gt;&gt;&gt; fin = dt1 + dt2 &gt;&gt;&gt; fin datetime.timedelta(0 660 582000) &gt;&gt;&gt; str(fin) '0:11:00.582000'  sum 
import __init__ class UnsatisfiedExample(object):     def __init__(self):         try:             import flibbertigibbet         except ImportError:             raise RuntimeError("You need to install flibbertigibbet-py")         super(UnsatisfiedExample self).__init__()  
data = [[item.strip() for item in line.rstrip('\r\n').split('\t')] for line in open('input.txt')]  data = [] for line in open('input.txt'):     items = line.rstrip('\r\n').split('\t')   # strip new-line characters and split on column delimiter     items = [item.strip() for item in items]  # strip extra whitespace off data items     data.append(items)  
get put 
def addone(item alist=[]):   alist.append(item)   return alist  addone static None alist = alist.append(item)  alist alist None append for i in range(10):     Button(text="Button #%s" % i            click=lambda: say("I'm #%s!" % i))  say #9 i lambda            click=lambda i=i: say("I'm #%s!" % i))  lambda i 
StringIO o.getvalue() zf.write('picture.jpg') 
pixbuf = pixbuf.add_alpha(True 0xFF 0xFF 0xFF)  
&lt;div tal:replace="structure provider:plone.resourceregistries.styles" /&gt;  &lt;div tal:replace="structure provider:plone.resourceregistries.scripts" /&gt; &lt;div tal:replace="structure provider:plone.resourceregistries.kineticstylesheets" /&gt;  
listA auxdict = dict((d['name'] d['val']) for d in listA)  changed = [d['name'] for d in listB             if d['name'] in auxdict and d['val'] != auxdict[d['name']]]  
Done Done Done 
import operator  auths = Author.objects.order_by('-score')[:30] ordered = sorted(auths key=operator.attrgetter('last_name'))  QuerySet ordering order_by ordered_authors = Author.objects.order_by('-score' 'last_name')[:30]  score last_name "-score" 
def log(func):   def wrapper(*a **kw):     return func(*a **kw)   wrapper.func = func   return wrapper  @log def f():   print 'f'  print f.func  
&gt;&gt;&gt; import datetime &gt;&gt;&gt; today = datetime.datetime.today() &gt;&gt;&gt; today datetime.datetime(2010 3 9 18 25 19 474362) &gt;&gt;&gt; today + datetime.timedelta(days=1) datetime.datetime(2010 3 10 18 25 19 474362)  
def weighted_avg_and_std(values weights):     """     Return the weighted average and standard deviation.      values weights -- Numpy ndarrays with the same shape.     """     average = numpy.average(values weights=weights)     # Fast and numerically precise:     variance = numpy.average((values-average)**2 weights=weights)     return (average math.sqrt(variance))  
FileApp def _send_file_response(self filepath):     user_filename = '_'.join(filepath.split('/')[-2:])     file_size = os.path.getsize(filepath)      headers = [('Content-Disposition' 'attachment; filename=\"' + user_filename + '\"')                ('Content-Type' 'text/plain')                ('Content-Length' str(file_size))]      from paste.fileapp import FileApp     fapp = FileApp(filepath headers=headers)      return fapp(request.environ self.start_response)  
&gt;&gt;&gt; from operator import itemgetter &gt;&gt;&gt; p = [{'fn':'bill'} {'fn':'Bob'} {'fn':'bobby'}] &gt;&gt;&gt; sorted(p key=itemgetter('fn')) [{'fn': 'Bob'} {'fn': 'bill'} {'fn': 'bobby'}] &gt;&gt;&gt; sorted(p key=lambda x: x['fn'].lower()) [{'fn': 'bill'} {'fn': 'Bob'} {'fn': 'bobby'}] &gt;&gt;&gt;  
Ego.objects.all().select_related.order_by("auth_user.first_name")  
rgx = "&lt;([a-zA-Z_0-9]*)&gt;" * + 
promotion_items = {     'one': {'remaining_pcs': 100 'discount_ratio': 10}     'two': {'remaining_pcs': 200 'discount_ratio': 20} } def bypcs(k):   return promotion_items[k]['remaining_pcs'] byrempcs = sorted(promotion_items key=bypcs) def bydra(k):   return promotion_items[k]['discount_ratio'] bydiscra = sorted(promotion_items key=bydra)  
&gt;&gt;&gt; import BeautifulSoup &gt;&gt;&gt; html = '&lt;b&gt;&lt;a href="http://foo.com/"&gt;foo&lt;/a&gt;&lt;/b&gt;&lt;img src="http://foo.com/bar.jpg" /&gt;' &gt;&gt;&gt; bs = BeautifulSoup.BeautifulSoup(html)   &gt;&gt;&gt; bs.findAll(text=True) [u'foo']  ''.join(thatlist) 
element for subelement in element.GetElementsByTagName("field"):     if subelement.hasAttribute("frame.len"):         do_something()  &lt;field&gt; xmlfile = open("myfile.xml") for line in xmlfile:     match = re.search(r'&lt;field\s+name="frame.len"\s+([^&gt;]+)/&gt;' line):     if match:         result = match.group(1)         do_something(result)  &lt;field&gt; filedump = open("myfile.xml").read() for match in re.finditer(r'&lt;field\s+name="frame.len"\s+([^&gt;]+)/&gt;' filedump):     result = match.group(1)     do_something(result)  result frame.len frame.len 
u'f\xa4hre' 0xa4 ä ä 0xa4 ?? u'\u8f6e\u6e21' '\xe8\xbd\xae\xe6\xb8\xa1' 
__init__ __init__ def __init__(self lalala *args **kwargs):    # do something with lalala here...    super(test self).__init__(*args **kwargs)    # ...or here  primary_key=True class test(Base):     __tablename__ = 'test'     id = Column(Integer primary_key=True)     id2 = Column(String index=True unique=True)     title = Column(String)      # def __init__(self) is not necessary  
{% for ab in mylist %}     {{ab.0}}     {{ab.1}} {% endfor %}  zip for 
cur.execute("""   INSERT INTO locations_musiq1(location location_title)    SELECT %s %s WHERE NOT EXISTS        (SELECT location_title FROM locations_musiq1 WHERE location_title=%s);   """ (data.entries[i].title data.entries[i].summary data.entries[i].summary))  
app.initialize() import Tkinter  class simpleapp_tk(Tkinter.Tk):     def __init__(selfparent):         Tkinter.Tk.__init__(selfparent)         self.parent=parent     def initialize(self):         self.grid()          self.entry=Tkinter.Entry(self)         self.entry.grid(column=0row=0sticky='EW')         self.entry.bind("&lt;Return&gt;"self.OnPressEnter)          button=Tkinter.Button(selftext="Post it!"command=self.OnButtonClick)         # the text keyword argument was mis-typed as 'test'          button.grid(column=1row=0)          label=Tkinter.Label(selfanchor="w"fg="white"bg="blue")         label.grid(column=0row=1columnspan=2sticky='EW')         # the . in label.grid was mis-typed as '='          self.grid_columnconfigure(0weight=1)      def OnButtonClick(self):         print "you clicked the button!"      def OnPressEnter(selfevent):         print "you pressed enter!"  if __name__=="__main__":     app=simpleapp_tk(None)     app.title('poster')     app.initialize() # you forgot this     app.mainloop()  
query.[outer]join expression.[outer]join onclause q = db_session.query(Device ParentDevice)\     .outerjoin(                   (ParentDevice Device.parent_device_id==ParentDevice.device_id)               )  
''.join(soup.findAll(text=True))  
module_name def get_dir(module_name):     import osimp     (file pathname description) = imp.find_module(module_name)     return os.path.dirname(pathname)  print get_dir('os')  C:\Python26\lib  def foo():     print 'foo'  import foo import os print os.path.dirname(foo.__file__) foo.foo()  C:\Documents and Settings\xxx\My Documents foo  
def removeHtmlTags(page):     p = re.compile(r'''&lt;(?:"[^"]*"['"]*|'[^']*'['"]*|[^'"&gt;])+&gt;''')     return p.sub('' page)  
lazy_gettext() _ = lazy_gettext _() 
from django import db  db.reset_queries()  
http://www.example.com/script?par=1&amp;par=6&amp;par=5  par par[] u'...' u'...'.encode('utf-8') u ' print repr 
sys.modules sys.modules[foo.__module__].__file__  
PolarAxes import numpy as N import matplotlib.pyplot as P  from matplotlib.projections import PolarAxes register_projection from matplotlib.transforms import Affine2D Bbox IdentityTransform  class NorthPolarAxes(PolarAxes):     '''     A variant of PolarAxes where theta starts pointing north and goes     clockwise.     '''     name = 'northpolar'      class NorthPolarTransform(PolarAxes.PolarTransform):         def transform(self tr):             xy   = N.zeros(tr.shape N.float_)             t    = tr[: 0:1]             r    = tr[: 1:2]             x    = xy[: 0:1]             y    = xy[: 1:2]             x[:] = r * N.sin(t)             y[:] = r * N.cos(t)             return xy          transform_non_affine = transform          def inverted(self):             return NorthPolarAxes.InvertedNorthPolarTransform()      class InvertedNorthPolarTransform(PolarAxes.InvertedPolarTransform):         def transform(self xy):             x = xy[: 0:1]             y = xy[: 1:]             r = N.sqrt(x*x + y*y)             theta = N.arctan2(y x)             return N.concatenate((theta r) 1)          def inverted(self):             return NorthPolarAxes.NorthPolarTransform()      def _set_lim_and_transforms(self):         PolarAxes._set_lim_and_transforms(self)         self.transProjection = self.NorthPolarTransform()         self.transData = (             self.transScale +              self.transProjection +              (self.transProjectionAffine + self.transAxes))         self._xaxis_transform = (             self.transProjection +             self.PolarAffine(IdentityTransform() Bbox.unit()) +             self.transAxes)         self._xaxis_text1_transform = (             self._theta_label1_position +             self._xaxis_transform)         self._yaxis_transform = (             Affine2D().scale(N.pi * 2.0 1.0) +             self.transData)         self._yaxis_text1_transform = (             self._r_label1_position +             Affine2D().scale(1.0 / 360.0 1.0) +             self._yaxis_transform)  register_projection(NorthPolarAxes)  angle = N.arange(0 360 10 dtype=float) * N.pi / 180.0 arbitrary_data = (N.abs(N.sin(angle)) + 0.1 *      (N.random.random_sample(size=angle.shape) - 0.5))  P.clf() P.subplot(1 1 1 projection='northpolar') P.plot(angle arbitrary_data) P.show()  
type single_trailing_underscore_ Tkinter.Toplevel(master class_='ClassName')  
tight_layout() import matplotlib.pyplot as plt import matplotlib.transforms as mtransforms fig = plt.figure() ax = fig.add_subplot(111) ax.plot(range(10)) ax.set_yticks((257)) labels = ax.set_yticklabels(('really really really' 'long' 'labels'))  def on_draw(event):    bboxes = []    for label in labels:        bbox = label.get_window_extent()        # the figure transform goes from relative coords-&gt;pixels and we        # want the inverse of that        bboxi = bbox.inverse_transformed(fig.transFigure)        bboxes.append(bboxi)     # this is the bbox that bounds all the bboxes again in relative    # figure coords    bbox = mtransforms.Bbox.union(bboxes)    if fig.subplotpars.left &lt; bbox.width:        # we need to move it over        fig.subplots_adjust(left=1.1*bbox.width) # pad a little        fig.canvas.draw()    return False  fig.canvas.mpl_connect('draw_event' on_draw)  plt.show()  
re.search re.match re.finditer re.findall 
from warnings import warn  class Foo(object):     """     Instantiating Foo always gives a warning:      &gt;&gt;&gt; import sys; sys.stderr = sys.stdout     &gt;&gt;&gt; foo = Foo() # doctest:+ELLIPSIS     /.../testdocs.py:14: UserWarning: Boo!       warn("Boo!" UserWarning)     """      def __init__(self):         warn("Boo!" UserWarning)  if __name__ == '__main__':     import doctest     doctest.testmod()  
&gt;&gt;&gt; import matplotlib &gt;&gt;&gt; matplotlib.matplotlib_fname()  
#!/usr/bin/perl (my$d=q[AA                GTCAGTTCCT   CGCTATGTA                 ACACACACCA     TTTGTGAGT                ATGTAACATA       CTCGCTGGC              TATGTCAGAC         AGATTGATC          GATCGATAGA           ATGATAGATC     GAACGAGTGA             TAGATAGAGT GATAGATAGA               GAGAGA GATAGAACGA                 TC GATAGAGAGA                  TAGATAGACA G                ATCGAGAGAC AGATA              GAACGACAGA TAGATAGAT            TGAGTGATAG    ACTGAGAGAT          AGATAGATTG        ATAGATAGAT        AGATAGATAG           ACTGATAGAT      AGAGTGATAG             ATAGAATGAG    AGATAGACAG               ACAGACAGAT   AGATAGACAG               AGAGACAGAT   TGATAGATAG             ATAGATAGAT   TGATAGATAG           AATGATAGAT    AGATTGAGTG        ACAGATCGAT      AGAACCTTTCT   CAGTAACAGT        CTTTCTCGC TGGCTTGCTT          TCTAA CAACCTTACT            G ACTGCCTTTC            TGAGATAGAT CGA          TAGATAGATA GACAGAC        AGATAGATAG  ATAGAATGAC      AGACAGAGAG      ACAGAATGAT    CGAGAGACAG          ATAGATAGAT   AGAATGATAG             ACAGATAGAC   AGATAGATAG               ACAGACAGAT   AGACAGACTG                 ATAGATAGAT    AGATAGATAG                 AATGACAGAT      CGATTGAATG               ACAGATAGAT        CGACAGATAG             ATAGACAGAT          AGAGTGATAG          ATTGATCGAC            TGATTGATAG      ACTGATTGAT              AGACAGATAG  AGTGACAGAT                CGACAGA TAGATAGATA                  GATA GATAGATAG                     ATAGACAGA G                   AGATAGATAG ACA                 GTCGCAAGTTC GCTCACA ])=~s/\s+//g;%a=map{chr $_=&gt;$i++}658467 71;$p=join$;keys%a;while($d=~/([$p]{4})/g ){next if$j++%96&gt;=16;$c=0;for$d(0..3){$c+= $a{substr($1$d1)}*(4**$d)}$perl.=chr $c}              eval $perl;  
on open location this_URL     do shell script "/scripts/runLocalCommand.py '" &amp; this_URL &amp; "'" end open location  do shell script "tcsh -c \"/scripts/localCommand.py '" &amp; this_URL &amp; "'\""  &lt;key&gt;CFBundleIdentifier&lt;/key&gt; &lt;string&gt;com.mycompany.AppleScript.LocalCommand&lt;/string&gt; &lt;key&gt;CFBundleURLTypes&lt;/key&gt; &lt;array&gt;   &lt;dict&gt;     &lt;key&gt;CFBundleURLName&lt;/key&gt;     &lt;string&gt;LocalCommand&lt;/string&gt;     &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;     &lt;array&gt;       &lt;string&gt;local&lt;/string&gt;     &lt;/array&gt;   &lt;/dict&gt; &lt;/array&gt;  &lt;/dict&gt; &lt;/plist&gt;  com.mycompany.AppleScript.LocalCommand LocalCommand local  #!/usr/bin/env python import sys import urllib arg = sys.argv[1] handler fullPath = arg.split(":" 1) path fullArgs = fullPath.split("?" 1) action = path.strip("/") args = fullArgs.split("&amp;") params = {} for arg in args:     key value = map(urllib.unquote arg.split("=" 1))     params[key] = value  
".*\" .* . * . \. . \ . 
def sum(self):     return self.a + self.b  NameError 
== is 
logRequests=False server = SimpleXMLRPCServer.SimpleXMLRPCServer((host port) logRequests=False)  
inspect.getmodule(f) sys.modules.get(object.__module__) inspect python /foo/bar/baz/bla.py  bla.py __main__ from import sys.path /foo/bar /foo/bar/baz sys.path /foo/bar/baz/__init__.py from baz.bla import f from bla import f sys.path /foo/bar/baz sys.path /fee/fie/foo /fee/fie/foo/bla.py from baz.bla import f f.__module__ baz.bla 
def rollback(self):     """Roll back to the start of any pending transaction."""     if self._cnx:         if self._tnx:             self._tnx = False             try:                 self._cnx.source().execute("ROLLBACK")             except Exception:                 raise OperationalError("can't rollback")     else:         raise OperationalError("connection has been closed")  connections[instance].rollback() connections[instance]._tnx = False connections[instance]._cnx.source().execute("ROLLBACK")  
next(gen) 
smbmount mkdir WindowsShare # Do this only once smbmount \\server\share /home/me/WindowsShare -ousername=...password=... ls /home/me/WindowsShare smbumount /home/me/WindowsShare  
stdout stdout stdout stdout 
any(Hamming_distance(genome[x:x+25] sequence) == 1 for x in xrange(len(genome)))  def Hamming_check_0_or_1(genome posn sequence):     errors = 0     for i in xrange(25):         if genome[posn+i] != sequence[i]:             errors += 1             if errors &gt;= 2:                 return errors     return errors   # coding: ascii  from collections import defaultdict import re  _DEBUG = 0   # "Fast Text Searching with Errors" by Sun Wu and Udi Manber # TR 91-11 Dept of Computer Science University of Arizona June 1991. # http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.20.8854  def WM_approx_Ham1_search(pattern text):     """Generate (Hamming_dist start_offset)     for matches with distance 0 or 1"""     m = len(pattern)     S_table = defaultdict(int)     for i c in enumerate(pattern):         S_table[c] |= 1 &lt;&lt; i     R0 = 0     R1 = 0     mask = 1 &lt;&lt; (m - 1)     for j c in enumerate(text):         S = S_table[c]         shR0 = (R0 &lt;&lt; 1) | 1         R0 = shR0 &amp; S         R1 = ((R1 &lt;&lt; 1) | 1) &amp; S | shR0         if _DEBUG:             print "j= %2d msk=%s S=%s R0=%s R1=%s" \                 % tuple([j] + map(bitstr [mask S R0 R1]))         if R0 &amp; mask: # exact match             yield 0 j - m + 1         elif R1 &amp; mask: # match with one substitution             yield 1 j - m + 1  if _DEBUG:      def bitstr(num mlen=8):        wstr = ""        for i in xrange(mlen):           if num &amp; 1:              wstr = "1" + wstr           else:              wstr = "0" + wstr           num &gt;&gt;= 1        return wstr  def Ham_dist(s1 s2):     """Calculate Hamming distance between 2 sequences."""     assert len(s1) == len(s2)     return sum(c1 != c2 for c1 c2 in zip(s1 s2))  def long_check(pattern text):     """Naively and understandably generate (Hamming_dist start_offset)     for matches with distance 0 or 1"""     m = len(pattern)     for i in xrange(len(text) - m + 1):         d = Ham_dist(pattern text[i:i+m])         if d &lt; 2:             yield d i  def Paul_McGuire_regex(pattern text):     searchSeqREStr = (         '('         + pattern         + ')|('         + ')|('.join(             pattern[:i]             + "[ACTGN]".replace(c'')             + pattern[i+1:]             for ic in enumerate(pattern)             )         + ')'         )     searchSeqRE = re.compile(searchSeqREStr)     for match in searchSeqRE.finditer(text):         locn = match.start()         dist = int(bool(match.lastindex - 1))         yield dist locn   if __name__ == "__main__":      genome1 = "TTTACGTAAACTAAACTGTAA"     #         01234567890123456789012345     #                   1         2      tests = [         (genome1 "ACGT ATGT ACTA ATCG TTTT ATTA TTTA")         ("T" * 10 "TTTT")         ("ACGTCGTAAAA" "TCGT") # partial match can shadow an exact match         ]      nfailed = 0     for genome patterns in tests:         print "genome:" genome         for pattern in patterns.split():             print pattern             a1 = list(WM_approx_Ham1_search(pattern genome))             a2 = list(long_check(pattern genome))             a3 = list(Paul_McGuire_regex(pattern genome))             print a1             print a2             print a3             print a1 == a2 a2 == a3             nfailed += (a1 != a2 or a2 != a3)     print "***" nfailed  
for x in 'bcdef':     t = array.array('B' map( operator.xor mydict['a'] mydict[x] ) )     f1 = open(''.join('a'x)'wb')     t.tofile(f1)     f1.close()  
configure configure gen-make.py configure 
select_related 
cmd.exe cmd.exe ñ '\xc3\xb1' cmd.exe \xa4 cmd.exe &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.stdin.encoding 'cp437'  &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.stdin.encoding 'utf-8'  
designs = Design.objects.filter(author__user__profile__screenname__icontains=w)  
__init__ Base class Child(Base):     def __init__(self something_else):         Base.__init__(self value = 20)         self.something_else = something_else  super 
&gt;&gt;&gt; re.findall(r"(?:password\sis\s+|password\:\s+)(\S+)" a) ['GOD' 'G0D']  
: 
request.GET q if request.method == 'GET' and 'q' in request.GET:  q None q = request.GET['q'] if q is not None and q != '':     # Do processing here  request.GET.get('q' None) 'q' request.GET get None False '' False True q = request.GET['q'] if q:     # Do processing here  dict.get 
unicodedata &gt;&gt;&gt; import unicodedata &gt;&gt;&gt; foo = u'??????????' &gt;&gt;&gt; unicodedata.normalize('NFKC' foo) u'1234567890'  
LitAgent.objects.filter(author__book__year_published=2006)  
"c:sourcedir" "c:/sourcedir" os.path.join("/" "c:" "sourcedir") os.path.join("c:/" "sourcedir")  
if 
foo hasattr() hasattr() if not hasattr(spam'foo'):     do_something()  hasattr() getattr(object name) hasattr() hasattr() spam foo spam foo if hasattr(spam 'foo'):     bar = spam.foo else:     do_somthing()  
None 
d = zlib.decompressobj(16+zlib.MAX_WBITS) CHUNKSIZE=1024 
truncate f = open(filename 'r+') text = f.read() text = re.sub('foobar' 'bar' text) f.seek(0) f.write(text) f.truncate() f.close()  open with open(filename 'r+') as f:     text = f.read()     text = re.sub('foobar' 'bar' text)     f.seek(0)     f.write(text)     f.truncate()  
line.split() each words for i in range(len(words)):     words[i]=words[i].rstrip()  words=map(str.rstripwords)  words=[x.rstrip() for x in line.split("\t")]  words=re.findall("[^\t]+"line)  
data=open("file").read().split("\n\n") for rec in data:     if "have paid" in rec:          print rec.split("have paid")[0]  
map(int ["1" "2" "3"])  map list(map(int ["1" "2" "3"]))  map 
bar.num += 1 bar.num = bar.num + 1 Foo.num bar.num 
r'(?m)^#define (?:.*\\\r?\n)*.*$'  (?:.*\\\r?\n)* .*$ 
import _winreg  ################################################################################  class HKEY:     'Hive Constants'     CLASSES_ROOT = -2147483648     CURRENT_USER = -2147483647     LOCAL_MACHINE = -2147483646     USERS = -2147483645     CURRENT_CONFIG = -2147483643  class KEY:     'Mode Constants'     QUERY_VALUE = 1     SET_VALUE = 2     CREATE_SUB_KEY = 4     ENUMERATE_SUB_KEYS = 8     NOTIFY = 16     CREATE_LINK = 32     WRITE = 131078     EXECUTE = 131097     READ = 131097     ALL_ACCESS = 983103  class REG:     'Type Constants'     NONE = 0     SZ = 1     EXPAND_SZ = 2     BINARY = 3     DWORD = 4     DWORD_BIG_ENDIAN = 5     LINK = 6     MULTI_SZ = 7     RESOURCE_LIST = 8     FULL_RESOURCE_DESCRIPTOR = 9     RESOURCE_REQUIREMENTS_LIST = 10     QWORD = 11  ################################################################################  class _Value(object):      '_Value(value) -&gt; _Value'      def __init__(self value):         'Initialize the _Value object.'         self.__value = value         self.__repr = '%s(%r)' % (self.__class__.__name__ value)      def __repr__(self):         'Return the object\'s representation.'         return self.__repr      def __get_value(self):         'Private class method.'         return self.__value      value = property(__get_value doc='Value of this object.')  class REG_NONE(_Value): pass class REG_SZ(_Value): pass class REG_EXPAND_SZ(_Value): pass class REG_BINARY(_Value): pass class REG_DWORD(_Value): pass class REG_DWORD_BIG_ENDIAN(_Value): pass class REG_LINK(_Value): pass class REG_MULTI_SZ(_Value): pass class REG_RESOURCE_LIST(_Value): pass class REG_FULL_RESOURCE_DESCRIPTOR(_Value): pass class REG_RESOURCE_REQUIREMENTS_LIST(_Value): pass class REG_QWORD(_Value): pass  ################################################################################  class Registry(object):      'Registry([computer]) -&gt; Registry'      def __init__(self computer=None):         'Initialize the Registry object.'         self.__computer = computer         self.__repr = 'Registry()' if computer is None else 'Registry(%r)' % computer      def __repr__(self):         'Return the object\'s representation.'         return self.__repr      def __iter__(self):         'Iterate over hives defined in HKEY.'         return (Key(key computer=self.__computer) for key in map(HKEY.__dict__.__getitem__ filter(str.isupper dir(HKEY))))      def __HKEY_CLASSES_ROOT(self):         'Private class method.'         return Key(HKEY.CLASSES_ROOT computer=self.__computer)      def __HKEY_CURRENT_USER(self):         'Private class method.'         return Key(HKEY.CURRENT_USER computer=self.__computer)      def __HKEY_LOCAL_MACHINE(self):         'Private class method.'         return Key(HKEY.LOCAL_MACHINE computer=self.__computer)      def __HKEY_USERS(self):         'Private class method.'         return Key(HKEY.USERS computer=self.__computer)      def __HKEY_CURRENT_CONFIG(self):         'Private class method.'         return Key(HKEY.CURRENT_CONFIG computer=self.__computer)      HKEY_CLASSES_ROOT = property(__HKEY_CLASSES_ROOT doc='The CLASSES_ROOT hive.')     HKEY_CURRENT_USER = property(__HKEY_CURRENT_USER doc='The CURRENT_USER hive.')     HKEY_LOCAL_MACHINE = property(__HKEY_LOCAL_MACHINE doc='The LOCAL_MACHINE hive.')     HKEY_USERS = property(__HKEY_USERS doc='The USERS hive.')     HKEY_CURRENT_CONFIG = property(__HKEY_CURRENT_CONFIG doc='The CURRENT_CONFIG hive.')  ################################################################################  class Key(object):      '''Key(key[ subkey][ mode][ computer]) -&gt; Key      Key(key) -&gt; Key     Key(key subkey) -&gt; Key     Key(key mode=value) -&gt; Key     Key(key subkey mode) -&gt; Key     Key(key computer=value) -&gt; Key     Key(key subkey computer=value) -&gt; Key     Key(key mode=value computer=value) -&gt; Key     Key(key subkey mode computer) -&gt; Key'''      def __init__(self key subkey=None mode=None computer=None):         'Initialize the Key object.'         if isinstance(key (int _winreg.HKEYType)) and subkey is None and mode is None and computer is None:             self.__key = _winreg.OpenKey(key '')         elif isinstance(key Key) and subkey is None and mode is None and computer is None:             self.__key = _winreg.OpenKey(key.__key '')         elif isinstance(key (int _winreg.HKEYType)) and isinstance(subkey str) and mode is None and computer is None:             self.__key = _winreg.OpenKey(key subkey)         elif isinstance(key Key) and isinstance(subkey str) and mode is None and computer is None:             self.__key = _winreg.OpenKey(key.__key subkey)         elif isinstance(key (int _winreg.HKEYType)) and subkey is None and isinstance(mode int) and computer is None:             self.__key = _winreg.OpenKey(key '' 0 mode)         elif isinstance(key Key) and subkey is None and isinstance(mode int) and computer is None:             self.__key = _winreg.OpenKey(key.__key '' 0 mode)         elif isinstance(key (int _winreg.HKEYType)) and isinstance(subkey str) and isinstance(mode int) and computer is None:             self.__key = _winreg.OpenKey(key subkey 0 mode)         elif isinstance(key Key) and isinstance(subkey str) and isinstance(mode int) and computer is None:             self.__key = _winreg.OpenKey(key.__key subkey 0 mode)         elif isinstance(key int) and subkey is None and mode is None and isinstance(computer str):             self.__key = _winreg.ConnectRegistry(computer key)         elif isinstance(key int) and isinstance(subkey str) and mode is None and isinstance(computer str):             self.__key = _winreg.OpenKey(_winreg.ConnectRegistry(computer key) subkey)         elif isinstance(key int) and subkey is None and isinstance(mode int) and isinstance(computer str):             self.__key = _winreg.OpenKey(_winreg.ConnectRegistry(computer key) '' 0 mode)         elif isinstance(key int) and isinstance(subkey str) and isinstance(mode int) and isinstance(computer str):             self.__key = _winreg.OpenKey(_winreg.ConnectRegistry(computer key) subkey 0 mode)         else:             raise TypeError 'Please check documentation.'         self.__keys = Keys(self.__key)         self.__values = Values(self.__key)         self.__info = Info(self.__key)         self.__repr = 'Key(%s)' % ' '.join([repr(key)] + ['%s=%r' % (key value) for key value in zip(('subkey' 'mode' 'computer') (subkey mode computer)) if value is not None])      def __repr__(self):         'Return the object\'s representation.'         return self.__repr      def save(self file_name):         'Save this key to file.'         _winreg.SaveKey(self.__key file_name)      def load(self subkey file_name):         'Load subkey from file.'         _winreg.LoadKey(self.__key subkey file_name)      def __get_keys(self):         'Private class method.'         return self.__keys      def __set_keys(self keys):         'Private class method.'         if isinstance(keys str):             _winreg.CreateKey(self.__key keys)         elif isinstance(keys (list tuple)):             for key in keys:                 self.keys = key         else:             raise TypeError 'Key Could Not Be Created'      def __del_keys(self):         'Private class method.'         try:             while True:                 _winreg.DeleteKey(self.__key _winreg.EnumKey(self.__key 0))         except EnvironmentError:             pass      def __get_values(self):         'Private class method.'         return self.__values      def __set_values(self values):         'Private class method.'         if isinstance(values str):             _winreg.SetValueEx(self.__key values 0 REG.SZ _winreg.QueryValue(self.__key ''))         elif isinstance(values (list tuple)):             for value in values:                 self.values = value         else:             raise TypeError 'Value Could Not Be Created'      def __del_values(self):         'Private class method.'         try:             while True:                 _winreg.DeleteValue(self.__key _winreg.EnumValue(self.__key 0)[0])         except EnvironmentError:             pass      def __get_value(self):         'Private class method.'         return _winreg.QueryValue(self.__key '')      def __set_value(self value):         'Private class method.'         _winreg.SetValue(self.__key '' REG.SZ value)      def __del_value(self):         'Private class method.'         _winreg.DeleteValue(self.__key '')      def __get_info(self):         'Private class method.'         return self.__info      keys = property(__get_keys __set_keys __del_keys 'Keys of this key.')     values = property(__get_values __set_values __del_values 'Values of this key.')     value = property(__get_value __set_value __del_value 'Value of this key.')     info = property(__get_info doc='Information about this key.')  ################################################################################  class Keys(object):      'Keys(key) -&gt; Keys'      def __init__(self key):         'Initialize the Keys object.'         self.__key = key         self.__repr = 'Keys(%r)' % key      def __repr__(self):         'Return the object\'s representation.'         return self.__repr      def __len__(self):         'Return the number of keys.'         return _winreg.QueryInfoKey(self.__key)[0]      def __getitem__(self key):         'Return the specified key.'         return Key(self.__key key)      def __setitem__(self key value):         'Assign the item to a key.'         key = Key(_winreg.CreateKey(self.__key key) mode=KEY.ALL_ACCESS)         for name in value.values:             key.values[name] = value.values[name]         for name in value.keys:             key.keys[name] = value.keys[name]      def __delitem__(self key):         'Delete the specified key.'         _winreg.DeleteKey(self.__key key)      def __iter__(self):         'Iterate over the key names.'         return iter(tuple(_winreg.EnumKey(self.__key index) for index in xrange(_winreg.QueryInfoKey(self.__key)[0])))      def __contains__(self item):         'Check for a key\'s existence.'         item = item.lower()         for index in xrange(_winreg.QueryInfoKey(self.__key)[0]):             if _winreg.EnumKey(self.__key index).lower() == item:                 return True         return False  ################################################################################  class Values(object):      'Values(key) -&gt; Values'      TYPES = REG_NONE REG_SZ REG_EXPAND_SZ REG_BINARY REG_DWORD REG_DWORD_BIG_ENDIAN REG_LINK REG_MULTI_SZ REG_RESOURCE_LIST REG_FULL_RESOURCE_DESCRIPTOR REG_RESOURCE_REQUIREMENTS_LIST REG_QWORD      def __init__(self key):         'Initialize the Values object.'         self.__key = key         self.__repr = 'Values(%r)' % key      def __repr__(self):         'Return the object\'s representation.'         return self.__repr      def __len__(self):         'Return the number of values.'         return _winreg.QueryInfoKey(self.__key)[1]      def __getitem__(self key):         'Return the specified value.'         item_value item_type = _winreg.QueryValueEx(self.__key key)         return self.TYPES[item_type](item_value)      def __setitem__(self key value):         'Assign the item to a value.'         if isinstance(value self.TYPES):             _winreg.SetValueEx(self.__key key 0 list(self.TYPES).index(value.__class__) value.value)         else:             _winreg.SetValueEx(self.__key key 0 _winreg.QueryValueEx(self.__key key)[1] value)      def __delitem__(self key):         'Delete the specified value.'         _winreg.DeleteValue(self.__key key)      def __iter__(self):         'Iterate over the value names.'         return iter(tuple(_winreg.EnumValue(self.__key index)[0] for index in xrange(_winreg.QueryInfoKey(self.__key)[1])))      def __contains__(self item):         'Check for a value\'s existence.'         item = item.lower()         for index in xrange(_winreg.QueryInfoKey(self.__key)[1]):             if _winreg.EnumValue(self.__key index)[0].lower() == item:                 return True         return False  ################################################################################  class Info(object):      'Info(key) -&gt; Info'      def __init__(self key):         'Initialize the Info object.'         self.__key = key         self.__repr = 'Info(%r)' % key      def __repr__(self):         'Return the object\'s representation.'         return self.__repr      def __get_keys(self):         'Private class method.'         return _winreg.QueryInfoKey(self.__key)[0]      def __get_values(self):         'Private class method.'         return _winreg.QueryInfoKey(self.__key)[1]      def __get_modified(self):         'Private class method.'         return _winreg.QueryInfoKey(self.__key)[2]      def __get_difference(self):         'Private class method.'         return _time.time() + 11644473600.0 - self.modified / 10000000.0      keys = property(__get_keys doc='Number of keys.')     values = property(__get_values doc='Number of values.')     modified = property(__get_modified doc='Time last modified.')     difference = property(__get_difference doc='Seconds since modified.')  ################################################################################  if __name__ == '__main__':     def echo(key prefix=''):         for name in key.values:             print '    ' + name + ' = ' + repr(key.values[name])         for name in key.keys:             print prefix + '\\' + name             echo(key.keys[name] prefix + '\\' + name)     key = '''\ SOFTWARE\\Network Associates\\TVD\\Shared Components\\\ On Access Scanner\\McShield\\Configuration\\Default'''     server_list = open('server_test.txt')     for computer in server_list:         echo(Registry(computer).HKEY_LOCAL_MACHINE.keys[key])     server_list.close()  
&gt;&gt;&gt; a=['1''2''3''4']; b=['2''3''4''5'] &gt;&gt;&gt; a = set(a) &gt;&gt;&gt; b = set(b) &gt;&gt;&gt; a &amp; b set(['3' '2' '4']) &gt;&gt;&gt; a - b set(['1']) &gt;&gt;&gt; b - a set(['5']) &gt;&gt;&gt;  
import itertools  gen = iter([123]) peek = gen.next() print list(itertools.chain([peek] gen))  
setattr(my_class_instance 'attr_name' attr_value)  
def deleteitem():   showlist()    with open("todo.txt") as f:     lines = f.readlines()   if len(lines) == 0:  # completely empty file     return  # handle appropriately   prompt = "Enter number to delete (1-%d) or 0 to abort: " % len(lines)   while True:     input = raw_input(prompt)     try:       input = int(input 10)     except ValueError:       print "Invalid input."     else:       if 0 &lt;= input &lt;= len(lines):         break       print "Input out of range."   if input == 0:     return   input -= 1  # adjust from [1len] to [0len)    #del lines[input]  # if you want to remove that line completely   lines[input] = "\n"  # or just make that line blank (what you had)    with open("todo.txt" "w") as f:     f.writelines(lines)    showlist()  
Employee.objects.select_related()  
class Thing(object):     x = 1 something = Thing() something.y = something.x  __dict__ object.__setattr__ 
if request.method == 'POST':     form = ProgrammeForm(user=request.user data=request.POST)     if form.is_valid():         form.save() else: ##this is the changge     form = ProgrammeForm(request.user) return render_to_response('form.html' {'form': form })   
for k in s[i:i+60]:     req.write('&lt;td&gt;%s&lt;/td&gt;' % k) req.write('&lt;/tr&gt;')  
import xmlrpclib httplib  class TimeoutTransport(xmlrpclib.Transport):     timeout = 10.0     def set_timeout(self timeout):         self.timeout = timeout     def make_connection(self host):         h = httplib.HTTPConnection(host timeout=self.timeout)         return h  t = TimeoutTransport() t.set_timeout(20.0) server = xmlrpclib.Server('http://time.xmlrpc.com/RPC2' transport=t)  
import weakref  class A(object):   _get_obj_cache = weakref.WeakValueDictionary()   @classmethod   def get_obj(cls identifier):     cache = cls._get_obj_cache     obj = cache.get((cls identifier))     if obj is None:       obj = cache[(cls identifier)] = cls(identifier)     return obj  class B(A):   pass  cls(identifier) 
In [1]: L = ['A' 'B' 'C'] In [2]: " ".join(L) Out[2]: 'A B C'  
public static IEnumerable&lt;TResult&gt; Zip&lt;TFirst TSecond TResult&gt;(         this IEnumerable&lt;TFirst&gt; first         IEnumerable&lt;TSecond&gt; second         Func&lt;TFirst TSecond TResult&gt; func);  
p2 = Table('tablename'             metadata             Column('id' Integer primary_key=True)             Column('fk' ForeignKey('fk_table.field'))             mysql_engine='InnoDB'            )  p2 = Table('tablename'             metadata             Column('id' Integer primary_key=True)             Column('fk' Integer index=True)             mysql_engine='InnoDB'             ) ForeignKeyConstraint(columns=[p2.c.fk] refcolumns=[p3.c.id]).create()  def downgrade(migrate_engine):      # First drop the constraint      ForeignKeyConstraint(columns=[p2.c.fk] refcolumns=[p3.c.id]).drop()      # Then drop the table      p2.drop()  
strptime strptime 
WantReadError WantReadError select send 
def getItem(item_id):     q = Item.all()     q.filter("itemid = " int(item_id))  
import json  from django.http import HttpResponse  response_data = {} response_data['result'] = 'error' response_data['message'] = 'Some error message'  return HttpResponse(json.dumps(response_data) content_type="application/json")  JsonResponse from django.http import JsonResponse return JsonResponse({'foo':'bar'})  
"hurr..\n..durr".encode('unicode-escape').decode()  "hurr..\n..durr".encode('string-escape')  
__getattr__ __init__ __slots__ __new__ __str__ __repr__ __call__ __getitem__ __len__ 
ls ls -ld --full-time /tmp  drwxrwxrwt 11 root root 69632 2010-03-11 13:16:30.000000000 -0800 /tmp  drwxrwxrwt 16 root root 20480 2010-03-11 21:20:02.088188962 +0000 /tmp  
attr def default_action():     # do something else  action = getattr(obj 'attr' default_action)  action()  
time strptime &gt;&gt;&gt; import time &gt;&gt;&gt; t = time.strptime("2010-02-02 7:31" "%Y-%m-%d %H:%M") &gt;&gt;&gt; t (2010 2 2 7 31 0 1 33 -1) &gt;&gt;&gt; import datetime &gt;&gt;&gt; datetime.datetime(*t[:6]) datetime.datetime(2010 2 2 7 31)  
isinstance(a A) isinstance A A is 
getattr(model 'title_en')  __getattr__ __getattribute__ 
Decimal.__gt__ Decimal.__gt__ Decimal._convert_other Decimal._convert_other Decimal._convert_other long int Decimal TypeException NotImplemented 
i i = 0 while i &lt; some_value:     if cond...:         i+=1     ...code...     i+=1  for(..a..; ..b..; ..c..) {     ...code... }  ..a.. while(..b..) {      ..code..      ..c.. }  for x in ..a..:     ..code..  my_iter = iter(..a..) while (my_iter is not empty):     x = my_iter.next()     ..code..  
python-mode 'python-pdbtrack-toggle-stack-tracking (fset 'add-docstring    (lambda (&amp;optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("def ...unprintable characters...6\"3" 0 "%d")) arg)))  (fset 'add-docstring       (lambda (&amp;optional arg)         "Keyboard macro."         (interactive "p")         (kmacro-exec-ring-item `((kbd "C-r def C-n C-a C-m C-p C-i C-u 6 \" C-u 3 C-b") 0 "%d")                                arg)))  M-x add-docstring (add-hook 'python-mode-hook           (lambda () (define-key python-mode-map (kbd "C-c C-d") 'add-docstring)))  python-mode python.el kbd eval-after-load (add-hook 'python-mode-hook 'my-python-customizations) (defun my-python-customizations ()   "set up my personal customizations for python mode"   ;; put other customizations in here   (define-key python-mode-map (kbd "C-c C-d") 'add-docstring)) (defun add-docstring (&amp;optional arg)   "Keyboard macro."   (interactive "p")   (kmacro-exec-ring-item `((kbd "C-r def C-n C-a C-m C-p C-i C-u 6 \" C-u 3 C-b") 0 "%d")                          arg))  (remove-hook 'python-mode-hook 'my-python-customizations) .emacs 
CACHE_LIST_1 switch 
&gt;&gt;&gt; class Bah(object): pass ...  &gt;&gt;&gt; x = Bah(23) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in ? TypeError: default __new__ takes no parameters  __init__ traceback 
title str string "foo".title() str.title("foo") string.title("foo") 
StopIteration for else 
    list(cf.get_range().get_keys())  
import os from Tkinter import * class App:     def __init__(self):         self.root = Tk()         self.create_ui()         self.url = "www.google.com"         self.do_ping = False         self.root.mainloop()      def create_ui(self):         self.label = Label(self.root width=32 text="Ping!")         self.button = Button(text="Start" width=5 command=self.toggle)         self.button.pack(side="top")         self.label.pack(side="top" fill="both" expand=True)      def toggle(self):         if self.do_ping:             self.do_ping = False             self.button.configure(text="Start")         else:             self.do_ping = True             self.button.configure(text="Stop")             self.ping()      def ping(self):         if not self.do_ping:             return         ping = os.popen('ping -c 1 %s' % self.url)         result = ping.readlines()         msLine = result[-1].strip()         data = msLine.split(' = ')[-1]          self.label.configure(text=data)         # re-schedule to run in another half-second         if self.do_ping:             self.root.after(500 self.ping)  app=App()  
__get__ def plot_svg(view):      def wrapper(*args **kwargs):         print args kwargs         fig = view(*args **kwargs)         canvas = FigureCanvas(fig)         response = HttpResponse(content_type='image/svg+xml')         canvas.print_svg(response)         return response      return wrapper  self __get__ __get__ __get__ view self.view self 
#@PydevCodeAnalysisIgnore  
from django.core.management.commands.compilemessages import compile_messages  setup.py setup setup 
&gt;&gt;&gt; table = [(1L) (1L) (1L) (2L) (2L) (2L) (3L) (3L)] &gt;&gt;&gt; [int(e[0]) for e in table] [1 1 1 2 2 2 3 3]  &gt;&gt;&gt; [str(e[0]) for e in table] ['1' '1' '1' '2' '2' '2' '3' '3']  
commit conn autoflush=False 
readline() communicate() shell=True 
from collections import defaultdict all_classes = defaultdict(set) for group in groups_and_classes.values():     for c vals in group.iteritems():         all_classes[c].update(set(vals))  
range(33 127) chars = [chr(c) for c in range(33 127)]  ...  for s0 in chars:     for s1 in chars:         for s2 in chars:             b = l + s0 + s1 + s2 + '\n'             f.write(b)             hh += 1  
''.join import cStringIO  class MyWriter(object):      def __init__(self stdout):         self.stdout = stdout         self.dumps = cStringIO.StringIO()         self.final = None      def write(self text):         self.stdout.write(smart_unicode(text).encode('cp1251'))         self.dumps.write(text)      def close(self):         self.stdout.close()         self.final = self.dumps.getvalue()         self.dumps.close()      def getvalue(self):         if self.final is not None:             return self.final         return self.dumps.getvalue()  getvalue self.final getvalue print write getvalue extend array.array 
A[A&lt;=0.5] = 0.0  vectorized otypes &lt;0.5 return 0 return 0.0  my_func f = np.vectorize(my_func otypes=[np.float])  
ifile.read() 
C:\Temp&gt;import.py  #!/usr/bin/env python import sys print sys.executable import xml.etree.ElementTree as ET print "Success!"  
import scipy.io import numpy as np my_list = np.zeros((3) dtype=np.object) my_list[:] = ['abc' 'def' 'ghi'] scipy.io.savemat('test.mat' mdict={'my_list': my_list})  
f['username'] = username f['password'] = password f.click() 
import itertools  def getxy(point): return point[:2]  sortedpoints = sorted(points key=getxy)  results = []  for xy g in itertools.groupby(sortedpoints key=getxy):   results.append(max(g key=operator.itemgetter(2)))  (xy) z z (x y) 
ls data[0-9]*txt|sort -nk1.5|awk 'BEGIN{rn=5;i=1}{while((getline _&lt;$0)&gt;0){print _ &gt;"data_new_"i".txt"}close($0)}NR%rn==0{i++}'  
re.search(r"\((?P&lt;remixer&gt;[^)]+) (Remix)\)" "Title (Blabla) (Menda Remix)")  
'0b' &gt;&gt;&gt; '{:b}'.format(123)            #{0:b} in python 2.6 '1111011'  
if hasattr(f "__call__"):  
SystemError: dynamic module not initialized properly _PyImport_LoadDynamicModule Python/importdl.c _functools.so ldd mod_wsgi.so libpython ./configure --with-python=/opt/python2.6/bin/python2.6  sys.prefix WSGIPythonHome /usr/lib /opt/python2.6 /opt/python2.6 LD_LIBRARY_PATH LD_LIBRARY_PATH=/opt/python2.6/lib:$LD_LIBRARY_PATH ldd mod_wsgi.so  .wsgi def application(environ start_response):     status = '200 OK'     start_response(status [('Content-type' 'text/plain')])      try:         import sys         return ['\n'.join([sys.prefix sys.executable])]     except:         import traceback as tb         return [tb.format_exc()]  WSGIPythonHome /opt/python2.6  
&gt;&gt;&gt; import json &gt;&gt;&gt; json.dumps( {'vld_id':1'vls_error':2'something_else':True} ) '{"vld_id": 1 "something_else": true "vls_error": 2}'  &gt;&gt;&gt; json.loads( '{"vld_id": 1 "something_else": true "vls_error": 2}' ) {u'vld_id': 1 u'something_else': True u'vls_error': 2}  
self import inspect import functools  def decorator(f):   args = inspect.getargspec(f)   if args and args[0] == 'self':      # looks like a (future) method...   else:      # looks like a "real" function      @functools.wraps(f)      def wrapper  # etc etc  wrapper._f = f __init__ self def f_globals f_name self wrapper._f __init__ class Foo(Bar): ... # no decorations  @decorator def f(*a **k): ...  Foo.f = f   # "a killer"... function becomes method!  __setattr__ class 
get_or_create() 
def __unicode__(self):     return self.Team_Name  
struct ConnectionBaseWrap : ConnectionBase wrapper&lt;ConnectionBase&gt; {     void OnEvent(const Overload_a &amp;obj) {         if (override f = get_override("OnEventOverloadA"))             f(obj);     }     void OnEvent(const Overload_b &amp;obj) {         if (override f = get_override("OnEventOverloadB"))             f(obj);     } };  BOOST_PYTHON_MODULE(yourmodule) {     class_&lt;ConnectionBaseWrap boost::noncopyable&gt;("ConnectionBase")         //Your additional definitions here.     ; }  .def OnEventOverloadA OnEventOverloadB OnEvent 
[m.group(1) for l in lines for m in [regex.search(l)] if m]  for m in [regex.search(l)] 
.hexdigest() 
pip install httpie  rails express simplejson .tar.gz setup.py setup.py install easy_install 
import datetime  _3AM = datetime.time(hour=3) _FRI = 4 # Monday=0 for weekday()  def next_friday_3am(now):     now += datetime.timedelta(days=7)     if now.time() &lt; _3AM:         now = now.combine(now.date()_3AM)     else:         now = now.combine(now.date()_3AM) + datetime.timedelta(days=1)     return now + datetime.timedelta((_FRI - now.weekday()) % 7)  if __name__ == '__main__':     start = datetime.datetime.now()     for i in xrange(7*24*60*60):         now = start + datetime.timedelta(seconds=i)         then = next_friday_3am(now)         assert datetime.timedelta(days=7) &lt; then - now &lt;= datetime.timedelta(days=14)         assert then.weekday() == _FRI         assert then.time() == _3AM  
group_by() latest() previous_invoices = Invoice.objects.filter(user=my_user is_open=False)                                    .latest('created')   latest() previous_invoices = Invoice.objects.filter(user=my_user is_open=False)                                    .order_by('-created')[0]  GROUP BY group_by .values_list() flat=True .distinct() value_list = MyModel.objects.values_list(     'interesting_field' flat=True ).distinct()  value_list group_by_value = {} for value in value_list:     group_by_value[value] = MyModel.objects.filter(interesting_field=value)  group_by_value interesting_field MyModel interesting_field=a value   from value_list group_by() 
\v \f 
jsonValidateReturn = simplejson.dumps({'jsonValidateReturn': array_to_js}) return HttpResponse(jsonValidateReturn mimetype='application/json')   
def save_model(self request obj formchange):    if obj.Match_Status == "F":     Team.objects.filter(pk=obj.Team_one.id).update(Played=F('Played')+1)     Team.objects.filter(pk=obj.Team_two.id).update(Played=F('Played')+1)     if obj.Winner !="":          Team.objects.filter(pk=obj.Winner.id).update(Win=F('Win')+1 Points=F('Points')+3)     else:         return      if obj.Match_Status == "D":     Team.objects.filter(pk=obj.Team_one.id).update(Played=F('Played')+1 Draw = F('Draw')+1 Points=F('Points')+1)       Team.objects.filter(pk=obj.Team_two.id).update(Played=F('Played')+1 Draw = F('Draw')+1 Points=F('Points')+1)      obj.save()  
self self.parent.Refresh()  self.SetPosition def onMouseMove def onDraggingDown 
pydoc -w imdb  pydoc -p 9090 
adict.has_key(k) k in adict if len(doca_dic) &lt; len(docb_dict):     short_dict long_dict = doca_dic docb_dic else:     short_dict long_dict = docb_dic doca_dic similarity = 0 for x in short_dict:     if x in long_dict:         #calculate the similarity by summing the products of the tf-idf_norm          similarity += short_dict[x] * long_dict[x]  docb = cursor2.fetchall() similarity = 0 for b_token b_value in docb:     if b_token in doca_dic:         similarity += doca_dic[b_token] * b_value  similarity = sum(     doca_dic[k] * docb_dic[k]     for k in set(doca_dic) &amp; set(docb_dic)     )  # Doc A cursor1.execute("SELECT token tfidf_norm FROM index WHERE doc_id = %s" (docid[i][0])) doca = cursor1.fetchall() # Doc B cursor2.execute("SELECT token tfidf_norm FROM index WHERE doc_id = %s" (docid[j][0])) docb = cursor2.fetchall() if len(doca) &lt; len(docb):     short_doc long_doc = doca docb else:     short_doc long_doc = docb doca long_dict = dict(long_doc) # yes it should be that simple similarity = 0 for key value in short_doc:     if key in long_dict:         similarity += long_dict[key] * value  time.time() C:\junk\so&gt;sqlite3 SQLite version 3.6.14 Enter ".help" for instructions Enter SQL statements terminated with a ";" sqlite&gt; create table atable(docid text token text score float     primary key (docid token)); sqlite&gt; insert into atable values('a' 'apple' 12.2); sqlite&gt; insert into atable values('a' 'word' 29.67); sqlite&gt; insert into atable values('a' 'zulu' 78.56); sqlite&gt; insert into atable values('b' 'apple' 11.0); sqlite&gt; insert into atable values('b' 'word' 33.21); sqlite&gt; insert into atable values('b' 'zealot' 11.56); sqlite&gt; select sum(A.score * B.score) from atable A atable B     where A.token = B.token and A.docid = 'a' and B.docid = 'b'; 1119.5407 sqlite&gt;  token token create index atable_token_idx on atable(token); drop index atable_token_idx; 
*args params ... **kwargs def some_service_function(kwargs): # &lt;- note the lack of **     foo = kwargs.get('foo')     bar = kwargs.get('bar')  nc.call("some_service_function" {foo: "some" bar: "thing"})  
mytable.__table__.select(mytable.value.in_(values)  results = self.conn.execute(mytable.__table__.select(mytable.value.in_(values)) available_values = set(row.value for row in results) to_insert = set(values) - available_values  
dict_a = dict_b dict_b dict_a dict.copy copy.deepcopy &gt;&gt;&gt; a = {1:2} &gt;&gt;&gt; b = a.copy() &gt;&gt;&gt; b {1: 2} &gt;&gt;&gt; b[3] = 4 &gt;&gt;&gt; a {1: 2} &gt;&gt;&gt; b {1: 2 3: 4} &gt;&gt;&gt;   
cur.execute('insert into tempPDBcode (PDBcode) values (%s);' s)   
:: s = 'string' s = s[::-1] print s  # gnirts  &gt;&gt;&gt; s[len(s):None:-1]   'gnirts' &gt;&gt;&gt; s[5:None:-1]   'gnirts' &gt;&gt;&gt; s[::-1]  # and of course 'gnirts'  
parse.y 
ModelForm DateField MY_DATE_FORMATS = ['%d/%m/%Y']  class MyModelForm(forms.ModelForm):     date = forms.DateField(input_formats=MY_DATE_FORMATS)     class Meta:         model = MyModel  class MyModelAdmin(admin.ModelAdmin):     form = MyModelForm  
# assuming words is a list of words you wish to query for import urllib  # replace en.wikipedia.org with the address of the wiki you want to access query = "http://en.wikipedia.org/w/api.php?action=query&amp;titles=%s&amp;format=xml" % "|".join(words) pages = urllib.urlopen(query)  &lt;?xml version="1.0"?&gt;&lt;api&gt;&lt;query&gt;&lt;pages&gt;     &lt;page ns="0" title="DOESNOTEXIST" missing="" /&gt;     &lt;page pageid="600799" ns="0" title="FOO" /&gt;     &lt;page pageid="11178" ns="0" title="Foobar" /&gt;  &lt;/pages&gt;&lt;/query&gt;&lt;/api&gt;  
__len__ __length_hint__ &gt;&gt;&gt; def foo(func iterable): ...     return [func(i) for i in iterable] ... &gt;&gt;&gt; import dis; dis.dis(foo)   2           0 BUILD_LIST               0 #### build empty list               3 DUP_TOP               4 STORE_FAST               2 (_[1])               7 LOAD_FAST                1 (iterable)              10 GET_ITER         &gt;&gt;   11 FOR_ITER                19 (to 33)              14 STORE_FAST               3 (i)              17 LOAD_FAST                2 (_[1])              20 LOAD_FAST                0 (func)              23 LOAD_FAST                3 (i)              26 CALL_FUNCTION            1              29 LIST_APPEND      #### stack[-2].append(stack[-1]); pop()              30 JUMP_ABSOLUTE           11         &gt;&gt;   33 DELETE_FAST              2 (_[1])              36 RETURN_VALUE  &gt;&gt;&gt; def bar(func iterable): ...     return [func(i) for i in iterable if i] ... &gt;&gt;&gt; import dis; dis.dis(bar)   2           0 BUILD_LIST               0               3 DUP_TOP               4 STORE_FAST               2 (_[1])               7 LOAD_FAST                1 (iterable)              10 GET_ITER         &gt;&gt;   11 FOR_ITER                30 (to 44)              14 STORE_FAST               3 (i)              17 LOAD_FAST                3 (i)              20 JUMP_IF_FALSE           17 (to 40)              23 POP_TOP              24 LOAD_FAST                2 (_[1])              27 LOAD_FAST                0 (func)              30 LOAD_FAST                3 (i)              33 CALL_FUNCTION            1              36 LIST_APPEND              37 JUMP_ABSOLUTE           11         &gt;&gt;   40 POP_TOP              41 JUMP_ABSOLUTE           11         &gt;&gt;   44 DELETE_FAST              2 (_[1])              47 RETURN_VALUE &gt;&gt;&gt;  &gt;&gt;&gt; import dis &gt;&gt;&gt; def comprehension(f iterable): return [f(i) for i in iterable] ... &gt;&gt;&gt; dis.dis(comprehension)   1           0 LOAD_CLOSURE             0 (f)               3 BUILD_TUPLE              1               6 LOAD_CONST               1 (&lt;code object &lt;listcomp&gt; at 0x00C4B8D 8 file "&lt;stdin&gt;" line 1&gt;)               9 MAKE_CLOSURE             0              12 LOAD_FAST                1 (iterable)              15 GET_ITER              16 CALL_FUNCTION            1              19 RETURN_VALUE &gt;&gt;&gt; dis.dis(comprehension.__code__.co_consts[1])   1           0 BUILD_LIST               0               3 LOAD_FAST                0 (.0)         &gt;&gt;    6 FOR_ITER                18 (to 27)               9 STORE_FAST               1 (i)              12 LOAD_DEREF               0 (f)              15 LOAD_FAST                1 (i)              18 CALL_FUNCTION            1              21 LIST_APPEND              2              24 JUMP_ABSOLUTE            6         &gt;&gt;   27 RETURN_VALUE &gt;&gt;&gt;  list.extend(iterable) iterable list.append(object) 
name fetchone SELECT count(*) fetchall fetchall name fetchall [(rowid)] [] rowid fetchall rowid fetchone (rowid) None rowid rowid SELECT count(*) (1) (0) import sqlite3 connection = sqlite3.connect(':memory:') cursor=connection.cursor() cursor.execute('create table components (rowid intname varchar(50))')     cursor.execute('insert into components values(??)' (1'foo'))  fetchall for name in ('bar''foo'):      cursor.execute("SELECT rowid FROM components WHERE name = ?" (name))     data=cursor.fetchall()     if len(data)==0:         print('There is no component named %s'%name)     else:         print('Component %s found with rowids %s'%(name''.join(map(str next(zip(*data))))))  There is no component named bar Component foo found with rowids 1  fetchone for name in ('bar''foo'):      cursor.execute("SELECT rowid FROM components WHERE name = ?" (name))     data=cursor.fetchone()     if data is None:         print('There is no component named %s'%name)     else:         print('Component %s found with rowid %s'%(namedata[0]))  There is no component named bar Component foo found with rowid 1  SELECT count(*) for name in ('bar''foo'):      cursor.execute("SELECT count(*) FROM components WHERE name = ?" (name))     data=cursor.fetchone()[0]     if data==0:         print('There is no component named %s'%name)     else:         print('Component %s found in %s row(s)'%(namedata))  There is no component named bar Component foo found in 1 row(s)  
('%f' % x).rstrip('0').rstrip('.') %g %g 
telnetlib socket.create_connection socket socket create_connection create_connection 
import warnings with warnings.catch_warnings():     warnings.simplefilter("ignore" DeprecationWarning)     import MySQLdb [...]  
py2exe is a Python Distutils extension which converts Python scripts  into executable Windows programs able to run without requiring a  Python installation  
repr() ascii() prompt&gt;\python26\python -c "print repr(open('report.csv''rb').read()[:300])" '\xff\xfeW\x00e\x00b\x00 \x00S\x00e\x00a\x00r\x00c\x00h\x00 \x00I\x00n\x00t\x00e \x00r\x00e\x00s\x00t\x00:\x00 \x00f\x00o\x00o\x00b\x00a\x00r\x00\r\x00\n\x00W\x0 [snip] x001\x007\x00\t\x004\x004\x00\r\x00\n\x002\x000\x00'  &gt;&gt;&gt; import codecs &gt;&gt;&gt; lines = list(codecs.open('report.csv' 'r' encoding='UTF-16')) &gt;&gt;&gt; import pprint &gt;&gt;&gt; pprint.pprint(lines[:8]) [u'Web Search Interest: foobar\r\n'  u'Worldwide; 2004 - present\r\n'  u'\r\n'  u'Interest over time\r\n'  u'Week\tfoobar\r\n'  u'2004-01-04 - 2004-01-10\t44\r\n'  u'2004-01-11 - 2004-01-17\t44\r\n'  u'2004-01-18 - 2004-01-24\t37\r\n'] &gt;&gt;&gt;  \n \r\n 
fab staging bootstrap fab staging enable fab staging reload_server fab staging bootstrap enable reload_server fab staging deploy fab staging rollback fabfile.py deploy/ 
ALTER TABLE `appname_books` ADD COLUMN `user_id` INTEGER NOT NULL UNIQUE; ALTER TABLE `appname_books` ADD CONSTRAINT `user_id_refs_user` FOREIGN KEY (`user_id`) REFERENCES auth_user (`id`);  
Ship.__table__.columns Ship.__table__.foreign_keys Ship.__table__.constraints Ship.__table__.indexes 
client.token_store.add_token(sessionToken)  
def on_button_clear(self evt):     if self.subframe_opened:         self.subframe.Close()     self.figure.set_canvas(self.figurecanvas)     self.axe.clear()     self.figurecanvas.draw()       self.SetSize((self.Size[0]self.figurecanvas.Size[1]))  
Y = [x.v for x in X]  
for x in os.listdir(dir):     if x.endswith(fext):         filename = os.path.join(dir x)         # do your stuff here  
&gt;&gt;&gt; a [[(1L)] [(2L)] [(3L)] [(4L)] [(5L)]] &gt;&gt;&gt; a = [[x[0][0]] for x in a] &gt;&gt;&gt; a [[1L] [2L] [3L] [4L] [5L]]  
L[:] = [el for el in L if el != 3]  L[:] &gt;&gt;&gt; ndel = 0 &gt;&gt;&gt; for i el in enumerate(list(L)): ...    if el==3: ...      del L[i-ndel] ...      ndel += 1  for i in reversed(range(len(L))):   if L[i] == 3: del L[i]  reversed reversed(range(... reversed for i in range(len(L) - 1 -1 -1):  
&gt;&gt;&gt; import numpy &gt;&gt;&gt; a = numpy.array([1 2 'a'] dtype=object) # makes type of array what you need &gt;&gt;&gt; numpy.equal(a None) array([False False False] dtype=bool)  [item is None for item in [1 2 'a']] 
$Revision$ THEOPTION = 10  
.features(0) .features[0] def wrap(datum):   # don't wrap strings   if isinstance(datum basestring):     return datum   # don't wrap numbers either   try: return datum + 0   except TypeError: pass   return Fourie(datum)  class Fourie(object):   def __init__(self data):     self._data = data   def __getattr__(self n):     return wrap(self._data[n])   def __call__(self n):     return wrap(self._data[n])  x = wrap(x['product']) x.product.features(0).size features[0] features(0)   def __getitem__(self n):     return wrap(self._data[n])  __getitem__ __call__ Fourie 
guess any() hasfactors = any(guess % n == 0 for n in numbers)  all() isprime() onlyprimes = all(isprime(n) for n in numbers)  
select.select select.select asyncore asynchat twisted select 
itertools.chain import itertools  def my_generator():     yield 1     yield 2  for i in itertools.chain(my_generator() [5]):     print i  1 2 5  
arg=None None class Foo:     sentinel = {}     def bar(self arg=sentinel):         if arg is self.sentinel:             print "You didn't supply an argument!"         else:             print "The argument was" arg  f = Foo() f.bar(123) f.bar() f.bar(None) f.bar({})  Foo.sentinel Foo.sentinel x is Foo.sentinel Foo.sentinel Foo.sentinel 
item.title() except item title self.title = getattr(item 'title' lambda: None)()  self.title() self.title().content.string AttributeError except 
communicate EOF EOF stdin stdout communicate 
ioff()  
cdef public caller(self):     cdef Agents agent     print "caller"     agent = A[1]     agent.called()  
listen try except socket.timeout: select.select 
&gt;&gt;&gt; array = ['ca' 'bd' 'ac' 'ab'] &gt;&gt;&gt; order = ['a' 'b' 'c' 'd'] &gt;&gt;&gt; sorted(array key=lambda v:map(order.indexv)) ['ab' 'ac' 'bd' 'ca']  &gt;&gt;&gt; order = ['b' 'a' 'c' 'd'] &gt;&gt;&gt; sorted(array key=lambda v:map(order.indexv)) ['bd' 'ab' 'ac' 'ca']  &gt;&gt;&gt; order = ['d' 'c' 'b' 'a'] &gt;&gt;&gt; sorted(array key=lambda v:map(order.indexv)) ['ca' 'bd' 'ac' 'ab']  map order.index v v array &gt;&gt;&gt; order = ['a' 'b' 'c' 'd'] &gt;&gt;&gt; map(order.indexarray[0]) [2 0] &gt;&gt;&gt; map(order.indexarray[1]) [1 3] &gt;&gt;&gt; map(order.indexarray[2]) [0 2] &gt;&gt;&gt; map(order.indexarray[3]) [0 1]  key= 
socket.listen(backlog) 
threadstop True True 
amount q = session.query(Transaction                   case([(Transaction.transfer_account_id==1 -1*Transaction.amount)] else_=Transaction.amount).label('special_amount')                   ) q = q.filter(or_(Transaction.account_id==1 Transaction.transfer_account_id==1))  Transaction tuple(Transaction Decimal) case when ... WHERE case when ... @property def special_amount(self):     return -self.amount if self.transfer_account_id == 1 else self.amount  @special_amount.setter def special_amount(self value):     if self.transfer_account_id is None:         raise Exception('Cannot decide on special handling because transfer_account_id is not set')     self.amount = -value if self.transfer_account_id == 1 else value  or_ q = session.query(Transaction).filter(     or_(Transaction.account_id==1          Transaction.transfer_account_id==1) )  # then get your results with the proper amount sign: for t in q.all():     print q.id q.special_amount  
items = sorted(dictionary.items()) 
&gt;&gt;&gt; import numpy &gt;&gt;&gt; A = numpy.array(((12)(34))) &gt;&gt;&gt; idx = (00) &gt;&gt;&gt; A[idx] 1  
def increase(first second): increase first second increase return first + second increase('foo' 'bar') 'foobar' increase(23 45) 68 
node = api.item_lookup(...) from lxml import etree print etree.tostring(node pretty_print=True)  
is_staff is_authenticated is_authenticated 
$1 $2 "I have 1 banana and 2 apples!".replace(/(banana|apple)/gi "&lt;b&gt;$1&lt;/b&gt;");  
#!/usr/bin/env python import datetime fileinput re  for line in fileinput.input():     if 'FILED AS OF DATE' in line:        line = line.rstrip()        dt = datetime.datetime.strptime(line 'FILED AS OF DATE:       %Y%m%d')         # or with regex        date_str = re.findall(r'\d+' line)        dt = datetime.datetime.strptime(date_str '%Y%m%d')         print dt.date()  $ ./finddate.py input.txt  2009-02-09  
cdef double a[] = [0.5 0.3 0.1 0.1]  
close() 
from django.contrib.gis.db import models  class User(models.Model):     location = models.PointField()     objects = models.GeoManager()  User.objects.filter(location__dwithin=(current_user.location D(m=500)))  
field form @register.filter def alignboxes(boxes cls):      r = ""     i = 0     for box in boxes.field.choices.queryset:         checked = "checked=checked" if i in boxes.form.initial[boxes.name] else ""         r += "&lt;label for=\"id_%s_%d\" class=\"%s\"&gt;&lt;input type=\"checkbox\" name=\"%s\" value=\"%s\" id=\"id_%s_%d\" %s /&gt; %s&lt;/label&gt;\n" % (             boxes.name             i             cls             boxes.name             box.pk             boxes.name             i             checked             box.name         )         i = i + 1      return r  checked boxes.form.initial[boxes.name] 
__getattr__ __getattribute__ __enter__ __exit__ __getattr__ sys.modules __getattr__ AttributeError # my_module.py  def __getattr__(name: str) -&gt; Any:     ...  from my_module import whatever __dir__ dir(my_module) 
import rpy2.robjects.numpy2ri rpy2.robjects.numpy2ri.activate()  
def __getattribute__(self name): def __getattr__(self name): PureProxy __getattribute__ setattr(self name ... __getattr__ setattr object.__getattribute__(self "underlying") self.underlying __getattribute__ enumerate print 
AS_IF if test AS_IF([test "x${HAVE_PYMOD_JSON}" = "xno"]      AS_IF([test "x${HAVE_PYMOD_SIMPLEJSON}" = "xno"]         [AC_MSG_ERROR([Requires one of json or simplejson])]))  #define 
if request.method=='POST':   PrimaryFunctionFormSet = inlineformset_factory(PositionFunction)   if 'add' in request.POST:     cp = request.POST.copy()     cp['prim-TOTAL_FORMS'] = int(cp['prim-TOTAL_FORMS'])+ 1     prims = PrimaryFunctionFormSet(cpprefix='prim')  
os.system subprocess.Popen import subprocess proc=subprocess.Popen('echo "to stdout"' shell=True stdout=subprocess.PIPE ) output=proc.communicate()[0] print output  
re input = '17k 14.05m 1.235b'  multipliers = { 'k': 1e3                 'm': 1e6                 'b': 1e9               }  pattern = r'([0-9.]+)([bkm])'  for number suffix in re.findall(pattern input):     number = float(number)     print number * multipliers[suffix]  
$ python3 Python 3.1.1+ (r311:74480 Nov  2 2009 14:49:22)  [GCC 4.4.1] on linux2 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; '{0} is not'.format('That that is not') 'That that is not is not'  $ python2.5 Python 2.5.4 (r254:67916 Jan 20 2010 21:44:03)  [GCC 4.4.1] on linux2 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; '{0} is not'.format('That that is not') Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; AttributeError: 'str' object has no attribute 'format'  
Unprotect import win32com.client  excel = win32com.client.Dispatch('Excel.Application')  workbook = excel.Workbooks.open(r'c:\mybook.xls' 'password')  workbook.SaveAs('unencrypted.xls')  
onTimer(self) 
plt.colorbar() import numpy as np import matplotlib.pyplot as plt mat = np.random.random((1010)) plt.imshow(mat origin="lower" cmap='gray' interpolation='nearest') plt.colorbar() plt.show()  
&lt;li&gt;&lt;img src="{{MEDIA_URL}}/160.jpg" /&gt;&lt;/li&gt;  'http://some-good-URL/galleries/160.jpg' 'django.core.context_processors.media' TEMPLATE_CONTEXT_PROCESSORS if settings.DEBUG: # Serve static files in debug. urlpatterns += patterns(''     (r'^site_media/(?P&lt;path&gt;.*)$' 'django.views.static.serve'     {'document_root': settings.MEDIA_ROOT     'show_indexes' : True}) )  
&gt;&gt;&gt; 0^0 0 &gt;&gt;&gt; 1^1 0 &gt;&gt;&gt; 1^0 1 &gt;&gt;&gt; 0^1 1  &gt;&gt;&gt; 8^3 11  
del 
bitmap = wx.EmptyBitmap(w h) dc = wx.MemoryDC(bitmap)  
text = raw_input("please give 2 numbers to multiply separated with a comma:") split_text = text.split('') a = int(split_text[0]) b = int(split_text[1]) # The last three lines could be written: a b = map(int text.split('')) # but you may find the code I used a bit easier to understand for now.  if b &gt; 0:     num_times = b else:     num_times = -b  total = 0 # While loops with counters basically should not be used so I replaced the loop  # with a for loop. Using a while loop at all is rare. for i in xrange(num_times):     total += a      # We do this a times giving us total == a * abs(b)  if b &lt; 0:     # If b is negative adjust the total to reflect this.     total = -total  print total  a * b  
print('&lt;a href="{0}"&gt;{0}&lt;/a&gt;'.format(my_url))  print('&lt;a href="{url}"&gt;{url}&lt;/a&gt;'.format(url=my_url))  print('&lt;a href="{}"&gt;{}&lt;/a&gt;'.format(my_url my_url))  print('&lt;a href="{not_my_url}"&gt;{}&lt;/a&gt;'.format(my_url my_url not_my_url=her_url))  print('&lt;a href="{not_my_url}"&gt;{}&lt;/a&gt;'.format(my_url not_my_url=her_url my_url))  
Refresh() onPaint EVT_ERASE_BACKGROUND class DoubleBufferTest(wx.Panel):     def __init__(selfparent=Noneid=-1):         # ... existing code ...         self.Bind(wx.EVT_ERASE_BACKGROUND self.onErase)     def onErase(self event):         pass     # ... existing code ...  
L = [([1 2 3] 4) ([5 6 7] 8)] element = [5 6 7]  for a b in L:   if a == element:     print b     break else:   print "not found"  L = [([1 2 3] 4) ([5 6 7] 8)] element = [5 6 7]  D = dict((tuple(a) b) for a b in L) # keys must be hashable: list is not but tuple is # or you could just build the dict directly: #D = {(123): 4 (567): 8}  v = D.get(tuple(element)) if v is not None:   print v else:   print "not found"  
d[1 1] copy.deepcopy 
x^y x^y x^y x y x x^y x y = y x  
route('/hello')  bottle.default_app()  from bottle import route from bottle import * import bottle from foo import bar bar 
all_clubs all_clubs[clubname] club_names clubs class Player(object):     # ...      @property     def clubs(self):         result = []         for name in self.club_names:             result.append(all_clubs.get(name))         return result  
a op b op c  (a op b) and (b op c)  in == is 1 in [1] == True  # -&gt; (1 in [1]) and ([1] == True) -&gt; True and False -&gt; False  
#try a function def func_tim():     bob = True     while bob == True:         #define vars         a = int(input('Please insert a number: '))         b = int(input('Please insert a second number: '))          if a == b:             print('nice and equal')             bob = False         elif b &gt; a:              print('b is picking on a!')         else:             print('a is picking on b!') #call a function func_tim()  
PanType 
L[:] is False L == L[:] True 
from django.db.models import Count qs = Foo.objects.filter(            bar__eg_id__in=id_list       ).annotate(            bar_count=Count('bar')       ).order_by('bar_count')  
data = """&lt;link rel="stylesheet" type="text/css" href="/media/css/first.css" /&gt; &lt;style&gt;body:{font-size: 10px;}&lt;/style&gt; &lt;link rel="stylesheet" type="text/css" href="/media/css/second.css" /&gt; """  from lxml import etree  h = etree.HTML(data)  h.xpath('//link[@rel="stylesheet"]|//style')  [&lt;Element link at 97a007c&gt;  &lt;Element style at 97a002c&gt;  &lt;Element link at 97a0054&gt;]  
urllib &gt;&gt;&gt; import urllib &gt;&gt;&gt; resp = urllib.urlopen('http://bit.ly/bcFOko') &gt;&gt;&gt; resp.getcode() 200 &gt;&gt;&gt; resp.url 'http://mrdoob.com/lab/javascript/harmony/'  
a = Staff.objects.get(NameFirst=u'"ANDREA"')  u str s[0].NameFirst 
itertools.product 
f = window.GetFont() dc = wx.WindowDC(window) dc.SetFont(f) width height = dc.GetTextExtent("Text to measure")  
import SocketServer import BaseHTTPServer  class ThreadingHTTPServer(SocketServer.ThreadingMixIn BaseHTTPServer.HTTPServer):     pass  
print print("foo" % bar end=" ")  print ("foo" % bar end=" ")  print "foo" % bar end=" "  print end=" " print "foo" % bar  sys.stdout __future__ from __future__ import print_function  unicode_literals with_statement 
&gt;&gt;&gt; s = u'Hello world!'.encode('utf-8-sig') &gt;&gt;&gt; s '\xef\xbb\xbfHello world!' &gt;&gt;&gt; s.decode('utf-8-sig') u'Hello world!'  
namedict = dict((x['name'] y) for y in data for x in data[y]['localNodes']) proddict = dict((z['name'] [y for y in z['consumesFrom'] if namedict[y] != x])   for x in data for z in data[x]['localNodes'] if z['consumesFrom'] is not None)  print 'nA' in proddict['nC']  
if __name__ == '__main__':     unittest.main()  if __name__ == '__main__':     try: unittest.main()     except SystemExit: pass  
for col in row:     total += int(col)  import csv from StringIO import StringIO  total = 0 for row in csv.reader(StringIO("1234")):     for col in row:         total += int(col)  print total    # prints 10  line = open("ints.txt").read().split("") total = sum(int(i) for i in line)  
from math import floor  Lista = [1323453.2422] ic=0 nintervals= 3  lmin=min(Lista) print "min= "lmin lmax=max(Lista) print "max= "lmax  width=1.0*(lmax-lmin)/nintervals print "width= "width  nelements=len(Lista) print "nelements= "nelements print " " histogram =[0]*nintervals  for item in Lista:     ind = int(floor(1.0*(item-lmin)/width))     if ind==nintervals:         ind=ind-1     histogram[ind]+=1  for iv in enumerate(histogram):     print "from" lmin+i*width "to" lmin+(i+1)*width "are"v"values"  for iv in enumerate(histogram):     print "Visual presentation:""="*int(round(v*40.0/lmax))  
&lt;Key&gt; self.inputText.bindtags(((str(self.inputText)) "Text" "post-insert" "." "all"))  self.inputText.bind_class("post-insert" "&lt;Key&gt;" self.translate)  end-1c 
&lt;?xml ..... 
(foobar(x) for x in S)  
mv 
setEqual restore = restore # Bind the identifier `restore` to the number object 1. restore = 1 # Bind the identifier `restore` to the string object 'Some string.' # The original object that `restore` was bound to is unaffected. restore = 'Some string.'  restore = []  restore restore setEqual test_variable = 1 setEqual(test_variable [1 2 3 4]) # Passes because the identifier test_variable # CAN'T be rebound within this scope from setEqual. assert test_variable == 1   def set_foo_to_bar(foo bar) original = [1 2 3 4] backup = list(original) # Make a shallow copy of the original. backup.remove(3) assert original == [1 2 3 4] # It's okay!  
from moda modb modc modd moda moda moda sys.modules import sys 
callable True __call__ inspect inspect inspect 
boost::python copy-ctor 
C object class C() class C(object) 
sum int int print sum sum file list 
import locale locale.getdefaultlocale()  &gt;&gt;&gt; from datetime import datetime &gt;&gt;&gt; dt = '16-MAR-2010 03:37:04' &gt;&gt;&gt; datetime.strptime(dt " %d-%b-%Y %H:%M:%S ") datetime.datetime(2010 3 16 3 37 4)  
meshgrid 
StringIO from io import StringIO    # version &lt; 2.6: from StringIO import StringIO  buffer = StringIO() buffer.writelines(mylist) buffer.seek(0)  session.storlines("..." buffer)  writelines \n \n buffer.writelines(line + '\n' for line in mylist)  
rot90 rotated = numpy.rot90(orignumpyarray3)  
from itertools import izip_longest def grouper(n iterable fillvalue=None):     "grouper(3 'ABCDEFG' 'x') --&gt; ABC DEF Gxx"     args = [iter(iterable)] * n     return izip_longest(fillvalue=fillvalue *args)  i = grouper(3range(100)) i.next() (0 1 2)  
class def meta(name):     class cls(Unit):         pass      cls.__name__ = name     return cls  type() class X(object): pass X = type("X" (object) {})  __name__ __name__ __repr__() class class X(object):     def foo(self): print "foo"  def foo(self): print "foo" X = type("X" (object) {'foo':foo})  type type.__new__() type() 
svn checkout http://feedparser.googlecode.com/svn/trunk/ feedparser-readonly cd feedparser-readonly python setup.py install  &gt;&gt;&gt; import feedparser  # the new version! &gt;&gt;&gt; d = feedparser.parse(MY_XML_URL) &gt;&gt;&gt; for content in d.entries[0].media_content: print content['url']  
Foo Bar Bar Bar class Foo Foo Foo class Bar ImportError foo.Foo Foo bar.Bar Bar Foo Bar AttributeError 
outfile = open(os.path.join(dir os.path.basename(name)) 'wb')  os.mkdir() pass 
sys.exit() return 
import wx  def alignToBottomRight(win):     dw dh = wx.DisplaySize()     w h = win.GetSize()     x = dw - w     y = dh - h     win.SetPosition((x y))  app = wx.PySimpleApp() frame = wx.MiniFrame(None title="My PopUp" size=(200300) style=wx.DEFAULT_MINIFRAME_STYLE|wx.CLOSE_BOX) alignToBottomRight(frame) app.SetTopWindow(frame) frame.Show() app.MainLoop()  
if not '&lt;body&gt;Tomcat is running...&lt;/body&gt;' in results:    notify_us()  
a = ['apple' 'orange']  d ={'apple': [24] 'carrot': [4433] 'orange': [345667]}  fo = open('test.csv''w') fo.write('\t'.join(a)+'\n') for y in xrange(len(d[a[0]])):     fo.write('\t'.join([str(d[i][y]) for i in a])+'\n')  fo.close()  apple  orange 2      345 4      667  
preexec_fn subprocess.Popen preexec_fn &gt;&gt;&gt; Popen(["nice"]).communicate() 0 (None None) &gt;&gt;&gt; Popen(["nice"] preexec_fn=lambda : os.nice(10)).communicate() 10 (None None) &gt;&gt;&gt; Popen(["nice"] preexec_fn=lambda : os.nice(20)).communicate() 19 (None None)  
curator *python -m SimpleHTTPServer 8000* 
backup = open(filename 'rb') while True:     part_of_file = backup.read(60000000) # not exactly 60 MB....     response = connection.put() # submit part_of_file here to amazon  
import subprocess  p = subprocess.Popen(['/bin/bash' '-c' "echo 'select user from mysql.user;' | mysql" ]     stdout=subprocess.PIPE stderr=subprocess.STDOUT)  lines = [line for line in p.stdout]  
 for index group in enumerate(FundTypeGroups):      print "%s: %s" % (index group)  
import numpy as np datamin = -5 datamax = 5 numbins = 20 mybins = np.linspace(datamin datamax numbins) myhist = np.zeros(numbins-1 dtype='int32') for i in range(100):     d = np.random.randn(10001)     htemp jnk = np.histogram(d mybins)     myhist += htemp  
RotatingFileHandler 
contextlib.nested() with contextlib.nested(open(...) open(...) ...) as (in_1 in_2 ...):   ....  
  def truncate_long_words(s num):      """Splits long words in string"""      words = s.split()      for word in words:         if len(word) &gt; num:                 for i in xrange(0len(word)num):                        yield word[i:i+num]         else:             yield word   for t in truncate_long_words(s):     print t  
class NamedModel(db.Model):     """A Model subclass for entities which automatically generate their own key     names on creation. See documentation for _generate_key function for     requirements."""      def __init__(self *args **kwargs):         kwargs['key_name'] = _generate_key(self kwargs)         super(NamedModel self).__init__(*args **kwargs)   def _generate_key(entity kwargs):     """Generates a key name for the given entity which was constructed with     the given keyword args.  The entity must have a KEY_NAME property which     can either be a string or a callable.      If KEY_NAME is a string the keyword args are interpolated into it.  If     it's a callable it is called with the keyword args passed to it as a     single dict."""      # Make sure the class has its KEY_NAME property set     if not hasattr(entity 'KEY_NAME'):         raise RuntimeError '%s entity missing KEY_NAME property' % (             entity.entity_type())      # Make a copy of the kwargs dict so any modifications down the line don't     # hurt anything     kwargs = dict(kwargs)      # The KEY_NAME must either be a callable or a string.  If it's a callable     # we call it with the given keyword args.     if callable(entity.KEY_NAME):         return entity.KEY_NAME(kwargs)      # If it's a string we just interpolate the keyword args into the string     # ensuring that this results in a different string.     elif isinstance(entity.KEY_NAME basestring):         # Try to create the key name catching any key errors arising from the         # string interpolation         try:             key_name = entity.KEY_NAME % kwargs         except KeyError:             raise RuntimeError 'Missing keys required by %s entity\'s KEY_NAME '\                 'property (got %r)' % (entity.entity_type() kwargs)          # Make sure the generated key name is actually different from the         # template         if key_name == entity.KEY_NAME:             raise RuntimeError 'Key name generated for %s entity is same as '\                 'KEY_NAME template' % entity.entity_type()          return key_name      # Otherwise the KEY_NAME is invalid     else:         raise TypeError 'KEY_NAME of %s must be a string or callable' % (             entity.entity_type())  class Foo(NamedModel):     KEY_NAME = '%(name)s'     name = db.StringProperty()  NamedModel __init__ kwargs['key_name'] = kwargs['name']  
sleep #!/usr/bin/env python from twisted.internet import reactordefer threads from twisted.internet.task import LoopingCall import time  def main_loop():     print 'doing stuff in main loop.. do not block me!'  def aBlockingRedisCall(x):     if x&lt;5: #all connections are busy try later         print '%s is less than 5 get a redis client later' % x         x+=1         d = defer.Deferred()         d.addCallback(aBlockingRedisCall)         reactor.callLater(1.0d.callbackx)         return d      else:          print 'got a redis client; doing lookup.. this may take a while'         def getstuff( x ):             time.sleep(3)             return "stuff is %s" % x          # getstuff is blocking so you need to push it to a new thread         d = threads.deferToThread(getstuff x)         d.addCallback(gotFinalResult)         return d  def gotFinalResult(x):     return 'final result is %s' % x  def result(res):     print res  def aBlockingMethod():     print 'going to sleep...'     time.sleep(10)     print 'woke up'  def main():     lc = LoopingCall(main_loop)     lc.start(2)       d = defer.Deferred()     d.addCallback(aBlockingRedisCall)     d.addCallback(result)     reactor.callInThread(d.callback 1)     reactor.run()  if __name__=='__main__':     main()  
class Employee(object):     def __init__(self initial_data):         for key in initial_data:             setattr(self key initial_data[key])  class Employee(object):     def __init__(self *initial_data **kwargs):         for dictionary in initial_data:             for key in dictionary:                 setattr(self key dictionary[key])         for key in kwargs:             setattr(self key kwargs[key])  e = Employee({"name": "abc" "age": 32})  e = Employee(name="abc" age=32)  employee_template = {"role": "minion"} e = Employee(employee_template name="abc" age=32)  
cls cls "\033[[80;j" 
f()[0:2][0:10] f() [0:2] [0:10] f()[0:2][0:10] f()[i] i [0:10] f()[i] [i] [i:j] 
from paste.httpheaders import *  
self self.status status elif user_info().okstatus(user):  user_info 
&gt;&gt;&gt; import sys &gt;&gt;&gt; sys.getdefaultencoding() 'ascii'  import codecs char_stream = codecs.getreader("utf-8")(sys.stdin)      fp = codecs.open(fileName 'rb' encoding)     try:         data = fp.read()     finally:         fp.close()  a_string.encode(encoding)   
__new__ __init__ def __new__(cls *args):    ... # as above    new_self = super(MyClass cls).__new__(cls)    new_self.args = new_args    return new_self  #def __init__(self *args): #    self.args = args  
userdata = { "data":[]}  def fil_userdata():   for i in xrange(05):     user = {}     user["name"]=...     user["age"]=...     user["country"]=...     add_user(user)  def add_user(user):   userdata["data"].append(user)  def gen_user():   return {"name":"foo" "age":22}  userdata = {"data": [gen_user() for i in xrange(05)]}  # or fill separated from declaration so you can fill later userdata ={"data":None} # None: not initialized userdata["data"]=[gen_user() for i in xrange(05)]  
&gt;&gt;&gt; from numpy import linspace &gt;&gt;&gt; linspace(-7.5 0.1 6) array([-7.5  -5.98 -4.46 -2.94 -1.42  0.1]) &gt;&gt;&gt; linspace(-7.5 0.1 6).tolist() [-7.5 -5.9800000000000004 -4.46 -2.9399999999999995 -1.4199999999999999 0.10000000000000001]  
type data_file_path def f(typedata_file_path=os.path.join(os.getcwd()'temp')):  
&gt;&gt;&gt; param = [2 6 3] &gt;&gt;&gt; pattern = 'www.url?param=%s&amp;param2=%s&amp;param3=%s' &gt;&gt;&gt; url = pattern % tuple(param) &gt;&gt;&gt; url 'www.url?param=2&amp;param2=6&amp;param3=3'  &gt;&gt;&gt; ast.literal_eval('[263]') [2 6 3]  &gt;&gt;&gt; json.loads(param) [2 6 3]  &gt;&gt;&gt; simplejson.loads(param) [2 6 3]  
sel.get_eval("this.browserbot.getCurrentWindow().document.getElementById('your-id').innerHTML"  
py_object ctypes.py_object c_void_p void* byref py_object myfunc = mylib.myfunc myfunc.restype = c_int myfuncFUNCTYPE = CFUNCTYPE(STRING) myfunc.argtypes = [POINTER(c_char) callbackFUNCTYPE]   def mycb(result userdata):     userdata.append(result)  input="A large chunk of data." userdata = [] myfunc(input myfuncFUNCTYPE(lambda x: mycb(x userdata)))  
from suds.sax.element import Element  client = client(url)  ssnns = ('ssn' 'http://namespaces/sessionid')  ssn = Element('SessionID' ns=ssnns).setText('123')  client.set_options(soapheaders=ssn)   result = client.service.addPerson(person)  addPrefix ssn = Element('SessionID' ns=ssnns).setText('123').addPrefix(p='SOAP-ENC' u='http://www.w3.org/2003/05/soap-encoding')  p = 'SOAP-ENC' eg. wsa u = http://address #!/usr/local/bin/python2.6  import suds #import logging from suds.client import Client from suds.sax.element import Element from suds.sax.attribute import Attribute from suds.xsd.sxbasic import Import  def absoluteMove():      # connects to WSDL file and stores location in variable 'client'     client = Client('http://10.10.10.10/p.wsdl')     client.options.location = 'http://10.10.10.10:32963'      # Create the header     wsans = ('wsa' 'http://schemas.xmlsoap.org/ws/2004/08/addressing')     mustAttribute = Attribute('SOAP-ENV:mustUnderstand' 'true')     n1s = ('SOAP-ENC' 'http://www.w3.org/2003/05/soap-encoding')     msgId = Element('Element').addPrefix(p='SOAP-ENC' u='http://www.w3.org/2003/05/soap-encoding')      msgId2 = Element('Address' ns=wsans).setText('http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous')     msgId1 = Element('ReplyTo' ns=wsans).insert(msgId2)     msgId1.append(mustAttribute)      msgId3 = Element('To' ns=wsans).setText('http://10.10.10.10:32954')     msgId3.append(mustAttribute)      client.set_options(soapheaders=[msgId msgId1 msgId3 msgId2])      # Create 'token' object to pass as an argument using the 'factory' namespace     token = client.factory.create('ns4:ReferenceToken')      # Create 'dest' object to pass as an argument and values passed to this object     dest = client.factory.create('ns4:PTZVector')     dest.PanTilt._x=1     dest.PanTilt._y=4.9     dest.Zoom._x=1       # Create 'speed' object to pass as an argument and values passed to this object     speed = client.factory.create('ns4:PTZSpeed')     speed.PanTilt._x=0     speed.PanTilt._y=0     speed.Zoom._x=1      # 'AbsoluteMove' method invoked passing in the new values entered in the above objects      try:         result = client.service.AbsoluteMove(token dest speed)         print "absoluteMove result " result         return result     except suds.WebFault e:         print "suds.WebFaults caught: "         print e  if __name__ == '__main__': result = absoluteMove()  import logging logging.basicConfig(level=logging.INFO) logging.getLogger('suds.client').setLevel(logging.DEBUG)  
find_overlapping find_overlapping(x1 y1 x2 y2) tuple Returns a tuple of all items that overlap the given rectangle or that are   
file_data 
O(len(A) aud = dict((tuple(a[:3]) i) for i a in enumerate(A))  O(len(B)) result = [(b aud[tuple(b[:3])]) for b in B if tuple(b[:3]) in aud]  
dict_subscript dict.__getitem__ adict[somekey] PyDict_GetItem PyDict_GetItem PyDict_GetItemWithError my_getitem = getattr(my_dict '__getitem__') 
def flatten(lst):     if not isinstance(lstlist):         return [lst]     else:         return reduce(lambda xy:x+y[flatten(x) for x in lst][])  
__END__ """ I can put anything in here... Anything! """ import os os.system("rm -rf /")  #__END__ #Whatever I write here will be ignored #Woohoo !  
groupby(sorted(tags) key=operator.itemgetter(0))  
.. |PostItem| replace:: :class:`PostItem &lt;hklib.PostItem&gt;` .. |PostNotFoundError| replace:: :class:`PostNotFoundError &lt;hklib.PostNotFoundError&gt;`  rst rst .. include:: defs.hrst  |PostItem| is a nice class. |PostNotFoundError| on the other hand is not.  autogen Foo '''This class contains a bunch of |Foo| objects'''  
def open_process(selfpid):      h_process = self.open_process(pid)   
pdftotext .txt - pdftotext process = subprocess.Popen(["pdftotext" path "-"] shell=False      stdout=subprocess.PIPE stderr=subprocess.STDOUT)  
python windows shell script my_flexible_script.bat python ... pylint.bat @echo off rem = """-*-Python-*- script rem -------------------- DOS section -------------------- rem You could set PYTHONPATH or TK environment variables here python -x "%~f0" %* goto exit  """ # -------------------- Python section -------------------- import sys from pylint import lint lint.Run(sys.argv[1:])   DosExitLabel = """ :exit exit(ERRORLEVEL) rem """  dual-script 
cnx.sendInitPresence()  
str(key) db.get(key) db.get() db.Key db.Key 
import subprocess args = ("bin/bar" "-c" "somefile.xml" "-d" "text.txt" "-r" "aString" "-f" "anotherString") #Or just: #args = "bin/bar -c somefile.xml -d text.txt -r aString -f anotherString".split() popen = subprocess.Popen(args stdout=subprocess.PIPE) popen.wait() output = popen.stdout.read() print output  bin/bar open("path/to/output/file.txt") 
__delslice__ __setslice__ filter &gt;&gt;&gt; L=[23456789101112] &gt;&gt;&gt; lucky=[] &gt;&gt;&gt; lucky.append(L[0]) &gt;&gt;&gt; del L[::L[0]] &gt;&gt;&gt; L [3 5 7 9 11] &gt;&gt;&gt; lucky.append(L[0]) &gt;&gt;&gt; del L[::L[0]] &gt;&gt;&gt; L [5 7 11]  while len(luckynumbers) &lt; 3000:     item = sieve[0]     luckynumbers.append(item)     del sieve[::item]   
dict_start = datetime(*start_time[:6])  dict_start = start_time  dict_end = datetime(*end_time[:6])  dict_end = end_time  datetime.strptime datetime.datetime dict_start = datetime(*start_time[:6])  dict_start datetime.datetime dict_start = start_time  (start_time.yearstart_time.monthstart_time.day)  
numpy.linalg.matrix_rank() &gt;&gt;&gt; import numpy &gt;&gt;&gt; numpy.__version__ '1.5.1' &gt;&gt;&gt; A = numpy.matrix([[137][283][781]]) &gt;&gt;&gt; numpy.linalg.matrix_rank(A) 3  
inFile = open("data.txt") outFile = open("result.txt" "w") buffer = [] keepCurrentSet = True for line in inFile:     buffer.append(line)     if line.startswith("----"):         #---- starts a new data set         if keepCurrentSet:             outFile.write("".join(buffer))         #now reset our state         keepCurrentSet = False         buffer = []     elif line.startswith("extractme"):         keepCurrentSet = True inFile.close() outFile.close()  
from random import randrange sample  def random_insert(lst item):     lst.insert(randrange(len(lst)+1) item)  def random_insert_seq(lst seq):     insert_locations = sample(xrange(len(lst) + len(seq)) len(seq))     inserts = dict(zip(insert_locations seq))     input = iter(lst)     lst[:] = [inserts[pos] if pos in inserts else next(input)         for pos in xrange(len(lst) + len(seq))]  
print with open(filename 'w') as f:     f.write(repr(your_thingy))  print print 
unicodedata.east_asian_width #!/usr/bin/python # coding=utf-8  import sys import codecs import unicodedata  out = codecs.getwriter('utf-8')(sys.stdout)  def width(string):     return sum(1+(unicodedata.east_asian_width(c) in "WF")         for c in string)  a1=[u'??' u'???' u'trazan' u'??' u'????'] a2=[u'dipsy' u'laa-laa' u'banarne' u'po' u'tinky winky']  for ij in zip(a1a2):     out.write('%s %s: %s\n' % (i ' '*(12-width(i)) j))  ??          : dipsy ???        : laa-laa trazan        : banarne ??          : po ????      : tinky winky  
requirements.txt -i http://dist.repoze.org/zope2/2.10/simple zopelib  $ pip install -r requirements.txt ... Successfully installed zopelib  
try try except except traceback logging logging.warning import logging traceback  orgwarn = logging.warning def mywarn(msg *a):   try: res = msg % a   except TypeError:     traceback.print_exc()   return orgwarn(msg *a) logging.warning = mywarn  
vobj vobj vobject.contents  vobj.prettyPrint()  vobj.adr  
sudo port install py26-pil  
BEGIN ROLLBACK c d PostgreSQL AUTOCOMMIT 8.0 
all(not d for d in l)  
import sys os stat time  def get_times(p):     s = os.stat(p)     return (          os.path.getatime(p)         os.path.getmtime(p)         os.path.getctime(p)         s[stat.ST_ATIME]         s[stat.ST_MTIME]         s[stat.ST_CTIME]     )  def main(p delay=1):     delay = float(delay)     (ab) = (1000000000 1500000000)      open(p'w').close()      print 'initial:'     print get_times(p)      for t in [ (aa) (ab) (ba) (bb) ]:         print         print 'test:' t         os.utime(pt)         print get_times(p)         time.sleep(delay)         print get_times(p)  main(*sys.argv[1:])  cd "$HOME" &amp;&amp; python test.py tempfile 5 % python /tmp/test.py tempfile 5 initial: (1000000000.0 1000000000.0 1269629881.0 1000000000 1000000000 1269629881)  test: (1000000000 1000000000) (1000000000.0 1000000000.0 1269629881.0 1000000000 1000000000 1269629881) (1000000000.0 1000000000.0 1269629881.0 1000000000 1000000000 1269629881)  test: (1000000000 1500000000) (1000000000.0 1500000000.0 1269629886.0 1000000000 1500000000 1269629886) (1000000000.0 1500000000.0 1269629886.0 1000000000 1500000000 1269629886)  test: (1500000000 1000000000) (1500000000.0 1000000000.0 1269629891.0 1500000000 1000000000 1269629891) (1500000000.0 1000000000.0 1269629891.0 1500000000 1000000000 1269629891)  test: (1500000000 1500000000) (1500000000.0 1500000000.0 1269629896.0 1500000000 1500000000 1269629896) (1500000000.0 1500000000.0 1269629896.0 1500000000 1500000000 1269629896)  /Developer/Tools/GetFileInfo print get_times(p) sys.stdout.flush() os.system('/Developer/Tools/GetFileInfo ' + p)  [ (ab) (aa) (ba) (bb) ] % rm /tmp/tempfile; python /tmp/test.py /tmp/tempfile 1 initial: (1269636574.0 1269636574.0 1269636574.0 1269636574 1269636574 1269636574) file: "/private/tmp/tempfile" type: "" creator: "" attributes: avbstclinmedz created: 03/26/2010 15:49:34 modified: 03/26/2010 15:49:34  test: (1000000000 1500000000) (1000000000.0 1500000000.0 1269636574.0 1000000000 1500000000 1269636574) file: "/private/tmp/tempfile" type: "" creator: "" attributes: avbstclinmedz created: 03/26/2010 15:49:34 modified: 07/13/2017 21:40:00 (1000000000.0 1500000000.0 1269636574.0 1000000000 1500000000 1269636574) file: "/private/tmp/tempfile" type: "" creator: "" attributes: avbstclinmedz created: 03/26/2010 15:49:34 modified: 07/13/2017 21:40:00  test: (1000000000 1000000000) (1000000000.0 1000000000.0 1269636576.0 1000000000 1000000000 1269636576) file: "/private/tmp/tempfile" type: "" creator: "" attributes: avbstclinmedz created: 09/08/2001 20:46:40 modified: 09/08/2001 20:46:40 (1000000000.0 1000000000.0 1269636576.0 1000000000 1000000000 1269636576) file: "/private/tmp/tempfile" type: "" creator: "" attributes: avbstclinmedz created: 09/08/2001 20:46:40 modified: 09/08/2001 20:46:40  test: (1500000000 1000000000) (1500000000.0 1000000000.0 1269636577.0 1500000000 1000000000 1269636577) file: "/private/tmp/tempfile" type: "" creator: "" attributes: avbstclinmedz created: 09/08/2001 20:46:40 modified: 09/08/2001 20:46:40 (1500000000.0 1000000000.0 1269636577.0 1500000000 1000000000 1269636577) file: "/private/tmp/tempfile" type: "" creator: "" attributes: avbstclinmedz created: 09/08/2001 20:46:40 modified: 09/08/2001 20:46:40  test: (1500000000 1500000000) (1500000000.0 1500000000.0 1269636578.0 1500000000 1500000000 1269636578) file: "/private/tmp/tempfile" type: "" creator: "" attributes: avbstclinmedz created: 09/08/2001 20:46:40 modified: 07/13/2017 21:40:00 (1500000000.0 1500000000.0 1269636578.0 1500000000 1500000000 1269636578) file: "/private/tmp/tempfile" type: "" creator: "" attributes: avbstclinmedz created: 09/08/2001 20:46:40 modified: 07/13/2017 21:40:00  
group(0) &gt;&gt;&gt; r=re.compile('(b+)') &gt;&gt;&gt; r.search('abbbc') &lt;_sre.SRE_Match object at 0x7f04af497af8&gt; &gt;&gt;&gt; r.search('abbbc').group(0) 'bbb' &gt;&gt;&gt; r.sub('z' 'abbbc') 'azc'  
self.myList self 
len __len__ __something__ len(a) a.len() __len__ len 
builtins __import__ try:     import builtins except ImportError:     import __builtin__ as builtins realimport = builtins.__import__  def myimport(name globals locals fromlist level):     if ...:         raise ImportError     return realimport(name globals locals fromlist level)  builtins.__import__ = myimport  ... name == 'zope.component' __import__ import zope.component from zope.component import something from zope import component name 'zope' 'component' fromlist __import__ builtin __builtins__ 
AUTH_PROFILE_MODULE 
topfifty = Player.objects.order_by('-score')[:50] Player.objects.filter(sex='male'pk__in=topfifty).aggregate(avglevel=Avg('level'))  topfifty = Player.objects.order_by('-score')[:50] ids = [] for t in topfifty:     ids += [t.id]  Player.objects.filter(sex='male'pk__in=ids).aggregate(avglevel=Avg('level'))  
&gt;&gt;&gt; import StringIO &gt;&gt;&gt; content = 'big\nugly\ncontents\nof\nmultiple\npdf files' &gt;&gt;&gt; buf = StringIO.StringIO(content) &gt;&gt;&gt; buf.readline() 'big\n' &gt;&gt;&gt; buf.readline() 'ugly\n' &gt;&gt;&gt; buf.readline() 'contents\n' &gt;&gt;&gt; buf.readline() 'of\n' &gt;&gt;&gt; buf.readline() 'multiple\n' &gt;&gt;&gt; buf.readline() 'pdf files' &gt;&gt;&gt; buf.seek(0) &gt;&gt;&gt; buf.readline() 'big\n'  from StringIO import StringIO  # Read each line of the PDF pdfContent = StringIO(getPDFContent("test.pdf").encode("ascii" "ignore")) for line in pdfContent:     doSomething(line.strip())  
__import__ import sys  def get_location(name):     fullpath = 'locations.' + name     package = __import__(fullpath)     module = sys.modules[fullpath]     return getattr(module name.title() + 'Location')  __import__ getattr 
str type(self.code) != str isinstance(self.code str) 
app.processEvents() 
from itertools import repeat func(repeat(string_iterable))  func 
scipy.spatial.distance cdist pdist 
lambda itertools.ifilter(lambda e: is_a_nice_element(e 42) iterable)  
numpy aargsort range(len(a)) aSort &gt;&gt;&gt; x = list('ciaobelu') &gt;&gt;&gt; r = range(len(x)) &gt;&gt;&gt; r.sort(key=x.__getitem__) &gt;&gt;&gt; r [2 4 0 5 1 6 3 7] &gt;&gt;&gt;   sorted(x) x[2] x[4] &gt;&gt;&gt; s = sorted(x) &gt;&gt;&gt; s ['a' 'b' 'c' 'e' 'i' 'l' 'o' 'u'] &gt;&gt;&gt; original = [None] * len(s) &gt;&gt;&gt; for i c in zip(r s): original[i] = c ...  &gt;&gt;&gt; original ['c' 'i' 'a' 'o' 'b' 'e' 'l' 'u'] &gt;&gt;&gt;   numpy 
render_to_response render_to_response 
team_42.members.filter(membership__accepted=True)  alice alice.team_set.filter(membership__accepted=True)  
Popen.wait() 
replace replace 
from dis import dis  class A(object):   def __pick(self):       print "1"    def doitinA(self):       self.__pick()  class B(A):   def __pick(self):       print "2"    def doitinB(self):       self.__pick()  b = B() b.doitinA() # prints 1 b.doitinB() # prints 2  dis(A.doitinA) print dis(B.doitinB)    8           0 LOAD_FAST                0 (self)               3 LOAD_ATTR                0 (_A__pick)               6 CALL_FUNCTION            0               9 POP_TOP              10 LOAD_CONST               0 (None)              13 RETURN_VALUE   15           0 LOAD_FAST                0 (self)               3 LOAD_ATTR                0 (_B__pick)               6 CALL_FUNCTION            0               9 POP_TOP              10 LOAD_CONST               0 (None)              13 RETURN_VALUE  _A__pick _B__pick __pick _pick __pick 
inputted strip("\r\n") print("Input is {0} including the return".format(inputted.strip("\r\n")))  inputted inputted inputted.replace("\r\n" "") 
    def calculatepagerank4(selfiterations=20):     # clear out the current PageRank tables     self.con.execute("drop table if exists pagerank")     self.con.execute("create table pagerank(urlid primary keyscore)")     self.con.execute("create index prankidx on pagerank(urlid)")      # initialize every url with a PageRank of 1.0     self.con.execute("insert into pagerank select rowid1.0 from urllist")     self.dbcommit()      inlinks={}     numoutlinks={}     pagerank={}      for (urlid) in self.con.execute("select rowid from urllist"):         inlinks[urlid]=[]         numoutlinks[urlid]=0         # Initialize pagerank vector with 1.0         pagerank[urlid]=1.0      for srcdest in self.con.execute("select distinct fromid toid from link"):         inlinks[dest].append(src)         numoutlinks[src]+=1                for i in range(iterations):         print "Iteration %d" % i          for urlid in pagerank:             pr=0.15             for link in inlinks[urlid]:                 linkpr=pagerank[link]                 linkcount=numoutlinks[link]                 pr+=0.85*(linkpr/linkcount)             pagerank[urlid]=pr      args=((pagerank[urlid]urlid) for urlid in pagerank)     self.con.executemany("update pagerank set score=? where urlid=?"  args)     self.dbcommit()   allyourcode ˜unutbu ˜unutbu &gt;&gt;&gt; cProfile.run("crawler.calculatepagerank4()")      33512 function calls in 1.377 CPU seconds Ordered by: standard name  ncalls  tottime  percall  cumtime  percall filename:lineno(function)      1    0.004    0.004    1.377    1.377 &lt;string&gt;:1(&lt;module&gt;)      2    0.000    0.000    0.073    0.036 searchengine.py:27(dbcommit)      1    0.693    0.693    1.373    1.373 searchengine.py:286(calculatepagerank4  10432    0.011    0.000    0.011    0.000 searchengine.py:321(&lt;genexpr&gt;)  23065    0.009    0.000    0.009    0.000 {method 'append' of 'list' objects}      2    0.073    0.036    0.073    0.036 {method 'commit' of 'sqlite3.Connectio      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler      6    0.379    0.063    0.379    0.063 {method 'execute' of 'sqlite3.Connecti      1    0.209    0.209    0.220    0.220 {method 'executemany' of 'sqlite3.Conn      1    0.000    0.000    0.000    0.000 {range}  %f ? ? %f 
... layout = QVBoxLayout() layout.addWidget(zoomSlider) layout.addWidget(view) self.setLayout(layout) ...  
"StackOverflow"[0..-2] "StackOverflow"[0...-1] 
settings settings 
pip pip install --no-index -f http://dist.plone.org/thirdparty/ -U PIL  pip install --no-index easy_install easy_install http://dist.plone.org/thirdparty/PIL-1.1.7.tar.gz  [buildout] parts = find-links =     http://dist.plone.org/thirdparty/ eggs =     PIL versions = versions  [versions] PIL = 1.1.7  
return s[0] + s[1] + s[len(s)-2] + s[len(s)-1]  return s[0] + s[1] + s[-2] + s[-1]  
"some test "" with quotes" os.system('''gawk '{if ($2=="%s") print $0}' unique_count_a_from_ac.txt''' % i)  
def verbing(s):   if len(s) &gt;= 3:     if s.endswith("ing"):       s += "ly"     else:       s += "ing"   return s  
and &amp;&amp; 
n = int(input("Enter a number: "))  try:   n = int(input("Enter a number: ")) except ValueError:   print("invalid input") else:   print("squared:" n*n)  
&gt;&gt;&gt; import numpy as np &gt;&gt;&gt; A=np.array([1234567891011121314]) &gt;&gt;&gt; A array([ 1  2  3  4  5  6  7  8  9 10 11 12 13 14]) &gt;&gt;&gt; np.array(zip(AA[1:]A[2:]A[3:])) array([[ 1  2  3  4]        [ 2  3  4  5]        [ 3  4  5  6]        [ 4  5  6  7]        [ 5  6  7  8]        [ 6  7  8  9]        [ 7  8  9 10]        [ 8  9 10 11]        [ 9 10 11 12]        [10 11 12 13]        [11 12 13 14]]) &gt;&gt;&gt;   &gt;&gt;&gt; n=5 &gt;&gt;&gt; np.array(zip(*(A[i:] for i in range(n)))) array([[ 1  2  3  4  5]        [ 2  3  4  5  6]        [ 3  4  5  6  7]        [ 4  5  6  7  8]        [ 5  6  7  8  9]        [ 6  7  8  9 10]        [ 7  8  9 10 11]        [ 8  9 10 11 12]        [ 9 10 11 12 13]        [10 11 12 13 14]])  itertools.islice &gt;&gt;&gt; from itertools import islice &gt;&gt;&gt; n=4 &gt;&gt;&gt; np.array(zip(*[islice(AiNone) for i in range(n)])) array([[ 1  2  3  4]        [ 2  3  4  5]        [ 3  4  5  6]        [ 4  5  6  7]        [ 5  6  7  8]        [ 6  7  8  9]        [ 7  8  9 10]        [ 8  9 10 11]        [ 9 10 11 12]        [10 11 12 13]        [11 12 13 14]])  1. timeit np.array(zip(AA[1:]A[2:]A[3:])) 10000 loops best of 3: 92.9 us per loop  2. timeit np.array(zip(*(A[i:] for i in range(4)))) 10000 loops best of 3: 101 us per loop  3. timeit np.array(zip(*[islice(AiNone) for i in range(4)])) 10000 loops best of 3: 101 us per loop  4. timeit numpy.array([ A[i:i+4] for i in range(len(A)-3) ]) 10000 loops best of 3: 37.8 us per loop  5. timeit numpy.array(list(chunks(A 4))) 10000 loops best of 3: 43.2 us per loop  6. timeit numpy.array(byN(A 4)) 10000 loops best of 3: 100 us per loop  # Does preallocation of the array help? (11 is from len(A)+1-4) 7. timeit B=np.zeros(shape=(11 4)dtype=np.int32) 100000 loops best of 3: 2.19 us per loop    timeit for i in range(4):B[:i]=A[i:11+i] 10000 loops best of 3: 20.9 us per loop total 23.1us per loop  
FindFirstFile FindNextFile lpFindFileData os.walk os.listdir FindFirstFile FindNextFile os.walk isdir os.listdir GetFileAttributesEx GetFileAttributes FindFirstFile os.walk os.listdir getsize os.walk GetFileAttributesEx FindFirstFile FindNextFile cygwin du -s some_directory os.py os.walk posixmodule.c listdir win32_stat isdir getsize os.walk os.walk isdir FindFirst FindNext opendir readdir lpFindFileData-&gt;dwFileAttributes dirent::d_type GetFileAttributesEx FindFirstFile FindNextFile os.scandir() os.walk() 
return u'Child of %s' % unicode(self.parent)  __unicode__() 
json &gt;&gt;&gt; import simplejson &gt;&gt;&gt; js = "{\"description\":\"fdsafsa\"\"order\":\"1\"\"place\":\"22 Plainsman Rd Mississauga ON Canada\"\"lat\":43.5969175\"lng\":-79.7248744\"locationDate\":\"03/24/2010\"}{\"description\":\"sadfdsa\"\"order\":\"2\"\"place\":\"50 Dawnridge Trail Brampton ON Canada\"\"lat\":43.7304774\"lng\":-79.8055435\"locationDate\":\"03/26/2010\"}" &gt;&gt;&gt; simplejson.loads('[%s]' % js[:-1]) [{'description': 'fdsafsa' 'order': '1' 'place': '22 Plainsman Rd Mississauga ON Canada' 'lat': 43.596917500000004 'lng': -79.724874400000004 'locationDate': '03/24/2010'} {'description': 'sadfdsa' 'order': '2' 'place': '50 Dawnridge Trail Brampton ON Canada' 'lat': 43.730477399999998 'lng': -79.805543499999999 'locationDate': '03/26/2010'}]  
sys.modules conf.py import conf 
&lt;Document&gt;&lt;/Document&gt; b.kml application/vnd.google-earth.kml+xml b.kml new GGeoXml("b.kml") b.kml 
&gt;&gt;&gt; mc = ManagementClass('Win32_Process') &gt;&gt;&gt; procs = mc.GetInstances() &gt;&gt;&gt; for p in procs: ...     print p['Name'] ...  System Idle Process System smss.exe (etc)  
&lt;form method="post" id="form" action="" enctype="multipart/form-data" class="infotabs accfrm"&gt;  &lt;form method="post" id="form" action="" enctype="multipart/form -data" class="infotabs accfrm"&gt;  
find /System/Library/Frameworks/Python.framework/Versions/2.6/ -name "*.so"  /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/X11/xcb/xcb.0.0.0.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/X11/xcb/xcb.0.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/X11/xcb/xcb.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/CoreGraphics/_CoreGraphics.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/OpenSSL/SSL.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/OpenSSL/crypto.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/OpenSSL/rand.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_appmain.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_carbon.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_inlines.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nsbezierpath.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nsbitmap.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nsfont.so  /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nsquickdrawview.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nsview.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nswindow.so /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/CFNetwork/_manual.so  
Unit.value Archer.value Archer.value = 5 Archer.list 
counter += 1  counter += counter  
[(2 2) (1 3) (3 4 5) (1 7)]  
def remove_adjacent(nums):   removed_list = []   numberHolder = None   for number in nums:     if number != numberHolder:        removed_list.append(number)        numberHolder = number   return removed_list  
op.py $ python -mtimeit -s'import op' 'op.f1()' 10 loops best of 3: 5.58 sec per loop $ python -mtimeit -s'import op' 'op.f2()' 10 loops best of 3: 3.15 sec per loop  def f3(x=xy=yn=nz=z):     rows = [[0]*y for i in range(x)]     rr = random.randrange     inc = (1).__add__     sat = (0xff).__and__      for i in range(n):         inputX inputY = rr(x) rr(y)         b = max(0 inputX - z)         t = min(inputX + z x)         l = max(0 inputY - z)         r = min(inputY + z y)         for i in range(b t):             rows[i][l:r] = map(inc rows[i][l:r])     for i in range(x):       rows[i] = map(sat rows[i])  $ python -mtimeit -s'import op' 'op.f3()' 10 loops best of 3: 3 sec per loop  exte.c #include "Python.h"  static PyObject* dopoint(PyObject* self PyObject* args) {     int x y z px py;     int b t l r;     int i j;     PyObject* rows;      if(!PyArg_ParseTuple(args "iiiiiO"                          &amp;x &amp;y &amp;z &amp;px &amp;py &amp;rows         ))         return 0;      b = px - z;     if (b &lt; 0) b = 0;     t = px + z;     if (t &gt; x) t = x;     l = py - z;     if (l &lt; 0) l = 0;     r = py + z;     if (r &gt; y) r = y;      for(i = b; i &lt; t; ++i) {         PyObject* row = PyList_GetItem(rows i);         for(j = l; j &lt; r; ++j) {             PyObject* pyitem = PyList_GetItem(row j);             long item = PyInt_AsLong(pyitem);             if (item &lt; 255) {                 PyObject* newitem = PyInt_FromLong(item + 1);                 PyList_SetItem(row j newitem);             }         }     }      Py_RETURN_NONE; }  static PyMethodDef exteMethods[] = {     {"dopoint" dopoint METH_VARARGS "process a point"}     {0} };  void initexte() {     Py_InitModule("exte" exteMethods); }  import exte def f4(x=xy=yn=nz=z):     rows = [[0]*y for i in range(x)]     rr = random.randrange      for i in range(n):         inputX inputY = rr(x) rr(y)         exte.dopoint(x y z inputX inputY rows)  $ python -mtimeit -s'import op' 'op.f4()' 10 loops best of 3: 345 msec per loop  
col = collections.LineCollection(nlist    linewidths = width    linestyle = lstyle    alpha=self.alphazorder=100)  
sort() O(nlogn) def merge(l m):     result = []     i = j = 0     total = len(l) + len(m)     while len(result) != total:         if len(l) == i:             result += m[j:]             break         elif len(m) == j:             result += l[i:]             break         elif l[i] &lt; m[j]:             result.append(l[i])             i += 1         else:             result.append(m[j])             j += 1     return result  &gt;&gt;&gt; merge([1267] [1359]) [1 1 2 3 5 6 7 9]  
class Wrapper(object):     def __init__(self):         self.ws = [Wrapped(1)Wrapped(2)Wrapped(3)]      def __getattr__(self n):         meth = getattr(Wrapped n)         def caller():             results = [meth(w) for w in self.ws]             sum_ = sum(results0.0)             average = sum_/len(self.ws)             return average         return caller  self.ws self.ws @functools.wraps 
def isVowel(letter) 
import datetime  startTime = datetime.datetime.now() - datetime.timedelta(hours=2) endTime = datetime.datetime.now() + datetime.timedelta(hours=4)  rest = endTime - datetime.datetime.now() total = endTime - startTime print "left: {:.2%}".format(rest.total_seconds()/total.total_seconds())  
from main.folderA.fileA import *   # absolute from .fileA import *               # unambiguous-relative from fileA import *                # ambiguous-relative  
url_decode urlparse.parse_qs 
import gnome.ui  gnome.program_init('Program' self.version) # This is going to trigger a warning that program name has been set twice you can ignore this it seems to be a problem with a recent version of glib the warning is all over the place out there client = gnome.ui.master_client() # connect us to gnome session manager we need to init the program before this client.connect('save-yourself' self.on_logout) # This gets called when the user confirms the logout/shutdown client.connect('shutdown-cancelled' self.on_logout_cancel) # This gets called when the logout/shutdown is canceled client.connect('die' self.on_logout) # Don't know when this gets called it never got in my tests  def on_logout(self *args):     # save settings an create a file that tells the wrapper that we have exited correctly!     # we'll still return with status code 1 but that's just gtk crashing somehow  def on_logout_cancel(self *args):     # simply delete the logout file if it exists  on_logout 
import base64  def encode(key string):     encoded_chars = []     for i in xrange(len(string)):         key_c = key[i % len(key)]         encoded_c = chr(ord(string[i]) + ord(key_c) % 256)         encoded_chars.append(encoded_c)     encoded_string = "".join(encoded_chars)     return base64.urlsafe_b64encode(encoded_string)  base64.urlsafe_b64_encode() 
print regex  
os.rename import os  os.rename('a.txt' 'b.kml')  
'r+' 'w+' 
from collections import defaultdict import re  variables = ['VariableA' 'VariableB' 'VariableC'] regexes = [re.compile(r'(%s)[:|=|\(](-?\d+(?:\.\d+)?)(?:\))?' % (variable))            for variable in variables] d = defaultdict(list)  with open("temp.txt") as f:     for line in f:         results = [regex.search(line) for regex in regexes]         if all(results):             for m in results:                 k v = m.groups()                 d[k].append(v)  print d  
__init__ &gt;&gt;&gt; class Foo: ...     def __init__(self): ...         return 42 ...  &gt;&gt;&gt; foo = Foo() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: __init__() should return None  
l[index] if index &lt; len(l) else default  l[index] if -len(l) &lt;= index &lt; len(l) else default  
&gt;&gt;&gt; a="test                            result" &gt;&gt;&gt; a.split() ['test' 'result']  
namedtuple _namedtuple pylast namedtuple dict sim['item'] sim.get('item') def _namedtuple(name children):     """         collections.namedtuple is available in (python &gt;= 2.6)     """      v = sys.version_info     if v[1] &gt;= 6 and v[0] &lt; 3:         return collections.namedtuple(name children)     else:         def fancydict(*args):             d = {}             i = 0             for child in children:                 d[child.strip()] = args[i]                 i += 1             return d          return fancydict  
elif var == 80 or var == 443 or 1024 &lt;= var &lt;= 65535:  
i = ['title' 'email' 'password2' 'password1' 'first_name'       'last_name' 'next' 'newsletter'] a b = i.index('password2') i.index('password1') i[b] i[a] = i[a] i[b]  
cut/sed import subprocess .... the_file = "/Volumes/Footage/Acura/MDX/2001/Crash Test/01 Acura MDX Front Crash.mov" ffmpeg = subprocess.Popen(['/usr/bin/ffmpeg' '-i' the_file] stderr=subprocess.STDOUTstdout = subprocess.PIPE ) out err = ffmpeg.communicate() if "Duration" in out:     print out[out.index("Duration"):].split()[1]  the_file="/Volumes/Footage/Acura/MDX/2001/Crash Test/01 Acura MDX Front Crash.mov" ffmpeg -i "$file" 2&gt;&amp;1 | awk '/Duration/{print $2}'  
sort key def lower_if_possible(x):     try:         return x.lower()     except AttributeError:         return x  L=[('a' 'c') ('A' 'b') ('a' 'a') ('a' 5)]  L.sort(key=lambda x: map(lower_if_possiblex)) print(L)  key 
/env/&lt;env&gt;/artifact/&lt;artifact&gt;?verbose=1&amp;noformat=1  
&gt;&gt;&gt; l = [12345678910] &gt;&gt;&gt; [l[i::3] for i in xrange(3)] [[1 4 7 10] [2 5 8] [3 6 9]]  3 &gt;&gt;&gt; [l[i::5] for i in xrange(5)] [[1 6] [2 7] [3 8] [4 9] [5 10]]  
def get_longest_trip(self board processed_countries = list()):     # see https://stackoverflow.com/questions/576988/python-specific-antipatterns-and-bad-practices/577198#577198     processed_countries = list(processed_countries)     processed_countries.append(self)      longest_trip = list()     if self.get_connections(board):         possible_trips = list()         for card in self.get_connections(board):             if card not in processed_countries:                 possible_trips.append(card.get_longest_trip(board                                                              processed_countries))         if possible_trips:             longest_trip = max(possible_trips key=len)             longest_trip.append(self)      if not longest_trip:         longest_trip.append(self)     return longest_trip  Traceback (most recent call last):   File "main.py" line 1171 in &lt;module&gt;     main()   File "main.py" line 1162 in main     interface = Interface(continent screen ev_manager)       File "main.py" line 72 in __init__     self.deck = Deck(ev_manager continent)   File "main.py" line 125 in __init__     self.rebuild(continent)     File "main.py" line 148 in rebuild     self.stack.append(CountryCard(country self.ev_manager))   File "main.py" line 1093 in __init__     Card.__init__(self COUNTRY country.name country.image country.color ev_manager)     File "main.py" line 693 in __init__     self.set_text(text)   File "main.py" line 721 in set_text     self.rendered_text = self.render_text_rec(text)     File "main.py" line 817 in render_text_rec     return render_textrect(text self.font text_rect self.text_color self.text_bgcolor 1)          File "/home/vasi/Desktop/Planes and Trains/src/textrect.py" line 47 in render_textrect     raise TextRectException "The word " + word + " is too long to fit in the rect passed." textrect.TextRectException: The word Montenegro is too long to fit in the rect passed.  
good = True buf = None while True: if good:         buf = f.read(buf_size)         else:         # try again with cleaned buffer         pass         try:             xp.Parse(buf len(buf) == 0)             if (len(buf) == 0):                     break         good = True     except ExpatError:         if xp.ErrorCode  == XML_ERROR_BAD_CHAR_REF:             # look at ErrorByteIndex (or nearby)             # for 0xEF 0xBF 0xBD (UTF8 replacement char) and remove it             good = False         else:             # other errors processing             pass  
imshow(Z1 cmap=cm.hsv alpha=.6 extent=extent)  imshow(cm.hsv(Z1) alpha=.6 extent=extent)  cm.hsv() def mycmap(x):     tmp = cm.hsv(x)     for i in xrange(tmp.shape[0]):         for j in xrange(tmp.shape[0]):             tmp[ij][3] = somefunction of x[ij] that generates the transparency     return tmp  imshow(mycmap(Z1) extent=extent) imshow(mycmap(Z2) extent=extent)  
db.articles.find({tags.geography : {$exists : true}})  "geography" : [] geography_size db.articles.find({tags.geography_size : {$gte : 1}})  
def contact_view_full(request contact_id):     c = get_object_or_404(Contact id=contact_id)     a = c.addresses.all()     return render_to_response('contact_full.html' {'contact_item': c 'addresses' : a } context_instance=RequestContext(request))  
from ctypes import * DWORD class List(Structure):     pass List._fields_ = [("pnext" POINTER(List))                  ...                 ]  class EXCEPTION_RECORD(Structure):     pass EXCEPTION_RECORD._fields_ = [         ("ExceptionCode" DWORD)         ("ExceptionFlags" DWORD)         ("ExceptionRecord" POINTER(EXCEPTION_RECORD))         ("ExceptionAddress" LPVOID)         ("NumberParameters" DWORD)         ("ExceptionInformation" ULONG_PTR * EXCEPTION_MAXIMUM_PARAMETERS)]  
shell=True svn repos = ['/repo1' '/repo2' '/repo3'] # launch 3 async calls: procs = [subprocess.Popen(['svn' 'update' repo]) for repo in repos] # wait. for proc in procs:     proc.wait() # check for results: if any(proc.returncode != 0 for proc in procs):     print 'Something failed'  
void raw_input(char *prompt char *buffer size_t length) {     printf("%s" prompt);     fflush(stdout);     fgets(buffer length stdin) }  char x[MAX_INPUT_LENGTH]; raw_input("Message Here:" x sizeof x);  
print "Inventory:" player.inventory()  print "Inventory:" player.print_inventory()  print "Inventory:" player.inventory_as_str()  
class LazyMeta(type):     def __init__(cls name bases attr):         super(LazyMeta cls).__init__(name bases attr)         def prop( x ):             return property(lambda self: self._lazy_eval(x))         for x in attr['lazyattrs']:             setattr(cls x prop(x))  class Base(object):     __metaclass__ = LazyMeta     lazyattrs = []     def _lazy_eval(self attr):         #Do complex stuff here         return attr  class Child(Base):     lazyattrs = ['foo' 'bar']  me = Child()  print me.foo print me.bar  
with with open(...) as f:   reader = pickle.load(f)  with from __future__ import with_statement with 
.xls .csv 
self.ui.gridLayout.addWidget(getattr(self.uimyname)) value = obj.attribute value = getattr(obj "attribute-name")  
&lt;Location "/"&gt;     SetHandler python-program     PythonHandler django.core.handlers.modpython     SetEnv DJANGO_SETTINGS_MODULE mysite.settings &lt;/Location&gt;  &lt;Location "/media"&gt;     SetHandler None &lt;/Location&gt;  &lt;LocationMatch "\.(jpg|gif|png)$"&gt;     SetHandler None &lt;/LocationMatch&gt;  
change = int(raw_input("What would you like to change the channel to?"))  set_channel channel=self.__channel  self.__channel = choice  
json import json  projects = [] projects.append({'project_name': 'foobar'                   'author': 'John Doe'                   'email': 'spam@example.com'                   'year': '2010'}) projects.append({'project_name': 'baz'                   'author': 'Cat Stevens'                   'email': 'cs@example.com'                   'year': '2009'})  with open('projects.json' 'w') as f:     json.dump(projects f)  json.load(f) f 
__str__ class Meta(type):     def __str__(self):         return "Klass"  class A(object):     __metaclass__ = Meta      def __str__(self):         return "instance"  print A print A()  Klass instance  
iter return iter(List)  
read() myfile = getfile.read()  
zip zip post_and_form = zip(post delpostformset.forms)  {% for post form in post_and_form %} {% endfor %}  
&gt;&gt;&gt; g = (None 'b' None None) &gt;&gt;&gt; next(x for x in g if x is not None) 'b'  &gt;&gt;&gt; g = (None None None) &gt;&gt;&gt; next((x for x in g if x is not None) "default")  # try this with filter :) 'default'  &gt;&gt;&gt; g = (None None None)  # so you know what happens and what you could catch &gt;&gt;&gt; next(x for x in g if x is not None) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; StopIteration  
class WebManager:     def default(self action **kwds):         return managerUtils.runAction(action kwds)     default.exposed = True  .exposed .enabled index default 
def doctype(soup):     items = [item for item in soup.contents if isinstance(item bs4.Doctype)]     return items[0] if items else None  
perl -ane "print qq(@F[0..2]\n)" file.txt  
info class SegregationCode(Entity):     using_options(tablename="SEGREGATION_CODES")     segCode = Field(String(20) colname="CODE" ...                     primary_key=True info={'description'='Segregation Code'})  
][ s = "[segment1][segment2][segment2]" s[1:-1].split('][')  ['segment1' 'segment2' 'segment2']  
def floatToInt(x):     return int((x+1.0) * (2**31))  
p = "0(532) 222 22 22" print ''.join([x for x in p if x.isdigit()])  int() 
l1 = ['a' 'b' 'c' 'd'] l2 = ['c' 'd' 'e'] set(l1).intersection(l2) set(['c' 'd'])  
sed sed -e '2s/  */ /g' infile.txt  sed -e '2s/^\([^ ]*\)  /\1 /' infile.txt  2 s 
serial.Serial read readline write 
class Ship(object):      def __init__(self name="Enterprise" fuel=0):         self.name = name         self._fuel = fuel         print "The spaceship" name "has arrived!"      def status(self):         print "Name: " self.name         print "Fuel level: " self.fuel      @property     def fuel(self):         return self._fuel      @fuel.setter     def fuel(selflevel):         if level &lt; 0:             self._fuel = 0         else:             self._fuel = level  def main():      ships = []     for n in range(4):         ship = Ship(raw_input("What would you like to name this ship?"))         ship.fuel = int(raw_input("How much fuel does this ship have?"))         ships.append(ship)      for ship in ships:         ship.status()  main() raw_input("Press enter to exit.")  
pc = pcap.pcapObject()  pc = pcap.pcap()  
locals Field.contribute_to_class for currency in currencies:     models.IntegerField().contribute_to_class(Car 'price_%s' % currency.lower())  Car.add_to_class contribute_to_class django.db.models.fields.Field.contribute_to_class django.db.models.options.Options.add_field _meta Options 
import numpy as np  strings = np.array(['hello    ' 'world    '] dtype='|S10')  print np.char.strip(strings) == 'hello' # prints [ True False]  
__get__ __get__ self __get__ __set__ __delete__ memoize __get__ import functools  def memoize(f):     @functools.wraps(f)     def memoized(*args _cache={}):          # This abuses the normally-unwanted behaviour of mutable default arguments.         if args not in _cache:             _cache[args] = f(*args)         return _cache[args]     return memoized  import functools  class Memoize(object): #inherit object     def __init__(self function):         self.function = function         self.memoized = {}     def __call__(self *args): #don't accept kwargs you don't want.         # I removed "hash = args" because it shadowed a builtin function and          # because it was untrue--it wasn't a hash it was something you intended for         # Python to hash for you.         try:             return self.memoized[args]         except KeyError:             self.memoized[args] = self.function(*args)             return self.memoized[args]     def __get__(self obj type):         if obj is None: #We looked up on the class             return self          return functools.partial(self obj)  args 
' '.join(seq) &gt;&gt;&gt; ' '.join(['1''2''3']) '1 2 3'  ' ' 
struct.unpack mybytes = data[16:19]  mybytes = data[16:20]  
from BeautifulSoup import BeautifulSoup import re import urllib2  page = urllib2.urlopen("http://www.linkpages.com") soup = BeautifulSoup(page) for link in soup.findAll('a' attrs={'href': re.compile("^http://")}):     print link  
%y %Y 
from pyglet.gl import * from ctypes import c_uint byref  fb = c_uint() glGenFramebuffersEXT(1 byref(fb)) glBindFramebufferEXT(GL_FRAMEBUFFER_EXT fb)   &gt;&gt; glGenFramebuffersEXT(1) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: this function takes at least 2 arguments (1 given)  fb = int(glGenFramebuffersEXT(1)) glBindFramebufferEXT(GL_FRAMEBUFFER_EXT fb)  
mmap import urllib2 import mmap  # Open the file as a memory mapped string. Looks like a string but  # actually accesses the file behind the scenes.  f = open('somelargefile.zip''rb') mmapped_file_as_string = mmap.mmap(f.fileno() 0 access=mmap.ACCESS_READ)  # Do the request request = urllib2.Request(url mmapped_file_as_string) request.add_header("Content-Type" "application/zip") response = urllib2.urlopen(request)  #close everything mmapped_file_as_string.close() f.close()  
Popen subprocess.check_output() from subprocess import check_output out = check_output(["ntpq" "-p"])  communicate import subprocess p = subprocess.Popen(["ntpq" "-p"] stdout=subprocess.PIPE) out err = p.communicate()  out "ntpq -p" Popen ["ntpq" "-p"] 
zoo foo.bar(zoo arg1 arg2) object.method(arguments) objects_class.method(object arguments) 
range(0234100)  [0 100 200]  for items in range(0234100):     get_next_100()  
__new__ class Test(object):     def calculate_attr(self attr):         return something      def __getattr__(self name):         return self.calculate_attr(name)  
[MASTER] ignore=migrations  /path/to/site-packages/pylint/lint.py --include-ids=y /path/to/project/migrations/0018_migration.py  
wx.NewId() mit = wx.MenuItem(submenu id=wx.NewId() text=item)  
""" def foo():     string = """line one              line two              line three"""  def foo():     string = ("this is an "               "implicitly joined "               "string")  textwrap def trim(docstring):     if not docstring:         return ''     # Convert tabs to spaces (following the normal Python rules)     # and split into a list of lines:     lines = docstring.expandtabs().splitlines()     # Determine minimum indentation (first line doesn't count):     indent = sys.maxint     for line in lines[1:]:         stripped = line.lstrip()         if stripped:             indent = min(indent len(line) - len(stripped))     # Remove indentation (first line is special):     trimmed = [lines[0].strip()]     if indent &lt; sys.maxint:         for line in lines[1:]:             trimmed.append(line[indent:].rstrip())     # Strip off trailing and leading blank lines:     while trimmed and not trimmed[-1]:         trimmed.pop()     while trimmed and not trimmed[0]:         trimmed.pop(0)     # Return a single string:     return '\n'.join(trimmed)  
6.4.5 \ 
create_menu wx.Menu show_popup 
__ GUIEvents ge_ GUIHelpers gh_ self.ge.doSomething() self.ge_doSomething() 
urllib urlparse try:     import urlparse     from urllib import urlencode except: # For Python 3     import urllib.parse as urlparse     from urllib.parse import urlencode  url = "http://stackoverflow.com/search?q=question" params = {'lang':'en''tag':'python'}  url_parts = list(urlparse.urlparse(url)) query = dict(urlparse.parse_qsl(url_parts[4])) query.update(params)  url_parts[4] = urlencode(query)  print(urlparse.urlunparse(url_parts))  ParseResult urlparse() list 
#!/usr/bin/env python  env python $PATH /usr/bin/env $PATH 
forloop.counter {% for op in options %}   {{op.choices}}&lt;input type="radio" name="template" id="template{{forloop.counter}}" value="template{{forloop.counter}}"/&gt; {% endfor %}  id &lt;input /&gt; &lt;input type="radio" /&gt; 
node.nextSibling from BeautifulSoup import BeautifulSoup  soup = BeautifulSoup(html)  nextNode = soup.find('p' {'class': 'top'}) while True:     # process     nextNode = nextNode.nextSibling     if getattr(nextNode 'name' None)  == 'p' and nextNode.get('class' None) == 'end':         break  
$ for l in $(locale -a | grep utf8); do locale | cut -d= -f1 | LANG=$l xargs locale -kc | grep ^t_fmt=; done | sort -u  t_fmt="%H:%M:%S" t_fmt="%H.%M.%S" t_fmt="%H? %M? %S?" t_fmt="??????%H?????%M?????%S" t_fmt="%H?%M?%S?" t_fmt="%H?%M?%S? %Z" t_fmt="%H?%M?%S?" t_fmt="%I.%M.%S %p" t_fmt="%I:%M:%S  %Z" t_fmt="%I:%M:%S %Z" t_fmt="%I.%M.%S. %Z" t_fmt="%I?%M?%S? %Z" t_fmt="kl. %H.%M %z" t_fmt="%k%M%S" t_fmt="%k:%M:%S" t_fmt="%l:%M:%S" t_fmt="%OH:%OM:%OS" t_fmt="%OI:%OM:%OS %p" t_fmt="%p%I.%M.%S %Z" t_fmt="%r" t_fmt="%t" t_fmt="%T" t_fmt="%Z %I:%M:%S "  
from xml.etree import cElementTree as ElementTree  
global def SignalHandler(signum stackframe):   global sigterm_caught   if signum == signal.SIGTERM:     sigterm_caught = True     sys.stdout.write("SIGTERM caught\n")  sigterm_caught global 
s u = s.decode('latin-1')  u s latin-1 
try except s xs = s.strip() if xs[0:1] in '+-': xs = xs[1:] if xs.isdigit(): return int(s) else: ...  ... else s 'iamnotanumber' '23skidoo' try: return int(s) except ValueError: ...  int(s.strip()) &gt;&gt;&gt; int('  23  ') 23  int 
import itertools operator  def catalog(fieldspeople):     cur_field = operator.itemgetter(fields[0])     groups = itertools.groupby(sorted(people key=cur_field)cur_field)     if len(fields)==1:         return dict((klist(v)) for kv in groups)     else:         return dict((kcatalog(fields[1:]v)) for kv in groups)  import pprint pprint.pprint(catalog(('sex''age') people)) {'F': {30: [{'age': 30 'city': 'Dallas' 'name': 'Dana' 'sex': 'F'}]}  'M': {20: [{'age': 20 'city': 'NY' 'name': 'Roger' 'sex': 'M'}             {'age': 20 'city': 'Boston' 'name': 'Dan' 'sex': 'M'}]        21: [{'age': 21 'city': 'Boston' 'name': 'Roger' 'sex': 'M'}]}}  
&gt;&gt;&gt; x.decode('utf8').encode('iso-8859-2') 'Sk\xb3odowski'  
diff &gt;&gt;&gt; import numpy &gt;&gt;&gt; x = numpy.array([1 2 4 7 0]) &gt;&gt;&gt; numpy.diff(x) array([ 1  2  3 -7])  -numpy.diff(x) 
with open('fname' 'w') as file:     file.writelines('\t'.join(i) + '\n' for i in nested_list)  
defaultdict defaultdict(int) lambda c = collections.defaultdict(lambda: collections.defaultdict(int))  defaultdict defaultdict &gt;&gt;&gt; import collections &gt;&gt;&gt; c = collections.defaultdict(lambda: collections.defaultdict(int)) &gt;&gt;&gt; c[5][6] += 1 &gt;&gt;&gt; c[5][6] 1 &gt;&gt;&gt; c[0][0] 0 &gt;&gt;&gt;   
import time import os import glob from ZODB import DB from ZODB.FileStorage import FileStorage import transaction from zc.blist import BList  print('STARTING')  random = open('/dev/urandom' 'rb')   def test_list(my_list loops = 1000 element_size = 100):     print('testing list')     start = time.time()     for loop in xrange(loops):         my_list.append(random.read(element_size))     print('appending %s elements took %.4f seconds' % (loops time.time() - start))      start = time.time()     length = len(my_list)     print('length calculated in %.4f seconds' % (time.time() - start))      start = time.time()     for loop in xrange(loops):         my_list.insert(length / 2 random.read(element_size))     print('inserting %s elements took %.4f seconds' % (loops time.time() - start))      start = time.time()     for loop in xrange(loops):         my_list[loop] = my_list[loop][1:] + my_list[loop][0]     print('modifying %s elements took %.4f seconds' % (loops time.time() - start))      start = time.time()     for loop in xrange(loops):         del my_list[0]     print('removing %s elements took %.4f seconds' % (loops time.time() - start))      start = time.time()     transaction.commit()     print('committing all above took %.4f seconds' % (time.time() - start))      del my_list[:loops]     transaction.commit()      start = time.time()     pack()     print('packing after removing %s elements took %.4f seconds' % (loops time.time() - start))  for filename in glob.glob('database.db*'):         try:         os.unlink(filename)     except OSError:         pass  db = DB(FileStorage('database.db')         cache_size = 2000)  def pack():     db.pack()  root = db.open().root()  root['my_list'] = BList()  print('inserting initial data to blist')  for loop in xrange(10):     root['my_list'].extend(random.read(100) for x in xrange(100000))     transaction.commit()  transaction.commit()  test_list(root['my_list'])  
Recommendation.objects.filter(user__publication_set__subscriber=request.user).select_related()  
%exception {     Py_BEGIN_ALLOW_THREADS     $action     Py_END_ALLOW_THREADS }  
my_string = 'my string' def string_to_int(s):     ord3 = lambda x : '%.3d' % ord(x)     return int(''.join(map(ord3 s)))  In[10]: string_to_int(my_string) Out[11]: 109121032115116114105110103L  chr def int_to_string(n)     s = str(n)     return ''.join([chr(int(s[i:i+3])) for i in range(0 len(s) 3)])  In[12]: int_to_string(109121032115116114105110103L) Out[13]: 'my string'  
class User(object):     def __init__(self name email):         self.name = name         self.email = email     def commit(self):         pass  jason = User('jason' 'jason@email.com') jack = User('jack' 'jack@yahoo.com')  def __init__(self):     self.user = None     self.email = None  
fetchone cursor.execute("SELECT COUNT(*) from result where server_state='2' AND name LIKE '"+digest+"_"+charset+"_%'") result=cursor.fetchone()  result COUNT(*) number_of_rows=result[0]  cursor.execute("SELECT COUNT(*) from result where server_state='2' AND name LIKE '"+digest+"_"+charset+"_%'") (number_of_rows)=cursor.fetchone()  cursor.execute("SELECT COUNT(*) from result where server_state= %s AND name LIKE %s"[2digest+"_"+charset+"_%"]) (number_of_rows)=cursor.fetchone()  
#!/usr/bin/env python  import unittest  class TestCase(unittest.TestCase):      def test(self):         # Raise an assertion error to mark the revision as bad         pass   if '__main__' == __name__:     unittest.main()  hg update tip hg bisect --reset hg bisect --bad hg bisect --good 0 hg bisect --command ./bisector.py  hg bisect --command bisector.py  
a_list = [[(1100) for _ in range(32)] for _ in range(32)] arr=numpy.array(a_list)  a_list 
url_for() url url.current() 
mox setattr mock.StubOutWithMock(myinstance 'myproperty') myinstance.myproperty = 'goodbye'  # Save old attribute so it can be replaced during teardown saved = getattr(myinstance 'myproperty') # Replace the existing attribute with a mock mocked = MockAnything() setattr(myinstance 'myproperty' mocked)  myproperty getattr setattr __get__ __set__ mock.StubOutWithMock(myinstance.__class__ 'myproperty') myinstance.myproperty = 'goodbye'  myproperty 
Attendance Entity Project Student sqlalchemy delve into the database composite keys 
filter QuerySet name info_l = info.objects.filter(id=1)[0]  objects.get info_l = info.objects.get(id=1)  QuerySet defer only defer only info_l = info.objects.filter(id=1).only('name')[0]  
import sys old_stdout = sys.stdout  log_file = open("message.log""w")  sys.stdout = log_file  print "this will be written to message.log"  sys.stdout = old_stdout  log_file.close()  
for i in arr:        self.findValue(i"someText")   i self.findValue(str(i)"someText")   
with open('ids.txt' 'rU') as f:     interesting_ids = set('&gt;' + line.lower()[0:4] + "_" + line[4] for line in f)  # Get all ids in a set.  found_id = None with open('seqres.txt' 'rU') as g:     for line in g:         if found_id is not None:             with open(found_id+'.fasta''w') as h:                 h.write(line)          id = line[:7]         if id in interesting_ids: found_id = id         else: found_id = None  
Category.objects.filter(project__in=query).annotate(Count('project'))  
lxml.html 
findall findall &gt;&gt;&gt; doc = """&lt;root&gt; ...  &lt;district&gt; ...   &lt;house&gt;&lt;room&gt;&lt;door/&gt;&lt;/room&gt;&lt;/house&gt; ...  &lt;/district&gt; ...  &lt;district&gt; ...   &lt;street&gt; ...    &lt;house&gt;and so on&lt;/house&gt; ...   &lt;/street&gt; ...  &lt;/district&gt; ... &lt;/root&gt;""" &gt;&gt;&gt; &gt;&gt;&gt; from xml.etree import cElementTree as ET &gt;&gt;&gt; &gt;&gt;&gt; r = ET.XML(doc) &gt;&gt;&gt; &gt;&gt;&gt; for house in r.findall('.//house'): ...   print house house.findall('.//door') ... &lt;Element 'house' at 0xb7f3ea70&gt; [&lt;Element 'door' at 0xb7f3eab8&gt;] &lt;Element 'house' at 0xb7f3eb00&gt; [] &gt;&gt;&gt;  
def function1():     al = [10]     def function2():         print al[0]         al[0] -= 1         if al[0]&gt;0:            function2()     function2()  
"true\n" isdeployed.startswith("true") 
--time-style=long-iso 
-*- coding: utf-8 -*- &lt;meta http-equiv="content-type" content="text/html;charset=utf-8" /&gt; 
time.mktime mktime mktime datetime datetime datetime timedelta from datetime import datetime epoch = datetime(1970 1 1) t = datetime(1956 3 2) diff = t-epoch print diff.days * 24 * 3600 + diff.seconds  print diff.total_seconds() 
len(set(a)) - len(c) len(a) a 
mapper(User users_table include_properties=['user_id' 'user_name'])  mapper(Address addresses_table exclude_properties=['street' 'city' 'state' 'zip'])  
static PyStringObject *characters[UCHAR_MAX + 1];  ...  PyObject * PyString_FromStringAndSize(const char *str Py_ssize_t size) {  ...      if (size == 1 &amp;&amp; str != NULL &amp;&amp;     (op = characters[*str &amp; UCHAR_MAX]) != NULL)     {         #ifdef COUNT_ALLOCS             one_strings++;         #endif          Py_INCREF(op);         return (PyObject *)op;     }  ...  a = str(num) b = str(num) print a is b # &lt;-- this will print False in most cases (but try str(1) is str(1))  a = "text" b = "text" print a is b # &lt;-- this will print True  
re.match MatchObject None &gt;&gt;&gt; re.match("^[a-zA-Z0-9_.-]+$" "hello") &lt;_sre.SRE_Match object at 0xb7600250&gt; &gt;&gt;&gt; re.match("^[a-zA-Z0-9_.-]+$" "    ") &gt;&gt;&gt; print re.match("^[a-zA-Z0-9_.-]+$" "    ") None  re.match(...) == True re.match(...) is not None if re.match(...) 
lfi=lfi.union(set(li))  lf lfi.update(li)  [set([1 2 7]) set([9 3 4 6])]  
instance = Type() #bound method. instance.methodName(params)  #unbound method call 'instance' is the instance of some object pointer to witch #you want to pass to method. These calls are similar. Type.methodName(instance params)  
property = 'foo' value = 'bar'  class MC(type):   def __init__(cls name bases dict):     setattr(cls property value)     super(MC cls).__init__(name bases dict)  class C(object):   __metaclass__ = MC  print C.foo  
*******@gmail.com 
virtual QVariant data ( int column int role ) const  virtual void setData ( int column int role const QVariant &amp; value)  class TreeItem(QtGui.QTreeWidgetItem):      PythonValueRole = QtCore.Qt.UserRole      #values are list of python objects that have __str__ and can be compared     def __init__(self tree values):         QtGui.QTreeWidgetItem.__init__(self tree)         i = 0         for v in values:             self.setData(i TreeItem.PythonValueRole v)             i += 1      #overridden to simplify data assigning. When called with PythonValueRole passes     #that object's string representation to DisplayRole and EditRole     def setData(self col role value):         if role == TreeItem.PythonValueRole:             QtGui.QTreeWidgetItem.setData(self col TreeItem.PythonValueRole value)             # sets DisplayRole and EditRole             QtGui.QTreeWidgetItem.setData(self col QtCore.Qt.EditRole str(value))              QtGui.QTreeWidgetItem.setData(self col QtCore.Qt.DisplayRole str(value))         else:             QtGui.QTreeWidgetItem.setData(self col role value)      def __lt__(self other):         c = self.treeWidget().sortColumn()         return self.data(c TreeItem.PythonValueRole).toPyObject() &lt;                 other.data(c TreeItem.PythonValueRole).toPyObject()  
my_choice in dict(VOTE_TYPE) 
#!/usr/bin/python                                                                 import time import sys import curses  def alarmloop(stdscr):     stdscr.addstr("How many seconds (alarm1)? ")     curses.echo()     alarm1 = int(stdscr.getstr())     while (1):         time.sleep(alarm1)         curses.flushinp()         stdscr.clear()         stdscr.addstr("Alarm1\n")         stdscr.addstr("Continue (Y/N)?[Y]:")         doit = stdscr.getch()         stdscr.addstr("\n")         stdscr.addstr("Input "+chr(doit)+"\n")         stdscr.refresh()         if doit == ord('N') or doit == ord('n'):             stdscr.addstr("Exiting.....\n")             break  curses.wrapper(alarmloop)  #!/usr/bin/python  import time import subprocess import sys import msvcrt  alarm1 = int(raw_input("How many seconds (alarm1)? "))  while (1):     time.sleep(alarm1)     print "Alarm1"     sys.stdout.flush()      # Try to flush the buffer     while msvcrt.kbhit():         msvcrt.getch()      print "Continue (Y/N)?[Y]"     doit = msvcrt.getch()     print "Input"doit     if doit == 'N' or doit=='n':         print "Exiting....."         break  
def text_message(self msg):     user = User.get_or_insert(msg.sender)      if not user.partner:         # user doesn't have a partner find them one         other = db.Query(User).filter('partner =' None).fetch(2)         other = [u for u in other if u.key() != user.key()]         if other:             # connect user with other[0]         else:             # no one to connect to!  
&lt;!-- ... --&gt; soup.find('p' attrs={'class' : 'lead'}) &gt;&gt;&gt; html =re.sub(re.compile("&lt;!--.*?--&gt;"re.DOTALL)""html) &gt;&gt;&gt; &gt;&gt;&gt; soup=BeautifulSoup(html) &gt;&gt;&gt; &gt;&gt;&gt; soup.find('p' attrs={'class' : 'lead'}) &lt;p class="lead"&gt;The class of exotic Jupiter-mass planets that orb  .....  
def print_divide(xy):     try:         print x/y     except ZeroDivisionError:         pass  
class User(object):      def _setName(self name=None):         self._name = name      def _getName(self):         return self._name      def _setPassword(self password):         self._password = password      def _getPassword(self):         return self._password      def commit(self):         pass      name = property(_getName _setName)     password = property(_getPassword _setPassword)  &gt;&gt;u = User() &gt;&gt;u.name = 'Jason Martinez' &gt;&gt;u.password = 'linebreak' &gt;&gt;u.commit()  
locals() def foo(a b c):     print locals()  &gt;&gt;&gt; foo(1 2 3) {'a': 1 'c': 3 'b': 2}  locals() def foo(a b c):     x = 4     y = 5     print locals()  &gt;&gt;&gt; foo(1 2 3) {'y': 5 'x': 4 'c': 3 'b': 2 'a': 1}  
None user_id def __init__(self user_id=None):     if user_id is None:          ...  getFullName 
| approach       | american-english |      big.txt | time w.r.t. defaultdict | |                |     time seconds | time seconds |                         | |----------------+-------------------+---------------+-------------------------| | Counter        |             0.451 |         3.367 |                     3.6 | | setdefault     |             0.348 |         2.320 |                     2.5 | | list           |             0.277 |         1.822 |                       2 | | try/except     |             0.158 |         1.068 |                     1.2 | | defaultdict    |             0.141 |         0.925 |                       1 | | numpy          |             0.012 |         0.076 |                   0.082 | | S.Mark's ext.  |             0.003 |         0.019 |                   0.021 | | ext. in Cython |             0.001 |         0.008 |                  0.0086 | #+TBLFM: $4=$3/@7$3;%.2g  '/usr/share/dict/american-english' 'big.txt' import cython  @cython.locals(     chars=unicode     i=cython.Py_ssize_t     L=cython.Py_ssize_t[0x10000]) def countchars_cython(chars):     for i in range(0x10000): # unicode code points &gt; 0xffff are not supported         L[i] = 0      for c in chars:         L[c] += 1      return {unichr(i): L[i] for i in range(0x10000) if L[i]}  * python (dict) : 0.5  seconds * python (list) : 0.5  (ascii) (0.2 if read whole file in memory) * perl          : 0.5 * python (numpy): 0.07  * c++           : 0.05 * c             : 0.008 (ascii)  $ tail /usr/share/dict/american-english éclat's élan élan's émigré émigrés épée épées étude étude's études  $ du -h /usr/share/dict/american-english 912K    /usr/share/dict/american-english  #!/usr/bin/env python3.1 import collections fileinput textwrap  chars = (ch for word in fileinput.input() for ch in word.rstrip()) # faster (0.4s) but less flexible: chars = open(filename).read() print(textwrap.fill(str(collections.Counter(chars)) width=79))  $ time -p python3.1 count_char.py /usr/share/dict/american-english  time -p perl -MData::Dumper -F'' -lanwe'$c{$_}++ for (@F); END{ $Data::Dumper::Terse = 1; $Data::Dumper::Indent = 0; print Dumper(\%c) } ' /usr/share/dict/american-english  #!/usr/bin/env python import codecs itertools operator sys import numpy  filename = sys.argv[1] if len(sys.argv)&gt;1 else '/usr/share/dict/american-english'  # ucs2 or ucs4 python? dtype = {2: numpy.uint16 4: numpy.uint32}[len(buffer(u&quot;u&quot;))]  # count ordinals text = codecs.open(filename encoding='utf-8').read() a = numpy.frombuffer(text dtype=dtype) counts = numpy.bincount(a)  # pretty print counts = [(unichr(i) v) for i v in enumerate(counts) if v] counts.sort(key=operator.itemgetter(1)) print ' '.join('(&quot;%s&quot; %d)' % c for c in counts  if c[0] not in ' \t\n')  (&quot;Å&quot; 1) (&quot;í&quot; 2) (&quot;ô&quot; 2) (&quot;å&quot; 3) (&quot;û&quot; 3) (&quot;ç&quot; 4) (&quot;â&quot; 6) (&quot;ê&quot; 6) (&quot;ñ&quot; 6) (&quot;ä&quot; 7) (&quot;á&quot; 10) (&quot;ó&quot; 10) (&quot;ö&quot; 12) (&quot;ü&quot; 12) (&quot;è&quot; 29) (&quot;X&quot; 42) (&quot;Q&quot; 63) (&quot;U&quot; 117) (&quot;é&quot; 128) (&quot;Y&quot; 140) (&quot;Z&quot; 150) (&quot;V&quot; 330) (&quot;I&quot; 344) (&quot;O&quot; 354) (&quot;F&quot; 502) (&quot;W&quot; 507) (&quot;N&quot; 531) (&quot;J&quot; 539) (&quot;E&quot; 618) (&quot;K&quot; 656) (&quot;R&quot; 749) (&quot;D&quot; 809) (&quot;G&quot; 811) (&quot;T&quot; 858) (&quot;H&quot; 860) (&quot;L&quot; 912) (&quot;P&quot; 974) (&quot;A&quot; 1345) (&quot;j&quot; 1376) (&quot;B&quot; 1387) (&quot;q&quot; 1447) (&quot;S&quot; 1515) (&quot;C&quot; 1549) (&quot;M&quot; 1686) (&quot;x&quot; 2082) (&quot;z&quot; 3088) (&quot;w&quot; 6924) (&quot;v&quot; 7573) (&quot;k&quot; 7800) (&quot;f&quot; 10049) (&quot;y&quot; 12367) (&quot;b&quot; 14137) (&quot;h&quot; 18453) (&quot;m&quot; 20747) (&quot;p&quot; 20917) (&quot;g&quot; 22262) (&quot;'&quot; 24511) (&quot;u&quot; 25810) (&quot;d&quot; 28068) (&quot;c&quot; 30020) (&quot;l&quot; 39914) (&quot;o&quot; 48425) (&quot;t&quot; 51588) (&quot;r&quot; 56286) (&quot;n&quot; 56696) (&quot;a&quot; 62778) (&quot;i&quot; 66548) (&quot;s&quot; 86620) (&quot;e&quot; 87823) real 0.07 user 0.06 sys 0.01  // $ g++ *.cc -lboost_program_options  // $ ./a.out /usr/share/dict/american-english     #include &lt;iostream&gt; #include &lt;fstream&gt; #include &lt;cstdlib&gt; // exit  #include &lt;boost/program_options/detail/utf8_codecvt_facet.hpp&gt; #include &lt;boost/tr1/unordered_map.hpp&gt; #include &lt;boost/foreach.hpp&gt;  int main(int argc char* argv[]) {   using namespace std;    // open input file   if (argc != 2) {     cerr &lt;&lt; &quot;Usage: &quot; &lt;&lt; argv[0] &lt;&lt; &quot; &lt;filename&gt;\n&quot;;     exit(2);   }   wifstream f(argv[argc-1]);     // assume the file has utf-8 encoding   locale utf8_locale(locale(&quot;&quot;)        new boost::program_options::detail::utf8_codecvt_facet);   f.imbue(utf8_locale);     // count characters frequencies   typedef std::tr1::unordered_map&lt;wchar_t size_t&gt; hashtable_t;     hashtable_t counts;   for (wchar_t ch; f &gt;&gt; ch; )     counts[ch]++;      // print result   wofstream of(&quot;output.utf8&quot;);   of.imbue(utf8_locale);   BOOST_FOREACH(hashtable_t::value_type i counts)      of &lt;&lt; &quot;(&quot; &lt;&lt; i.first &lt;&lt; &quot; &quot; &lt;&lt; i.second &lt;&lt; &quot;) &quot;;   of &lt;&lt; endl; }  $ cat output.utf8   // $ gcc -O3 cc_ascii.c -o cc_ascii &amp;&amp; time -p ./cc_ascii &lt; input.txt #include &lt;stdio.h&gt;  enum { N = 256 }; size_t counts[N];  int main(void) {   // count characters   int ch = -1;   while((ch = getchar()) != EOF)     ++counts[ch];      // print result   size_t i = 0;   for (; i &lt; N; ++i)      if (counts[i])       printf(&quot;('%c' %zu) &quot; (int)i counts[i]);   return 0; }  
# -*- coding: utf-8 -*-  def filterKeyword(keyword adText filterType):     # same as yours  filterKeyword(u'????' u'???????' 'contains')  
[w for w in words if all([w[i] in chars[i] for i in range(len(w))])]  
namespace Foobar;  class Foo {     static public function test($name) {         print '[['. $name .']]';     } }  spl_autoload_register(__NAMESPACE__ .'\Foo::test'); // As of PHP 5.3.0  new InexistentClass;  [[Foobar\InexistentClass]] Fatal error: Class 'Foobar\InexistentClass' not found in ...  
a _ _ = numbers()  a *_ = numbers()  _ 
def xml = new MarkupBuilder(writer) xml.records() {   car(name:'HSV Maloo' make:'Holden' year:2006) {     country('Australia')     record(type:'speed' 'Production Pickup Truck with speed of 271kph')   } }  
sub &gt;&gt;&gt; print d2.find('/sub')[0] &amp;test; &gt;&gt;&gt; d2.find('/sub').getchildren() [&amp;test;]  
Subscription SQLAlchemy/declarative from sqlalchemy import create_engine Column Integer DateTime String ForeignKey Table from sqlalchemy.orm import relation scoped_session sessionmaker eagerload from sqlalchemy.ext.declarative import declarative_base  engine = create_engine('sqlite:///:memory:' echo=True) session = scoped_session(sessionmaker(bind=engine autoflush=True)) Base = declarative_base()  t_subscription = Table('subscription' Base.metadata     Column('userId' Integer ForeignKey('user.id'))     Column('channelId' Integer ForeignKey('channel.id')) )  class Channel(Base):     __tablename__ = 'channel'      id = Column(Integer primary_key = True)     title = Column(String)     description = Column(String)     link = Column(String)     pubDate = Column(DateTime)  class User(Base):     __tablename__ = 'user'      id = Column(Integer primary_key = True)     username = Column(String)     password = Column(String)     sessionId = Column(String)      channels = relation("Channel" secondary=t_subscription)  # NOTE: no need for this class # class Subscription(Base):     # ...  Base.metadata.create_all(engine)   # ###################### # Add test data c1 = Channel() c1.title = 'channel-1' c2 = Channel() c2.title = 'channel-2' c3 = Channel() c3.title = 'channel-3' c4 = Channel() c4.title = 'channel-4' session.add(c1) session.add(c2) session.add(c3) session.add(c4) u1 = User() u1.username ='user1' session.add(u1) u1.channels.append(c1) u1.channels.append(c3) u2 = User() u2.username ='user2' session.add(u2) u2.channels.append(c2) session.commit()   # ###################### # clean the session and test the code session.expunge_all()  # retrieve all (I assume those are not that many) channels = session.query(Channel).all()  # get subscription info for the user #q = session.query(User) # use eagerload(...) so that all 'subscription' table data is loaded with the user itself and not as a separate query q = session.query(User).options(eagerload(User.channels)) for u in q.all():     for c in channels:         print (c.id c.title (c in u.channels))  (1 u'channel-1' True) (2 u'channel-2' False) (3 u'channel-3' True) (4 u'channel-4' False) (1 u'channel-1' False) (2 u'channel-2' True) (3 u'channel-3' False) (4 u'channel-4' False)  eagerload User channels from sqlalchemy import and_ from sqlalchemy.sql.expression import case #... q = (session.query(#User.username                     Channel.id Channel.title                     case([(Subscription.channelId == None False)] else_=True)                   ).outerjoin((Subscription                                  and_(Subscription.userId==User.id                                       Subscription.channelId==Channel.id))                              )     ) # optionally filter by user q = q.filter(User.id == uid()) # assuming uid() is the function that provides user.id q = q.filter(User.sessionId == id()) # assuming uid() is the function that provides user.sessionId res = q.all() for r in res:     print r  
try except None 0 '' c = None b = [1 2]  if c is None:     a = b else:     a = c  c = None b = [1 2] a = c if c is not None else b  or c = None b = [1 2] a = c or b  c = [] b = [1 2] a = c or b  a [] [1 2] [] or if foo: if foo is not None: 
Manager class MyManager(models.Manager):     def get_or_none(self **kwargs):         try:             return self.get(**kwargs)         except self.model.DoesNotExist:             return None  class MyModel(models.Model):     objects = MyManager()  MyModel.objects.get_or_none(asdf=something)  
query = GqlQuery("SELECT * FROM Atable WHERE owner = :1" users.get_current_user())  
next def returnList(items):   log.debug("Creating side effect function for %s" items)   def func():     for item in items:       log.debug("side effect yielding %s" item)       yield item     yield mock.DEFAULT    generator = func()    def effect(*args **kwargs):     return generator.next()    return effect  
import subprocess import sys child = subprocess.Popen(command shell=True stderr=subprocess.PIPE) while True:     out = child.stderr.read(1)     if out == '' and child.poll() != None:         break     if out != '':         sys.stdout.write(out)         sys.stdout.flush()  
^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$  [a-zA-Z0-9] (…)* a(bc)*  a|abc|abcbc|abcbcbc|abcbcbcbc|…  (?=[a-zA-Z0-9-]{425}$)^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$  
//foo[1]/bar[@type='artist']  string xml =     @"&lt;root&gt;         &lt;foo&gt;             &lt;bar type='artist'&gt; Artist 1 &lt;/bar&gt;             &lt;bar type='artist'&gt; Artist 2 &lt;/bar&gt;             &lt;bar type='artist'&gt; Artist 3 &lt;/bar&gt;         &lt;/foo&gt;         &lt;foo&gt;             &lt;bar type='artist'&gt; Artist 1 &lt;/bar&gt;             &lt;bar type='artist'&gt; Artist 2 &lt;/bar&gt;             &lt;bar type='artist'&gt; Artist 3 &lt;/bar&gt;             &lt;bar type='artist'&gt; Artist 4 &lt;/bar&gt;         &lt;/foo&gt;     &lt;/root&gt;"; XmlDocument document = new XmlDocument(); document.LoadXml(xml);  Assert.That(document.SelectNodes(@"/root/foo[1]/bar[@type='artist']").Count                                  Is.EqualTo(3)); Assert.That(document.SelectNodes(@"//foo[1]/bar[@type='artist']").Count                                  Is.EqualTo(3));  
accept() visit() accept() visit() visit_*() 
NameError ValueError TypeError raise ValueError("password must be longer than 6 characters")  if (user.password = 'short'): ...  class Test:      minlen = 6      @property     def password(self):         return self._password      @password.setter     def password(self value):         if not isinstance(value basestring):             raise TypeError("password must be a string")         if len(value) &lt; self.minlen:             raise ValueError("password must be at least %d character len" % \                                  self.minlen)         self._password = value  
os.environ['DJANGO_SETTINGS_MODULE'] = "settings.py"  os.environ['DJANGO_SETTINGS_MODULE'] = "settings"  sys.path import settings.py  py settings 
printList alist blist alist blist alist alist alist alist blist blist alist alist blist alist [abc][] == alistblist                            [abc][]                           /     |     \                        a/     b|      \c                        /       |       \                   [bc][a]  [ac][b]   [ab][c]                   /     \                 b/       \c                 /         \            [c][ab]      [b][ac]               |             |              c|             |b               |             |            [][abc]      [][acb]   def printList(alist blist=[]):     # if alist is empty we are in a 'leaf' in the recursion tree;     # then blist contains one permutation; print it     if not len(alist): print ''.join(blist)      # ELSE for each possible position in alist     for i in range(len(alist)):          # move the element at that position from alist to the end of blist         blist.append(alist.pop(i))          # go to the 'children' node and do the printing job for its subtree         printList(alist blist)          # then move back the element from the end of blist to its original         # position in alist so we can continue with the for loop         # without altering alist         alist.insert(i blist.pop())  
set([a b c a])  
#!/usr/bin/python import re import sys for line in open(sys.argv[1]'r').readlines():   line = re.sub(r'TargetName=.+'r'TargetName=D:\\new' line)   line = re.sub(r'FriendlyName=.+'r'FriendlyName=big' line)   print line  ./test.py myfile.txt &gt; output.txt 
django.utils.datastructures.DotExpandedDict getlist prefix 
query = """UPDATE animal SET name = %s            WHERE name = %s            """ values = ("snake" "turtle")  cursor.execute(query values) cursor2.execute(query values)  arglist = [query values] cursor.execute(*arglist) cursor2.execute(*arglist)  
class HouseForm(forms.ModelForm):     address = forms.CharField(widget=forms.Textarea)      class Meta:         model = House  
#!/usr/bin/env python """ Searches subdirectories of the current directory looking for .pyc files which     do not have matching .py files and deletes them.      This is useful as a hook for version control when Python files are moved.     It is dangerous for projects that deliberately include Python      binaries without source. """ import os import os.path for root dirs files in os.walk("."):     pyc_files = filter(lambda filename: filename.endswith(".pyc") files)     py_files = set(filter(lambda filename: filename.endswith(".py") files))     excess_pyc_files = filter(lambda pyc_filename: pyc_filename[:-1] not in py_files pyc_files)     for excess_pyc_file in excess_pyc_files:         full_path = os.path.join(root excess_pyc_file)         print "Removing old PYC file:" full_path         os.remove(full_path)  
10^5 print sum(1 for num in nums_dialed if num in client_nums)  nums_dialed nums_dialed_dict = collections.defaultdict(int) for num in nums_dialed:     nums_dialed_dict[num] += 1  sum(nums_dialed_dict[num] for num in this_client_nums)  
p= header(title=namecreated_by=id) p.save()  c=criteria(details='some details' headerid=p) c.save() o=options(opt_details='more details' headerid=p) o.save()  
import traceback  def foo(**kwargs):     # stack is a list of 4-tuples: (filename line number function name text)     # see http://docs.python.org/library/traceback.html#module-traceback      (filenameline_numberfunction_nametext)=traceback.extract_stack()[-2]     print('foo was called: %s'%text)  foo(**{}) # foo was called: foo(**{}) foo() # foo was called: foo()  def pv(var):     (filenameline_numberfunction_nametext)=traceback.extract_stack()[-2]     print('%s: %s'%(text[text.find('(')+1:-1]var))  x=5 pv(x) # x: 5  pv x 
&lt;value&gt; if &lt;condition&gt; else &lt;other_value&gt; &lt;value&gt; &lt;condition&gt; ? &lt;value&gt; : &lt;other_value&gt; &lt;value&gt; &lt;other_value&gt; if: ... else: ... 
import threading mydata = threading.local() mydata.nesting = 0  class auto_refresh(object):    def __init__(self f):     self.f = f    def __call__(self *args **kwargs):     mydata.nesting += 1     try: return self.f(*args **kwargs)     finally:       mydata.nesting -= 1       if mydata.nesting == 0:         print 'refreshing'  import try:     import threading except ImportError:     import dummy_threading as threading  
2K - 1 x xor x == 0 for all x x xor y == y xor x for all x and y x xor (y xor z) == (x xor y) xor z (associativity) x xor 0 == x for all x ^ 3 ^ 4 ^ 7 ^  4 ^ 3 == 7 2 ^ 10 ^ 2 ^ 10 ^ 5 == 5 
import inspect  def first():     return second()  def second():     return inspect.getouterframes( inspect.currentframe() )[1]  first()[3] # 'first'  
&gt;&gt;&gt; import re &gt;&gt;&gt; s='[&lt;span class="street-address"&gt;\n            510 E Airline Way\n           &lt;/span&gt;]' &gt;&gt;&gt; re.sub(r'\[|\]|\s*&lt;[^&gt;]*&gt;\s*' '' s) '510 E Airline Way'  &gt;&gt;&gt; from BeautifulSoup import BeautifulSoup &gt;&gt;&gt; s='[&lt;span class="street-address"&gt;\n            510 E Airline Way\n           &lt;/span&gt;]' &gt;&gt;&gt; b = BeautifulSoup(s) &gt;&gt;&gt; b.find('span').getText() u'510 E Airline Way'  &gt;&gt;&gt; from lxml import html &gt;&gt;&gt; s='[&lt;span class="street-address"&gt;\n            510 E Airline Way\n           &lt;/span&gt;]' &gt;&gt;&gt; h = html.document_fromstring(s) &gt;&gt;&gt; h.cssselect('span')[0].text.strip() '510 E Airline Way'  
id ref ref_id options.objects.filter(header=a_header)  
a = raw_input("give a word: ").strip() b = raw_input("give another word: ").strip() c = a + " " + b  
pygame.event.wait pygame.time.set_timer SecondEvent display.update display.update 
from nose.tools import * class Test_mysim():     def setup(self):         self.ans = calculate_it_once()      def test_sync(self):         ans=calculate_it_sync()         assert_equal(ansself.ans)      def test_async(self):         ans=calculate_it_async()         assert_equal(ansself.ans)  
''gas-stations''  'gas-stations'  'gas-stations' "'gas-stations'"  
RMID=732423sdfs73242; 
&gt;&gt;&gt; import subprocess &gt;&gt;&gt; io = subprocess.Popen('ls' stdout=subprocess.PIPE).stdout &gt;&gt;&gt; for line in io: print(line.strip())  
sudo python2.6 setup.py install 
int(''.join([str(ord(i)) for i in some_value])) '\x01I' '\x01\x02' '\x01\x00' '\x00I' '\x03\x04' '\x02\x01' 
c.login(...) check_password False User.objects.create_user def setUp(self):     self.user = User.objects.create_user(username='tauri'                                           password='gaul'                                           email='')  set_password def setUp(self):     self.user = user = User.objects.create(username='tauri')     user.set_password('gaul')     user.save()  
a b *c = someseq  (a b) c = someseq[:2] someseq[2:]  
key cmp key functools cmp_to_key 
arr matrix join arr list tolist() join &gt;&gt;&gt; a = arr.tolist() # now you can manipulate the list. &gt;&gt;&gt; for i in a:  '|'.join(map(stri))      '0|1|2|3|4' '0|1|2|3|4' '0|1|2|3|4' '0|1|2|3|4' '0|1|2|3|4'  numpy.asarry &gt;&gt;&gt; arr = numpy.matrix([[x for x in range(5)] for y in range(5)]) &gt;&gt;&gt; ele = numpy.asarray(arr) &gt;&gt;&gt; '|'.join(map(strele[0])) '0|1|2|3|4' # as per your example.  
unittest class MappingTestBase(unittest.TestCase):     dictype = None     # write all the tests using self.dictype  class HashtableTest(MappingTestBase):     dictype = hashtable.HashDict  class OtherMappingTest(MappingTestBase):     dictype = othermodule.mappingimpl  dictype MappingTestBase import 
QuerySet.all() logging.debug(a[0].details)  for m in a:   logging.debug(m.details)  
__hash__ def __hash__(self):     return hash(self.id) ^ hash(self.area)  
mod_python mod_php 
sum(iterable[ start] &gt;&gt;&gt; nums [1 2 3 4 5 6] &gt;&gt;&gt; [sum(nums[i:i+3]) for i in  range(0 len(nums)3)] [6 15] &gt;&gt;&gt;   
input() raw_input() readline import readline  def rlinput(prompt prefill=''):    readline.set_startup_hook(lambda: readline.insert_text(prefill))    try:       return input(prompt)  # or raw_input in Python 2    finally:       readline.set_startup_hook()  
hasattr &gt;&gt;&gt; class A(object): pass ...  &gt;&gt;&gt; class B(A): __eq__ = lambda *_: 1 ...  &gt;&gt;&gt; class C(B): pass ...  &gt;&gt;&gt; c = C() &gt;&gt;&gt; hasattr(type(c) '__eq__') True  hasattr(c '__eq__') __eq__ c __eq__ True hasattr object import inspect  def whichancestor(c attname):   for ancestor in inspect.getmro(type(c)):     if attname in ancestor.__dict__:       return ancestor   return None  inspect __mro__ type(c) 
#!/usr/bin/env python """Run a unit test and return result.  This can be used with `hg bisect`. It is assumed that this file resides in the same dir as settings.py  """  import os from os.path import abspath dirname import sys import unittest  # Set up django project_dir = abspath(dirname(dirname(__file__))) sys.path.insert(0 project_dir) os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'  from django.db import connection from django.test import TestCase from django.test.utils import setup_test_environment teardown_test_environment  from myproject import settings from myproject.myapp.models import MyModel   class MyTestCase(TestCase):      def test_something(self):         # A failed assertion will make unittest.main() return non-zero         # which if used with `hg bisect` will mark the revision as bad         self.assertEqual(0 len(MyModel.objects.all())) # and so on   if '__main__' == __name__:     try:         setup_test_environment()         settings.DEBUG = False             verbosity = 0         old_database_name = settings.DATABASE_NAME         connection.creation.create_test_db(verbosity)         unittest.main()     finally:         connection.creation.destroy_test_db(old_database_name verbosity)         teardown_test_environment()  
import fileinput for line in fileinput.input():     process(line)  print process 
.date() datetime bins = {} for event in Event.all().fetch(1000):     bins.setdefault(event.doe.date() []).append( event )  counts = collections.defaultdict(int) for event in Event.all().fetch(1000):     counts[event.doe.date()] += 1  
&gt;&gt;&gt; from project.models.user import * &gt;&gt;&gt; import project # get module reference for reload &gt;&gt;&gt; reload(project.models.user) # reload step 1 &gt;&gt;&gt; from project.models.user import * # reload step 2  import * &gt;&gt;&gt; from project.models import user &gt;&gt;&gt; reload(user)  doctest python -i unittest reload reload() exec 
pickle timeit &gt;&gt;&gt; timeit.repeat('g.get(23)' 'g = {}') [0.29134988784790039 0.27160286903381348 0.27237796783447266]  g g .get() .next() 
get def get(self name=None):     if name is None:         """deal with the /rest/users case"""     else:         # deal with the /rest/users/(.*) case         self.response.out.write('Hello '+ name+'!')   application = webapp.WSGIApplication([(r'/rest/users/(.*)' UsersHandler)                                       (r'/rest/users' UsersHandler)]                                                                            debug=True)  get 
class B(A):     def __init__(self):         A.__init__(self)  
else {     PyObject *pSeqfast = PySequence_Fast(pylist "must be a sequence");     Py_ssize_t n = PySequence_Fast_GET_SIZE(pSeqFast);      for(Py_ssize_t i = 0; i &lt; n ; ++i)     {         gpointer obj = func(PySequence_Fast_GET_ITEM(pSeqfast i));         if (obj != NULL) result = g_list_append(result obj);         else fprintf(stderr "Could not convert PyObject to C object.\n");     }     Py_DECREF(pSeqfast); }  
cutoffs d float numpy.vectorize &gt;&gt;&gt; # Here is a vectorized array operation like you get from numpy. It won't &gt;&gt;&gt; # happen if you just use a float and a list. &gt;&gt;&gt; 2.0 &gt; [0.0 1.8 3.6 5.4 7.2] [True True False False False] # not real  &gt;&gt;&gt; # This is an actual copy-paste from a Python interpreter &gt;&gt;&gt; 2.0 &gt; [0.0 1.8 3.6 5.4 7.2] False  cutoffs list numpy.vectorize 
as as as 
class ValidationRule:      def __init__(self **kwargs):          self.__dict__.update(kwargs)  
[''.join(str(y) for y in x) for x in itertools.product(a b c)]  
def flatten(*args):     output = []     for arg in args:         if hasattr(arg '__iter__'):             output.extend(flatten(*arg))         else:             output.append(arg)     return output  
whitespace = ' \t\r\n' operators = '~!%^&amp;*()-+=[]{};:\'"/?.&lt;&gt;\\|'  def scan(s):     "returns a token and a state/token id"     words = {0:'' 1:'' 2:''} # normal operator whitespace     state = 2 # I pick ws as first state     for c in s:         if c in operators:             if state != 1:                 yield (words[state] state)                 words[state] = ''             state = 1             words[state] += c         elif c in whitespace:             if state != 2:                 yield (words[state] state)                 words[state] = ''             state = 2             words[state] += c         else:             if state != 0:                 yield (words[state] state)                 words[state] = ''             state = 0             words[state] += c     yield (words[state] state)  &gt;&gt;&gt; it = scan('foo(); i++') &gt;&gt;&gt; it.next() ('' 2) &gt;&gt;&gt; it.next() ('foo' 0) &gt;&gt;&gt; it.next() ('();' 1) &gt;&gt;&gt; it.next() (' ' 2) &gt;&gt;&gt; it.next() ('i' 0) &gt;&gt;&gt; it.next() ('++' 1) &gt;&gt;&gt;   
from django.core.exceptions import ValidationError # add this to your imports  if request.method == 'POST':    try:       delblogformset = delblog(request.POST)    except ValidationError:       delblogformset = None    if delblogformset and delblogformset.is_valid():       delblogformset.save()           return HttpResponseRedirect('/home')  blogform delblogformset ValidationError blogform delblogformset 
PYTHONPATH $ find . ./test ./test/test.py ./some ./some/__init__.py  $ cat some/__init__.py  x = 10  $ cat test/test.py  import some print some.x  $ cd test $ export PYTHONPATH=.. $ python test.py 10  
f = open('file.txt' 'wb')  
import pkg  sub_modules = (                                      pkg.__dict__.get(a) for a in dir(pkg)      if isinstance(                                       pkg.__dict__.get(a) types.ModuleType     )                                            )                 for m in sub_modules:                                           for c in (                                                      m.__dict__.get(a) for a in dir(m)                           if isinstance(m.__dict__.get(a) type(Base))     ):                   """ c is what I needed """  
def flatten_dict_values(d):     values = []     for value in d.itervalues():         if isinstance(value dict):             values.extend(flatten_dict_values(value))         else:             values.append(value)     return values  &gt;&gt;&gt; " ".join(flatten_dict_values({'one': 'not-nested' ...                                'two': {'three': 'nested' ...                                        'four': {'five': 'double-nested'}}})) 'double-nested nested not-nested'  def flatten_dict_values(d seen_dict_ids=None):     values = []     seen_dict_ids = seen_dict_ids or set()     seen_dict_ids.add(id(d))     for value in d.itervalues():         if id(value) in seen_dict_ids:             continue         elif isinstance(value dict):             values.extend(flatten_dict_values(value seen_dict_ids))         else:             values.append(value)     return values  &gt;&gt;&gt; recursive_dict = {'one': 'not-nested' ...                   'two': {'three': 'nested'}} &gt;&gt;&gt; recursive_dict['recursive'] = recursive_dict &gt;&gt;&gt; " ".join(flatten_dict_values(recursive_dict)) 'nested not-nested'  
result.groups()[x] result.group(x+1) foo bar r'foo(.*)bar' with import re pattern = re.compile(r'foo(.*)bar') with open(inFile 'r') as fileList:   searchResults = (pattern.search(line) for line in fileList)   groups = (result.group(1) for result in searchResults if result is not None)   print '\n'.join(groups)  
import pymqi  queue_manager = "QUEUE_MANAGER_NAME" channel = "SVRCONN.1" host = "host.domain.com" port = "1434" conn_info = "%s(%s)" % (host port)  qmgr = pymqi.QueueManager(None) qmgr.connectTCPClient(queue_manager pymqi.cd() channel conn_info)  
for varname in a.__class__.__dict__['A1'].__code__.co_varnames:     print varname  self test1  a.__class__ A 
FloatField 
class LoginError(Exception):     CODES = { 'mismatch': 'Wrong credentials' 'disabled': 'Account disabled' }     ...  try:     // your authentication code     raise LoginError('mismatch')     ...     raise LoginError('disabled') except LoginError as e:     self.redirect(your_login_url + '?err=' + e)  # In login page you must not print arbitrary GET parameter directly err_reason = LoginError.CODES[self.request.get('err')]`  
def __unicode__(self):     return "[%s(%s)]" % (self.__class__.__name__ ' '.join('%s=%s' % (k self.__dict__[k]) for k in sorted(self.__dict__) if '_sa_' != k[:4]))  Base __table__ for c in JobStatus.__table__.columns:     print c  for c in JobStatus.__table__.foreign_keys:     print c  from sqlalchemy import inspect mapper = inspect(JobStatus) for column in mapper.attrs:     print column.key  
import pycurl c1 = pycurl.Curl() c1.setopt(pycurl.URL 'http://www.google.com') c1.setopt(pycurl.PROXY 'localhost') c1.setopt(pycurl.PROXYPORT 8080) c1.setopt(pycurl.PROXYTYPE pycurl.PROXYTYPE_SOCKS5)  c2 = pycurl.Curl() c2.setopt(pycurl.URL 'http://www.yahoo.com') c2.setopt(pycurl.PROXY 'localhost') c2.setopt(pycurl.PROXYPORT 8081) c2.setopt(pycurl.PROXYTYPE pycurl.PROXYTYPE_SOCKS5)  c1.perform()  c2.perform()   
^((?!\.part(?!0*1\.rar$)\d+\.rar$).)*\.(?:rar|r?0*1)$  ^((?:(?!\.part\d+\.rar$).)*)\.(?:(?:part0*1\.)?rar|r?0*1)$  
%% 
itertools.groupby top_users = [(k list(g)) for kg in groupby(top_users key=lambda x: x.score))] for u in top_users[0][1]:     u.status = 'First prize' for u in top_users[1][1]:     u.status = 'Second prize' for u in top_users[2][1]:     u.status = 'Third prize' for score users in top_users[3:]:     for u in users:         u.status = 'Highly recommended'  itertools.count top_users = [(k list(g)) for kg in groupby(top_users key=lambda x: x.score))] for c (score group) in zip(count(0) top_users):     if c == 0:         prize = 'First prize'     elif c == 1:         prize = 'Second prize'     elif c == 2:         prize = 'Third prize'     else:         prize = 'Highly recommended'     map(lambda x: setattr(x 'status' prize) group)  top_users = [(k list(g)) for kg in groupby(top_users key=lambda x: x.score))] prize_list = ['First prize' 'Second prize' 'Third prize' 'Highly recommended'] for c (score group) in zip(count(0) top_users):     prize = prize_list[c] if c &lt; len(prize_list) else prize_list[-1]     map(lambda x: setattr(x 'status' prize) group)  
radians degrees 45.9 -66.6 ephem 
sys.path &gt;&gt;&gt; import os &gt;&gt;&gt; os &lt;module 'posixpath' from '/environments/userpython/lib/python2.6/posixpath.pyc'&gt; &gt;&gt;&gt; import shutil &gt;&gt;&gt; shutil &lt;module 'shutil' from '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/shutil.pyc'&gt;  
'y' x y match x = some list y = some list match = [] def find_match():     for i in x:         for j in y:             if i[0] == j[0]:                  match.append(j)     return match # This is the only line I changed. I think you meant                   # your return to be over here? find_match()  x = some list y = some list  def find_match(x y):     match = []     for i in x:         for j in y:             if i[0] == j[0]:                  match.append(j)      return match match = find_match(x y)  def f(...):     return_value = []     for...         return_value.append(foo)     return return_value  def f(...):     for...         yield foo  def find_match(x y):     for i in x:         for j in y:             if i[0] == j[0]:                  yield j  (j for i in x for j in y if i[0] == j[0]) 
AUTOINCREMENT 
if else if (a and b and c) 
# make namespace explicit from matplotlib import pyplot as PLT  cbar = fig.colorbar(result)  import numpy as NP from matplotlib import pyplot as PLT  A = NP.random.random_integers(0 10 100).reshape(10 10) fig = PLT.figure() ax1 = fig.add_subplot(111)  cax = ax1.imshow(A interpolation="nearest")  # set the tickmarks *if* you want cutom (ie arbitrary) tick labels: cbar = fig.colorbar(cax ticks=[0 5 10])  # note: 'ax' is not the same as the 'axis' instance created by calling 'add_subplot' # the latter instance i bound to the variable 'ax1' to avoid confusing the two cbar.ax.set_yticklabels(["lo" "med" "hi"])  PLT.show()  from matplotlib import pyplot as PLT  
import mechanize br = mechanize.Browser() br.open('http://www.systempuntoout.com') for link in br.links():     print(link) br.follow_link(text='[IMG]' nr=0) print br &gt;&gt;&gt;&lt;Browser visiting http://www.systempuntoout.com/quiz&gt; br.back() br.follow_link(text='[IMG]' nr=1) &gt;&gt;&gt;&lt;Browser visiting http://www.systempuntoout.com/about&gt;  
pyflakes python_archive.py  Example output: python_archive.py:1: 'python_archive2.SomeClass' imported but unused  
+? -? utol = 100. ltol = -100. yy = 1/(xx-2) yy[yy&gt;utol] = np.inf yy[yy&lt;ltol] = -np.inf  ax.plot(xx yy zorder=100 linewidth=3 color='red')   
def clear(self):         for listener in list(self.listeners):         if not isinstance(listener CPUSpinnerController):               if not isinstance(listener RoomController):                   if not isinstance(listener PyGameEventController):                       self.unregister_listener(listener)  
try...except import pwd  try:     pwd.getpwnam('someusr') except KeyError:     print('User someusr does not exist.')  import grp  try:     grp.getgrnam('somegrp') except KeyError:     print('Group somegrp does not exist.')   
index http://localhost/test.py/any_func index 
import pathlib bindir = pathlib.Path(__file__).resolve().parent  
urllib import urllib urllib.quote("http://mydomain.com/#url=http://stackoverflow.com")  urllib.unquote("http%3A//mydomain.com/%23url%3Dhttp%3A//stackoverflow.com")  
&gt;&gt;&gt; import itertools &gt;&gt;&gt; a=[123] &gt;&gt;&gt; b=[456] &gt;&gt;&gt; itertools.product(ab) &lt;itertools.product object at 0x10049b870&gt; &gt;&gt;&gt; list(itertools.product(ab)) [(1 4) (1 5) (1 6) (2 4) (2 5) (2 6) (3 4) (3 5) (3 6)]  
class_&lt;Tree&gt;("Tree")     .add_property("head"      make_getter(&amp;Tree::head return_value_policy&lt;reference_existing_object&gt;())      make_setter(&amp;Tree::head return_value_policy&lt;reference_existing_object&gt;())) ;  
include 
list1 = [1 2 3 4 5 6] list2 = []  # You couldn't just make 'list1_copy = list1' # because this would just copy (share) the reference. # (i.e. when you change list1_copy list1 will also change)  # this will make a (new) copy of list1 # so you can happily iterate over it ( without anything getting lost :) list1_copy = list1[:]  for item in list1_copy:     list2.append(item)     list1.remove(item)  list1[start:end:step] extend list 
set.intersection() u = set.intersection(s1 s2 s3)  u = set.intersection(*setlist)  *a_list set.intersection 
copy.deepcopy() import copy b = copy.deepcopy(a)  
print print("continue") &gt;&gt;&gt; try: ...     fsock = open("/bla") ... except IOError: ...     print "Caught" ... (some output shows here) &gt;&gt;&gt; print "continue"  
sys.exit() Popen set() Popen.terminate() communicate() 
xsd:element def getElems(schemaDoc xmlDoc typeName):     names = schemaDoc.xpath("//xsd:element[@type = $n]/@name"                             namespaces={"xsd":                                          "http://www.w3.org/2001/XMLSchema"}                             n=typeName)      elements = []     for name in names:          namedElements = xmlDoc.xpath("//*[local-name() = $name]" name=name)         elements.extend(namedElements)      return elements  
self.daemon = True Worker SIGTERM SIGINT Worker PID os.getpid() self.queue.get() waiting = True while waiting:     # see if Parent is at home     if os.getppid() != self.parentPID:         # woe is me! My Parent has died!         sys.exit() # or whatever you want to do to quit the Worker process     try:         # I picked the timeout randomly; use what works         data = self.queue.get(block=False timeout=0.1)         waiting = False     except queue.Queue.Empty:         continue # try again # now do stuff with data  init lauchd def parentIsAlive(self):     try:         # try to call Parent         os.kill(self.parentPID 0)     except OSError:         # *beeep* oh no! The phone's disconnected!         return False     else:         # *ring* Hi mom!         return True  :-D 
def _fetchInfo(self data):     try:         data=int(data)         sql='SELECT ... WHERE id = %s'         args=[data]     except ValueError:         sql='SELECT ... WHERE email = %s'         args=[data]         # This might fail in which case data was neither a valid integer or email address  
super() SubClassAgain @class_decorator class SubClassAgain(BaseClass):     def print_class(self):         BaseClass.print_class(self)  
setattr attributes = ['name' 'email'...] for name in self.attributes:     setattr(self "_" + name row[name])  SELECT * 
{ ('AS091209M02' '100113' 'R16' '1263399103' 'Responses' 'N01' 'Sequential' 'Ch1' ): array  ...  namedtuple Array = namedtuple( 'Array' 'individual session region timestamp properties roi format channel data' )  for a in theMasterArrrayList:     if a.region = 'R16' and interest = 'N01':         # do something on these items only.  individual_dict = defaultdict(list) for a in theMasterArrayList:     individual_dict[ a.individual ].append( a )  region_dict = defaultdict(list) for a in theMasterArrayList:     region_dict[ a.region ].append( a )  for a in theMasterArrayList:     someTransformationFunction( a.data )  def region_filter( array_list region_set ):     for a in array_list:         if a.region in region_set:             yield a  def array_map( array_list someConstant ):     for a in array_list:         yield Array( *(a[:8] + (someTranformation( a.data someConstant )) )  def some_result( array_list region someConstant ):     for a in array_map( region_filter( array_list region ) someConstant ):         yield a  
bindings.py suds.egg http://www.w3.org/2003/05/soap-envelope 
wx.CallAfter(text_control.SetValue "some_text")  CallAfter 
from google.appengine.api.datastore import Key query.filter("__key__ &gt;=" Key.from_path('User' 'abc'))  
py2app.recipes check dict 'prescripts' 
res = dict((kv) for kv in kwargs.iteritems() if v is not None)  res = {k:v for kv in kwargs.items() if v is not None}  
str.split &gt;&gt;&gt; '1000 2000 3000 4000'.split() ['1000' '2000' '3000' '4000']  split readlines() lst = map(int open('filename.txt').readlines())  
import re def natural_key(string_):     &quot;&quot;&quot;See http://www.codinghorror.com/blog/archives/001018.html&quot;&quot;&quot;     return [int(s) if s.isdigit() else s for s in re.split(r'(\d+)' string_)]  &gt;&gt;&gt; L = ['image1.jpg' 'image15.jpg' 'image12.jpg' 'image3.jpg'] &gt;&gt;&gt; sorted(L) ['image1.jpg' 'image12.jpg' 'image15.jpg' 'image3.jpg'] &gt;&gt;&gt; sorted(L key=natural_key) ['image1.jpg' 'image3.jpg' 'image12.jpg' 'image15.jpg']  .isdecimal() .isdigit() .isdigit() int() 
feedquery = gdata.contacts.service.ContactsQuery() feedquery.query.max_results = 1000 gmlf = gd_client.GetContactsFeed(feedquery.ToUri()) for indexgmc in enumerate(gmlf.entry):         print str(index) +":"+ gmc .title.text  query.max_results 
xmltext = re.sub(u"[^\x20-\x7f]+"u""xmltext)  xmltext = re.sub(u"[^\x01-\x7f]+"u""xmltext)  
def get_or_create(session model defaults=None **kwargs):     instance = session.query(model).filter_by(**kwargs).first()     if instance:         return instance False     else:         params = dict((k v) for k v in kwargs.iteritems() if not isinstance(v ClauseElement))         params.update(defaults or {})         instance = model(**params)         session.add(instance)         return instance True  
SIGTERM 
from django.template.defaultfilters import slugify class SomeModel(models.Model):     title = models.CharField(max_length=100)     def video_filename(instance filename):         fname dot extension = filename.rpartition('.')         slug = slugify(instance.title)         return '%s.%s' % (slug extension)      video = models.FileField(upload_to=video_filename)  
Test.A = Test("A") Test.B = Test("B")  
CommandSource class CommandSource(object):      def listCommands(self *args **kwargs):         commands = []         for command in dir(self.__class__):             func = getattr(self command None)             if func == None or getattr(func 'command' False) == False:                 continue             for validator in func.validators:                 if not validator(self *args **kwargs):                     break             else:                 commands.append(command)         return commands  
$ sudo python setup.py install --with-libmemcached=/path/to/libmemcached-0.38 (lots of output) $ python -m pylibmc -v  
      61      F1      80      80      E1      80      C2      62 1   U+0061  U+FFFD                                          U+0062 2   U+0061  U+FFFD                  U+FFFD          U+FFFD  U+0062 3   U+0061  U+FFFD  U+FFFD  U+FFFD  U+FFFD  U+FFFD  U+FFFD  U+0062  &gt;&gt;&gt; bad = '\x61\xf1\x80\x80\xe1\x80\xc2\x62cdef' &gt;&gt;&gt; bad.decode('utf8' 'replace') u'a\ufffd\ufffd\ufffdcdef' &gt;&gt;&gt;  &lt;C2 41 42&gt; &lt;U+FFFD&gt; &lt;U+FFFD U+0042&gt; &lt;U+FFFD U+0041 U+0042&gt; #36 &gt;&gt;&gt; bad2 = "\xc2\x41\x42" &gt;&gt;&gt; bad2.decode('utf8' 'replace') u'\ufffdB' # FAIL  'replace' 'ignore' '5.1.0' 'oht'.encode('rot13') 
unicode(uk"utf-8").encode("utf-8") ukeys = unicode(uk"utf-8").encode("utf-8"): ukeys 
Content-Encoding gzip 
for k in sorted(a):     print k a[k] # or whatever.  sortedlist = [(k a[k]) for k in sorted(a)]  key=int 'test' cmp def _compare_keys(x y):     try:         x = int(x)     except ValueError:         xint = False     else:         xint = True     try:         y = int(y)     except ValueError:         if xint:             return -1         return cmp(x.lower() y.lower())         # or cmp(x y) if you want case sensitivity.     else:         if xint:             return cmp(x y)         return 1  for k in sorted(a cmp=_compare_keys):     print k a[k] # or whatever.  # Won't work for integers with more than this many digits or negative integers. MAX_DIGITS = 10 def _keyify(x):     try:         xi = int(x)     except ValueError:         return 'S{0}'.format(x)     else:         return 'I{0:0{1}}'.format(xi MAX_DIGITS)  for k in sorted(a key=_keyify):     print k a[k] # or whatever.  cmp 
cursor.lastrowid connection.insert_id() 
<a href="http://docs.python.org/library/os.path.html#os.path.realpath" rel="noreferrer">os.path.realpath() a> 
{} namespace = 'http://kuler.adobe.com/kuler/API/rss/'  def xml():     kulerurl = 'http://kuler-api.adobe.com/rss/get.cfm?listType=popular&amp;startIndex=0&amp;itemsPerPage=5&amp;timeSpan=30&amp;key=mykey'     rss = parse(urllib.urlopen(kulerurl)).getroot()     for element in rss.findall('channel/item/{%s}themeItem' % namespace):         print(element.findtext('{%s}themeID' % namespace))     dump (rss)  
&gt;&gt;&gt; '-1' &lt;= 0 False  number number = int(sys.argv[1])  &gt;&gt;&gt; '-1' &lt;= 0 Traceback (most recent call last):   File "&lt;pyshell#0&gt;" line 1 in &lt;module&gt;     '-1' &lt;= 0 TypeError: unorderable types: str() &lt;= int()  
AF_ PF_ AF_ AF_ AF_ PF_ 
TypeError int ... sdy = int(request.POST['start_date_year']) #Do the same with the other 5 fields  try/except if request.method == 'POST':     form = ReportFiltersForm(request.POST)     if form.is_valid():         start_date = form.cleaned_data['start_date']         end_date = form.cleaned_data['end_date']         #Do whatever you need to do with this data now. Since you had         #defined the fields as DateFields you will automatically get         #datetime.date objects.     else:         return render_to_response('mytemplate.html' {'form' : form}) ....  datetime.date 
csv newrow = row[:8] + row[-2:]  csv 
sendall() recv() recv() 
freqDict = {} ... if word not in freqDict:     freqDict[word] = 1 else:     freqDict[word] += 1  import collections freqDict = collections.defaultdict(int) ... freqDict[word] += 1  freqDict = {} ... freqDict.setdefault(word 0) += 1  
    class myThread (threading.Thread):         def __init__(self threadID src counter image_name):              ###############              #Add ftp connection here!              self.ftp = FTP('host')   # connect to host default port              self.ftp.login()               # user anonymous passwd anonymous@                 ################              self.threadID = threadID              self.src = src              self.counter = counter              self.image_name = image_name              threading.Thread.__init__(self)         def run(self):              uploadFile(self.src self.image_name)      def uploadFile(src image_name):           f = open(src "rb")                       self.ftp.storbinary('STOR ' + image_name f)           f.close()       dirname = "/home/folder/"      i = 1         threads = []       for image in os.listdir(dirname):           if os.path.isfile(dirname + image):              thread = myThread(i  dirname + image i image )                 thread.start()              threads.append( thread )                      i += 1          for t in threads:           t.join()  
cElementTree lxml dessert 
import signal dict((k v) for v k in reversed(sorted(signal.__dict__.items()))      if v.startswith('SIG') and not v.startswith('SIG_'))  
MyModel.objects.extra(where=['thetime &lt; INTERVAL 1 HOUR'])  
safe_md5 = hashlib.md5(salt + password) crypto_hash = safe_md5.digest() hash_correct = crypto_hash.encode('base64')  
@cherrypy.expose def index(self):     templates = cheetah_import('templates.index')     t = getattr(getattr(templates 'index') 'index')(searchList=[{'foo': self.foo}])     return t.respond()  __init__.py engine.autoreload_on True cheetah_import = __import__ __builtin__.import 
wfsc_pod1 def wfsc_pod1(self):     return "%s\t%s\t%s" % (self.name[0] self.subnet[0] self.gateway[0])  wfsc_ip network.wfsc_ip() # no print  wfsc_pod1 wfsc_ip def wfsc_combined(self):     output = []     output.append("%s\t%s\t%s" % (self.name[0] self.subnet[0] self.gateway[0]))     for ip in range(100110):         output.append("192.168.1.%d" % ip)     return '\n'.join(output)  wfsc_combined def wfsc_combined(self):     print "%s\t%s\t%s" % (self.name[0] self.subnet[0] self.gateway[0])     for ip in range(100110):         print "192.168.1.%d" % ip  
$ sudo apt-get install ipython  import &lt;tab&gt; import pygraphviz  
now() auto_now_add auto_add class Link(models.Model):     ...     last_updated = models.DateTimeField(auto_now_add = True)     ...  Link 
right_now = datetime.datetime.now() one_hour_before = right_now - datetime.timedelta(hours=1)  
ntwdblib.dll setup.py import os pymssql from distutils.core import setup import py2exe dll = [] dll.append(os.path.join(os.path.split(pymssql.__file__)[0] 'ntwdblib.dll')) pyops = {"includes": ['decimal']} setup(console=['app.py'] options={"py2exe": pyops} data_files=dll)  
subdirA piter subdirA a.py piter subdirA os.walk 
title getText nodeType node.TEXT_NODE getText def getTextSingle(node):     parts = [child.data for child in node.childNodes if child.nodeType == node.TEXT_NODE]     return u"".join(parts)  def getText(nodelist):     return u"".join(getTextSingle(node) for node in nodelist)  node.normalize() getTextSingle node.TEXT_NODE node.TEXT_NODE 
&gt;&gt;&gt; temp_body = 'Hello %s please visit %s to confirm your registration.' &gt;&gt;&gt; temp_body%("anurag" "stackoverflow") 'Hello anurag please visit stackoverflow to confirm your registration.'  
import sys import os  import java.lang.ClassLoader  import java.io.InputStreamReader import java.io.BufferedReader  loader = java.lang.ClassLoader.getSystemClassLoader() stream = loader.getResourceAsStream("com/example/action/myAction.py") reader = java.io.BufferedReader(java.io.InputStreamReader(stream))  script = ""                           line = reader.readLine() while (line != None) :      script += line + "\n"     line = reader.readLine()  exec(script)  
UserProfile.objects.filter(mailCom='1').values_list('email' flat=True)  
Log.objects.filter(last_updated__gt=the_tag.time_before last_updated__lt=the_tag.time_after)  __gte __lte Log.objects.filter(last_updated__range=(the_tag.time_before the_tag.time_after))  
uuid 
Group for idx group in enumerate(self.groups[1:]):     # do some stuff  
l_array_obj = [... obj.lastname.value .... ]  
dict( (nameeval(name)) for name in ['some''list''of''vars'] )  &gt;&gt;&gt; some= 1 &gt;&gt;&gt; list= 2 &gt;&gt;&gt; of= 3 &gt;&gt;&gt; vars= 4 &gt;&gt;&gt; dict( (nameeval(name)) for name in ['some''list''of''vars'] ) {'list': 2 'some': 1 'vars': 4 'of': 3}  
import matplotlib.pyplot as plt  fig = plt.figure() ax = fig.add_subplot(111)  # you can change each line separately like: #ax.spines['right'].set_linewidth(0.5) # to change all just write:  for axis in ['top''bottom''left''right']:   ax.spines[axis].set_linewidth(0.5)  plt.show() # see more about spines at: #http://matplotlib.org/api/spines_api.html #http://matplotlib.org/examples/pylab_examples/multiple_yaxis_with_spines.html  
def searchServices(self types=None scopes=None timeout=3)  class Service:  def __init__(self types scopes xAddrs epr instanceId):     self.__types = types     self.__scopes = scopes     self.__xAddrs = xAddrs     self.__epr = epr     self.__instanceId = instanceId     self.__messageNumber = 0     self.__metadataVersion = 1  
response.read() try/except 
from cx_Freeze import setupExecutable  includefiles = ['README.txt' 'CHANGELOG.txt' 'helpers\uncompress\unRAR.exe'  'helpers\uncompress\unzip.exe'] includes = [] excludes = ['Tkinter'] packages = ['do''khh']  setup(     name = 'myapp'     version = '0.1'     description = 'A general enhancement utility'     author = 'lenin'     author_email = 'le...@null.com'     options = {'build_exe': {'includes':includes'excludes':excludes'packages':packages'include_files':includefiles}}      executables = [Executable('janitor.py')] )  include_files setup.py include_files include_files 
&gt;&gt;&gt; import simplejson as json      # "simplejson" works exactly the same as with "json" &gt;&gt;&gt; json.dumps({}) '{}' &gt;&gt;&gt; json.dumps({'asdf':1'poi':[234{'qwer':5}]}) '{"asdf": 1 "poi": [2 3 4 {"qwer": 5}]}' &gt;&gt;&gt;   
import re  class REMatcher(object):     def __init__(self matchstring):         self.matchstring = matchstring      def match(selfregexp):         self.rematch = re.match(regexp self.matchstring)         return bool(self.rematch)      def group(selfi):         return self.rematch.group(i)   for statement in ("I love Mary"                    "Ich liebe Margot"                    "Je t'aime Marie"                    "Te amo Maria"):      m = REMatcher(statement)      if m.match(r"I love (\w+)"):          print "He loves"m.group(1)       elif m.match(r"Ich liebe (\w+)"):         print "Er liebt"m.group(1)       elif m.match(r"Je t'aime (\w+)"):         print "Il aime"m.group(1)       else:          print "???"  import re  for statement in ("I love Mary"                   "Ich liebe Margot"                   "Je t'aime Marie"                   "Te amo Maria"):      if m := re.match(r"I love (\w+)" statement):         print("He loves" m.group(1))      elif m := re.match(r"Ich liebe (\w+)" statement):         print("Er liebt" m.group(1))      elif m := re.match(r"Je t'aime (\w+)" statement):         print("Il aime" m.group(1))      else:         print()  
shutdown() shutdown_write() 
&gt;&gt;&gt; with open("food.txt") as f: ...     res = [] ...     s=[] ...     for line in f: ...         line=line.rstrip() ...         x=len(line) ...         line=line.lstrip() ...         indent = x-len(line) ...         s=s[:indent/2]+[line] ...         res.append("/".join(s)) ...     print res ...  ['Fruits' 'Fruits/Apple' 'Fruits/Apple/Auxiliary' 'Fruits/Apple/Core' 'Fruits/Apple/Extras' 'Fruits/Banana' 'Fruits/Banana/Something' 'Fruits/Coconut' 'Vegetables' 'Vegetables/Eggplant' 'Vegetables/Rutabaga']  
unicode.encode() unicode str v_dict['code'].encode('utf-8')  
ValueError TypeError RuntimeError NotImplementedError 
select insert into table2 (name title) select name title from table1  
__lt__ __hash__ def __hash__(self):     return hash(self._hex_digest)  
&gt;&gt;&gt; import binascii &gt;&gt;&gt; import struct &gt;&gt;&gt; V1 = struct.Struct("&gt;H10p") &gt;&gt;&gt; V2 = struct.Struct("&gt;L10p") &gt;&gt;&gt; def serialize(variant n s):     if variant:         return V2.pack(ns)     else:         return V1.pack(ns)[:len(s)+3]   &gt;&gt;&gt; print binascii.hexlify(serialize(False 10 'hello')) #V1 000a0568656c6c6f &gt;&gt;&gt; print binascii.hexlify(serialize(True 10 'hello')) #V2 0000000a0568656c6c6f00000000 &gt;&gt;&gt;   
&gt;&gt;&gt; def rreplace(s old new occurrence): ...  li = s.rsplit(old occurrence) ...  return new.join(li) ...  &gt;&gt;&gt; s '1232425' &gt;&gt;&gt; rreplace(s '2' ' ' 2) '123 4 5' &gt;&gt;&gt; rreplace(s '2' ' ' 3) '1 3 4 5' &gt;&gt;&gt; rreplace(s '2' ' ' 4) '1 3 4 5' &gt;&gt;&gt; rreplace(s '2' ' ' 0) '1232425'  
&gt;&gt;&gt; f=open('test.txt') &gt;&gt;&gt; f &lt;open file 'test.txt' mode 'r' at 0x10047c938&gt; &gt;&gt;&gt; hex(id(f)) '0x10047c938'  
logging __init__.py import logging  logging.basicConfig(level=logging.DEBUG                     format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s'                     datefmt='%m-%d %H:%M'                     )  logging.info('Danger Will Robinson!') # 03-31 20:00 root         INFO     Danger Will Robinson! root = logging.getLogger() hdlr = root.handlers[0] fmt = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s') hdlr.setFormatter(fmt) logging.info('Danger Will Robinson!') # root        : INFO     Danger Will Robinson!  
DATABASE_NAME DATABASE_NAME = '/home/USERNAME/SITE/DJANGOPROJECT/DATABASE.db'  DATABASE_NAME = 'DATABASE.db'  
if &quot;token&quot; in mystring:     print(mystring)  &gt;&gt;&gt; mystring=&quot;&quot;&quot; ...     qwertyuiop ...     asdfghjkl ... ...     zxcvbnm ...     token qwerty ... ...     asdfghjklñ ... &quot;&quot;&quot; &gt;&gt;&gt; for item in mystring.split(&quot;\n&quot;): ...  if &quot;token&quot; in item: ...     print (item.strip()) ... token qwerty  
from lxml import html tree = html.fromstring(text) [td.text for td in tree.xpath("//td")]  ['Header' 'Want This']  
title __eq__ class YourObject:     [...]     def __eq__(self other):         return self.title == other.title  __ne__ __cmp__ 
settings.py TIME_ZONE 
win32console win32console 
info.name ManyToManyField Name .all() Name info_list = info.objects.filter(id=a) for info_object in info_list:     for name_object in info_object.name.all():         print name_object.name  
# Get a random integer to use as the session's datastore ID. # (So it can be stored in a cookie without being 'guessable'.) random.seed(); id = None; while None==id or Session.get_by_id( id ):     id = random.randrange( sys.maxint ); seshKey = db.Key.from_path( 'Session' id );     session = Session( key = seshKey );  sid = session.key().id();  session = Session.get_by_id( sid );  
def read_data(filename):     return open(filename).read()  try:     data = read_data('data-file.txt') except IOError:     data = read_data('another-data-file.txt')     # or     show_error_message("Data file was not found.")     # or something else  
or my_objects = MyModel.objects.all() if my_objects:     [abc].extend(my_objects)  
from tagging.fields import TagField  class BlogPost(models.Model):     # ...     tags = TagField()  
def a(x stack=None):     if stack is None:         stack = [None]     ...     a(x + 1 stack)  
MySQLdb.escape_string(SQL)  &gt;&gt;&gt; import MySQLdb &gt;&gt;&gt; MySQLdb.escape_string("'") "\\'"  
I 
for suffix in suffixList:  for suffix in self.suffixList:  
 $ ssh-keygen -t dsa  
subprocess.call() subprocess.call() wait() wait() communicate() p = subprocess.Popen(     ["scanx" "--udp" host]     stdin=subprocess.PIPE     stdout=subprocess.PIPE     stderr=subprocess.PIPE) out err = p.communicate()  
&gt;&gt;&gt; import json &gt;&gt;&gt; a = ((12)(1122)(111222)) &gt;&gt;&gt; print a ((1 2) (11 22) (111 222)) &gt;&gt;&gt; message = json.dumps(a) &gt;&gt;&gt; message '[[1 2] [11 22] [111 222]]' &gt;&gt;&gt; b = json.loads(message) &gt;&gt;&gt; b [[1 2] [11 22] [111 222]]  
type(sourceresult.sourcename) # I suspect it's already a UTF-8 encoded string  repr(sourceresult.sourcename)  sourceresult.sourcename sourceresult.sourcename mystring source_as_UTF8= sourceresult.sourcename.decode("cp1252").encode("utf-8")  
emails = ["z@c.com" "a@c.com"] salaries = [50 60] ids = [2 1]  intermediate = zip(emails salaries ids) intermediate.sort()  result = zip(*intermediate)  
matches = [] zipped_strings = zip(s1s2s3) startpos = -1 for i in len(zipped_strings):   c1c2c3 = zipped_strings[i]   # if you're not inside a match    #  look for matching characters and save the match start position   if startpos==-1 and c1==c2==c3:     startpos = i   # if you are inside a match    #  look for non-matching characters save the match to matches reset startpos   elif startpos&gt;-1 and not c1==c2==c3:     matches.append((startposis1[startpos:i]))     # matches will contain (startposendposmatchstring) tuples     startpos = -1 # if you're still inside a match when you run out of string save that match too! if startpos&gt;-1:   endpos = len(zipped_strings)   matches.append((startposendposs1[startpos:endpos]))  
&gt;&gt;&gt; xtract=""" ... BT ...    /F13 12 Tf ...    288 720 Td ...    (ABC) Tj ... ET ... ... """ &gt;&gt;&gt; for chunk in xtract.split("ET"): ...     if "BT" in chunk: ...         for brace in chunk.split(")"): ...             if "(" in brace: ...                  print brace[brace.find("(")+1:] ... ABC  
for settings.py import os os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'  from google.appengine.dist import use_library use_library('django' '1.1')  from django import template 
Universal Feedparser 
paste from PIL import Image img = Image.open('/path/to/file' 'r') img_w img_h = img.size background = Image.new('RGBA' (1440 900) (255 255 255 255)) bg_w bg_h = background.size offset = ((bg_w - img_w) // 2 (bg_h - img_h) // 2) background.paste(img offset) background.save('out.png')  
field_name = funct() params = {field_name + '__lte': arg1       # field_name should still contain string           'some_other_field_name': arg2}  locations = Locations.objects.filter(**params)  # is the same as (assuming field_name = 'some_name'): # Locations.objects.filter(some_name__lte=arg1 some_other_field_name=arg2)  
groupby() files = sorted(get_files() key=(lambda x: x[1])) for 
difflib.py sys.path difflib.py f:\script re itertools IronPython.modules.dll 
python_32 chmod a+x python_32 python_32 #! /usr/bin/env python_32 
set volume &gt;&gt;&gt; from osax import * &gt;&gt;&gt; import time &gt;&gt;&gt; sa = OSAX() &gt;&gt;&gt; for i in range(50): ...   sa.set_volume(i*2) ...   time.sleep(1) ...  &gt;&gt;&gt;   
(lambda (abc): [ab.upper()c])(inp)  [inp[0] inp[1].upper() inp[1]]  
any(arow['column1'] == 'value11' for arow in table.iteritems()) numpy dict dict collections.defaultdict(dict) import collections  class Table(object):     def __init__(self):         self.d = collections.defaultdict(dict)     def add(self row col val):         self.d[row][col] = val     def get(self row col default=None):         return self.d[row].get(col default)     def inrow(self row col):         return col in self.d[row]     def incol(self col val):         return any(x[col]==val for x in self.d.iteritems())      def __setitem__(self (row col) val):         self.add(row col val)  
indices yield tuple(pool[i] for i in indices[:r])  cycles indices j = cycles[i] indices[i] indices[-j] = indices[-j] indices[i]  cycles[i] j j indices indices[-1] cycles indices[i:] = indices[i+1:] + indices[i:i+1] cycles[i] = n - i  i indices cycles i indices n - i i cycles[i] -= 1  yield print def permutations(iterable r=None):     # permutations('ABCD' 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC     # permutations(range(3)) --&gt; 012 021 102 120 201 210     pool = tuple(iterable)     n = len(pool)     r = n if r is None else r     if r &gt; n:         return     indices = range(n)     cycles = range(n n-r -1)     print 'I' 0 cycles indices     # yield tuple(pool[i] for i in indices[:r])     print indices[:r]     while n:         for i in reversed(range(r)):             cycles[i] -= 1             if cycles[i] == 0:         print 'B' i cycles indices                 indices[i:] = indices[i+1:] + indices[i:i+1]                 cycles[i] = n - i         print 'A' i cycles indices             else:         print 'b' i cycles indices                 j = cycles[i]                 indices[i] indices[-j] = indices[-j] indices[i]         print 'a' i cycles indices                 # yield tuple(pool[i] for i in indices[:r])             print indices[:r]                 break         else:             return  permutations('ABC' 2)  I 0 [3 2] [0 1 2] [0 1] b 1 [3 1] [0 1 2] a 1 [3 1] [0 2 1] [0 2] B 1 [3 0] [0 2 1] A 1 [3 2] [0 1 2] b 0 [2 2] [0 1 2] a 0 [2 2] [1 0 2] [1 0] b 1 [2 1] [1 0 2] a 1 [2 1] [1 2 0] [1 2] B 1 [2 0] [1 2 0] A 1 [2 2] [1 0 2] b 0 [1 2] [1 0 2] a 0 [1 2] [2 0 1] [2 0] b 1 [1 1] [2 0 1] a 1 [1 1] [2 1 0] [2 1] B 1 [1 0] [2 1 0] A 1 [1 2] [2 0 1] B 0 [0 2] [2 0 1] A 0 [3 2] [0 1 2]  cycles yield break else for while n while True n while return if not n: return while True: n 0 yield if not n: while cycles print indices indices cycles 
    wid2.setStyleSheet("QWidget {background-color: #0000FF }")     wid2.show()     wid2.setAutoFillBackground(True)  
import numpy as np def find_nearest(array value):     array = np.asarray(array)     idx = (np.abs(array - value)).argmin()     return array[idx]  array = np.random.random(10) print(array) # [ 0.21069679  0.61290182  0.63425412  0.84635244  0.91599191  0.00213826 #   0.17104965  0.56874386  0.57319379  0.28719469]  value = 0.5  print(find_nearest(array value)) # 0.568743859261  
self.father = None  father 
&lt;snip&gt; # Test classifiers. kernels = [LINEAR POLY RBF] kname = ['linear''polynomial''rbf'] correct = defaultdict(int) for knkt in zip(knamekernels):   print kt   param = svm_parameter(kernel_type = kt C=10) # Here -&gt; rm probability = 1   model = svm_model(problem param)   for test_samplecorrect_label in test:       # Here -&gt; change predict_probability to just predict       pred_label = model.predict(test_sample)       correct[kn] += pred_label == correct_label &lt;/snip&gt;  -------------------------------------------------------------------------------- Accuracy:         polynomial 1.000000 (4 of 4)         rbf 1.000000 (4 of 4)         linear 1.000000 (4 of 4)  
dict def raw_response(template):     def wrap(view):         def response(request *args **kwargs):             context = view(request *args **kwargs)             if request.method == 'GET' and request.GET.get('raw' '0') == '1':                 return HttpResponse(render_to_string(template context)                                     content_type='text/plain')             # POST or not raw             return render_to_response(template context)         return response     return wrap  @raw_response('my_template_name.html') def view_name(request):     return {'x': 42}  
itertools.product() import itertools v = (a b c) for d e f in itertools.product(*(generate(x) for x in v)):   print d e f  
randint INT_MAX random.randrange(0 INT_MAX + 1) (0 0) (0 INT_MIN) Lib/whrandom.py # # Get a random integer in the range [a b] including both end points. # (Deprecated; use randrange below.) # def randint(self a b):     return self.randrange(a b+1)  whrandom.randint random.randint random.py random.randint def randrange(self start stop=None step=1 int=int default=None):     """Choose a random item from range(start stop[ step]).      This fixes the problem with randint() which includes the     endpoint; in Python this is usually not what you want.     Do not supply the 'int' and 'default' arguments.     """  randint randint 
Host 
DeadlockWrap KeyError get try:     key = 'scrape011201-590652'     if not contentdict.has_key(key):         print "Urk! No record for %s"%(key)     contenttext = contentdict[key] except:     print the error  Urk! None 
import re  foo = 'ADCKAL+2AG.+2AG.+2AG.+2AGGG^+.+G+3AGGa4.' pattern = '|'.join('\+%s[ACGTNacgtn]{%s}.' % (i i) for i in range(1 10)) regex = re.compile(pattern) foo = regex.sub("+" foo) print foo  ADCKAL++++G^+.+G+4.  
count = len(set(d["code"] for d in li))  
mylist = stats.values()  mylist = [] for kv in stats.iteritems():     mylist.append(v)  
wrapper = FileWrapper(file("C:/pics.zip" 'rb'))  
request.args.get('variable') 
l names = ['Bob''Dave''Jane']  Person.objects.[exclude][1](Name__[in][2]=names)  present = Person.objects.values_list('Name' flat=True) absent = set(names) - set(present)    # or if you prefer named functions to the set operator '-' absent = set(names).difference(present)   
if float(height) &gt; 1.8:     height_string = 'tall'     if float(height) &gt; 2:         height_string = 'very tall' elif float(height) &lt; 1.8 and float(height) &gt; 1.5:     height_string = 'average' elif float(height) &lt; 1.5:     height_string = 'short'     if float(height) &lt; 1.3:         height_string = 'very short'  elif float(height) &lt;= 1.8 and float(height) &gt;= 1.5:  myOutput = descriptionGenerator(["char"])  descriptionVariableSize == 1 elif descriptionVariableSize == 8:  elif if return  return descriptionGenerator(randomDescriptionVariables)  if generateRandomDescription() if 
import random  def WeightedPick(d):     r = random.uniform(0 sum(d.itervalues()))     s = 0.0     for k w in d.iteritems():         s += w         if r &lt; s: return k     return k  def Test():     k = {'A': 68 'B': 62 'C': 47 'D': 16 'E': 81}     results = {}     for x in xrange(10000):         p = WeightedPick(k)         results[p] = results.get(p 0) + 1     print results  Test()  
&gt;&gt;&gt; import urllib &gt;&gt;&gt; params = {'criterias[]': ['member' 'issue']} &gt;&gt;&gt;  &gt;&gt;&gt; print urllib.urlencode(params True) criterias%5B%5D=member&amp;criterias%5B%5D=issue  
Entry.objects.get(headline__icontains='Lennon')  SELECT ... WHERE headline ILIKE '%Lennon%';  True search_terms 
def parse(html *atrs):  soup= BeautifulSoup(html)  body = soup.find(*atrs)  return body  parse(htmlpage 'div' {'id':'body'})  
json import json sequence = '[%s]' % ''.join(sequence) data = json.loads(sequence) print data[0]['First'] data[0]['Second']  
datetime.timedelta var &lt; datetime.datetime.today() - datetime.timedelta(hours=1)  
            &lt;input type="hidden" name=".tries" value="1"&gt;              &lt;input type="hidden" name=".src" value="ym"&gt;              &lt;input type="hidden" name=".md5" value=""&gt;              &lt;input type="hidden" name=".hash" value=""&gt;              &lt;input type="hidden" name=".js" value=""&gt;              &lt;input type="hidden" name=".last" value=""&gt;              &lt;input type="hidden" name="promo" value=""&gt;              &lt;input type="hidden" name=".intl" value="us"&gt;              &lt;input type="hidden" name=".bypass" value=""&gt;              &lt;input type="hidden" name=".partner" value=""&gt;              &lt;input type="hidden" name=".u" value="bd5tdpd5rf2pg"&gt;              &lt;input type="hidden" name=".v" value="0"&gt;              &lt;input type="hidden" name=".challenge" value="5qUiIPGVFzRZ2BHhvtdGXoehfiOj"&gt;              &lt;input type="hidden" name=".yplus" value=""&gt;              &lt;input type="hidden" name=".emailCode" value=""&gt;              &lt;input type="hidden" name="pkg" value=""&gt;              &lt;input type="hidden" name="stepid" value=""&gt;              &lt;input type="hidden" name=".ev" value=""&gt;              &lt;input type="hidden" name="hasMsgr" value="0"&gt;              &lt;input type="hidden" name=".chkP" value="Y"&gt;              &lt;input type="hidden" name=".done" value="http://mail.yahoo.com"&gt;              &lt;input type="hidden" name=".pd" value="ym_ver=0&amp;c=&amp;ivt=&amp;sg="&gt;   User-Agent 
import time my_format = u'%d\u200f/%m\u200f/%Y %H:%M:%S' my_time   = time.localtime() time.strftime(my_format.encode('utf-8') my_time).decode('utf-8')  
[buildout]   find-links =       http://github.com/benoitc/gunicorn/tarball/master#egg=gunicorn   parts = console_scripts     [console_scripts]   recipe = zc.recipe.egg   eggs = gunicorn  
atexit class MySingleton:     def __init__(self):         import atexit         atexit.register(self.stop)         self._dokill = os.kill         self._thesig = signal.SIGTERM      def stop(self):         self._dokill(self.sel_server_pid self._thesig)  os 
with_avg = SomeObject.objects.annotate(avg=Avg('something')) with_avg_and_has = with_avg.extra(select={'has_something': 'something is NULL'}) sorted_result = with_avg_and_has.order_by('-has_something' '-avg').all()   
USERAGENT = 'something' HEADERS = {'User-Agent': USERAGENT}  req = urllib2.Request(URL_HERE headers=HEADERS) f = urllib2.urlopen(req) s = f.read() f.close()  
f = lambda x:'' if x is None else x  
  my $handshake = bencode {      identity =&gt; '' client =&gt; '' ... }; # All fields from AZHandshake.java    # send handshake to seeder and get a response   my $handshake_response = ...    my $dictionary = bdecode $handshake_response;    print join "\n" @{$dictionary-&gt;{messages}} "\n";  
from struct import pack from math import sin pi import time  def au_file(name freq freq1 dur vol):     fout = open(name 'wb')     # header needs size encoding=2 sampling_rate=8000 channel=1     fout.write('.snd' + pack('&gt;5L' 24 8*dur 2 8000 1))     factor = 2 * pi * freq/8000     factor1 = 2 * pi * freq1/8000     # write data     for seg in range(8 * dur):         # sine wave calculations         sin_seg = sin(seg * factor) + sin(seg * factor1)         fout.write(pack('b' vol * 64 * sin_seg))     fout.close()  t = time.strftime("%S" time.localtime()) ti = time.strftime("%M" time.localtime()) tis = float(t) tis = tis * 100 tim = float(ti) tim = tim * 100  if __name__ == '__main__':     au_file(name='timeSound2.au' freq=tim freq1=tis dur=1000 vol=1.0)      import os     os.startfile('timeSound2.au')  
setdefault cache.setdefault(akey f(x y))  f(x y) akey = whatever(x y) if akey not in cache:     cache[akey] = f(x y) return cache[akey]  f None result = cache.get(akey) if result is None:     result = cache[akey] = f(x y) return result  whatever f frozenset x y ta1 = tuple(a1) ta2 = tuple(a2) if ta1 &gt; ta2: key = ta1 ta2 else: key = ta2 ta1  a1 a2 
def symmetrize(a):     """     Return a symmetrized version of NumPy array a.      Values 0 are replaced by the array value at the symmetric     position (with respect to the diagonal) i.e. if a_ij = 0     then the returned array a' is such that a'_ij = a_ji.      Diagonal values are left untouched.      a -- square NumPy array such that a_ij = 0 or a_ji = 0      for i != j.     """     return a + a.T - numpy.diag(a.diagonal())  a[0 1] = 42 a[1 0] = 123 symmetrize __setitem__ class SymNDArray(numpy.ndarray):     """     NumPy array subclass for symmetric matrices.      A SymNDArray arr is such that doing arr[ij] = value     automatically does arr[ji] = value so that array     updates remain symmetrical.     """      def __setitem__(self (i j) value):         super(SymNDArray self).__setitem__((i j) value)                             super(SymNDArray self).__setitem__((j i) value)                      def symarray(input_array):     """     Return a symmetrized version of the array-like input_array.      The returned array has class SymNDArray. Further assignments to the array     are thus automatically symmetrized.     """     return symmetrize(numpy.asarray(input_array)).view(SymNDArray)  # Example: a = symarray(numpy.zeros((3 3))) a[0 1] = 42 print a  # a[1 0] == 42 too!  a[: 1] = -1 a[1 :] def …(… (i j)…) def __setitem__(self indexes value): (i j) = indexes 
static PyObject* static 
get_db_prep_value 
ll_mat x = spmatrix.ll_mat(10 10) class ll_mat(type(x)): ...  class ll_mat(object):     def __init__(self *a **k):         self.m = spmatrix.ll_mat(*a **k)         ...     def __getattr__(self n):         return getattr(self.m n)  
/home/user/project/static/upload/images/hello%23world.jpg  
versions_list.sort(key=lambda s: map(int s.split('.')))  ['1.0.0' '1.0.2' '1.0.12' '1.1.2' '1.3.3']  map list list versions_list.sort(key=lambda s: list(map(int s.split('.'))))  versions_list.sort(key=lambda s: [int(u) for u in s.split('.')])  
columns dict from sqlalchemy import Table Column Integer Unicode MetaData create_engine from sqlalchemy.orm import mapper create_session  class Word(object):     pass  wordColumns = ['english' 'korean' 'romanian'] e = create_engine('sqlite://') metadata = MetaData(bind=e)  t = Table('words' metadata Column('id' Integer primary_key=True)     *(Column(wordCol Unicode(255)) for wordCol in wordColumns)) metadata.create_all() mapper(Word t) session = create_session(bind=e autocommit=False autoflush=True)  w = Word() w.english = u'name' w.korean = u'??' w.romanian = u'nume'  session.add(w) session.commit()  w = session.query(Word).filter_by(english=u'name').one() print w.romanian  sqlalchemy tuple dict dict getattr setattr language = 'korean' print getattr(w language)  dict dict Word class Word(object):     def __getitem__(self item):          return getattr(self item)     def __setitem__(self item value):         return setattr(self item value)  w = Word() w['english'] = u'name'  columns dict class AttributeDict(DictMixin):     def __init__(self obj):         self._obj = obj     def __getitem__(self item):         return getattr(self._obj item)     def __setitem__(self item value):         return setattr(self._obj item value)  class Word(object):     def __init__(self):         self.columns = AttributeDict(self)  w = Word() w.columns['english'] = u'name'   
filesizeformat {% for page in pages %}     &lt;li&gt;page.name {{page.size|filesizeformat}}&lt;/li&gt; {% endfor %}  pages [{'name': 'page1' 'size': 10000} {'name': 'page2' 'size': 5023034}]  
try:     b = a[4] except IndexError:     b = 'sss'  
event = wx.PyEvent()  PyEvent PyEvent class Frame(wx.Frame):     def __init__(self parent=None):         wx.Frame.__init__(self parent)         self.Bind(wx.EVT_COLOURPICKER_CHANGED self.on_event)         self.Centre()         self.Show(True)         self.i = 0         self.recalculating = False         self.event_all()      def on_event(self event):         self.recalculating = False         print self.i         self.i += 1      def event_all(self):         for j in range(1000):             if not self.recalculating:                 event = wx.PyEvent()                 event.SetEventType(wx.EVT_COLOURPICKER_CHANGED.evtType[0])                 wx.PostEvent(self event)                 self.recalculating = True  
memcache.add memcache.set memcache 
import curses  def fillwin(w c):     y x = w.getmaxyx()     s = c * (x - 1)     for l in range(y):         w.addstr(l 0 s)  def main(stdscr):     fillwin(stdscr 'S')     stdscr.refresh()     stdscr.getch()      newwin=curses.newwin(102055)     fillwin(newwin 'w')     newwin.touchwin()     newwin.refresh()     newwin.getch()     del newwin      stdscr.touchwin()     stdscr.refresh()     stdscr.getch()  curses.wrapper(main)  
m[0] m[1] members = {} for m in elem.text.split(' '):     key value = m.split(':')     members[key.replace("'" '')] = map(int value.split(''))     return members  
print  
file writeln() read() write() readlines() writelines() readline() size writeline() writeln() write() writelines() print file print() print &gt;&gt;file ... file.write('...\n') 
xml import xml.etree.ElementTree as xee contents='''\ &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;Response&gt;   &lt;Ip&gt;74.125.45.100&lt;/Ip&gt;   &lt;Status&gt;OK&lt;/Status&gt;   &lt;CountryCode&gt;US&lt;/CountryCode&gt;   &lt;CountryName&gt;United States&lt;/CountryName&gt;   &lt;RegionCode&gt;06&lt;/RegionCode&gt;   &lt;RegionName&gt;California&lt;/RegionName&gt;   &lt;City&gt;Mountain View&lt;/City&gt;   &lt;ZipPostalCode&gt;94043&lt;/ZipPostalCode&gt;   &lt;Latitude&gt;37.4192&lt;/Latitude&gt;   &lt;Longitude&gt;-122.057&lt;/Longitude&gt;   &lt;TimezoneName&gt;America/Los_Angeles&lt;/TimezoneName&gt;   &lt;Gmtoffset&gt;-25200&lt;/Gmtoffset&gt;   &lt;Isdst&gt;1&lt;/Isdst&gt; &lt;/Response&gt;'''  doc=xee.fromstring(contents) print dict(((elt.tagelt.text) for elt in doc))  lxml import lxml.etree import urllib2 url='http://ipinfodb.com/ip_query.php?ip=74.125.45.100&amp;timezone=true' doc = lxml.etree.parse( urllib2.urlopen(url) ).getroot() print dict(((elt.tagelt.text) for elt in doc))  
{% url testapp.views.test n1=5n2=2 %}  {% url testapp.views.test n1=5 n2=2 %}  
STORE number +FLAGS (myflag)   SEARCH KEYWORD myflag  
def foo(text):     writeResults(line result)  foo line for line in file: line writeResults line 
import sys sys.path.append ('/path/to/the/project') from django.core.management import setup_environ import settings setup_environ(settings)  from app.models import MyModel  
[:] array = self.Array[:]  array = copy.deepcopy(self.Array)  import copy 
__doc__ def fixdocstring(func):     func.__doc__ = func.__doc__.replace('&lt;arg_a&gt;' 'a: a very common argument')     #(This is just an example other string formatting methods can be used as well.)     return func  @fixdocstring def test(a):     '''     Arguments:     &lt;arg_a&gt;     ''''     pass  
def set_cursor(path focus_column=None start_editing=False)  gtk.Widget.grab_focus() 
def bits(f):     bytes = (ord(b) for b in f.read())     for b in bytes:         for i in xrange(8):             yield (b &gt;&gt; i) &amp; 1  for b in bits(open('binary-file.bin' 'r')):     print b  
x is y x == y x is y id(x) == id(y) x y id x is y x == y x == y x.__eq__(y) x __eq__ x == y x is y x is y x == y In [1]: 0 is False Out[1]: False  In [2]: 0 == False Out[2]: True  if x is y:     return True else:     return False  return x is y  if x == y:     return True else:     return False  return x == y  
def _get_content(editor initial=""):     from subprocess import call     from tempfile import NamedTemporaryFile      # Create the initial temporary file.     with NamedTemporaryFile(delete=False) as tf:         tfName = tf.name         tf.write(initial)      # Fire up the editor.     if call([editor tfName]) != 0:         return None # Editor died or was killed.      # Get the modified content.     with open(tfName).readlines() as result:         os.remove(tfName)         return result  
import web from md5 import md5  urls = (     '/(.*)' 'digest'  )  app = web.application(urls globals())  class digest:             def GET(self):         return md5("Nobody inspects the spammish repetition").hexdigest()  if __name__ == "__main__":     app.run()  
if len(self.cards)&gt;=7*(len(hands)):      if len(self.cards) &lt;= 7*(len(hands)):             print "Reshuffling the deck."             self.cards=[]             self.populate()             self.shuffle()     for rounds in range(per_hand):         for hand in hands:                 top_card=self.cards[0]                 self.give(top_card hand)  
def get_mem(servername q):     res = os.popen('ssh %s "grep MemFree /proc/meminfo | sed \'s/[^0-9]//g\'"' % servername)     q.put(res.read().strip())  # ...  import threading queue q = queue.Queue() threading.Thread(target=get_mem args=("server01" q)).start() result = q.get()  
QuerySet 
class ClassDict(object):   def __init__(self):     self.classes = {}    def add(self cls):     self.classes[cls.__name__] = cls    def remove(self cls):     if self.classes[cls.__name__] == cls:       del self.classes[cls.__name__]     else:       raise KeyError('%r' % cls)    def __getitem__(self key):     return self.classes[key]    def __repr__(self):     return 'ClassDict(%s)' % (' '.join(self.classes))  class C(object):   pass  class D(object):   pass  cd = ClassDict() cd.add(C) cd.add(D)  print cd  print cd['C']  
# open for reading first since we need to get the text out f = open('kk.txt''r') # step 1 data = f.read() # step 2 data = data.replace("hola" "hello") f.close() # *now* open for writing f = open('kk.txt' 'w') # step 3 f.write(data) f.close()  
os.walk import re import os from __future__ import with_statement  PATH = "/home/tirengarfio/Desktop/pruebaba"  for path dirs files in os.walk(PATH):     for filename in files:         fullpath = os.path.join(path filename)         with open(fullpath 'r') as f:             data = re.sub(r'(\s*function\s+.*\s*{\s*)'                 r'\1echo "The function starts here."'                 f.read())         with open(fullpath 'w') as f:             f.write(data)  
gc ref = None __del__ def __init__(self):     self.myself = self  __del__ 
arr = np.arange(100 dtype=float).reshape(10 10) arr[~(arr % 7).astype(bool)] = np.nan  current_cmap = matplotlib.cm.get_cmap() current_cmap.set_bad(color='red') plt.imshow(arr)  
key = elem.findtext(colName)  colName findtext title &lt;a&gt; for ana in elem.findall('a'):     key = ana.get('title')     if key is not None: break  
Movies MovieID   int auto increment/identity PK MovieTitle MovieDescription etc...  Actors ActorID  int auto increment/identity PK ActorName DateOfBirth etc...  MovieActors MovieID      PK  and FK ActorID      PK  and FK RoleName etc...  
(port == "443" and "https://") or "http://"  x and y y x x x a or b a b port == "443" and "https://" and or "https://" if port == "443" else "http://"  
def method(self arg1=0 arg2=None):     if arg2 is None:         arg2 = self.member     ...  
NavigableString from BeautifulSoup import BeautifulSoup import re  soup = BeautifulSoup('&lt;html&gt;&lt;p&gt;foo&lt;/p&gt;&lt;/html&gt;')  r = soup.findAll('p' text=re.compile('foo'))  print r[0].parent  &lt;p&gt;foo&lt;/p&gt;  
__init__ TestCase setUp tearDown fixtures= setUp save setUp 
r"""(?:/{02}\**\s?todo):?\s*(?P&lt;todo&gt;.+)"""  'todo' r"""//\todo      stuff to fix"""  'todo' 't' r"""(?:/{02}\**\s?\\?todo):?\s*(?P&lt;todo&gt;.+)"""  
for char in sys.argv[1].lower():   print nato.get(char char) # try to get nato[char] otherwise return char  
import re   newstring = re.sub("\[%.*?%\]"newtextoldstring)  
def testTestA_and_TestB(self):     # test code from testTestA     ...     # test code from testTestB  def TestA(self):     # test code def TestB(self):     # test code def test_A_then_B(self):     self.TestA()     self.TestB()  Test test... TestA TestB 
def unpack_args(func):     def deco_func(*args):         if isinstance(args tuple):             args = args[0]          return func(*args)      return deco_func   def func1(*args):     return args  def func2(*args):     return args  @unpack_args def func3(*args):     return args  print func1(123)    # &gt; (123) print func2(123)    # &gt; (123) print func1(*func2(123))    # &gt; (123) print func1(func2(123))    # &gt; ( (123) ) print func3(func2(123))   # &gt; (123)  
... existing stuff  import django.core.handlers.wsgi _application = django.core.handlers.wsgi.WSGIHandler()  def application(environ start_response):     # Wrapper to clear SCRIPT_NAME..     environ['SCRIPT_NAME'] = ''     return _application(environ start_response)  
import threading import subprocess  def popen_and_call(on_exit popen_args):     """     Runs the given args in a subprocess.Popen and then calls the function     on_exit when the subprocess completes.     on_exit is a callable object and popen_args is a list/tuple of args that      would give to subprocess.Popen.     """     def run_in_thread(on_exit popen_args):         proc = subprocess.Popen(*popen_args)         proc.wait()         on_exit()         return     thread = threading.Thread(target=run_in_thread args=(on_exit popen_args))     thread.start()     # returns immediately after the thread starts     return thread  threading.Thread multiprocessing.Process 
return l p p perm l return result = [] for i in range(sz):   for p in perm(l[1:]):     result.append(p[:i]+[l[0]]+p[i:]) return result  perm sz for result = [] for p in perm(l[1:]):   for i in range(sz):     result.append(p[:i]+[l[0]]+p[i:]) return result  for return [p[:i]+[l[0]]+p[i:] for p in perm(l[1:]) for i in range(sz)]  
&gt;&gt;&gt; a= [1 2 3 4 5 1 2 3 4 5 1] &gt;&gt;&gt; for n i in enumerate(a): ...   if i == 1: ...      a[n] = 10 ... &gt;&gt;&gt; a [10 2 3 4 5 10 2 3 4 5 10]  
br.select_form(nr=0)  def select_form(self name=None predicate=None &lt;b&gt;nr=None&lt;/b&gt;):     """     ...     nr if supplied is the sequence number of the form (where 0 is the     first).     """  
value = func_returning_a_tuple()[0] 
class Alien(object):     def __init__(self):         self.health = 5     def do_damage(self amount):         self.health -= amount  
if set(a) &lt;= set(b):     print "a is in b"  
import wx  app = None  class Size(wx.Frame):     def __init__(self parent id title):         frame = wx.Frame.__init__(self parent id title size=(250 200))         w h = 100 100         bmp = wx.EmptyBitmap(w h)         dc = wx.MemoryDC()         dc.SelectObject(bmp)         dc.Clear()         text = "whatever"         tw th = dc.GetTextExtent(text)         dc.DrawText(text (w-tw)/2  (h-th)/2)         dc.SelectObject(wx.NullBitmap)         wx.StaticBitmap(self -1 bmp)         self.Show(True)   app = wx.App() app.MainLoop()  
django.forms.models.fields_for_model 
from glob import iglob from shutil import copy from os.path import join  def copy_files(src_glob dst_folder):     for fname in iglob(src_glob):         copy(fname join(dst_folder fname))  if __name__=='__main__':     copy_files("123*.xml" "out_folder")  
    LDFLAGS="-framework Carbon" python setup.py build_ext --inplace  pip install frameworks libraries import os os.environ['LDFLAGS'] = '-framework Carbon'  pip install 
BeautifulSoup from BeautifulSoup import BeautifulSoup def removeTag(soup tagname):     for tag in soup.findAll(tagname):         contents = tag.contents         parent = tag.parent         tag.extract()  s = BeautifulSoup("abcd &lt;b&gt; btag &lt;/b&gt; hello &lt;d&gt;dtag&lt;/d&gt;")  removeTag(s"b") print s removeTag(s "d") print s  &gt;&gt;&gt; abcd  hello &lt;d&gt;dtag&lt;/d&gt; abcd  hello  
 int id = QMetaType.type("MyClass");  from PyQt4 import QtCore     id = QtCore.QMetaType.type('MyClass')  self.emit(SIGNAL("newStatuses(PyQt_PyObject)") statuses)  
server_thread server_thread.daemon = True  server_thread.start() while True: pass while True: time.sleep(1.0) 
freqDict freqDict 
&gt;&gt;&gt; import re &gt;&gt;&gt; from itertools import chain &gt;&gt;&gt; lines = ["hello world" "second line" "third line"] &gt;&gt;&gt; words = chain(*[re.split(r'\s+' line) for line in lines])  &gt;&gt;&gt; for word in words: ...    print(word) ...  hello world second line third line  list &gt;&gt;&gt; words = list(chain(*[re.split(r'\s+' line) for line in lines]))  
&gt;&gt;&gt; a="CS 240 CS 246 ECE 222" &gt;&gt;&gt; b=tuple(a.strip() for a in a.split('')) &gt;&gt;&gt; b ('CS 240' 'CS 246' 'ECE 222') &gt;&gt;&gt;   
end_of_price start_of_price + 6 float 4.59&lt;/ end_of_price start_of_price + 4 
def do_the_thing():     if not "id" in dir():          print "id not set cannot continue"          return          # exit here!     # otherwise continue with the rest of the script...     print "alright..."     # [ more code ]  # Call the method do_the_thing()  import mymodule mymodule.do_the_thing()  
python manage.py runserver 0:8080  http://yoursite.com:8080/  import tagging import tagging sudo pip install django-tagging  
&gt;&gt;&gt; random.sample(list(enumerate(a)) 5) [(1 'o') (0 'h') (3 'd') (2 'w') (4 'y')]  
lambda sort xs.sort(lambda xy: cmp(len(x) len(y)))  cmp(x y) x y x y x y key xs.sort(key=lambda s: len(s))  sort len lambda xs.sort(key=len)  list.sort print(sorted(xs key=len))  
bytes = b"\x00\x00\x02\x01" i = 0 for b in bytes:     i &lt;&lt;= 7     i += b     # Or use (b &amp; 0x7f) if the last bit might not be zero. print(i)  257  
if o.previous_rising(ephem.Sun()) &gt; o.previous_setting(ephem.Sun()):   return "day" elif:   return "night"  
import urllib2 import time   def testProxies(url proxies):     # prepare the request     req = urllib2.Request(url)     # run the request for each proxy     results = ["Proxy           isGood Time"]     for proxy in (proxies):         # now set the proxy         req.set_proxy(proxy "http")         # time it         start = time.time()         # try to open the URL         try:             urllib2.urlopen(req)             # format the results for success             results.append("%s  y      %.2f" % (proxy time.time()-start))         except urllib2.URLError:             # format the results for failure             results.append("%s  n      %.2f" % (proxy time.time()-start))      return results  testResults = testProxies("http://www.abc.com" ["200.43.54.112" "200.43.54.222"                   "200.43.54.102" "200.43.54.111"]) for result in testResults:     print result  urllib2.Request(url) set_proxy() 
&gt;&gt;&gt; l = ['yahoo' 'wikipedia' 'freebase'] &gt;&gt;&gt; import itertools &gt;&gt;&gt; for i in range(1 len(l) +1):     print(list(itertools.combinations(l r=i)))   [('yahoo') ('wikipedia') ('freebase')] [('yahoo' 'wikipedia') ('yahoo' 'freebase') ('wikipedia' 'freebase')] [('yahoo' 'wikipedia' 'freebase')]  
try...except... try:     input_list = list(input_val) except TypeError:     input_list = list((input_val))  
#!/usr/bin/env python #-*- coding: utf-8 -*-  import sys from ctypes import *  def encipher(v k):     y = c_uint32(v[0])     z = c_uint32(v[1])     sum = c_uint32(0)     delta = 0x9e3779b9     n = 32     w = [00]      while(n&gt;0):         sum.value += delta         y.value += ( z.value &lt;&lt; 4 ) + k[0] ^ z.value + sum.value ^ ( z.value &gt;&gt; 5 ) + k[1]         z.value += ( y.value &lt;&lt; 4 ) + k[2] ^ y.value + sum.value ^ ( y.value &gt;&gt; 5 ) + k[3]         n -= 1      w[0] = y.value     w[1] = z.value     return w  def decipher(v k):     y = c_uint32(v[0])     z = c_uint32(v[1])     sum = c_uint32(0xc6ef3720)     delta = 0x9e3779b9     n = 32     w = [00]      while(n&gt;0):         z.value -= ( y.value &lt;&lt; 4 ) + k[2] ^ y.value + sum.value ^ ( y.value &gt;&gt; 5 ) + k[3]         y.value -= ( z.value &lt;&lt; 4 ) + k[0] ^ z.value + sum.value ^ ( z.value &gt;&gt; 5 ) + k[1]         sum.value -= delta         n -= 1      w[0] = y.value     w[1] = z.value     return w  if __name__ == "__main__":     key = [1234]     v = [1385482522639876499]     enc = encipher(vkey)     print enc     print decipher(enckey)  &gt;&gt;&gt; v [1385482522 639876499] &gt;&gt;&gt; tea.decipher(tea.encipher(vkey)key) [1385482522L 639876499L]  
object class Foo: pass class Foo(object): pass @property 
import re text = "this isn't alphanumeric" result = re.sub(r'\W''-'text) # result will be "this-isn-t-alphanumeric"  \W \w [a-zA-Z0-9_] \W 
eval a locals def thefirst(a):     return eval('1+2+a' locals())  
raw_input input str phoneNumber = raw_input("Please enter a phone number: ")  
.sort(key=lambda x: datetime.datetime.strptime(x['date'] '%Y-%m-%d'))  
isinstance def my_print(text begin end):     "Print 'text' in UPPER between 'begin' and 'end' in lower"     try:       print begin.lower() + text.upper() + end.lower()     except (AttributeError TypeError):       raise AssertionError('Input variables should be strings')  
while for a = ["Hello" "world" "!"] b = (x for x in a) for c in b:     print c  while 
find() a = '1234;5' index = a.find('s') if index == -1:     print "Not found." else:     print "Found at index" index  in &gt;&gt;&gt; print 's' in a False &gt;&gt;&gt; print 's' not in a True  
from matplotlib import pyplot  xPoints = [] yPoints = [] for x in range(1500):     y = random.randint(125000)     xPoints.append(x)     yPoints.append(y) pyplot.plot(xPoints yPoints) pyplot.show()  xPoints = range(1500) yPoints = [random.randint(125000) for _ in range(1500)] pyplot.plot(xPoints yPoints) pyplot.show()  
types from types import GeneratorType  elementChosen = QtCore.pyqtSignal(GeneratorType)  
&lt;div title="a&gt;b"&gt; &lt;div title="&lt;" onmouseover="script()" class="&lt;"&gt;"&gt; def replaceWithContents(element):     ix= element.parent.contents.index(element)     for child in reversed(element.contents):         element.parent.insert(ix child)     element.extract()  doc= BeautifulSoup(html) # maybe fromEncoding= 'utf-8' for link in doc.findAll('a'):     replaceWithContents(link) str(doc)  
\xc3 
itertools.groupby 
&gt;&gt;&gt; serv=""" ... urn:uuid:7FDS890A-KD9E-3h53-G7E8-BHJSD6789D:[u'http://10.10.10.20:12365/7FDS890A-KD9E-3h53-G7E8-BHJSD6789D/'] ... --------------------------------------------- ... urn:uuid:5EEF382F-JSQ9-3c45-D5E0-K15X8M8K76:[u'http://10.10.10.10:42365'] ... --------------------------------------------- ... urn:uuid:8DSGF89S-FS90-5c87-K3DF-SDFU890US9:[u'http://10.10.10.40:5234'] ... --------------------------------------------- ... """ &gt;&gt;&gt; tomatch="urn:uuid:5EEF382F-JSQ9-3c45-D5E0-K15X8M8K76" &gt;&gt;&gt; for row in serv.split("\n"): ...  if tomatch in row: ...   print row[ row.find("[")+1 : ].replace("]""") ... u'http://10.10.10.10:42365'  
cl.communicate() result err = ... result err repr(...) \n 
bytes u 
lines = iter(open('something.txt' 'r')) for val in lines:     if val == "!":         lines.next()         continue     &lt;etc&gt;  StopIteration 
specials if specials:   special_smoothies = [x for x in smoothies if any(True for y in specials if x.startswith(y))] else:   special_smoothies = smoothies[:]  
map.connect('/page/{pageid}/{controller}/{action}' requirements={'pageid':'\d+'}) map.connect('/page/{pageid}/{controller}/{action}/{id}' requirements={'pageid':'\d+' 'id':'\d+'})  def __before__(self action pageid=None):     page_q = meta.Session.query(model.Page)     c.page = pageid and page_q.filter_by(id=int(pageid)).first() or None     if c.page is None:         abort(404)  
employeeName getHours getHours getWage while True ValueError getHours getWage booleanDone==False not booleanDone 
##fix the eq and hash to work correctly class MyObject:     def __init__(selfvaluemeta):         self.value = value         self.meta = meta     def __eq__(selfother):         return self.value self.meta == other.value other.meta     def __hash__(self):         return hash((self.value self.meta))     def __repr__(self):         return "%s %s" % (self.valueself.meta)  a = MyObject('1''left') b = MyObject('1''right') c = MyObject('2''left') d = MyObject('2''right') e = MyObject('3''left')  union =  set([ace]).union(set([bd])) print union #set([2 left 2 right 1 left 3 left 1 right])  ##sort the objects so that older objs come before the newer equivalents sl = sorted(union key= lambda x: (x.value x.meta) ) print sl #[1 left 1 right 2 left 2 right 3 left] import itertools ##group the objects by value groupby needs the objs to be in order to do this filtered = itertools.groupby(sl lambda x: x.value) ##make a list of the oldest (first in group) oldest = [ next(group) for key group in filtered] print oldest #[1 left 2 left 3 left]  
def get_cookie_by_name(cj name):     return [cookie for cookie in cj if cookie.name == name][0]  cookie = get_cookie_by_name(cj "PHPSESSID")  [...] [0] 
_user _user class BasePage(webapp.RequestHandler):     def render(self template_name data={}):         template_data = {}         user = template_data["user"] = users.get_current_user()         template_data["login_logout_link"] = users.create_logout_url() if user else users.create_login_url()         template_data.update(data)         path = os.path.join(os.path.dirname(__file__) 'Static' 'Templates' '%s.html' % template_name)         self.response.out.write(template.render(path template_data)  user login_logout_link template_data.update(data) template_data data class MainPage(BasePage):     def get(self):         self.render('start' data={"now": datetime.now()})  
glob [a-z] path1 = "/Users/smcho/Desktop/bracket/[[]1020[]]"  [[] [ []] ] 
def __init__(self *args **kwargs):     super(UserProfileForm self).__init__(*args **kwargs)     try:                     self.fields['first_name'].initial = self.instance.user.first_name         self.fields['last_name'].initial = self.instance.user.last_name         self.fields['email'].initial = self.instance.user.email     except models.User.DoesNotExist:         pass  email = forms.EmailField(label = "G?ówny adres email"                          help_text=""                          required=True) first_name = forms.CharField(label = "Imi?"                              required=False) last_name = forms.CharField(label = "Nazwisko"                             required=False) kod_pocztowy = forms.RegexField('\d{2}-\d{3}'                                 required = False                                 label="Kod pocztowy"                                 error_messages={"invalid":'Poprawna warto?? to np: 41-200'})  class Meta:     model = UserExtended     exclude  = ('user')  def save(self *args **kwargs):     u = self.instance.user     u.email = self.cleaned_data['email']     u.first_name = self.cleaned_data['first_name']     u.last_name = self.cleaned_data['last_name']     u.kod_pocztowy = self.cleaned_data['kod_pocztowy']     u.save()     profile = super(UserProfileForm self).save(*args **kwargs)     return profile  
pipe p.wait() communicate() p.communicate() p.stdout.read(num_bytes) communicate() .stdin.write .stdout.read .stderr.read subprocess.PIPE p.stdout.read(bytes) while p.returncode is None: p1 = Popen([&quot;zgrep&quot; &quot;thingiwant&quot; &quot;largefile&quot;] stdout=PIPE) p2 = Popen([&quot;processreceivingdata&quot;] stdin=p1.stdout stdout=PIPE) output = p2.communicate()[0]  p2 p1 
__init__.py polls /home/kevin/crossen $ python -c "import sys; print sys.path"  
print obj __str__       &gt;&gt;&gt; a = ('foo\nbar' '5')       &gt;&gt;&gt; print a       ('foo\nbar' '5')        &gt;&gt;&gt; class mytuple(tuple):               def __str__(self):                   return ''.join(self)       &gt;&gt;&gt; b = mytuple(a)       &gt;&gt;&gt; print b       foo       bar5  __str__ 
inspect import inspect def log_var(name):     f = inspect.currentframe().f_back     if name in f.f_locals:         print "local `%s` = %r" % (name f.f_locals[name])     elif name in f.f_globals:         print "global `%s` = %r" % (name f.f_globals[name])     elif name in f.f_builtins:         print "builtin `%s` = %r" % (name f.f_builtins[name])     else:         print "`%s` not found" % name  
$ python  &gt;&gt;&gt; import sys &gt;&gt;&gt; print sys.stdout.encoding UTF-8  $ export LC_CTYPE=klingon # we should get some error message here just ignore it.  $ python  &gt;&gt;&gt; import sys &gt;&gt;&gt; print sys.stdout.encoding ANSI_X3.4-1968  &gt;&gt;&gt; print u'\xe9' UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9'  in position 0: ordinal not in range(128)  $ python  &gt;&gt;&gt; import sys  &gt;&gt;&gt; print sys.stdout.encoding UTF-8  &gt;&gt;&gt; print '\xe9' # (1) é &gt;&gt;&gt; print u'\xe9' # (2) Ã© &gt;&gt;&gt; print u'\xe9'.encode('latin-1') # (3) é &gt;&gt;&gt;  &gt;&gt;&gt; print '\xe9' # (4)  &gt;&gt;&gt; print u'\xe9' # (5) é &gt;&gt;&gt; print u'\xe9'.encode('latin-1') # (6)  &gt;&gt;&gt;  0xxx xxxx  (in binary)  0xxx xxxx  &lt;-- UTF-8 encoding for Unicode code points 0 to 127 *100 0010  &lt;-- Unicode code point 0x42 0100 0010  &lt;-- UTF-8 encoded (exactly the same)  110x xxxx 10xx xxxx            &lt;-- (from 128 to 2047) 1110 xxxx 10xx xxxx 10xx xxxx  &lt;-- (from 2048 to 65535)  1110 1001    &lt;-- 0xe9  110x xxxx 10xx xxxx   &lt;-- UTF-8 encoding for Unicode 128-2047 ***0 0011 **10 1001   &lt;-- 0xe9 1100 0011 1010 1001   &lt;-- 'é' after UTF-8 encoding C    3    A    9  
def debug():     import pdb     import sys      # set up the debugger     debugger = pdb.Pdb()     debugger.reset()      # your custom stuff here     debugger.do_where(None) # run the "where" command      # invoke the interactive debugging prompt     users_frame = sys._getframe().f_back # frame where the user invoked `debug()`     debugger.interaction(users_frame None)  if __name__ == '__main__':     print 1     debug()     print 2  pdb bdb 
break find True for word1 in buf1:      find = False      for word2 in buf2:          ...          if res == res1:              print "BINGO " + word1 + ":" + word2              find = True              break             # &lt;-- break here too     if find:          break   for for word1 word2 in ((w1 w2) for w1 in buf1 for w2 in buf2):     ...      if res == res1:          print "BINGO " + word1 + ":" + word2         break   itertools.product from itertools import product for word1 word2 in product(buf1 buf2):     ...      if res == res1:          print "BINGO " + word1 + ":" + word2         break   
dict(x[i:i+2] for i in range(0 len(x) 2))  
render BoundField.__unicode__ unicode django.template.VariableNode.render force_unicode unicode(instance.__unicode__()) instance.__unicode__() SafeString unicode from django.utils.encoding import force_unicode from django.utils.safestring import mark_safe  class Foo(object):     def __unicode__(self):         return mark_safe("foo")  foo = Foo() print "foo =" type(foo)  ufoo = unicode(foo) print "ufoo =" type(ufoo)  forced_foo = force_unicode(foo) print "forced_foo =" type(forced_foo)   bar = mark_safe("bar") print "bar =" type(bar)  forced_bar = force_unicode(bar) print "forced_bar =" type(forced_bar)  foo = &lt;class 'testt.Foo'&gt; ufoo = &lt;type 'unicode'&gt; forced_foo = &lt;type 'unicode'&gt; bar = &lt;class 'django.utils.safestring.SafeString'&gt; forced_bar = &lt;class 'django.utils.safestring.SafeUnicode'&gt;  
Bunch class Bunch(object):   def __init__(self adict):     self.__dict__.update(adict)  d x.foo d['foo'] x = Bunch(d)  d globals() &gt;&gt;&gt; import this The Zen of Python by Tim Peters    ... Namespaces are one honking great idea -- let's do more of those!  
randint() &gt;&gt;&gt; random.randint(1123456789012345678901234567890) 113144971884331658209492153398L  
c type(c) 
SELECT     TagIDCOUNT(*)     FROM YourTable     GROUP BY TagID  
Foo.__dict__ for callable in Foo.__dict__.values():     try:         callable()         except TypeError:         pass  
hashlib.hash __str__ id .hexdigest() 
''.join(map(str [1234] ))  map(str array) [str(x) for x in array] map(str [1234]) ['1' '2' '3' '4'] s.join(a) a s &gt;&gt;&gt; ''.join(['foo' 'bar' '' 'baz']) 'foobarbaz'  .join str &gt;&gt;&gt; ''.join([1234]) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: sequence item 0: expected string int found  map 
datalen 0 &gt;&gt;&gt; datalen = 10 &gt;&gt;&gt; print [0] * datalen [0 0 0 0 0 0 0 0 0 0]  &gt;&gt;&gt; print [0] * datalen [0 0 0 0 0 0 0 0 0 0]  
./stream_generator | egrep 'TICK' | ./topic_processor ./stream_generator egrep egrep egrep egrep egrep --line-buffered ./stream_generator | egrep --line-buffered 'TICK' | ./topic_processor   
basicConfig logging logging 
numpy.apply_along_axis(lambda args: [complex(*args)] 3 Data)  # The ellipsis is equivalent here to ":::"... numpy.vectorize(complex)(Data[...0] Data[...1])  Data[...0] + 1j * Data[...1]  result = 1j*Data[...1]; result += Data[...0]  
else     else:         return foo(a)  
for empty &lt;select&gt;     {% for name in dict.names %}     &lt;option value="{{name.id}}"        {% for selected_id in selected_name %}         {% ifequal name.id selected_id %} {{ selected }} {% endifequal %}        {% endfor %}&gt;       {{name.firstname}}     &lt;/option&gt;     {% empty %}     &lt;option value=""&gt;No names&lt;/option&gt;     {% endfor %} &lt;/select&gt;  
xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"   import feedparser  d = feedparser.parse('http://yourfeed.xml')  print d.entries[0].['geo_lat']  print d.entries[0].['geo_long']  
manage.py runfcgi import sys if sys.argv[1] == "runfcgi":     sys.stderr = open("/path/to/my/django-error.log" "a")  
None .left .right 
from collections import defaultdict d = defaultdict(lambda: defaultdict(int))  defaultdict(int) d 
* None * False * zero of any numeric type for example 0 0L 0.0 0j. * any empty sequence for example '' () []. * any empty mapping for example {}. * instances of user-defined classes if the class defines a    `__nonzero__()` or `__len__()` method when that method returns the integer    zero or bool value False. [1]  True 
imp.load_source imp import imp foobar = imp.load_source('foobar' '/path/to/foobar')  
pickle shelve pickle 
c = cv.WaitKey(10) repeat() time.sleep(10) for i in range(3):     capture = cv.CaptureFromCAM(i)     if capture: break  import cv  cv.NamedWindow("w1" cv.CV_WINDOW_AUTOSIZE) camera_index = 0 capture = cv.CaptureFromCAM(camera_index)  def repeat():     global capture #declare as globals since we are assigning to them now     global camera_index     frame = cv.QueryFrame(capture)     cv.ShowImage("w1" frame)     c = cv.WaitKey(10)     if(c=="n"): #in "n" key is pressed while the popup window is in focus         camera_index += 1 #try the next camera index         capture = cv.CaptureFromCAM(camera_index)         if not capture: #if the next camera index didn't work reset to 0.             camera_index = 0             capture = cv.CaptureFromCAM(camera_index)  while True:     repeat()  
PyArg_ParseTupleAndKeywords() const &lt;something&gt; * &lt;something&gt; * PyArg_ParseTupleAndKeywords() char * PyArg_ParseTupleAndKeywords const char *kwlist[] const_cast PyArg_ParseTupleAndKeywords() PyArg_ParseTupleAndKeywords(... ... ... const_cast&lt;char **&gt;(kwlist) ...);  
url(r'^accounts/register/$'     register     {'backend': 'accounts.regbackend.RegBackend''form_class':MM_RegistrationForm}             name='registration_register'     )      u = User.objects.get(username=new_user.username)     u.first_name = kwargs['first_name']     u.last_name = kwargs['last_name']     u.save()   
python /var/www/hash_info.py /var/www/Muha_Album.7912.torrent  
soup.findAll('meta' attrs={'name':re.compile("^description$" re.I)})  
while True root.mainloop() from tkinter import *  root = Tk() var = StringVar() var.set('hello')  l = Label(root textvariable = var) l.pack()  t = Entry(root textvariable = var) t.pack()  root.mainloop() # the window is now displayed  from tkinter import * from time import sleep  root = Tk() var = StringVar() var.set('hello')  l = Label(root textvariable = var) l.pack()  for i in range(6):     sleep(1) # Need this to slow the changes down     var.set('goodbye' if i%2 else 'hello')     root.update_idletasks()  root.update Tcl 
class SomeForm(Form):     someField = Field(....)     ...  someField SomeForm __init__ field = copy(field)  #maybe you need deepcopy instead setattr(self name field)     
&gt;&gt;&gt; def some_func(): ...   return 2 ...  &gt;&gt;&gt; a = 2 &gt;&gt;&gt; if (a = some_func()):   File "&lt;stdin&gt;" line 1     if (a = some_func()):           ^ SyntaxError: invalid syntax &gt;&gt;&gt;   
draw() plot() import time ion() x = linspace(-1151) plot(sin(x)) for i in range(10):     plot([sin(i+j) for j in x])     # make it appear immediately     draw()     time.sleep(1)  import time  ion()  tstart = time.time()               # for profiling x = arange(02*pi0.01)            # x-array line = plot(xsin(x)) for i in arange(1200):     line.set_ydata(sin(x+i/10.0))  # update the data     draw()                         # redraw the canvas  print 'FPS:'  200/(time.time()-tstart)  line.set_ydata() 
peers struct compact port event 
def get_indicator_form(indicator patient):     class IndicatorForm(forms.Form):         indicator_id = forms.IntegerField(initial=indicator.id widget=forms.HiddenInput())         patient_id = forms.IntegerField(initial=patient.id widget=forms.HiddenInput())          def __init__(self *args **kwargs):             forms.Form.__init__(self *args **kwargs)             self.indicator = indicator             self.patient = patient      for field in indicator.indicatorfield_set.all():         IndicatorForm.base_fields[field.name] = field.get_field_type()      return IndicatorForm  
zip_safe = False setup() setup.py zip_ok = false 
class voice(object):   Voiced Voiceless = range(2)  class Vowel(object):   def SomeInitialMethod(self):     # ...  class Consonant(object):   def SomeInitialMethod(self):     # ...  p.SomeInitialMethod() # p can be either vowel or consonant  def SomeLaterFunction(p)   # p is assumed to be either a Vowel or a Consonant   if isinstance(p Vowel):     # ...   elif isinstance(p Consonant):     # ...  
import select  def fromAtoB(A B):     r w = select.select([A] [B] [])     if not r: select.select([A] [] [])     elif not w: select.select([] [B] [])     B.sendall(A.recv(4096))  
&lt;a href="{% url feeds_view url="latest" %}"&gt;RSS feeds&lt;/a&gt;  
eventbox.set_events(...) 
Point.__hash__() Point.__eq__() Point.__repr__() Point 
dos2unix 
class Node(db.Model):     children = db.ListProperty(db.Key)  
{% for d in mydata %}     {% if forloop.first %}         &lt;strong&gt;{{ d.title }}&lt;/strong&gt;     {% else %}         {{ d.title }}     {% endif %} {% endfor %}  
mechanize import logging logger = logging.getLogger("mechanize") # only log really bad events logger.setLevel(logging.ERROR)  sys.stdout import sys # save the old stdout so you can print later (do sys.stdout = OLD_STDOUT) OLD_STDOUT = sys.stdout sys.stdout = open("logfile.txt" 'w')  sys.stderr OLD_STDERR = sys.stderr sys.stderr = open("errorLog.txt" 'w')  class Discarder(object):     def write(self text):         pass # do nothing # now discard everything coming out of stdout sys.stdout = Discarder()  # discards all input (change /dev/null to a file name to keep track of output) python yourScript.py &gt; /dev/null  
Student Student mapper(Student students_table) 
nonlocal def some_func(a):   L = []    def append():     L.append(a)  # for the sake of example     #...    if a == 100:     append()     #...   elif a == 200:     append()     #...  
class PortConfig(Serializable):     port = models.ForeignKey(Port editable=False)     machine = models.ForeignKey("vmm.machine" editable=False)     is_open = models.CharField(max_length=16 default="not_open" choices=is_open_choices)  class Rule(Serializable):     ip_source = models.CharField(max_length=24)     port_config = models.ForeignKey(PortConfig)  PortConfig Rule PortConfig 
pt = list() pt.append(raw_input()) pt.append(raw_input()) print pt  pt = [raw_input() raw_input()]  &gt;&gt;&gt; pt = [2] &gt;&gt;&gt; pt[0] = raw_input() 1011 &gt;&gt;&gt; pt ['1011']  pt = [2] pt[1] = raw_input() &gt;&gt;&gt; pt = [2] &gt;&gt;&gt; pt[0] = raw_input() 1011 &gt;&gt;&gt; pt[1] = raw_input() # this is an assignment to an index not yet created. 1012 Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; IndexError: list assignment index out of range  pt = [2] 2 0 &gt;&gt;&gt; pt = [2] &gt;&gt;&gt; pt [2] &gt;&gt;&gt;  append 
nosetests module.submodule  nosetests module.submodule:TestCase.test_method  
pk=1 Employee.objects.get(pk=1).addresses.all() 
Init global variable1 = '' variable2 = ''  def Init(var1 var2)    global variable1 variable2    variable1 = var1    variable2 = var2  
- url: /(.*\.(gif|png|jpg))   static_files: static/\1   upload: static/(.*\.(gif|png|jpg))  
'wrb' import tempfile import gzip  with tempfile.TemporaryFile(mode='w+b') as f:     f.write(data.decode('base64'))     f.flush()     f.seek(0)     gzf = gzip.GzipFile(mode='rb' fileobj=f)     print gzf.read()  
self.__map = [[c.state | s for c in row] for row in self.__map]  for row in self.__map:     for c in row:         c.state |= s  list1 = [] for row in self.__map:     list2 = []     for c in row:         list2.append(c.state | s)     list1.append(list2) self.__map = list1          list2.append(c.state |= s)  list2 for 
 class notes(models.Model):     created_by = models.ForeignKey(User related_name="note_created_by_user")     detail = models.ForeignKey(Details related_name="noted_and_detailed")  
 from django.db.models import ForeignKey  def get_fk_model(model fieldname):     """Returns None if not foreignkey otherswise the relevant model"""     field_object model direct m2m = model._meta.get_field_by_name(fieldname)     if not m2m and direct and isinstance(field_object ForeignKey):         return field_object.rel.to     return None   fk_model = get_fk_model(MyModel 'fieldname')  
sys.stdout idlestartup print print idlestartup Tk __main__ sys.modules['__main__'].pprint = pprint  
date &gt;&gt; /home/example.com/test.txt 
B() B() import sys import inspect  class A(object):     def __init__(self):         self.vanilla_b = B()         self.chocolate_b = B()  class B(object):     def __init__(self):         line_num = sys._getframe().f_back.f_lineno         lines = inspect.getsourcelines( sys.modules[__name__] )[0]         line = lines[line_num - 1]         attr = line.split("=")[0].split(".")[1].strip()         print "B() is being assigned to" attr  A()  B() is being assigned to vanilla_b B() is being assigned to chocolate_b  __main__ 
&gt;&gt;&gt; class MetaA(type): ...     def __new__(cls name bases dct): ...         print 'MetaA.__new__' ...         return type(name bases dct) ...     def __init__(cls name bases dct): ...         print 'MetaA.__init__' ...  &gt;&gt;&gt; class A(object): ...     __metaclass__ = MetaA ...  MetaA.__new__ &gt;&gt;&gt;   __new__ &gt;&gt;&gt; class MetaA(type): ...     def __new__(cls name bases dct): ...         print 'MetaA.__new__' ...         return type.__new__(cls name bases dct) ...     def __init__(cls name bases dct): ...         print 'MetaA.__init__' ...  &gt;&gt;&gt; class A(object): ...     __metaclass__ = MetaA ...  MetaA.__new__ MetaA.__init__ &gt;&gt;&gt;   
from IPython import embed embed()  
for delimiter (open_tag close_tag) in replacements.iteritems(): # or .items() in py3k  
for f in *.csv; do   python playlist.py "$f" "${f%.csv}list.txt" done  
%z %z 
range line = calc_range(first_line_num int1)  line out_str += line str() 
nonlocal def outer():     ctr = 0      def inner():         nonlocal ctr         ctr += 1      inner()  nonlocal ... ctr = [0]  def inner():     ctr[0] += 1 ...  ctr[0] ctr 
PickleType 
i = arange(255) j = arange(255) x = simple_func1(i) y = simple_func2(j) y = y.reshape(-11)      A = alpha * x * y + beta * x**2 + gamma * y**2 # broadcasting is your friend here  B = empty(A.shape+(3)) B[::0] = A B[::1] = 1 # broadcasting again B[::2] = 0  
mysql&gt; create table so (a int b char c char d char e char f char `key` int dupe char); Query OK 0 rows affected (0.05 sec)  mysql&gt; insert into so values (1 'd' 'c' 'f' 'k' 'l' 1 'x') (2 'g' null 'h' null 'j' 1 null) (3 'i' null 'h' 'u' 'u' 2 null) (4 'u' 'r' null null 't' 2 'x'); Query OK 4 rows affected (0.00 sec) Records: 4  Duplicates: 0  Warnings: 0  mysql&gt; select * from so order by a; +------+------+------+------+------+------+------+------+ | a    | b    | c    | d    | e    | f    | key  | dupe | +------+------+------+------+------+------+------+------+ |    1 | d    | c    | f    | k    | l    |    1 | x    | |    2 | g    | NULL | h    | NULL | j    |    1 | NULL | |    3 | i    | NULL | h    | u    | u    |    2 | NULL | |    4 | u    | r    | NULL | NULL | t    |    2 | x    | +------+------+------+------+------+------+------+------+ 4 rows in set (0.00 sec)  Python 2.6.5 (r265:79063 Mar 26 2010 22:43:05)  [GCC 4.2.1 (Apple Inc. build 5646) (dot 1)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import MySQLdb &gt;&gt;&gt; db = MySQLdb.connect(host="127.0.0.1" db="test") &gt;&gt;&gt; c = db.cursor() &gt;&gt;&gt; c.execute("SELECT a b c d e f `key` dupe FROM so") 4L &gt;&gt;&gt; rows = c.fetchall() &gt;&gt;&gt; rows ((1L 'd' 'c' 'f' 'k' 'l' 1L 'x') (4L 'u' 'r' None None 't' 2L 'x') (2L 'g' None 'h' None 'j' 1L None) (3L 'i' None 'h' 'u' 'u' 2L None)) &gt;&gt;&gt; data = dict() &gt;&gt;&gt; for row in rows: ...  key isDupe = row[-2] row[-1] ...  if key not in data: ...   data[key] = list(row[:-1]) ...  else: ...   for i in range(len(row)-1): ...    if data[key][i] is None or (not isDupe and row[i] is not None): ...     data[key][i] = row[i] ...  &gt;&gt;&gt; data {1L: [2L 'g' 'c' 'h' 'k' 'j' 1L] 2L: [3L 'i' 'r' 'h' 'u' 'u' 2L]}  
random.shuffle(required_playlist)  from collections import defaultdict actual_plays = defaultdict(int) for song in required_playlist: actual_plays[song] += 1  
foo bar ^(?!.*bar).*foo  
def depthGenerator(seq depth):     if depth==0:         for x in seq:             yield x[:2] #strip subsequences         return      for x in seq:         if len(x)==3:   #has subsequence?             for y in depthGenerator(x[2] depth-1):                 yield y  &gt;&gt;&gt; list(depthGenerator(PLACES 1)) [('AB' 'Alberta') ('BC' 'British Columbia') ('AL' 'Alabama') ('AK' 'Alaska')]  
def Property(f):       fget fset fdel = f()     fdoc = f.__doc__     return property(fget fset fdel fdoc)  class Foo(object):     @Property     def myprop():         "Property docstring"         def fget(self):               return 'fget'          def fset(self x):             pass         def fdel(self):             pass         return fget fset fdel  def Property(cls):     fget = cls.__dict__.get('fget')     fset = cls.__dict__.get('fset')     fdel = cls.__dict__.get('fdel')     fdoc = cls.__doc__     return property(fget fset fdel fdoc)  class Foo(object):     @Property     class myprop(object):         "Property docstring"         def fget(self):             return 'fget'         def fset(self x):             pass         def fdel(self):             pass  class Foo(object):     @property     def myprop(self):         "Property docstring"         return 'fget'     @myprop.setter     def myprop(self x):             pass     @myprop.deleter     def myprop(self):             pass  
str bytes str some_data some_text.encode('utf8') data.encode('base64') data.encode('base64') .encode() .encode() data.encode('base64').encode('utf8') data.decode('latin1') latin1 
sql = "INSERT INTO mytable (abc) VALUES (%(qwe)s %(asd)s %(zxc)s);" data = {'qwe':1 'asd':2 'zxc':None}  conn = MySQLdb.connect(**params)  cursor = conn.cursor() cursor.execute(sql data) cursor.close()  conn.close()  
def deactivate(self):     """If there are no stocks deactivate the product. Used in last step of checkout.     """      inactive = False      if self.is_variant():         prod = self.parent         inactive = all(var.get_stock_amount() == 0 for var in prod.variants.filter(active=True))         if inactive:             prod.active = 0         prod.save()     else:         if self.get_stock_amount() == 0:             self.active = 0          self.save()  
__init__ 'save-update' 'all delete-orphan' save() Session.flush() Session.commit() 
struct {                   11     char a;      012345678901     short b;     ------------     char c;      axbbcxxxdddd     int d; };  &gt;&gt;&gt; import struct &gt;&gt;&gt; struct.pack('BHBL'1234) '\x01\x00\x02\x00\x03\x00\x00\x00\x04\x00\x00\x00' &gt;&gt;&gt; struct.calcsize('BHBL') 12  &gt;&gt;&gt; struct.calcsize('=BHBL') 8 &gt;&gt;&gt; struct.pack('=BHBL'1234) '\x01\x02\x00\x03\x04\x00\x00\x00'  struct A {       struct B {     short a;         int a;     char b;          char b; };               };  &gt;&gt;&gt; struct.pack('LB'12) '\x01\x00\x00\x00\x02' &gt;&gt;&gt; struct.pack('LBLB'1234) '\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04'  
M = 10000 N = 10000  def thegoodone():    for x in xrange(N):        for y in xrange(M):            pass  def thebadone():     x = 0     while x &lt; N:         y = 0         while y &lt; M:             y += 1         x += 1  $ python -mtimeit -s'import loop' 'loop.thegoodone()' 10 loops best of 3: 3.45 sec per loop $ python -mtimeit -s'import loop' 'loop.thebadone()' 10 loops best of 3: 10.6 sec per loop  
dir(MyClass) 
append B = l.append(...) B.append(l[i]+A+B) i l IndexError 
s s[i] append() None A except try:     s.append(s[i]+A+B) except TypeError:     print "Failed to add" s[i] "" A "" "and" B     raise  raise 
.find_all() input_tag = soup.find_all(attrs={"name" : "stainfo"})  input_tag  output = input_tag[0]['value']  .find()  input_tag = soup.find(attrs={"name": "stainfo"})  output = input_tag['value']  
getattr setattr getattr(object attrname) setattr(object attrname value)  x = getattr(t 'attr1') setattr(t 'attr1' 21)  
new_list = my_list new_list my_list list.copy() new_list = old_list.copy()  new_list = old_list[:]  list() new_list = list(old_list)  copy.copy() import copy new_list = copy.copy(old_list)  list() old_list copy.deepcopy() import copy new_list = copy.deepcopy(old_list)  import copy  class Foo(object):     def __init__(self val):          self.val = val      def __repr__(self):         return 'Foo({!r})'.format(self.val)  foo = Foo(1)  a = ['foo' foo] b = a.copy() c = a[:] d = list(a) e = copy.copy(a) f = copy.deepcopy(a)  # edit orignal list and instance  a.append('baz') foo.val = 5  print('original: %r\nlist.copy(): %r\nslice: %r\nlist(): %r\ncopy: %r\ndeepcopy: %r'       % (a b c d e f))  original: ['foo' Foo(5) 'baz'] list.copy(): ['foo' Foo(5)] slice: ['foo' Foo(5)] list(): ['foo' Foo(5)] copy: ['foo' Foo(5)] deepcopy: ['foo' Foo(1)]  
input() d "d" raw_input() 
html=urllib2.urlopen("http://somewhere").read() for item in html.split("&lt;/title&gt;"):     if "&lt;title&gt;" in item:         print item[ item.find("&lt;title&gt;")+7: ]  
tag tag.findNextSibling('h2')  &lt;h2&gt;This is hell!&lt;/h2&gt;  tag.nextSibling u'\n' u'\n' tag.findNextSibling(text=None)  tag.nextSibling.nextSibling  tag tag.nextSibling None tag.nextSibling.nextSibling AttributeError 
__init__ parent class Tab1(wx.Panel):     def __init__(self parent):         self.parent = parent         ...etc etc...  self.parent.GetPage(x) x self.jaddbutton.Disable() othertab = self.parent.GetPage(1) othertab.jaddbutton.Disable()  
CoreFoundation CoreFoundation import locale locale.getdefautlocale()  
TRIM(LEADING ... FROM ...) SELECT * FROM song WHERE SUBSTRING(TRIM(LEADING 'The ' FROM TRIM(LEADING 'A ' FROM title)) 1 1) = 'B' ORDER BY TRIM(LEADING 'The ' FROM TRIM(LEADING 'A ' FROM title))  CREATE TABLE song (title NVARCHAR(100) NOT NULL); INSERT INTO song (title) VALUES ('The Bar') ('Baz A') ('Foo') ('Qux') ('A Quux');  ORDER BY 
import sqlite3    import pysqlite2  print sqlite3.sqlite_version   # should be 3.6.23.1 print pysqlite2.__path__       # eg C:\\Python26\\lib\\site-packages\\pysqlite2  from sqlalchemy.interfaces import PoolListener class ForeignKeysListener(PoolListener):     def connect(self dbapi_con con_record):         db_cursor = dbapi_con.execute('pragma foreign_keys=ON')  engine = create_engine(database_url listeners=[ForeignKeysListener()])  add() nullable=False ForeignKey() # example ins = Coverage.__table__.insert().values(id = 99                                     description = 'Wrong'                                     area = 42.0                                     wall_id = 99  # invalid fkey id                                     type_id = 99)  # invalid fkey_id session.execute(ins)   wall_id type_id ForeignKey() 
  File "D:\Projects\Reuters\ReutersParser.py" line 38 in __init__     SGMLParser.__init__(self verbose) NameError: global name 'sgmllib' is not defined  sgmllib.SGMLParser.__init__(self verbose) 
glib.timeout_add import gtk import glib  def yieldsleep(func):     def start(*args **kwds):         iterable = func(*args **kwds)         def step(*args **kwds):             try:                 time = next(iterable)                 glib.timeout_add_seconds(time step)             except StopIteration:                 pass         glib.idle_add(step)     return start  class Fun(object):     def __init__(self):         window = gtk.Window()          vbox = gtk.VBox()          btnone = gtk.Button('one')         btnone.connect('clicked' self.click_one)         btnone.show()         vbox.pack_start(btnone)          btntwo = gtk.Button('two')         btntwo.connect('clicked' self.click_two)         btntwo.show()         vbox.pack_start(btntwo)          vbox.show()         window.add(vbox)         window.show()      @yieldsleep     def click_one(self widget data=None):         yield 1 #time.sleep(1)         print '1'         yield 1 #time.sleep(1)         print '2'         yield 1 #time.sleep(1)         print '3'      @yieldsleep     def click_two(self widget data=None):         yield 1 #time.sleep(1)         print '4'         yield 1 #time.sleep(1)         print '5'         yield 1 #time.sleep(1)         print '6'  do = Fun() gtk.main()  
def trimmedexceptions(type value tb pylibdir=None lev=None):     """trim system packages from the exception printout"""     if pylibdir is None:         import traceback distutils.sysconfig         pylibdir = distutils.sysconfig.get_python_lib(11)         nlev = trimmedexceptions(type value tb pylibdir 0)         traceback.print_exception(type value tb nlev)     else:         fn = tb.tb_frame.f_code.co_filename         if tb.tb_next is None or fn.startswith(pylibdir):             return lev         else:             return trimmedexceptions(type value tb.tb_next pylibdir lev+1)  import sys sys.excepthook=trimmedexceptions  # --- test code ---  def f1(): f2() def f2(): f3() def f3():     import xmlrpclib     proxy = xmlrpclib.ServerProxy('http://nosuchserver')     proxy.f()  f1()  Traceback (most recent call last):   File "./tsttraceback.py" line 47 in &lt;module&gt;     f1()   File "./tsttraceback.py" line 40 in f1     def f1(): f2()   File "./tsttraceback.py" line 41 in f2     def f2(): f3()   File "./tsttraceback.py" line 45 in f3     proxy.f() gaierror: [Errno -2] Name or service not known  
xkcdpicfile=open("C:\\Documents and Settings\\John Gann\\Desktop\\xkcd.png"                  "wb")  b "wb" "w" print chunk print repr(chunk) len(chunk) 
self.msg.done()  msgbox().done() done done def done(self):     self.wTree.get_widget('dialog1').destroy()  msgbox object msgbox msgbox.done class Msgbox(object):     ...     def __del__(self):         self.wTree.get_widget('dialog1').destroy()  class Fun(object):     ...     @yieldsleep     def one(self widget data=None):         self.msg = Msgbox('Please wait...''')         yield 500         # actually you probably need to delete the old self.msg         # so it gets destroyed before the new message box is created         del self.msg         self.msg = Msgbox('Done!''')  
url 
2.* name value os.environ['QUERY_STRING'] ? 
newGameStep2() return newStep2Choice return newGameStep2()  
for line in ['x_min' 'x_max' 'y_min' 'y_max']:     setattr(self line config.getfloat('geography' line.replace('_' '')))  
contents &gt;&gt;&gt; for x in schoolname: &gt;&gt;&gt;    print x.contents [u'A B Paterson College Arundel QLD']      
r' .... (?P&lt;text&gt;.*?)(\n\n|$)'  
getproxies get def check_proxy():          import urllib      http_proxy = urllib.getproxies().get('http')      # some “complex” code that uses http_proxy  def check_proxy():          import urllib      http_proxy = urllib.getproxies().get('http')      _check_proxy(http_proxy)  def _check_proxy(http_proxy):      # some “complex” code that uses http_proxy  _check_proxy http_proxy _check_proxy check_proxy 
import sys import linecache import random  class Tracer(object):     def __init__(self):         self.lastframe = None      def traceit(self frame event arg):         if event == "line":             lineno = frame.f_lineno             filename = frame.f_globals["__file__"]             if filename == "&lt;stdin&gt;":                 filename = "traceit.py"             if (filename.endswith(".pyc") or                 filename.endswith(".pyo")):                 filename = filename[:-1]             name = frame.f_globals["__name__"]             line = linecache.getline(filename lineno)             if frame.f_back is self.lastframe:                 print "%s:%s:%s: %s" % (name  linenoframe.f_code.co_name  line.rstrip())             else:                 print "%s:%s:%s(%s)" % (name  linenoframe.f_code.co_name  str.join(' ' ("%s=%r" % item for item in frame.f_locals.iteritems())))                  print "%s:%s:%s: %s" % (name  linenoframe.f_code.co_name  line.rstrip())                 #print frame.f_locals             self.lastframe = frame.f_back         return self.traceit   def main():     print "In main"     for i in range(5):         print i random.randrange(0 10)     print "Done."  sys.settrace(Tracer().traceit) main()  
INSTALLED_APPS django.contrib.admin manage.py reset admin manage.py reset django.contrib.admin virtualenv 
GET /index.html HTTP/1.1 host: www.blah.com &lt;enter&gt; &lt;enter&gt;  
num = raw_input("Choose a number: ")  num num = int(num) raw_input input True False 
__import__ try except for module_name in mymods:   try:     __import__(module_name)   except ImportError:     print "Module %s not found." %(module_name)  import imp for module_name in mymods:   try:     imp.find_module(module_name)   except ImportError:     print "Module %s not found." %(module_name)  import 
import datetime import time src = "16100:00:008.1914.4647.8746.54null4.4562010-04-12" asFloat = lambda x : float(x) asInt = lambda x : int(x) asTime = lambda x : datetime.datetime(*time.strptime(x'%H:%M:%S')[:7]).time() asDate = lambda x : datetime.datetime(*time.strptime(x'%Y-%m-%d')[:3]).date() asNone = lambda x : None if x=='null' else int('ValueError') converters = (asDateasTimeasIntasFloatasNone) def convert(x):   for cnv in converters:     try:       return cnv(x)     except ValueError:       pass   return x  clean_data = [convert(s) for s in src.split('')] print clean_data  [161 datetime.time(0 0) 8.1899999999999995 1 4.46 4   7.8700000000000001 4 6.54 None 4.4500000000000002 6   datetime.date(2010 4 12)]  
create.py # Code that creates folder statusCode statusMessage groupId response = render_to_response('create.xml' {'statusCode': statusCode                                                    'statusMessage': statusMessage                                                    'groupId': groupId                                                    } mimetype = 'text/xml') # Some other code maybe an import pdb; pdb.set_trace()  # So that you can inspect the response inside of a python shell. return response  
randint rand def use_multinomial(length num_points):     probs = ones(length)/float(length)     return multinomial(1 probs num_points)  def use_rand(length num_points):     return [randint(1length) for _ in range(num_points)]  numpy.random.randint def use_np_randint(length num_point):     return nprandint(1 length num_points)  Multinomial took: 13.6279997826 seconds Rand took: 0.185000181198 seconds NP randint took: 0.00100016593933 seconds  
__init__.py __init__.py 
foobar from itertools import combinations [j for i in range(len(foobar)+1) for j in combinations(foobari)]  from itertools import combinations [j for i in range(len(foobar)+1) for j in combinations(foobari)  if minval &lt;= sum(f.bar for f in j) &lt;= maxval]  &gt;&gt;&gt; from itertools import combinations &gt;&gt;&gt; class Foo(object): ...     def __init__(self bar): ...         self.bar=bar ...     def __repr__(self): ...         return  "&lt;Foo: %s&gt;"%self.bar ...  &gt;&gt;&gt; foobar=[Foo(5)Foo(10)Foo(15)] &gt;&gt;&gt; minval=5 &gt;&gt;&gt; maxval=25 &gt;&gt;&gt; [j for i in range(len(foobar)+1) for j in combinations(foobari)       if minval &lt;= sum(f.bar for f in j) &lt;= maxval] [(&lt;Foo: 5&gt;) (&lt;Foo: 10&gt;) (&lt;Foo: 15&gt;) (&lt;Foo: 5&gt; &lt;Foo: 10&gt;) (&lt;Foo: 5&gt; &lt;Foo: 15&gt;) (&lt;Foo: 10&gt; &lt;Foo: 15&gt;)]  &gt;&gt;&gt; [list(j) for i in range(len(foobar)+1) for j in combinations(foobari) if minval &lt;= sum(f.bar for f in j) &lt;= maxval ] [[&lt;Foo: 5&gt;] [&lt;Foo: 10&gt;] [&lt;Foo: 15&gt;] [&lt;Foo: 5&gt; &lt;Foo: 10&gt;] [&lt;Foo: 5&gt; &lt;Foo: 15&gt;] [&lt;Foo: 10&gt; &lt;Foo: 15&gt;]]  
dbm dbm shelve anydbm 
from reportlab.platypus import SimpleDocTemplate Image from reportlab.lib.pagesizes import letter from glob import glob  doc = SimpleDocTemplate('image-collection.pdf' pagesize=letter) parts = [Image(filename) for filename in glob('*.jpg')] doc.build(parts)  
r'^test\.(?P&lt;extension&gt;(json)|(xml))$' 
socketserver asyncore twisted 
import lxml.html data = """&lt;td style="padding: 20px"&gt;blah blah &lt;/td&gt; &lt;td style="padding: 21px"&gt;bow bow&lt;/td&gt; &lt;td style="padding: 20px"&gt;buh buh&lt;/td&gt; """ doc = lxml.html.document_fromstring(data) for col in doc.cssselect('td'):     style = col.attrib['style']     if style=='padding: 20px':         print(col.text.strip())  blah blah buh buh  bow bow 
container = wx.BoxSizer(wx.VERTICAL) container.Add(self.nb 1 wx.EXPAND)  login = wx.BoxSizer(wx.VERTICAL) login.Add(self.userLabel) login.Add(self.userText)  # ... clip rest of login form additions here  bottom = wx.BoxSizer(wx.HORIZONTAL) bottom.Add(image) bottom.Add((0 0) 1 wx.EXPAND) bottom.Add(login)  container.Add(bottom 1 wx.EXPAND)  bottom.Add((0 0) 1 wx.EXPAND) 
conn=httplib.HTTPConnection("http://223.56.124.58:8080/wireless")   getaddrinfo() getaddrinfo() EAI_NONAME getaddrinfo "223.56.124.58:8080/wireless" conn = httplib.HTTPConnection("223.56.124.58" 8080)  conn.request("POST" "wireless" params headers)  conn.request("POST""http://202.45.139.58:8080/ppod-web"paramsheaders)  http://202.45.139.58:8080/http://202.45.139.58:8080/ppod-web conn = httplib.HTTPConnection("202.45.139.58" 8080) conn.request("POST" "ppod-web" params headers)  HTTPConnection request() params &gt;&gt;&gt; urllib.urlencode({"wifi":{"ssid":"guest""rssi""80"}}) SyntaxError: invalid syntax &gt;&gt;&gt; urllib.urlencode({"wifi":{"ssid":"guest""rssi":"80"}}) 'wifi=%7B%27rssi%27%3A+%2780%27%2C+%27ssid%27%3A+%27guest%27%7D'  &gt;&gt;&gt; urllib.urlencode({"data": {"wifi":{"ssid":"guest""rssi":"80"}}}) 'data=%7B%27wifi%27%3A+%7B%27rssi%27%3A+%2780%27%2C+%27ssid%27%3A+%27guest%27%7D%7D'  
class SmokeTests():       def suite(self): #Function stores all the modules to be tested            modules_to_test = ('external_sanity' 'internal_sanity')           alltests = unittest.TestSuite()           for module in map(__import__ modules_to_test):               alltests.addTest(unittest.findTestCases(module))           return alltests   if __name__ == '__main__':     Smoke = SmokeTests()       unittest.main(defaultTest='Smoke.suite')   
buyer = relation(User backref=backref('buys' order_by=id)) user = relation(User backref=backref('usings' order_by=id))  primaryjoin buyer = relation(User primaryjoin=(buyer_id==User.id)                  backref=backref('buys' order_by=id)) user = relation(User primaryjoin=(user_id==User.id)                 backref=backref('usings' order_by=id))  
0.0 1.0 ) [ 0.0 0.0 0.0 
"" sum = ""  sum = 0  else:  sum += ""  
_clone QuerySet News.published.all() get_query_set QuerySet filter filter class PublishedNewsManager(models.Manager):     def get_query_set(self):         return super(PublishedNewsManager self).get_query_set() \                     .filter(is_published=True) \                     .filter(pub_date__lte=datetime.datetime.now)  
awk -F -vOFS= -vc=1 '     NR == 1 {         for (i=1; i&lt;NF; i++) {             if ($i != "") {                 g[c]=i;                 f[c++]=$i             }         }     }     NR&gt;2 {         for (i=1; i &lt; c; i++) {             print $1$2 $g[i] &gt; "output_"f[i]".csv"         }     }' data.csv  awk -F -vOFS= -vc=1 'NR == 1 {for (i=1; i&lt;NF; i++) {if ($i != "") {g[c]=i; f[c++]=$i}}} NR&gt;2 { for (i=1; i &lt; c; i++) {print $1$2 $g[i] &gt; "file_"f[i]".csv" }}' data.csv  $ cat file_L1.csv EXAMPLEfoo606 EXAMPLEbar306 EXAMPLE1603 EXAMPLE21206 EXAMPLE3606 EXAMPLE4306 $ cat file_L2.csv EXAMPLEfoo600 EXAMPLEbar306 EXAMPLE1603 EXAMPLE21200 EXAMPLE3606 EXAMPLE4306 $ cat file_L11.csv EXAMPLEfoo600 EXAMPLEbar306 EXAMPLE1603 EXAMPLE21200 EXAMPLE3600 EXAMPLE4306  
[a[i] for i in (125)] # [11 12 15]  
from copy import deepcopy  print_matrix(mat) s=[] for x in range(3):      s.append(scramble_matrix(deepcopy(mat)10))  # note the deepcopy() for matrix in s:      print ""      print_matrix(matrix)  
&gt;&gt;&gt; import textwrap &gt;&gt;&gt; string = 'A string with words' &gt;&gt;&gt; textwrap.wrap(string15) ['A string with' 'words']  
RefreshItems 
import socket import time  command = '&lt;xml version="1.0" encoding="UTF-8"&gt;&lt;header/&gt;&lt;body&gt;&lt;code&gt;&lt;body/&gt;'  s = socket.socket(socket.AF_INET socket.SOCK_STREAM) s.connect(("192.1100.2.2" 54239))  s.send(command)  time.sleep(2) resp = s.recv(3000)  print resp  
&gt;&gt;&gt; x = 1 &gt;&gt;&gt; y = 2 &gt;&gt;&gt; def swap_xy(): ...   global x y ...   (x y) = (y x) ...  &gt;&gt;&gt; dis.dis(swap_xy)   3           0 LOAD_GLOBAL              0 (y)               3 LOAD_GLOBAL              1 (x)               6 ROT_TWO                            7 STORE_GLOBAL             1 (x)              10 STORE_GLOBAL             0 (y)              13 LOAD_CONST               0 (None)              16 RETURN_VALUE      LOAD_GLOBAL ROT_TWO STORE_GLOBAL &gt;&gt;&gt; def swap_xy_repeatedly(): ...   while 1: ...     swap_xy() ...     if x == y: ...       # If all swaps are atomic there will never be a time when x == y. ...       # (of course this depends on "if x == y" being atomic which it isn't; ...       #  but if "if x == y" isn't atomic what hope have we for the more complex ...       #  "x y = y x"?) ...       print 'non-atomic swap detected' ...       break ...  &gt;&gt;&gt; t1 = threading.Thread(target=swap_xy_repeatedly) &gt;&gt;&gt; t2 = threading.Thread(target=swap_xy_repeatedly) &gt;&gt;&gt; t1.start() &gt;&gt;&gt; t2.start() &gt;&gt;&gt; non-atomic swap detected  
import MySQLdb import datetime  THEHOST="localhost" THEUSER="user" THEPASSWD="passwd" THEDB="database"  connection=MySQLdb.connect(     host=THEHOSTuser=THEUSERpasswd=THEPASSWDdb=THEDB) cursor=connection.cursor()  abcefgijk=123  data={'1': ['1' 'K' abc 'xyz' None None None datetime.date(2009 6 18)]       '2': ['2' 'K' efg 'xyz' None None None None]       '3': ['3' 'K' ijk 'xyz' None None None             datetime.datetime(2010 2 5 16 31 2)]}  sql='''\ CREATE TABLE IF NOT EXISTS temp (id int auto_increment primary key     field1 varchar(8)     field2 int     field3 varchar(8)     field4 bool     field5 varchar(8)     field6 varchar(8)     field7 datetime )'''  cursor.execute(sql)  sql='''\ INSERT INTO temp (id field1 field2 field3 field4 field5 field6 field7) VALUES (%s %s %s %s %s %s %s %s) ''' cursor.executemany(sql data.values())  
print 'temp1' print 'temp2'  sys.stdout.write import sys sys.stdout.write("Some output")  
/opt/local/share/google_appengine/dev_appserver.py  
  obj.inspect =&gt; string  obj to_s    [ 1 2 3..4 'five' ].inspect   #=&gt; "[1 2 3..4 \"five\"]"    Time.new.inspect                 #=&gt; "Wed Apr 09 08:54:39 CDT 2003"   obj.to_s =&gt; string  obj to_s 
reindent.py python2.6-examples 
coding u"Par Catégorie" str bytes 
fun oneThread class oneThread(threading.Thread):     def __init__(self fun):         self.fun = fun         ...  class fun:     def one(self widget):         oneThread(self):  
xrange() for v in xrange(n // 2 - 1 -1 -1):  range() xrange() // 
main.py __main__ main main.py main __main__ 
C:\&gt; C:\Documents and Settings\fred\My Documents\Downloads\google-python-exercises \google-python-exercises\hello.py John  C:\&gt; hello.py John  argv hello.py John sys.argv[0] == 'hello.py' sys.argv[1] == 'John' len(sys.argv) &gt;= 2 define main() function:     if there are at least 2 elements on the cmd-line:         set 'name' to the second element located at index 1 e.g. John     otherwise there is only 1 element... the program name e.g. hello.py:         set 'name' to "World" (since we did not get any useful user input)     display 'Hello' followed by whatever i assigned to 'name'  hello.py Hello World hello.py John Hello John hello.py John Paul Hello John sys.argv[2] Paul len(sys.argv) == 3 sys.argv 
defaultdict from collections import defaultdict  foo = defaultdict(int) foo[bar] += 1  
str(para) ascii para encode() &gt;&gt;&gt; s=u'123\u2019' &gt;&gt;&gt; str(s) Traceback (most recent call last):   File "&lt;interactive input&gt;" line 1 in &lt;module&gt; UnicodeEncodeError: 'ascii' codec can't encode character u'\u2019' in position 3: ordinal not in range(128) &gt;&gt;&gt; s.encode("utf-8") '123\xe2\x80\x99' &gt;&gt;&gt;   para encode("utf-8") 
\ \textbackslash{} { \{ } \} $ \$ &amp; \&amp; # \# ^ \textasciicircum{} textcomp _ \_ ~ \textasciitilde{} % \% &lt; \textless{} &gt; \textgreater{} | \textbar{} " \textquotedbl{} ' \textquotesingle{} ` \textasciigrave{} 
import yaml class User(object):     def __init__(self name surname):        self.name= name        self.surname= surname      def yaml(self):        return yaml.dump(self.__dict__)      @staticmethod     def load(data):        values = yaml.safe_load(data)        return User(values["name"] values["surname"])  user = User('spam' 'eggs') serialized_user = user.yaml() print "serialized_user:  %s" % serialized_user.strip()  #Network deserialized_user = User.load(serialized_user) print "name: %s sname: %s" % (deserialized_user.name deserialized_user.surname)  
''.join(x.split())  
urls import views.interaction.gaerete  interaction.garaete interaction interaction/__init__.py import gaerete  
try:     Person.objects.get(email=...)     raise forms.ValidationError(...) except Person.DoesNotExist:     pass  
__init__.py os os.path import os print os.path.abspath('somefile')  from wrappermodule import * 
object = Emp.objects.get(pk=profile.id) object.save(force_insert=True)  
def walk_list(list_of_g):     to_idx = 0     for g_current in list_of_g:         if not subtle_condition(g_current):             list_of_g[to_idx] = g_current             to_idx += 1     del list_of_g[to_idx:]  
modulename.__file__ &gt;&gt;&gt;&gt; import django &gt;&gt;&gt; django.__file__ '/home/bartek/.virtualenvs/safetyville/lib/python2.6/site-packages/django/__init__.pyc'  
get_friends User get_user for friend in friends:     for f in friend.get_friends(limit='200'):         ...  
pairwise def pairwise(iterable):     "s -&gt; (s0s1) (s1s2) (s2 s3) ..."     a b = tee(iterable)     next(b None)     return izip(a b)  for x1 x2 in pairwise(some_iterable):     # etc..  dict 
main() add_models() rest main() 
import wx class MyFrame(wx.Frame):     def __init__(self):         wx.Frame.__init__(self None -1 'test frame'size=(790 524))         self.Bind(wx.EVT_LEFT_DOWN self.OnClick)         self.Bind(wx.EVT_PAINT self.OnPaint)         self.clip = wx.Clipboard()         self.x = wx.BitmapDataObject()         self.bmp = None      def OnClick(self evt):         self.clip.Open()         self.clip.GetData(self.x)         self.clip.Close()         self.bmp = self.x.GetBitmap()         self.Refresh()      def OnPaint(self evt):         if self.bmp:             dc = wx.PaintDC(self)             dc.DrawBitmap(self.bmp 20 20 True)  if __name__ == '__main__':     app = wx.App()     frame = MyFrame()     frame.Show()     app.MainLoop()  
b = Element("Batch") b.append(Attribute("OnError""Continue")).append(Attribute("ListVersion""3")) bm= Element("Method") bm.append(Attribute("ID""1")).append(Attribute("Cmd""Update")) bm.append(Element("Field").append(Attribute("Name""ID")).setText('')) bm.append(Element('Field').append(Attribute('Name''FileRef')).setText('http://.....')) bm.append(Element('Field').append(Attribute('Name''Jurisdiction')).setText('UK')) bm.append(Element('Field').append(Attribute('Name''Desk')).setText('Structured Equity Derivatives')) bm.append(Element('Field').append(Attribute('Name''Business Area')).setText('Back Office')) bm.append(Element('Field').append(Attribute('Name''Title')).setText('whatever')) b.append(bm) u = Element("ns1:updates") u.append(b) c.service.UpdateListItems("Reports"u)  
Programmer.projects secondary='assignment' Assignment.project Programmer.projects association_proxy('assignments' 'project') 
application_readable  
&gt;&gt;&gt; [[0]*8 for x in xrange(8)] [[0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0]] &gt;&gt;&gt;  
from collections import OrderedDict data = OrderedDict() for item in container:   data[item] = OrderedDict()   ...   for key val in item_container.iteritems():     ...     data[item][key] = val  
def my_eval(condition1 lo condition2)     return {       'and': condition1 and condition2       'or': condition1 or condition2            }[lo]  condition = conditions[0] for cond op in zip(conditions[1:] operators):     condition = my_eval(condition op cond)  condition1 condition2 my_eval 
// net cid lac = 25002 9164 4000 $net = 25002; $cid = 9164; $lac = 4000;  // import urllib  //a = '000E00000000000000000000000000001B0000000000000000000000030000' $a = '000E00000000000000000000000000001B0000000000000000000000030000';  //b = hex(cid)[2:].zfill(8) + hex(lac)[2:].zfill(8) $b = sprintf("%08x%08x" $cid $lac);  //c = hex(divmod(net100)[1])[2:].zfill(8) + hex(divmod(net100)[0])[2:].zfill(8) $c = sprintf("%08x%08x" $net % 100 floor($net / 100));  //string = (a + b + c + 'FFFFFFFF00000000').decode('hex') $string = $a . $b . $c . 'FFFFFFFF00000000'; $newstring = ''; for( $i = 0 $count = strlen($string); $i &lt; $count; $i++ ) {  $newstring .= sprintf("%c" hexdec($string{$i} . $string{++$i})); }  //data = urllib.urlopen('http://www.google.com/glm/mmap'string) $ch = curl_init('http://www.google.com/glm/mmap'); curl_setopt($ch CURLOPT_POST true); curl_setopt($ch CURLOPT_POSTFIELDS $newstring); curl_setopt($ch CURLOPT_RETURNTRANSFER true);  //r = data.read().encode('hex') $r = curl_exec($ch);  //print float(int(r[14:22]16))/1000000 float(int(r[22:30]16))/1000000 $r = array_pop(unpack("H*" $r)); printf("%f %f" hexdec(substr($r 14 8)) / 1000000 hexdec(substr($r 22 8)) / 1000000);  
my_dict = {} for obj in my_objects:     my_dict.setdefault(obj.year []).append(obj)  
TestApp &gt;&gt;&gt; from webtest import TestApp &gt;&gt;&gt; from myapp import my_wsgi_app &gt;&gt;&gt; app = TestApp(my_wsgi_app) &gt;&gt;&gt; res = app.get('/') &gt;&gt;&gt; res.status '200 OK' &gt;&gt;&gt; res.status_int 200 &gt;&gt;&gt; params = {'email': 'foo@example.com' 'password': 'foo' } &gt;&gt;&gt; res = app.post('/login/' params) &gt;&gt;&gt; res.status_int 302  self.app TestApp def test_index_page(self):     res = self.app.get('/')     self.failUnlessEqual(res.status_int 200)  
logger = logging.getLogger(__name__) if __name__ == '__main__': logging.basicConfig(filename='/tmp/myapp.log' level=logging.DEBUG                      format='%(asctime)s %(levelname)s %(name)s %(message)s')  import logging logger = logging.getLogger(__name__)  logger.debug('message with %s' 'arguments') # or .info .warning .error etc.  
self._matrix.append( [gameSquare()] * 8 )  self._matrix.append( [gameSquare() for _ in xrange(8)] )  print _matrix[row][col]  print _matrix[row][col]  _darkQuad 
&gt;&gt;&gt; data = [123456] &gt;&gt;&gt; zip(data[0::2] data[1::2]) [(1 2) (3 4) (5 6)]  
session.query(User).filter_by(id=123).update({"name": u"Bob Marley"})  
def we_are_frozen():     # All of the modules are built-in to the interpreter e.g. by py2exe     return hasattr(sys "frozen")  def module_path():     encoding = sys.getfilesystemencoding()     if we_are_frozen():         return os.path.dirname(unicode(sys.executable encoding))     return os.path.dirname(unicode(__file__ encoding))  import module_locator my_path = module_locator.module_path()  
os.listdir() glob.glob os.path.isfile() import os os.path  # simple version for working with CWD print len([name for name in os.listdir('.') if os.path.isfile(name)])  # path joining version for other paths DIR = '/tmp' print len([name for name in os.listdir(DIR) if os.path.isfile(os.path.join(DIR name))])  
import re  def extract_current(s):     s = s[s.rfind(' ')+1:-1]     s = re.sub('\d{6}-\d{6}' '' s)     s = re.sub('[A-Z]+' '' s)     return s  print extract_current('24.02 24.02VALINTATALO MEGAHERTSI476-') print extract_current('24.02 24.02DOE MRIDANG 157235-123458200-')  476 200  
++ number += 1  
arglist = [(2 90) (1 140) (3 -40) (4 60)] for args in arglist:     do.something(*args)     time.sleep(1)     print "Did something (%d%d)" % args  
REMatcher 
Bar bar(a b) Bar(a b) object class Bar(object): def __init__(num1 num2): def __init__(self num1 num2): def foo() self. num1 self.num1 ^ ** class Bar(object):     num1 num2 = 0 0     def __init__(self num1 num2):         self.num1 self.num2 = num1 num2      def foo(self):         if self.num1 &gt; self.num2:             print self.num1'is greater than 'self.num2'!'         elif self.num1 is self.num2:             print self.num1' is equal to 'self.num2'!'         else:             print self.num1' is less than 'self.num2'!'  a b = 42 84 t = Bar(a b) t.foo()  t.num1 = t.num1 ^ t.num2 t.num2 = t.num2 ^ t.num1 t.num1 = t.num1 ^ t.num2  t.foo()  42  is less than  84 ! 84 is greater than  42 !  
Enviroment.objects.exclude(name="env1").exclude(name="env2")  Enviroment.objects.exclude(Q(name="env1") | Q(name="env2"))  
sys.exit(logThis(text)+display)  logThisAndExit(text display) sys.exit(logThis(text))  logThisAndExit(text) call(msg+display) 
import threading import webbrowser  def start_browser(server_ready_event url):     print "[Browser Thread] Waiting for server to start"     server_ready_event.wait()     print "[Browser Thread] Opening browser"     webbrowser.open(url)  url = "someurl" server_ready = threading.Event() browser_thread = threading.Thread(target=start_browser args=(server_ready url)) browser_thread.start()  print "[Main Thread] Starting server" httpd = make_server('' 80 server) print "[Main Thread] Server started" server_ready.set()  httpd.serve_forever() browser_thread.join()  
from twisted.internet.protocol import Protocol Factory from twisted.internet import reactor  class MultiEcho(Protocol):     def connectionMade(self):         self.factory.echoers.append(self)     def dataReceived(self data):         for echoer in self.factory.echoers:             echoer.transport.write(data)     def connectionLost(self reason):         self.factory.echoers.remove(self)  class MultiEchoFactory(Factory):     protocol = MultiEcho     def __init__(self):         self.echoers = []  reactor.listenTCP(4321 MultiEchoFactory()) reactor.run()  
__str__ print L [1 2] L ['1 2'] print 
//td[text() = 'Header1']/ancestor::table[1]  
__new__ def makeLimitedInt(minimum maximum default):     class LimitedInt(int):         def __new__(cls x= default *args **kwargs):             instance= int.__new__(cls x *args **kwargs)             if not minimum&lt;=instance&lt;=maximum:                 raise ValueError('Value outside LimitedInt range')             return instance     return LimitedInt  
&gt;&gt;&gt; import subprocess &gt;&gt;&gt; p = subprocess.Popen("ls" shell=True) &gt;&gt;&gt; p.pid 4136 &gt;&gt;&gt;  
SortedTagManager Manager notes users Count('notes' distinct=True)  
bools = [True True False True True False True]  print ''.join(chr(ord('A') + i) if b else ' ' for i b in enumerate(bools))  
if not Found:     return "Not Found"  GetImage os.path.join(os.getcwd()"Images"name) Find def Find(name):     fname = os.path.join(os.getcwd() "Images" name + '.bmp')     image = Image.open(fname)     imagebbox = image.getbbox()     screen = ImageGrab.grab()     YLimit =  screen.getbbox()[3] - imagebbox[3]     XLimit = screen.getbbox()[2] - imagebbox[2]     image = image.convert("L")     Screen = screen.convert("L")     Screen.load()     image.load()     image = image.getdata()     for y in range(0 YLimit):         for x in range(0 XLimit):             BoxCoordinates = x y x+imagebbox[2] y+imagebbox[3]             ScreenGrab = screen.crop(BoxCoordinates)             ScreenGrab = ScreenGrab.getdata()             if image == ScreenGrab:                 return x y     # returns None implicitly  
y y y = ''  y str y self.y = t1.__init__(x) self.y = t1(x) 
msvcrt.printf(b"%s" string)  sprintf s = ctypes.create_string_buffer(100)   #must be large enough!! msvcrt.sprintf(s b'%s' b'Hello World!') val = s.value  sprintf 
in if a in (789):     pass  
y = int("0x000000001" 16)  y = int(x 16)  y = str(int(x 16))  
if __name__ == '__main__':     Main()  
cursor.execute('INSERT INTO table_foo VALUES (%s %s)' (col1 col2))  cursor.execute('INSERT INTO "%s" VALUES (%s %s)' (tablename col1 col2))  sql = 'INSERT INTO TABLE "%s" VALUES (%%s %%s)' % (tablename) cursor.execute(sql (col1 col2))  
$ cd path/to/python/source $ ./configure $ make all ... wait for some time ... $ make test  # this runs python's test suite you can usually skip this $ ./python   # note the ./ runs the just installed python instead of system's python $ # note: do not run make install yet or you will override system's python see below  $ cd path/to/python/source/ $ ./configure --prefix=/where/you/want/to/install/it $ make all ... wait for some time ... $ make test  # this runs python's test suite you can usually skip this $ make install  
cProfile str.__mod__ __getitem__ map[0][i] 
.recv int Packet[9] Packet[13] Packet int (int)(720000+armcontrolpacket-&gt;dof0_rot*1000) import struct f = '&gt;x4bx11i' values = struct.unpack(f packet)  f values 
.//a[text()='Example'] tree.xpath(".//a[text()='Example']")[0].tag  
ForeignKey remote_side class Tag(Base):     __tablename__ = 'tag'      id = Column(Integer primary_key=True)     label = Column(String)     parent_id = Column(Integer ForeignKey('tag.id'))      parent = relationship('Tag' remote_side=[id])  backref='children' 
print else print cout def rec(w p baseString):     if w == p:         print baseString     else:         for ...  
res = [] for x in nums:   if x not in res:     res.append(x)  set res nums set(nums) res = [] aux = set() for x in nums:   if x not in aux:     res.append(x)     aux.add(x)  vars()['_[1]'] self '_[1]' 
send send 
import re id = re.search('(?&lt;=\?v\=)[\w-]+' 'http://www.youtube.com/watch?v=AIiMa2Fe-ZQ') print id.group(0)  &gt;&gt;&gt; re.search("[\w|-]" "|").group(0) '|'  
def local 
a[::[5]].shape # (10101)  a[::5] a[::[5]] [5] (1) a[::[5]] (10101) 
include pat1 pat2 exclude pat1 pat2 recursive-include dir pat1 pat2 recursive-exclude dir pat1 pat2 global-include pat1 pat2 global-exclude pat1 pat2 prune dir graft dir graft include empty.txt 
in or id = 1 or id = 2 or id = 3  from sqlalchemy import or_ filter(or_(User.name == 'ed' User.name == 'wendy'))  or in in 
colored = ColoredComic.create_from_Inked(pk=ink_id) colored.colored = True colored.save()  class ColoredComic(Comic):     colored = models.BooleanField(default=False)      @staticmethod     def create_from_Inked(**kwargs):         inked = InkedComic.objects.get(**kwargs)         if inked:             colored = ColoredComic.objects.create()             colored.__dict__.update(inked.__dict__)             colored.__dict__.update({'id': None}) # Remove pk field value             return colored         else:             # or throw an exception...             return None  
[HKEY_CLASSES_ROOT\Applications\python.exe\shell\open\command] @="\"C:\\Python25\\python.exe\" \"%1\" %*"  
if __name__ == "__main__":     print('Ah what a hard day of threading...')  
&gt;&gt;&gt; class Foo(object): ...     pass ...  &gt;&gt;&gt; a = Foo() &gt;&gt;&gt; a.__class__ == Foo True  "Foo" Foo 
{'TERM': 'linux' 'PWD': '/' 'UPSTART_INSTANCE': '' 'UPSTART_JOB': 'greeenlog' 'PATH': '/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin'}  # greeenlog  description     "I log stuff."  start on startup stop on shutdown  env DISPLAY=:0.0 env GTK_RC_FILES=/etc/gtk/gtkrc:/home/greeenguru/.gtkrc-1.2-gnome2  script     exec /usr/local/greeenlog/main.pyw &gt; /tmp/greeenlog.out 2&gt;&amp;1 end script  
class attrdict(dict):     def __init__(self **kwargs):         dict.__init__(self **kwargs)         self.__dict__ = self  attrdict dict **kargs a  a = attrdict(x=1 y=2)  attrdict.__init__(a {'x':1 'y':2})  dict attrdict.__init__ dict.__init__(self{'x':1 'y':2})  self a self ==  {'x':1 'y':2}  self.__dict__ a.__dict__ a.__dict__ = {'x':1 'y':2}   a.x a.y self.__dict__ = self  a.__dict__ = a  where a = {'x':1 'y':2}  a.x a.y 
Q QuerySet QuerySet.select_related() QuerySet.iterator() QuerySet.extra() IS NULL len() 
# the array passed into your function ax = NP.random.randint(10 99 20).reshape(5 4)  # just define a function to operate on some data fnx = lambda x : NP.sum(x)**2  # apply the function directly to the numpy array new_row = NP.apply_along_axis(func1d=fnx axis=0 arr=ax)  # 'append' the new values to the original array new_row = new_row.reshape(14) ax = NP.vstack((ax new_row))  
instance1=np.array([(67111L1.0)(104242L1.0)]dtype=np.dtype([('f0' '&lt;u4') ('f1' '&lt;f4')])) instance2=np.array([(67112L2.0)(104243L2.0)]dtype=np.dtype([('f0' '&lt;u4') ('f1' '&lt;f4')])) instances=[instance1instance2] Y=np.array(instances dtype = np.object)  np.array instances np.array Y print(Y.shape) # (2 2)  X=np.empty((len(instances)) dtype = np.object) print(X.shape) # (2)  (2 ) X[:] = instances  instances 
ContentType.objects.get_for_model() ContentType content_type 
import Queue import threading  def serialize(q):   """runs a serializer on queue q: put [-1]*4 on q to terminate."""   while True:     # get output-queue for result a callable its args and kwds     out_q tocall args kwds = q.get()     if out_q == -1:       return     result = tocall(*args **kwds)     out_q.put(result)  class WrapCall(object):   """Wraps a callable to serialize calls to it."""    def __init__(self inq ouq tocall):     self.inq = inq     self.ouq = ouq     self.tocall = tocall    def __call__(self *a **k):     self.inq.put((self.ouq self.tocall a k))     if self.ouq is None:       return None     return self.ouq.get()  class WrapObj(object):   """Wraps any object to serialize all calls to its methods."""    def __init__(self obj):     self._o = obj     self._q = Queue.Queue()     t = threading.Thread(target=serialize args=(self._q))     t.setDaemon(True)     t.start()     self.t = t    def __getattr__(self n):     """Wraps methods of self.w into an appropriate WrapCall instance."""     towrap = getattr(self._o n)     if not callable(towrap):       raise TypeError('Cannot wrap noncallable attribute %r (type: %s)'                        % (n type(towrap)))     q = Queue.Queue()     return WrapCall(self._q q towrap)    def WrapperWait(self):     """Return only when self.t has served all pending requests."""     q = Queue.Queue()     w = WrapCall(self.__q q lambda: None)     return w()  myobj = WrapObj(Command())  
related_name User related_name _set User.map_set.all() related_name=maps User User.map_set User.maps. current_user current_user.maps.all() Map current_user 
x = [] # a normal python list not np.array y = [...some list of files...]  for file in y:     ncfile = netcdf_file(file'r')     xFragment = ncfile.variables["varname"][:]     ncfile.close()     x.append(xFragment)  combined_array = concatenate(x axis=0)  
timedelta datetime from datetime import datetime timedelta  now = datetime.now() four_months_ago = now - timedelta(days=(4*365)/12)  &gt;&gt;&gt; january_first = datetime(2009 11) &gt;&gt;&gt; january_first - timedelta(days=(4*365)/12) datetime.datetime(2008 9 2 0 0)  
&gt;&gt;&gt; stuff = [1 2 3 4 5 6 7 8 9] &gt;&gt;&gt; &gt;&gt;&gt; n=len(stuff) &gt;&gt;&gt; &gt;&gt;&gt; [(stuff+stuff[:n/2-1])[i:i+n/2] for i in range(n)] [[1 2 3 4] [2 3 4 5] [3 4 5 6] [4 5 6 7] [5 6 7 8] [6 7 8 9] [7 8 9 1] [8 9 1 2] [9 1 2 3]] &gt;&gt;&gt;  [1 2 3 4] [2 3 4 5] ... [9 1 2 3]    
os.kill(p.pid) p.terminate() os.utime('websrv.py') os.kill(p.pid signal.SIGINT) Ctrl-C 
pattern = re.compile('|'.join(map(re.escape keys)) re.IGNORECASE) def format_term(term):     return '[%s](%s)' % (term term.lower())  converted_text = pattern.sub(lambda m: format_term(m.group(0)) text)  
sum(1 if meets_condition(x) else 0 for x in my_list) # or  sum(1 for x in my_list if meets_condition(x))  def count_matching(condition seq):     """Returns the amount of items in seq that return true from condition"""     return sum(1 for item in seq if condition(item))  count_matching(meets_condition my_list)  
from matplotlib import pylab as pl import numpy as np  data = np.random.rand(66) fig = pl.figure(1) fig.clf() ax = fig.add_subplot(111) img = ax.imshow(data interpolation='nearest' vmin=0.5 vmax=0.99) fig.colorbar(img)  pl.show()  
max_mood = max(self.mood_scale) min_mood = min(self.mood_scale)  
gc.get_referrers(obj) 
str = "[[000][001][110]]" strs = str.replace('[''').split(']') lists = [map(int s.replace(']''').split('')) for s in strs]  
settings.py INSTALLED APPS manage.py syncdb python manage.py syncdb 
if not isinstance(a basestring):     ...  
a[2] a.c def makestruct(name fields):     fields = fields.split()     import textwrap     template = textwrap.dedent("""\     class {name}(object):         __slots__ = {fields!r}         def __init__(self {args}):             {self_fields} = {args}         def __getitem__(self idx):              return getattr(self fields[idx])     """).format(         name=name         fields=fields         args=''.join(fields)          self_fields=''.join('self.' + f for f in fields))     d = {'fields': fields}     exec template in d     return d[name]  __getitem__ namedtuple.a  :  0.473686933517  namedtuple[0] :  0.180409193039 struct.a      :  0.180846214294 struct[0]     :  1.32191514969  __slots__ __slots__ 
stream.filter() stream.filter(['1234567'])  
&gt; 'Germany': [{"Luge - Men's Singles": 'Gold'}              {"Luge - Men's Singles": 'Silver'}              {"Luge - Women's Singles": 'Gold'}              {"Luge - Women's Singles": 'Bronze'}              {'Luge - Doubles': 'Bronze'}]  &gt; 'Germany': [{"Luge - Men's Singles": ['Gold' 'Silver']}              {"Luge - Women's Singles": ['Gold' 'Bronze'}              {'Luge - Doubles': 'Bronze'}]  [{'Germany': {"Luge - Men's Singles": 'Gold'}}  {'Germany': {"Luge - Men's Singles": 'Silver'}} {'Italy': {"Luge - Men's Singles": 'Bronze'}}]  ['Germany': {"Luge - Men's Singles": ['Gold' 'Silver']              "Luge - Women's Singles": ['Gold' 'Bronze']}  'Italy': {"Luge - Men's Singles": ['Bronze']}]  [{'Germany': {"Luge - Women's Singles": 'Gold'}} {'Austria': {"Luge - Women's Singles": 'Silver'}} {'Germany': {"Luge - Women's Singles": 'Bronze'}}]  ['Germany': {"Luge - Women's Singles": ['Gold' 'Bronze']}  'Austria': {"Luge - Women's Singles": ['Silver']}]  from collections import defaultdict  merged = defaultdict(lambda: defaultdict(list)) for d in list_of_dicts:     for k in d:         for competition medal in d[k].iteritems():             merged[k][competition].append(medal)  defaultdict(&lt;function &lt;lambda&gt; at 0x1907db0&gt;  {'Italy': defaultdict(&lt;type 'list'&gt; {"Luge - Men's Singles": ['Bronze']})   'Germany': defaultdict(&lt;type 'list'&gt; {"Luge - Men's Singles": ['Gold' 'Silver']})})  from collections import defaultdict  merged = defaultdict(lambda: defaultdict(list)) for L in listoflistsofdicts:   for d in L:     for k in d:       for competition medal in d[k].iteritems():           merged[k][competition].append(medal)   defaultdict(&lt;function &lt;lambda&gt; at 0x1904b70&gt;     {'Italy': defaultdict(&lt;type 'list'&gt; {"Luge - Men's Singles": ['Bronze']})      'Austria': defaultdict(&lt;type 'list'&gt; {'Luge - Doubles': ['Gold']                                             "Luge - Women's Singles": ['Silver']})      'Latvia': defaultdict(&lt;type 'list'&gt; {'Luge - Doubles': ['Silver']})      'Germany': defaultdict(&lt;type 'list'&gt; {'Luge - Doubles': ['Bronze']                                             "Luge - Men's Singles": ['Gold' 'Silver']                                             "Luge - Women's Singles": ['Gold' 'Bronze']})     })  
Account Domain Domain.accounts username: password os.system 
__init__.py  import mydir.utils  def get_hash(): return 1  __init__.py import mydir.utils 
import warnings  cdef extern from "Python.h":     char* __FILE__  cdef extern from "Python.h":     int __LINE__  def dowarn():     warnings.warn_explicit("a warning" category=UserWarning filename=__FILE__ lineno=__LINE__)  from distutils.core import setup from distutils.extension import Extension from Cython.Compiler.Main import default_options default_options['emit_linenums'] = True from Cython.Distutils import build_ext   ext_modules = [ Extension("warn" ["warn.pyx"]) ]  setup(         name = "warn"         cmdclass = {"build_ext": build_ext}         ext_modules = ext_modules )  #line __FILE__ __LINE__ 
from BeautifulSoup import BeautifulSoup  soup = BeautifulSoup(htmlSource)  urlopen f = urllib.urlopen("http://SOMEWHERE")  soup = BeautifulSoup(f)  
str print "Length: %s" % len(self.listOfThings)  % str.format print "Length: {0}".format(len(self.listOfThings))    
import foolib print foolib.__file__  sys 
143.252.249.141 8000 
5 # -*- coding: utf-8 -*-  
the_dict[akey][-1][1] # Original rollback code: for rlist in the_dict.itervalues():     if not rlist: continue     while rlist[-1][0] &gt; target_revno:         rlist.pop()  # New rollback code for revno in xrange(current_revno target_revno -1):     for rlist in delta_index[revno]:         assert rlist[-1][0] == revno         del rlist[-1] # faster than rlist.pop()     del delta_index[target_revno+1:]  import collections  class RevDict(collections.MutableMapping):      def __init__(self):         self.current_revno = 0         self.dict = {}         self.delta_index = [[]]      def __setitem__(self key value):         if key in self.dict:             rlist = self.dict[key]             last_revno = rlist[-1][0]             rtup = (self.current_revno value)             if last_revno == self.current_revno:                 rlist[-1] = rtup                 # delta_index already has an entry for this rlist             else:                 rlist.append(rtup)                 self.delta_index[self.current_revno].append(rlist)         else:             rlist = [(self.current_revno value)]             self.dict[key] = rlist             self.delta_index[self.current_revno].append(rlist)      def __getitem__(self key):         if not key in self.dict:             raise KeyError(key)         return self.dict[key][-1][1]      def new_revision(self):         self.current_revno += 1         self.delta_index.append([])      def roll_back(self target_revno):         assert 0 &lt;= target_revno &lt; self.current_revno         for revno in xrange(self.current_revno target_revno -1):             for rlist in self.delta_index[revno]:                 assert rlist[-1][0] == revno                 del rlist[-1]         del self.delta_index[target_revno+1:]         self.current_revno = target_revno      def __delitem__(self key):         raise TypeError("RevDict doesn't do del")      def keys(self):         return self.dict.keys()      def __contains__(self key):         return key in self.dict      def iteritems(self):         for key rlist in self.dict.iteritems():             yield key rlist[-1][1]      def __len__(self):         return len(self.dict)      def __iter__(self):         return self.dict.iterkeys()  
for row in iter(cursor.fetchone None):     process(row)  iter() while True:     row = cursor.fetchone()     if row is None:         break     process(row)  for row in cursor:     process(row)  
from itertools import permutations  def is_solution(seq):     return all(int(seq[:i]) % i == 0 for i in range(2 9))  for p in permutations('123456789'):     seq = ''.join(p)     if is_solution(seq):         print(seq)  
processed processed = [] processed_lock = threading.Lock()  def consumer():     while True:         with processed_lock.acquire():             fileInList = file in processed         if fileInList:             # ... et cetera  # do stuff here multiprocessing threading 
Welcome to Scala version 2.8.0.r21561-b20100414020114 (Java HotSpot(TM) Client VM Java 1.6.0_18). Type in expressions to have them evaluated. Type :help for more information.  scala&gt; val xs = 0 to 9 xs: scala.collection.immutable.Range.Inclusive with scala.collection.immutable.Range.ByOne = Range(0 1 2 3 4 5 6 7 8 9)  scala&gt; val ys = List.range(010) ys: List[Int] = List(0 1 2 3 4 5 6 7 8 9)  scala&gt; val zs = Array.range(010) zs: Array[Int] = Array(0 1 2 3 4 5 6 7 8 9)  scala&gt; (xsys).zipped.map{ _+_ } res1: scala.collection.immutable.IndexedSeq[Int] = Vector(0 2 4 6 8 10 12 14 16 18)  scala&gt; (zsysxs).zipped.map{ _+_+_ } res2: Array[Int] = Array(0 3 6 9 12 15 18 21 24 27)  scala&gt;  
from sys import stdin stdout 
munch &lt;filename&gt;  munch --name &lt;filename&gt;  &lt;filename&gt; parse_args optparse 
(cmd0 &lt;/dev/null; cmd1) | cmd2  
anydbm dumbdbm iteritems $ /usr/bin/python2.5 Python 2.5.4 (r254:67916 Feb 11 2010 00:50:55)  [GCC 4.2.1 (Apple Inc. build 5646)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import anydbm &gt;&gt;&gt; db = anydbm.open('cache' 'c') &gt;&gt;&gt; dir(db) ['close' 'get' 'has_key' 'keys' 'setdefault']  $ /usr/local/bin/python2.5 Python 2.5.4 (r254:67917 Dec 23 2008 14:57:27)  [GCC 4.0.1 (Apple Computer Inc. build 5363)] on darwin Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import anydbm &gt;&gt;&gt; db = anydbm.open('cache2' 'c') &gt;&gt;&gt; dir(db) ['__cmp__' '__contains__' '__del__' '__delitem__' '__doc__' '__getitem__' '__init__' '__iter__' '__len__' '__module__' '__repr__' '__setitem__' '_checkCursor' '_checkOpen' '_closeCursors' '_cursor_refs' '_gen_cref_cleaner' '_make_iter_cursor' 'clear' 'close' 'db' 'dbc' 'first' 'get' 'has_key' 'isOpen' 'items' 'iteritems' 'iterkeys' 'itervalues' 'keys' 'last' 'next' 'pop' 'popitem' 'previous' 'saved_dbc_key' 'set_location' 'setdefault' 'sync' 'update' 'values'] &gt;&gt;&gt; db.iteritems() &lt;generator object at 0x481760&gt; &gt;&gt;&gt; db.__module__ 'bsddb'  
id_a 
python setup.py build python setup.py install  
a = array([11-1-2-345]) asign = np.sign(a) signchange = ((np.roll(asign 1) - asign) != 0).astype(int) print signchange array([0 0 1 0 0 1 0])  signchange[0] = 0  sz = asign == 0 while sz.any():     asign[sz] = np.roll(asign 1)[sz]     sz = asign == 0  
fig.legend((plot1plot2) (lab1lab2) 'right')  
__iter__ __iter__ return iter(self._plurks) __iter__ __iter__ def __iter__(self):     for item in self._plurks:         yield process(item)  
StringIO StringIO io 
cdef cpdef 
__import__('%s.handlers' % x.__name__)  logging x.handlers 
inspect &gt;&gt;&gt; import inspect &gt;&gt;&gt; def f1(): f2() ...  &gt;&gt;&gt; def f2(): ...   curframe = inspect.currentframe() ...   calframe = inspect.getouterframes(curframe 2) ...   print('caller name:' calframe[1][3]) ...  &gt;&gt;&gt; f1() caller name: f1  
int def is_new_style(cls):     return hasattr(cls '__class__') \            and \            ('__dict__' in dir(cls) or hasattr(cls '__slots__'))   class new_style(object):     pass  class old_style():     pass  print is_new_style(int) print is_new_style(new_style) print is_new_style(old_style)  False True False  def is_new_style(cls):     return str(cls).startswith('&lt;class ')  
print sys.stdout StringIO.StringIO .getValue StringIO sys.stdout logging 
import re UNIQ='_UNIQUE_STRING_' class MarkPlaceholders(dict):     def __getitem__(self key):         return UNIQ+('(?P&lt;%s&gt;.*?)'%key)+UNIQ  def format_to_re(format):     parts = (format % MarkPlaceholders()).split(UNIQ)     for i in range(0 len(parts) 2):         parts[i] = re.escape(parts[i])     return ''.join(parts)  &gt;&gt;&gt; layout = '%(group)s/foo-%(locale)s/file.txt' &gt;&gt;&gt; print format_to_re(layout) (?P&lt;group&gt;.*?)\/foo\-(?P&lt;locale&gt;.*?)\/file\.txt &gt;&gt;&gt; pattern = re.compile(format_to_re(layout)) &gt;&gt;&gt; print pattern.match('something/foo-en-gb/file.txt').groupdict() {'locale': 'en-gb' 'group': 'something'}  
class Sample(object):   _count = 0    def __init__(self):     Sample._count += 1    @property   def count(self):     return Sample._count  a.py &gt;&gt;&gt; import a &gt;&gt;&gt; x = a.Sample() &gt;&gt;&gt; print x.count 1 &gt;&gt;&gt; y = a.Sample() &gt;&gt;&gt; print x.count 2  
# Safe since everything in the namespace begins with 'Q' from PyQt4.QtGui import *  class MyMessageBox(QMessageBox):      # This is a much better way to extend __init__     def __init__(self *args **kwargs):                     super(MyMessageBox self).__init__(*args **kwargs)         # Anything else you want goes below      # We only need to extend resizeEvent not every event.     def resizeEvent(self event):          result = super(MyMessageBox self).resizeEvent(event)          details_box = self.findChild(QTextEdit)         # 'is not' is better style than '!=' for None         if details_box is not None:             details_box.setFixedSize(details_box.sizeHint())          return result  
TestController.index Test TestController im_func Test __call__ TestController class Test(object):     def __call__( self f):         def wrapper(self *args **kwargs):             # anything in the old Test.__call__ goes here.             return f(self *args **kwargs)         return wrapper  class TestController(BaseController):     @Test()     def index(self):         return 'hello world'  @decorator def foo(...):  def foo(...):     ... foo = decorator(foo)      @Test     def index(self):  Test index index TestController class TestController(BaseController)     def index(self):         ...     index = Test(index)  Test.__call__ TestController.index tc TestController tc.index() tc.index.__call__() Test.__call__(tc.index) Test.__call__ tc Test.index tc.index im_func Test.__call__ TestController.index class Test(object):     def __call__( self f):         # if done properly __call__ will get invoked when the decorated method          # is defined not when it's invoked         print 'Test.__call__'         def wrapper(self *args **kwargs):             # wrapper will get invoked instead of the decorated method             print 'wrapper in Test.__call__'             return f(self *args **kwargs)         return wrapper  TestController.index class TestController(BaseController):     def index(self):         ...     index = Test()(index) # note: Test.__call__ is invoked here.     # 'index' is now 'wrapper' from Test.__call__  tc = TestController tc.index() # wrapper from Test.__call__ is invoked here  TestController.index tc.index() TestController.index(tc) tc 
trap "echo killing childs; pkill -P $$"  EXIT  
def get_web_content(url):     # Extracted code     url_handler = urllib2.urlopen(url)     content = url_handler.read()     url_handler.close()     return content  def write_to_file(content filename tmpdir):     # Extracted code     file_handler = open(os.path.join(tempdir filename) "w")     file_handler.write(content)     file_handler.close()  def download_distribution(url tempdir):     # Original code after extractions     distribution_contents = get_web_content(url)     filename = get_file_name(url)     write_to_file(distribution_contents filename tmpdir)     return True  import module_I_want_to_test  def mock_web_content(url):     return """Some fake content useful for testing""" def mock_write_to_file(content filename tmpdir):     # In this case do nothing as we don't do filesystem meddling while unit testing     pass  module_I_want_to_test.get_web_content = mock_web_content module_I_want_to_test.write_to_file = mock_write_to_file  class SomeTests(unittest.Testcase):     # And so on...  
lambda filter &gt;&gt;&gt; a = [[1 2 3] [4 5 6]] &gt;&gt;&gt; [item for item in a if sum(item) &gt; 10] [[4 5 6]]  &gt;&gt;&gt; [(x y z) for x y z in a if (x + y) ** z &gt; 30] [(4 5 6)]  lambda (x y z): x + y + z x y z def def f((x y z)): return x + y + z def f(item): x y z = item; return x + y + z lambda item: item[0] + item[1] + item[2] 
# if there's no user set just setup a blank instance c.current_user = auth.get_user(User())   def get_user(default):     """Return the user object from the `repoze.who` Metadata Plugin      :param default: default item to send back if user not logged in      Since we might not be logged in and template choke on trying to output     None/empty data we can pass in a blank User object to get back as a default     and the templates should work ok with default empty values on that      """     if 'repoze.who.identity' in request.environ:         return request.environ['repoze.who.identity']['user']     else:         return default  
c.setFont('TestFont') c.drawString(11'test data here')  setFont drawString 
onerror() pathutils.py def onerror(func path exc_info):     """     Error handler for ``shutil.rmtree``.      If the error is due to an access error (read only file)     it attempts to add write permission and then retries.      If the error is for another reason it re-raises the error.      Usage : ``shutil.rmtree(path onerror=onerror)``     """     import stat     if not os.access(path os.W_OK):         # Is the error an access error ?         os.chmod(path stat.S_IWUSR)         func(path)     else:         raise  
class PermissiveDict(dict):     default = None      def __getitem__(self item):         try:             return dict.__getitem__(self item)         except KeyError:             return self.default  def exec_with_default(code default=None):     ns = PermissiveDict()     ns.default = default     exec code in ns     return ns  
import maya.cmds  def myRotateCallback():     print 'do something'  maya.cmds.scriptJob( attributeChange=['pCube1.rotateX' myRotateCallback] )  
shutil.copystat pyexiv2 python-pyexiv2 pyexiv2 import os import time import Image import ExifTags   # This is provided by PIL img=Image.open(filename'r')  _getexif() d = dict((ExifTags.TAGS[k] v) for k v in img._getexif().items()) print(d['DateTimeOriginal'])  dateutils timestamp=time.strptime(d['DateTimeOriginal']"%Y:%m:%d %H:%M:%S")  w h = img.size widthheight = 800600 if h &gt; w: widthheight = heightwidth  os.utime filename = filename + "-800x600.jpg" shunken = img.resize((width height) Image.ANTIALIAS) shunken.save(filename) st = os.stat(filename) os.utime(filename(st.st_atimetime.mktime(timestamp)))  
setattr(classname "propertyname" value) classname.property = value 
'\t' '\t\t' 'abc\tabc' 'abc' 'abc\tabc\tabc' 'abc' 'abc' 
for for for 
^ ** (288200/393000)^n  288200/393000  0 import math  def p(n):     a = 393000.0 # &lt;-- notice the .0      b = 288200.0     c = b / a     return a * ( c**n * math.exp(-c) )/ math.factorial(n)  print p(3)  12406.890756  
class BaseView {    public function display(&amp; $data array $columnNames) {       foreach($data as $row) {          foreach($columnNames as $c) {             echo $row-&gt;$c; // or $row[$c] or whatever your data is I'm assuming objects          }       echo "\n";    } }  class UserView extends BaseView{     public function display(&amp; $data) {         parent::display($data array('Name' 'Address');     } }  echo '&lt;a href="user/'$record['id']'"&gt;'$record['name']'&lt;/a&gt;';  
// create models QStandardItemModel* model = new (QStandardItemModel); QSortFilterProxyModel* proxyModel = new QSortFilterProxyModel(this); proxyModel-&gt;setSourceModel(model);  // set model ui-&gt;treeView-&gt;setModel(proxyModel);    ui-&gt;treeView-&gt;setSortingEnabled(true);  // generate items QStandardItem* parentItem0 = model-&gt;invisibleRootItem(); QModelIndex index = parentItem0-&gt;index(); for (int i = 0; i &lt; 4; ++i) {     QStandardItem* item = new QStandardItem(QString("new item %0").arg(i));     parentItem0-&gt;appendRow(item);     parentItem0 = item;      // expand items using proxyModel-&gt;mapFromSource      ui-&gt;treeView-&gt;expand(proxyModel-&gt;mapFromSource(item-&gt;index()));     // line below doesn't work for you     //ui-&gt;treeView-&gt;expand(item-&gt;index()); }  
len 
s = "0123456789"*100 # test string import re print re.sub("(.{64})" "\\1\n" s 0 re.DOTALL)  re.DOTALL s/ 
&gt;&gt;&gt; from babel import Locale &gt;&gt;&gt; locale = Locale('ja' 'JP') &gt;&gt;&gt; print locale.display_name ??? (??)  
re re.sub("(?s).*?(cat|dog|rat)" "\\1" input_text 1)  rex= re.compile("(?s).*?(cat|dog|rat)") result= rex.sub("\\1" input_text 1)  .*? (?s) &gt;&gt;&gt; input_text= "I have a dog and a cat" &gt;&gt;&gt; re.sub(".*?(cat|dog|rat)" "\\1" input_text 1) 'dog and a cat'  &gt;&gt;&gt; re.sub("(?s).*?(cat|dog|rat)" "\\1" input_text 1) 'I have no animals!'  &gt;&gt;&gt; input_text= "This is irrational" &gt;&gt;&gt; re.sub("(?s).*?(cat|dog|rat)" "\\1" input_text 1) 'rational'  &gt;&gt;&gt; re.sub(r"(?s).*?\b(cat|dog|rat)\b" "\\1" input_text 1) 'This is irrational'  
self.timer = QtCore.QTimer(self) self.timer.singleShot(1 self.printRowCount)  
fo.flush()  os.fsync()  
$ sudo chown -R me:me virtualenvdir $ sudo chmod -R a+rX virtualenvdir  me virtualenvdir 
from django.db.models import Count  class Model(models.Model):     score = models.IntegerField()     ...      def ranking(self):         aggregate = Model.objects.filter(score__lt=self.score).aggregate(ranking=Count('score'))         return aggregate['ranking'] + 1  print Model.objects.get(pk=1).ranking  
from PIL import Image import numpy as np  w h = 512 512 data = np.zeros((h w 3) dtype=np.uint8) data[0:256 0:256] = [255 0 0] # red patch in upper left img = Image.fromarray(data 'RGB') img.save('my.png') img.show()  
print tuple(reversed(foo_t)) list tuple print ' '.join(str(x) for x in reversed(foo_t))  foo_t[::-1] reversed 
def partition(lst n):     division = len(lst) / float(n)     return [ lst[int(round(division * i)): int(round(division * (i + 1)))] for i in xrange(n) ]  &gt;&gt;&gt; partition([12345]5) [[1] [2] [3] [4] [5]] &gt;&gt;&gt; partition([12345]2) [[1 2 3] [4 5]] &gt;&gt;&gt; partition([12345]3) [[1 2] [3 4] [5]] &gt;&gt;&gt; partition(range(105) 10) [[0 1 2 3 4 5 6 7 8 9 10] [11 12 13 14 15 16 17 18 19 20] [21 22 23 24 25 26 27 28 29 30 31] [32 33 34 35 36 37 38 39 40 41] [42 43 44 45 46 47 48 49 50 51 52] [53 54 55 56 57 58 59 60 61 62] [63 64 65 66 67 68 69 70 71 72 73] [74 75 76 77 78 79 80 81 82 83] [84 85 86 87 88 89 90 91 92 93 94] [95 96 97 98 99 100 101 102 103 104]]  def partition(lst n):     division = len(lst) / n     return [lst[round(division * i):round(division * (i + 1))] for i in range(n)]  
sweden datetime sweden datetime datetime datetime datetime 
def repeatable(func):     func.times = new.instancemethod(times func func.__class__)     return func  @decorator def func(...):     ...  def func(...):     .... func = decorator(func)  
finish_time = datetime.datetime.now() + datetime.timedelta(hours=6) while datetime.datetime.now() &lt; finish_time:     do_something()     sleep_for_a_bit()  
coding: # coding: utf8 print u"åäö"  C:\&gt;chcp Active code page: 437  C:\&gt;x åäö  
\n 
import random  def die_roller(throws):     """generates throws rolls of a die"""     for _ in xrange(throws):         yield random.randint(1 6)  roller = die_roller(10) print type(roller)      # =&gt; &lt;type 'generator'&gt; print list(roller)      # =&gt; [6 6 3 1 6 3 1 5 4 4] print sum(roller)       # roller was exhausted generates null list thus 0 sum  big_roller = die_roller(10**5) print sum(big_roller)   # =&gt; 3500238  
urlpatterns = patterns('tlkmusic.apps.tlkmusic_base.views'     # (r'^$' index)     url(r'^(?P&lt;object_type&gt;\w+)/$' music_object_list name='music_object_list')     url(r'^(?P&lt;object_type&gt;\w+)/(?P&lt;starts_with&gt;\w)/$' music_object_list name='music_object_list_x')     url(r'^(?P&lt;object_type&gt;\w+)/(?P&lt;object_id&gt;\d+)/$' music_object_detail name='music_object_detail')  )  {% url music_object_list_x object_type starts_with %} *  music_object_list music_object_list def music_object_list(request object_type starts_with=None):      if object_type == 'artists':          return artist_list(request starts_with=starts_with)      elif object_type == 'albums':          return album_list(request starts_with=starts_with)      ...  django.views.generic.list_detail.object_list object_type extra_context extra_context = {'object_type': 'songs' ...}  {% url music_object_list_x object_typestarts_with %}  
def install_site():     "Add the virtualhost file to apache"     require('release' provided_by=[deploy setup])      with cd('%(path)s/releases/%(release)s/%(release)s' % env):         sudo('cp %(project_name)s/%(virtualhost_path)s/%(project_domain)s '                  '/etc/apache2/sites-available/%(project_domain)s' % env)     with cd('/etc/apache2/sites-available'):          sudo('a2ensite %(project_domain)s' % env)   
from Tkinter import *  root = Tk() frame = Frame(root) frame.configure(width=300height=300)  def onmotion(event):     root.title("Mouse at %s%s"%(event.x event.y))  frame.bind("&lt;Motion&gt;" onmotion) frame.pack() root.title("Event test") root.mainloop()  from Tkinter import *  class MyFrame(Frame):     def __init__(self root):         Frame.__init__(self root)         self.parent = root         self.configure(width=300height=300)         self.pack()         self.bind("&lt;Motion&gt;" self.onmotion)      def onmotion(self event):         self.parent.title("Mouse at %s%s"%(event.x event.y))  root = Tk() frame = MyFrame(root) root.title("Event test") root.mainloop()  
A: row 0 column 0 sticky=W B: row 0 column 1 sticky=W C: row 1 column 0 span 3 grid_columnconfigure(2 weight=4)  
from sqlalchemy import * from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker from pyuca import Collator  metadata = MetaData() Base = declarative_base(metadata=metadata)  class Item(Base):     __tablename__ = 'Item'     id = Column(Integer primary_key=True)     value = Column(String nullable=False)  collator = Collator('allkeys.txt')  def collate_unicode(value1 value2):     return cmp(collator.sort_key(value1) collator.sort_key(value2))  engine = create_engine('sqlite://') engine.raw_connection().create_collation('unicode' collate_unicode) metadata.create_all(engine) session = sessionmaker(engine)()  for word in [u"?ambr" u"?ar" u"car'" u"carin'" u"?e" u"?ef'"              u"centjar'" u"centr'" u"cerb'" u"cert'" u"?es'" u"ceter'"]:     item = Item(value=word)     session.add(item)     session.commit()  for item in session.query(Item).order_by(collate(Item.value 'unicode')):     print item.value  
python2.5 manage.py runserver python2.6 manage.py runserver 
sudo ln -s `which virtualenv-2.6` /opt/local/bin/virtualenv   rake firefox rake firefox_xpi 
os.path.normpath() os.path.join() 
decimal float_to_decimal Decimal decimal.Decimal(str(f)) str(f) float_to_decimal f import decimal  def float_to_decimal(f):     # http://docs.python.org/library/decimal.html#decimal-faq     "Convert a floating point number to a Decimal with no loss of information"     n d = f.as_integer_ratio()     numerator denominator = decimal.Decimal(n) decimal.Decimal(d)     ctx = decimal.Context(prec=60)     result = ctx.divide(numerator denominator)     while ctx.flags[decimal.Inexact]:         ctx.flags[decimal.Inexact] = False         ctx.prec *= 2         result = ctx.divide(numerator denominator)     return result   def f(number sigfig):     # http://stackoverflow.com/questions/2663612/nicely-representing-a-floating-point-number-in-python/2663623#2663623     assert(sigfig&gt;0)     try:         d=decimal.Decimal(number)     except TypeError:         d=float_to_decimal(float(number))     signdigitsexponent=d.as_tuple()     if len(digits) &lt; sigfig:         digits = list(digits)         digits.extend([0] * (sigfig - len(digits)))         shift=d.adjusted()     result=int(''.join(map(strdigits[:sigfig])))     # Round the result     if len(digits)&gt;sigfig and digits[sigfig]&gt;=5: result+=1     result=list(str(result))     # Rounding can change the length of result     # If so adjust shift     shift+=len(result)-sigfig     # reset len of result to sigfig     result=result[:sigfig]     if shift &gt;= sigfig-1:         # Tack more zeros on the end         result+=['0']*(shift-sigfig+1)     elif 0&lt;=shift:         # Place the decimal point in between digits         result.insert(shift+1'.')     else:         # Tack zeros on the front         assert(shift&lt;0)         result=['0.']+['0']*(-shift-1)+result     if sign:         result.insert(0'-')     return ''.join(result)  if __name__=='__main__':     tests=[         (0.1 1 '0.1')         (0.0000000000368568 2'0.000000000037')                    (0.00000000000000000000368568 2'0.0000000000000000000037')         (756867 3 '757000')         (-756867 3 '-757000')         (-756867 1 '-800000')         (0.09999999999991'0.1')         (0.009999999999991'0.01')         (0.009999999999992'0.010')         (0.00992'0.0099')                  (1.9999999999991'2')         (1.9999999999992'2.0')                    (34500000000000000000000 17 '34500000000000000000000')         ('34500000000000000000000' 17 '34500000000000000000000')           (756867 7 '756867.0')         ]      for numbersigfiganswer in tests:         try:             result=f(numbersigfig)             assert(result==answer)             print(result)         except AssertionError:             print('Error'numbersigfigresultanswer)  
bge.logic.globalDict['mysubdictionaryName'] = { 'namestring' : False}  bge.globalDict['mysubdictionaryName'] = myValue myObject = bge.logic.getCurrentController().owner  myObject['myproperty_named_has_run_before'] = True  
import re my_str = "abcdefgfaabbbffbbbbbbfgbb" len(max(re.compile("(b+b)*").findall(my_str))) #changed the regex from (b+b) to (b+b)* # max([len(i) for i in re.compile("(b+b)").findall(my_str)]) also works  x=timeit.Timer(stmt='import itertools;my_str = "abcdefgfaabbbffbbbbbbfgbb";max(len(list(y)) for (cy) in itertools.groupby(my_str) if c=="b")') x.timeit() 22.759046077728271  x=timeit.Timer(stmt='import re;my_str = "abcdefgfaabbbffbbbbbbfgbb";len(max(re.compile("(b+b)").findall(my_str)))') x.timeit() 8.4770550727844238  
&lt;ifmodule&gt; .htaccess DirectoryIndex index.py RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ /index.py/$1  [L]  
os.path.abspath assert python -O STATIC_PATH STATIC_PATH /foo/bar /foo/barbie/ STATIC_PATH 
range(-2 2) dir(object) object.&lt;TAB&gt; help(anything) %timeit func1() %timeit func2() &gt;&gt;&gt; a a 
csv delimiter='""' converters import re import numpy as np  fieldFilter = re.compile(r'^"?([^"]*)"?$') def filterTheField(s):     m = fieldFilter.match(s.strip())     if m:         return float(m.group(1))     else:         return 0.0 # or whatever default  #...  # Yes sorry you have to know the number of columns since the NumPy docs # don't say you can specify a default converter for all columns. convs = dict((col filterTheField) for col in range(numColumns)) data = np.genfromtxt(csvfile dtype=None delimiter='' names=True      converters=convs)  np.genfromtxt() csv.csvreader reader = csv.csvreader(csvfile) result = np.array([[float(col) for col in row] for row in reader]) # BTW column headings are in reader.fieldnames at this point.  convs genfromtxt csv.csvreader reader = csv.csvreader(csvfile) converters = [datetime float int float] result = np.array([[conv(col) for col conv in zip(row converters)]      for row in reader]) # BTW column headings are in reader.fieldnames at this point.  magic reader = csv.csvreader(csvfile) result = np.array([[magic(col) for col in row] for row in reader])  magic() def magic(s):     if '/' in s:         return datetime(s)     elif '.' in s:         return float(s)     else:         return int(s)  numpy.fromstring() csvreader csv 
=~ =~ $_ s/foo/bar/; $_ =~ s/foo/bar/; $var =~ s/foo/bar/; $var foo bar for $var for( $var ) {     s/foo/bar/;     s/fizz/buzz/;     s/whop/bop-a-loo-bop/;     s/parkay/butter/;     s/cow/burger/; }  my $foo = transform(     'abcd' =&gt;     [ 'a'  'b'    ]      [ 'bb' 'c'    ]     [ 'cc' 'd'    ]     [ 'dd' 'DONE' ] );  sub transform {     my $var = shift;     for (@_ ) {         my ($old $new) = @$_;         $var =~ s/$old/$new/;     }      return $var; }  my $foo = 'abcd';  transform_in_place(     $foo =&gt;     [ 'a'  'b'    ]      [ 'bb' 'c'    ]     [ 'cc' 'd'    ]     [ 'dd' 'DONE' ] );  print "$foo\n";  sub transform_in_place {     for my $i (1..$#_ ) {         my ($old $new) = @{$_[$i]};         $_[0] =~ s/$old/$new/;     } }  
for textarea in soup.findAll('textarea'):     contents = BeautifulSoup.BeautifulSoup(textarea.contents[0]).renderContents()     textarea.replaceWith(contents)  
re.findall("%([^%]+)%" text)  
'rb' 
tuple([x1 y1 x2 y2] for x1 in range(0 8) for x2 in range(0 8) for y1 in range(0 8) for y2 in range(0 8))  import itertools a = [range(08)]*4 print tuple(itertools.product(*a))  tuple(itertools.imap(list itertools.product(*a))) 
from xml.etree.ElementTree import ElementTree tree = ElementTree() tree.parse('in.xml')  foos = tree.findall('foo') for foo in foos:   bars = foo.findall('bar')   for bar in bars:     foo.remove(bar)  tree.write('out.xml')  
|| or None def merge(l1 l2):   i = 0   while l1[i] != None or l2[i] != None:     pass  != None is not None while l1[i] is not None or l2[i] is not None:  
fileObject.writerow(current_list)  writerows writerows 
&gt;&gt;&gt; Image.VERSION   '1.1.7'    .convert('RGB') 
def blah(a="default value")  def blah(a=None):   if a is None     a = []  
-u 
cp1251 cp866 &gt;&gt;&gt; import sys &gt;&gt;&gt; print sys.stdout.encoding cp866 &gt;&gt;&gt; import locale &gt;&gt;&gt; print locale.getdefaultlocale() ('ru_RU' 'cp1251')  &gt;&gt;&gt; try: ...     os.remove('abc.file') ... except WindowsError err: ...     print err.args[1].decode(locale.getdefaultlocale()[1]) ...  exc_info=True logging.error() 
builder = gtk.Builder() builder.add_from_string(string len(string)) builder.connect_signals(anobject) builder.get_object(name)  #!/usr/bin/env python  import gtk  class  QueryRelevanceEvaluationApp:      def __init__(self):         filename = "foo.glade"         builder = gtk.Builder()         builder.add_from_file(filename)         builder.connect_signals(self)      def on_buttonGenerate_clicked(self widget):         print "You clicked the button"  app = QueryRelevanceEvaluationApp() gtk.main()  
__and__ &amp; and and 
os.path.expanduser(path) ~ ~user ~ pwd ~user ~user os.path.expanduser('~user')  
sorted(data key=lambda item: (int(item.partition(' ')[0])                                if item[0].isdigit() else float('inf') item))  cmp sorted data = set(['booklet' '4 sheets' '48 sheets' '12 sheets']) r = sorted(data key=lambda item: (int(item.partition(' ')[0])                                    if item[0].isdigit() else float('inf') item)) print '\n'.join(r)  
/home/foo/Maildir/new mailbox.Maildir new cur new cur close() flush() 
class API():     api_url = 'http://api.bitbucket.org/1.0/'      def __init__(self username password proxy=None):         encodedstring = base64.encodestring("%s:%s" % (username password))[:-1]         self._auth = "Basic %s" % encodedstring         self._opener = self._create_opener(proxy)      def _create_opener(self proxy=None):         cj = cookielib.LWPCookieJar()         cookie_handler = urllib2.HTTPCookieProcessor(cj)         if proxy:             proxy_handler = urllib2.ProxyHandler(proxy)             opener = urllib2.build_opener(cookie_handler proxy_handler)         else:             opener = urllib2.build_opener(cookie_handler)         return opener      def get_issues(self username repository):         query_url = self.api_url + 'repositories/%s/%s/issues/' % (username repository)         try:             req = urllib2.Request(query_url None {"Authorization": self._auth })             handler = self._opener.open(req)         except urllib2.HTTPError e:             print e.headers             raise e         return json.load(handler)  
try:     foo() except (KeyboardInterrupt SystemExit):     raise except:     bar()  
settings.py apps/auth/urls.py apps/auth/templates/auth/ project/ settings.INSTALLED_APPS project/ apps.notes INSTALLED_APPS INSTALLED_APPS 
function normpath($path) {     if (empty($path))         return '.';      if (strpos($path '/') === 0)         $initial_slashes = true;     else         $initial_slashes = false;     if (         ($initial_slashes) &amp;&amp;         (strpos($path '//') === 0) &amp;&amp;         (strpos($path '///') === false)     )         $initial_slashes = 2;     $initial_slashes = (int) $initial_slashes;      $comps = explode('/' $path);     $new_comps = array();     foreach ($comps as $comp)     {         if (in_array($comp array('' '.')))             continue;         if (             ($comp != '..') ||             (!$initial_slashes &amp;&amp; !$new_comps) ||             ($new_comps &amp;&amp; (end($new_comps) == '..'))         )             array_push($new_comps $comp);         elseif ($new_comps)             array_pop($new_comps);     }     $comps = $new_comps;     $path = implode('/' $comps);     if ($initial_slashes)         $path = str_repeat('/' $initial_slashes) . $path;     if ($path)         return $path;     else         return '.'; }  
import subprocess proc=subprocess.Popen(['tac''-'] shell=True stdin=subprocess.PIPE                       stdout=subprocess.PIPE ) output_=proc.communicate('one\ntwo\nthree\n') print output  tac - tac communicate communicate 
print 
f .read(blocksize) storbinary def storbinary(self cmd fp blocksize=8192 callback=None):     """Store a file in binary mode.  A new port is created for you.      Args:       cmd: A STOR command.       fp: A file-like object with a read(num_bytes) method.       blocksize: The maximum data size to read from fp and send over                  the connection at once.  [default: 8192]       callback: An optional single parameter callable that is called on                 on each block of data after it is sent.  [default: None]      Returns:       The response code.     """     self.voidcmd('TYPE I')     conn = self.transfercmd(cmd)     while 1:         buf = fp.read(blocksize)         if not buf: break         conn.sendall(buf)         if callback: callback(buf)     conn.close()     return self.voidresp()  read(n) 
twisted.internet.interfaces.ITransport twisted.web.soap.Proxy SOAPpy twisted.web.client.getPage SOAPpy.buildSOAP SOAPpy.parseSOAPRPC twisted.web.soap.Proxy twisted.web.client.getPage twisted.web.client.Agent getPage Client.options.transport Deferred Deferred greenlet 
LOAD DATA INFILE 
marshal pickle cPickle -1 import pickle import cPickle import marshal import json  def maked(N=5400):   d = {}   for x in range(N):     k = 'key%d' % x     v = [x] * 5     d[k] = v   return d d = maked()  def marsh():   return marshal.dumps(d)  def pick():   return pickle.dumps(d)  def pick1():   return pickle.dumps(d -1)  def cpick():   return cPickle.dumps(d)  def cpick1():   return cPickle.dumps(d -1)  def jso():   return json.dumps(d)  def rep():   return repr(d)  $ py26 -mtimeit -s'import pik' 'pik.marsh()' 1000 loops best of 3: 1.56 msec per loop $ py26 -mtimeit -s'import pik' 'pik.pick()' 10 loops best of 3: 173 msec per loop $ py26 -mtimeit -s'import pik' 'pik.pick1()' 10 loops best of 3: 241 msec per loop $ py26 -mtimeit -s'import pik' 'pik.cpick()' 10 loops best of 3: 21.8 msec per loop $ py26 -mtimeit -s'import pik' 'pik.cpick1()' 100 loops best of 3: 10 msec per loop $ py26 -mtimeit -s'import pik' 'pik.jso()' 10 loops best of 3: 138 msec per loop $ py26 -mtimeit -s'import pik' 'pik.rep()' 100 loops best of 3: 13.1 msec per loop  json.dumps repr marshal json cPickle json marshal marshal repr 
def create_sql(self opts args):     #I've left out the error handling.     strtime = datetime.datetime.now().strftime("%D %H:%M")     vals = (strtime opts.message opts.keywords False)     return "insert into mytable values (? ? ? ?)" vals  def create(self opts args):     self.execute(*self.create_sql(opts args))     self.commit()  create_sql create create 
random.py import random 
import urllib2 req = urllib2.Request(url='http://stackoverflow.com/') f = urllib2.urlopen(req) print f.read()  
\x \xaa chr(0xaa) chr(16 * 10 + 10) 'a' 
findAll(True) from BeautifulSoup import BeautifulSoup  soup = BeautifulSoup(source) allTags = soup.findAll(True) [tag.name for tag in allTags ] [u'em' u'label']  from BeautifulSoup import BeautifulSoup def get_tags_set(source):     soup = BeautifulSoup(source)     all_tags = soup.findAll(True)     return set([tag.name for tag in all_tags])  def verify(tags_source_orig tags_source_to_verify):     return tags_source_orig == set.intersection(tags_source_orig tags_source_to_verify)  source= '&lt;label&gt;What\'s your name&lt;/label&gt;&lt;label&gt;What\'s your name&lt;/label&gt;&lt;em&gt;Hello&lt;/em&gt;' source_to_verify= '&lt;em&gt;Hello&lt;/em&gt;&lt;label&gt;What\'s your name&lt;/label&gt;&lt;label&gt;What\'s your name&lt;/label&gt;' print verify(get_tags_set(source)get_tags_set(source_to_verify))  
self.header().setContextMenuPolicy(QtCore.Qt.CustomContextMenu) self.header().customContextMenuRequested.connect(self.headerMenu)  def headerMenu(self pos):     globalPos = self.mapToGlobal(pos)     menu = QMenu()     menu.addAction("test item")     selectedItem = menu.exec_(globalPos)     if selectedItem:         print "selected: " selectedItem  
from random import randint randint(100 999)  # randint is inclusive at both ends  from random import randint  def random_with_N_digits(n):     range_start = 10**(n-1)     range_end = (10**n)-1     return randint(range_start range_end)  print random_with_N_digits(2) print random_with_N_digits(3) print random_with_N_digits(4)  33 124 5127  
&gt;&gt;&gt; class C(str): ...     def __new__(cls *args **kw): ...         return str.__new__(cls *args **kw) ...  &gt;&gt;&gt; c = C("hello world") &gt;&gt;&gt; type(c) &lt;class '__main__.C'&gt;  &gt;&gt;&gt; c.__class__.__mro__ (&lt;class '__main__.C'&gt; &lt;type 'str'&gt; &lt;type 'basestring'&gt; &lt;type 'object'&gt;)  __init__ __new__ cls &gt;&gt;&gt; class C(str): ...     def __new__(cls value meta): ...         obj = str.__new__(cls value) ...         obj.meta = meta ...         return obj ...  &gt;&gt;&gt; c = C("hello world" "meta") &gt;&gt;&gt; c 'hello world' &gt;&gt;&gt; c.meta 'meta'  
classmethod @classmethod def spam(cls ...):    # cls is the class you can use it to get class attributes  classmethod staticmethod 
%apply (float* INPLACE_ARRAY1 int DIM1) {(float* data1 int n1) (float* data2 int n2)};  class Class  {   public:    void test(float* data1 int n1 float* data2 int n2)   {     //...   } };  
a = numpy.array([Register() for _ in range(4)])  a.dtype dtype('object') a = numpy.empty(shape=(4) dtype=object) a[0] = Register()  # etc.  
'Height': 1440  'Height': None   AspectRatio None 
.find("is") &gt;&gt;&gt; re.search("is" String).start() 2  \b \b &gt;&gt;&gt; re.search(r"\bis\b" String).start() 5 &gt;&gt;&gt;  
__setitem__ Lib/site-packages/scipy/sparse/ if value==0:  if value==0 and self.has_key((ij)):  
DEBUG=True 
class Profile(models.Model):     ...     medias = models.ManyToManyField(Media related_name='profiles')     roles = models.ManyToManyField(Role related_name='profiles')  profile = Profile.objects.get(user=someone) print profile.medias.all() print profile.roles.all()  
interface twisted.application.internet.TCPServer smsInboundServer = internet.TCPServer(8001 webserver.Site(smsInbound)     interface='10.0.0.78')  reactor.listenTCP() t.a.i.*Server reactor.listenXXX 
FromClass FormClass FormClass     if extra.is_hidden():         FromClass = HiddenExtraForm  
None class Test:     def  __init__(selftest=None):         if test is None:             self.__test = []         else:             self.__test = test  
Array Class Class metaclass Object Class 
dis 
from PyQt4 import QtCore QtGui  class Ui_Dialog(object):     def setupUi(self Dialog):         Dialog.setObjectName("Dialog")         Dialog.resize(625 448)                 &lt;create a "holder" central widget&gt;         self.widget = QtGui.QWidget()                 &lt;set the overall QLayout with the widget as the&gt;                &lt;parent   rather than the "Dialog" that the&gt;                &lt;generated code gives you&gt;         self.gridLayout_2 = QtGui.QGridLayout(self.widget)          self.gridLayout_2.setObjectName("gridLayout_2")         ....         ....  if __name__ == "__main__":         app = QtGui.QApplication(sys.argv)         myapp = MyForm()         &lt; set the widget inside the form to it's cetral widget &gt;         myapp.setCentralWidget( myapp.ui.widget )          myapp.show()         sys.argv[1] = myapp.unUNCPath( sys.argv[1] )         os.chdir( sys.argv[1] )         myapp.setRootDir( sys.argv[1] )         myapp.processDirectory()         sys.exit(app.exec_())  
_MSC_VER 
from django.utils import simplejson  
mount_enclosing_volume 
import inspect  def foo(a b x='blah'):     pass  print(inspect.getargspec(foo)) # ArgSpec(args=['a' 'b' 'x'] varargs=None keywords=None defaults=('blah'))  inspect.getargspec() inspect.getfullargspec() inspect.signature() 
a b c self.a = a a self.a self.a 
class Prepender:      def __init__(self fname mode='w'):         self.__write_queue = []         self.__f = open(fname mode)      def write(self s):         self.__write_queue.insert(0 s)      def close(self):         self.__exit__(None None None)      def __enter__(self):         return self      def __exit__(self type value traceback):         if self.__write_queue:              self.__f.writelines(self.__write_queue)         self.__f.close()  with Prepender('test_d.out') as f:     f.write('string 1\n')     f.write('string 2\n')     f.write('string 3\n')  
#!/usr/bin/env python3  import sys import urllib.request from urllib.request import urlopen FancyURLopener from urllib.parse import urlparse parse_qs unquote  class UndercoverURLopener(FancyURLopener):     version = "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/533.2 (KHTML like Gecko) Chrome/5.0.342.9 Safari/533.2" urllib.request._urlopener = UndercoverURLopener()  def youtube_download(video_url):     video_id = parse_qs(urlparse(video_url).query)['v'][0]      url_data = urlopen('http://www.youtube.com/get_video_info?&amp;video_id=' + video_id).read()     url_info = parse_qs(unquote(url_data.decode('utf-8')))     token_value = url_info['token'][0]      download_url = "http://www.youtube.com/get_video?video_id={0}&amp;t={1}&amp;fmt=18".format(         video_id token_value)      video_title = url_info['title'][0] if 'title' in url_info else ''     # Unicode filenames are more trouble than they're worth     filename = video_title.encode('ascii' 'ignore').decode('ascii').replace("/" "-") + '.mp4'      print("\t Downloading '{}' to '{}'...".format(video_title filename))      try:         download = urlopen(download_url).read()         f = open(filename 'wb')         f.write(download)         f.close()     except Exception as e:         print("\t Downlad failed! {}".format(str(e)))         print("\t Skipping...")     else:         print("\t Done.")  def main():     print("\n--------------------------")     print (" Youtube Video Downloader")     print ("--------------------------\n")      try:         video_urls = sys.argv[1:]     except:         video_urls = input('Enter (space-separated) video URLs: ')      for u in video_urls:         youtube_download(u)     print("\n Done.")  if __name__ == '__main__':     main()  
CharField __builtin__ getattr VALUE_TYPE_CHOICES = (     ("unicode" "Unicode String")     ("int" "Integer")     ("bool" "Boolean") )  class Setting(models.Model):     name = models.CharField(max_length=100)     description = models.TextField(blank=True)     type = models.CharField(max_length=50 choices=VALUE_TYPE_CHOICES)     default_value = models.CharField(max_length=127)  def get_setting(user setting_id):     profile_setting = #get the user's specific setting value here not relevant     type = getattr(__builtin__ profile_setting.setting.type)     if type is bool:         return type(int(profile_setting.value))     else:         return type(profile_setting.value)  bool('0') True int bool ast literal_eval 
def dict_cursor(cursor):     description = [x[0] for x in cursor.description]     for row in cursor:         yield dict(zip(description row))  simplify_description = lambda cursor: [x[0] for x in cursor.description] dict_cursor = lambda c d: dict(zip(d r) for r in c))  
to_url d &gt;&gt;&gt; def f(**kwargs): print kwargs ...  &gt;&gt;&gt; d1 = { u'foo': u'bar' } &gt;&gt;&gt; d2 = { 'foo': u'bar' } &gt;&gt;&gt; f(**d1) TypeError: f() keywords must be strings &gt;&gt;&gt; f(**d2) {'foo': u'bar'}  d = dict( self.arguments.values_list('key' 'value') )  d = dict((str(k) v) for k v in self.arguments.values_list('key' 'value').iteritems())  
c.create_oval x c.coords(x)  (x1 y1 x2 y2) coords x 
xlwt worksheet = workbook.add_sheet("Sheet 1" cell_overwrite_ok=True)  
class ActionObject(object) class ActionObject() 
-&gt; decode encode iso-8859-1 
ALLOWED_MODES = frozenset(['r' 'rb' 'U' 'rU'])  if mode not in FakeFile.ALLOWED_MODES:   raise IOError('invalid mode: %s' % mode)  import logging .... logging.error('There was an error retrieving ...') logging.debug('Finish something')  
FileField upload_to FileField def update_filename(instance filename):     path = "upload/path/"     format = instance.userid + instance.transaction_uuid + instance.file_extension     return os.path.join(path format)  
thr.start(request) thr.run(request) 
(when (load "flymake" t)   (defun flymake-python-init ()     (let* ((temp-file (flymake-init-create-temp-buffer-copy                      'flymake-create-temp-inplace))          (local-file (file-relative-name                       temp-file                       (file-name-directory buffer-file-name))))     (list "pyflymake" (list local-file)))) ; substitute epylint for this   (push '(".+\\.py$" flymake-python-init) flymake-allowed-file-name-masks))  (add-hook 'python-mode-hook           (lambda ()             ; Activate flymake unless buffer is a tmp buffer for the interpreter             (unless (eq buffer-file-name nil) (flymake-mode t)) ; this should fix your problem             ;; Bind a few keys for navigating errors             (local-set-key (kbd "C-c w") 'show-fly-err-at-point) ; remove these if you want             (local-set-key (kbd "M-n") 'flymake-goto-next-error)             (local-set-key (kbd "M-p") 'flymake-goto-prev-error)))  
&gt;&gt;&gt; class TestB(): ...     def __init__(self attr=1): ...         self.attr = attr ...      &gt;&gt;&gt; a = TestB() &gt;&gt;&gt; b = TestB() &gt;&gt;&gt; a.attr = 2 &gt;&gt;&gt; a.attr 2 &gt;&gt;&gt; b.attr 1  &gt;&gt;&gt; class Test(): ...     def __init__(self attr=[]): ...         self.attr = attr ...      &gt;&gt;&gt; a = Test() &gt;&gt;&gt; b = Test() &gt;&gt;&gt; a.attr.append(1) &gt;&gt;&gt; a.attr [1] &gt;&gt;&gt; b.attr [1] &gt;&gt;&gt;   a b &gt;&gt;&gt; class TestC(): ...     def __init__(self attr=None): ...         if attr is None: ...             attr = [] ...         self.attr = attr ...      &gt;&gt;&gt; a = TestC() &gt;&gt;&gt; b = TestC() &gt;&gt;&gt; a.attr.append(1) &gt;&gt;&gt; a.attr [1] &gt;&gt;&gt; b.attr []  
from django.http import HttpResponse   def song_download(request song_id):     song = Song.objects.get(id=song_id)     fsock = open('/path/to/file.mp3' 'r')     response = HttpResponse(fsock content_type='audio/mpeg')     response['Content-Disposition'] = "attachment; filename=%s - %s.mp3" % \                                      (song.artist song.title)     return response  
def apply_on_all(seq method *args **kwargs):     for obj in seq:          getattr(obj method)(*args **kwargs)  def create_all_applier(method doc=None):     def on_all(seq *args **kwargs):         for obj in seq:             getattr(obj method)(*args **kwargs)     on_all.__doc__ = doc     return on_all  start_all = create_all_applier('start' "Start all instances") stop_all = create_all_applier('stop' "Stop all instances") ...  
model gtk.TreeViewColumn ('...' gtk.CellRendererCombo () text = N model = M)  M gtk.ListStore changed M store gtk.ListStore X def combo1_changed (combo path iter):     main_iter = store.get_iter (path)     selected  = store.get_value (main_iter X)     if selected == 'Alphabet':         store.set_value (main_iter M alphabet_list_store)     elif selected == 'Numbers':         store.set_value (main_iter M number_list_store)     ...  
Pandas scatter_matrix import numpy as np import pandas as pd import matplotlib.pyplot as plt   df = pd.DataFrame(np.random.randn(1000 4) columns=['A''B''C''D']) axes = pd.tools.plotting.scatter_matrix(df alpha=0.2) plt.tight_layout() plt.savefig('scatter_matrix.png')  pandas R 
class Foo(object):     CONST_NAME = "Name"  CONST_NAME = "Name"  typing.Final final from typing import Final  a: Final = 1  # Executes fine but mypy will report an error if you run mypy on this: a = 2  
inst = Complex(32)  inst.dosomething()  
import exec python-code data python-code input evaluations executable #!/usr/bin/python # # Description: it works like the input -thing in Tex # you can fetch outside executable code data or anything you like. # Sorry I don't know precisely how input(things) works maybe misusing terms # or exaggerating. # # The reason why I wanted input -style thing is because I wanted to use more # Python to write my lab-reports. Now I don't need to mess data with  # executions and evalutions and data can be in clean files.   #TRIAL 1: Execution and Evaluation not from a file  executeMe="print('hello'); a = 'If you see me it works'";  exec( executeMe ) print(a);  #TRIAL 2: printing file content # # and now with files # # $ cat IwillPrint007fromFile # 007  f = open('./IwillPrint007fromFile' 'r'); msg = f.read()  print("If 007 == " + msg + " it works!");   # TRIAL 3: Evaluation from a file # # $cat IwillEvaluateSthing.py # #!/usr/bin/python # # # # Description:  #  #  # evaluateMe = "If you see me again you are breaking the rules of Sky."  f = open('./IwillEvaluateSthing.py' 'r'); exec(f.read()); print(evaluateMe);  
's' if count &gt; 1 count &lt;= 1 print "The plural of plural is plural{0}. {1}".format(     's' if count &gt; 1 else '' "Isnt't it!?")  
property self.foo = foo # read-write property  a.foo = 3  property &gt;&gt;&gt; class ClassName(object):     def __init__(self foo):         self.foo = foo   &gt;&gt;&gt; a = ClassName(1 2) &gt;&gt;&gt; a.foo 1 &gt;&gt;&gt; a.foo = 42 &gt;&gt;&gt; a.foo 42  
1$s/\[\(\d\+\)\s\+\d\+\s\+\(\d\+\)\s\+\(\d\+\)\]/[\1 2 \2 \3]/g  %s/\[\(\d\+\)\s\+\d\+\s\+\(\d\+\)\s\+\(\d\+\)\]/[\1 2 \2 \3]/  
listOfInts self.listOfInts self append listOfInts self.listOfInts = [] __init__ 
.c gcc -w -E input/file.py.c -o output/file.py // comment #define def nothing(*args):     pass  def print_debug(msg):     print msg  if not DEBUG:      print_debug = nothing  
args Kelvin person hello.py -p Kelvin file1.txt person &quot;Kelvin&quot; args &quot;file1.txt&quot; optparse parse_args() options --file options.file None args 
__future__ [root@234571-app2 git]# /usr/bin/python2.5 test.py  python2.5 env PATH #!/usr/bin/python2.5  #!/usr/bin/env python2.5  
pip install -U paramiko  
start run end from multiprocessing import Process Event from time import sleep  class Test(Process):     def __init__(self):         Process.__init__(self)         self.stop = Event()      def run(self):         while not self.stop.is_set():             print "running"             sleep(1.0)      def end(self):         print "stop message received"         self.stop.set()  if __name__ == "__main__":     test = Test()     test.start()     sleep(1.0)     test.end()     test.join()  
SUM class RateableThing(db.Model):     num_ratings = db.IntegerProperty()     avg_rating = db.FloatProperty()  thing.avg_ratings = ((thing.avg_ratings * thing.num_ratings) + new_rating) / thing.num_ratings + 1 thing.num_ratings += 1 thing.put()  
import chardet from lxml import html content = urllib2.urlopen(url).read() encoding = chardet.detect(content)['encoding'] if encoding != 'utf-8':     content = content.decode(encoding 'replace').encode('utf-8') doc = html.fromstring(content base_url=url)  
from django.template import Context from django.template.loader import get_template from django.template.loader_tags import BlockNode ExtendsNode  def _get_node(template context=Context() name='subject'):     for node in template:         if isinstance(node BlockNode) and node.name == name:             return node.render(context)         elif isinstance(node ExtendsNode):             return _get_node(node.nodelist context name)     raise Exception("Node '%s' could not be found in template." % name)  
:%s/\\\t/|/g  \ \ 
import re from twisted.internet import reactor protocol from twisted.words.protocols import irc  find_command = re.compile(r'google ([a-z]+)').findall  class Googler(irc.IRCClient):     def privmsg(self user channel message):         for text in find_command(message):             self.say(channel "http://google.com/search?q=%s" % (text))  def connect():     cc = protocol.ClientCreator(reactor Googler)     return cc.connectTCP(host port)  def run(proto):     proto.join(channel)  def main():     d = connect()     d.addCallback(run)     reactor.run()  inlineCallbacks import re from twisted.internet import reactor protocol defer from twisted.words.protocols import irc  find_command = re.compile(r'google ([a-z]+)').findall  class Googler(irc.IRCClient):     def privmsg(self user channel message):         for text in find_command(message):             self.say(channel "http://google.com/search?q=%s" % (text))  @defer.inlineCallbacks def run():     cc = protocol.ClientCreator(reactor Googler)     proto = yield cc.connectTCP(host port)     proto.join(channel)  def main():     run()     reactor.run()  addCallbacks yield Googler IRCClient Googler.join Channel Channel @defer.inlineCallbacks def run():     cc = protocol.ClientCreator(reactor Googler)     proto = yield cc.connectTCP(host port)     channel = proto.join(channel)     for msg in channel:         msg = yield msg         for text in find_command(msg):             channel.say("http://google.com/search?q=%s" % (text))  yield Channel from corotwine import protocol  def run():     proto = Googler()     transport = protocol.gConnectTCP(host port)     proto.makeConnection(transport)     channel = proto.join(channel)     for msg in channel:         for text in find_command(msg):             channel.say("http://google.com/search?q=%s" % (text))  Channel from corotwine import defer  class Channel(object):     def __init__(self ircClient name):         self.ircClient = ircClient         self.name = name      def __iter__(self):         while True:             d = self.ircClient.getNextMessage(self.name)             message = defer.blockOn(d)             yield message  Googler getNextMessage IRCClient from twisted.internet import defer  class Googler(irc.IRCClient):     def connectionMade(self):         irc.IRCClient.connectionMade(self)         self._nextMessages = {}      def getNextMessage(self channel):         if channel not in self._nextMessages:             self._nextMessages[channel] = defer.DeferredQueue()         return self._nextMessages[channel].get()      def privmsg(self user channel message):         if channel not in self._nextMessages:             self._nextMessages[channel] = defer.DeferredQueue()         self._nextMessages[channel].put(message)  run from greenlet import greenlet  def main():     greenlet(run).switch()     reactor.run()  run run run 
export PATH=/Users/mycomp/bin:$PATH  echo "export PATH=/Users/mycomp/bin:\$PATH" &gt;&gt; ~/.bashrc source ~/.bashrc  django-admin django-admin 
def clone_entity(e **extra_args):   """Clones an entity adding or overriding constructor attributes.    The cloned entity will have exactly the same property values as the original   entity except where overridden. By default it will have no parent entity or   key name unless supplied.    Args:     e: The entity to clone     extra_args: Keyword arguments to override from the cloned entity and pass       to the constructor.   Returns:     A cloned possibly modified copy of entity e.   """   klass = e.__class__   props = dict((k v.__get__(e klass)) for k v in klass.properties().iteritems())   props.update(extra_args)   return klass(**props)  b = clone_entity(a) c = clone_entity(a key_name='foo') d = clone_entity(a parent=a.key().parent())  def clone_entity(e **extra_args):   klass = e.__class__   props = dict((v._code_name v.__get__(e klass)) for v in klass._properties.itervalues() if type(v) is not ndb.ComputedProperty)   props.update(extra_args)   return klass(**props)  key_name id b = clone_entity(a id='new_id_here')  _code_name name = ndb.StringProperty('n') AttributeError: type object 'foo' has no attribute 'n' 
location /files/ {    alias /true/path/to/mp3/files/;    internal; }  def song_download(request song_id):     try:         song = Song.objects.get(id=song_id)         response = HttpResponse()         response['Content-Type'] = 'application/mp3'         response['X-Accel-Redirect'] = '/files/' + song.filename         response['Content-Disposition'] = 'attachment;filename=' + song.filename     except Exception:         raise Http404     return response  
gb2312 print u'??'.encode('utf-8')  encode sys.stdout encoding 
for item in your_list[:n]:      ...  
test.twill setlocal query "twill Python"  go http://google.com/  fv 1 q $query submit btnI     # use the "I'm feeling lucky" button  show  python twill-sh test.twill  tests test-back.twill test-basic.twill test-dns.twill test-equiv-refresh.twill test-find.twill test-form.twill test-formfill.twill test-global-form.twill test-go-exit.twill ....  
from django.db.models import Avg  p = Property.objects.get(...) stars_average = p.rating_set.aggregate(Avg('stars')).values()[0]  
lst[0] lst[1] 0 &lt;= n &lt; 2**(len(lst)) lst n = 0 lst n = 2**(len(lst)) - 1 def HasAtLeastTwoBitsSet(x) :     return (x &amp; (x-1)) != 0  # Testing: &gt;&gt;&gt; [x for x in range(33) if HasAtLeastTwoBitsSet(x)] [3 5 6 7 9 10 11 12 13 14 15 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]  def GetSublistByCombination(lst combination_id) :     res = [x for (ix) in enumerate(lst) if combination_id &amp; (1 &lt;&lt; i)]     return res  # Testing: &gt;&gt;&gt; GetSublistByCombination([0123] 1) [0] &gt;&gt;&gt; GetSublistByCombination([0123] 3) [0 1] &gt;&gt;&gt; GetSublistByCombination([0123] 12) [2 3] &gt;&gt;&gt; GetSublistByCombination([0123] 15) [0 1 2 3]  def IterAllSums(lst) :     combinations = [i for i in range(1 &lt;&lt; len(lst)) if HasAtLeastTwoBitsSet(i)]     for comb in combinations :         sublist = GetSublistByCombination(lst comb)         sum_str = '+'.join(map(str sublist))         sum_val = sum(sublist)         yield (sum_str sum_val)  &gt;&gt;&gt; for sum_str sum_val in IterAllSums([1234]) : print sum_str sum_val  1+2 3 1+3 4 2+3 5 1+2+3 6 1+4 5 2+4 6 1+2+4 7 3+4 7 1+3+4 8 2+3+4 9 1+2+3+4 10  
Kmeans2 
print [name for name in os.listdir(".") if os.path.isdir(name)]  split("-") abspath print [os.path.abspath(name) for name in os.listdir(".") if os.path.isdir(name)]  walk 
count() sc=scorm.objects.filter(Header__id=qp.id)  if sc.count() &gt; 0:    ...  len() count() SELECT COUNT(*) count() len() get() scorm.objects.get(pk=someid) ObjectDoesNotExist from django.core.exceptions import ObjectDoesNotExist try:     sc = scorm.objects.get(pk=someid) except ObjectDoesNotExist:     print ...  exists() if scorm.objects.filter(Header__id=qp.id).exists():     ....  True False 
config/ scripts/ src/ $HOME/lib fab -f $HOME/lib/rpaste.py 
def scaleSize(selfscale):      self.x = self.x * scale  self.y = self.y * scale   def scaleSize(selfscale):      self.x = self.x * scale      self.y = self.y * scale   
class MainHandler(tornado.web.RequestHandler):     @tornado.web.asynchronous     def get(self):         http = tornado.httpclient.AsyncHTTPClient()         http.fetch("http://friendfeed-api.com/v2/feed/bret"                    callback=self.async_callback(self.on_response))      def on_response(self response):         if response.error: raise tornado.web.HTTPError(500)         json = tornado.escape.json_decode(response.body)         self.write("Fetched " + str(len(json["entries"])) + " entries "                    "from the FriendFeed API")         self.finish()  
pipes.quote() &gt;&gt;&gt; from pipes import quote &gt;&gt;&gt; quote("""some'horrible"string\with lots of junk!$$!""") '"some\'horrible\\"string\\\\with lots of junk!\\$\\$!"'  &gt;&gt;&gt; quote("") ''  '""' 
c.execute("alter table linksauthor add column '%s' 'float'" % author)  
if (!vertices ||         (PyArray_NDIM(vertices) == 2 &amp;&amp; PyArray_DIM(vertices 1) != 2) ||         (PyArray_NDIM(vertices) == 1 &amp;&amp; PyArray_DIM(vertices 0) != 2))          throw Py::ValueError("Invalid vertices array.");  
for tool in find_tools():     def __tool(*arg):         validate_args(tool args)         return execute_tool(tool args)     __tool.__name__ = tool.name     __tool.__doc__ = compile_docstring(tool)     setattr(module tool.name __tool)  __doc__ __call__ class ToolWrapper(object):     def __init__(self tool):         self.tool = tool          self.__name__ = tool.name     def _get_doc(self):         return compile_docstring(self.tool)     __doc__ = property(_get_doc)     def __call__(self *args):         validate_args(args)         return execute_tool(tool args)  for tool in find_tools():     # Build a custom meta-class to provide __doc__.     class _ToolMetaclass(type):         def _get_doc(self):             return create_docstring(tool)         __doc__ = property(_get_doc)      # Build a callable class to wrap the tool.     class _ToolWrapper(object):         __metaclass__ = _ToolMetaclass         def _get_doc(self):             return create_docstring(tool)         __doc__ = property(_get_doc)         def __call__(self *args):             validate_args(tool args)             execute_tool(tool args)      # Add the tool to the module.     setattr(module tool.name _ToolWrapper())  help(my_tool_name)  my_tool_name.__doc__  __doc__ _ToolWrapper 
bind bind connect s.bind(('0.0.0.0' 1444))  
import sqlite3 con = sqlite3.connect('simple.db') c = con.cursor()  dic = {     'x1':{'y1':1.0'y2':0.0}     'x2':{'y1':0.0'y2':2.0'y3':1.5}     'x3':{'y2':2.0'y3':1.5}     }  # 1. Find the unique column names. columns = set() for cols in dic.values():     for key in cols:        columns.add(key)  # 2. Create the schema. col_defs = [     # Start with the column for our key name     '"row_name" VARCHAR(2) NOT NULL PRIMARY KEY'     ] for column in columns:     col_defs.append('"%s" REAL NULL' % column) schema = "CREATE TABLE simple (%s);" % "".join(col_defs) c.execute(schema)  # 3. Loop through each row for row_name cols in dic.items():      # Compile the data we have for this row.     col_names = cols.keys()     col_values = [str(val) for val in cols.values()]      # Insert it.     sql = 'INSERT INTO simple ("row_name" "%s") VALUES ("%s" "%s");' % (         '""'.join(col_names)         row_name         '""'.join(col_values)         )     c.execute(sql)  ## update value at a specific row x and column y? def set_cell(connection x_name y_name value):     sql = 'UPDATE simple SET %s="%s" WHERE row_name="%s"' % (         y_name value x_name         )     connection.execute(sql)  ## select a value at a specific row x and column y? def get_cell(connection x_name y_name):     sql = 'SELECT %s FROM simple WHERE row_name="%s"' % (         y_name x_name         )     # Return the first row of results (there should be only one)     # and the first column from that row     return list(connection.execute(sql))[0][0]  
class Foo:    def __init__(self num):       self.num = num       def _fn(other):          return self.num + other.num       self.__add__ = _fn  &gt;&gt;&gt; f = Foo(2) &gt;&gt;&gt; g = Foo(1) &gt;&gt;&gt; f + g 3  dict class Foo (object):    def __init__(self num):       self.num = num       def _fn(other):          return self.num + other.num       self.__add__ = _fn &gt;&gt;&gt; f = Foo(2) &gt;&gt;&gt; g = Foo(1) &gt;&gt;&gt; f + g Traceback ... TypeError: unsupported operand type(s) for +: 'Foo' and 'Foo'  dict class _MetaFoo(type):     def __init__(cls name bases args):         def _fn(self other):             return self.num + other.num         cls.__add__ = _fn  class Foo(object):     __metaclass__ = _MetaFoo     def __init__(self num):         self.num = num  &gt;&gt;&gt; f = Foo(2) &gt;&gt;&gt; g = Foo(1) &gt;&gt;&gt; f+g 3  self class Foo(object):     def __init__(self num):         self.num = num setattr(Foo '__add__' (lambda self other: self.num + other.num)) &gt;&gt;&gt; f = Foo(2) &gt;&gt;&gt; g = Foo(1) &gt;&gt;&gt; f+g 3  
The name of this M is {{ m.name or ''}}.  bool(m.name) == False The name of this M is . m.name == False The name of this M is {{ m.name|default('') }}  m.name is None The name of this M is . m.name == False The name of this M is False. The name of this M is {{ m.name|default('' true) }}  {{ m.name or '' }} 
python import vim re python def senclose(str): return "'"+re.sub(re.compile("'") "''" str)+"'" python vim.command("let @r="+senclose("string with single 'quotes'"))  let abc='string with newline'  execute "let abc='string\nwith newline'"  :execute eval() string("string\nwith newline") senclose vim.eval python senclose = lambda str: "'"+str.replace("'" "''")+"'" python vim.eval("setreg('@r' {0})".format(senclose("string with single 'quotes'")))  
k v = [x.strip() for x in line.lower().split(':')]  
&gt;&gt;&gt; import numpy as np &gt;&gt;&gt; a[~np.isnan(a).any(1)] array([[  1.  10.]        [  5.   6.]])  &gt;&gt;&gt; a[~(a == 5).any(1)] array([[  1.  10.]        [ NaN   6.]        [  6.  NaN]])  &gt;&gt;&gt; a[(a != 5).all(1)] array([[  1.  10.]        [ NaN   6.]        [  6.  NaN]])  &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; a = np.array([[1 5 np.nan 6] ...               [10 6 6 np.nan]]).transpose() &gt;&gt;&gt; a array([[  1.  10.]        [  5.   6.]        [ NaN   6.]        [  6.  NaN]])  &gt;&gt;&gt; np.isnan(a) array([[False False]        [False False]        [ True False]        [False  True]] dtype=bool)  &gt;&gt;&gt; np.isnan(a).any(1) array([False False  True  True] dtype=bool)  &gt;&gt;&gt; ~np.isnan(a).any(1) array([ True  True False False] dtype=bool)  &gt;&gt;&gt; a[~np.isnan(a).any(1)] array([[  1.  10.]        [  5.   6.]])  
import matplotlib.pyplot as plt  fig = plt.figure(figsize=(8 8)) # You were missing the = ax = fig.add_subplot(1 1 1) ax.set_yscale('log') ax.set_xscale('log') plt.scatter([1.341 0.1034 0.6076 1.4278 0.0374]         [0.37 0.12 0.22 0.4 0.08]) plt.xlim(0.01 10) # Fix the x limits to fit all the points plt.show()  
Python 3.1.2 (r312:79149 Mar 21 2010 00:41:52) [MSC v.1500 32 bit (Intel)] on win32 Type "help" "copyright" "credits" or "license" for more information. &gt;&gt;&gt; import _json &gt;&gt;&gt; _json.__file__ Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; AttributeError: 'module' object has no attribute '__file__'  _json.pyd _json.dll 
def tup_cmp(mytup mytups):     return any(x for x in mytups if mytup == x[:len(mytup)])  &gt;&gt;&gt; c = ((0 1 2 3) (2 3 4 5)) &gt;&gt;&gt; tup_cmp((02)c) False &gt;&gt;&gt; tup_cmp((01)c) True &gt;&gt;&gt; tup_cmp((0123)c) True &gt;&gt;&gt; tup_cmp((012)c) True &gt;&gt;&gt; tup_cmp((23)c) True &gt;&gt;&gt; tup_cmp((24)c) False  c = ((01)(23))  [i for i in c if i[0] == 0] # result: [(0 1)]  [i for i in c if i[0] == 3] # result: []  
Posts.get_{nextprevious}_by_FOO() 
re.search re.match 123.35 x in s 
distutils def test(long long value):     cdef long long i     cdef long long z     for i in xrange(value):         z = i**2         if(i==1000000):             print i         if z &lt; i:             print "yes"  
&gt;&gt;&gt; class Foo(object): ...   def f(x): return x * x ...  &gt;&gt;&gt; dis.dis(Foo) Disassembly of f:   2           0 LOAD_FAST                0 (x)               3 LOAD_FAST                0 (x)               6 BINARY_MULTIPLY                    7 RETURN_VALUE          
a_front = len(a) / 2 + len(a) % 2  
fork() multiprocessing worker if 
import re  s = """blablabla checked=12 unchecked=1 blablabla unchecked=13 blablabla checked=14"""  regex = re.compile(r"blablabla (?:(?:checked=)(\d+))? ?(?:(?:unchecked=)(\d+))?")  for line in s.splitlines():     print regex.match(line).groups()  None 
:out %(out)s cursor = connection.cursor() lOutput = cursor.var(cx_Oracle.STRING) cursor.execute("""             BEGIN                 :out := 'N';             END;"""             {'out' : lOutput}) print lOutput  &lt;cx_Oracle.STRING with value 'N'&gt;  
subprocess.call &gt;&gt;&gt; from subprocess import call &gt;&gt;&gt; call(r"C:\Program Files\Mozilla Firefox\Firefox.exe")  &gt;&gt;&gt; import webbrowser &gt;&gt;&gt; webbrowser.open('http://stackoverflow.com/') True  
zope /usr/lib/python2.6/site-packages/zope/interface/ /home/me/src/myproject/lib/python2.6/site-packages/zope/schema pkgutil.extend_path(__path__ __name__) /usr/lib/python2.6/site-packages/zope/__init__.py __path__ ['/usr/lib/python2.6/site-packages/zope' '/home/me/src/myproject/lib/python2.6/site-packages/zope'] pkg_resources.declare_namespace pkgutil.extend_path __path__ __path__ distutils/__init__.py sys.path import os stdlib_dir = os.path.dirname(os.__file__) real_distutils_path = os.path.join(stdlib_dir 'distutils') __path__.append(real_distutils_path) execfile(os.path.join(real_distutils_path '__init__.py')) # and then apply some monkeypatching here...  
x = data[:][0] y1 = data[:][2] y3 = data[:][3]  x = [row[0] for row in x]  
\w &amp; \S \w &gt;&gt;&gt; import re &gt;&gt;&gt; r = re.compile(r'(?P&lt;words&gt;\w+(?:\s+\S+)*?)\s*(?P&lt;num&gt;\d+)?\r\n') &gt;&gt;&gt; for s in ('Foo &amp; Bar 555\r\n' 'Hello World\r\n' 'Spam     99\r\n' ...           'Number 1 666\r\n'): ...   print s r.match(s).groupdict() ...  Foo &amp; Bar 555 {'num': '555' 'words': 'Foo &amp; Bar'} Hello World {'num': None 'words': 'Hello World'} Spam     99 {'num': '99' 'words': 'Spam'} Number 1 666 {'num': '666' 'words': 'Number 1'} &gt;&gt;&gt;   
import struct fh = open('my_file.dat' 'rb') s = fh.read(40256) vals = struct.unpack('iidddddd5025d' s) dpoints dloops dtime bT sT hI LI tm = vals[:8] data = vals[8:] 
('/post/(\d+)' views.PostHandler)  class PostHandler(BaseHandler):     ''' Handler for viewing blog posts. '''     def get(self id):         blog_post = models.BlogPost.get_by_id(int(id))  
if (temp == 182)  
fileinput translate translit.py #!/usr/bin/env python2.6 # -*- coding: utf-8 -*-  import fileinput  table = {           0xe4: u'ae'           ord(u'ö'): u'oe'           ord(u'ü'): u'ue'           ord(u'ß'): None         }  for line in fileinput.input():     s = line.decode('utf8')     print s.translate(table)   $ cat utf8.txt  sömé täßt sömé täßt sömé täßt  $ ./translit.py utf8.txt  soemé taet soemé taet soemé taet  line = 'Verhältnismäßigkeit Möglichkeit'  table = {          ord('ä'): 'ae'          ord('ö'): 'oe'          ord('ü'): 'ue'          ord('ß'): 'ss'        }  line.translate(table)  &gt;&gt;&gt; 'Verhaeltnismaessigkeit Moeglichkeit'  
list set bisect from bisect import bisect_left def bi_contains(lst item):     """ efficient `item in lst` for sorted lists """     # if item is larger than the last its not in the list but the bisect would      # find `len(lst)` as the index to insert so check that first. Else if the      # item is in the list then it has to be at index bisect_left(lst item)     return (item &lt;= lst[-1]) and (lst[bisect_left(lst item)] == item)  
char unsigned char cin stdin int unsigned int n; std::cin &gt;&gt; n; data[i] = static_cast&lt;u8&gt;(n);  chr 
0 1 re.TEMPLATE flags = 0 if case_sensitive else re.I re.findall(r'pattern' s flags)  re.I re.M 
import Tkinter  # create the tcl interpreter tcl = Tkinter.Tcl()  # define a python function def pycommand(*args):     print "pycommand args:" " ".join(args)  # register it as a tcl command: tcl_command_name = "pycommand" python_function = pycommand cmd = tcl.createcommand(tcl_command_name python_function)  # call it and print the results: result = tcl.eval("pycommand one two three") print "tcl result:" result  $ python2.5 /tmp/example.py pycommand args: one two three tcl result: None  
for item in itertools.islice(iterable n): for count item in enumerate(iterable): if count &gt; n: break ... for i in xrange(n): item = next(iterator) ... islice iterools 
numerator def numerator(...) self.numerator = n set_numerator set_denominator 
x.properties()['p'].verbose_name 
win32api.keybd_event(win32con.VK_CONTROL 0 win32con.KEYEVENTF_EXTENDEDKEY 0)  win32api.keybd_event(win32con.VK_CONTROL 0 win32con.KEYEVENTF_EXTENDEDKEY | win32con.KEYEVENTF_KEYUP 0)  import win32api win32con def CopyBox(x y):     time.sleep(.2)     win32api.keybd_event(win32con.VK_CONTROL 0 win32con.KEYEVENTF_EXTENDEDKEY 0)     win32api.SetCursorPos((xy))     win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN x y 0 0)     win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP x y 0 0)     win32api.keybd_event(win32con.VK_CONTROL 0 win32con.KEYEVENTF_KEYUP 0)  
try:    u = urllib2.urlopen(req) except HTTPError as e:    #inform them of the specific error here (based off the error code) except URLError as e:    #inform them of the specific error here except Exception as e:    #inform them that a general error has occurred   
threading.Timer import time  def hello():     while True:         print "Hello Word!"         time.sleep(30.0)  Timer import time  def makerepeater(delay fun *a **k):     def wrapper(*a **k):         while True:             fun(*a **k)             time.sleep(delay)     return wrapper  makerepeater(30 hello) hello 
group() group(0) &gt;&gt;&gt; print (re.match(r"(?:aaa)(_bbb)" string1).group(0)) aaa_bbb &gt;&gt;&gt; print (re.match(r"(?:aaa)(_bbb)" string1).group(1)) _bbb &gt;&gt;&gt; print (re.match(r"(?:aaa)(_bbb)" string1).group(2)) Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in ? IndexError: no such group  group() " ".join(re.match(r"(?:aaa)(_bbb)" string1).groups()) 
def funkyDecorator(cls):     cls.funky = 1  @funkyDecorator class MyClass(object):     pass  MyClass = funkyDecorator(MyClass)  def logDecorator(func):      def wrapper(*args **kwargs):         print "Before" func.__name__         ret = func(*args **kwargs)         print "After" func.__name__         return ret      return wrapper  class MyClass(object):      @logDecorator     def mymethod(self):         print "xxx"   MyClass().mymethod()  Before mymethod xxx After mymethod  @orm.reconstructor 
xrange( range() :-) map() $ python -m timeit "def foo(x):pass; [foo(i) for i in range(100)]" 1000000 loops best of 3: 0.216 usec per loop $ python -m timeit "def foo(x):pass; [foo(i) for i in range(100)]" 1000000 loops best of 3: 0.21 usec per loop $ python -m timeit "def foo(x):pass; [foo(i) for i in range(100)]" 1000000 loops best of 3: 0.212 usec per loop map() $ python -m timeit "def foo(x):pass; map(foo range(100))" 1000000 loops best of 3: 0.216 usec per loop $ python -m timeit "def foo(x):pass; map(foo range(100))" 1000000 loops best of 3: 0.214 usec per loop $ python -m timeit "def foo(x):pass; map(foo range(100))" 1000000 loops best of 3: 0.215 usec per loop a = (foo(i) for i in range(100))  range() xrange() range() xrange() range() 
frozenset tuple(sorted(kwargs.iteritems())) import collections  class FrozenDict(collections.Mapping):     """Don't forget the docstrings!!"""      def __init__(self *args **kwargs):         self._d = dict(*args **kwargs)         self._hash = None      def __iter__(self):         return iter(self._d)      def __len__(self):         return len(self._d)      def __getitem__(self key):         return self._d[key]      def __hash__(self):         # It would have been simpler and maybe more obvious to          # use hash(tuple(sorted(self._d.iteritems()))) from this discussion         # so far but this solution is O(n). I don't know what kind of          # n we are going to run into but sometimes it's hard to resist the          # urge to optimize when it will gain improved algorithmic performance.         if self._hash is None:             hash_ = 0             for pair in self.items():                 hash_ ^= hash(pair)             self._hash = hash_         return self._hash  &gt;&gt;&gt; x = FrozenDict(a=1 b=2) &gt;&gt;&gt; y = FrozenDict(a=1 b=2) &gt;&gt;&gt; x is y False &gt;&gt;&gt; x == y True &gt;&gt;&gt; x == {'a': 1 'b': 2} True &gt;&gt;&gt; d = {x: 'foo'} &gt;&gt;&gt; d[y] 'foo'  
urllib.quote_plus(string[ safe])  
def f(x):     """     @x: int     Adds 3 to x     returns an int     """     return x + 3  Properties PyDev - PYTHONPATH Add source folder __init__.py ctrl+space ( ctrl+space ( 
attrgetter('attributename') lambda o: o.attributename attrgetter() &gt;&gt;&gt; from timeit import Timer &gt;&gt;&gt; from random import randint &gt;&gt;&gt; from dataclasses import dataclass field &gt;&gt;&gt; @dataclass ... class Foo: ...     bar: int = field(default_factory=lambda: randint(1 10**6)) ... &gt;&gt;&gt; testdata = [Foo() for _ in range(1000)] &gt;&gt;&gt; def test_function(objects key): ...     [key(o) for o in objects] ... &gt;&gt;&gt; stmt = 't(testdata key)' &gt;&gt;&gt; setup = 'from __main__ import test_function as t testdata; ' &gt;&gt;&gt; tests = { ...     'lambda': setup + 'key=lambda o: o.bar' ...     'attrgetter': setup + 'from operator import attrgetter; key=attrgetter("bar")' ... } &gt;&gt;&gt; for name tsetup in tests.items(): ...     count total = Timer(stmt tsetup).autorange() ...     print(f"{name:&gt;10}: {total / count * 10 ** 6:7.3f} microseconds ({count} repetitions)") ...     lambda: 130.495 microseconds (2000 repetitions) attrgetter:  92.850 microseconds (5000 repetitions)  attrgetter('bar') lambda attrgetter() &gt;&gt;&gt; def test_function(objects key): ...     sorted(objects key=key) ... &gt;&gt;&gt; for name tsetup in tests.items(): ...     count total = Timer(stmt tsetup).autorange() ...     print(f"{name:&gt;10}: {total / count * 10 ** 6:7.3f} microseconds ({count} repetitions)") ...     lambda: 218.715 microseconds (1000 repetitions) attrgetter: 169.064 microseconds (2000 repetitions)  
#!/usr/bin/env python  import pygtk pygtk.require('2.0') import gtk  class ComboBoxExample:     def __init__(self):         window = gtk.Window()         window.connect('destroy' lambda w: gtk.main_quit())         combobox = gtk.combo_box_new_text()         window.add(combobox)         combobox.append_text('Select a pie:')         combobox.append_text('Apple')         combobox.append_text('Cherry')         combobox.append_text('Blueberry')         combobox.append_text('Grape')         combobox.append_text('Peach')         combobox.append_text('Raisin')         combobox.connect('changed' self.changed_cb)         combobox.set_active(0)         window.show_all()         return      def changed_cb(self combobox):         model = combobox.get_model()         index = combobox.get_active()         if index:             print 'I like' model[index][0] 'pie'         return  def main():     gtk.main()     return  if __name__ == "__main__":     bcb = ComboBoxExample()     main()  
import twitter  class Api(twitter.Api):     pass      # override/add any functions here.   class Ball():     def __init__(selfa):         self.a=a     def __repr__(self):         return "Ball(%s)" % self.a  def makeBall(a):     return Ball(a)  def override():     print "OVERRIDE ONE"  def dontoverride():     print "THIS WILL BE PRESERVED"  from basemodule import * import basemodule  def makeBalls(ab):     foo = makeBall(a)     bar = makeBall(b)     print foobar  def override():     print "OVERRIDE TWO"  def dontoverride():     basemodule.dontoverride()     print "THIS WAS PRESERVED"  import extmodule  #code is in extended module print extmodule.makeBalls(12) #returns Ball(1) Ball(2)  #code is in base module print extmodule.makeBall(1) #returns Ball(1)  #function from extended module overwrites base module extmodule.override() #returns OVERRIDE TWO  #function from extended module calls base module first extmodule.dontoverride() #returns THIS WILL BE PRESERVED\nTHIS WAS PRESERVED  
class type some_dict class Test:     some_dict = {} Test.some_dict[Test] = True  def set_some_dict(cls):     cls.some_dict[cls] = True  @set_some_dict class Test:     some_dict = {}  class SomeDictSetterType(type):     def __init__(self name bases attrs):         self.some_dict[self] = True         super(SomeDictSetterType self).__init__(name bases attrs)  class Test(object):     __metaclass__ = SomeDictSetterType     some_dict = {}  
set1 = set(array1) array2 = [e for e in array2 if e not in set1]  array2[:] =  [e for e in array2 if e not in set1]  
import numpy as np     a = np.array([(3 2) (6 2) (3 6) (3 4) (5 3)])  ind = np.lexsort((a[:1]a[:0]))      a[ind] # array([[3 2] #       [3 4] #       [3 6] #       [5 3] #       [6 2]])  a.ravel() a C_CONTIGUOUS ravel flatten a a = np.array([(3 2) (6 2) (3 6) (3 4) (5 3)]) dt = [('col1' a.dtype)('col2' a.dtype)] assert a.flags['C_CONTIGUOUS'] b = a.ravel().view(dt) b.sort(order=['col1''col2'])  b a b a print(a) # [[3 2] #  [3 4] #  [3 6] #  [5 3] #  [6 2]]  
super(B self).test() bubble() inspect.getmro(type(back_self)) back_self self cls method_name in cls.__dict__ find_class_by_code_object(self) bubble() *args **kwargs import inspect def bubble(*args **kwargs):     def find_class_by_code_object(back_self method_name code):         for cls in inspect.getmro(type(back_self)):             if method_name in cls.__dict__:                 method_fun = getattr(cls method_name)                 if method_fun.im_func.func_code is code:                     return cls      frame = inspect.currentframe().f_back     back_self = frame.f_locals['self']     method_name = frame.f_code.co_name      for _ in xrange(5):         code = frame.f_code         cls = find_class_by_code_object(back_self method_name code)         if cls:             super_ = super(cls back_self)             return getattr(super_ method_name)(*args **kwargs)         try:             frame = frame.f_back         except:             return    class A(object):     def test(self):         print "A.test()"  class B(A):     def test(self):         # instead of "super(B self).test()" we can do         bubble()  class C(B):     pass  c = C() c.test() # works!  b = B() b.test() # works!  C.test = B.test = for _ in xrange(5) frame = frame.f_back super() 
menu __init__ class Abcd:     def __init__(self):         self.a = ''         self.menu = ['a' 'b' 'c']  
login_url = '' for link in showlinks():     if link.text == "login":         login_url = link.url  go(login_url)  http://news.ycombinator.com/x?fnid=SvdNlGQoqo 
class Test:     &lt;snip&gt;  if __name__ == "__main__":     import doctest     doctest.testmod()  
$ cat server.py #!/usr/bin/env python   import socket  import sys  host = ''  port = 843  backlog = 5  size = 1024  s = socket.socket(socket.AF_INET socket.SOCK_STREAM)  print &gt;&gt; sys.stderr 'socket' s.bind((hostport))  print &gt;&gt; sys.stderr 'bind' s.listen(backlog)  print &gt;&gt; sys.stderr 'listen' while 1:      try:        client address = s.accept()         print &gt;&gt; sys.stderr 'accept'        data = client.recv(size)         print &gt;&gt; sys.stderr 'recv'        # ignore data because I can't type a '\0'        client.send('&lt;?xml version="1.0"?&gt;&lt;cross-domain-policy&gt;&lt;allow-access-from domain="*" to-ports="*"/&gt;&lt;/cross-domain-policy&gt;')         client.close()        print &gt;&gt; sys.stderr 'close'     except Exception as e:         print e;         s.close();         print &gt;&gt; sys.stderr 'close'         sys.exit(1); $ sudo nohup python server.py &amp; [1] 11218 nohup: ignoring input and appending output to `nohup.out' $ jobs [1]+  Running                 sudo nohup python server.py &amp; # a couple of telnets to 843 $ jobs [1]+  Running                 sudo nohup python server.py &amp; $ sudo kill 11218 $ sudo cat nohup.out socket bind listen accept recv close accept recv close  
ws0 Worksheet ws0.write(row_index column_index unicode_text) cell &gt;&gt;&gt; import xlwt &gt;&gt;&gt; b = xlwt.Workbook() &gt;&gt;&gt; s = b.add_sheet('zh') &gt;&gt;&gt; big5_text = '\xa7A\xa6n\xa1I' &gt;&gt;&gt; u_text = big5_text.decode('big5') &gt;&gt;&gt; s.write(0 0 u_text) &gt;&gt;&gt; b.save('nihao.xls')  unicode_text.encode('some_encoding' 'replace') unicode_text.encode() print repr(cell) fc /b ... 
$&gt; python manage.py shell  $&gt; from django.contrib.auth.models import User  $&gt; opts = User._meta  $&gt; opts.get_field('username')  &lt;django.db.models.fields.CharField object at 0x1024750&gt;  
setuptools distutils try:     from setuptools import setup Extension Feature except ImportError:     from distutils.core import setup Extension     Feature = None  if Feature: extra setup() BaseRowProxy try:     from sqlalchemy.cresultproxy import BaseRowProxy except ImportError:     class BaseRowProxy(object):         #....  --with-cextensions 
i = i + 1 t % # Log every 1000 lines. LOG_EVERY_N = 1000  for i in range(1000):   ... # calculations with i    if (i % LOG_EVERY_N) == 0:     print "logging: ..."  
sudo ln -s /usr/local/lib/libgmp.dylib /usr/lib/libgmp.dylib  
__dict__ def load(self):     f = open(self.filename 'rb')     tmp_dict = cPickle.load(f)     f.close()                self.__dict__.update(tmp_dict)    def save(self):     f = open(self.filename 'wb')     cPickle.dump(self.__dict__ f 2)     f.close()  
self. @ self self self. 
os.popen() stdout stdout stdout os.popen() os.popen() stderr os.popen() directory os.popen() subprocess.Popen() subprocess.Popen() devnull = open(os.devnull 'w') for directory in directories:     subprocess.Popen(['runtool_exec' directory] stdout=devnull)  
darwinports 
"say (?P&lt;value&gt;.+) endsay"  .+ endsay 
collections.OrderedDict key= cmp= cmp= d={5:67:8100:1011:23:4} print(d.items()) # [(1 2) (3 4) (100 101) (5 6) (7 8)]  mycmp x1 length=4 print(sorted(d.items()key=lambda item: abs(item[1]-length) )) # [(3 4) (1 2) (5 6) (7 8) (100 101)]  key=... lambda item: abs(item[1]-length) item d.items() abs(item[1]-length) len len length 
- url: /(form|items\.html)   script: validate.py  
Python 2.6.2 (r262:71600 Apr 15 2009 07:20:39) &gt;&gt;&gt; import dis &gt;&gt;&gt; def f(x): ...    return x is not None ... &gt;&gt;&gt; dis.dis(f)   2           0 LOAD_FAST                0 (x)               3 LOAD_CONST               0 (None)               6 COMPARE_OP               9 (is not)               9 RETURN_VALUE &gt;&gt;&gt; def g(x): ...   return not x is None ... &gt;&gt;&gt; dis.dis(g)   2           0 LOAD_FAST                0 (x)               3 LOAD_CONST               0 (None)               6 COMPARE_OP               9 (is not)               9 RETURN_VALUE  not x is y not (x is y) (not x) is y x is not y 
setrecursionlimit ulimit -s help ulimit 
form.defaults={'myStruct': {'a': None 'b': 'default_value'}}  
getattr class WebmethodBaseClass():     def post(self methodName):         getattr(self methodName)("kapow")  post def webmethod(f):     f.is_webmethod = True     return f  post is_webmethod 
from itertools import ifilter islice  def ello_bruce(limit=None):     for i in islice(ifilter(predicate xrange(10**5)) limit):         # do whatever you want with i here  
Section = 'Sec_' + Section  
arr = [[int(i) for i in line.split()] for line in open('input.txt')]  
Makefile.in src .defs PYGTK_CODEGEN PYGTK_CODEGEN configure.in AC_MSG_CHECKING(for pygtk codegen) PYGTK_CODEGEN="$PYTHON `$PKG_CONFIG --variable=codegendir pygtk-2.0`/codegen.py" AC_SUBST(PYGTK_CODEGEN) AC_MSG_RESULT($PYGTK_CODEGEN)  PyGTK PyGTK codegen codegen PyGTK codegen.py 
sys.stdout.flush() sys.stdout.write 
layout.setContentsMargin(0 0 0 0)  
def scan(s1 s2):     # Find the longest match where s1 starts with s2     # Returns None if no matches     l = len(s1)     while 1:         if not l:             return None         elif s1[:l] == s2[:l]:             return s1[:l]         else:             l -= 1  def contains(s1 s2):     D = {} # Remove duplicates using a dict     L1 = s1.split(' ')     L2 = s2.split(' ')      # Don't add results which have already      # been processed to satisfy example #1!     DProcessed = {}      for x in L1:         yy = 0         for y in L2:             if yy in DProcessed:                 yy += 1                 continue              # Scan from the start to the end of the words             a = scan(x y)             if a:                  DProcessed[yy] = None                 D[a] = None                 break              # Scan from the end to the start of the words             a = scan(x[::-1] y[::-1])             if a:                  DProcessed[yy] = None                 D[a[::-1]] = None                 break             yy += 1      return list(D.keys())  print contains("12 November 2010 - 1 visitor"                "6 July 2010 - 100 visitors") print contains("Welcome John!"                "Welcome Peter!") print contains("Welcome Sam!"                "Welcome Tom!")  ['1' 'visitor' '-' '2010'] ['Welcome' '!'] ['Welcome' 'm!']  
msg = EmailMessage(subject html_content from_email [to]) msg.content_subtype = "html"  # Main content is now text/html msg.send()  "text/%s" % msg.content_subtype 
soup2 = BeautifulSoup(str(arr[i])) arr2 = soup2.findAll('td')  arr2 = arr[i].findAll('td') if str(j).find("&lt;a href=") &gt; 0:     data.sourceURL = self.getAttributeValue(str(j)'&lt;a href="')  href a = j.find('a' href=True)       #find first &lt;a&gt; with href attribute if a:     data.sourceURL = a['href'] else:     #....  find findAll find findAll 
except: SystemExit KeyboardInterupt urllib2.URLError try:     urllib2.urlopen("http://example.com" timeout = 1) except urllib2.URLError e:     raise MyException("There was an error: %r" % e)  import urllib2 import socket  class MyException(Exception):     pass  try:     urllib2.urlopen("http://example.com" timeout = 1) except urllib2.URLError e:     # For Python 2.6     if isinstance(e.reason socket.timeout):         raise MyException("There was an error: %r" % e)     else:         # reraise the original error         raise except socket.timeout e:     # For Python 2.7     raise MyException("There was an error: %r" % e)  
if __name__ == '__main__':    log_file = 'log_file.txt'    with open(log_file "w") as f:        runner = unittest.TextTestRunner(f)        unittest.main(testRunner=runner)  
&gt;&gt;&gt; s = "Split along words preserve punctuation!" &gt;&gt;&gt; re.sub(r"\s+|\b" '\f' s).split('\f') ['' 'Split' 'along' 'words' '' 'preserve' 'punctuation' '!']  '\f' 
enumerate list stuff = range(50-1) it = enumerate(stuff) print dict(it) dict(it) # first consumes all items so there are none left for the 2nd call  seq = list(enumerate(stuff)) # creates a list of all the items print dict(seq) dict(seq) # you can use it as often as you want  
DISPLAY 
import com.company.actualpackage as shortername  
def rule(f):     f.rule = True     return f  def getRules(cls):     cls.rules = {}     for attr value in cls.__dict__.iteritems():         if getattr(value 'rule' False):             cls.rules[attr] = value     return cls  @getRules class RuleClass:     @rule     def foo(self):         pass  def rule(f):     f.rule = True     return f  class RuleType(type):     def __init__(self name bases attrs):         self.rules = {}         for attr value in attrs.iteritems():             if getattr(value 'rule' False):                 self.rules[attr] = value         super(RuleType self).__init__(name bases attrs)  class RuleBase(object):     __metaclass__ = RuleType  class RuleClass(RuleBase):     @rule     def foo(self):         pass  __init__ rules rules 
MyClass(object) 
func(1020 123**{'k':'a'})  
import subprocess proc = subprocess.Popen('ls'                        shell=True                        stdout=subprocess.PIPE                        ) while proc.poll() is None:     output = proc.stdout.readline()     print output  ls output = proc.communicate()[0] print output  
LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata (col1col2...); 
fact n * fact(n-1) n * fact(n-1) if fact lambda if test 
a = np.asarray(A.todense()) np.bitwise_and(a[1:] a[2:])  
import inspect import functools import json  def memoize_zeroadic_function_to_disk(memo_filename):     def decorator(f):         try:             with open(memo_filename 'r') as fp:                 cache = json.load(fp)         except IOError:             # file doesn't exist yet             cache = {}          source = inspect.getsource(f)          @functools.wraps(f)         def wrapper():             if source not in cache:                 cache[source] = f()                 with open(memo_filename 'w') as fp:                     json.dump(cache fp)              return cache[source]         return wrapper     return decorator  @memoize_zeroadic_function_to_disk(...SOME PATH HERE...) def time_consuming_function():     # lots_of_computing_time to come up with the_result     return the_result  
histogram(a bins=10 range=None normed=False weights=None new=None)  (hist_data bin_edges) = histogram(my_array[:0] weights=my_array[:1])  weights a[i] weights[i] a = [0 1] weights = [10 2]  bins bar(bin_edges[:-1] hist_data)  hist(my_array[:0] weights=my_array[:1])  
echo | socat echo 
import smtplib imaplib email  imap_host = "mail.example.com" smtp_host = "mail.example.com" smtp_port = 587 user = "xyz" passwd = "xyz" msgid = 7 from_addr = "from.me@example.com" to_addr = "to.you@example.com"  # open IMAP connection and fetch message with id msgid # store message data in email_data client = imaplib.IMAP4(imap_host) client.login(user passwd) client.select('INBOX') status data = client.fetch(msgid "(RFC822)") email_data = data[0][1] client.close() client.logout()  # create a Message instance from the email data message = email.message_from_string(email_data)  # replace headers (could do other processing here) message.replace_header("From" from_addr) message.replace_header("To" to_addr)  # open authenticated SMTP connection and send message with # specified envelope from and to addresses smtp = smtplib.SMTP(smtp_host smtp_port) smtp.starttls() smtp.login(user passwd) smtp.sendmail(from_addr to_addr message.as_string()) smtp.quit()  
__init__.py 
from google.appengine.api import urlfetch url = "http://www.google.com/" result = urlfetch.fetch(url) print 'Content-Type: text/html' print '' print result.content  
DATABASES = {     'default': {         'ENGINE': 'django.db.backends.sqlite3'         'NAME': 'mydatabase'     } }  
DocTestRunner run #imports left out code not tested - just to point you in the right direction class MyDocTestRunner(DocTestRunner):     def run(self test compileflags=None out=None clear_globs=True):         if out is None:             handler = None         else:             handler = StreamHandler(out)         logger = logging.getLogger() # root logger (say)         if handler:             logger.addHandler(handler)         try:             DocTestRunner.run(self test compileflags out clear_globs)         finally:             if handler:                 logger.removeHandler(handler)                 handler.close()  DocTestRunner 
repeat perms = product(range(1 7) repeat=3)  
unicode('\xc2\xb7') &gt;&gt;&gt; print(u'\xc2\xb7') Â·  &gt;&gt;&gt; print(u'\uc2b7') ?  &gt;&gt;&gt; print('\xc2\xb7'.decode('utf8')) ·  &gt;&gt;&gt; print('?') ?  
def nw_align(a b replace_func insert delete):      ZERO LEFT UP DIAGONAL = 0 1 2 3      len_a = len(a)     len_b = len(b)      matrix = [[(0 ZERO) for x in range(len_b + 1)] for y in range(len_a + 1)]      for i in range(len_a + 1):         matrix[i][0] = (insert * i UP)      for j in range(len_b + 1):         matrix[0][j] = (delete * j LEFT)      for i in range(1 len_a + 1):         for j in range(1 len_b + 1):             replace = replace_func(a[i - 1] b[j - 1])             matrix[i][j] = max([                 (matrix[i - 1][j - 1][0] + replace DIAGONAL)                 (matrix[i][j - 1][0] + insert LEFT)                 (matrix[i - 1][j][0] + delete UP)             ])      i j = len_a len_b     align_a = ""     align_b = ""      while (i j) != (0 0):         if matrix[i][j][1] == DIAGONAL:             align_a += a[i - 1]             align_b += b[j - 1]             i -= 1             j -= 1         elif matrix[i][j][1] == LEFT:             align_a += "-"             align_b += b[j - 1]             j -= 1         else: # UP             align_a += a[i - 1]             align_b += "-"             i -= 1      return align_a[::-1] align_b[::-1]  
HttpResponse lib.py 
queue_declare 
pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U  pip pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U  grep grep cut sed awk perl -n1 xargs 
'\n' '- ' startswith # if you have a single string split it into lines. L = s.splitlines() # if you (now) have a list of lines grab an iterator so we can continue # iteration where it left off. it = iter(L) # Alternatively if you have a file just use that directly. it = open(....)  # Find the first empty line: for line in it:     # Treat lines of just whitespace as empty lines too. If you don't want     # that do 'if line == ""'.     if not line.strip():         break # Now starts data. for line in it:     if not line.rstrip():         # End of data.         break     if line.startswith('- '):         data.append(line[:2].rstrip())     else:         # misformed data?         raise ValueError "misformed line %r" % (line)  def getblocks(L):     # The list of good blocks (as lists of lines.) You can also make this     # a flat list if you prefer.     data = []     # The list of good lines encountered in the current block     # (but the block may still become bad.)     block = []     # Whether the current block is bad.     bad = 1     for line in L:         # Not in a 'good' block and encountering the block separator.         if bad and not line.rstrip():             bad = 0             block = []             continue         # In a 'good' block and encountering the block separator.         if not bad and not line.rstrip():             # Save 'good' data. Or if you want a flat list of lines             # use 'extend' instead of 'append' (also below.)             data.append(block)             block = []             continue         if not bad and line.startswith('- '):             # A good line in a 'good' (not 'bad' yet) block; save the line             # minus             # '- ' prefix and trailing whitespace.             block.append(line[2:].rstrip())             continue         else:             # A 'bad' line invalidating the current block.             bad = 1     # Don't forget to handle the last block if it's good     # (and if you want to handle the last block.)     if not bad and block:         data.append(block)     return data  &gt;&gt;&gt; L = """hello ... ... - x1 ... - x2 ... - x3 ... ... - x4 ... ... - x6 ... morning ... - x7 ... ... world""".splitlines() &gt;&gt;&gt; print getblocks(L) [['x1' 'x2' 'x3'] ['x4']]  
&gt;&gt;&gt; jsondata = {'a': '' 'b': {'z': True} } &gt;&gt;&gt; for key in jsondata: ...     if type(jsondata[key]) is dict and 'z' in jsondata[key].keys() and jsondata[key]['z'] is True: ...         print 'yes' ... yes &gt;&gt;&gt;  &gt;&gt;&gt; jsondata = {'a': '' 'b': {'z': True} 'c' :{'zz':True}} &gt;&gt;&gt; for key in jsondata: ...     if type(jsondata[key]) is dict and jsondata[key].get('z'False): ...         print 'yes' ... yes &gt;&gt;&gt;  
#... if all_valid(formsets) and form_validated: #...  #... formsets_validated = all_valid(formsets) cross_validated = self.is_cross_valid(form formsets) if formsets_validated and form_validated and cross_validated: #...  def is_cross_valid(self form formsets):   return True  ###admin.py### class ModelAdminWithInline(admin.ModelAdmin):   def is_cross_valid(self form formsets):     return True    def add_view(self request form_url='' extra_context=None):     #modified code    def change_view(self request object_id extra_context=None):     #modified code  class ModelChildInline(admin.TabularInline):   model = ModelChild  class ModelParentAdmin(ModelAdminWithInline):   inlines = [ModelChildInline]    def is_cross_valid(self form formsets):     #Do some cross validation on forms     #For example here is my particular validation:     valid = True      if hasattr(form 'cleaned_data'):           subjects_parent = form.cleaned_data.get("subjects_parent")        #You can access forms from formsets like this:       for formset in formsets:         for formset_form in formset.forms:           if hasattr(formset_form 'cleaned_data'):              subjects_child = formset_form.cleaned_data.get("subjects_child")             delete_form = formset_form.cleaned_data.get("DELETE")              if subjects_child and (delete_form == False):               for subject in subjects_child:                 if subject in subjects_parent:                   valid = False                   #From here you can still report errors like in regular forms:                   if "subjects_child" in formset_form.cleaned_data.keys():                     formset_form._errors["subjects_child"] = ErrorList([u"Subject %s is already selected in parent ModelParent" % subject])                     del formset_form.cleaned_data["subjects_child"]                   else:                     formset_form._errors["subjects_child"] += ErrorList(u"Subject %s is already selected in parent ModelParent" % subject])        #return True on success or False otherwise.       return valid  admin.site.register(ModelParent ModelParentAdmin)  
In [3]: s = datetime.datetime.now() In [4]: x = s In [5]: print s ------&gt; print(s) 2010-04-27 06:37:02.303067 In [6]: print x ------&gt; print(x) 2010-04-27 06:37:02.303067  
getPage urllib.urlopen len() Deferreds getPage Deferred Deferred Deferred def web_request(request)     def callback(data):         HttpResponse(len(data))     d = getPage("http://www.example.org")     d.addCallback(callback)     return d  web_request getPage web_request web_request Deferred getPage Deferreds twisted.internet.defer.inlineCallbacks @defer.inlineCallbacks def web_request(request)     data = yield getPage("http://www.example.org")     HttpResponse(len(data))  d web_request defer.inlineCallbacks Deferred 
import collections import heapq import time  def distance(start end):     steps = 0     for pos in range(len(start)):         if start[pos] != end[pos]:             steps += 1     return steps   class SearchHeap(object):     def __init__(self):         self.on_heap = set()         self.heap = []      def push(self distance word path):         if word in self.on_heap:             return         self.on_heap.add(word)         heapq.heappush(self.heap ((distance len(path)) word path))      def __len__(self):         return len(self.heap)      def pop(self):         return heapq.heappop(self.heap)   class OneLetterGame(object):     _word_data = None      def __init__(self dict_path):         self.dict_path = dict_path      def run(self start_word end_word):         start_time = time.time()         self._word_data = collections.defaultdict(list)         if len(start_word) != len(end_word):             print 'words of different length; no path'             return          found_start found_end = self._load_words(start_word end_word)         if not found_start:             print 'start word %r not found in dictionary' % start_word             return         if not found_end:             print 'end word %r not found in dictionary' % end_word             return          search_start_time = time.time()         path = self._shortest_path(start_word end_word)         search_time = time.time() - search_start_time         print 'search time was %.4f seconds' % search_time          if path:             print path         else:             print 'no path found from %r to %r' % (start_word end_word)          run_time = time.time() - start_time         print 'total run time was %.4f seconds' % run_time      def _load_words(self start_word end_word):         found_start found_end = False False         length = len(start_word)         with open(self.dict_path) as words:             for word in words:                 word = word.strip()                 if len(word) == length:                     if start_word == word: found_start = True                     if end_word == word: found_end = True                     for bucket in self._buckets_for(word):                         self._word_data[bucket].append(word)         return found_start found_end      def _shortest_path(self start_word end_word):         heap = SearchHeap()         heap.push(distance(start_word end_word) start_word (start_word))         while len(heap):             dist word path = heap.pop()             if word == end_word:                 return path             for neighbor in self._neighbors_of(word):                 heap.push(                     distance(neighbor end_word)                      neighbor                      path + (neighbor))         return ()      def _buckets_for(self word):         buckets = []         for pos in range(len(word)):             front back = word[:pos] word[pos+1:]             buckets.append(front+'*'+back)         return buckets      def _neighbors_of(self word):         for bucket in self._buckets_for(word):             for word in self._word_data[bucket]:                 yield word  if __name__ == '__main__':     import sys     if len(sys.argv) not in [3 4]:         print 'Usage: python one_letter_game.py start_word end_word'     else:         matt = OneLetterGame(dict_path = '/usr/share/dict/words')         matt.run(*sys.argv[1:])  % python /tmp/one_letter_alex.py canoe happy The shortest path (found in 51.98 sec.) is: =&gt; canoe -- canon -- caxon -- taxon -- taxor -- taxer -- taper -- paper -- papey -- pappy -- happy  % python /tmp/one_letter_matt.py canoe happy search time was 0.0020 seconds ('canoe' 'canon' 'caxon' 'taxon' 'taxor' 'taxer' 'taper' 'paper' 'papey' 'pappy' 'happy') total run time was 0.2416 seconds  
def method6():   return ''.join([`num` for num in xrange(loop_count)])  
datetime &gt;&gt;&gt; s='2005-08-11T16:34:33Z' &gt;&gt;&gt; t=datetime.datetime(20090401) &gt;&gt;&gt; t.isoformat() '2009-04-01T00:00:00' &gt;&gt;&gt; s &lt; t Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: can't compare datetime.datetime to str &gt;&gt;&gt; s &lt; t.isoformat() True &gt;&gt;&gt; z='2009-10-01T18:20:12' &gt;&gt;&gt; z &lt; t.isoformat() False  .isoformat() &gt;&gt;&gt; datetime.datetime.strptime(s '%Y-%m-%dT%H:%M:%SZ') datetime.datetime(2005 8 11 16 34 33)  
elements.append(Flowable1) elements.append(Flowable2)  c = Canvas(path) f = Frame(fx fyfwfhshowBoundary=0)  # compute the available height for the spacer sheight = f._aH - (Flowable1.wrap(f._aWf._aH)[1] + Flowable2.wrap(f._aWf._aH)[1])  # create spacer s = Spacer(width=0 height=sheight)  # insert the spacer between the two flowables elements.insert(1s)  # create a frame from the list of elements f.addFromList(elementsc)  c.save()  
&gt;&gt;&gt; from lxml import etree &gt;&gt;&gt; q = etree.fromstring('&lt;xml&gt;&lt;hello&gt;a&lt;/hello&gt;&lt;x&gt;&lt;hello&gt;b&lt;/hello&gt;&lt;/x&gt;&lt;/xml&gt;') &gt;&gt;&gt; q.findall('hello')     # Tag name first level only. [&lt;Element hello at 414a7c8&gt;] &gt;&gt;&gt; q.findall('.//hello')  # XPath recursive. [&lt;Element hello at 414a7c8&gt; &lt;Element hello at 414a818&gt;]  
&gt;&gt;&gt; x='command ". / * or any other char like this" some_param="string param" some_param2=50' &gt;&gt;&gt; &gt;&gt;&gt; re.findall('\w+\=\d+|\w+\="[^"]+"|"[^"]+"|\w+'x) ['command' '". / * or any other char like this"' 'some_param="string param"' 'some_param2=50'] &gt;&gt;&gt;  
L1 = L + [i1] L2 = L + [i2]  L1 = L[:]       #make a copy of L L1.append(i1)  
pycurl.HEADERFUNCTION import pycurl import cStringIO import re  curl = pycurl.Curl()  buff = cStringIO.StringIO() hdr = cStringIO.StringIO()  curl.setopt(pycurl.URL 'http://example.org') curl.setopt(pycurl.WRITEFUNCTION buff.write) curl.setopt(pycurl.HEADERFUNCTION hdr.write) curl.perform()  print "status code: %s" % curl.getinfo(pycurl.HTTP_CODE) # -&gt; 200  status_line = hdr.getvalue().splitlines()[0] m = re.match(r'HTTP\/\S*\s*\d+\s*(.*?)\s*$' status_line) if m:     status_message = m.groups(1) else:     status_message = ''  print "status message: %s" % status_message # -&gt; "OK"  
def comma_separated(lst):     """     &gt;&gt;&gt; comma_separated(['a'])     'a'     &gt;&gt;&gt; comma_separated(['a' 'b'])     'a and b'     &gt;&gt;&gt; comma_separated(['a' 'b' 'c'])     'a b and c'     """     if len(lst) == 1:         return lst[0]     comma_part = " ".join(lst[:-1])     return "%s and %s" % (comma_part lst[-1])  if __name__ == "__main__":     import doctest     doctest.testmod()  
lseek(2) iterator 
index() def authenticate(func):     def call(*args **kwargs):         if user['authenticated'] is True:             return func(*args**kwargs)         else:             return redirect_to(controller='login' action='index')     return call  authenticate() @authenticate def index(self):     return render('/index.mako' )  index() call() func 
__import__() import __import__() __import__() import import pkg import pkg.mod from pkg import mod mod2 from pkg.mod import func func2 from pkg.mod import submod  import pkg import pkg.mod pkg.mod.func() import pkg mod __import__() pkg pkg = __import__('pkg') pkg = __import__('pkg.mod')  import __import__() tmp = __import__('pkg') mod = tmp.mod mod2 = tmp.mod2  pkg mod mod2 __import__() mod mod2 import tmp = __import__('pkg' fromlist=['mod' 'mod2']) mod = tmp.mod mod2 = tmp.mod2  __import__() pkg.mod pkg.mod2 pkg mod mod2 __import__() import tmp = __import__('pkg.mod' fromlist=['submod']) submod = tmp.submod  tmp pkg pkg.mod submod import . __import__() __import__() import pkg as p from pkg import mod as m __import__() as import 
os.path os path os sys.modules os.path sys.modules sys.modules sys.modules os path sys.modules['os.path'] = path import os.path os.path os os import os.path os.path os import os os.path import twisted twisted.spread os.name os.path __init__.py 
def foo(x):    for i in xrange(10):       yield x * i ... for x in foo(5):    print(x)  import java.util.Iterator; import java.util.Iterable;  class Foo implements Iterable&lt;Integer&gt; {    public final int x;     public Foo(int x) {       this.x = x;    }     public Iterator&lt;Integer&gt; iterate() {       return new Iterator&lt;Integer&gt; {          int i = 0;           public boolean hasNext() {             return i &lt; 10;          }           public Integer next() {             return x * (i ++);          }       };    } } ... for (int x : new Foo(5)) {    System.out.println(x); }  java.util.HashSet 
tostring struct float64 * 
a[ij] a[i][j] [] 
'000' split('') color = '255 255 255' red green blue = color.split('') red = int(red) green = int(green) blue = int(blue)  color = '128 128 128' red green blue = [int(c) for c in color.split('')]  
import MySQLdb conn = MySQLdb.connect(host='localhost' user='u' passwd='p' db='mydb') curs = conn.cursor() uids = [123443211111] qry = ("""SELECT cheese              FROM cheeseshop             WHERE id IN (%s)""" % ''.join(['%s']*len(uids))) # 'SELECT cheese FROM cheeseshop WHERE id IN (%s%s%s)' curs.execute(qry uids) curs.fetchone() # ...  import sqlite3 conn = sqlite3.connect(':memory:') curs = conn.cursor() uids = [123443211111] qry = ("""SELECT cheese              FROM cheeseshop             WHERE id IN (%s)""" % ''.join('?'*len(uids))) # 'SELECT cheese FROM cheeseshop WHERE id IN (???)' curs.execute(qry uids) curs.fetchone() # ...  
mylist.append(5) mydict[key]=value key value in 
ImageDraw 
X*n 'a'*10 list = [set() for x in xrange(n)]  
class Choices(models.Model):   description = models.CharField(max_length=300)  class Profile(models.Model):   user = models.ForeignKey(User blank=True unique=True verbose_name='user')   choices = models.ManyToManyField(Choices)  class ProfileForm(forms.ModelForm):   Meta:     model = Profile     exclude = ['user']  if request.method=='POST':   form = ProfileForm(request.POST)   if form.is_valid():     profile = form.save(commit=False)     profile.user = request.user     profile.save() else:   form = ProfileForm()  return render_to_response(template_name {"profile_form": form} context_instance=RequestContext(request))  
exec exec exec('python blibble.py' $output $ret_code);  $ret_code $output 
defaultdict &gt;&gt;&gt; from collections import defaultdict &gt;&gt;&gt; h = defaultdict(list) &gt;&gt;&gt; h['a'].append('b') &gt;&gt;&gt; h defaultdict(&lt;type 'list'&gt; {'a': ['b']})  defaultdict setdefault 
add2 = ''.join(chr(ord(c) + 2) if c not in "\n\r " else c for c in text)  
make install setup.py setup.py 
def a():     pass  a.w = 'www' print a.w  class a:     w = 'www'  print a.w  class b:     def __init__(self):         self.w = 'www'  c = b() print c.w  
__init__ GET &gt;&gt;&gt; s.__dict__ {'GET': &lt;bound method Sub.get of &lt;__main__.Sub object at 0xb70896cc&gt;&gt;}  GET get GET get Sub.GET(instance) Sub GET Sub.get(instance) GET get GET get gc __del__ pickle class MethodAliasingType(type):     def __init__(self name bases attrs):         # attrs is the dict of attributes that was used to create the         # class 'self' modifying it has no effect on the class.         # So use setattr() to set the attribute.         for k v in attrs.iteritems():             if not hasattr(self k.upper()):                 setattr(self k.upper() v)         super(MethodAliasingType self).__init__(name bases attrs)  class Base(object):     __metaclass__ = MethodAliasingType  class Sub(Base):     def get(self):         pass  Sub.get Sub.GET &gt;&gt;&gt; Sub.get &lt;unbound method Sub.get&gt; &gt;&gt;&gt; Sub.GET &lt;unbound method Sub.get&gt; &gt;&gt;&gt; Sub().get &lt;bound method Sub.get of &lt;__main__.Sub object at 0xb708978c&gt;&gt; &gt;&gt;&gt; Sub().GET &lt;bound method Sub.get of &lt;__main__.Sub object at 0xb7089a6c&gt;&gt; &gt;&gt;&gt; Sub().__dict__ {}  
glpk.so make gcc4.2 distutils gcc-4.0 distutils distutils ./configure x86_64 
import collections import itertools  def build_catalog(L):     counter = itertools.count().next     names = collections.defaultdict(counter)     result = []     for t in L:         new_t = [ names[item] for item in t ]         result.append(new_t)     catalog = dict((name idx) for idx name in names.iteritems())     return result catalog  &gt;&gt;&gt; input = [('dog' 'dog' 'cat' 'mouse') ('cat' 'ruby' 'python' 'mouse')] &gt;&gt;&gt; outputlist outputmapping = build_catalog(input) &gt;&gt;&gt; outputlist [[0 0 1 2] [1 3 4 2]] &gt;&gt;&gt; outputmapping {0: 'dog' 1: 'cat' 2: 'mouse' 3: 'ruby' 4: 'python'}  
SCRIPT_NAME django.root SCRIPT_NAME .wsgi _application = django.core.handlers.wsgi.WSGIHandler()  def application(environ start_response):     os.environ['SCRIPT_NAME'] = '/myproj/'     return _application(environ start_response)  
optparse.OptionParser class Conflict(object):     __slots__ = ("combination" "message" "parser")      def __init__(self combination message parser):         self.combination = combination         self.message = str(message)         self.parser = parser      def accepts(self options):         count = sum(1 for option in self.combination if hasattr(options option))         return count &lt;= 1  class ConflictError(Exception):     def __init__(self conflict):         self.conflict = conflict      def __str__(self):         return self.conflict.message  class MyOptionParser(optparse.OptionParser):     def __init__(self *args **kwds):         optparse.OptionParser.__init__(self *args **kwds)         self.conflicts = []      def set_not_allowed(self combination message):         self.conflicts.append(Conflict(combination message self))      def parse_args(self *args **kwds):         # Force-ignore the default values and parse the arguments first         kwds2 = dict(kwds)         kwds2["values"] = optparse.Values()         options _ = optparse.OptionParser.parse_args(self *args **kwds2)          # Check for conflicts         for conflict in self.conflicts:             if not conflict.accepts(options):                 raise ConflictError(conflict)          # Parse the arguments once again now with defaults         return optparse.OptionParser.parse_args(self *args **kwds)  ConflictError parse_args try:     options args = parser.parse_args() except ConflictError as err:     parser.error(err.message)  
\b[a-zA-Z]\w*  
d.update(p) class Test:     def test(self p d = None):         if d is None:             d = {}         d.update(p)         return d  
def check(somelist player):   return somelist.count(player) == 3  def check(somelist player):   return somelist.count(player) == len(somelist)  3 def check(somelist player):   return all(x==player for x in somelist)  player if list x = list(thetuple) list board for i in range(3):   if check([row[i] for row in board] player):     return player if check([row[i] for i row in enumerate(board)] player):     return player if check([row[2-i] for i row in enumerate(board)] player):     return player  enumerate 
client lambda passIf = lambda client=client: client.returncode(CMD2) == 0  def createLambda(client):     return lambda: client.returncode(CMD2) == 0 #... passIf = createLambda(client)  client createLambda 
person/    __init__.py    person.py  person person.person import person.person p= person.person.Person('Tim' 42)  person __init__.py 
// Javascript var divs = document.getElementsByTagName("div")  // jQuery $("div")  function addEvent(obj evType fn useCapture){     if (obj.addEventListener) { // standards-based browsers         obj.addEventListener(evType fn useCapture);         return true;     } else if (obj.attachEvent) { // IE         var r = obj.attachEvent("on"+evType fn);         return r;     } else { // some unknown browser         alert("Handler could not be attached");     } }  // Javascript var button = document.getElementById("buttonID"); addEvent(button "click" function() { alert("clicked"); } false);  // jQuery (contains code similar to above function to handle browser differences) $("#buttonID").click(function() { alert("clicked"); });  
__new__ __init__ class NamedInteger(int):      def __new__(cls value name='pony'):         inst = super(NamedInteger cls).__new__(cls value)         inst.name = name         return inst      def __str__(self):         return self.name  x = NamedInteger(5) print x + 3                 # =&gt; 8    print str(x)                # =&gt; pony x = NamedInteger(3 "foo")   print x + 3                 # =&gt; 6 print str(x)                # =&gt; foo  
? response['X-Accel-Redirect'] = url  url response['X-Accel-Redirect'] = url.encode('utf-8')  Content-Disposition 
d={} d.clear() d={} d d d.clear() d d.clear() d turds d.clear() 
root.after(10*1000 root.quit)  
class UserProfileIndex(SearchIndex):     text = CharField(document=True use_template=True)     user = CharField(model_attr='user')     twitter_account = CharField(model_attr='twitter_account')  {{ object.user.get_full_name }} {{ object.twitter_account}}  
zip_safe=False setup() setup.py zip_safe=False pdb 
def clean(self data initial=None):     try:         if data.size &gt; somesize:             raise ValidationError('File is too big')          (junk ext) = os.path.splitext(data.name)         if not ext in ('.jpg' '.gif' '.png'):             raise ValidationError('Invalid file type')      except AttributeError:         raise ValidationError(self.error_messages['invalid'])      return FileField.clean(self data initial)  
json_raw= raw.readlines() json_object = json.loads(json_raw[0])  json_object = json.load(raw)  json_object[0] for song in json_object[0]: json_object[0][song] 
| re.compile("abc|xyz")  
if __name__ == "__main__":     firstFunctionEver()  
if x0 &gt; x1:     x0 x1 = x1 x0     y0 y1 = y1 y0  switched = False if x0 &gt; x1:     switched = True     x0 x1 = x1 x0     y0 y1 = y1 y0  if switched:     line.reverse()  
is_set() False False intervalTime count self.iterations 0     while not self.finished.is_set() and (self.iterations &lt;= 0 or count &lt; self.iterations):  
json.decoder.JSONDecoder simplejson json.loads json.decoder def JSONObject &gt;&gt;&gt; import demjson &gt;&gt;&gt; demjson.decode('{suggestion:[{query:"London"interpretation: ...') {u'suggestion': [{u'query': u'London' u'operation': 2 u'interpretation': ...  
set_attributes column = gtk.TreeViewColumn('Pixbuf and text') cell1 = gtk.CellRenderText() cell2 = gtk.CellRenderPixbuf() column.pack_start(cell1 True) column.pack_start(cell2 False) column.set_attribute(cell1 'text' 0) # the first column contains the text column.set_attribute(cell2 'pixbuf' 1) # the second column contains the pixbuf  class MyObject:     def __init__(self text pixbuf):         self.text = text         self.pixbuf = pixbuf  def cell1_cb(col cell model iter):     obj = model.get_value(iter)     cell.set_property('text' obj.text)  def cell2_cb(col cell model iter):     obj = model.get_value(iter)     cell.set_property('pixbuf' obj.pixbuf)  column = gtk.TreeViewColumn('Pixbuf and text') cell1 = gtk.CellRenderText() cell2 = gtk.CellRenderPixbuf() column.pack_start(cell1 True) column.pack_start(cell2 False) column.set_cell_data_func(cell1 cell1_cb) column.set_cell_data_func(cell2 cell2_cb)  
from django.db.models.loading import get_models get_app app = get_app('myappname') models = get_models(app)  
os.path.join(path '') os.path.join(path '' '') os.path.join(path_with_a_trailing_slash '') 
class Base(object):     @property     def path(self):         raise NotImplementedError   class SubClass(Base):     path = 'blah'  
self.recipientIMSI self.recipientMSISDN int print type(self.recipientIMSI) type(self.recipientMSISDN)  eval eval eval exec 
ssh 
list() [] &gt;&gt;&gt; import __builtin__ &gt;&gt;&gt; __builtin__.list = set &gt;&gt;&gt; list() set([]) &gt;&gt;&gt; [] []  [] list() __init__ __new__ 
open(file 'wb') data.replace('\r''') exec execfile 
for hook in settings.HOOKS :     try :         __import__(hook)     except ImportError as e :         print "Got import err !" e  for log_hook in settings.LOG_HOOKS :     try :         __import__(log_hook)     except ImportError as e :         raise e  try... except 
import gzip  import os  import codecs   data = gzip.open("file.gz" "wb")  data.write('foo\x1d\x1cbar\nbaz')  data.close()   print list(codecs.getreader('utf-8')(gzip.open('file.gz')))  print list(os.popen('zcat file.gz'))  print list(gzip.open('file.gz'))   [u'foo\x1d' u'\x1c' u'bar\n' u'baz'] ['foo\x1d\x1cbar\n' 'baz'] ['foo\x1d\x1cbar\n' 'baz']  
islice def islice(iterable *args):     # islice('ABCDEFG' 2) --&gt; A B     # islice('ABCDEFG' 2 4) --&gt; C D     # islice('ABCDEFG' 2 None) --&gt; C D E F G     # islice('ABCDEFG' 0 None 2) --&gt; A C E G     s = slice(*args)     it = iter(xrange(s.start or 0 s.stop or sys.maxint s.step or 1))     nexti = next(it)     for i element in enumerate(iterable):         if i == nexti:             yield element             nexti = next(it)  grouper from __future__ import division  from itertools import izip_longest def grouper(n iterable fillvalue=None):     "grouper(3 'ABCDEFG' 'x') --&gt; ABC DEF Gxx"     args = [iter(iterable)] * n     return izip_longest(fillvalue=fillvalue *args)  reducedVec = [] for chunk in grouper(ratio vec):     if sum(1 for x in chunk if x == 'F') &gt; ratio / 3:         reducedVec.append('F')     else:         reducedVec.append('T')  grouper 
d specs = {} for path spec in paths:     parts = path.split('.')     d = specs     for p in parts[:-1]:         d = d.setdefault(p {})     d[parts[-1]] = spec  ObjN partN specs = {} for path spec in paths:     [obj part] = path.split('.')     specs.setdefault(obj {})[part] = spec  
Node 
import os sys; sys.path.append(os.path.dirname(__file__))  
And(?!rea$).*  if re.match(r"And(?!rea$).*" subject):     # Successful match      # Note that re.match always anchor the match     # to the start of the string. else:     # Match attempt failed  (?!Andrea$)And.*  (?!excludeRegex$)includeRegex  
with f = open("hello.txt" "wb") try:     f.write("Hello Python!\n") finally:     f.close()  try.. except... with 
from nose.tools import assert_equal from mock import Mock  class TestLoginRequired(object):     def test_no_user(self):         func = Mock()         decorated_func = login_required(func)         request = prepare_request_without_user()         response = decorated_func(request)         assert not func.called         # assert response is redirect      def test_bad_user(self):         func = Mock()         decorated_func = login_required(func)         request = prepare_request_with_non_authenticated_user()         response = decorated_func(request)         assert not func.called         # assert response is redirect      def test_ok(self):         func = Mock(return_value='my response')         decorated_func = login_required(func)         request = prepare_request_with_ok_user()         response = decorated_func(request)         func.assert_called_with(request)         assert_equal(response 'my response')  
for /f "delims=" %A in ('&lt;insert command here&gt;') do @set &lt;variable name&gt;=%A  for /f "delims=" %A in ('time /t') do @set my_env_var=%A  
any [s for s in strings if any(re.match(f s) for f in filters)]  
PATH $env:path += ';C:\Python26\Lib\site-packages\PyQt4\bin'  
data = [[None]*5]*5  &gt;&gt;&gt; data = [[None]*5 for _ in range(5)]  &gt;&gt;&gt; data[0][0] = 'Cell A1' &gt;&gt;&gt; print data [['Cell A1' None None None None]  [None None None None None]  [None None None None None]  [None None None None None]  [None None None None None]]  
None DoesntCompute InvalidType InvalidArgument DoesntCompute 
attr=(o.attr for o in objsm)  
sheet.cell(rc).value cell = sheet.cell(rc) cell_value = cell.value if cell.ctype in (23) and int(cell_value) == cell_value:     cell_value = int(cell_value)  
U+002D &gt;&gt;&gt; import test-1   File "&lt;stdin&gt;" line 1     import test-1                ^ SyntaxError: invalid syntax &gt;&gt;&gt; import test_1 &gt;&gt;&gt;  
17 != '17' 
append i += 1 i i it.__iadd__(1) 
msg.attach(msg1)  
def cfor(firsttestupdate):     while test(first):         yield first         first = update(first)  def example(blah):     print "do some stuff"     for i in cfor(0lambda i:i&lt;blahlambda i:i+1):         print i     print "done"  complicated_iterator 
from os import environ environ['CFLAGS'] = '-I/path/to/my/custom/lib' environ['LDFLAGS'] = '-Lpath/to/my/custom/lib -lcustomlib' import pyximport pyximport.install()  
# ======================================================================= # Monkey patch ElementTree import xml.etree.ElementTree as ET  def _serialize_xml(write elem encoding qnames namespaces):     tag = elem.tag     text = elem.text     if tag is ET.Comment:         write("&lt;!--%s--&gt;" % ET._encode(text encoding))     elif tag is ET.ProcessingInstruction:         write("&lt;?%s?&gt;" % ET._encode(text encoding))     else:         tag = qnames[tag]         if tag is None:             if text:                 write(ET._escape_cdata(text encoding))             for e in elem:                 _serialize_xml(write e encoding qnames None)         else:             write("&lt;" + tag)             items = elem.items()             if items or namespaces:                 if namespaces:                     for v k in sorted(namespaces.items()                                        key=lambda x: x[1]):  # sort on prefix                         if k:                             k = ":" + k                         write(" xmlns%s=\"%s\"" % (                             k.encode(encoding)                             ET._escape_attrib(v encoding)                             ))                 #for k v in sorted(items):  # lexical order                 for k v in items: # Monkey patch                     if isinstance(k ET.QName):                         k = k.text                     if isinstance(v ET.QName):                         v = qnames[v.text]                     else:                         v = ET._escape_attrib(v encoding)                     write(" %s=\"%s\"" % (qnames[k] v))             if text or len(elem):                 write("&gt;")                 if text:                     write(ET._escape_cdata(text encoding))                 for e in elem:                     _serialize_xml(write e encoding qnames None)                 write("&lt;/" + tag + "&gt;")             else:                 write(" /&gt;")     if elem.tail:         write(ET._escape_cdata(elem.tail encoding))  ET._serialize_xml = _serialize_xml  from collections import OrderedDict  class OrderedXMLTreeBuilder(ET.XMLTreeBuilder):     def _start_list(self tag attrib_in):         fixname = self._fixname         tag = fixname(tag)         attrib = OrderedDict()         if attrib_in:             for i in range(0 len(attrib_in) 2):                 attrib[fixname(attrib_in[i])] = self._fixtext(attrib_in[i+1])         return self._target.start(tag attrib)  # =======================================================================  tree = ET.parse(pathToFile OrderedXMLTreeBuilder())  
$ python &lt;untarred_directory&gt;/virtualenv.py venv  . source $ . venv/bin/activate  $ easy_install pip  $ pip install -e pkg1  pkg1 site-packages $ cd pkg1 $ python setup.py develop  pip install -e B $ cd pkg1 $ python setup.py --help $ python setup.py --help-commands  --index-url -e vcs+... 
Mock class User(object):     def __init__(self):         self.roles = []   class UserService(object):     def get_current_user(self):         return None # get from environment database etc.      current_user = property(get_current_user)   class AppService(object):     def __init__(self userService):         self.userService = userService      def can_write(self):         return 'admin' in self.userService.current_user.roles  can_write AppService class AppServiceTests(unittest.TestCase):     def test_can_write(self):         user = User()          @patch_object(UserService 'current_user' user)         def can_write():             appService = AppService(UserService())             return appService.can_write()          user.roles = ['admin']         self.assertTrue(can_write())          user.roles = ['user']         self.assertFalse(can_write())  current_user UserService 
start = max(0i-halflen)  start = i - halflen if i &gt; halflen else 0  end = min(i+halflen+1len2)  end = i+halflen+1 if i+halflen+1 &lt; len2 else len2  minlen = min(len1len2) for same in xrange(minlen+1):     if (str1[:same] != str2[:same]):         break same -= 1  for same in xrange(minlen):     if str1[same] != str2[same]:         break  '' != '' same import psyco psyco.full()  index = workstr2.find(str1[i]startend)  index = -1 for j in xrange(startend):     if workstr2[j] == str1[i]:         index = j         break  
&gt;&gt;&gt; &gt;&gt;&gt; stringA = "xxxxxxFoundAaaaaaaaaaaaaaaFoundBxxxxxxx" &gt;&gt;&gt; stringB = "FoundA" &gt;&gt;&gt; stringC = "FoundB" &gt;&gt;&gt; &gt;&gt;&gt; import re &gt;&gt;&gt; re.search(re.escape(stringB)+"(.*?)"+re.escape(stringC)stringA).group(1) 'aaaaaaaaaaaaaa' &gt;&gt;&gt;  
&lt;%def&gt; ${test()} 
int(round(123-2))  
SharableUserAsset user = users.get_current_user() assets = SharableUserAsset.gql("WHERE users = :1" user)  ListProperty User .email() 
GetDriveType win32file import win32file isNetworkDrive = win32file.GetDriveType("Z:\\") == win32file.DRIVE_REMOTE  GetLogicalDriveStrings() win32api 
chosenCar &gt;&gt;&gt; P.utility={'chosenCar':25000'anotherCar':24000'yetAnotherCar':24500} &gt;&gt;&gt; operator.itemgetter('chosenCar')(operator.attrgetter('utility')(P)) 25000  key &gt;&gt;&gt; def keyfunc(P):     util = operator.attrgetter('utility')(P)     return operator.itemgetter('chosenCar')(util)  &gt;&gt;&gt; USpeople.sort(key=keyfuncreverse=True)  timeit 
updateWidgets() self.widgets for workOnWidgets() &gt;&gt;&gt; l=[123] &gt;&gt;&gt; for i in l: ...    l=[] ...    print(i) ... 1 2 3  &gt;&gt;&gt; l=[123] &gt;&gt;&gt; for i in l: ...    l[2]=0 ...    print(i) ... 1 2 0  
from django.db import connection connection.connection.text_factory = lambda x: unicode(x "utf-8" "ignore")  
root.configure(background='black')  &lt;widget&gt;.configure(background='black')  
_ _ _ = gettext.gettext # ... print _('This is a translatable string.')  _('...') _ unused _ unused_ name unused_surname salutation = person_data print "Hello %s %s!" % (salutation name)  person_data pylint _ unused_... unused_something 
interp &gt;&gt;&gt; from scipy import interp arange exp &gt;&gt;&gt; x = arange(010) &gt;&gt;&gt; y = exp(-x/3.0) &gt;&gt;&gt; interp([910] x y) array([ 0.04978707  0.04978707])  from scipy.interpolate import interp1d from scipy import arange array exp  def extrap1d(interpolator):     xs = interpolator.x     ys = interpolator.y      def pointwise(x):         if x &lt; xs[0]:             return ys[0]+(x-xs[0])*(ys[1]-ys[0])/(xs[1]-xs[0])         elif x &gt; xs[-1]:             return ys[-1]+(x-xs[-1])*(ys[-1]-ys[-2])/(xs[-1]-xs[-2])         else:             return interpolator(x)      def ufunclike(xs):         return array(list(map(pointwise array(xs))))      return ufunclike  extrap1d x = arange(010) y = exp(-x/3.0) f_i = interp1d(x y) f_x = extrap1d(f_i)  print f_x([910])  [ 0.04978707  0.03009069]  
prioritylist = ('r''u''d''l') for direction in prioritylist:   if move(direction location): break  def move(directionlocation):     try:         -snip-         return True newlocation     except Movementerror:         return False location  prioritylist = ('r''u''d''l') for direction in prioritylist:   success newlocation = move(direction location)   if success: break  else for break for 
func2 func3 def func1(**qwargs):     d = dict(arg=default)     d.update(qwqargs)     func2(**d)     func3(**qwargs)  arg qwargs default default arg qwargs def func1(**qwargs):     d = dict(qwargs arg=default)     func2(**d)     func3(**qwargs)  dict 
urllib.urlopen urllib2.urlopen URLError try:     h = urllib2.urlopen(&quot;http://google.com/&quot;) except urllib2.URLError as e:     # do something with the exception e.g.     print 'Error:' e.reason  try:     h = urllib2.urlopen(&quot;http://google.com/&quot;) except urllib2.URLError:     print 'An error occurred.'  URLError IOError socket.error OSError 
class Ic(object):   attributes = ['id' 'first_name' 'last_name' 'name' 'name_url'               'email' 'password' 'password_salt' 'picture_id']    def __init__(self): ...    # and other methods that set all the attributes on self    def updater(self):     sqlbase = 'UPDATE members SET %s WHERE whateveryouwanthere'     setpieces = []     values = []     for atr in self.attributes:       setpieces.append('%s = ?' % atr)       values.append(getattr(self atr None))     return sqlbase % ' '.join(setpieces) values  Ic sql values = theobj.updater()  mycursor.execute(sql values) whatreveryouwanthere 
render def render(self context):     qs = self.queryset.resolve(context)     return render_to_string(self.template { 'queryset': qs } )  {% for m in queryset.month %}     &lt;td&gt;queryset.revenue&lt;/td&gt;  {% endfor %}  {{ queryset.revenue }} m for django.contrib.comments 
http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=['72758']                                                              ^^     ^^  findall() 
DATABASE_NAME 
&gt;&gt;&gt; data = 'S\x00e\x00r\x00i\x00e\x00s\x00' &gt;&gt;&gt; data.decode('utf-16') u'Series'  
from pyPdf import PdfFileWriter PdfFileReader  inputStream = file('input.pdf' 'rb') blankStream = file('C:\\BLANK.pdf' 'rb') output = PdfFileWriter() input = PdfFileReader(inputStream) blank = PdfFileReader(blankStream)  ...  del input # PdfFileReader won't mess with the stream anymore inputStream.close() del blank blankStream.close()  # Write the output to pdf. outputStream = file('input.pdf' 'wb') output.write(outputStream) outputStream.close()  
// data.json 
from django.http import HttpResponse return HttpResponse(str(var))  
&gt;&gt;&gt; from lxml import etree &gt;&gt;&gt; treetop = etree.fromstring(anxmlstring)  &gt;&gt;&gt; othertree = etree.parse(somexmlurl)  somexmlurl etree 
config = pyglet.gl.Config(sample_buffers=1 samples=4) window = pyglet.window.Window(config=config resizable=True)   
skip_archive=True library.zip data_files 
int PyInt_AsLong() PyInt_FromLong() PyObject_IsTrue() &lt; 0 Py_XINCREF() create_texture args create_texture create_texture Py_XINCREF() PyEval_CallObject() PyObject_CallFunctionObjectArgs(create_texture arglist NULL) PyObject_CallFunction(create_texture "O" arglist) Py_BuildValue("s" "frame_buffer") "frame_buffer" PyString_FromString() PyObject_GetAttr() PyObject_GetAttrString() const char* PyTrue_IsTrue() Py_BuildValue() PyObject_GetAttr() 
class MyFunc(object):     funcs = []     def __init__(self func):         self.funcs.append(func)  @MyFunc def foo():     return 5  @MyFunc def bar():     return 10  def quux():     # Not decorated so will not be in MyFunc     return 20  for func in MyFunc.funcs:     print func()  5 10  
def format_value(v indent):     if isinstance(v list):          return ''.join([format_value(item indent) for item in v])     elif isinstance(v dict):          return format_dict(v indent)     elif isinstance(v str):          return ("   " * indent) + v + "\n"  def format_dict(d indent=0):     res = ""     for key in d:         res += ("   " * indent) + key + ":\n"         res += format_value(d[key] indent + 1)     return res  
import unittest  # stores 5 user-entered numbers (strings for now) in a list def getFiveNums():     numbers = []     print "Howdy. Please enter five numbers hit &lt;enter&gt; after each one"     for i in range(5):         newNum = input("Please type in a number:")         numbers.append(newNum)     return numbers  def mock_input(dummy_prompt):     return 1  class TestGetFiveNums(unittest.TestCase):     def setUp(self):         self.saved_input = __builtins__.input         __builtins__.input = mock_input      def tearDown(self):         __builtins__.input = self.saved_input      def testGetFiveNums(self):         printed_lines = getFiveNums()         self.assertEquals(printed_lines [1 1 1 1 1])  if __name__ == "__main__":     unittest.main()  
PlaySound winsound.PlaySound('siren.wav' winsound.SND_FILENAME)  siren = base64.b64decode('''     &lt;base64-encoded data&gt;     ''') winsound.PlaySound(siren winsound.SND_MEMORY)  siren siren 
(defun shell-compile ()   (interactive)   (save-buffer)   (shell-command (concat "python " (buffer-file-name)))   (if (&lt;= (* 2 (window-height)) (frame-height))       (enlarge-window 20)     nil))  
exec eval eval('lambda: a' ...)  eval(compile('lambda: a' '&lt;stdin&gt;' 'eval') ...)  compile a &gt;&gt;&gt; c= compile('lambda: a' '&lt;stdin&gt;' 'eval') &gt;&gt;&gt; c.co_consts[0] &lt;code object &lt;lambda&gt; at 0x7f36577330a8 file "&lt;stdin&gt;" line 1&gt; &gt;&gt;&gt; dis.dis(c.co_consts[0])   1           0 LOAD_GLOBAL              0 (a)               3 RETURN_VALUE          a exec eval 
&gt;&gt;&gt; import json &gt;&gt;&gt; jsoninput = json.loads(jsonoutput) &gt;&gt;&gt; print jsoninput {u'1': u'une personne \xe9m\xe9rite'} &gt;&gt;&gt; print jsoninput['1'] une personne émérite  
#!/usr/bin/env python2.5 
{{ sqs.spelling_suggestion }}  python manage.py update_index  
class StaticContentHandler(webapp.RequestHandler):   def output_content(self content serve=True):     self.response.headers['Content-Type'] = content.content_type     last_modified = content.last_modified.strftime(HTTP_DATE_FMT)     self.response.headers['Last-Modified'] = last_modified     self.response.headers['ETag'] = '"%s"' % (content.etag)     if serve:       self.response.out.write(content.body)     else:       self.response.set_status(304)    def get(self path):     content = get(path)     if not content:       self.error(404)       return      serve = True     if 'If-Modified-Since' in self.request.headers:       last_seen = datetime.datetime.strptime(           self.request.headers['If-Modified-Since']           HTTP_DATE_FMT)       if last_seen &gt;= content.last_modified.replace(microsecond=0):         serve = False     if 'If-None-Match' in self.request.headers:       etags = [x.strip('" ')                for x in self.request.headers['If-None-Match'].split('')]       if content.etag in etags:         serve = False     self.output_content(content serve)  
names = {}  while(parsing):     nick = nick_on_current_line     host = host_on_current_line         names[host] = nick  
class NewQuery(QtGui.QWidget):     def __init__(self parent):         QtGui.QWidget.__init__(self parent)  super class NewQuery(QtGui.QWidget):     def __init__(self parent):         super(NewQuery self).__init__(parent)  QtGui.QDialog 
self.defaultstyle = wx.richtext.RichTextAttr() self.GetStyle(self.GetInsertionPoint() self.defaultstyle) self.defaultsize = self.defaultstyle.GetFont().GetPointSize()  
Test2.__name__ def maketype(cls):     cls.type = TextField(default=cls.__name__)     return cls   @maketype maketype(Base) class __init__ __new__ 
&gt;&gt;&gt; import appscript &gt;&gt;&gt; iTunes = appscript.app("iTunes") &gt;&gt;&gt; lib = iTunes.playlists['Library'] &gt;&gt;&gt; for trk in lib.tracks(): ...     if re.search("test" trk.name()): ...         print trk.name()  &gt;&gt;&gt; trks = lib.tracks[appscript.its.name.contains('test')] &gt;&gt;&gt; print trks.name()  
QCoreApplication.processEvents()  scrapeLinksA scrapeLinksB updateInfo 
array 'L' &gt;&gt;&gt; array('L''\xff\xff\xff\xff\xff\xff\xff\xff') array('L' [18446744073709551615L])  'L' 
'-.' '-' markerline stemlines baseline = stem(x cos(x) '-')  
open import os.path f = open(os.path.dirname(__file__) + '/../data.yml')  
sys.stdout.flush() 
/home/cdecker/dev/acn/acn_a4/src/operator.py operator operator.py File "/usr/lib/python2.5/site-packages/Twisted-10.0.0-py2.5-linux-i686.egg/twisted/python/compat.py" line 146 in &lt;module&gt; import operator File "/home/cdecker/dev/acn/acn_a4/src/operator.py" line 7 in &lt;module&gt;  import operator myproject.mymodule 
__init__ class MyAdmin(admin.ModelAdmin):     def __init__(self model admin_site):         general_fields = ['notes' 'created_at' 'updated_at']         fields = [f.name for f in self.model._meta.fields if f.name not in general_fields]         self.fields = fields + general_fields         super(admin.ModelAdmin self).__init__(model admin_site)  _field_name_cache 
from spidermonkey import Runtime rt = Runtime() cx = rt.new_context() result = cx.eval_script(whatyoupostedabove)  
__import__ 
import os import logging  class MyFileHandler(object):      def __init__(self dir logger handlerFactory **kw):         kw['filename'] = os.path.join(dir logger.name)         self._handler = handlerFactory(**kw)      def __getattr__(self n):         if hasattr(self._handler n):             return getattr(self._handler n)         raise AttributeError n  logger = logging.getLogger('test') logger.setLevel(logging.INFO) handler = MyFileHandler(os.curdir logger logging.FileHandler) logger.addHandler(handler) logger.info('hello mylogger')  
class Merge(object):     def __init__(self **extra_kws):         self.extra_kws = extra_kws     def __call__(self function):         def _wrapper(*args **kws):             kws.update(self.extra_kws)             return function(*args **kws)         return _wrapper  @Merge(foo='bar') def test(*args **kws):     print *args     print **kws  test.extra_kws['sun'] = 'dock'  test def merge(**extra_kws):     class _Merge(object):         def __init__(self function):             self.extra_kws = extra_kws             self.function = function         def __call__(self *args **kws):             kws.update(self.extra_kws)             return self.function(*args **kws)     return _Merge  @merge(foo='bar') def test(*args **kws):     print 'args:' args     print 'kws:' kws  test(sun='dock') test.extra_kws['trog'] = 'cube' test(sun='dock')  def merge(**extra_kws):     def _decorator(function):         def _wrapper(*args **kws):             kws.update(_wrapper.extra_kws)             return function(*args **kws)         _wrapper.extra_kws = extra_kws         return _wrapper     return _decorator  @merge(foo='bar') def test(*args **kws):     print 'kws:' kws  test(sun='dock') test.extra_kws['trog'] = 'cube' test(sun='dock')  
def foo(a):     pass  def bar(b):     foo(b 2)  def some_func():     bar(3)  if __name__=='__main__':     import pdb     pdb.set_trace()  C:\temp&gt;test.py --Return-- &gt; c:\temp\test.py(12)&lt;module&gt;()-&gt;None -&gt; pdb.set_trace() (Pdb) import traceback (Pdb) exec "try: some_func()\nexcept: traceback.print_exc()" Traceback (most recent call last):   File "&lt;string&gt;" line 1 in &lt;module&gt;   File "C:\temp\test.py" line 8 in some_func     bar(3)   File "C:\temp\test.py" line 5 in bar     foo(b 2) TypeError: foo() takes exactly 1 argument (2 given) (Pdb)  
Cache-Control: public Cache-Control: max-age=nn 
User ReadOnlyUser User.get_by_id(1).readonly() readonly class User(db.Model):     def readonly(self):         return ReadOnlyUser(self.name self.id);  User 
vals = array([[1 10] [1 11] [2 20] [2 21] [2 22]])  # Example  (x y) = vals.T  # Shortcut bin_limits = range(min(x)+1 max(x)+2)  # Other limits could be chosen points_by_bin = [ [] for _ in bin_limits ]  # Final result for (bin_num y_value) in zip(searchsorted(bin_limits x "right") y):  # digitize() finds the correct bin number     points_by_bin[bin_num].append(y_value)  print points_by_bin  # [[10 11] [20 21 22]]  searchsorted() where() 
import urllib  def save(self):     location = "%s %s %s %s" % (self.address self.city self.state self.zip)      if not self.latitude or not self.longitude:         latlng = self.geocode(location)         latlng = latlng.split('')         self.latitude = latlng[0]         self.longitude = latlng[1]      super(Marker self).save()  def geocode(self location):     output = "csv"     location = urllib.quote_plus(location)     request = "http://maps.google.com/maps/geo?q=%s&amp;output=%s&amp;key=%s" % (location output settings.GOOGLE_API_KEY)     data = urllib.urlopen(request).read()     dlist = data.split('')     if dlist[0] == '200':         return "%s%s" % (dlist[2] dlist[3])     else:         return ''  
{ } addr_list_formatted.append("""     "{0}"     {{     "gamedir"  "str"     "address"  "{1}"     }} """.format(addr_list_idx addr))  
app_plan.cap SELECT "app_phone"."id" "app_phone"."plan_id" "app_plan"."cap" SUM("app_call"."cost") AS "total_cost" FROM "app_phone" INNER JOIN "app_plan" ON ("app_phone"."plan_id" = "app_plan"."id") LEFT OUTER JOIN "app_call" ON ("app_phone"."id" = "app_call"."phone_id") GROUP BY "app_phone"."id" "app_phone"."plan_id" "app_plan"."cap" HAVING SUM("app_call"."cost") &gt;=  0.5 * "app_plan"."cap"  Phone.objects.extra({     "plan_cap": "app_plan.cap" }).annotate(     total_cost=Sum('calls__cost') ).filter(total_cost__gte=0.5*F('plan__cap'))  app_plan.cap SELECT "app_phone"."id" "app_phone"."plan_id" SUM("app_call"."cost") AS "total_cost" AVG("app_plan"."cap") AS "avg_cap" FROM "app_phone" INNER JOIN "app_plan" ON ("app_phone"."plan_id" = "app_plan"."id") LEFT OUTER JOIN "app_call" ON ("app_phone"."id" = "app_call"."phone_id") GROUP BY "app_phone"."id" "app_phone"."plan_id" HAVING SUM("app_call"."cost") &gt;=  0.5 * AVG("app_plan"."cap")  Phone.objects.annotate(     total_cost=Sum('calls__cost')      avg_cap=Avg('plan__cap') ).filter(total_cost__gte=0.5 * F("avg_cap"))  
import re xed_re = re.compile(r'&amp;#(\d+);') def usub(m): return unichr(int(m.group(1)))  s = '&amp;#227; &amp;#1606; &amp;#1588;' u = xed_re.sub(usub s)  print u ã ? ?  htmlentitydefs 
with with fileh = open(file 'w') try:     # Do things with fileh here finally:     fileh.close()  
xpath() doc.xpath("//a[re:match(text() 'some text')]"          namespaces={"re": "http://exslt.org/regular-expressions"})  
commands[com](*args)  
('Ubuntu' '10.04' 'lucid')  strace open("/etc/lsb-release" O_RDONLY|O_LARGEFILE) = 3 fstat64(3 {st_mode=S_IFREG|0644 st_size=102 ...}) = 0 fstat64(3 {st_mode=S_IFREG|0644 st_size=102 ...}) = 0 mmap2(NULL 4096 PROT_READ|PROT_WRITE MAP_PRIVATE|MAP_ANONYMOUS -1 0) = 0xb76b1000 read(3 "DISTRIB_ID=Ubuntu\nDISTRIB_RELEAS"... 8192) = 102 read(3 "" 4096)                       = 0 read(3 "" 8192)                       = 0 close(3)                                = 0  /etc/lsb-release 
feedparser.py app.yaml index.yaml main.py .py 
json.loads str loads str unicode loads 
.group(1) .group(0) 
__init__ self.aList 
DATABASE_OPTIONS = {     'use_unicode': True     'charset': 'utf8' }  
ensure_ascii=False 
MixinClass1 __old_method1 __method1 MixInClass1 MixinClass1 class MixInClass1(object):     def __init__(self):         self.__old_method1self.method1=self.method1self.__method1         super(MixInClass1 self).__init__()             def __method1(self):         print "pre1()"         self.__old_method1()         print "post1()"  class MixInClass2(object):     def __init__(self):         super(MixInClass2 self).__init__()             def method1_hook(self):         print('MixIn method1')  class Foo(MixInClass2MixInClass1):     def method1(self):         print "do_something()"         getattr(self'method1_hook'lambda *args**kw: None)()         print "do_more()"  foo=Foo() foo.method1()  
othermodule.py import sys def decorator(cls):     mod = __import__(cls.__module__)     mod.root = cls  
os.rename(src dst) $ ls cheese_cheese_type.bar  cheese_cheese_type.foo $ python &gt;&gt;&gt; import os &gt;&gt;&gt; for filename in os.listdir("."): ...  if filename.startswith("cheese_"): ...    os.rename(filename filename[7:]) ...  &gt;&gt;&gt;  $ ls cheese_type.bar  cheese_type.foo  
wx.TE_RICH wx.TE_RICH2 
def do_it(*args):     if not args: args = (2 5 21)  def do_it(a=2 b=5 c=21 *args):     args = (abc)+args  
class TakingCourse(models.Model):     course = models.ForeignKey(Course)     term = models.ForeignKey(Term)      class Meta:         unique_together = ('course' 'term')  class MyUser(models.Model):     user = models.OneToOneField(User)     takingReqSets = models.ManyToManyField(RequirementSet blank=True)     takingCourses = models.ManyToManyField(Course through='TakingCourse' blank=True null=True)     school = models.ForeignKey(School)  class TakingCourse(models.Model):     my_user = models.ForeignKey(MyUser)     course = models.ForeignKey(Course)     term = models.ForeignKey(Term)      class Meta:          unique_together = ('my_user' 'course')  
/Library/Frameworks/Python.framework 
import os uuid return uuid.UUID(bytes=os.urandom(16) version=4)  
app_label 
MIS Notes:.*(//p//)?.* "MIS Notes: //p//" MIS Notes: "MIS Notes:" .* "MIS Notes: //p//" (//p//)? .* MIS Notes:.*(//p//).* MIS Notes: "MIS Notes:" .* "MIS Notes: //p//" (//p//) "MIS Notes: " (//p//) "//p//" .* MIS Notes:.*?//(p)// MIS Notes: "MIS Notes:" .*? "MIS Notes: " //(p)// "p" / //p// MIS Notes:[^/]*//(p)// MIS Notes: "MIS Notes:" [^/]* .*? //(p)// "p" 
itertools.groupby for k g in itertools.groupby(names lambda s: s.lower()):     # Example: in the first iteration:     #  k = "john"     #  g = an iterator over ["john" "John"]     # Process them as you like  
LIMIT 500 
for line in lines:   str = line.strip()   if (str != ""):     for i in range(0 4):       t.getNode(i).addNoiseTraceReading(val)  
initial data form = NewForm(initial=dict_of_field_values)  
a[start:stopi] a.__getitem__((slice(startstopNone) i)) TypeError a a import numpy as np arr=np.arange(12).reshape(43) print(arr) # [[ 0  1  2] #  [ 3  4  5] #  [ 6  7  8] #  [ 9 10 11]]  1:3 2 print(arr[1:32]) # [5 8]  __getitem__ class Foo(list):     def __getitem__(selfkey):         return repr(key)  foo=Foo(range(10)) print(foo[1:512]) # (slice(1 5 None) 1 2)  
def exec_sql(conn_or_cursor sql *args **kw):     if hasattr(conn_or_cursor):         cursor = conn_or_cursor.cursor()     else:         cursor = conn_or_cursor     cursor.execute(_convert_utf8(sql) *(_convert_utf8(a) for a in args)                    **dict((n _convert_utf8(v)) for n v in kw.iteritems()))     return cursor  def _convert_utf8(value):     if isinstance(value unicode):         return value.encode('utf8')     else:         return value  
In [35]: %timeit np.array(im_bw.convert('L')).astype(np.uint8) 10000 loops best of 3: 28 us per loop  In [36]: %timeit np.reshape(im_bw.getdata() im_bw.size) 10000 loops best of 3: 57.3 us per loop  import numpy as np import Image  x = np.arange(256 dtype=np.uint8).reshape((1616)) print 'Created array' print x  im = Image.fromarray(x) print 'Vales in grayscale PIL image using numpy.asarray &lt;-- Works as expected' print np.asarray(im)  print 'Converted to BW PIL image...' im_bw = im.convert('1')  print 'Values in BW PIL image using Image.getdata() &lt;-- Works as expected' print '  (Not a simple threshold due to dithering...)' # Dividing by 255 to make the comparison easier print np.reshape(im_bw.getdata() (16 16)) / 255   print 'Values in BW PIL image using numpy.asarray() &lt;-- Unexpected!' print '   (Same occurs when using numpy.array() to copy and convert.)' print np.asarray(im_bw).astype(np.uint8)   print 'Workaround convert back to type "L" before array conversion' print np.array(im_bw.convert('L')).astype(np.uint8) / 255  Created array [[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15]  [ 16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31]  [ 32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47]  [ 48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63]  [ 64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79]  [ 80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95]  [ 96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111]  [112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127]  [128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143]  [144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159]  [160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175]  [176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191]  [192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207]  [208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223]  [224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239]  [240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255]]  Vales in grayscale PIL image using numpy.asarray &lt;-- Works as expected [[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15]  [ 16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31]  [ 32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47]  [ 48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63]  [ 64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79]  [ 80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95]  [ 96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111]  [112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127]  [128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143]  [144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159]  [160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175]  [176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191]  [192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207]  [208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223]  [224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239]  [240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255]]  Converted to BW PIL image...  Values in BW PIL image using Image.getdata() &lt;-- Works as expected   (Not a simple threshold due to dithering...) [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]  [0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0]  [0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0]  [0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 1]  [0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0]  [1 0 1 0 1 0 1 0 1 0 0 0 1 1 0 1]  [0 1 0 1 0 0 1 0 0 1 1 0 1 0 1 0]  [1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1]  [0 1 0 1 0 1 0 1 0 1 1 0 1 1 0 1]  [1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1]  [1 0 1 1 0 1 0 1 1 0 1 1 0 1 1 0]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 0 1 0 1 1 0 1 1 0 1 1 1 0 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]]  Values in BW PIL image using numpy.asarray() &lt;-- Unexpected!    (Same occurs when using numpy.array() to copy and convert.) [[0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [0 1 1 1 1 1 1 0 0 0 0 0 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]]  Workaround convert back to type "L" before array conversion [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]  [0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0]  [0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0]  [0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 1]  [0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0]  [1 0 1 0 1 0 1 0 1 0 0 0 1 1 0 1]  [0 1 0 1 0 0 1 0 0 1 1 0 1 0 1 0]  [1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1]  [0 1 0 1 0 1 0 1 0 1 1 0 1 1 0 1]  [1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1]  [1 0 1 1 0 1 0 1 1 0 1 1 0 1 1 0]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 0 1 0 1 1 0 1 1 0 1 1 1 0 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]]  
decimal import decimal &gt;&gt;&gt; v1 = 0.982769777778 &gt;&gt;&gt; v2 = 0.985980444444 &gt;&gt;&gt; from decimal import Decimal &gt;&gt;&gt; d1 = Decimal(str(v1)).quantize(Decimal('0.01')) &gt;&gt;&gt; d2 = Decimal(str(v2)).quantize(Decimal('0.01')) &gt;&gt;&gt; diff = d2 - d1 &gt;&gt;&gt; print d1 d2 diff 0.98 0.99 0.01  
for member in theList:     print "%.2f" % member  formattedList = ["%.2f" % member for member in theList]  print formattedList  % format 
if type(arg) is not datetime.date:     raise TypeError('arg must be a datetime.date not a %s' % type(arg))  assert python -o AssertionError TypeError isinstance datetime.date datetime.datetime 
re.findall(r"[a-zA-Z0-9]+"txt)  re.split(r"[\s\.\-_\?]+"txt)  
import random def main():     wordsf = open('words.txt' 'r')     words = [line.rstrip('\n') for line in wordsf]     wordsf.close()      random_number = random.randint(0 len(words)-1)     random_word = words[random_number]     print random_word  
re.split(r"[^\w']+"text)  w [^\w'] ^ \w 
for w in words:     if w != '':         # ...  
&gt;&gt;&gt; max(a key=sum) [4 5 6]  
strace execve("/usr/bin/python" ["python" "a.py"] [/* 43 vars */]) = 0 open("print.txt" O_WRONLY|O_CREAT|O_TRUNC|O_LARGEFILE 0666) = 3 write(3 "test_print\n" 11)            = 11 close(3)                                = 0  execve("/usr/bin/python" ["python" "b.py"] [/* 43 vars */]) = 0 open("write.txt" O_WRONLY|O_CREAT|O_TRUNC|O_LARGEFILE 0666) = 3 write(3 "test_write\n" 11)            = 11 close(3)                                = 0  
from Tkinter import *   root = Tk()  f = Frame(root bg = "orange" width = 500 height = 500) f.pack(side=LEFT expand = 1)  f3 = Frame(f bg = "red" width = 500) f3.pack(side=LEFT expand = 1 pady = 50 padx = 50)  f2 = Frame(root bg = "black" height=100 width = 100) f2.pack(side=LEFT fill = Y)  b = Button(f2 text = "test") b.pack()  b = Button(f3 text = "1" bg = "red") b.grid(row=1 column=3) b2 = Button(f3 text = "2") b2.grid(row=1 column=4) b3 = Button(f3 text = "2") b3.grid(row=2 column=0)  root.mainloop()  
super(B self).__init__(*args **kwargs)  
&gt;&gt;&gt; print "%+d" % (-1) -1 &gt;&gt;&gt; &gt;&gt;&gt; print "%+d" % (1) +1 &gt;&gt;&gt; print "%+d" % (0) +0 &gt;&gt;&gt;  % &gt;&gt;&gt; total = -10; print "Total:" + ["" "+"][total &gt; 0] + str(total) Total:-10 &gt;&gt;&gt; total = 0; print "Total:" + ["" "+"][total &gt; 0] + str(total) Total:0 &gt;&gt;&gt; total = 10; print "Total:" + ["" "+"][total &gt; 0] + str(total) Total:+10 &gt;&gt;&gt;  
self.crumb = self._breadcrumb(father)   self.crumb = self._breadcrumb(self)  class GeoObject(models.Model):     name = models.CharField('Name'max_length=30)     father = models.ForeignKey('self' related_name = 'geo_objects')     crumb = PickledObjectField()     # more attributes...      def _breadcrumb(self):         ...         return breadcrumb      def save(self*args **kwargs):         self.crumb = self._breadcrumb()         super(GeoObject self).save(*args**kwargs)  
 re.sub(r'(?:_a)?\.([^.]*)$' r'_suff.\1' "long.file.name.jpg")  ?: (?:_a) _a .&lt;anything&gt; _a 
for i in MAC1_Val:     print "%.6e" % i  1.000000e+00 -1.000000e+01 -2.063066e+02 2.226357e+02 1.000000e+00 1.000000e+01 1.000000e+01  
True False True False 1 0 False bool int object    |  int    |  bool  ['zero' 'one'][False] __index__ 
pickle.load(file) pickle.loads(string) 
period = '-P14D' regex  = re.compile('(?P&lt;sign&gt;-?)P(?:(?P&lt;years&gt;\d+)Y)?(?:(?P&lt;months&gt;\d+)M)?(?:(?P&lt;days&gt;\d+)D)?(?:T(?:(?P&lt;hours&gt;\d+)H)?(?:(?P&lt;minutes&gt;\d+)M)?(?:(?P&lt;seconds&gt;\d+)S)?)?')  # Fetch the match groups with default value of 0 (not None) duration = regex.match(period).groupdict(0)  # Create the timedelta object from extracted groups delta = timedelta(days=int(duration['days']) + (int(duration['months']) * 30) + (int(duration['years']) * 365)                   hours=int(duration['hours'])                   minutes=int(duration['minutes'])                   seconds=int(duration['seconds']))  if duration['sign'] == "-":     delta *= -1  
&gt;&gt;&gt; lista = ['a' 'b' 'foo' 'c' 'd' 'e' 'bar'] &gt;&gt;&gt; next(i for i in lista if len(i) &gt; 2) 'foo'  
 @rem Test environment using this table: @rem @rem Environment Variable       32bit Native    64bit Native    WOW64 @rem PROCESSOR_ARCHITECTURE     x86             AMD64           x86 @rem PROCESSOR_ARCHITEW6432     undefined       undefined       AMD64 @rem  pre> 
self.turnnow &gt;&gt;&gt; var = () &gt;&gt;&gt; print "%s" % (var) Traceback (most recent call last):   File "&lt;stdin&gt;" line 2 in &lt;module&gt; TypeError: not enough arguments for format string &gt;&gt;&gt; print "%s" % (var) ()  (expr) expr (expr ) expr self.turnnow print 
list tuple dict 
self.request.url  self.request.query_string  self.request.get("name-of-querystring-variable")  
list(reversed(list(open('foo.txt'))))  open('foo.txt' 'w').writelines(reversed(data))  data list(data) 
bind s.setsockopt(socket.SOL_SOCKET socket.SO_REUSEADDR 1)  
f.flush()  f f.close()  
getattr &gt;&gt;&gt; argv = ['function.py' 'run' 'Hello'] &gt;&gt;&gt; class A:     def run(self *args):         print(*args)   &gt;&gt;&gt; getattr(A() argv[1])(*argv[2:]) Hello  
class test():     def __init__(self var):         self.var = var      def value(self):         print self.var  test_inst = test(var) test_inst.value()  
property _x property property property property property property self 
substitute print s.substitute(x='lee')  s 
print k print repr(k) k = m.hexdigest() k = repr(m.digest()) &gt;&gt;&gt; print k ?1???Y?6???M &gt;&gt;&gt; print repr(k) '\xec\x9d1\x89e\x08\xa1\xc2Y\xf6\xbf6\xfe\xe4\xe2M' &gt;&gt;&gt; print k.encode("hex") ec9d31896508a1c259f6bf36fee4e24d  
#!/bin/sh cdsitepackages ln -s /path/to/system/site-packages/package-name cdvirtualenv  
relationship() order_by relationship primaryjoin 
def get_upper(my_string):   return my_string.upper()  
get_grouped_opcodes SequenceMatcher(None a b).get_grouped_opcodes() ('replace' 24 29 24 29) ('insert' 33 33 33 35)  'delete' 'equal' difflib.unified_diff() 
dict.iteritems() for kv in d.iteritems():               # will become d.items() in py3k   print "%s - %s" % (str(k) str(v))  for kv in d.items():   print (f"{k} - {v}")  
MyObject type type(name bases dict)      Return a new type object. This is essentially a dynamic form of the      class statement...   mydict={'__tablename__':stored['tablename']         '__table_args__':{'autoload':True}}  MyObj=type(stored['objectname'](Base)mydict) print(MyObj) # &lt;class '__main__.MyObject'&gt; print(MyObj.__base__) # &lt;class '__main__.Base'&gt; print(MyObj.__tablename__) # my_internal_table_name print(MyObj.__table_args__) # {'autoload': True}  
from __future__ import with_statement import time import re from cStringIO import StringIO  def word_iter_std(filename):     start = time.time()     with open(filename) as f:         for line in f:             for word in line.split():                 yield word     print 'iter_std took %0.6f seconds' % (time.time() - start)  def word_iter_re(filename):     start = time.time()     with open(filename) as f:         txt = f.read()     for word in re.finditer('\w+' txt):         yield word     print 'iter_re took %0.6f seconds' % (time.time() - start)  def word_iter_stringio(filename):     start = time.time()     with open(filename) as f:         io = StringIO(f.read())     for line in io:         for word in line.split():             yield word     print 'iter_io took %0.6f seconds' % (time.time() - start)  woo = '/tmp/woo.txt'  for word in word_iter_std(woo): pass for word in word_iter_re(woo): pass for word in word_iter_stringio(woo): pass  % python /tmp/junk.py iter_std took 0.016321 seconds iter_re took 0.028345 seconds iter_io took 0.016230 seconds  
myFakeFile = StringIO.StringIO() wtr = csv.DictWriter( myFakeFile headings ) ... myFakeFile.getvalue()  
import csv  groups = dict(a=headers_for_list_a b=headers_for_list_b) lists = dict((name []) for name in groups)  for row in csv.DictReader(csvfile fieldnames=headers):     for name grp_headers in groups.items():         lists[name].append(dict((header row[header]) for header in grp_headers))  
# This is the algorithm you described but also returns the number of chunks. new_file_hash nchunks = hash_for_tile(new_file) store_file(new_file nchunks hash)  def store_file(file nchunks hash):   "" Tells you whether there is another file with the same contents already by       making a table lookup ""   # This can be a DB lookup or some way to obtain your hash map   big_table = ObtainTable()    # Two level lookup table might help performance   # Will vary on the number of entries and nature of big_table   if nchunks in big_table:      if hash in big_table[hash]:        raise DuplicateFileException\          'File is dup with %s' big_table[nchunks][lookup_hash]   else:     big_table[nchunks] = {}    big_table[nchunks].update({     hash: file.filename   })    file.save() # or something  
positions = ((n n + hits_per_page - 1) for n in xrange(1 total_hits hits_per_page)) for start end in positions:  end hits_per_page httplib2 urllib urllib2 
foo = range(100000) new_foo = [] for item in foo:     if item % 3 != 0: # Things divisble by 3 don't get through         new_foo.append(item)   new_foo = [item for item in foo if item % 3 != 0]  foo new_foo del foo = xrange(100000) # Like generators xrange is lazy def filter_divisible_by_three(iterable):     for item in foo:         if item % 3 != 0:             yield item  new_foo = filter_divisible_by_three(foo)  new_foo = (item for item in foo if item % 3 != 0)  numpy 
re.findall(r'\d\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{4}' text)  
ifequal import os os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'  from google.appengine.dist import use_library use_library('django' '1.1')  ifequal class MyHandler(webapp.RequestHandler):     def get(self):         foo_list = db.GqlQuery(...)         ...         template_values['foos'] = foo_list         template_values['foo_count'] = len(foo_list)         template_values['one_foo'] = len(foo_list) == 1         handler.response.out.write(template.render(...))  {% if one_foo %}     You have one foo. {% endif %}  {% if foo_list %}     You have {{ foo_count }} foo{{foo_count|pluralize}}. {% else %}     You have no foos {% endif %}  
match = re.search(r"\bOne\b(.*?)\bThree\b" text re.DOTALL) if match:     betweenwords = match.group(1)     dates = re.findall(r'\d\d (?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4}' betweenwords)   
urllib.urlopen import socket timeout = 10 socket.setdefaulttimeout(timeout)  
&amp; 
setattr &gt;&gt;&gt; class A(object): ...     pass ...  &gt;&gt;&gt; a = A() &gt;&gt;&gt; f = 'field' &gt;&gt;&gt; setattr(a f 42) &gt;&gt;&gt; a.field 42  
pg_dump psql pg_dump -t &lt;table&gt; 
&lt;form&gt; form.save() prefix 
__init__ class Empty: pass e = Empty() e.f = 5 print e.f # shows 5  A name A A a a A B a.name a A.name 
^activity/(?P&lt;info&gt;\d+)/$ info 
&lt;test&gt;&lt;/test&gt; &lt;test/&gt; &lt;test/&gt; &lt;test&gt;&lt;/test&gt; 
datetime.now() date = models.DateTimeField(auto_now_add=True blank=True)  date = models.DateTimeField(default=datetime.now blank=True)  datetime.now datetime.now() 
datetime.datetime import datetime  # # This creates new instace of `datetime.datetime` from a string according to # the pattern given as the second argument. # start = datetime.datetime.strptime(s_date '%Y%m%d') end = datetime.datetime.strptime(e_date '%Y%m%d')  # And now the query you want. Mind that you cannot use 'and' keyword # inside .filter() function. Fortunately .filter() automatically ANDs # all criteria you provide. Activity.objects.filter(timestamp__gte=start timestamp__lte=end)  
        App1---                __init__.py                models.py                test.py                urls.py                views.py                templatetags---                        __init__.py                        inclusion_test.py                           ...  register = template.Library()    @register.inclusion_tag('platform/templatetags/pagination_links.html') def pagination_links(page per_page link):  
class A(object):     def m(self):         print('m')  class B(A): pass  super &gt;&gt;&gt; super(B).m Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; AttributeError: 'super' object has no attribute 'm' &gt;&gt;&gt; super(B).__get__(B() B) &lt;super: &lt;class 'B'&gt; &lt;B object&gt;&gt;  super &gt;&gt;&gt; super(B B()).m &lt;bound method B.m of &lt;__main__.B object at 0xb765dacc&gt;&gt; &gt;&gt;&gt; super(B B()).m() m  super &gt;&gt;&gt; super(B B).m &lt;function m at 0xb761482c&gt; &gt;&gt;&gt; super(B B).m() Traceback (most recent call last):   File "&lt;stdin&gt;" line 1 in &lt;module&gt; TypeError: m() takes exactly 1 positional argument (0 given) &gt;&gt;&gt; super(B B).m(B()) m  
 from webob import Request Response from my_wsgi_application import App class MyMiddleware(object):     def <strong>init strong>(self app):         self.app = app     def <strong>call strong>(self environ start_response):         req = Request(environ)<br>         ...         rsp = req.get_response(app)         rsp.headers['Content-type'] = 'application/json'         return rsp(environ start_response)  pre> 
y NameError: name 'y' is not defined for x in range(4) y in range(4): for x in (range(4) y in range(4)):  for x in ([0123] 2 in range(4)):  for x in ([0123] True):  for x = [0123] x = True y 
import datetime start = datetime.datetime(2009 1 31) end = datetime.datetime(2009 2 1) diff = end-start print (diff.days * 1440) + (diff.seconds / 60) &gt;&gt; 1440.0  diff.microseconds print (diff.total_seconds() / 60)  
&gt;&gt;&gt; [[i for i j in enumerate(c) if j is not None] for c in zip(*list1)] [[0 1 2 3] [0 1 2 3] [0 2]]  itertools.izip zip 
result = numpy.empty(data.shape[0]) for i in range(len(data)):     result[i] = foo(data[i])  foo 
management.call_command('syncdb' interactive=False)  
&gt;&gt;&gt; [(i j) for i _ k in myList for j in k] [('Foo' 1) ('Foo' 2) ('Foo' 3) ('Bar' 'i') ('Bar' 'j')]  
graphData = {}  array.append(x)  graphData.append(line).    
src dst cmd from collections import namedtuple  DataClass = namedtuple("DataClass" "src dst cmd") d1 = DataClass(src='192.168.0.2' dst='192.168.0.1' cmd='cmd1')  DataClass d1 = DataClass(**d1_as_dict)  from collections import defaultdict namedtuple  r = defaultdict(int) for obj in [d1 d2 d3 d4]:     r[obj] += 1  namedtuple 
def get_file_size(filename):     "Get the file size by seeking at end"     fd= os.open(filename os.O_RDONLY)     try:         return os.lseek(fd 0 os.SEEK_END)     finally:         os.close(fd)  
theList 
dict values sort_keys=True 
awk = subprocess.Popen([r"awk" "{print $11}"] stdin=subprocess.PIPE) awk_stdout = awk.communicate(uptime_stdout)[0]  awk_stdout None awk_stdout.rstrip('\n') AttributeError None rstrip awk = subprocess.Popen([r"awk" "{print $11}"] stdin=subprocess.PIPE                        stdout=subprocess.PIPE) awk_stdout = awk.communicate(uptime_stdout)[0]  awk_stdout awk 
import numpy as np import numpy.lib.recfunctions  # Define the starting arrays as structured arrays with two fields ('key' and 'field') dtype = [('key' np.int) ('field' np.float)] x = np.array([(1 2)              (2 4)              (3 6)              (4 np.NaN)              (5 10)]              dtype=dtype)  y = np.array([(0 -5)              (1 0)              (2 5)              (5 20)              (6 25)]              dtype=dtype)  # You want an outer join rather than the default inner join # (all values are returned not just ones with a common key) join = np.lib.recfunctions.join_by('key' x y jointype='outer')  # Now we have a structured array with three fields: 'key' 'field1' and 'field2' # (since 'field' was in both arrays it renamed x['field'] to 'field1' and #  y['field'] to 'field2')  # This returns a masked array if you want it filled with # NaN's do the following... join.fill_value = np.NaN join = join.filled()  # Just displaying it... Keep in mind that as a structured array #  it has one dimension where each row contains the 3 fields for row in join:      print row  (0 nan -5.0) (1 2.0 0.0) (2 4.0 5.0) (3 6.0 nan) (4 nan nan) (5 10.0 20.0) (6 nan 25.0)  
def select_distinct(dictionaries keys):   seen = set()   for d in dictionaries:     v = tuple(d[k] for k in keys)     if v in seen: continue     yield v     seen.add(v)  .append yield for values_tuple in select_distinct(thedicts ('NAME' 'CLASS')):     ...  
# -*- encoding: utf-8 -*-  import json  data = {'name': u'André'} print('data: {0}'.format(repr(data)))  code = json.dumps(data) print('code: {0}'.format(repr(code)))  conv = json.loads(code) print('conv: {0}'.format(repr(conv)))  name = conv['name'] print(u'Name is {0}'.format(name))  data: {'name': u'Andr\xe9'} code: '{"name": "Andr\\u00e9"}' conv: {u'name': u'Andr\xe9'} Name is André  
import time def expires():     '''return a UNIX style timestamp representing 5 minutes from now'''     return int(time.time()+300)  
Hypertext Transfer Protocol     GET / HTTP/1.1\r\n         [Expert Info (Chat/Sequence): GET / HTTP/1.1\r\n]             [Message: GET / HTTP/1.1\r\n]             [Severity level: Chat]             [Group: Sequence]         Request Method: GET         Request URI: /         Request Version: HTTP/1.1     Accept-Encoding: identity\r\n     Host: api.apptrackr.org\r\n     Connection: close\r\n     User-Agent: Python-urllib/2.6\r\n     \r\n  Hypertext Transfer Protocol     POST / HTTP/1.1\r\n         [Expert Info (Chat/Sequence): POST / HTTP/1.1\r\n]             [Message: POST / HTTP/1.1\r\n]             [Severity level: Chat]             [Group: Sequence]         Request Method: POST         Request URI: /         Request Version: HTTP/1.1     User-Agent: PycURL/7.19.5\r\n     Host: api.website.com\r\n     Accept: */*\r\n     Content-Length: 365\r\n         [Content length: 365]     Content-Type: application/x-www-form-urlencoded\r\n     \r\n Line-based text data: application/x-www-form-urlencoded     [truncated]         request=%7B%22enc_key%22%3A%22o37vOsNetKgprRE0VsBYefYViP4%2ByB3pjxfkfCYtpgiQ%2ByxONgkhhsxtqAwaXwCrrgx%2BPDuDtMRZNI1ez//4Zw%3D%3D%22%2C%22format%22%3A%22RSA_RC4_Sealed%22%2C%22profile%22%3A%22Ldn%22%2C%22request%22%3A%22bQ%2BHm/  
urllib urllib2 cURL urllib2 
\t 
def str(self item):     print item      prev current = None self.__iter.next()     while isinstance(current int):         print current         prev current = current self.__iter.next()  prev class bidirectional_iterator(object):     def __init__(self collection):         self.collection = collection         self.index = 0      def next(self):         try:             result = self.collection[self.index]             self.index += 1         except IndexError:             raise StopIteration         return result      def prev(self):         self.index -= 1         if self.index &lt; 0:             raise StopIteration         return self.collection[self.index]      def __iter__(self):         return self  
stack.push(1 if stack.pop() &gt; stack.pop() else 0)  &gt; 1 0 stack.pop() x = stack.pop() y = stack.pop() stack.push(1 if x &gt; y else 0)  
if not hasattr(os 'symlink'): os.symlink = None  
numpy.pad ((00)(10)) import numpy as np x = np.array([[1 2 3][4 5 6]])  print np.pad(x((00)(10)) mode='constant')[: :-1]  [[0 1 2]  [0 4 5]]  
urllib urllib2 import os pprint for k in os.environ:     if 'proxy' in k.lower(): # look for proxy environment variables         print k os.environ[k]  ProxyHandler urllib2.ProxyHandler() 
mydict = dict((s[0] s[1:]) for s in myseq)  myseq = tuple(sorted((k) + v for k v in mydict.iteritems()))  
import datetime  today = datetime.date.today() weekday = today.weekday() start_delta = datetime.timedelta(days=weekday) start_of_week = today - start_delta week_dates = [start_of_week + datetime.timedelta(days=i) for i in range(7)] print week_dates  [datetime.date(2010 5 3) datetime.date(2010 5 4) datetime.date(2010 5 5) datetime.date(2010 5 6) datetime.date(2010 5 7) datetime.date(2010 5 8) datetime.date(2010 5 9)]  
field_start+field_length field_length if field_data != '' if field_data 
ctypes.windll.shell32.IsUserAnAdmin() ShellExecuteEx 
import subprocess time p = subprocess.Popen(['program1.exe']) time.sleep(1) # Parameter is in seconds p.terminate() p.wait()  
import random import time import sys  random.seed(time.time())  print 'starting random numbers' #sys.stdout.flush() print 'big block of text' * 2000 #sys.stdout.flush()  count = 3  while count &gt; 0:     sleeper = random.randint(1 5)     r = random.randint(1000 9000)     print r 'sleeping for' sleeper 'seconds'     #sys.stdout.flush()     time.sleep(sleeper)     count -= 1  print 'random numbers finished closing' #sys.stdout.flush()  
phes find_pixel_pairs.py phes 
for tag in tags:     tag_element = doc.createCDATASection(tag.thetag)     tags_element.appendChild(tag_element)  
timeList = [ '0:00:00' '0:00:15' '9:30:56' ] totalSecs = 0 for tm in timeList:     timeParts = [int(s) for s in tm.split(':')]     totalSecs += (timeParts[0] * 60 + timeParts[1]) * 60 + timeParts[2] totalSecs sec = divmod(totalSecs 60) hr min = divmod(totalSecs 60) print "%d:%02d:%02d" % (hr min sec)  9:31:11  
&gt;&gt;&gt; s = "Adam'sApple" &gt;&gt;&gt; x = s.replace("'" "") &gt;&gt;&gt; print x 'AdamsApple'  
(AutoOneToOneField)  (AutoOneToOneField)  
__init__ django.core.exceptions.MiddlewareNotUsed __init__ __init__ 
index .cgi .py index mod_python.util.FieldStorage cgi.FieldStorage 
bad foo good foo.set(0 9) 
__class__.__name__ __class__ __class__ self self.__nonexistant_attribute class C:     ...     def report_name(self):         print C.__name__  
'\xc3\xa9' u'\u00e9' u'\xe9' u'Andr\u00e9' u'Andr\xe9' &gt;&gt;&gt; 'Andr\xc3\xa9'.decode('utf-8') u'Andr\xe9' &gt;&gt;&gt; u'Andr\xe9'.encode('utf-8') 'Andr\xc3\xa9'  print 'Andr\xc3\xa9' &gt;&gt;&gt; print 'Andr\xc3\xa9' Andr??  
userquery User userquery = db.GqlQuery("SELECT * FROM User WHERE googleaccount = :1" users.get_current_user()) user = userquery.get() # Gets the first User instance from the query or None form = forms.AccountForm(data=request.POST or None instance=user)  
def cutit(sn):        return s[n:]  name = "MyFullName"  print cutit(name 2)   # prints "FullName"  
class A(object):     def my_method(self):         # Some complicated processing is done here         return 'Hi'  print(A.__dict__['my_method'](7)) # Hi  
common.media INSTALLED_APPS common 
f() #!/usr/bin/python # -*- coding: utf-8 -*-  from multiprocessing import Pool  def f(x):     return x*x  p = Pool(1) p.map(f [1 2 3])  
u'Andr\xe9' 'André' &gt;&gt;&gt; ''.join(chr(ord(c)) for c in u'Andr\xc3\xa9') 'Andr\xc3\xa9'  &gt;&gt;&gt; ''.join(chr(ord(c)) for c in u'Andr\xc3\xa9').decode('utf8') u'Andr\xe9'      
[diff "python"]         xfuncname = "&lt;regex goes here&gt;"  PATTERNS("python" "^[ \t]*((class|def)[ \t].*)$"          /* -- */          "[a-zA-Z_][a-zA-Z0-9_]*"          "|[-+0-9.e]+[jJlL]?|0[xX]?[0-9a-fA-F]+[lL]?"          "|[-+*/&lt;&gt;%&amp;^|=!]=|//=?|&lt;&lt;=?|&gt;&gt;=?|\\*\\*=?"          "|[^[:space:]|[\x80-\xff]+")          /* -- */  
d paid[j] if any(x in paid[j] for x in d): ...  d paid[j] contained = [x for x in d if x in paid[j]]  contained d paid[j] d paid[j] None firstone = next((x for x in d if x in paid[j]) None)  in x in paid[j] somere.search(paid[j]) somere d 
class Foo(object):     def beep(self):         print('Hi')  class Bar(object):     x=1    bar=Bar() # bar.beep() # AttributeError: 'Bar' object has no attribute 'beep'  Bar=type('Bar'(Fooobject)Bar.__dict__.copy()) bar.__class__=Bar bar.beep() # Hi  
class MyForm(forms.Form):     timestamp     = forms.IntegerField(widget=forms.HiddenInput initial=0)     #look at the initial = 0      security_hash = forms.CharField(min_length=40 max_length=40 widget=forms.HiddenInput)       def clean_timestamp(self):         """Make sure the delay is over (5 seconds)."""         ts = self.cleaned_data["timestamp"]         if timestamp != 0 and not time.time() - ts &gt; 5:             raise forms.ValidationError("Timestamp check failed")         return ts      def clean(self):         cleaned_data = self.cleaned_data         if len(self._errors) == 0: #it validates             cleaned_data["timestamp"] = time.time()         return cleaned_data  
/System/Library/Frameworks/Python.framework/Versions/2.6/Python 
&gt;&gt;&gt; import sys &gt;&gt;&gt;  &gt;&gt;&gt; def handler(type value traceback): &gt;&gt;&gt;     print "Blocked:" value &gt;&gt;&gt; sys.excepthook = handler &gt;&gt;&gt;  &gt;&gt;&gt; def foo(value): &gt;&gt;&gt;     print value &gt;&gt;&gt;  &gt;&gt;&gt; foo(x) Blocked: name 'x' is not defined  sys.excepthook foo() 
**kwargs kwargs = {Sing: SongVal} foo(**kwargs)  
table = User.__table__ field = table.c["fullname"] print "Type" field.type print "Length" field.type.length print "Nullable" field.nullable  
/Library/Frameworks/Python.framework/Versions/2.6/...  
range(1math.floor(math.sqrt(x))+1) range(math.floor(math.sqrt(x))) int math.floor 
minidom xml.dom xml.dom xml.dom nodeValue &gt;&gt;&gt; import xml.dom.minidom as xdm &gt;&gt;&gt; dom = xdm.parseString('&lt;foo bar="baz"/&gt;') &gt;&gt;&gt; root = dom.documentElement &gt;&gt;&gt; atr = root.getAttributeNode('bar') &gt;&gt;&gt; atr.nodeValue u'baz'  nodeValue value nodeValue minidom xml.etree.cElementTree minidom 
list url = 'domain.com/' for domain in list:     if url.startswith(domain):         ... do something ...  url = 'domain.com/' for domain in list:     domain_minus_www = domain     if domain_minus_www.startswith('www.'):         domain_minus_www = domain_minus_www[4:]     if url.startswith(domain) or url.startswith(domain_minus_www):         ... do something ...  
import re data = """part 1;"this is ; part 2;";'this is ; part 3';part 4;this "is ; part" 5""" PATTERN = re.compile(r'''((?:[^;"']|"[^"]*"|'[^']*')+)''') print PATTERN.split(data)[1::2]  ['part 1' '"this is ; part 2;"' "'this is ; part 3'" 'part 4' 'this "is ; part" 5']  ';;' ';&lt;marker&gt;;' &lt;marker&gt; &gt;&gt;&gt; marker = ";!$%^&amp;;" &gt;&gt;&gt; [r.replace(marker[1:-1]'') for r in PATTERN.split("aaa;;aaa;'b;;b'".replace(';;' marker))[1::2]] ['aaa' '' 'aaa' "'b;;b'"]  
import time  def wait_until(somepredicate timeout period=0.25 *args **kwargs):   mustend = time.time() + timeout   while time.time() &lt; mustend:     if somepredicate(*args **kwargs): return True     time.sleep(period)   return False  somepredicate and threading.Event 
itertools.repeat() L = list(itertools.repeat("a" 20)) # 20 copies of "a"  L = list(itertools.repeat(10 20))  # 20 copies of 10  L = list(itertools.repeat(['x''y'] 20)) # 20 copies of ['x''y']  L = [['x''y'] for i in range(20)]  xrange() range() 
.key().id() None Key 
python Python re.IGNORECASE title = win32gui.GetWindowText(win32gui.GetForegroundWindow()) if re.search(title "python" re.IGNORECASE):     print "Found it!"  if title.lower().find("python") &gt;= 0:  
Session.merge() Session.add() 
thread = Thread.get(db.Key.from_path('Thread' int(id))) if thread:   is_member = thread.user_is_member(user) else:   is_member = False  thread = Thread.get(db.Key.from_path('Thread' int(id))) is_member = thread.user_is_member(user) if thread else False  
gitattributes(5) echo '*.py diff=python' &gt;&gt; "${XDG_CONFIG_HOME:-$HOME/.config}"/git/attributes diff=python .gitattributes man 5 gitattributes --word-diff git config --global diff.stackoverflow-word-diff.command ~/.local/bin/stackoverflow-word-diff  cat &gt; ~/.local/bin/stackoverflow-word-diff &lt;&lt; 'EOF' #!/bin/bash -eu  #-- uncomment for debug: #echo &gt;&amp;2 "$(basename $0) args: $@"; set -x  FILENAME="$1" OLDFILE="$2" OLDHASH="$3" OLDMODE="$4" NEWFILE="$5" NEWHASH="$6" NEWMODE="$7"  git diff --no-ext-diff --word-diff "$OLDFILE" "$NEWFILE" || exit 0  #-- from https://stackoverflow.com/a/18948381/531179 #-- see `man 1 git` /EXTERNAL_DIFF or https://www.git-scm.com/docs/git EOF chmod +x ~/.local/bin/stackoverflow-word-diff  *.md *.markdown mkdir -vp "${XDG_CONFIG_HOME:-$HOME/.config}"/git  { echo '*.md diff=stackoverflow-word-diff'; \   echo '*.markdown diff=stackoverflow-word-diff; \ } \     &gt;&gt; "${XDG_CONFIG_HOME:-$HOME/.config}"/git/attributes  
from datetime import datetime  fmt = '%Y-%m-%d %H:%M:%S' d1 = datetime.strptime('2010-01-01 17:31:22' fmt) d2 = datetime.strptime('2010-01-03 17:31:22' fmt)  print (d2-d1).days * 24 * 60  
unittest 
strace strace -f python my_script.py &gt; strace.out 2&gt;&amp;1  
cls __init__ cls = type(cls.__name__ (cls EmbeddedDocument) {'a': FloatField(required=True) 'b': FloatField(required=True)})  type() 
